diff --git a/.gitignore b/.gitignore
index 238fb3a200..975c5364d8 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,6 @@ tests/coverage_html/
 tests/.coverage
 build/
 tests/report/
+*__pycache__*
+*venv*
+*_build*
diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py
index c957ffa564..7e8ece288f 100644
--- a/django/db/models/query_utils.py
+++ b/django/db/models/query_utils.py
@@ -41,16 +41,19 @@ class Q(tree.Node):
 
     def _combine(self, other, conn):
         if not isinstance(other, Q):
-            raise TypeError(other)
+            # For non-Q objects like Exists, create a new Q object
+            obj = type(self)()
+            obj.connector = conn
+            obj.add(self, conn)
+            obj.add(other, conn)
+            return obj
 
         # If the other Q() is empty, ignore it and just use `self`.
         if not other:
-            _, args, kwargs = self.deconstruct()
-            return type(self)(*args, **kwargs)
+            return self
         # Or if this Q is empty, ignore it and just use `other`.
         elif not self:
-            _, args, kwargs = other.deconstruct()
-            return type(other)(*args, **kwargs)
+            return other
 
         obj = type(self)()
         obj.connector = conn
@@ -64,12 +67,27 @@ class Q(tree.Node):
     def __and__(self, other):
         return self._combine(other, self.AND)
 
+    def __rand__(self, other):
+        """
+        Return a new Q object combining this one and the other one using AND.
+        This method is called when a non-Q object is on the left side of &.
+        """
+        # Create a new Q object with the other operand
+        other_q = Q()
+        other_q.add(other, other_q.AND)
+        # Combine it with self
+        return other_q & self
+
     def __invert__(self):
         obj = type(self)()
         obj.add(self, self.AND)
         obj.negate()
         return obj
 
+    def __rand__(self, other):
+        """Handle the case when a non-Q object is on the left side of &."""
+        return self.__and__(other)
+
     def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False):
         # We must promote any new joins to left outer joins so that when Q is
         # used as an expression, rows aren't filtered due to joins.
diff --git a/reproduce/test_fix.py b/reproduce/test_fix.py
new file mode 100644
index 0000000000..77f8acadb1
--- /dev/null
+++ b/reproduce/test_fix.py
@@ -0,0 +1,59 @@
+import django
+from django.db.models import Q
+from django.db.models.expressions import Exists
+from django.db.models.query import QuerySet
+
+# Mock a queryset for testing
+class MockQuerySet(QuerySet):
+    def all(self):
+        return self
+
+    def __init__(self):
+        pass
+
+# Test both combinations
+print("Testing Exists(...) & Q():")
+try:
+    result = Exists(MockQuerySet()) & Q()
+    print("Success! Result:", result)
+except TypeError as e:
+    print(f"Failed with TypeError: {e}")
+
+print("\nTesting Q() & Exists(...):")
+try:
+    result = Q() & Exists(MockQuerySet())
+    print("Success! Result:", result)
+except TypeError as e:
+    print(f"Failed with TypeError: {e}")
+
+# Test with non-empty Q objects
+print("\nTesting with non-empty Q objects:")
+print("Testing Exists(...) & Q(id=1):")
+try:
+    result = Exists(MockQuerySet()) & Q(id=1)
+    print("Success! Result:", result)
+except TypeError as e:
+    print(f"Failed with TypeError: {e}")
+
+print("\nTesting Q(id=1) & Exists(...):")
+try:
+    result = Q(id=1) & Exists(MockQuerySet())
+    print("Success! Result:", result)
+except TypeError as e:
+    print(f"Failed with TypeError: {e}")
+
+# Test with negation
+print("\nTesting with negation:")
+print("Testing ~(Exists(...) & Q()):")
+try:
+    result = ~(Exists(MockQuerySet()) & Q())
+    print("Success! Result:", result)
+except TypeError as e:
+    print(f"Failed with TypeError: {e}")
+
+print("\nTesting ~(Q() & Exists(...)):")
+try:
+    result = ~(Q() & Exists(MockQuerySet()))
+    print("Success! Result:", result)
+except TypeError as e:
+    print(f"Failed with TypeError: {e}")
\ No newline at end of file
diff --git a/reproduce/test_q_exists.py b/reproduce/test_q_exists.py
new file mode 100644
index 0000000000..d9f530c28d
--- /dev/null
+++ b/reproduce/test_q_exists.py
@@ -0,0 +1,23 @@
+from django.db.models import Q
+from django.db.models.expressions import Exists
+from django.db.models import Model
+
+# Mock a simple model for testing
+class Product(Model):
+    class Meta:
+        app_label = 'testapp'
+
+# Test both combinations
+print("Testing Exists(...) & Q():")
+try:
+    result = Exists(Product.objects.all()) & Q()
+    print("Success!")
+except TypeError as e:
+    print(f"Failed with TypeError: {e}")
+
+print("\nTesting Q() & Exists(...):")
+try:
+    result = Q() & Exists(Product.objects.all())
+    print("Success!")
+except TypeError as e:
+    print(f"Failed with TypeError: {e}")
\ No newline at end of file
