diff --git a/django/db/models/query.py b/django/db/models/query.py
index be0deb90b0..3121c7d93e 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -1438,7 +1438,7 @@ class QuerySet:
         return self._filter_or_exclude(True, args, kwargs)
 
     def _filter_or_exclude(self, negate, args, kwargs):
-        if (args or kwargs) and self.query.is_sliced:
+        if (args or kwargs) and self.query.is_sliced and not getattr(self, '_allow_sliced_filter', False):
             raise TypeError("Cannot filter a query once a slice has been taken.")
         clone = self._chain()
         if self._defer_next_filter:
@@ -2145,16 +2145,17 @@ class Prefetch:
         self.prefetch_through = lookup
         # `prefetch_to` is the path to the attribute that stores the result.
         self.prefetch_to = lookup
-        if queryset is not None and (
-            isinstance(queryset, RawQuerySet)
-            or (
+        if queryset is not None:
+            if isinstance(queryset, RawQuerySet) or (
                 hasattr(queryset, "_iterable_class")
                 and not issubclass(queryset._iterable_class, ModelIterable)
-            )
-        ):
-            raise ValueError(
-                "Prefetch querysets cannot use raw(), values(), and values_list()."
-            )
+            ):
+                raise ValueError(
+                    "Prefetch querysets cannot use raw(), values(), and values_list()."
+                )
+            # If the queryset is sliced, evaluate it immediately to get the sliced results
+            if queryset.query.is_sliced:
+                queryset = queryset.model.objects.filter(pk__in=[obj.pk for obj in queryset])
         if to_attr:
             self.prefetch_to = LOOKUP_SEP.join(
                 lookup.split(LOOKUP_SEP)[:-1] + [to_attr]
diff --git a/reproduce_prefetch_slice.py b/reproduce_prefetch_slice.py
new file mode 100644
index 0000000000..57f616ed94
--- /dev/null
+++ b/reproduce_prefetch_slice.py
@@ -0,0 +1,59 @@
+from django.db import models
+from django.db.models import Prefetch
+from django.test import TestCase
+
+# Create test data and reproduce the issue
+if __name__ == '__main__':
+    # Setup Django
+    import django
+    from django.conf import settings
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+            'django.contrib.admin',
+            '__main__',
+        ]
+    )
+    django.setup()
+
+    # Define test models
+    class Category(models.Model):
+        name = models.CharField(max_length=100)
+
+    class Post(models.Model):
+        category = models.ForeignKey(Category, on_delete=models.CASCADE)
+        title = models.CharField(max_length=100)
+
+    # Create database tables
+    from django.db import connection
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(Category)
+        schema_editor.create_model(Post)
+
+    # Create test data
+    category = Category.objects.create(name='Test Category')
+    for i in range(5):
+        Post.objects.create(category=category, title=f'Post {i}')
+
+    # Try to prefetch with slice
+    try:
+        categories = Category.objects.prefetch_related(
+            Prefetch(
+                'post_set',
+                queryset=Post.objects.all()[:3],
+                to_attr='example_posts'
+            )
+        )
+        print("Success! Got categories with prefetched posts:")
+        for cat in categories:
+            print(f"Category: {cat.name}")
+            print(f"Example posts: {[post.title for post in cat.example_posts]}")
+    except Exception as e:
+        print(f"Error occurred: {str(e)}")
\ No newline at end of file
