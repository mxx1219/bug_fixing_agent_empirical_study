diff --git a/astropy/wcs/wcsapi/wrappers/sliced_wcs.py b/astropy/wcs/wcsapi/wrappers/sliced_wcs.py
index d7605b078c..6954d66480 100644
--- a/astropy/wcs/wcsapi/wrappers/sliced_wcs.py
+++ b/astropy/wcs/wcsapi/wrappers/sliced_wcs.py
@@ -251,11 +251,30 @@ class SlicedLowLevelWCS(BaseWCSWrapper):
                 iworld_curr += 1
                 world_arrays_new.append(world_arrays[iworld_curr])
             else:
-                world_arrays_new.append(1.)
+                # For dropped dimensions, we need to handle the case where there's coupling
+                # between dimensions (non-diagonal PCij matrix)
+                dropped_idx = sum(1 for i in range(iworld) if i not in self._world_keep)
+                if dropped_idx < len(self.dropped_world_dimensions['value']):
+                    # Get the value from the slice
+                    value = self.dropped_world_dimensions['value'][dropped_idx]
+                    # Check if this dimension is coupled to any kept dimensions
+                    coupled = False
+                    for ipix in self._pixel_keep:
+                        if self._wcs.axis_correlation_matrix[iworld, ipix]:
+                            coupled = True
+                            break
+                    if coupled:
+                        # If coupled, use the value from the slice to maintain the coupling
+                        value = self.dropped_world_dimensions['value'][dropped_idx]
+                    world_arrays_new.append(value)
+                else:
+                    # If we don't have a value for this dimension, use the reference value
+                    world_arrays_new.append(self._wcs.world_axis_reference_values[iworld])
 
         world_arrays_new = np.broadcast_arrays(*world_arrays_new)
         pixel_arrays = list(self._wcs.world_to_pixel_values(*world_arrays_new))
 
+        # Apply slice offsets
         for ipixel in range(self._wcs.pixel_n_dim):
             if isinstance(self._slices_pixel[ipixel], slice) and self._slices_pixel[ipixel].start is not None:
                 pixel_arrays[ipixel] -= self._slices_pixel[ipixel].start
@@ -263,6 +282,8 @@ class SlicedLowLevelWCS(BaseWCSWrapper):
         # Detect the case of a length 0 array
         if isinstance(pixel_arrays, np.ndarray) and not pixel_arrays.shape:
             return pixel_arrays
+
+        # Keep only the dimensions we want
         pixel = tuple(pixel_arrays[ip] for ip in self._pixel_keep)
         if self.pixel_n_dim == 1 and self._wcs.pixel_n_dim > 1:
             pixel = pixel[0]
diff --git a/reproduce_wcs_issue.py b/reproduce_wcs_issue.py
new file mode 100644
index 0000000000..ac41441b5d
--- /dev/null
+++ b/reproduce_wcs_issue.py
@@ -0,0 +1,54 @@
+import numpy as np
+import astropy.wcs
+from astropy.coordinates import SkyCoord
+import astropy.units as u
+
+# Create test WCS
+nx = 100
+ny = 25
+nz = 2
+wcs_header = {
+    'WCSAXES': 3,
+    'CRPIX1': (nx + 1)/2,
+    'CRPIX2': (ny + 1)/2,
+    'CRPIX3': 1.0,
+    'PC1_1': 0.0,
+    'PC1_2': -1.0,
+    'PC1_3': 0.0,
+    'PC2_1': 1.0,
+    'PC2_2': 0.0,
+    'PC2_3': -1.0,
+    'CDELT1': 5,
+    'CDELT2': 5,
+    'CDELT3': 0.055,
+    'CUNIT1': 'arcsec',
+    'CUNIT2': 'arcsec',
+    'CUNIT3': 'Angstrom',
+    'CTYPE1': 'HPLN-TAN',
+    'CTYPE2': 'HPLT-TAN',
+    'CTYPE3': 'WAVE',
+    'CRVAL1': 0.0,
+    'CRVAL2': 0.0,
+    'CRVAL3': 1.05,
+}
+
+fits_wcs = astropy.wcs.WCS(header=wcs_header)
+
+# Test unsliced WCS
+pt = SkyCoord(0*u.arcsec, 0*u.arcsec, frame="icrs")
+result1 = fits_wcs.world_to_pixel(pt, 1.05*u.angstrom)
+print("Unsliced WCS world_to_pixel result:", result1)
+
+# Test sliced WCS
+ll_sliced_wcs = astropy.wcs.wcsapi.SlicedLowLevelWCS(fits_wcs, 0)
+hl_sliced_wcs = astropy.wcs.wcsapi.HighLevelWCSWrapper(ll_sliced_wcs)
+result2 = hl_sliced_wcs.world_to_pixel(pt)
+print("Sliced WCS world_to_pixel result:", result2)
+
+# Test pixel_to_world for both cases
+px, py, pz = fits_wcs.world_to_pixel(pt, 1.05*u.Angstrom)
+result3 = fits_wcs.pixel_to_world(px, py, pz)
+print("Unsliced WCS pixel_to_world result:", result3)
+
+result4 = hl_sliced_wcs.pixel_to_world(px, py)
+print("Sliced WCS pixel_to_world result:", result4)
\ No newline at end of file
