diff --git a/.gitignore b/.gitignore
index 238fb3a200..975c5364d8 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,6 @@ tests/coverage_html/
 tests/.coverage
 build/
 tests/report/
+*__pycache__*
+*venv*
+*_build*
diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py
index 494890cc23..2020ef377d 100644
--- a/django/contrib/staticfiles/storage.py
+++ b/django/contrib/staticfiles/storage.py
@@ -226,17 +226,22 @@ class HashedFilesMixin:
             path for path in paths
             if matches_patterns(path, self._patterns)
         ]
-        # Do a single pass first. Post-process all files once, then repeat for
-        # adjustable files.
-        for name, hashed_name, processed, _ in self._post_process(paths, adjustable_paths, hashed_files):
+        
+        # Process non-adjustable files first
+        non_adjustable_paths = {path: paths[path] for path in paths if path not in adjustable_paths}
+        for name, hashed_name, processed, _ in self._post_process(non_adjustable_paths, adjustable_paths, hashed_files):
             yield name, hashed_name, processed
 
-        paths = {path: paths[path] for path in adjustable_paths}
+        # Then process adjustable files
+        adjustable_paths_dict = {path: paths[path] for path in adjustable_paths}
+        processed_files = set()
 
         for i in range(self.max_post_process_passes):
             substitutions = False
-            for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):
-                yield name, hashed_name, processed
+            for name, hashed_name, processed, subst in self._post_process(adjustable_paths_dict, adjustable_paths, hashed_files):
+                if name not in processed_files:
+                    yield name, hashed_name, processed
+                    processed_files.add(name)
                 substitutions = substitutions or subst
 
             if not substitutions:
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..716513627b
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,53 @@
+import os
+import tempfile
+from django.conf import settings
+from django.contrib.staticfiles.storage import HashedFilesMixin, FileSystemStorage
+
+# Configure Django settings
+settings.configure(
+    DEBUG=False,
+    STATIC_URL='/static/',
+)
+
+class TestStorage(HashedFilesMixin, FileSystemStorage):
+    pass
+
+# Create a temporary directory
+temp_dir = tempfile.mkdtemp()
+
+# Create a test CSS file
+css_dir = os.path.join(temp_dir, 'admin', 'css')
+os.makedirs(css_dir)
+css_file = os.path.join(css_dir, 'base.css')
+with open(css_file, 'w') as f:
+    f.write('''
+body {
+    background: url("../img/bg.png");
+}
+.logo {
+    background: url("../img/logo.png");
+}
+''')
+
+# Create test image files
+img_dir = os.path.join(temp_dir, 'admin', 'img')
+os.makedirs(img_dir)
+for img in ['bg.png', 'logo.png']:
+    with open(os.path.join(img_dir, img), 'wb') as f:
+        f.write(b'fake image data')
+
+# Initialize storage
+storage = TestStorage(location=temp_dir)
+
+# Create paths dict as collectstatic would
+paths = {}
+for root, _, files in os.walk(temp_dir):
+    for file in files:
+        path = os.path.join(root, file)
+        name = os.path.relpath(path, temp_dir)
+        paths[name] = (storage, name)
+
+# Process files and print results
+print("Processing files...")
+for name, hashed_name, processed in storage.post_process(paths):
+    print(f"{'Post-processed' if processed else 'Processed'} '{name}' as '{hashed_name}'")
\ No newline at end of file
