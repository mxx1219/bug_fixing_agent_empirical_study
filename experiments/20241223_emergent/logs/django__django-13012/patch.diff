diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index c1a76584f0..57ea13dd07 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -869,6 +869,9 @@ class ExpressionWrapper(Expression):
     def __repr__(self):
         return "{}({})".format(self.__class__.__name__, self.expression)
 
+    def get_group_by_cols(self, alias=None):
+        return self.expression.get_group_by_cols()
+
 
 class When(Expression):
     template = 'WHEN %(condition)s THEN %(result)s'
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..ebac2bf20c
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,37 @@
+import django
+from django.conf import settings
+
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=['testapp'],
+)
+django.setup()
+
+from django.db.models import Sum, Value, IntegerField, ExpressionWrapper
+from django.db.models.functions import Coalesce
+from testapp.models import Model
+
+def test_constant_expr():
+    # Test with ExpressionWrapper around a constant Value
+    expr = ExpressionWrapper(Value(3), output_field=IntegerField())
+    qs = Model.objects.annotate(expr_res=expr).values('expr_res', 'column_a').annotate(sum=Sum('column_b'))
+    sql = str(qs.query)
+    print("SQL with ExpressionWrapper:")
+    print(sql)
+    print("\nVerifying GROUP BY clause doesn't contain the constant...")
+    assert '3' not in sql[sql.find('GROUP BY'):], "Constant value found in GROUP BY clause!"
+    print("Test passed!")
+
+    # Compare with direct Value usage
+    qs2 = Model.objects.annotate(expr_res=Value(3, output_field=IntegerField())).values('expr_res', 'column_a').annotate(sum=Sum('column_b'))
+    sql2 = str(qs2.query)
+    print("\nSQL without ExpressionWrapper:")
+    print(sql2)
+
+if __name__ == '__main__':
+    test_constant_expr()
\ No newline at end of file
diff --git a/testapp/__init__.py b/testapp/__init__.py
new file mode 100644
index 0000000000..816811148a
--- /dev/null
+++ b/testapp/__init__.py
@@ -0,0 +1 @@
+# Test app
\ No newline at end of file
diff --git a/testapp/models.py b/testapp/models.py
new file mode 100644
index 0000000000..5b7903ab3a
--- /dev/null
+++ b/testapp/models.py
@@ -0,0 +1,9 @@
+from django.db import models
+
+class Model(models.Model):
+    column_a = models.IntegerField()
+    column_b = models.IntegerField()
+
+    class Meta:
+        app_label = 'testapp'
+        db_table = 'model'
\ No newline at end of file
