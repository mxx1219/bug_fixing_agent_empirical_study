diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py
index c5d87f647a..a56216a8f6 100644
--- a/django/db/models/fields/related_descriptors.py
+++ b/django/db/models/fields/related_descriptors.py
@@ -793,6 +793,11 @@ def create_reverse_many_to_one_manager(superclass, rel):
 
         create.alters_data = True
 
+        async def acreate(self, **kwargs):
+            return await sync_to_async(self.create)(**kwargs)
+
+        acreate.alters_data = True
+
         def get_or_create(self, **kwargs):
             self._check_fk_val()
             kwargs[self.field.name] = self.instance
@@ -801,6 +806,14 @@ def create_reverse_many_to_one_manager(superclass, rel):
 
         get_or_create.alters_data = True
 
+        async def aget_or_create(self, **kwargs):
+            self._check_fk_val()
+            kwargs[self.field.name] = self.instance
+            db = router.db_for_write(self.model, instance=self.instance)
+            return await sync_to_async(super(RelatedManager, self.db_manager(db)).get_or_create)(**kwargs)
+
+        aget_or_create.alters_data = True
+
         def update_or_create(self, **kwargs):
             self._check_fk_val()
             kwargs[self.field.name] = self.instance
@@ -809,6 +822,14 @@ def create_reverse_many_to_one_manager(superclass, rel):
 
         update_or_create.alters_data = True
 
+        async def aupdate_or_create(self, **kwargs):
+            self._check_fk_val()
+            kwargs[self.field.name] = self.instance
+            db = router.db_for_write(self.model, instance=self.instance)
+            return await sync_to_async(super(RelatedManager, self.db_manager(db)).update_or_create)(**kwargs)
+
+        aupdate_or_create.alters_data = True
+
         # remove() and clear() are only provided if the ForeignKey can have a
         # value of null.
         if rel.field.null:
@@ -1191,6 +1212,14 @@ def create_forward_many_to_many_manager(superclass, rel, reverse):
 
         create.alters_data = True
 
+        async def acreate(self, *, through_defaults=None, **kwargs):
+            db = router.db_for_write(self.instance.__class__, instance=self.instance)
+            new_obj = await sync_to_async(super(ManyRelatedManager, self.db_manager(db)).create)(**kwargs)
+            await sync_to_async(self.add)(new_obj, through_defaults=through_defaults)
+            return new_obj
+
+        acreate.alters_data = True
+
         def get_or_create(self, *, through_defaults=None, **kwargs):
             db = router.db_for_write(self.instance.__class__, instance=self.instance)
             obj, created = super(ManyRelatedManager, self.db_manager(db)).get_or_create(
@@ -1204,6 +1233,15 @@ def create_forward_many_to_many_manager(superclass, rel, reverse):
 
         get_or_create.alters_data = True
 
+        async def aget_or_create(self, *, through_defaults=None, **kwargs):
+            db = router.db_for_write(self.instance.__class__, instance=self.instance)
+            obj, created = await sync_to_async(super(ManyRelatedManager, self.db_manager(db)).get_or_create)(**kwargs)
+            if created:
+                await sync_to_async(self.add)(obj, through_defaults=through_defaults)
+            return obj, created
+
+        aget_or_create.alters_data = True
+
         def update_or_create(self, *, through_defaults=None, **kwargs):
             db = router.db_for_write(self.instance.__class__, instance=self.instance)
             obj, created = super(
@@ -1217,6 +1255,15 @@ def create_forward_many_to_many_manager(superclass, rel, reverse):
 
         update_or_create.alters_data = True
 
+        async def aupdate_or_create(self, *, through_defaults=None, **kwargs):
+            db = router.db_for_write(self.instance.__class__, instance=self.instance)
+            obj, created = await sync_to_async(super(ManyRelatedManager, self.db_manager(db)).update_or_create)(**kwargs)
+            if created:
+                await sync_to_async(self.add)(obj, through_defaults=through_defaults)
+            return obj, created
+
+        aupdate_or_create.alters_data = True
+
         def _get_target_ids(self, target_field_name, objs):
             """
             Return the set of ids of `objs` that the target field references.
diff --git a/test_async_managers.py b/test_async_managers.py
new file mode 100644
index 0000000000..d0db54529c
--- /dev/null
+++ b/test_async_managers.py
@@ -0,0 +1,69 @@
+import asyncio
+import os
+import sys
+import django
+from django.conf import settings
+from django.test import TransactionTestCase
+from django.test.utils import setup_test_environment, teardown_test_environment
+
+# Add the testbed directory to Python path
+sys.path.insert(0, '/testbed')
+
+if not settings.configured:
+    settings.configure(
+        DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+        INSTALLED_APPS=['django.contrib.contenttypes', 'testapp'],
+        DEFAULT_AUTO_FIELD='django.db.models.AutoField',
+    )
+    django.setup()
+
+from testapp.models import Author, Book
+
+# Set up test environment
+setup_test_environment()
+test_case = TransactionTestCase()
+test_case._pre_setup()
+
+async def test_async_managers():
+    # Test reverse many-to-one manager
+    author = await Author.objects.acreate(name='Test Author')
+    
+    # Test acreate
+    book = await author.books.acreate(title='Test Book')
+    print(f"Created book: {book.title} by {book.author.name}")
+    
+    # Test aget_or_create
+    book2, created = await author.books.aget_or_create(title='Test Book 2')
+    print(f"Got or created book: {book2.title}, created: {created}")
+    
+    # Test aupdate_or_create
+    book3, created = await author.books.aupdate_or_create(
+        title='Test Book 3',
+        defaults={'title': 'Updated Book 3'}
+    )
+    print(f"Updated or created book: {book3.title}, created: {created}")
+
+    # Test forward many-to-many manager
+    co_author = await Author.objects.acreate(name='Co-Author')
+    
+    # Test acreate
+    book4 = await book.co_authors.acreate(name='New Co-Author')
+    print(f"Created co-author: {book4.name}")
+    
+    # Test aget_or_create
+    author2, created = await book.co_authors.aget_or_create(name='Co-Author 2')
+    print(f"Got or created co-author: {author2.name}, created: {created}")
+    
+    # Test aupdate_or_create
+    author3, created = await book.co_authors.aupdate_or_create(
+        name='Co-Author 3',
+        defaults={'name': 'Updated Co-Author 3'}
+    )
+    print(f"Updated or created co-author: {author3.name}, created: {created}")
+
+if __name__ == '__main__':
+    try:
+        asyncio.run(test_async_managers())
+    finally:
+        test_case._post_teardown()
+        teardown_test_environment()
\ No newline at end of file
diff --git a/testapp/__init__.py b/testapp/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testapp/models.py b/testapp/models.py
new file mode 100644
index 0000000000..3ca3d20010
--- /dev/null
+++ b/testapp/models.py
@@ -0,0 +1,9 @@
+from django.db import models
+
+class Author(models.Model):
+    name = models.CharField(max_length=100)
+
+class Book(models.Model):
+    title = models.CharField(max_length=100)
+    author = models.ForeignKey(Author, on_delete=models.CASCADE, related_name='books')
+    co_authors = models.ManyToManyField(Author, related_name='co_authored_books')
\ No newline at end of file
