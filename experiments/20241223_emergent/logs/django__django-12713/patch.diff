diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 69a5fbf389..db7df891e3 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -249,16 +249,17 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):
             return None
         db = kwargs.get('using')
 
-        autocomplete_fields = self.get_autocomplete_fields(request)
-        if db_field.name in autocomplete_fields:
-            kwargs['widget'] = AutocompleteSelectMultiple(db_field.remote_field, self.admin_site, using=db)
-        elif db_field.name in self.raw_id_fields:
-            kwargs['widget'] = widgets.ManyToManyRawIdWidget(db_field.remote_field, self.admin_site, using=db)
-        elif db_field.name in [*self.filter_vertical, *self.filter_horizontal]:
-            kwargs['widget'] = widgets.FilteredSelectMultiple(
-                db_field.verbose_name,
-                db_field.name in self.filter_vertical
-            )
+        if 'widget' not in kwargs:
+            autocomplete_fields = self.get_autocomplete_fields(request)
+            if db_field.name in autocomplete_fields:
+                kwargs['widget'] = AutocompleteSelectMultiple(db_field.remote_field, self.admin_site, using=db)
+            elif db_field.name in self.raw_id_fields:
+                kwargs['widget'] = widgets.ManyToManyRawIdWidget(db_field.remote_field, self.admin_site, using=db)
+            elif db_field.name in [*self.filter_vertical, *self.filter_horizontal]:
+                kwargs['widget'] = widgets.FilteredSelectMultiple(
+                    db_field.verbose_name,
+                    db_field.name in self.filter_vertical
+                )
 
         if 'queryset' not in kwargs:
             queryset = self.get_field_queryset(db, db_field, request)
diff --git a/test_widget_override.py b/test_widget_override.py
new file mode 100644
index 0000000000..2267679865
--- /dev/null
+++ b/test_widget_override.py
@@ -0,0 +1,92 @@
+from django.conf import settings
+settings.configure(
+    USE_I18N=True,
+    INSTALLED_APPS=[
+        'django.contrib.admin',
+        'django.contrib.auth',
+        'django.contrib.contenttypes',
+        'django.contrib.sessions',
+        'django.contrib.messages',
+    ],
+    LANGUAGE_CODE='en-us',
+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+    MIDDLEWARE=[
+        'django.contrib.sessions.middleware.SessionMiddleware',
+        'django.contrib.auth.middleware.AuthenticationMiddleware',
+        'django.contrib.messages.middleware.MessageMiddleware',
+    ],
+)
+
+import django
+django.setup()
+
+from django.contrib import admin
+from django.contrib.admin.sites import AdminSite
+from django.db import models
+from django.forms import Select, SelectMultiple, ModelMultipleChoiceField
+from django.db.models.query import QuerySet
+
+# Create a custom widget
+class CustomSelectMultiple(SelectMultiple):
+    pass
+
+# Create mock classes for testing
+class MockMeta:
+    def __init__(self, auto_created=True):
+        self.auto_created = auto_created
+
+class MockThrough:
+    def __init__(self, auto_created=True):
+        self._meta = MockMeta(auto_created)
+
+class MockQuerySet(QuerySet):
+    def __init__(self):
+        self._result_cache = []
+
+    def all(self):
+        return self
+
+class MockModel:
+    pass
+
+class MockRemoteField:
+    def __init__(self):
+        self.through = MockThrough()
+        self.model = MockModel
+
+class MockManyToManyField:
+    def __init__(self, name):
+        self.name = name
+        self.many_to_many = True
+        self.remote_field = MockRemoteField()
+        self.verbose_name = name.replace('_', ' ')
+
+    def formfield(self, **kwargs):
+        defaults = {
+            'form_class': ModelMultipleChoiceField,
+            'queryset': MockQuerySet(),
+        }
+        defaults.update(kwargs)
+        form_class = defaults.pop('form_class')
+        return form_class(**defaults)
+
+# Create a mock model admin
+class TestModelAdmin(admin.ModelAdmin):
+    def __init__(self):
+        self.filter_vertical = []
+        self.filter_horizontal = []
+        self.raw_id_fields = []
+        self.autocomplete_fields = []
+        self.admin_site = AdminSite()
+
+    def formfield_for_manytomany(self, db_field, request, **kwargs):
+        kwargs['widget'] = CustomSelectMultiple()
+        return super().formfield_for_manytomany(db_field, request, **kwargs)
+
+# Test the widget override
+admin_obj = TestModelAdmin()
+mock_field = MockManyToManyField('test_field')
+formfield = admin_obj.formfield_for_manytomany(mock_field, None)
+
+print(f"Widget class: {formfield.widget.__class__.__name__}")
+print(f"Expected: CustomSelectMultiple")
\ No newline at end of file
