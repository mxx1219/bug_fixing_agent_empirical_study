diff --git a/django/forms/models.py b/django/forms/models.py
index 5d115458a1..9dc52c0738 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -100,7 +100,11 @@ def apply_limit_choices_to_to_formfield(formfield):
     if hasattr(formfield, 'queryset') and hasattr(formfield, 'get_limit_choices_to'):
         limit_choices_to = formfield.get_limit_choices_to()
         if limit_choices_to is not None:
-            formfield.queryset = formfield.queryset.complex_filter(limit_choices_to)
+            # Apply complex_filter and ensure distinct results when using Q objects
+            filtered_qs = formfield.queryset.complex_filter(limit_choices_to)
+            if hasattr(limit_choices_to, 'connector'):  # Q object
+                filtered_qs = filtered_qs.distinct()
+            formfield.queryset = filtered_qs
 
 
 def fields_for_model(model, fields=None, exclude=None, widgets=None,
diff --git a/test_foreignkey_duplicates.py b/test_foreignkey_duplicates.py
new file mode 100644
index 0000000000..a2dbcc24a0
--- /dev/null
+++ b/test_foreignkey_duplicates.py
@@ -0,0 +1,86 @@
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+import django
+django.setup()
+
+from django.db import models
+from django.forms import ModelForm
+from django.db.models import Q
+from django.test import TestCase
+
+# Configure logging
+import logging
+logging.basicConfig(level=logging.INFO)
+logger = logging.getLogger(__name__)
+
+# Test models
+class Author(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'testapp'
+
+class Book(models.Model):
+    title = models.CharField(max_length=100)
+    author = models.ForeignKey(Author, on_delete=models.CASCADE)
+    published = models.BooleanField(default=True)
+    
+    class Meta:
+        app_label = 'testapp'
+
+class Review(models.Model):
+    book = models.ForeignKey(
+        Book,
+        on_delete=models.CASCADE,
+        limit_choices_to=Q(published=True) & Q(author__name__contains='test')
+    )
+    text = models.TextField()
+    
+    class Meta:
+        app_label = 'testapp'
+
+class ReviewForm(ModelForm):
+    class Meta:
+        model = Review
+        fields = ['book']
+
+# Test the fix
+if __name__ == '__main__':
+    try:
+        # Create database tables
+        from django.core.management import call_command
+        from django.db import connection
+        
+        with connection.schema_editor() as schema_editor:
+            for model in [Author, Book, Review]:
+                schema_editor.create_model(model)
+        
+        # Create test data
+        logger.info("Creating test data...")
+        author = Author.objects.create(name='test author')
+        book1 = Book.objects.create(title='Book 1', author=author, published=True)
+        book2 = Book.objects.create(title='Book 2', author=author, published=True)
+        
+        # Create form and check choices
+        logger.info("Creating form and checking choices...")
+        form = ReviewForm()
+        choices = list(form.fields['book'].queryset)
+        
+        # Print results
+        logger.info(f"Number of choices: {len(choices)}")
+        logger.info("Choices:")
+        for choice in choices:
+            logger.info(f"- {choice.title}")
+        
+        # Verify no duplicates
+        choice_ids = [c.id for c in choices]
+        if len(choice_ids) == len(set(choice_ids)):
+            logger.info("\nSuccess: No duplicate choices found!")
+            exit(0)
+        else:
+            logger.error("\nError: Duplicate choices found!")
+            exit(1)
+    except Exception as e:
+        logger.error(f"Test failed with error: {e}")
+        exit(1)
\ No newline at end of file
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..f6f5d5d97b
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,14 @@
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+    'testapp',
+]
+
+SECRET_KEY = 'dummy'
\ No newline at end of file
diff --git a/testapp/__init__.py b/testapp/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
