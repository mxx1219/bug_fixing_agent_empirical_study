diff --git a/django/contrib/admin/templatetags/admin_modify.py b/django/contrib/admin/templatetags/admin_modify.py
index 9df4b7aadb..5b742af46a 100644
--- a/django/contrib/admin/templatetags/admin_modify.py
+++ b/django/contrib/admin/templatetags/admin_modify.py
@@ -100,6 +100,7 @@ def submit_row(context):
                 and context.get("show_delete", True)
             ),
             "show_save_as_new": not is_popup
+            and has_add_permission
             and has_change_permission
             and change
             and save_as,
diff --git a/test_project/manage.py b/test_project/manage.py
new file mode 100755
index 0000000000..6e5aada76b
--- /dev/null
+++ b/test_project/manage.py
@@ -0,0 +1,22 @@
+#!/usr/bin/env python
+"""Django's command-line utility for administrative tasks."""
+import os
+import sys
+
+
+def main():
+    """Run administrative tasks."""
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "test_project.settings")
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+
+if __name__ == "__main__":
+    main()
diff --git a/test_project/test_app.py b/test_project/test_app.py
new file mode 100644
index 0000000000..9b5fda0e07
--- /dev/null
+++ b/test_project/test_app.py
@@ -0,0 +1,69 @@
+from django.contrib import admin
+from django.db import models
+from django.contrib.auth.models import User, Permission
+from django.test import TestCase, Client
+from django.urls import reverse
+
+# Test Model
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    
+    def __str__(self):
+        return self.name
+
+# Admin configuration
+class TestModelAdmin(admin.ModelAdmin):
+    save_as = True
+
+admin.site.register(TestModel, TestModelAdmin)
+
+# Test case
+class SaveAsNewPermissionTest(TestCase):
+    def setUp(self):
+        # Create a superuser
+        self.superuser = User.objects.create_superuser('admin', 'admin@test.com', 'password')
+        
+        # Create a regular user
+        self.user = User.objects.create_user('user', 'user@test.com', 'password')
+        
+        # Create test object
+        self.test_obj = TestModel.objects.create(name='Test Object')
+        
+        # Get required permissions
+        self.change_permission = Permission.objects.get(codename='change_testmodel')
+        self.add_permission = Permission.objects.get(codename='add_testmodel')
+        
+        self.client = Client()
+
+    def test_save_as_new_requires_add_permission(self):
+        # Login as regular user
+        self.client.login(username='user', password='password')
+        
+        # Give only change permission (not add permission)
+        self.user.user_permissions.add(self.change_permission)
+        
+        # Try to access change form
+        response = self.client.get(
+            reverse('admin:testapp_testmodel_change', args=[self.test_obj.pk])
+        )
+        
+        # Should not see "Save as new"
+        self.assertNotContains(response, 'Save as new')
+        
+        # Now add the add permission
+        self.user.user_permissions.add(self.add_permission)
+        
+        # Try again
+        response = self.client.get(
+            reverse('admin:testapp_testmodel_change', args=[self.test_obj.pk])
+        )
+        
+        # Should now see "Save as new"
+        self.assertContains(response, 'Save as new')
+
+if __name__ == '__main__':
+    import django
+    django.setup()
+    from django.test.runner import DiscoverRunner
+    test_runner = DiscoverRunner()
+    failures = test_runner.run_tests(['test_app'])
\ No newline at end of file
diff --git a/test_project/test_project/__init__.py b/test_project/test_project/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_project/test_project/asgi.py b/test_project/test_project/asgi.py
new file mode 100644
index 0000000000..a7a0d4f0b1
--- /dev/null
+++ b/test_project/test_project/asgi.py
@@ -0,0 +1,16 @@
+"""
+ASGI config for test_project project.
+
+It exposes the ASGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/asgi/
+"""
+
+import os
+
+from django.core.asgi import get_asgi_application
+
+os.environ.setdefault("DJANGO_SETTINGS_MODULE", "test_project.settings")
+
+application = get_asgi_application()
diff --git a/test_project/test_project/settings.py b/test_project/test_project/settings.py
new file mode 100644
index 0000000000..27918a81ae
--- /dev/null
+++ b/test_project/test_project/settings.py
@@ -0,0 +1,124 @@
+"""
+Django settings for test_project project.
+
+Generated by 'django-admin startproject' using Django 5.0.dev20230206094108.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/topics/settings/
+
+For the full list of settings and their values, see
+https://docs.djangoproject.com/en/dev/ref/settings/
+"""
+
+from pathlib import Path
+
+# Build paths inside the project like this: BASE_DIR / 'subdir'.
+BASE_DIR = Path(__file__).resolve().parent.parent
+
+
+# Quick-start development settings - unsuitable for production
+# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/
+
+# SECURITY WARNING: keep the secret key used in production secret!
+SECRET_KEY = "django-insecure-!*tt!)=3djfbylvlya)tu+v+9z2^f_ep%souzc%aq0gevyj-q2"
+
+# SECURITY WARNING: don't run with debug turned on in production!
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+
+# Application definition
+
+INSTALLED_APPS = [
+    "django.contrib.admin",
+    "django.contrib.auth",
+    "django.contrib.contenttypes",
+    "django.contrib.sessions",
+    "django.contrib.messages",
+    "django.contrib.staticfiles",
+    "test_app",
+]
+
+MIDDLEWARE = [
+    "django.middleware.security.SecurityMiddleware",
+    "django.contrib.sessions.middleware.SessionMiddleware",
+    "django.middleware.common.CommonMiddleware",
+    "django.middleware.csrf.CsrfViewMiddleware",
+    "django.contrib.auth.middleware.AuthenticationMiddleware",
+    "django.contrib.messages.middleware.MessageMiddleware",
+    "django.middleware.clickjacking.XFrameOptionsMiddleware",
+]
+
+ROOT_URLCONF = "test_project.urls"
+
+TEMPLATES = [
+    {
+        "BACKEND": "django.template.backends.django.DjangoTemplates",
+        "DIRS": [],
+        "APP_DIRS": True,
+        "OPTIONS": {
+            "context_processors": [
+                "django.template.context_processors.debug",
+                "django.template.context_processors.request",
+                "django.contrib.auth.context_processors.auth",
+                "django.contrib.messages.context_processors.messages",
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = "test_project.wsgi.application"
+
+
+# Database
+# https://docs.djangoproject.com/en/dev/ref/settings/#databases
+
+DATABASES = {
+    "default": {
+        "ENGINE": "django.db.backends.sqlite3",
+        "NAME": BASE_DIR / "db.sqlite3",
+    }
+}
+
+
+# Password validation
+# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
+    },
+    {
+        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
+    },
+    {
+        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
+    },
+    {
+        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
+    },
+]
+
+
+# Internationalization
+# https://docs.djangoproject.com/en/dev/topics/i18n/
+
+LANGUAGE_CODE = "en-us"
+
+TIME_ZONE = "UTC"
+
+USE_I18N = True
+
+USE_TZ = True
+
+
+# Static files (CSS, JavaScript, Images)
+# https://docs.djangoproject.com/en/dev/howto/static-files/
+
+STATIC_URL = "static/"
+
+# Default primary key field type
+# https://docs.djangoproject.com/en/dev/ref/settings/#default-auto-field
+
+DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
diff --git a/test_project/test_project/urls.py b/test_project/test_project/urls.py
new file mode 100644
index 0000000000..b6ae5e3b82
--- /dev/null
+++ b/test_project/test_project/urls.py
@@ -0,0 +1,23 @@
+"""
+URL configuration for test_project project.
+
+The `urlpatterns` list routes URLs to views. For more information please see:
+    https://docs.djangoproject.com/en/dev/topics/http/urls/
+Examples:
+Function views
+    1. Add an import:  from my_app import views
+    2. Add a URL to urlpatterns:  path('', views.home, name='home')
+Class-based views
+    1. Add an import:  from other_app.views import Home
+    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
+Including another URLconf
+    1. Import the include() function: from django.urls import include, path
+    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
+"""
+
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path("admin/", admin.site.urls),
+]
diff --git a/test_project/test_project/wsgi.py b/test_project/test_project/wsgi.py
new file mode 100644
index 0000000000..ee57abe62a
--- /dev/null
+++ b/test_project/test_project/wsgi.py
@@ -0,0 +1,16 @@
+"""
+WSGI config for test_project project.
+
+It exposes the WSGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/wsgi/
+"""
+
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault("DJANGO_SETTINGS_MODULE", "test_project.settings")
+
+application = get_wsgi_application()
