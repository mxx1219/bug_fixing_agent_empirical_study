diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index dddf7c679c..3bacb0eced 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -137,11 +137,19 @@ class CreateModel(ModelOperation):
                 ),
             ]
         elif isinstance(operation, AlterModelOptions) and self.name_lower == operation.name_lower:
+            # Start with current options
+            new_options = self.options.copy()
+            # Remove any keys from ALTER_OPTION_KEYS that aren't in operation.options
+            for key in operation.ALTER_OPTION_KEYS:
+                if key not in operation.options and key in new_options:
+                    del new_options[key]
+            # Apply new options
+            new_options.update(operation.options)
             return [
                 CreateModel(
                     self.name,
                     fields=self.fields,
-                    options={**self.options, **operation.options},
+                    options=new_options,
                     bases=self.bases,
                     managers=self.managers,
                 ),
diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py
index 38ad6a2d18..f26445db4e 100644
--- a/tests/migrations/test_operations.py
+++ b/tests/migrations/test_operations.py
@@ -2497,6 +2497,28 @@ class OperationTests(OperationTestBase):
         self.assertEqual(definition[1], [])
         self.assertEqual(definition[2], {'name': "Pony", 'options': {"permissions": [("can_groom", "Can groom")]}})
 
+    def test_squash_create_model_alter_options(self):
+        """
+        Tests that CreateModel properly handles option clearing when reducing
+        with AlterModelOptions operations during squashing.
+        """
+        operation1 = migrations.CreateModel(
+            name="TestModel",
+            fields=[("id", models.AutoField(primary_key=True))],
+            options={"permissions": [("can_read", "Can read")], "verbose_name": "Test"}
+        )
+        operation2 = migrations.AlterModelOptions(
+            name="TestModel",
+            options={"verbose_name": "New Test"}  # Remove permissions
+        )
+        # Reduce operations
+        reduced = operation1.reduce(operation2, "app")
+        self.assertEqual(len(reduced), 1)
+        reduced_op = reduced[0]
+        self.assertIsInstance(reduced_op, migrations.CreateModel)
+        # Check that permissions were removed and only verbose_name remains
+        self.assertEqual(reduced_op.options, {"verbose_name": "New Test"})
+
     def test_alter_model_options_emptying(self):
         """
         The AlterModelOptions operation removes keys from the dict (#23121)
diff --git a/tests/settings.py b/tests/settings.py
new file mode 100644
index 0000000000..77a17fbfbf
--- /dev/null
+++ b/tests/settings.py
@@ -0,0 +1,14 @@
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+    'tests',
+]
+
+SECRET_KEY = 'dummy'
\ No newline at end of file
diff --git a/tests/test_settings.py b/tests/test_settings.py
new file mode 100644
index 0000000000..504b0d7953
--- /dev/null
+++ b/tests/test_settings.py
@@ -0,0 +1,16 @@
+from django.conf.global_settings import *
+
+SECRET_KEY = 'dummy'
+# Using the old setting name for compatibility
+PASSWORD_RESET_TIMEOUT_DAYS = 1
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+    'tests',
+]
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
\ No newline at end of file
