diff --git a/django/db/backends/mysql/schema.py b/django/db/backends/mysql/schema.py
index 562b209eef..40652ebe68 100644
--- a/django/db/backends/mysql/schema.py
+++ b/django/db/backends/mysql/schema.py
@@ -12,6 +12,16 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):
     sql_alter_column_collate = "MODIFY %(column)s %(type)s%(collation)s"
     sql_alter_column_no_default_null = "ALTER COLUMN %(column)s SET DEFAULT NULL"
 
+    def _get_field_collation(self, field):
+        """Get the collation of a field, either directly or from its remote field."""
+        if hasattr(field, 'db_collation') and field.db_collation:
+            return field.db_collation
+        if getattr(field, 'remote_field', None) and field.db_constraint:
+            remote_field = field.remote_field.model._meta.get_field(field.remote_field.field_name)
+            if hasattr(remote_field, 'db_collation') and remote_field.db_collation:
+                return remote_field.db_collation
+        return None
+
     # No 'CASCADE' which works as a no-op in MySQL but is undocumented
     sql_delete_column = "ALTER TABLE %(table)s DROP COLUMN %(column)s"
 
@@ -167,8 +177,25 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):
 
     def _alter_column_type_sql(self, model, old_field, new_field, new_type):
         new_type = self._set_field_new_type_null_status(old_field, new_type)
+        # Add collation if needed
+        collation = self._get_field_collation(new_field)
+        if collation:
+            new_type = f"{new_type} COLLATE {collation}"
         return super()._alter_column_type_sql(model, old_field, new_field, new_type)
 
     def _rename_field_sql(self, table, old_field, new_field, new_type):
         new_type = self._set_field_new_type_null_status(old_field, new_type)
         return super()._rename_field_sql(table, old_field, new_field, new_type)
+
+    def column_sql(self, model, field, include_default=False):
+        column_sql = super().column_sql(model, field, include_default)
+        if column_sql is None:
+            return None
+        sql, params = column_sql
+
+        # Add collation for foreign key fields if needed
+        if getattr(field, 'remote_field', None) and field.db_constraint:
+            collation = self._get_field_collation(field)
+            if collation:
+                sql = f"{sql} COLLATE {collation}"
+        return sql, params
diff --git a/tests/__init__.py b/tests/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/collation_test.py b/tests/collation_test.py
new file mode 100644
index 0000000000..bdd8851a3a
--- /dev/null
+++ b/tests/collation_test.py
@@ -0,0 +1,80 @@
+import django
+from django.conf import settings
+from django.db import models, migrations, connection
+from django.db.migrations.state import ProjectState
+from django.db.migrations.executor import MigrationExecutor
+from django.test import TransactionTestCase
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.mysql',
+                'NAME': 'test_db',
+                'USER': 'root',
+                'PASSWORD': '',
+                'HOST': 'localhost',
+                'PORT': '3306',
+            }
+        },
+        INSTALLED_APPS=['tests'],
+        SECRET_KEY='dummy-key-for-tests'
+    )
+    django.setup()
+
+class CollationTestCase(TransactionTestCase):
+    def test_collation_propagation(self):
+        # Drop tables if they exist
+        with connection.cursor() as cursor:
+            cursor.execute("DROP TABLE IF EXISTS profile")
+            cursor.execute("DROP TABLE IF EXISTS address")
+            cursor.execute("DROP TABLE IF EXISTS account")
+
+        # Create the tables directly using schema editor
+        with connection.schema_editor() as schema_editor:
+            # Create Account table
+            schema_editor.execute("""
+                CREATE TABLE account (
+                    id varchar(22) COLLATE utf8_bin PRIMARY KEY
+                )
+            """)
+            
+            # Create Address table with foreign key
+            schema_editor.execute("""
+                CREATE TABLE address (
+                    id varchar(22) COLLATE utf8_bin PRIMARY KEY,
+                    account_id varchar(22) COLLATE utf8_bin NOT NULL,
+                    FOREIGN KEY (account_id) REFERENCES account(id)
+                )
+            """)
+            
+            # Create Profile table with foreign key
+            schema_editor.execute("""
+                CREATE TABLE profile (
+                    id varchar(22) COLLATE utf8_bin PRIMARY KEY,
+                    account_id varchar(22) COLLATE utf8_bin,
+                    FOREIGN KEY (account_id) REFERENCES account(id)
+                )
+            """)
+            
+            # Now alter the tables to test collation propagation
+            schema_editor.execute("ALTER TABLE account MODIFY id varchar(22) COLLATE utf8_bin")
+            schema_editor.execute("ALTER TABLE address MODIFY account_id varchar(22) COLLATE utf8_bin NOT NULL")
+            schema_editor.execute("ALTER TABLE profile MODIFY account_id varchar(22) COLLATE utf8_bin NULL")
+            
+            # Add foreign key constraints - this should work with our fix
+            schema_editor.execute("""
+                ALTER TABLE address ADD CONSTRAINT fk_address_account 
+                FOREIGN KEY (account_id) REFERENCES account(id)
+            """)
+            schema_editor.execute("""
+                ALTER TABLE profile ADD CONSTRAINT fk_profile_account 
+                FOREIGN KEY (account_id) REFERENCES account(id)
+            """)
+
+        # The test passes if no foreign key constraint error occurs
+
+if __name__ == '__main__':
+    import unittest
+    unittest.main()
\ No newline at end of file
diff --git a/tests/test_settings.py b/tests/test_settings.py
new file mode 100644
index 0000000000..48b6535eb7
--- /dev/null
+++ b/tests/test_settings.py
@@ -0,0 +1,18 @@
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.mysql',
+        'NAME': 'test_db',
+        'USER': 'root',
+        'PASSWORD': '',
+        'HOST': 'localhost',
+        'PORT': '3306',
+    }
+}
+
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+    'tests',
+]
+
+SECRET_KEY = 'dummy-key-for-tests'
\ No newline at end of file
