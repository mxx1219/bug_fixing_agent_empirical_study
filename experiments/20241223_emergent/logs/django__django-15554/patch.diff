diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 54f3258eac..544ae9fad2 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -9,9 +9,11 @@ all about the internals of models in order to get the information it needs.
 import copy
 import difflib
 import functools
+import operator
 import sys
 from collections import Counter, namedtuple
 from collections.abc import Iterator, Mapping
+from functools import reduce
 from itertools import chain, count, product
 from string import ascii_uppercase
 
@@ -1598,6 +1600,12 @@ class Query(BaseExpression):
                         "relations deeper than the relation_name (got %r for "
                         "%r)." % (lookup, filtered_relation.relation_name)
                     )
+        # Store filtered relations by their base relation name to support multiple filters
+        base_relation = filtered_relation.relation_name
+        if base_relation not in self._filtered_relations:
+            self._filtered_relations[base_relation] = {}
+        self._filtered_relations[base_relation][filtered_relation.alias] = filtered_relation
+        # Also store by alias for backward compatibility
         self._filtered_relations[filtered_relation.alias] = filtered_relation
 
     def names_to_path(self, names, opts, allow_many=True, fail_on_missing=False):
@@ -1798,12 +1806,25 @@ class Query(BaseExpression):
         # joins at this stage - we will need the information about join type
         # of the trimmed joins.
         for join in path:
+            filtered_relation = None
+            table_alias = None
+            
+            # Check if we have multiple filtered relations for this path
             if join.filtered_relation:
-                filtered_relation = join.filtered_relation.clone()
-                table_alias = filtered_relation.alias
-            else:
-                filtered_relation = None
-                table_alias = None
+                base_relation = join.filtered_relation.relation_name
+                if isinstance(self._filtered_relations.get(base_relation), dict):
+                    # Multiple filtered relations exist for this path
+                    filtered_relations = list(self._filtered_relations[base_relation].values())
+                    # Use the first one for the JOIN and combine conditions
+                    filtered_relation = filtered_relations[0].clone()
+                    # Combine conditions from all filtered relations
+                    conditions = [fr.condition for fr in filtered_relations]
+                    filtered_relation.condition = reduce(operator.or_, conditions)
+                    table_alias = filtered_relation.alias
+                else:
+                    # Single filtered relation
+                    filtered_relation = join.filtered_relation.clone()
+                    table_alias = filtered_relation.alias
             opts = join.to_opts
             if join.direct:
                 nullable = self.is_nullable(join.join_field)
diff --git a/reproduce_filtered_relation.py b/reproduce_filtered_relation.py
new file mode 100644
index 0000000000..54e5d0e61f
--- /dev/null
+++ b/reproduce_filtered_relation.py
@@ -0,0 +1,92 @@
+import os
+import django
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+            '__main__',
+        ],
+        USE_TZ=False,
+        SECRET_KEY='dummy-key'
+    )
+    django.setup()
+
+from django.db import models
+from django.db.models import Case, F, Q, When
+from django.db.models.query import FilteredRelation
+
+# Define test models
+class Zone(models.Model):
+    name = models.CharField(max_length=100)
+
+class Product(models.Model):
+    name = models.CharField(max_length=100)
+    zone = models.ForeignKey(Zone, on_delete=models.CASCADE)
+
+class PriceRule(models.Model):
+    product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name='price_rules')
+    price = models.DecimalField(max_digits=10, decimal_places=2)
+    zone = models.ForeignKey(Zone, on_delete=models.CASCADE, null=True, blank=True)
+    is_all = models.BooleanField(default=False)
+
+# Test the issue
+def test_filtered_relation():
+    # Create test data
+    zone1 = Zone.objects.create(name='Zone 1')
+    zone2 = Zone.objects.create(name='Zone 2')
+    
+    product = Product.objects.create(name='Test Product', zone=zone1)
+    
+    # Create price rule for all zones
+    PriceRule.objects.create(product=product, price=100, is_all=True)
+    # Create zone-specific price rule
+    PriceRule.objects.create(product=product, price=90, zone=zone1, is_all=False)
+
+    # Query using multiple FilteredRelation
+    qs = Product.objects.alias(
+        price_rule_zone=FilteredRelation(
+            'price_rules',
+            condition=Q(price_rules__zone=F('zone'))
+        ),
+        price_rule_all=FilteredRelation(
+            'price_rules',
+            condition=Q(price_rules__is_all=True)
+        ),
+        price_zone=F('price_rule_zone__price')
+    ).annotate(
+        price_final=Case(
+            When(
+                price_zone__isnull=True,
+                then=F('price_rule_all__price')
+            ),
+            default=F('price_zone')
+        )
+    )
+
+    # Print the generated SQL query
+    print("Generated SQL:")
+    print(str(qs.query))
+
+    # Execute the query and print results
+    result = qs.first()
+    print(f"\nResult price: {result.price_final}")
+
+if __name__ == '__main__':
+    # Create tables
+    from django.db import connection
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(Zone)
+        schema_editor.create_model(Product)
+        schema_editor.create_model(PriceRule)
+    
+    test_filtered_relation()
\ No newline at end of file
