diff --git a/astropy/utils/misc.py b/astropy/utils/misc.py
index de3fb01d18..cceaeb957f 100644
--- a/astropy/utils/misc.py
+++ b/astropy/utils/misc.py
@@ -528,7 +528,7 @@ class InheritDocstrings(type):
                 not key.startswith('_'))
 
         for key, val in dct.items():
-            if (inspect.isfunction(val) and
+            if ((inspect.isfunction(val) or isinstance(val, property)) and
                 is_public_member(key) and
                 val.__doc__ is None):
                 for base in cls.__mro__[1:]:
diff --git a/test_inherit_docstrings.py b/test_inherit_docstrings.py
new file mode 100644
index 0000000000..6d67318ca0
--- /dev/null
+++ b/test_inherit_docstrings.py
@@ -0,0 +1,15 @@
+from astropy.utils.misc import InheritDocstrings
+
+class A(metaclass=InheritDocstrings):
+    @property
+    def value(self):
+        """This is the value property docstring"""
+        return 42
+
+class B(A):
+    @property 
+    def value(self):
+        return 43
+
+print("A.value.__doc__:", A.value.__doc__)
+print("B.value.__doc__:", B.value.__doc__)
\ No newline at end of file
diff --git a/test_inherit_docstrings_edge_cases.py b/test_inherit_docstrings_edge_cases.py
new file mode 100644
index 0000000000..ee2521bffe
--- /dev/null
+++ b/test_inherit_docstrings_edge_cases.py
@@ -0,0 +1,66 @@
+from astropy.utils.misc import InheritDocstrings
+
+# Test case 1: Property with explicit docstring shouldn't be overridden
+class A1(metaclass=InheritDocstrings):
+    @property
+    def value(self):
+        """Parent docstring"""
+        return 42
+
+class B1(A1):
+    @property 
+    def value(self):
+        """Child docstring"""
+        return 43
+
+# Test case 2: Multiple inheritance
+class A2:
+    @property
+    def value(self):
+        """A2 docstring"""
+        return 42
+
+class A3:
+    @property
+    def value(self):
+        """A3 docstring"""
+        return 42
+
+class B2(A2, A3, metaclass=InheritDocstrings):
+    @property
+    def value(self):
+        return 43
+
+# Test case 3: Property getter/setter
+class A4(metaclass=InheritDocstrings):
+    @property
+    def value(self):
+        """A4 value property"""
+        return self._value
+
+    @value.setter
+    def value(self, val):
+        """A4 value setter"""
+        self._value = val
+
+class B4(A4):
+    @property
+    def value(self):
+        return self._value
+
+    @value.setter
+    def value(self, val):
+        self._value = val * 2
+
+print("Test case 1 - Explicit docstring:")
+print("A1.value.__doc__:", A1.value.__doc__)
+print("B1.value.__doc__:", B1.value.__doc__)
+
+print("\nTest case 2 - Multiple inheritance:")
+print("A2.value.__doc__:", A2.value.__doc__)
+print("A3.value.__doc__:", A3.value.__doc__)
+print("B2.value.__doc__:", B2.value.__doc__)
+
+print("\nTest case 3 - Property getter/setter:")
+print("A4.value.__doc__:", A4.value.__doc__)
+print("B4.value.__doc__:", B4.value.__doc__)
\ No newline at end of file
