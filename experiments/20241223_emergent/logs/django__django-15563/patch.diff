diff --git a/django/db/models/sql/subqueries.py b/django/db/models/sql/subqueries.py
index 04063f73bc..aa35860bc0 100644
--- a/django/db/models/sql/subqueries.py
+++ b/django/db/models/sql/subqueries.py
@@ -95,9 +95,21 @@ class UpdateQuery(Query):
                     "Cannot update model field %r (only non-relations and "
                     "foreign keys permitted)." % field
                 )
+            
+            # If this is a parent model field in a multi-table inheritance scenario
             if model is not self.get_meta().concrete_model:
-                self.add_related_update(model, field, val)
-                continue
+                # Find the link field that points to this parent
+                parent_link = None
+                for parent, field in self.get_meta().parents.items():
+                    if parent._meta.concrete_model is model:
+                        parent_link = field
+                        break
+                
+                if parent_link:
+                    # Add the update using the correct parent link field
+                    self.add_related_update(model, field, val, parent_link)
+                    continue
+                
             values_seq.append((field, model, val))
         return self.add_update_fields(values_seq)
 
@@ -113,13 +125,15 @@ class UpdateQuery(Query):
                 val = val.resolve_expression(self, allow_joins=False, for_save=True)
             self.values.append((field, model, val))
 
-    def add_related_update(self, model, field, value):
+    def add_related_update(self, model, field, value, parent_link=None):
         """
         Add (name, value) to an update query for an ancestor model.
 
-        Update are coalesced so that only one update query per ancestor is run.
+        Update are coalesced so that we only run one update query per ancestor.
+        The parent_link parameter is used to specify which link field to use
+        when there are multiple inheritance paths.
         """
-        self.related_updates.setdefault(model, []).append((field, None, value))
+        self.related_updates.setdefault(model, []).append((field, parent_link, value))
 
     def get_related_updates(self):
         """
@@ -132,9 +146,32 @@ class UpdateQuery(Query):
         result = []
         for model, values in self.related_updates.items():
             query = UpdateQuery(model)
-            query.values = values
+            query.values = [
+                (field, None, value) for field, _, value in values
+            ]
+            
+            # Get the correct IDs for this parent model using the parent link
             if self.related_ids is not None:
-                query.add_filter("pk__in", self.related_ids)
+                # Get the parent link field from the first value tuple
+                parent_link = values[0][1]  # Get parent_link from first value tuple
+                if parent_link:
+                    # Get the IDs from the parent table using the link field
+                    parent_ids = []
+                    for child_id in self.related_ids:
+                        try:
+                            parent_id = self.model.objects.filter(
+                                pk=child_id
+                            ).values_list(parent_link.name + '_id', flat=True)[0]
+                            parent_ids.append(parent_id)
+                        except IndexError:
+                            continue
+                    query.add_filter("pk__in", parent_ids)
+                else:
+                    # Fallback to pk__in if no parent_link specified
+                    query.add_filter("pk__in", self.related_ids)
+            elif self.where:
+                query.where = self.where
+                
             result.append(query)
         return result
 
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..0c4360cd58
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,52 @@
+import os
+import sys
+from django.conf import settings
+
+# Configure Django settings
+BASE_DIR = os.path.dirname(os.path.abspath(__file__))
+sys.path.append(BASE_DIR)
+
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'testapp',
+    ],
+)
+
+import django
+django.setup()
+
+from django.db import connection
+from testapp.models import Base, OtherBase, Child
+
+# Create test data and reproduce the issue
+if __name__ == '__main__':
+    # Create tables
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(Base)
+        schema_editor.create_model(OtherBase)
+        schema_editor.create_model(Child)
+
+    # Create test data
+    OtherBase.objects.create(field_otherbase=100)
+    OtherBase.objects.create(field_otherbase=101)
+    Child.objects.create(field_base=0, field_otherbase=0)
+    Child.objects.create(field_base=1, field_otherbase=1)
+
+    print("\nBefore update:")
+    print("Child objects:", list(Child.objects.values('field_otherbase')))
+    print("OtherBase objects:", list(OtherBase.objects.filter(id__in=[1,2]).values('field_otherbase')))
+
+    # Attempt the update
+    Child.objects.update(field_otherbase=55)
+
+    print("\nAfter update:")
+    print("Child objects:", list(Child.objects.values('field_otherbase')))
+    print("OtherBase objects:", list(OtherBase.objects.filter(id__in=[1,2]).values('field_otherbase')))
\ No newline at end of file
diff --git a/testapp/__init__.py b/testapp/__init__.py
new file mode 100644
index 0000000000..41a9cbfed0
--- /dev/null
+++ b/testapp/__init__.py
@@ -0,0 +1 @@
+# Django app initialization
\ No newline at end of file
diff --git a/testapp/models.py b/testapp/models.py
new file mode 100644
index 0000000000..9b803d00d6
--- /dev/null
+++ b/testapp/models.py
@@ -0,0 +1,11 @@
+from django.db import models
+
+class Base(models.Model):
+    field_base = models.IntegerField()
+
+class OtherBase(models.Model):
+    field_otherbase = models.IntegerField()
+
+class Child(Base, OtherBase):
+    base_ptr = models.OneToOneField(Base, on_delete=models.CASCADE, parent_link=True)
+    otherbase_ptr = models.OneToOneField(OtherBase, on_delete=models.CASCADE, parent_link=True)
\ No newline at end of file
