diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 81f8f79c71..054a6d4d72 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -1211,16 +1211,20 @@ class Exists(Subquery):
 
     def as_sql(self, compiler, connection, template=None, **extra_context):
         query = self.query.exists(using=connection.alias)
-        sql, params = super().as_sql(
-            compiler,
-            connection,
-            template=template,
-            query=query,
-            **extra_context,
-        )
-        if self.negated:
-            sql = 'NOT {}'.format(sql)
-        return sql, params
+        try:
+            sql, params = super().as_sql(
+                compiler,
+                connection,
+                template=template,
+                query=query,
+                **extra_context,
+            )
+            if self.negated:
+                sql = 'NOT {}'.format(sql)
+            return sql, params
+        except EmptyResultSet:
+            # For empty querysets, EXISTS returns FALSE, so NOT EXISTS returns TRUE
+            return 'TRUE' if self.negated else 'FALSE', []
 
     def select_format(self, compiler, sql, params):
         # Wrap EXISTS() with a CASE WHEN expression if a database backend
diff --git a/django/db/models/sql/where.py b/django/db/models/sql/where.py
index 50ff13be75..285031bc7e 100644
--- a/django/db/models/sql/where.py
+++ b/django/db/models/sql/where.py
@@ -3,6 +3,7 @@ Code to manage the creation and SQL rendering of 'where' constraints.
 """
 
 from django.core.exceptions import EmptyResultSet
+from django.db.models.expressions import Exists
 from django.utils import tree
 from django.utils.functional import cached_property
 
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..0d74973e81
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,50 @@
+# Set up minimal Django settings first
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'testapp',
+        ],
+    )
+
+import django
+django.setup()
+
+from django.db import models
+
+class MyModel(models.Model):
+    name = models.CharField(max_length=100)
+
+    class Meta:
+        app_label = 'testapp'
+
+# Set up minimal Django settings
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'testapp',
+        ],
+    )
+
+import django
+django.setup()
+
+# Create the test case
+qs = MyModel.objects.filter(~models.Exists(MyModel.objects.none()), name='test')
+print("QuerySet:", qs)
+print("Query:", qs.query)
\ No newline at end of file
diff --git a/reproduce2.py b/reproduce2.py
new file mode 100644
index 0000000000..2e063bb6f9
--- /dev/null
+++ b/reproduce2.py
@@ -0,0 +1,26 @@
+from django.db.models.sql.query import Query
+from django.db.models.sql.where import WhereNode
+from django.db.models.expressions import Exists
+from django.db.models.sql.subqueries import ExistWrapper
+
+# Create a base query
+query = Query('mymodel')
+
+# Create an empty subquery
+subquery = Query('mymodel')
+exists_wrapper = ExistWrapper(subquery)
+
+# Add the EXISTS condition to the main query's where clause
+where = WhereNode()
+where.add(~exists_wrapper, 'AND')
+
+# Set the where clause on the main query
+query.where = where
+
+print("Query before compilation:", query)
+try:
+    sql, params = query.get_compiler('default').as_sql()
+    print("\nCompiled SQL:", sql)
+    print("Parameters:", params)
+except Exception as e:
+    print("\nError during compilation:", str(e))
\ No newline at end of file
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..be5771dc92
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,44 @@
+from django.conf import settings
+
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=['django.contrib.contenttypes'],
+)
+
+import django
+django.setup()
+
+from django.db import models, connection
+from django.db.models import Q
+from django.db.migrations.executor import MigrationExecutor
+
+# Create test model
+class MyModel(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'myapp'
+        db_table = 'myapp_mymodel'
+
+# Create the database table
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(MyModel)
+
+# Create the test query
+qs = MyModel.objects.filter(~models.Exists(MyModel.objects.none()), name='test')
+
+print("QuerySet:", qs)
+print("\nQuery:", qs.query)
+
+try:
+    sql, params = qs.query.get_compiler(connection.alias).as_sql()
+    print("\nCompiled SQL:", sql)
+    print("Parameters:", params)
+except Exception as e:
+    print("\nError during compilation:", str(e))
\ No newline at end of file
