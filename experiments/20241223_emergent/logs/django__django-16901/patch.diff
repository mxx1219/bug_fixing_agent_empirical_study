diff --git a/django/db/models/sql/where.py b/django/db/models/sql/where.py
index aaab1730b7..2dc450f580 100644
--- a/django/db/models/sql/where.py
+++ b/django/db/models/sql/where.py
@@ -129,13 +129,14 @@ class WhereNode(tree.Node):
             # Convert if the database doesn't support XOR:
             #   a XOR b XOR c XOR ...
             # to:
-            #   (a OR b OR c OR ...) AND (a + b + c + ...) == 1
+            #   (a OR b OR c OR ...) AND MOD(a + b + c + ..., 2) = 1
             lhs = self.__class__(self.children, OR)
             rhs_sum = reduce(
                 operator.add,
                 (Case(When(c, then=1), default=0) for c in self.children),
             )
-            rhs = Exact(1, rhs_sum)
+            # Use modulo 2 to check for odd number of true values
+            rhs = Exact(1, rhs_sum % 2)
             return self.__class__([lhs, rhs], AND, self.negated).as_sql(
                 compiler, connection
             )
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..1f00926ecf
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,55 @@
+from django.db.models import Q
+from django.db.models.sql.where import WhereNode
+from django.db.models.expressions import Case, When
+from django.db.models.lookups import Exact
+import operator
+from functools import reduce
+
+# Mock objects to simulate the behavior
+class MockConnection:
+    class Features:
+        supports_logical_xor = False
+    features = Features()
+
+class MockCompiler:
+    def __init__(self):
+        self.connection = MockConnection()
+    
+    def compile(self, node):
+        if isinstance(node, Case):
+            # Simulate Case/When compilation
+            return "CASE WHEN x=1 THEN 1 ELSE 0 END", []
+        elif isinstance(node, Exact):
+            return "x=1", []
+        return "x=1", []
+
+def test_xor():
+    compiler = MockCompiler()
+    
+    print("Testing XOR behavior:")
+    print("Expected: odd number of true values should return true")
+    print("=" * 50)
+    
+    # Test cases with different numbers of operands
+    test_cases = [
+        ([True], "1 true -> should be true"),
+        ([True, True], "2 true -> should be false"),
+        ([True, True, True], "3 true -> should be true"),
+        ([True, True, True, True], "4 true -> should be false"),
+        ([True, True, True, True, True], "5 true -> should be true"),
+    ]
+    
+    for values, description in test_cases:
+        node = WhereNode()
+        node.connector = "XOR"
+        node.children = [Q(id=1) for _ in range(len(values))]
+        try:
+            sql, params = node.as_sql(compiler, compiler.connection)
+            print(f"\n{description}")
+            print(f"SQL: {sql}")
+        except Exception as e:
+            print(f"\n{description}")
+            print(f"Error: {e}")
+
+if __name__ == "__main__":
+    test_xor()
\ No newline at end of file
