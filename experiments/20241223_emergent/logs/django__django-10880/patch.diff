diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py
index ac0b62d0bf..ea88c54b0d 100644
--- a/django/db/models/aggregates.py
+++ b/django/db/models/aggregates.py
@@ -68,7 +68,7 @@ class Aggregate(Func):
         return []
 
     def as_sql(self, compiler, connection, **extra_context):
-        extra_context['distinct'] = 'DISTINCT' if self.distinct else ''
+        extra_context['distinct'] = 'DISTINCT ' if self.distinct else ''
         if self.filter:
             if connection.features.supports_aggregate_filter_clause:
                 filter_sql, filter_params = self.filter.as_sql(compiler, connection)
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..84de0cb0b1
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,32 @@
+from django.conf import settings
+from django.db import connection
+from django.db.models import Case, Count, When, Value, Q
+from django.db.models.expressions import F
+
+# Configure minimal Django settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:'
+        }
+    }
+)
+
+# Create a simple expression that demonstrates the issue
+expr = Count(
+    Case(
+        When(id__gt=0, then=Value(1)),
+        default=Value(0)
+    ),
+    distinct=True
+)
+
+# Get the SQL
+compiler = connection.ops.compiler('SQLCompiler')(
+    query=None,
+    connection=connection,
+    using=None
+)
+sql, params = expr.as_sql(compiler, connection)
+print("Generated SQL:", sql)
\ No newline at end of file
