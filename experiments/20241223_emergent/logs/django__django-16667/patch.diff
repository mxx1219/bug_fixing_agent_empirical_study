diff --git a/django/forms/widgets.py b/django/forms/widgets.py
index 842b73e95c..1a3441d76d 100644
--- a/django/forms/widgets.py
+++ b/django/forms/widgets.py
@@ -1156,8 +1156,15 @@ class SelectDateWidget(Widget):
             input_format = get_format("DATE_INPUT_FORMATS")[0]
             input_format = formats.sanitize_strftime_format(input_format)
             try:
-                date_value = datetime.date(int(y), int(m), int(d))
-            except ValueError:
+                # Convert strings to integers with bounds checking
+                year = int(y)
+                month = int(m)
+                day = int(d)
+                # Check if values are within reasonable bounds
+                if not (1 <= month <= 12 and 1 <= day <= 31 and datetime.MINYEAR <= year <= datetime.MAXYEAR):
+                    return "%s-%s-%s" % (y or 0, m or 0, d or 0)
+                date_value = datetime.date(year, month, day)
+            except (ValueError, OverflowError):
                 # Return pseudo-ISO dates with zeros for any unselected values,
                 # e.g. '2017-0-23'.
                 return "%s-%s-%s" % (y or 0, m or 0, d or 0)
diff --git a/test_overflow.py b/test_overflow.py
new file mode 100644
index 0000000000..6d270bf6ec
--- /dev/null
+++ b/test_overflow.py
@@ -0,0 +1,28 @@
+from django import forms
+from django.forms import SelectDateWidget
+from django.http import HttpResponse
+from django.conf import settings
+
+settings.configure(
+    USE_I18N=False,
+    USE_L10N=False,
+    INSTALLED_APPS=[],
+    LANGUAGE_CODE='en-us'
+)
+
+import django
+django.setup()
+
+class ReproForm(forms.Form):
+    my_date = forms.DateField(widget=SelectDateWidget())
+
+# Simulate a request with large numbers
+data = {
+    'my_date_day': '1',
+    'my_date_month': '1',
+    'my_date_year': '1234567821345678'
+}
+
+form = ReproForm(data)
+print("Form is valid:", form.is_valid())
+print("Form errors:", form.errors)
\ No newline at end of file
