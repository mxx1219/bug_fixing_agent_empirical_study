diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index d405a203ee..6d08c3de40 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -537,6 +537,9 @@ class SQLCompiler:
 
         If 'with_limits' is False, any limit/offset information is not included
         in the query.
+
+        When dealing with aggregates that have default values after annotations,
+        ensure proper column selection in subqueries.
         """
         refcounts_before = self.query.alias_refcount.copy()
         try:
@@ -565,7 +568,37 @@ class SQLCompiler:
                 having, h_params = self.compile(self.having) if self.having is not None else ("", [])
                 result = ['SELECT']
                 params = []
-
+                
+                # Handle the case where we have both annotations and aggregates with defaults
+                has_annotation = bool(self.query.annotations)
+                has_aggregate_default = any(
+                    hasattr(expr, 'default') and expr.default is not None
+                    for expr in self.query.annotation_select.values()
+                    if hasattr(expr, 'default')
+                )
+                
+                if has_annotation and has_aggregate_default:
+                    # Ensure all annotation columns are included in the subquery
+                    for alias, annotation in self.query.annotations.items():
+                        if alias not in [col[2] for col in self.select]:
+                            col_sql, col_params = self.compile(annotation)
+                            self.select.append((None, (col_sql, col_params), alias))
+                
+                # Handle the case where we have both annotations and aggregates with defaults
+                has_annotation = bool(self.query.annotations)
+                has_aggregate_default = any(
+                    hasattr(expr, 'default') and expr.default is not None
+                    for expr in self.query.annotation_select.values()
+                    if hasattr(expr, 'default')
+                )
+                
+                if has_annotation and has_aggregate_default:
+                    # Ensure all annotation columns are included in the subquery
+                    for alias, annotation in self.query.annotations.items():
+                        if alias not in [col[2] for col in self.select]:
+                            col_sql, col_params = self.compile(annotation)
+                            self.select.append((None, (col_sql, col_params), alias))
+                
                 if self.query.distinct:
                     distinct_result, distinct_params = self.connection.ops.distinct_sql(
                         distinct_fields,
@@ -574,6 +607,8 @@ class SQLCompiler:
                     result += distinct_result
                     params += distinct_params
 
+                # Now continue with the query generation
+
                 out_cols = []
                 col_idx = 1
                 for _, (s_sql, s_params), alias in self.select + extra_select:
diff --git a/repro/__init__.py b/repro/__init__.py
new file mode 100644
index 0000000000..a5c66da983
--- /dev/null
+++ b/repro/__init__.py
@@ -0,0 +1 @@
+# Empty __init__.py to make this directory a Python package
\ No newline at end of file
diff --git a/repro/reproduce.py b/repro/reproduce.py
new file mode 100644
index 0000000000..fe484de3c0
--- /dev/null
+++ b/repro/reproduce.py
@@ -0,0 +1,22 @@
+from django.db import models
+from django.db.models import Sum, F
+
+# Create a simple model for testing
+class Book(models.Model):
+    title = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'testapp'
+        managed = False
+
+# Reproduce the issue
+try:
+    # This works fine
+    result1 = Book.objects.annotate(idx=F("id")).aggregate(Sum("id"))
+    print("Test 1 (without default) succeeded:", result1)
+    
+    # This fails
+    result2 = Book.objects.annotate(idx=F("id")).aggregate(Sum("id", default=0))
+    print("Test 2 (with default) succeeded:", result2)
+except Exception as e:
+    print("Error occurred:", str(e))
\ No newline at end of file
diff --git a/repro/test_settings.py b/repro/test_settings.py
new file mode 100644
index 0000000000..b3eea33e14
--- /dev/null
+++ b/repro/test_settings.py
@@ -0,0 +1,13 @@
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'testapp',
+]
+
+SECRET_KEY = 'dummy-key-for-tests'
\ No newline at end of file
diff --git a/testapp/__init__.py b/testapp/__init__.py
new file mode 100644
index 0000000000..a5c66da983
--- /dev/null
+++ b/testapp/__init__.py
@@ -0,0 +1 @@
+# Empty __init__.py to make this directory a Python package
\ No newline at end of file
diff --git a/testapp/models.py b/testapp/models.py
new file mode 100644
index 0000000000..532945bb18
--- /dev/null
+++ b/testapp/models.py
@@ -0,0 +1,8 @@
+from django.db import models
+
+class Book(models.Model):
+    title = models.CharField(max_length=100)
+    price = models.DecimalField(max_digits=10, decimal_places=2)
+    
+    class Meta:
+        app_label = 'testapp'
\ No newline at end of file
