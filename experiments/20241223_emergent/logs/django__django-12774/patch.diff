diff --git a/django/db/models/query.py b/django/db/models/query.py
index d9c9b0db04..0f2b7c8c15 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -8,6 +8,7 @@ import warnings
 from collections import namedtuple
 from functools import lru_cache
 from itertools import chain
+from django.db import models
 
 from django.conf import settings
 from django.core import exceptions
@@ -689,8 +690,17 @@ class QuerySet:
         """
         assert not self.query.is_sliced, \
             "Cannot use 'limit' or 'offset' with in_bulk"
-        if field_name != 'pk' and not self.model._meta.get_field(field_name).unique:
-            raise ValueError("in_bulk()'s field_name must be a unique field but %r isn't." % field_name)
+        if field_name != 'pk':
+            field = self.model._meta.get_field(field_name)
+            is_unique = field.unique
+            if not is_unique:
+                # Check for UniqueConstraint on this field
+                for constraint in self.model._meta.constraints:
+                    if isinstance(constraint, models.UniqueConstraint) and constraint.fields == (field_name,):
+                        is_unique = True
+                        break
+            if not is_unique:
+                raise ValueError("in_bulk()'s field_name must be a unique field but %r isn't." % field_name)
         if id_list is not None:
             if not id_list:
                 return {}
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..e70f013623
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,43 @@
+from django.conf import settings
+from django.db import models
+
+# Configure minimal Django settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth'],
+    SILENCED_SYSTEM_CHECKS=['models.E001'],  # Silence system check about explicit app_label
+)
+
+import django
+django.setup()
+
+class Article(models.Model):
+    slug = models.CharField(max_length=255)
+    
+    class Meta:
+        app_label = 'testapp'
+        constraints = [
+            models.UniqueConstraint(fields=["slug"], name="article_slug_unq")
+        ]
+
+# Create database tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Article)
+
+# Create test data
+article1 = Article.objects.create(slug="test-article-1")
+article2 = Article.objects.create(slug="test-article-2")
+
+# Try to use in_bulk with slug field
+try:
+    result = Article.objects.in_bulk(field_name="slug")
+    print("Success! in_bulk worked with UniqueConstraint")
+    print("Found articles:", result)
+except ValueError as e:
+    print("Error:", e)
\ No newline at end of file
