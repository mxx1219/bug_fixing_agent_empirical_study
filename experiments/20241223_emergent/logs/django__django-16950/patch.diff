diff --git a/.gitignore b/.gitignore
index 6a67c6eb28..e4487c0da6 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,6 @@ tests/coverage_html/
 tests/.coverage*
 build/
 tests/report/
+*__pycache__*
+*venv*
+*_build*
diff --git a/django/db/models/base.py b/django/db/models/base.py
index 0711ec0d61..41fda7e233 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -775,6 +775,16 @@ class Model(AltersData, metaclass=ModelBase):
         that the "save" must be an SQL insert or update (or equivalent for
         non-SQL backends), respectively. Normally, they should not be set.
         """
+        # Set default values for fields that need them
+        for f in self._meta.concrete_fields:
+            if (
+                f.has_default()
+                and not getattr(self, f.attname, None)
+                and isinstance(f, models.UUIDField)
+                and f.default == uuid.uuid4
+            ):
+                setattr(self, f.attname, f.get_default())
+        
         self._prepare_related_fields_for_save(operation_name="save")
 
         using = using or router.db_for_write(self.__class__, instance=self)
diff --git a/django/forms/models.py b/django/forms/models.py
index 3fa04b821f..65899c9f21 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -48,6 +48,7 @@ def construct_instance(form, instance, fields=None, exclude=None):
     Construct and return a model instance from the bound ``form``'s
     ``cleaned_data``, but do not save the returned instance to the database.
     """
+    import uuid
     from django.db import models
 
     opts = instance._meta
@@ -66,7 +67,9 @@ def construct_instance(form, instance, fields=None, exclude=None):
         if exclude and f.name in exclude:
             continue
         # Leave defaults for fields that aren't in POST data, except for
-        # checkbox inputs because they don't appear in POST data if not checked.
+        # Leave defaults for fields that aren't in POST data, except for:
+        # 1. checkbox inputs because they don't appear in POST data if not checked
+        # 2. UUIDField with default=uuid.uuid4 because it needs to be set for relations
         if (
             f.has_default()
             and form[f.name].field.widget.value_omitted_from_data(
@@ -74,7 +77,11 @@ def construct_instance(form, instance, fields=None, exclude=None):
             )
             and cleaned_data.get(f.name) in form[f.name].field.empty_values
         ):
-            continue
+            # For UUIDField with default=uuid.uuid4, we want to set the default value
+            if isinstance(f, models.UUIDField) and f.default == uuid.uuid4:
+                setattr(instance, f.name, f.get_default())
+            else:
+                continue
         # Defer saving file-type fields until after the other fields, so a
         # callable upload_to can use the values from other fields.
         if isinstance(f, models.FileField):
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..7f5dac167f
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,132 @@
+import os
+import sys
+import uuid
+import django
+from django.conf import settings
+from django.apps import apps
+from django.contrib import admin
+from django.db import models
+from django.core.management import call_command
+
+# Configure Django settings first
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.admin',
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+            'django.contrib.sessions',
+            'django.contrib.messages',
+            'django.contrib.staticfiles',
+            'reproduce_issue',
+        ],
+        MIDDLEWARE=[
+            'django.contrib.sessions.middleware.SessionMiddleware',
+            'django.contrib.auth.middleware.AuthenticationMiddleware',
+            'django.contrib.messages.middleware.MessageMiddleware',
+        ],
+        ROOT_URLCONF='reproduce_issue',
+        SECRET_KEY='dummy',
+        STATIC_URL='/static/',
+        TEMPLATES=[{
+            'BACKEND': 'django.template.backends.django.DjangoTemplates',
+            'APP_DIRS': True,
+            'OPTIONS': {
+                'context_processors': [
+                    'django.contrib.auth.context_processors.auth',
+                    'django.contrib.messages.context_processors.messages',
+                ],
+            },
+        }],
+    )
+    django.setup()
+
+# Define the models
+class UUIDModel(models.Model):
+    pkid = models.BigAutoField(primary_key=True, editable=False)
+    id = models.UUIDField(default=uuid.uuid4, editable=False, unique=True)
+
+    class Meta:
+        abstract = True
+
+class Thing(UUIDModel):
+    name = models.CharField(max_length=191)
+    
+    class Meta:
+        app_label = 'reproduce_issue'
+
+class SubThing(models.Model):
+    name = models.CharField(max_length=191)
+    thing = models.ForeignKey(
+        Thing,
+        to_field='id',
+        on_delete=models.CASCADE,
+        related_name='subthings',
+    )
+    
+    class Meta:
+        app_label = 'reproduce_issue'
+
+# Define the admin
+class SubThingInline(admin.StackedInline):
+    model = SubThing
+
+@admin.register(Thing)
+class ThingAdmin(admin.ModelAdmin):
+    list_display = ('name',)
+    ordering = ('pkid',)
+    inlines = (SubThingInline,)
+
+# URLs configuration
+from django.urls import path
+urlpatterns = [
+    path('admin/', admin.site.urls),
+]
+
+if __name__ == '__main__':
+    # Create tables
+    call_command('migrate', run_syncdb=True)
+    
+    # Create a superuser
+    from django.contrib.auth.models import User
+    User.objects.create_superuser('admin', 'admin@example.com', 'admin')
+    
+    # Create a Thing with a SubThing
+    thing = Thing.objects.create(name='Test Thing')
+    subthing = SubThing.objects.create(name='Test SubThing', thing=thing)
+    
+    print("Created Thing:", thing.id)
+    print("Created SubThing:", subthing.id)
+    
+    # Try to create a Thing with a SubThing in one go through a form
+    from django.forms import inlineformset_factory
+    ThingFormSet = inlineformset_factory(Thing, SubThing, fields=('name',))
+    
+    thing_data = {'name': 'New Thing'}
+    formset_data = {
+        'subthings-TOTAL_FORMS': '1',
+        'subthings-INITIAL_FORMS': '0',
+        'subthings-MIN_NUM_FORMS': '0',
+        'subthings-MAX_NUM_FORMS': '1000',
+        'subthings-0-name': 'New SubThing',
+    }
+    
+    # This is where the issue should manifest
+    thing = Thing(**thing_data)
+    formset = ThingFormSet(formset_data, instance=thing)
+    if formset.is_valid():
+        thing.save()
+        formset.save()
+        print("Successfully created Thing with inline SubThing")
+        print("Thing ID:", thing.id)
+        print("SubThing count:", thing.subthings.count())
+    else:
+        print("Failed to create Thing with inline SubThing")
+        print("Formset errors:", formset.errors)
\ No newline at end of file
diff --git a/reproduce_issue/__init__.py b/reproduce_issue/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/reproduce_issue/admin.py b/reproduce_issue/admin.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/reproduce_issue/models.py b/reproduce_issue/models.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_app/__init__.py b/test_app/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_app/urls.py b/test_app/urls.py
new file mode 100644
index 0000000000..6b669efaa2
--- /dev/null
+++ b/test_app/urls.py
@@ -0,0 +1,6 @@
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path('admin/', admin.site.urls),
+]
\ No newline at end of file
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..84dfebb5c8
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,123 @@
+import os
+import sys
+import uuid
+import django
+from django.conf import settings
+from django.contrib import admin
+from django.db import models
+from django.core.management import call_command
+from django.forms import inlineformset_factory
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.admin',
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+            'django.contrib.sessions',
+            'django.contrib.messages',
+            'django.contrib.staticfiles',
+            'test_app',
+        ],
+        MIDDLEWARE=[
+            'django.contrib.sessions.middleware.SessionMiddleware',
+            'django.contrib.auth.middleware.AuthenticationMiddleware',
+            'django.contrib.messages.middleware.MessageMiddleware',
+        ],
+        ROOT_URLCONF='test_app.urls',
+        SECRET_KEY='dummy',
+    )
+    django.setup()
+
+# Create a test app
+class UUIDModel(models.Model):
+    pkid = models.BigAutoField(primary_key=True, editable=False)
+    id = models.UUIDField(default=uuid.uuid4, editable=False, unique=True)
+
+    class Meta:
+        abstract = True
+        app_label = 'test_app'
+
+class Thing(UUIDModel):
+    name = models.CharField(max_length=191)
+
+    class Meta:
+        app_label = 'test_app'
+
+class SubThing(models.Model):
+    name = models.CharField(max_length=191)
+    thing = models.ForeignKey(
+        Thing,
+        to_field='id',
+        on_delete=models.CASCADE,
+        related_name='subthings',
+    )
+
+    class Meta:
+        app_label = 'test_app'
+
+# Create the database tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Thing)
+    schema_editor.create_model(SubThing)
+
+# Test the fix
+def test_inline_formset():
+    # Create a Thing with a SubThing using formset
+    thing_data = {'name': 'Test Thing'}
+    formset_data = {
+        'subthings-TOTAL_FORMS': '1',
+        'subthings-INITIAL_FORMS': '0',
+        'subthings-MIN_NUM_FORMS': '0',
+        'subthings-MAX_NUM_FORMS': '1000',
+        'subthings-0-name': 'Test SubThing',
+    }
+
+    # Create the Thing instance
+    thing = Thing(**thing_data)
+    
+    # Create and validate the formset
+    ThingFormSet = inlineformset_factory(Thing, SubThing, fields=('name',))
+    formset = ThingFormSet(formset_data, instance=thing)
+    
+    if not formset.is_valid():
+        print("Formset validation failed:", formset.errors)
+        return False
+    
+    # Save the Thing and its inline SubThing
+    thing.save()
+    formset.save()
+    
+    # Verify that both Thing and SubThing were saved correctly
+    if not thing.id:
+        print("ERROR: Thing.id is None")
+        return False
+    
+    if thing.subthings.count() != 1:
+        print("ERROR: Expected 1 SubThing, got", thing.subthings.count())
+        return False
+    
+    subthing = thing.subthings.first()
+    if not subthing:
+        print("ERROR: SubThing not found")
+        return False
+    
+    print("Success!")
+    print("Thing ID:", thing.id)
+    print("Thing Name:", thing.name)
+    print("SubThing ID:", subthing.id)
+    print("SubThing Name:", subthing.name)
+    return True
+
+if __name__ == '__main__':
+    # Run the test
+    test_inline_formset()
\ No newline at end of file
