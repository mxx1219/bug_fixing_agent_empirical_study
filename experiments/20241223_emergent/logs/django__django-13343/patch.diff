diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py
index e10a5bb6d9..bc46c0fb00 100644
--- a/django/db/models/fields/files.py
+++ b/django/db/models/fields/files.py
@@ -227,9 +227,12 @@ class FileField(Field):
     def __init__(self, verbose_name=None, name=None, upload_to='', storage=None, **kwargs):
         self._primary_key_set_explicitly = 'primary_key' in kwargs
 
-        self.storage = storage or default_storage
-        if callable(self.storage):
-            self.storage = self.storage()
+        self._storage_callable = None
+        if storage is None:
+            self.storage = default_storage
+        else:
+            self._storage_callable = storage if callable(storage) else None
+            self.storage = self._storage_callable() if self._storage_callable else storage
             if not isinstance(self.storage, Storage):
                 raise TypeError(
                     "%s.storage must be a subclass/instance of %s.%s"
@@ -278,7 +281,9 @@ class FileField(Field):
         if kwargs.get("max_length") == 100:
             del kwargs["max_length"]
         kwargs['upload_to'] = self.upload_to
-        if self.storage is not default_storage:
+        if self._storage_callable is not None:
+            kwargs['storage'] = self._storage_callable
+        elif self.storage is not default_storage:
             kwargs['storage'] = self.storage
         return name, path, args, kwargs
 
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..145b30e331
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,15 @@
+from django.core.files.storage import FileSystemStorage
+from django.db.models import FileField
+
+def get_storage():
+    return FileSystemStorage(location='/tmp/test')
+
+# Create a FileField with callable storage
+field = FileField(storage=get_storage)
+
+# Get the deconstructed form
+name, path, args, kwargs = field.deconstruct()
+
+print("Original storage was callable:", callable(get_storage))
+print("Deconstructed storage is callable:", callable(kwargs.get('storage')))
+print("Type of deconstructed storage:", type(kwargs.get('storage')))
\ No newline at end of file
