diff --git a/.gitignore b/.gitignore
index 238fb3a200..975c5364d8 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,6 @@ tests/coverage_html/
 tests/.coverage
 build/
 tests/report/
+*__pycache__*
+*venv*
+*_build*
diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index caa03665ea..bb32263250 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -21,7 +21,7 @@ from django.utils.dateparse import (
     parse_date, parse_datetime, parse_duration, parse_time,
 )
 from django.utils.duration import duration_microseconds, duration_string
-from django.utils.functional import Promise, cached_property
+from django.utils.functional import Promise, empty, cached_property
 from django.utils.ipv6 import clean_ipv6_address
 from django.utils.itercompat import is_iterable
 from django.utils.text import capfirst
@@ -804,6 +804,14 @@ class Field(RegisterLookupMixin):
         """Perform preliminary non-db specific value checks and conversions."""
         if isinstance(value, Promise):
             value = value._proxy____cast()
+        elif hasattr(value, '_wrapped'):
+            # Handle SimpleLazyObject
+            if value._wrapped is empty:
+                value._setup()
+            value = value._wrapped
+            # If this is a model instance, get its pk
+            if hasattr(value, '_meta'):
+                value = value.pk
         return value
 
     def get_db_prep_value(self, value, connection, prepared=False):
diff --git a/repro/reproduce_bug.py b/repro/reproduce_bug.py
new file mode 100644
index 0000000000..13f492fc5d
--- /dev/null
+++ b/repro/reproduce_bug.py
@@ -0,0 +1,66 @@
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'repro.settings')
+
+from django.conf import settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.auth',
+        'django.contrib.contenttypes',
+        'repro',
+    ],
+)
+
+import django
+django.setup()
+
+from django.core.management import call_command
+call_command('migrate', verbosity=0)
+
+from django.contrib.auth.models import User
+from django.db import models
+from django.db.models import OuterRef, Subquery
+from django.utils.functional import SimpleLazyObject
+
+# Define models
+class A(models.Model):
+    class Meta:
+        app_label = 'repro'
+
+class B(models.Model):
+    a = models.ForeignKey(A, on_delete=models.CASCADE)
+    class Meta:
+        app_label = 'repro'
+
+class C(models.Model):
+    owner = models.ForeignKey(User, on_delete=models.CASCADE)
+    class Meta:
+        app_label = 'repro'
+
+# Reproduce the bug
+def reproduce_bug():
+    owner_user = (
+        B.objects.filter(a=OuterRef("pk"))
+        .annotate(owner_user=Subquery(C.objects.values("owner")))
+        .values("owner_user")
+    )
+    user = SimpleLazyObject(lambda: User.objects.create_user("testuser"))
+    try:
+        A.objects.annotate(owner_user=Subquery(owner_user)).filter(
+            owner_user=user
+        )
+    except TypeError as e:
+        print(f"Error occurred: {e}")
+        return True
+    return False
+
+if __name__ == "__main__":
+    if reproduce_bug():
+        print("Successfully reproduced the bug!")
+    else:
+        print("Could not reproduce the bug.")
\ No newline at end of file
