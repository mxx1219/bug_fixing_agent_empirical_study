diff --git a/django/contrib/admin/views/autocomplete.py b/django/contrib/admin/views/autocomplete.py
index 3903e4c98c..8db86b305d 100644
--- a/django/contrib/admin/views/autocomplete.py
+++ b/django/contrib/admin/views/autocomplete.py
@@ -9,6 +9,13 @@ class AutocompleteJsonView(BaseListView):
     paginate_by = 20
     admin_site = None
 
+    def serialize_result(self, obj, to_field_name):
+        """
+        Convert the provided model object to a dictionary for JSON serialization.
+        Override this method to customize the result format.
+        """
+        return {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}
+
     def get(self, request, *args, **kwargs):
         """
         Return a JsonResponse with search results of the form:
@@ -26,7 +33,7 @@ class AutocompleteJsonView(BaseListView):
         context = self.get_context_data()
         return JsonResponse({
             'results': [
-                {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}
+                self.serialize_result(obj, to_field_name)
                 for obj in context['object_list']
             ],
             'pagination': {'more': context['page_obj'].has_next()},
diff --git a/test_autocomplete.py b/test_autocomplete.py
new file mode 100644
index 0000000000..32db36b9cc
--- /dev/null
+++ b/test_autocomplete.py
@@ -0,0 +1,132 @@
+import os
+import sys
+import django
+from django.conf import settings
+from django.contrib import admin
+from django.db import models
+from django.http import JsonResponse
+from django.test import RequestFactory
+from django.contrib.admin.views.autocomplete import AutocompleteJsonView
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.admin',
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+            'django.contrib.sessions',
+            'django.contrib.messages',
+            '__main__',
+        ],
+        MIDDLEWARE=[
+            'django.contrib.sessions.middleware.SessionMiddleware',
+            'django.contrib.auth.middleware.AuthenticationMiddleware',
+            'django.contrib.messages.middleware.MessageMiddleware',
+        ],
+        ROOT_URLCONF='__main__',
+        SECRET_KEY='test-key',
+    )
+    django.setup()
+
+# Create database tables
+from django.core.management import call_command
+call_command('migrate')
+
+# Create and apply migrations for our models
+from django.db import connections
+from django.db.migrations.executor import MigrationExecutor
+
+# Create test models
+class Author(models.Model):
+    name = models.CharField(max_length=100)
+    notes = models.TextField()
+
+    def __str__(self):
+        return self.name
+
+class Book(models.Model):
+    title = models.CharField(max_length=100)
+    author = models.ForeignKey(Author, on_delete=models.CASCADE)
+
+# Create custom autocomplete view
+class CustomAutocompleteJsonView(AutocompleteJsonView):
+    def serialize_result(self, obj, to_field_name):
+        result = super().serialize_result(obj, to_field_name)
+        result['notes'] = obj.notes
+        return result
+
+# Create model admin
+class AuthorAdmin(admin.ModelAdmin):
+    search_fields = ['name']
+
+class BookAdmin(admin.ModelAdmin):
+    autocomplete_fields = ['author']
+
+# Register models
+admin.site.register(Author, AuthorAdmin)
+admin.site.register(Book, BookAdmin)
+
+def create_schema():
+    """Create database schema for our models."""
+    connection = connections['default']
+    connection.prepare_database()
+    with connection.schema_editor() as schema_editor:
+        for model in [Author, Book]:
+            if not model._meta.managed:
+                continue
+            if model._meta.db_table not in connection.introspection.table_names():
+                schema_editor.create_model(model)
+
+def main():
+    # Create schema
+    create_schema()
+    
+    # Create a superuser
+    from django.contrib.auth.models import User
+    superuser = User.objects.create_superuser('admin', 'admin@example.com', 'password')
+    # Create test data
+    Author.objects.create(name="John Doe", notes="Prolific writer")
+    Author.objects.create(name="Jane Smith", notes="Award winner")
+
+    # Test original AutocompleteJsonView
+    factory = RequestFactory()
+    request = factory.get('/admin/autocomplete/', {
+        'term': 'John',
+        'app_label': '__main__',
+        'model_name': 'book',
+        'field_name': 'author'
+    })
+    request.user = superuser
+    
+    # Mock admin site
+    admin_site = admin.AdminSite()
+    admin_site._registry[Book] = BookAdmin(Book, admin_site)
+    admin_site._registry[Author] = AuthorAdmin(Author, admin_site)
+    
+    view = AutocompleteJsonView()
+    view.admin_site = admin_site
+    view.request = request
+    view.kwargs = {}
+    response = view.get(request)
+    print("\nOriginal AutocompleteJsonView response:")
+    print(response.content.decode())
+
+    # Test CustomAutocompleteJsonView
+    view = CustomAutocompleteJsonView()
+    view.admin_site = admin_site
+    view.request = request
+    view.kwargs = {}
+    response = view.get(request)
+    print("\nCustom AutocompleteJsonView response:")
+    print(response.content.decode())
+
+if __name__ == '__main__':
+    main()
\ No newline at end of file
