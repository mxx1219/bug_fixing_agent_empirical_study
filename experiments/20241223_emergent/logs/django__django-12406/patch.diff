diff --git a/django/forms/models.py b/django/forms/models.py
index dafc11f995..f4c8b673df 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -13,7 +13,7 @@ from django.forms.forms import BaseForm, DeclarativeFieldsMetaclass
 from django.forms.formsets import BaseFormSet, formset_factory
 from django.forms.utils import ErrorList
 from django.forms.widgets import (
-    HiddenInput, MultipleHiddenInput, SelectMultiple,
+    HiddenInput, MultipleHiddenInput, SelectMultiple, RadioSelect,
 )
 from django.utils.text import capfirst, get_text_list
 from django.utils.translation import gettext, gettext_lazy as _
@@ -1185,7 +1185,7 @@ class ModelChoiceField(ChoiceField):
                  required=True, widget=None, label=None, initial=None,
                  help_text='', to_field_name=None, limit_choices_to=None,
                  **kwargs):
-        if required and (initial is not None):
+        if required and (initial is not None or isinstance(widget, RadioSelect)):
             self.empty_label = None
         else:
             self.empty_label = empty_label
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..91af70c47d
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,42 @@
+# Create a sample form and print its HTML
+if __name__ == '__main__':
+    from django.conf import settings
+    settings.configure(
+        DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+        INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth'],
+        DEFAULT_AUTO_FIELD='django.db.models.AutoField',
+    )
+    import django
+    django.setup()
+
+    from django.db import models
+    from django.forms import ModelForm, RadioSelect
+    from django.forms.models import ModelChoiceField
+
+    # Create a simple model with a foreign key
+    class BatchData(models.Model):
+        name = models.CharField(max_length=100)
+
+        def __str__(self):
+            return self.name
+
+        class Meta:
+            app_label = 'auth'  # Use existing app
+
+    class TestRun(models.Model):
+        data_file = models.ForeignKey(BatchData, on_delete=models.SET_NULL, null=True, blank=False)
+
+        class Meta:
+            app_label = 'auth'  # Use existing app
+
+    class TestRunForm(ModelForm):
+        class Meta:
+            model = TestRun
+            fields = ['data_file']
+            widgets = {'data_file': RadioSelect()}
+
+    # Create a new form
+    form = TestRunForm()
+    
+    # Print the rendered HTML for the data_file field
+    print(form['data_file'])
\ No newline at end of file
