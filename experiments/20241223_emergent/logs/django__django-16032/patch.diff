diff --git a/.gitignore b/.gitignore
index 238fb3a200..975c5364d8 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,6 @@ tests/coverage_html/
 tests/.coverage
 build/
 tests/report/
+*__pycache__*
+*venv*
+*_build*
diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py
index 866e38df83..8ce31df04f 100644
--- a/django/db/models/lookups.py
+++ b/django/db/models/lookups.py
@@ -420,9 +420,10 @@ class In(FieldGetDbPrepValueIterableMixin, BuiltinLookup):
 
         if isinstance(self.rhs, Query):
             self.rhs.clear_ordering(clear_default=True)
-            if not self.rhs.has_select_fields:
-                self.rhs.clear_select_clause()
-                self.rhs.add_fields(["pk"])
+            # Always clear select clause for subqueries and add only pk
+            # to avoid issues with annotations and aliases
+            self.rhs.clear_select_clause()
+            self.rhs.add_fields(["pk"])
         return super().get_prep_lookup()
 
     def process_rhs(self, compiler, connection):
diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 8419dc0d54..53441572ed 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -2096,6 +2096,12 @@ class Query(BaseExpression):
         self.select_related = False
         self.set_extra_mask(())
         self.set_annotation_mask(())
+        # Clear annotations and aliases when used in a subquery
+        if getattr(self, 'subquery', False):
+            self.annotations = {}
+            self._annotation_select_cache = None
+            # Clear any alias annotations but keep table aliases
+            self.annotation_select_mask = None
 
     def clear_select_fields(self):
         """
diff --git a/test_subquery.py b/test_subquery.py
new file mode 100644
index 0000000000..cfa46d8a40
--- /dev/null
+++ b/test_subquery.py
@@ -0,0 +1,62 @@
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')
+
+from django.conf import settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=['django.contrib.contenttypes'],
+    SECRET_KEY='dummy'
+)
+
+import django
+django.setup()
+
+from django.db import models, connection
+from django.core.management.color import no_style
+from django.db.models import Value
+
+class Publisher(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'contenttypes'
+
+class Book(models.Model):
+    class Meta:
+        app_label = 'contenttypes'
+    publisher = models.ForeignKey(Publisher, on_delete=models.CASCADE)
+    pages = models.IntegerField()
+
+if __name__ == '__main__':
+    # Create tables
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(Publisher)
+        schema_editor.create_model(Book)
+    
+    # Create test data
+    publisher = Publisher.objects.create(name='Test Publisher')
+    book = Book.objects.create(publisher=publisher, pages=500)
+
+    # Run the test
+    long_books_qs = (
+        Book.objects.filter(
+            pages__gt=400,
+        )
+        .annotate(book_annotate=Value(1))
+        .alias(book_alias=Value(1))
+    )
+    publisher_books_qs = (
+        Publisher.objects.filter(
+            book__in=long_books_qs
+        )
+        .values("name")
+    )
+    # Print the query to see if it's correct
+    print(publisher_books_qs.query)
+    # Execute the query to check for errors
+    print(list(publisher_books_qs))
\ No newline at end of file
