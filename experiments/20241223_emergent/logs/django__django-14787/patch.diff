diff --git a/.gitignore b/.gitignore
index 238fb3a200..975c5364d8 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,6 @@ tests/coverage_html/
 tests/.coverage
 build/
 tests/report/
+*__pycache__*
+*venv*
+*_build*
diff --git a/django/utils/decorators.py b/django/utils/decorators.py
index 5c9a5d01c7..0289cfa6e8 100644
--- a/django/utils/decorators.py
+++ b/django/utils/decorators.py
@@ -37,10 +37,17 @@ def _multi_decorate(decorators, method):
         # 'self' argument, but it's a closure over self so it can call
         # 'func'. Also, wrap method.__get__() in a function because new
         # attributes can't be set on bound method objects, only on functions.
-        bound_method = partial(method.__get__(self, type(self)))
+        # Get the bound method
+        bound_method = method.__get__(self, type(self))
+        # Create a wrapper that preserves the bound method's attributes
+        @wraps(bound_method)
+        def wrapper(*args, **kwargs):
+            return bound_method(*args, **kwargs)
+        # Apply decorators to the wrapper
+        decorated = wrapper
         for dec in decorators:
-            bound_method = dec(bound_method)
-        return bound_method(*args, **kwargs)
+            decorated = dec(decorated)
+        return decorated(*args, **kwargs)
 
     # Copy any attributes that a decorator adds to the function it decorates.
     for dec in decorators:
diff --git a/edge_case.py b/edge_case.py
new file mode 100644
index 0000000000..64aef71b05
--- /dev/null
+++ b/edge_case.py
@@ -0,0 +1,33 @@
+from functools import wraps
+from django.utils.decorators import method_decorator
+
+def add_attribute(func):
+    func.custom_attr = "test"
+    return func
+
+def logger(func):
+    @wraps(func)
+    def inner(*args, **kwargs):
+        try:
+            result = func(*args, **kwargs)
+        except Exception as e:
+            result = str(e)
+        finally:
+            print(f"{func.__name__} called with args: {args} and kwargs: {kwargs} resulting: {result}")
+            # Try to access the custom attribute
+            print(f"Custom attribute value: {getattr(func, 'custom_attr', 'not found')}")
+        return result
+    return inner
+
+class Test:
+    @method_decorator([logger, add_attribute])
+    def hello_world(self):
+        """This is a docstring."""
+        return "hello"
+
+if __name__ == "__main__":
+    t = Test()
+    print(f"Method name: {t.hello_world.__name__}")
+    print(f"Method doc: {t.hello_world.__doc__}")
+    print(f"Has custom_attr: {hasattr(t.hello_world, 'custom_attr')}")
+    t.hello_world()
\ No newline at end of file
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..62c78c3451
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,22 @@
+from functools import wraps
+from django.utils.decorators import method_decorator
+
+def logger(func):
+    @wraps(func)
+    def inner(*args, **kwargs):
+        try:
+            result = func(*args, **kwargs)
+        except Exception as e:
+            result = str(e)
+        finally:
+            print(f"{func.__name__} called with args: {args} and kwargs: {kwargs} resulting: {result}")
+        return result
+    return inner
+
+class Test:
+    @method_decorator(logger)
+    def hello_world(self):
+        return "hello"
+
+if __name__ == "__main__":
+    Test().hello_world()
\ No newline at end of file
