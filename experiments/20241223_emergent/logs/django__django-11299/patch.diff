diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..aea320321b
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,53 @@
+from django.db import models
+from django.db.models import Q
+from django.db.backends.sqlite3.schema import DatabaseSchemaEditor
+from django.db.backends.sqlite3.base import DatabaseWrapper
+
+# Create a test model
+class TestConstraint(models.Model):
+    field_1 = models.IntegerField(blank=True, null=True)
+    flag = models.BooleanField(blank=False, null=False)
+    
+    class Meta:
+        app_label = 'test_app'
+        constraints = [
+            models.CheckConstraint(
+                check=models.Q(flag__exact=True, field_1__isnull=False) | models.Q(flag__exact=False),
+                name='field_1_has_value_if_flag_set'
+            ),
+        ]
+
+# Create a test migration
+migration = Migration('test_migration', 'test_app')
+migration.operations = [
+    CreateModel(
+        name='TestConstraint',
+        fields=[
+            ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+            ('field_1', models.IntegerField(blank=True, null=True)),
+            ('flag', models.BooleanField()),
+        ],
+    ),
+    AddConstraint(
+        model_name='testconstraint',
+        constraint=models.CheckConstraint(
+            check=models.Q(models.Q(('field_1__isnull', False), ('flag__exact', True)), ('flag__exact', False), _connector='OR'),
+            name='field_1_has_value_if_flag_set'
+        ),
+    ),
+]
+
+# Set up the database connection
+connection = DatabaseWrapper({
+    'NAME': ':memory:',
+    'ENGINE': 'django.db.backends.sqlite3',
+})
+
+# Create schema editor
+schema_editor = DatabaseSchemaEditor(connection)
+
+# Apply the migration
+project_state = ProjectState()
+new_state = migration.apply(project_state, schema_editor)
+
+print("Migration applied successfully")
\ No newline at end of file
