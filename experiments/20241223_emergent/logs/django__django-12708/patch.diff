diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py
index 61f88401ab..8b9a6048e9 100644
--- a/django/db/backends/base/schema.py
+++ b/django/db/backends/base/schema.py
@@ -403,11 +403,28 @@ class BaseDatabaseSchemaEditor:
         meta_constraint_names = {constraint.name for constraint in model._meta.constraints}
         meta_index_names = {constraint.name for constraint in model._meta.indexes}
         columns = [model._meta.get_field(field).column for field in fields]
+        
+        # When deleting an index, exclude both meta constraints/indexes and any unique constraints
+        exclude = meta_constraint_names | meta_index_names
+        if constraint_kwargs.get('index'):
+            # Also exclude unique constraints when deleting an index
+            unique_constraints = self._constraint_names(
+                model, columns, exclude=meta_constraint_names | meta_index_names,
+                unique=True
+            )
+            exclude = exclude | set(unique_constraints)
+            
         constraint_names = self._constraint_names(
-            model, columns, exclude=meta_constraint_names | meta_index_names,
+            model, columns, exclude=exclude,
             **constraint_kwargs
         )
+        
         if len(constraint_names) != 1:
+            if constraint_kwargs.get('index') and len(constraint_names) == 0:
+                # Special case: when removing an index that overlaps with a unique constraint,
+                # it's okay if we don't find the index - it might have been automatically created
+                # by the unique constraint
+                return
             raise ValueError("Found wrong number (%s) of constraints for %s(%s)" % (
                 len(constraint_names),
                 model._meta.db_table,
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..7f244cdd8e
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,87 @@
+from django.db import models
+from django.db import migrations
+from django.db.migrations.state import ProjectState
+from django.db.migrations.executor import MigrationExecutor
+from django.db import connection
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth', 'testapp'],
+        USE_TZ=False,
+    )
+    import django
+    django.setup()
+
+# Create a test model
+class TestModel(models.Model):
+    field1 = models.CharField(max_length=100)
+    field2 = models.CharField(max_length=100)
+
+    class Meta:
+        app_label = 'testapp'
+        unique_together = [('field1', 'field2')]
+        index_together = [('field1', 'field2')]
+
+# Create migrations
+class Migration1(migrations.Migration):
+    operations = [
+        migrations.CreateModel(
+            name='TestModel',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('field1', models.CharField(max_length=100)),
+                ('field2', models.CharField(max_length=100)),
+            ],
+            options={
+                'unique_together': {('field1', 'field2')},
+                'index_together': {('field1', 'field2')},
+            },
+        ),
+    ]
+
+class Migration2(migrations.Migration):
+    operations = [
+        migrations.AlterIndexTogether(
+            name='TestModel',
+            index_together=set(),  # Remove index_together
+        ),
+    ]
+
+# Set up the migration executor
+executor = MigrationExecutor(connection)
+state = ProjectState()
+
+# Apply migrations
+try:
+    # Create project state
+    project_state = ProjectState()
+    
+    # First migration - create model with both unique_together and index_together
+    migration1 = Migration1("0001_initial", "testapp")
+    new_state = project_state.clone()
+    with connection.schema_editor() as schema_editor:
+        for operation in migration1.operations:
+            operation.state_forwards("testapp", new_state)
+            operation.database_forwards("testapp", schema_editor, project_state, new_state)
+    project_state = new_state
+    print("First migration successful")
+    
+    # Second migration - remove index_together
+    migration2 = Migration2("0002_remove_index", "testapp")
+    new_state = project_state.clone()
+    with connection.schema_editor() as schema_editor:
+        for operation in migration2.operations:
+            operation.state_forwards("testapp", new_state)
+            operation.database_forwards("testapp", schema_editor, project_state, new_state)
+    project_state = new_state
+    print("Second migration successful")
+except Exception as e:
+    print(f"Error: {e}")
\ No newline at end of file
diff --git a/testapp/__init__.py b/testapp/__init__.py
new file mode 100644
index 0000000000..9bba8a553d
--- /dev/null
+++ b/testapp/__init__.py
@@ -0,0 +1 @@
+# testapp module
\ No newline at end of file
