diff --git a/django/contrib/auth/checks.py b/django/contrib/auth/checks.py
index 65fc266f7e..4ae0f08c4e 100644
--- a/django/contrib/auth/checks.py
+++ b/django/contrib/auth/checks.py
@@ -4,6 +4,7 @@ from types import MethodType
 from django.apps import apps
 from django.conf import settings
 from django.core import checks
+from django.db import models
 
 from .management import _get_builtin_permissions
 
@@ -51,30 +52,39 @@ def check_user_model(app_configs=None, **kwargs):
             )
         )
 
-    # Check that the username field is unique
-    if not cls._meta.get_field(cls.USERNAME_FIELD).unique:
-        if (settings.AUTHENTICATION_BACKENDS ==
-                ['django.contrib.auth.backends.ModelBackend']):
-            errors.append(
-                checks.Error(
-                    "'%s.%s' must be unique because it is named as the 'USERNAME_FIELD'." % (
-                        cls._meta.object_name, cls.USERNAME_FIELD
-                    ),
-                    obj=cls,
-                    id='auth.E003',
+    # Check that the username field is unique through field.unique or UniqueConstraint
+    field_is_unique = cls._meta.get_field(cls.USERNAME_FIELD).unique
+    if not field_is_unique:
+        # Check if there's a UniqueConstraint that includes only the USERNAME_FIELD
+        has_unique_constraint = any(
+            isinstance(constraint, models.UniqueConstraint) and
+            list(constraint.fields) == [cls.USERNAME_FIELD]
+            for constraint in cls._meta.constraints
+        )
+        
+        if not has_unique_constraint:
+            if (settings.AUTHENTICATION_BACKENDS ==
+                    ['django.contrib.auth.backends.ModelBackend']):
+                errors.append(
+                    checks.Error(
+                        "'%s.%s' must be unique because it is named as the 'USERNAME_FIELD'." % (
+                            cls._meta.object_name, cls.USERNAME_FIELD
+                        ),
+                        obj=cls,
+                        id='auth.E003',
+                    )
                 )
-            )
-        else:
-            errors.append(
-                checks.Warning(
-                    "'%s.%s' is named as the 'USERNAME_FIELD', but it is not unique." % (
-                        cls._meta.object_name, cls.USERNAME_FIELD
-                    ),
-                    hint='Ensure that your authentication backend(s) can handle non-unique usernames.',
-                    obj=cls,
-                    id='auth.W004',
+            else:
+                errors.append(
+                    checks.Warning(
+                        "'%s.%s' is named as the 'USERNAME_FIELD', but it is not unique." % (
+                            cls._meta.object_name, cls.USERNAME_FIELD
+                        ),
+                        hint='Ensure that your authentication backend(s) can handle non-unique usernames.',
+                        obj=cls,
+                        id='auth.W004',
+                    )
                 )
-            )
 
     if isinstance(cls().is_anonymous, MethodType):
         errors.append(
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..429d377d30
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,48 @@
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3'}},
+        AUTHENTICATION_BACKENDS=['django.contrib.auth.backends.ModelBackend'],
+        AUTH_USER_MODEL='auth.User',
+    )
+
+from django.apps import apps
+apps.ready = False
+apps.populate(settings.INSTALLED_APPS)
+
+from django.contrib.auth.base_user import AbstractBaseUser
+from django.db import models
+from django.core import checks
+from django.test.utils import isolate_apps
+
+def test_model(with_unique_constraint=False):
+    class CustomUser(AbstractBaseUser):
+        username = models.CharField(max_length=30)
+        USERNAME_FIELD = "username"
+        
+        class Meta:
+            app_label = 'auth'
+            if with_unique_constraint:
+                constraints = [models.UniqueConstraint(fields=["username"], name="user_username_unq")]
+    
+    from django.contrib.auth import checks as auth_checks
+    from unittest.mock import patch
+    
+    with patch('django.apps.apps.get_model', return_value=CustomUser):
+        errors = auth_checks.check_user_model()
+    
+    return [error for error in errors if error.id in ('auth.E003', 'auth.W004')]
+
+if __name__ == "__main__":
+    print("Testing without UniqueConstraint:")
+    for error in test_model(with_unique_constraint=False):
+        print(f"Error {error.id}: {error.msg}")
+    
+    print("\nTesting with UniqueConstraint:")
+    for error in test_model(with_unique_constraint=True):
+        print(f"Error {error.id}: {error.msg}")
\ No newline at end of file
