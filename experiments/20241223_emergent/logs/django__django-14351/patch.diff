diff --git a/django/db/models/fields/related_lookups.py b/django/db/models/fields/related_lookups.py
index d745ecd5f9..9de1632280 100644
--- a/django/db/models/fields/related_lookups.py
+++ b/django/db/models/fields/related_lookups.py
@@ -86,18 +86,19 @@ class RelatedIn(In):
                     AND)
             return root_constraint.as_sql(compiler, connection)
         else:
-            if (not getattr(self.rhs, 'has_select_fields', True) and
-                    not getattr(self.lhs.field.target_field, 'primary_key', False)):
-                self.rhs.clear_select_clause()
-                if (getattr(self.lhs.output_field, 'primary_key', False) and
-                        self.lhs.output_field.model == self.rhs.model):
-                    # A case like Restaurant.objects.filter(place__in=restaurant_qs),
-                    # where place is a OneToOneField and the primary key of
-                    # Restaurant.
-                    target_field = self.lhs.field.name
-                else:
-                    target_field = self.lhs.field.target_field.name
-                self.rhs.add_fields([target_field], True)
+            # Always clear the select clause for __in lookups to ensure we only select
+            # the necessary fields
+            self.rhs.clear_select_clause()
+            if (getattr(self.lhs.output_field, 'primary_key', False) and
+                    self.lhs.output_field.model == self.rhs.model):
+                # A case like Restaurant.objects.filter(place__in=restaurant_qs),
+                # where place is a OneToOneField and the primary key of
+                # Restaurant.
+                target_field = self.lhs.field.name
+            else:
+                # For all other cases, we only need the target field (usually id)
+                target_field = self.lhs.field.target_field.name
+            self.rhs.add_fields([target_field], True)
             return super().as_sql(compiler, connection)
 
 
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..048628ece8
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,53 @@
+from django.db import models
+from django.db.models import Q, Count
+
+class PropertyGroup(models.Model):
+    name = models.CharField(max_length=100)
+    created = models.DateTimeField(auto_now_add=True)
+    updated = models.DateTimeField(auto_now=True)
+    create_by = models.CharField(max_length=100)
+    update_by = models.CharField(max_length=100)
+    tenant_objs = models.JSONField()
+
+class ManagementAgent(models.Model):
+    name = models.CharField(max_length=100)
+    property_groups = models.ManyToManyField(PropertyGroup, through='ManagementAgentPropertyGroup')
+
+class ManagementAgentPropertyGroup(models.Model):
+    management_agent = models.ForeignKey(ManagementAgent, on_delete=models.CASCADE)
+    property_group = models.ForeignKey(PropertyGroup, on_delete=models.CASCADE)
+
+class ManagerTicketRatingCumulativeMovingAverage(models.Model):
+    agent = models.ForeignKey(ManagementAgent, on_delete=models.CASCADE)
+    date = models.DateField()
+    average = models.FloatField()
+    data_points = models.IntegerField()
+    created = models.DateTimeField(auto_now_add=True)
+    updated = models.DateTimeField(auto_now=True)
+    create_by = models.CharField(max_length=100)
+    update_by = models.CharField(max_length=100)
+    tenant_objs = models.JSONField()
+
+def test_query():
+    # This works in Django 3.2
+    property_groups = PropertyGroup.objects.all()
+    queryset = ManagerTicketRatingCumulativeMovingAverage.objects.all()
+    queryset = queryset.annotate(Count("agent__property_groups"))
+    
+    # This works
+    working_qs = queryset.filter(
+        Q(agent__property_groups__id__in=property_groups.values_list("id", flat=True))
+        | Q(agent__property_groups__count=0)
+    ).distinct()
+    
+    # This fails with "subquery must return only one column"
+    failing_qs = queryset.filter(
+        Q(agent__property_groups__in=property_groups)
+        | Q(agent__property_groups__count=0)
+    ).distinct()
+    
+    print("Working query SQL:", working_qs.query)
+    print("\nFailing query SQL:", failing_qs.query)
+
+if __name__ == '__main__':
+    test_query()
\ No newline at end of file
diff --git a/test_app/__init__.py b/test_app/__init__.py
new file mode 100644
index 0000000000..a7506fdc94
--- /dev/null
+++ b/test_app/__init__.py
@@ -0,0 +1 @@
+# Empty init file
\ No newline at end of file
diff --git a/test_app/migrations/0001_initial.py b/test_app/migrations/0001_initial.py
new file mode 100644
index 0000000000..e48d0aaccf
--- /dev/null
+++ b/test_app/migrations/0001_initial.py
@@ -0,0 +1,56 @@
+from django.db import migrations, models
+
+class Migration(migrations.Migration):
+    initial = True
+
+    dependencies = []
+
+    operations = [
+        migrations.CreateModel(
+            name='PropertyGroup',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=100)),
+                ('created', models.DateTimeField(auto_now_add=True)),
+                ('updated', models.DateTimeField(auto_now=True)),
+                ('create_by', models.CharField(max_length=100)),
+                ('update_by', models.CharField(max_length=100)),
+                ('tenant_objs', models.JSONField()),
+            ],
+        ),
+        migrations.CreateModel(
+            name='ManagementAgent',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=100)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='ManagementAgentPropertyGroup',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('management_agent', models.ForeignKey(on_delete=models.CASCADE, to='test_app.ManagementAgent')),
+                ('property_group', models.ForeignKey(on_delete=models.CASCADE, to='test_app.PropertyGroup')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='ManagerTicketRatingCumulativeMovingAverage',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('date', models.DateField()),
+                ('average', models.FloatField()),
+                ('data_points', models.IntegerField()),
+                ('created', models.DateTimeField(auto_now_add=True)),
+                ('updated', models.DateTimeField(auto_now=True)),
+                ('create_by', models.CharField(max_length=100)),
+                ('update_by', models.CharField(max_length=100)),
+                ('tenant_objs', models.JSONField()),
+                ('agent', models.ForeignKey(on_delete=models.CASCADE, to='test_app.ManagementAgent')),
+            ],
+        ),
+        migrations.AddField(
+            model_name='managementagent',
+            name='property_groups',
+            field=models.ManyToManyField(through='test_app.ManagementAgentPropertyGroup', to='test_app.PropertyGroup'),
+        ),
+    ]
\ No newline at end of file
diff --git a/test_app/migrations/__init__.py b/test_app/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_app/models.py b/test_app/models.py
new file mode 100644
index 0000000000..95b4320b77
--- /dev/null
+++ b/test_app/models.py
@@ -0,0 +1,28 @@
+from django.db import models
+
+class PropertyGroup(models.Model):
+    name = models.CharField(max_length=100)
+    created = models.DateTimeField(auto_now_add=True)
+    updated = models.DateTimeField(auto_now=True)
+    create_by = models.CharField(max_length=100)
+    update_by = models.CharField(max_length=100)
+    tenant_objs = models.JSONField()
+
+class ManagementAgent(models.Model):
+    name = models.CharField(max_length=100)
+    property_groups = models.ManyToManyField(PropertyGroup, through='ManagementAgentPropertyGroup')
+
+class ManagementAgentPropertyGroup(models.Model):
+    management_agent = models.ForeignKey(ManagementAgent, on_delete=models.CASCADE)
+    property_group = models.ForeignKey(PropertyGroup, on_delete=models.CASCADE)
+
+class ManagerTicketRatingCumulativeMovingAverage(models.Model):
+    agent = models.ForeignKey(ManagementAgent, on_delete=models.CASCADE)
+    date = models.DateField()
+    average = models.FloatField()
+    data_points = models.IntegerField()
+    created = models.DateTimeField(auto_now_add=True)
+    updated = models.DateTimeField(auto_now=True)
+    create_by = models.CharField(max_length=100)
+    update_by = models.CharField(max_length=100)
+    tenant_objs = models.JSONField()
\ No newline at end of file
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..c3bff8b6f6
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,122 @@
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+            'test_fix',  # Add our test module
+        ],
+        USE_TZ=False,
+    )
+
+import django
+django.setup()
+
+from django.db import models
+from django.db.models import Q, Count
+from django.test import TestCase
+
+class PropertyGroup(models.Model):
+    class Meta:
+        app_label = 'test_fix'
+    name = models.CharField(max_length=100)
+    created = models.DateTimeField(auto_now_add=True)
+    updated = models.DateTimeField(auto_now=True)
+    create_by = models.CharField(max_length=100)
+    update_by = models.CharField(max_length=100)
+    tenant_objs = models.JSONField()
+
+class ManagementAgent(models.Model):
+    class Meta:
+        app_label = 'test_fix'
+    name = models.CharField(max_length=100)
+    property_groups = models.ManyToManyField(PropertyGroup, through='ManagementAgentPropertyGroup')
+
+class ManagementAgentPropertyGroup(models.Model):
+    class Meta:
+        app_label = 'test_fix'
+    management_agent = models.ForeignKey(ManagementAgent, on_delete=models.CASCADE)
+    property_group = models.ForeignKey(PropertyGroup, on_delete=models.CASCADE)
+
+class ManagerTicketRatingCumulativeMovingAverage(models.Model):
+    class Meta:
+        app_label = 'test_fix'
+    agent = models.ForeignKey(ManagementAgent, on_delete=models.CASCADE)
+    date = models.DateField()
+    average = models.FloatField()
+    data_points = models.IntegerField()
+    created = models.DateTimeField(auto_now_add=True)
+    updated = models.DateTimeField(auto_now=True)
+    create_by = models.CharField(max_length=100)
+    update_by = models.CharField(max_length=100)
+    tenant_objs = models.JSONField()
+
+class TestQueries(TestCase):
+    def setUp(self):
+        # Create test data
+        self.property_group = PropertyGroup.objects.create(
+            name="Test Group",
+            create_by="test",
+            update_by="test",
+            tenant_objs={}
+        )
+        self.agent = ManagementAgent.objects.create(name="Test Agent")
+        ManagementAgentPropertyGroup.objects.create(
+            management_agent=self.agent,
+            property_group=self.property_group
+        )
+        self.rating = ManagerTicketRatingCumulativeMovingAverage.objects.create(
+            agent=self.agent,
+            date='2023-01-01',
+            average=4.5,
+            data_points=10,
+            create_by="test",
+            update_by="test",
+            tenant_objs={}
+        )
+
+    def test_queries(self):
+        property_groups = PropertyGroup.objects.all()
+        queryset = ManagerTicketRatingCumulativeMovingAverage.objects.all()
+        queryset = queryset.annotate(Count("agent__property_groups"))
+        
+        # Test both query forms
+        working_qs = queryset.filter(
+            Q(agent__property_groups__id__in=property_groups.values_list("id", flat=True))
+            | Q(agent__property_groups__count=0)
+        ).distinct()
+        
+        fixed_qs = queryset.filter(
+            Q(agent__property_groups__in=property_groups)
+            | Q(agent__property_groups__count=0)
+        ).distinct()
+        
+        # Print the SQL for both queries to verify they generate similar subqueries
+        print("Working query SQL:", str(working_qs.query))
+        print("\nFixed query SQL:", str(fixed_qs.query))
+        
+        # Verify both queries return the same results
+        self.assertEqual(list(working_qs), list(fixed_qs))
+
+if __name__ == '__main__':
+    from django.conf import settings
+    settings.configure(
+        DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+        INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth'],
+    )
+    import django
+    django.setup()
+    from django.test.utils import get_runner
+    TestRunner = get_runner(settings)
+    test_runner = TestRunner()
+    test_runner.run_tests(['__main__'])
\ No newline at end of file
diff --git a/test_queries.py b/test_queries.py
new file mode 100644
index 0000000000..08f2cb004d
--- /dev/null
+++ b/test_queries.py
@@ -0,0 +1,62 @@
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+import django
+django.setup()
+
+from django.core.management import call_command
+from django.db import connection
+from django.db.models import Q, Count
+
+# Run migrations
+call_command('migrate')
+from test_app.models import (
+    PropertyGroup, ManagementAgent, ManagementAgentPropertyGroup,
+    ManagerTicketRatingCumulativeMovingAverage
+)
+
+# Create test data
+property_group = PropertyGroup.objects.create(
+    name="Test Group",
+    create_by="test",
+    update_by="test",
+    tenant_objs={}
+)
+agent = ManagementAgent.objects.create(name="Test Agent")
+ManagementAgentPropertyGroup.objects.create(
+    management_agent=agent,
+    property_group=property_group
+)
+rating = ManagerTicketRatingCumulativeMovingAverage.objects.create(
+    agent=agent,
+    date='2023-01-01',
+    average=4.5,
+    data_points=10,
+    create_by="test",
+    update_by="test",
+    tenant_objs={}
+)
+
+# Test the queries
+property_groups = PropertyGroup.objects.all()
+queryset = ManagerTicketRatingCumulativeMovingAverage.objects.all()
+queryset = queryset.annotate(Count("agent__property_groups"))
+
+# Test both query forms
+working_qs = queryset.filter(
+    Q(agent__property_groups__id__in=property_groups.values_list("id", flat=True))
+    | Q(agent__property_groups__count=0)
+).distinct()
+
+fixed_qs = queryset.filter(
+    Q(agent__property_groups__in=property_groups)
+    | Q(agent__property_groups__count=0)
+).distinct()
+
+# Print the SQL for both queries to verify they generate similar subqueries
+print("Working query SQL:", str(working_qs.query))
+print("\nFixed query SQL:", str(fixed_qs.query))
+
+# Verify both queries return the same results
+assert list(working_qs) == list(fixed_qs)
+print("\nTest passed! Both queries return the same results.")
\ No newline at end of file
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..bdf47f5351
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,14 @@
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+    'test_app',
+]
+
+USE_TZ = False
\ No newline at end of file
