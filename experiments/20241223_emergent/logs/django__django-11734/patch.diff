diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 2b59dd301a..ddc0ff49e9 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -552,11 +552,24 @@ class ResolvedOuterRef(F):
     """
     contains_aggregate = False
 
-    def as_sql(self, *args, **kwargs):
-        raise ValueError(
-            'This queryset contains a reference to an outer query and may '
-            'only be used in a subquery.'
-        )
+    def as_sql(self, compiler, connection, **extra_context):
+        # Get the actual field name from the outer query
+        outer_ref = self.name
+        if isinstance(outer_ref, str):
+            outer_ref = F(outer_ref)
+        
+        # Check if we're in a subquery context
+        query = compiler.query
+        if not query.is_subquery:
+            raise ValueError(
+                'This queryset contains a reference to an outer query and may '
+                'only be used in a subquery.'
+            )
+        
+        # Get the outer query's referenced column
+        outer_field = outer_ref.resolve_expression(query.outer_query)
+        sql, params = compiler.compile(outer_field)
+        return sql, params
 
     def relabeled_clone(self, relabels):
         return self
diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 35f3c5e1ea..a01461d749 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -166,10 +166,12 @@ class Query(BaseExpression):
         self.table_map = {}     # Maps table names to list of aliases.
         self.default_cols = True
         self.default_ordering = True
-        self.standard_ordering = True
-        self.used_aliases = set()
-        self.filter_is_sticky = False
         self.subquery = False
+        self.outer_query = None  # Reference to the outer query for subqueries
+
+    @property
+    def is_subquery(self):
+        return self.subquery
 
         # SQL-related attributes
         # Select and related select clauses are expressions to use in the
diff --git a/django/db/models/sql/subqueries.py b/django/db/models/sql/subqueries.py
index fbc265d113..a6f1fcdcde 100644
--- a/django/db/models/sql/subqueries.py
+++ b/django/db/models/sql/subqueries.py
@@ -191,4 +191,5 @@ class AggregateQuery(Query):
 
     def add_subquery(self, query, using):
         query.subquery = True
+        query.outer_query = self  # Set reference to outer query
         self.subquery, self.sub_params = query.get_compiler(using).as_sql(with_col_aliases=True)
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..d66c2f8247
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,61 @@
+from django.conf import settings
+
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+    ],
+)
+
+import django
+django.setup()
+
+from django.db.models.expressions import ResolvedOuterRef
+from django.db.models.sql.compiler import SQLCompiler
+from django.db.models.sql.query import Query
+from django.db import models
+
+# Create a test model
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = '__fake__'
+        managed = False
+
+# Create a mock compiler
+class MockQuery(Query):
+    def __init__(self):
+        super().__init__(TestModel)
+        self.subquery = True
+        self.outer_query = None
+
+class MockCompiler(SQLCompiler):
+    def __init__(self):
+        query = MockQuery()
+        query.outer_query = MockQuery()
+        super().__init__(query, django.db.connection, None)
+
+# Test the OuterRef resolution
+def test_outerref():
+    # Create a ResolvedOuterRef instance
+    outer_ref = ResolvedOuterRef('pk')
+    compiler = MockCompiler()
+    
+    try:
+        # This should work with our fix
+        sql, params = outer_ref.as_sql(compiler, None)
+        print("Success! OuterRef resolved correctly")
+        print("SQL:", sql)
+        print("Params:", params)
+    except ValueError as e:
+        print("Error:", str(e))
+
+if __name__ == '__main__':
+    test_outerref()
\ No newline at end of file
