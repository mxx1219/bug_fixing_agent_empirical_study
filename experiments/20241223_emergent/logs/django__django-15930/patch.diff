diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 822968ef56..a2e6b43b45 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -1258,12 +1258,19 @@ class When(Expression):
                 "When() supports a Q object, a boolean expression, or lookups "
                 "as a condition."
             )
-        if isinstance(condition, Q) and not condition:
+        if isinstance(condition, Q) and not condition and not condition.negated:
             raise ValueError("An empty Q() can't be used as a When() condition.")
         super().__init__(output_field=None)
         self.condition = condition
         self.result = self._parse_expressions(then)[0]
 
+    def as_sql(self, compiler, connection, **extra_context):
+        # Special handling for negated empty Q objects
+        if isinstance(self.condition, Q) and not self.condition and self.condition.negated:
+            result_sql, result_params = compiler.compile(self.result)
+            return "WHEN 1=1 THEN " + result_sql, result_params
+        return super().as_sql(compiler, connection, **extra_context)
+
     def __str__(self):
         return "WHEN %r THEN %r" % (self.condition, self.result)
 
@@ -1298,9 +1305,15 @@ class When(Expression):
         connection.ops.check_expression_support(self)
         template_params = extra_context
         sql_params = []
-        condition_sql, condition_params = compiler.compile(self.condition)
-        template_params["condition"] = condition_sql
-        sql_params.extend(condition_params)
+
+        # Handle the special case where condition is True (from negated empty Q)
+        if self.condition is True:
+            template_params["condition"] = "1 = 1"
+        else:
+            condition_sql, condition_params = compiler.compile(self.condition)
+            template_params["condition"] = condition_sql
+            sql_params.extend(condition_params)
+
         result_sql, result_params = compiler.compile(self.result)
         template_params["result"] = result_sql
         sql_params.extend(result_params)
@@ -1385,6 +1398,12 @@ class Case(SQLiteNumericMixin, Expression):
         sql_params = []
         for case in self.cases:
             try:
+                # Special handling for When conditions that are always true
+                if getattr(case, 'condition', None) is True:
+                    result_sql, result_params = case.result.as_sql(compiler, connection)
+                    case_parts.append("WHEN 1=1 THEN " + result_sql)
+                    sql_params.extend(result_params)
+                    continue
                 case_sql, case_params = compiler.compile(case)
             except EmptyResultSet:
                 continue
diff --git a/tests/expressions_case/tests.py b/tests/expressions_case/tests.py
index 9bad0b8747..9d33474b1d 100644
--- a/tests/expressions_case/tests.py
+++ b/tests/expressions_case/tests.py
@@ -467,6 +467,20 @@ class CaseExpressionTests(TestCase):
             lambda x: (x.pk, x.somecase),
         )
 
+    def test_case_with_empty_q_negation(self):
+        """
+        Test that Case expression works correctly with negated empty Q objects.
+        """
+        queryset = CaseTestModel.objects.annotate(
+            test=Case(
+                When(~Q(pk__in=[]), then=Value(True)),
+                default=Value(False),
+                output_field=BooleanField(),
+            )
+        ).order_by("pk")
+        # All objects should have test=True since ~Q(pk__in=[]) is always True
+        self.assertTrue(all(obj.test for obj in queryset))
+
     def test_aggregate(self):
         self.assertEqual(
             CaseTestModel.objects.aggregate(
diff --git a/tests/test_settings.py b/tests/test_settings.py
new file mode 100644
index 0000000000..037526b7a5
--- /dev/null
+++ b/tests/test_settings.py
@@ -0,0 +1,14 @@
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+    'tests.expressions_case',
+]
+
+SECRET_KEY = 'dummy'
\ No newline at end of file
