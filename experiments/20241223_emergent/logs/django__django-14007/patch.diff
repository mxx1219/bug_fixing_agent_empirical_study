diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index f02199d97c..d07ecb1a10 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -1411,14 +1411,42 @@ class SQLInsertCompiler(SQLCompiler):
                 cursor.execute(sql, params)
             if not self.returning_fields:
                 return []
+            
+            def convert_returned_value(value, field):
+                if value is None:
+                    return None
+                if hasattr(field, 'from_db_value'):
+                    return field.from_db_value(value, None, self.connection)
+                return value
+            
             if self.connection.features.can_return_rows_from_bulk_insert and len(self.query.objs) > 1:
-                return self.connection.ops.fetch_returned_insert_rows(cursor)
+                rows = self.connection.ops.fetch_returned_insert_rows(cursor)
+                if self.returning_fields:
+                    return [
+                        tuple(
+                            convert_returned_value(value, field)
+                            for value, field in zip(row, self.returning_fields)
+                        )
+                        for row in rows
+                    ]
+                return rows
+            
             if self.connection.features.can_return_columns_from_insert:
                 assert len(self.query.objs) == 1
-                return [self.connection.ops.fetch_returned_insert_columns(cursor, self.returning_params)]
-            return [(self.connection.ops.last_insert_id(
+                row = self.connection.ops.fetch_returned_insert_columns(cursor, self.returning_params)
+                if self.returning_fields:
+                    return [tuple(
+                        convert_returned_value(value, field)
+                        for value, field in zip(row, self.returning_fields)
+                    )]
+                return [row]
+            
+            value = self.connection.ops.last_insert_id(
                 cursor, self.query.get_meta().db_table, self.query.get_meta().pk.column
-            ),)]
+            )
+            if self.returning_fields:
+                value = convert_returned_value(value, self.returning_fields[0])
+            return [(value,)]
 
 
 class SQLDeleteCompiler(SQLCompiler):
diff --git a/tests/migrations/0001_initial.py b/tests/migrations/0001_initial.py
new file mode 100644
index 0000000000..051df4bb87
--- /dev/null
+++ b/tests/migrations/0001_initial.py
@@ -0,0 +1,19 @@
+from django.db import migrations, models
+import tests.model_fields.test_autofield_converters
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='AutoModel',
+            fields=[
+                ('id', tests.model_fields.test_autofield_converters.MyAutoField(primary_key=True, serialize=False)),
+            ],
+        ),
+    ]
\ No newline at end of file
diff --git a/tests/model_fields/models.py b/tests/model_fields/models.py
index 9e8baeb565..cb997204a3 100644
--- a/tests/model_fields/models.py
+++ b/tests/model_fields/models.py
@@ -11,6 +11,12 @@ from django.core.files.storage import FileSystemStorage
 from django.core.serializers.json import DjangoJSONEncoder
 from django.db import models
 from django.db.models.fields.files import ImageFieldFile
+
+
+class TestModel(models.Model):
+    class Meta:
+        abstract = True
+        app_label = 'model_fields'
 from django.utils.translation import gettext_lazy as _
 
 try:
@@ -19,21 +25,17 @@ except ImportError:
     Image = None
 
 
-class Foo(models.Model):
+class Foo(TestModel):
     a = models.CharField(max_length=10)
     d = models.DecimalField(max_digits=5, decimal_places=3)
-
-
 def get_foo():
     return Foo.objects.get(id=1).pk
 
 
-class Bar(models.Model):
+class Bar(TestModel):
     b = models.CharField(max_length=10)
     a = models.ForeignKey(Foo, models.CASCADE, default=get_foo, related_name='bars')
-
-
-class Whiz(models.Model):
+class Whiz(TestModel):
     CHOICES = (
         ('Group 1', (
             (1, 'First'),
@@ -49,9 +51,7 @@ class Whiz(models.Model):
         (5, _('translated')),
     )
     c = models.IntegerField(choices=CHOICES, null=True)
-
-
-class WhizDelayed(models.Model):
+class WhizDelayed(TestModel):
     c = models.IntegerField(choices=(), null=True)
 
 
@@ -59,15 +59,15 @@ class WhizDelayed(models.Model):
 WhizDelayed._meta.get_field('c').choices = Whiz.CHOICES
 
 
-class WhizIter(models.Model):
+class WhizIter(TestModel):
     c = models.IntegerField(choices=iter(Whiz.CHOICES), null=True)
 
 
-class WhizIterEmpty(models.Model):
+class WhizIterEmpty(TestModel):
     c = models.CharField(choices=iter(()), blank=True, max_length=1)
 
 
-class Choiceful(models.Model):
+class Choiceful(TestModel):
     no_choices = models.IntegerField(null=True)
     empty_choices = models.IntegerField(choices=(), null=True)
     with_choices = models.IntegerField(choices=[(1, 'A')], null=True)
@@ -75,107 +75,107 @@ class Choiceful(models.Model):
     empty_choices_text = models.TextField(choices=())
 
 
-class BigD(models.Model):
+class BigD(TestModel):
     d = models.DecimalField(max_digits=32, decimal_places=30)
 
 
-class FloatModel(models.Model):
+class FloatModel(TestModel):
     size = models.FloatField()
 
 
-class BigS(models.Model):
+class BigS(TestModel):
     s = models.SlugField(max_length=255)
 
 
-class UnicodeSlugField(models.Model):
+class UnicodeSlugField(TestModel):
     s = models.SlugField(max_length=255, allow_unicode=True)
 
 
-class AutoModel(models.Model):
+class AutoModel(TestModel):
     value = models.AutoField(primary_key=True)
 
 
-class BigAutoModel(models.Model):
+class BigAutoModel(TestModel):
     value = models.BigAutoField(primary_key=True)
 
 
-class SmallAutoModel(models.Model):
+class SmallAutoModel(TestModel):
     value = models.SmallAutoField(primary_key=True)
 
 
-class SmallIntegerModel(models.Model):
+class SmallIntegerModel(TestModel):
     value = models.SmallIntegerField()
 
 
-class IntegerModel(models.Model):
+class IntegerModel(TestModel):
     value = models.IntegerField()
 
 
-class BigIntegerModel(models.Model):
+class BigIntegerModel(TestModel):
     value = models.BigIntegerField()
     null_value = models.BigIntegerField(null=True, blank=True)
 
 
-class PositiveBigIntegerModel(models.Model):
+class PositiveBigIntegerModel(TestModel):
     value = models.PositiveBigIntegerField()
 
 
-class PositiveSmallIntegerModel(models.Model):
+class PositiveSmallIntegerModel(TestModel):
     value = models.PositiveSmallIntegerField()
 
 
-class PositiveIntegerModel(models.Model):
+class PositiveIntegerModel(TestModel):
     value = models.PositiveIntegerField()
 
 
-class Post(models.Model):
+class Post(TestModel):
     title = models.CharField(max_length=100)
     body = models.TextField()
 
 
-class NullBooleanModel(models.Model):
+class NullBooleanModel(TestModel):
     nbfield = models.BooleanField(null=True, blank=True)
 
 
-class BooleanModel(models.Model):
+class BooleanModel(TestModel):
     bfield = models.BooleanField()
     string = models.CharField(max_length=10, default='abc')
 
 
-class DateTimeModel(models.Model):
+class DateTimeModel(TestModel):
     d = models.DateField()
     dt = models.DateTimeField()
     t = models.TimeField()
 
 
-class DurationModel(models.Model):
+class DurationModel(TestModel):
     field = models.DurationField()
 
 
-class NullDurationModel(models.Model):
+class NullDurationModel(TestModel):
     field = models.DurationField(null=True)
 
 
-class PrimaryKeyCharModel(models.Model):
+class PrimaryKeyCharModel(TestModel):
     string = models.CharField(max_length=10, primary_key=True)
 
 
-class FksToBooleans(models.Model):
+class FksToBooleans(TestModel):
     """Model with FKs to models with {Null,}BooleanField's, #15040"""
     bf = models.ForeignKey(BooleanModel, models.CASCADE)
     nbf = models.ForeignKey(NullBooleanModel, models.CASCADE)
 
 
-class FkToChar(models.Model):
+class FkToChar(TestModel):
     """Model with FK to a model with a CharField primary key, #19299"""
     out = models.ForeignKey(PrimaryKeyCharModel, models.CASCADE)
 
 
-class RenamedField(models.Model):
+class RenamedField(TestModel):
     modelname = models.IntegerField(name="fieldname", choices=((1, 'One'),))
 
 
-class VerboseNameField(models.Model):
+class VerboseNameField(TestModel):
     id = models.AutoField("verbose pk", primary_key=True)
     field1 = models.BigIntegerField("verbose field1")
     field2 = models.BooleanField("verbose field2", default=False)
@@ -202,7 +202,7 @@ class VerboseNameField(models.Model):
     field21 = models.DurationField("verbose field21")
 
 
-class GenericIPAddress(models.Model):
+class GenericIPAddress(TestModel):
     ip = models.GenericIPAddressField(null=True, protocol='ipv4')
 
 
@@ -211,18 +211,18 @@ class GenericIPAddress(models.Model):
 # successfully.
 
 # See ticket #16570.
-class DecimalLessThanOne(models.Model):
+class DecimalLessThanOne(TestModel):
     d = models.DecimalField(max_digits=3, decimal_places=3)
 
 
 # See ticket #18389.
-class FieldClassAttributeModel(models.Model):
+class FieldClassAttributeModel(TestModel):
     field_class = models.CharField
 
 ###############################################################################
 
 
-class DataModel(models.Model):
+class DataModel(TestModel):
     short_data = models.BinaryField(max_length=10, default=b'\x08')
     data = models.BinaryField()
 
@@ -230,7 +230,7 @@ class DataModel(models.Model):
 # FileField
 
 
-class Document(models.Model):
+class Document(TestModel):
     myfile = models.FileField(upload_to='unused', unique=True)
 
 
@@ -260,14 +260,14 @@ if Image:
     temp_storage = FileSystemStorage(temp_storage_dir)
     temp_upload_to_dir = os.path.join(temp_storage.location, 'tests')
 
-    class Person(models.Model):
+    class Person(TestModel):
         """
         Model that defines an ImageField with no dimension fields.
         """
         name = models.CharField(max_length=50)
         mugshot = TestImageField(storage=temp_storage, upload_to='tests')
 
-    class AbstractPersonWithHeight(models.Model):
+    class AbstractPersonWithHeight(TestModel):
         """
         Abstract model that defines an ImageField with only one dimension field
         to make sure the dimension update is correctly run on concrete subclass
@@ -287,7 +287,7 @@ if Image:
         """
         name = models.CharField(max_length=50)
 
-    class PersonWithHeightAndWidth(models.Model):
+    class PersonWithHeightAndWidth(TestModel):
         """
         Model that defines height and width fields after the ImageField.
         """
@@ -298,7 +298,7 @@ if Image:
         mugshot_height = models.PositiveSmallIntegerField()
         mugshot_width = models.PositiveSmallIntegerField()
 
-    class PersonDimensionsFirst(models.Model):
+    class PersonDimensionsFirst(TestModel):
         """
         Model that defines height and width fields before the ImageField.
         """
@@ -309,7 +309,7 @@ if Image:
                                  height_field='mugshot_height',
                                  width_field='mugshot_width')
 
-    class PersonTwoImages(models.Model):
+    class PersonTwoImages(TestModel):
         """
         Model that:
         * Defines two ImageFields
@@ -342,14 +342,14 @@ class CustomJSONDecoder(json.JSONDecoder):
         return dct
 
 
-class JSONModel(models.Model):
+class JSONModel(TestModel):
     value = models.JSONField()
 
     class Meta:
         required_db_features = {'supports_json_field'}
 
 
-class NullableJSONModel(models.Model):
+class NullableJSONModel(TestModel):
     value = models.JSONField(blank=True, null=True)
     value_custom = models.JSONField(
         encoder=DjangoJSONEncoder,
@@ -361,7 +361,7 @@ class NullableJSONModel(models.Model):
         required_db_features = {'supports_json_field'}
 
 
-class RelatedJSONModel(models.Model):
+class RelatedJSONModel(TestModel):
     value = models.JSONField()
     json_model = models.ForeignKey(NullableJSONModel, models.CASCADE)
 
@@ -369,7 +369,7 @@ class RelatedJSONModel(models.Model):
         required_db_features = {'supports_json_field'}
 
 
-class AllFieldsModel(models.Model):
+class AllFieldsModel(TestModel):
     big_integer = models.BigIntegerField()
     binary = models.BinaryField()
     boolean = models.BooleanField(default=False)
@@ -413,26 +413,26 @@ class AllFieldsModel(models.Model):
     gr = GenericRelation(DataModel)
 
 
-class ManyToMany(models.Model):
+class ManyToMany(TestModel):
     m2m = models.ManyToManyField('self')
 
 
 ###############################################################################
 
 
-class UUIDModel(models.Model):
+class UUIDModel(TestModel):
     field = models.UUIDField()
 
 
-class NullableUUIDModel(models.Model):
+class NullableUUIDModel(TestModel):
     field = models.UUIDField(blank=True, null=True)
 
 
-class PrimaryKeyUUIDModel(models.Model):
+class PrimaryKeyUUIDModel(TestModel):
     id = models.UUIDField(primary_key=True, default=uuid.uuid4)
 
 
-class RelatedToUUIDModel(models.Model):
+class RelatedToUUIDModel(TestModel):
     uuid_fk = models.ForeignKey('PrimaryKeyUUIDModel', models.CASCADE)
 
 
diff --git a/tests/model_fields/test_autofield_converters.py b/tests/model_fields/test_autofield_converters.py
new file mode 100644
index 0000000000..8bcba31128
--- /dev/null
+++ b/tests/model_fields/test_autofield_converters.py
@@ -0,0 +1,33 @@
+from django.test import TestCase
+from django.test.utils import isolate_apps
+from .test_models import AutoModel, MyIntWrapper
+
+
+class AutoFieldConverterTests(TestCase):
+    @isolate_apps('model_fields')
+    def test_create_returns_wrapped_value(self):
+        """
+        Test that objects.create() returns a wrapped value for the primary key.
+        """
+        obj = AutoModel.objects.create()
+        self.assertIsInstance(obj.id, MyIntWrapper)
+
+    @isolate_apps('model_fields')
+    def test_bulk_create_returns_wrapped_values(self):
+        """
+        Test that objects.bulk_create() returns wrapped values for primary keys.
+        """
+        objs = [AutoModel() for _ in range(3)]
+        created = AutoModel.objects.bulk_create(objs)
+        for obj in created:
+            self.assertIsInstance(obj.id, MyIntWrapper)
+
+    @isolate_apps('model_fields')
+    def test_get_after_create_returns_wrapped_value(self):
+        """
+        Test that getting an object after creation returns a wrapped value.
+        """
+        obj = AutoModel.objects.create()
+        fetched = AutoModel.objects.get(pk=obj.id.value)
+        self.assertIsInstance(fetched.id, MyIntWrapper)
+        self.assertEqual(fetched.id, obj.id)
\ No newline at end of file
diff --git a/tests/model_fields/test_models.py b/tests/model_fields/test_models.py
new file mode 100644
index 0000000000..65b5e83918
--- /dev/null
+++ b/tests/model_fields/test_models.py
@@ -0,0 +1,35 @@
+from django.db import models
+
+
+class MyIntWrapper:
+    def __init__(self, value):
+        self.value = value
+
+    def __eq__(self, other):
+        if isinstance(other, MyIntWrapper):
+            return self.value == other.value
+        return self.value == other
+
+    def __str__(self):
+        return str(self.value)
+
+
+class MyAutoField(models.BigAutoField):
+    def from_db_value(self, value, expression, connection):
+        if value is None:
+            return None
+        return MyIntWrapper(value)
+
+    def get_prep_value(self, value):
+        if value is None:
+            return None
+        if isinstance(value, MyIntWrapper):
+            return value.value
+        return int(value)
+
+
+class AutoModel(models.Model):
+    id = MyAutoField(primary_key=True)
+
+    class Meta:
+        app_label = 'test_autofields'
\ No newline at end of file
diff --git a/tests/test_settings.py b/tests/test_settings.py
new file mode 100644
index 0000000000..cb3dbcbcba
--- /dev/null
+++ b/tests/test_settings.py
@@ -0,0 +1,14 @@
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+    'tests',
+]
+
+SECRET_KEY = 'dummy-key-for-tests'
\ No newline at end of file
diff --git a/update_models.py b/update_models.py
new file mode 100644
index 0000000000..7b9fcc08d4
--- /dev/null
+++ b/update_models.py
@@ -0,0 +1,17 @@
+import re
+
+def update_models(filename):
+    with open(filename, 'r') as f:
+        content = f.read()
+    
+    # Replace all model declarations except TestModel
+    pattern = r'class\s+(\w+)\(models\.Model\):'
+    content = re.sub(pattern, lambda m: f'class {m.group(1)}(TestModel):', content)
+    
+    # Remove duplicate Meta classes
+    content = re.sub(r'\s+class Meta:\s+app_label = \'model_fields\'\s+', '\n', content)
+    
+    with open(filename, 'w') as f:
+        f.write(content)
+
+update_models('/testbed/tests/model_fields/models.py')
\ No newline at end of file
