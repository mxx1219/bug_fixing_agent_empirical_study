+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   django/db/models/sql/compiler.py
	modified:   tests/model_fields/models.py

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	tests/migrations/0001_initial.py
	tests/model_fields/test_autofield_converters.py
	tests/model_fields/test_models.py
	tests/test_settings.py
	update_models.py


It took 12.72 seconds to enumerate untracked files. 'status -uno'
may speed it up, but you have to be careful not to forget to add
new files yourself (see 'git help status').
no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit 619f26d2895d121854b1bed1b535d42b722e2eba
Author: Mariusz Felisiak <felisiak.mariusz@gmail.com>
Date:   Wed Apr 7 17:07:53 2021 +0200

    Refs #32074 -- Made ExclusionConstraint.__repr__() use Deferrable.__repr__().
    
    Follow up to c6859f1a684edec7bb33038b4408046a4db0c16d.

diff --git a/django/contrib/postgres/constraints.py b/django/contrib/postgres/constraints.py
index 32c6bb622e..48dfd2bbc0 100644
--- a/django/contrib/postgres/constraints.py
+++ b/django/contrib/postgres/constraints.py
@@ -161,7 +161,7 @@ class ExclusionConstraint(BaseConstraint):
             repr(self.expressions),
             repr(self.name),
             '' if self.condition is None else ' condition=%s' % self.condition,
-            '' if self.deferrable is None else ' deferrable=%s' % self.deferrable,
+            '' if self.deferrable is None else ' deferrable=%r' % self.deferrable,
             '' if not self.include else ' include=%s' % repr(self.include),
             '' if not self.opclasses else ' opclasses=%s' % repr(self.opclasses),
         )
+ git diff 619f26d2895d121854b1bed1b535d42b722e2eba
diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index f02199d97c..d07ecb1a10 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -1411,14 +1411,42 @@ class SQLInsertCompiler(SQLCompiler):
                 cursor.execute(sql, params)
             if not self.returning_fields:
                 return []
+            
+            def convert_returned_value(value, field):
+                if value is None:
+                    return None
+                if hasattr(field, 'from_db_value'):
+                    return field.from_db_value(value, None, self.connection)
+                return value
+            
             if self.connection.features.can_return_rows_from_bulk_insert and len(self.query.objs) > 1:
-                return self.connection.ops.fetch_returned_insert_rows(cursor)
+                rows = self.connection.ops.fetch_returned_insert_rows(cursor)
+                if self.returning_fields:
+                    return [
+                        tuple(
+                            convert_returned_value(value, field)
+                            for value, field in zip(row, self.returning_fields)
+                        )
+                        for row in rows
+                    ]
+                return rows
+            
             if self.connection.features.can_return_columns_from_insert:
                 assert len(self.query.objs) == 1
-                return [self.connection.ops.fetch_returned_insert_columns(cursor, self.returning_params)]
-            return [(self.connection.ops.last_insert_id(
+                row = self.connection.ops.fetch_returned_insert_columns(cursor, self.returning_params)
+                if self.returning_fields:
+                    return [tuple(
+                        convert_returned_value(value, field)
+                        for value, field in zip(row, self.returning_fields)
+                    )]
+                return [row]
+            
+            value = self.connection.ops.last_insert_id(
                 cursor, self.query.get_meta().db_table, self.query.get_meta().pk.column
-            ),)]
+            )
+            if self.returning_fields:
+                value = convert_returned_value(value, self.returning_fields[0])
+            return [(value,)]
 
 
 class SQLDeleteCompiler(SQLCompiler):
diff --git a/tests/model_fields/models.py b/tests/model_fields/models.py
index 9e8baeb565..cb997204a3 100644
--- a/tests/model_fields/models.py
+++ b/tests/model_fields/models.py
@@ -11,6 +11,12 @@ from django.core.files.storage import FileSystemStorage
 from django.core.serializers.json import DjangoJSONEncoder
 from django.db import models
 from django.db.models.fields.files import ImageFieldFile
+
+
+class TestModel(models.Model):
+    class Meta:
+        abstract = True
+        app_label = 'model_fields'
 from django.utils.translation import gettext_lazy as _
 
 try:
@@ -19,21 +25,17 @@ except ImportError:
     Image = None
 
 
-class Foo(models.Model):
+class Foo(TestModel):
     a = models.CharField(max_length=10)
     d = models.DecimalField(max_digits=5, decimal_places=3)
-
-
 def get_foo():
     return Foo.objects.get(id=1).pk
 
 
-class Bar(models.Model):
+class Bar(TestModel):
     b = models.CharField(max_length=10)
     a = models.ForeignKey(Foo, models.CASCADE, default=get_foo, related_name='bars')
-
-
-class Whiz(models.Model):
+class Whiz(TestModel):
     CHOICES = (
         ('Group 1', (
             (1, 'First'),
@@ -49,9 +51,7 @@ class Whiz(models.Model):
         (5, _('translated')),
     )
     c = models.IntegerField(choices=CHOICES, null=True)
-
-
-class WhizDelayed(models.Model):
+class WhizDelayed(TestModel):
     c = models.IntegerField(choices=(), null=True)
 
 
@@ -59,15 +59,15 @@ class WhizDelayed(models.Model):
 WhizDelayed._meta.get_field('c').choices = Whiz.CHOICES
 
 
-class WhizIter(models.Model):
+class WhizIter(TestModel):
     c = models.IntegerField(choices=iter(Whiz.CHOICES), null=True)
 
 
-class WhizIterEmpty(models.Model):
+class WhizIterEmpty(TestModel):
     c = models.CharField(choices=iter(()), blank=True, max_length=1)
 
 
-class Choiceful(models.Model):
+class Choiceful(TestModel):
     no_choices = models.IntegerField(null=True)
     empty_choices = models.IntegerField(choices=(), null=True)
     with_choices = models.IntegerField(choices=[(1, 'A')], null=True)
@@ -75,107 +75,107 @@ class Choiceful(models.Model):
     empty_choices_text = models.TextField(choices=())
 
 
-class BigD(models.Model):
+class BigD(TestModel):
     d = models.DecimalField(max_digits=32, decimal_places=30)
 
 
-class FloatModel(models.Model):
+class FloatModel(TestModel):
     size = models.FloatField()
 
 
-class BigS(models.Model):
+class BigS(TestModel):
     s = models.SlugField(max_length=255)
 
 
-class UnicodeSlugField(models.Model):
+class UnicodeSlugField(TestModel):
     s = models.SlugField(max_length=255, allow_unicode=True)
 
 
-class AutoModel(models.Model):
+class AutoModel(TestModel):
     value = models.AutoField(primary_key=True)
 
 
-class BigAutoModel(models.Model):
+class BigAutoModel(TestModel):
     value = models.BigAutoField(primary_key=True)
 
 
-class SmallAutoModel(models.Model):
+class SmallAutoModel(TestModel):
     value = models.SmallAutoField(primary_key=True)
 
 
-class SmallIntegerModel(models.Model):
+class SmallIntegerModel(TestModel):
     value = models.SmallIntegerField()
 
 
-class IntegerModel(models.Model):
+class IntegerModel(TestModel):
     value = models.IntegerField()
 
 
-class BigIntegerModel(models.Model):
+class BigIntegerModel(TestModel):
     value = models.BigIntegerField()
     null_value = models.BigIntegerField(null=True, blank=True)
 
 
-class PositiveBigIntegerModel(models.Model):
+class PositiveBigIntegerModel(TestModel):
     value = models.PositiveBigIntegerField()
 
 
-class PositiveSmallIntegerModel(models.Model):
+class PositiveSmallIntegerModel(TestModel):
     value = models.PositiveSmallIntegerField()
 
 
-class PositiveIntegerModel(models.Model):
+class PositiveIntegerModel(TestModel):
     value = models.PositiveIntegerField()
 
 
-class Post(models.Model):
+class Post(TestModel):
     title = models.CharField(max_length=100)
     body = models.TextField()
 
 
-class NullBooleanModel(models.Model):
+class NullBooleanModel(TestModel):
     nbfield = models.BooleanField(null=True, blank=True)
 
 
-class BooleanModel(models.Model):
+class BooleanModel(TestModel):
     bfield = models.BooleanField()
     string = models.CharField(max_length=10, default='abc')
 
 
-class DateTimeModel(models.Model):
+class DateTimeModel(TestModel):
     d = models.DateField()
     dt = models.DateTimeField()
     t = models.TimeField()
 
 
-class DurationModel(models.Model):
+class DurationModel(TestModel):
     field = models.DurationField()
 
 
-class NullDurationModel(models.Model):
+class NullDurationModel(TestModel):
     field = models.DurationField(null=True)
 
 
-class PrimaryKeyCharModel(models.Model):
+class PrimaryKeyCharModel(TestModel):
     string = models.CharField(max_length=10, primary_key=True)
 
 
-class FksToBooleans(models.Model):
+class FksToBooleans(TestModel):
     """Model with FKs to models with {Null,}BooleanField's, #15040"""
     bf = models.ForeignKey(BooleanModel, models.CASCADE)
     nbf = models.ForeignKey(NullBooleanModel, models.CASCADE)
 
 
-class FkToChar(models.Model):
+class FkToChar(TestModel):
     """Model with FK to a model with a CharField primary key, #19299"""
     out = models.ForeignKey(PrimaryKeyCharModel, models.CASCADE)
 
 
-class RenamedField(models.Model):
+class RenamedField(TestModel):
     modelname = models.IntegerField(name="fieldname", choices=((1, 'One'),))
 
 
-class VerboseNameField(models.Model):
+class VerboseNameField(TestModel):
     id = models.AutoField("verbose pk", primary_key=True)
     field1 = models.BigIntegerField("verbose field1")
     field2 = models.BooleanField("verbose field2", default=False)
@@ -202,7 +202,7 @@ class VerboseNameField(models.Model):
     field21 = models.DurationField("verbose field21")
 
 
-class GenericIPAddress(models.Model):
+class GenericIPAddress(TestModel):
     ip = models.GenericIPAddressField(null=True, protocol='ipv4')
 
 
@@ -211,18 +211,18 @@ class GenericIPAddress(models.Model):
 # successfully.
 
 # See ticket #16570.
-class DecimalLessThanOne(models.Model):
+class DecimalLessThanOne(TestModel):
     d = models.DecimalField(max_digits=3, decimal_places=3)
 
 
 # See ticket #18389.
-class FieldClassAttributeModel(models.Model):
+class FieldClassAttributeModel(TestModel):
     field_class = models.CharField
 
 ###############################################################################
 
 
-class DataModel(models.Model):
+class DataModel(TestModel):
     short_data = models.BinaryField(max_length=10, default=b'\x08')
     data = models.BinaryField()
 
@@ -230,7 +230,7 @@ class DataModel(models.Model):
 # FileField
 
 
-class Document(models.Model):
+class Document(TestModel):
     myfile = models.FileField(upload_to='unused', unique=True)
 
 
@@ -260,14 +260,14 @@ if Image:
     temp_storage = FileSystemStorage(temp_storage_dir)
     temp_upload_to_dir = os.path.join(temp_storage.location, 'tests')
 
-    class Person(models.Model):
+    class Person(TestModel):
         """
         Model that defines an ImageField with no dimension fields.
         """
         name = models.CharField(max_length=50)
         mugshot = TestImageField(storage=temp_storage, upload_to='tests')
 
-    class AbstractPersonWithHeight(models.Model):
+    class AbstractPersonWithHeight(TestModel):
         """
         Abstract model that defines an ImageField with only one dimension field
         to make sure the dimension update is correctly run on concrete subclass
@@ -287,7 +287,7 @@ if Image:
         """
         name = models.CharField(max_length=50)
 
-    class PersonWithHeightAndWidth(models.Model):
+    class PersonWithHeightAndWidth(TestModel):
         """
         Model that defines height and width fields after the ImageField.
         """
@@ -298,7 +298,7 @@ if Image:
         mugshot_height = models.PositiveSmallIntegerField()
         mugshot_width = models.PositiveSmallIntegerField()
 
-    class PersonDimensionsFirst(models.Model):
+    class PersonDimensionsFirst(TestModel):
         """
         Model that defines height and width fields before the ImageField.
         """
@@ -309,7 +309,7 @@ if Image:
                                  height_field='mugshot_height',
                                  width_field='mugshot_width')
 
-    class PersonTwoImages(models.Model):
+    class PersonTwoImages(TestModel):
         """
         Model that:
         * Defines two ImageFields
@@ -342,14 +342,14 @@ class CustomJSONDecoder(json.JSONDecoder):
         return dct
 
 
-class JSONModel(models.Model):
+class JSONModel(TestModel):
     value = models.JSONField()
 
     class Meta:
         required_db_features = {'supports_json_field'}
 
 
-class NullableJSONModel(models.Model):
+class NullableJSONModel(TestModel):
     value = models.JSONField(blank=True, null=True)
     value_custom = models.JSONField(
         encoder=DjangoJSONEncoder,
@@ -361,7 +361,7 @@ class NullableJSONModel(models.Model):
         required_db_features = {'supports_json_field'}
 
 
-class RelatedJSONModel(models.Model):
+class RelatedJSONModel(TestModel):
     value = models.JSONField()
     json_model = models.ForeignKey(NullableJSONModel, models.CASCADE)
 
@@ -369,7 +369,7 @@ class RelatedJSONModel(models.Model):
         required_db_features = {'supports_json_field'}
 
 
-class AllFieldsModel(models.Model):
+class AllFieldsModel(TestModel):
     big_integer = models.BigIntegerField()
     binary = models.BinaryField()
     boolean = models.BooleanField(default=False)
@@ -413,26 +413,26 @@ class AllFieldsModel(models.Model):
     gr = GenericRelation(DataModel)
 
 
-class ManyToMany(models.Model):
+class ManyToMany(TestModel):
     m2m = models.ManyToManyField('self')
 
 
 ###############################################################################
 
 
-class UUIDModel(models.Model):
+class UUIDModel(TestModel):
     field = models.UUIDField()
 
 
-class NullableUUIDModel(models.Model):
+class NullableUUIDModel(TestModel):
     field = models.UUIDField(blank=True, null=True)
 
 
-class PrimaryKeyUUIDModel(models.Model):
+class PrimaryKeyUUIDModel(TestModel):
     id = models.UUIDField(primary_key=True, default=uuid.uuid4)
 
 
-class RelatedToUUIDModel(models.Model):
+class RelatedToUUIDModel(TestModel):
     uuid_fk = models.ForeignKey('PrimaryKeyUUIDModel', models.CASCADE)
 
 
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: asgiref>=3.3.2 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0.dev20210407150753) (3.8.1)
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0.dev20210407150753) (2024.2)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0.dev20210407150753) (0.5.1)
Requirement already satisfied: typing-extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from asgiref>=3.3.2->Django==4.0.dev20210407150753) (4.12.2)
Building wheels for collected packages: Django
  Building editable for Django (pyproject.toml): started
  Building editable for Django (pyproject.toml): finished with status 'done'
  Created wheel for Django: filename=Django-4.0.dev20210407150753-0.editable-py3-none-any.whl size=26050 sha256=d29eef4db843b47b44a17d2ffae4c1cc3b0e8baa21cf8d3c9f0c99af38bba3cf
  Stored in directory: /tmp/pip-ephem-wheel-cache-n6a50yfc/wheels/b2/50/f1/218f2e9962a80d01a4b1297698978f9fb3b60056aa24343f24
Successfully built Django
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 4.0.dev20210407150753
    Uninstalling Django-4.0.dev20210407150753:
      Successfully uninstalled Django-4.0.dev20210407150753
Successfully installed Django-4.0.dev20210407150753
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git checkout 619f26d2895d121854b1bed1b535d42b722e2eba tests/custom_pk/fields.py tests/custom_pk/models.py tests/custom_pk/tests.py
Updated 0 paths from fb7b6e9d2b
+ git apply -v -
Checking patch tests/custom_pk/fields.py...
Checking patch tests/custom_pk/models.py...
Checking patch tests/custom_pk/tests.py...
Applied patch tests/custom_pk/fields.py cleanly.
Applied patch tests/custom_pk/models.py cleanly.
Applied patch tests/custom_pk/tests.py cleanly.
+ ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 custom_pk.fields custom_pk.models custom_pk.tests
Testing against Django installed in '/testbed/django'
Importing application custom_pk
Skipping setup of unused database(s): other.
Operations to perform:
  Synchronize unmigrated apps: auth, contenttypes, custom_pk, messages, sessions, staticfiles
  Apply all migrations: admin, sites
Synchronizing apps without migrations:
  Creating tables...
    Creating table django_content_type
    Creating table auth_permission
    Creating table auth_group
    Creating table auth_user
    Creating table django_session
    Creating table custom_pk_employee
    Creating table custom_pk_business
    Creating table custom_pk_bar
    Creating table custom_pk_foo
    Creating table custom_pk_customautofieldmodel
    Running deferred SQL...
Running migrations:
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying sites.0001_initial... OK
  Applying sites.0002_alter_domain_unique... OK
Creating test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
System check identified no issues (0 silenced).
test_get (custom_pk.tests.BasicCustomPKTests)
Get can accept pk or the real attribute name ... ok
test_in_bulk (custom_pk.tests.BasicCustomPKTests)
Custom pks work with in_bulk, both for integer and non-integer types ... ok
test_pk_attributes (custom_pk.tests.BasicCustomPKTests)
pk and attribute name are available on the model ... ok
test_querysets (custom_pk.tests.BasicCustomPKTests)
Both pk and custom attribute_name can be used in filter and friends ... ok
test_querysets_related_name (custom_pk.tests.BasicCustomPKTests)
Custom pk doesn't affect related_name based lookups ... ok
test_querysets_relational (custom_pk.tests.BasicCustomPKTests)
Queries across tables, involving primary key ... ok
test_save (custom_pk.tests.BasicCustomPKTests)
custom pks do not affect save ... ok
test_auto_field_subclass_bulk_create (custom_pk.tests.CustomPKTests) ... skipped "Database doesn't support feature(s): can_return_rows_from_bulk_insert"
test_auto_field_subclass_create (custom_pk.tests.CustomPKTests) ... ok
test_custom_field_pk (custom_pk.tests.CustomPKTests) ... ok
test_custom_pk_create (custom_pk.tests.CustomPKTests)
New objects can be created both with pk and the custom name ... ok
test_required_pk (custom_pk.tests.CustomPKTests) ... skipped 'Database has feature(s) supports_unspecified_pk'
test_unicode_pk (custom_pk.tests.CustomPKTests) ... ok
test_unique_pk (custom_pk.tests.CustomPKTests) ... ok
test_zero_non_autoincrement_pk (custom_pk.tests.CustomPKTests) ... ok

----------------------------------------------------------------------
Ran 15 tests in 0.027s

OK (skipped=2)
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
+ git checkout 619f26d2895d121854b1bed1b535d42b722e2eba tests/custom_pk/fields.py tests/custom_pk/models.py tests/custom_pk/tests.py
Updated 3 paths from fb7b6e9d2b
