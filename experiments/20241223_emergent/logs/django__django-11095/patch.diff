diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 5e7b23f9a0..793a737d4f 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -580,9 +580,15 @@ class ModelAdmin(BaseModelAdmin):
     def __str__(self):
         return "%s.%s" % (self.model._meta.app_label, self.__class__.__name__)
 
+    def get_inlines(self, request, obj=None):
+        """
+        Hook for specifying custom inline classes. Defaults to self.inlines.
+        """
+        return self.inlines
+
     def get_inline_instances(self, request, obj=None):
         inline_instances = []
-        for inline_class in self.inlines:
+        for inline_class in self.get_inlines(request, obj):
             inline = inline_class(self.model, self.admin_site)
             if request:
                 if not (inline.has_view_or_change_permission(request, obj) or
diff --git a/test_inlines.py b/test_inlines.py
new file mode 100644
index 0000000000..0955d9e015
--- /dev/null
+++ b/test_inlines.py
@@ -0,0 +1,50 @@
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            'django.contrib.admin',
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+    )
+    django.setup()
+
+from django.contrib import admin
+from django.test import TestCase, RequestFactory
+from django.contrib.auth.models import User
+
+class TestModelAdmin(admin.ModelAdmin):
+    inlines = ['dummy_inline']
+
+    def get_inlines(self, request, obj=None):
+        # Example: Only show inlines for superusers
+        if request.user.is_superuser:
+            return self.inlines
+        return []
+
+# Create a test instance
+admin_instance = TestModelAdmin(User, admin.site)
+
+# Create a request
+request = RequestFactory().get('/')
+request.user = User(is_superuser=True)
+
+# Test that get_inlines works
+inlines = admin_instance.get_inlines(request)
+assert inlines == ['dummy_inline'], "get_inlines should return inlines for superuser"
+
+# Test with non-superuser
+request.user.is_superuser = False
+inlines = admin_instance.get_inlines(request)
+assert inlines == [], "get_inlines should return empty list for non-superuser"
+
+print("All tests passed!")
\ No newline at end of file
