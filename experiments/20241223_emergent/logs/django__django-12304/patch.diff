diff --git a/.gitignore b/.gitignore
index 238fb3a200..975c5364d8 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,6 @@ tests/coverage_html/
 tests/.coverage
 build/
 tests/report/
+*__pycache__*
+*venv*
+*_build*
diff --git a/django/db/models/enums.py b/django/db/models/enums.py
index f48143ddaf..ffdb5b2dc5 100644
--- a/django/db/models/enums.py
+++ b/django/db/models/enums.py
@@ -6,9 +6,9 @@ __all__ = ['Choices', 'IntegerChoices', 'TextChoices']
 
 
 class ChoicesMeta(enum.EnumMeta):
-    """A metaclass for creating a enum choices."""
+    """A metaclass for creating enumerated choices."""
 
-    def __new__(metacls, classname, bases, classdict):
+    def __new__(metacls, classname, bases, classdict, **kwds):
         labels = []
         for key in classdict._member_names:
             value = classdict[key]
@@ -25,12 +25,14 @@ class ChoicesMeta(enum.EnumMeta):
             # Use dict.__setitem__() to suppress defenses against double
             # assignment in enum's classdict.
             dict.__setitem__(classdict, key, value)
-        cls = super().__new__(metacls, classname, bases, classdict)
+        cls = super().__new__(metacls, classname, bases, classdict, **kwds)
         cls._value2label_map_ = dict(zip(cls._value2member_map_, labels))
         # Add a label property to instances of enum which uses the enum member
         # that is passed in as "self" as the value to use when looking up the
         # label in the choices.
         cls.label = property(lambda self: cls._value2label_map_.get(self.value))
+        # Add do_not_call_in_templates to prevent Django from calling the enum class
+        cls.do_not_call_in_templates = True
         return enum.unique(cls)
 
     def __contains__(cls, member):
@@ -58,6 +60,7 @@ class ChoicesMeta(enum.EnumMeta):
         return [value for value, _ in cls.choices]
 
 
+@enum.unique
 class Choices(enum.Enum, metaclass=ChoicesMeta):
     """Class for creating enumerated choices."""
 
@@ -78,4 +81,4 @@ class TextChoices(str, Choices):
     """Class for creating enumerated string choices."""
 
     def _generate_next_value_(name, start, count, last_values):
-        return name
+        return name
\ No newline at end of file
diff --git a/reproduce_enum_template_issue.py b/reproduce_enum_template_issue.py
new file mode 100644
index 0000000000..7d257864ff
--- /dev/null
+++ b/reproduce_enum_template_issue.py
@@ -0,0 +1,39 @@
+import django
+from django.conf import settings
+from django.template import Context, Template
+from django.db.models import TextChoices
+
+# Configure minimal Django settings
+settings.configure(
+    TEMPLATES=[{
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [],
+        },
+    }]
+)
+django.setup()
+
+class YearInSchool(TextChoices):
+    FRESHMAN = 'FR', 'Freshman'
+    SOPHOMORE = 'SO', 'Sophomore'
+    JUNIOR = 'JR', 'Junior'
+    SENIOR = 'SR', 'Senior'
+
+# Create a template that tries to compare with the enum
+template = Template('{% if year == YearInSchool.FRESHMAN %}Is Freshman{% else %}Not Freshman{% endif %}')
+
+# Create context with the enum class and a value
+context = Context({
+    'year': YearInSchool.FRESHMAN,
+    'YearInSchool': YearInSchool,
+})
+
+# This will fail because YearInSchool is callable
+try:
+    result = template.render(context)
+    print("Template rendered successfully:", result)
+except TypeError as e:
+    print("Error rendering template:", e)
\ No newline at end of file
