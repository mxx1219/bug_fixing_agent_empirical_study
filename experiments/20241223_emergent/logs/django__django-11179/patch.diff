diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py
index 92fe4affb9..3a462f1c4c 100644
--- a/django/db/models/deletion.py
+++ b/django/db/models/deletion.py
@@ -277,6 +277,7 @@ class Collector:
             if self.can_fast_delete(instance):
                 with transaction.mark_for_rollback_on_error():
                     count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)
+                setattr(instance, model._meta.pk.attname, None)
                 return count, {model._meta.label: count}
 
         with transaction.atomic(using=self.using, savepoint=False):
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..a05556bf75
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,45 @@
+import os
+import django
+from django.conf import settings
+from django.db import models
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+        ],
+    )
+    django.setup()
+
+# Create a simple model for testing
+class SimpleModel(models.Model):
+    name = models.CharField(max_length=100)
+
+    class Meta:
+        app_label = 'testapp'
+
+if __name__ == '__main__':
+    import django
+    django.setup()
+    
+    # Create the database tables
+    from django.core.management import call_command
+    call_command('migrate', 'contenttypes')
+    
+    # Create the table for our model
+    from django.db import connection
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(SimpleModel)
+    
+    # Create and then delete an instance
+    instance = SimpleModel.objects.create(name='test')
+    print(f"PK before delete: {instance.pk}")
+    instance.delete()
+    print(f"PK after delete: {instance.pk}")  # This should be None but isn't!
\ No newline at end of file
