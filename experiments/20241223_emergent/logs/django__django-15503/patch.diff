diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py
index fdca700c9d..d5c8650f60 100644
--- a/django/db/models/fields/json.py
+++ b/django/db/models/fields/json.py
@@ -129,13 +129,17 @@ class JSONField(CheckFieldDefaultMixin, Field):
 def compile_json_path(key_transforms, include_root=True):
     path = ["$"] if include_root else []
     for key_transform in key_transforms:
-        try:
-            num = int(key_transform)
-        except ValueError:  # non-integer
-            path.append(".")
-            path.append(json.dumps(key_transform))
-        else:
-            path.append("[%s]" % num)
+        # Always treat keys as strings for object properties
+        path.append(".")
+        # Special handling for keys that could be misinterpreted
+        key_str = str(key_transform)
+        if key_str.startswith('[') and key_str.endswith(']'):
+            # Escape array-like keys by wrapping in quotes
+            key_str = '"' + key_str + '"'
+        elif '.' in key_str:
+            # Escape float-like keys by wrapping in quotes
+            key_str = '"' + key_str + '"'
+        path.append(json.dumps(key_str))
     return "".join(path)
 
 
diff --git a/edge_case_test.py b/edge_case_test.py
new file mode 100644
index 0000000000..686f3cfa2e
--- /dev/null
+++ b/edge_case_test.py
@@ -0,0 +1,46 @@
+import sqlite3
+import json
+
+# Create a test database
+conn = sqlite3.connect(':memory:')
+c = conn.cursor()
+
+# Create a table with a JSON column
+c.execute('''CREATE TABLE test_json (
+    id INTEGER PRIMARY KEY,
+    data JSON
+)''')
+
+# Test data with various edge cases
+test_data = {
+    'numeric': {'1111': 'value'},
+    'negative': {'-1': 'value'},
+    'mixed': {'123abc': 'value'},
+    'special': {'$pecial': 'value'},
+    'float': {'1.23': 'value'},
+    'array_like': {'[0]': 'value'}
+}
+
+# Insert test data
+for name, data in test_data.items():
+    c.execute("INSERT INTO test_json (data) VALUES (?)", (json.dumps(data),))
+
+# Test queries
+def test_key(key):
+    # Use json_extract to check if the key exists
+    key_str = key
+    if key.startswith('[') and key.endswith(']'):
+        key_str = '"' + key + '"'
+    elif '.' in key:
+        key_str = '"' + key + '"'
+    c.execute("SELECT COUNT(*) FROM test_json WHERE json_extract(data, '$.' || ?) IS NOT NULL", (key_str,))
+    return c.fetchone()[0]
+
+# Run tests
+for case, data in test_data.items():
+    key = list(data.keys())[0]
+    result = test_key(key)
+    print(f"Testing {case} key '{key}': {result} results")
+
+# Clean up
+conn.close()
\ No newline at end of file
diff --git a/simple_test.py b/simple_test.py
new file mode 100644
index 0000000000..0a63b7ceed
--- /dev/null
+++ b/simple_test.py
@@ -0,0 +1,29 @@
+import sqlite3
+import json
+
+# Create a test database
+conn = sqlite3.connect(':memory:')
+c = conn.cursor()
+
+# Create a table with a JSON column
+c.execute('''CREATE TABLE test_json (
+    id INTEGER PRIMARY KEY,
+    data JSON
+)''')
+
+# Insert test data
+c.execute("INSERT INTO test_json (data) VALUES (?)", (json.dumps({'foo': 'bar'}),))
+c.execute("INSERT INTO test_json (data) VALUES (?)", (json.dumps({'1111': 'bar'}),))
+
+# Test queries
+def test_key(key):
+    # Use json_extract to check if the key exists
+    c.execute("SELECT COUNT(*) FROM test_json WHERE json_extract(data, '$.' || ?) IS NOT NULL", (key,))
+    return c.fetchone()[0]
+
+# Run tests
+print(f"Testing key 'foo': {test_key('foo')} results")
+print(f"Testing key '1111': {test_key('1111')} results")
+
+# Clean up
+conn.close()
\ No newline at end of file
diff --git a/test_json_field.py b/test_json_field.py
new file mode 100644
index 0000000000..f4d4ed7202
--- /dev/null
+++ b/test_json_field.py
@@ -0,0 +1,34 @@
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+from django.test import TestCase
+from django.db import models
+import django
+django.setup()
+
+# Define the model
+class JsonFieldHasKeyTest(models.Model):
+    data = models.JSONField()
+    
+    class Meta:
+        app_label = 'django.contrib.contenttypes'  # Use an existing app
+
+# Create test case
+class JsonFieldHasKeyTestCase(TestCase):
+    def setUp(self):
+        test = JsonFieldHasKeyTest(data={'foo': 'bar'})
+        test2 = JsonFieldHasKeyTest(data={'1111': 'bar'})
+        test.save()
+        test2.save()
+
+    def test_json_field_has_key(self):
+        c1 = JsonFieldHasKeyTest.objects.filter(data__has_key='foo').count()
+        c2 = JsonFieldHasKeyTest.objects.filter(data__has_key='1111').count()
+        print(f"Found {c1} entries with key 'foo'")
+        print(f"Found {c2} entries with key '1111'")
+        assert c1 == 1, "Should have found 1 entry with key 'foo'"
+        assert c2 == 1, "Should have found 1 entry with key '1111'"
+
+if __name__ == '__main__':
+    from django.core.management import execute_from_command_line
+    execute_from_command_line(['manage.py', 'test'])
\ No newline at end of file
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..aefc793cea
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,14 @@
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': 'db.sqlite3',
+    }
+}
+
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+    'test_app',
+]
+
+SECRET_KEY = 'dummy-key-for-tests'
\ No newline at end of file
