diff --git a/.gitignore b/.gitignore
index 238fb3a200..975c5364d8 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,6 @@ tests/coverage_html/
 tests/.coverage
 build/
 tests/report/
+*__pycache__*
+*venv*
+*_build*
diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index 850734709d..1c3d521c0a 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -126,9 +126,8 @@ class SQLCompiler:
             for col in cols:
                 expressions.append(col)
         for expr, (sql, params, is_ref) in order_by:
-            # Skip References to the select clause, as all expressions in the
-            # select clause are already part of the group by.
-            if not is_ref:
+            # Skip References to the select clause and Meta.ordering fields
+            if not is_ref and not getattr(self.query, '_meta_ordering', False):
                 expressions.extend(expr.get_group_by_cols())
         having_group_by = self.having.get_group_by_cols() if self.having else ()
         for expr in having_group_by:
@@ -276,6 +275,9 @@ class SQLCompiler:
         The order_by clause can alter the select clause (for example it
         can add aliases to clauses that do not yet have one, or it can
         add totally new select clauses).
+
+        When ordering comes from Meta.ordering, we track this to avoid including
+        these fields in GROUP BY clauses.
         """
         if self.query.extra_order_by:
             ordering = self.query.extra_order_by
@@ -285,6 +287,8 @@ class SQLCompiler:
             ordering = self.query.order_by
         elif self.query.get_meta().ordering:
             ordering = self.query.get_meta().ordering
+            # Track that this ordering comes from Meta.ordering
+            self.query._meta_ordering = True
             self._meta_ordering = ordering
         else:
             ordering = []
diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 6c728d17bf..a1f1c5b3f9 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1968,6 +1968,8 @@ class Query(BaseExpression):
 
         If 'ordering' is empty, clear all ordering from the query.
         """
+        # Track if this ordering comes from Meta.ordering
+        self.ordering_from_meta = not ordering and getattr(self.get_meta(), 'ordering', None)
         errors = []
         for item in ordering:
             if isinstance(item, str):
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..fcd249c1fd
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,50 @@
+from django.conf import settings
+from django.db import models, connection
+from django.db.models import Count
+
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=['__main__'],
+)
+
+import django
+django.setup()
+
+class Author(models.Model):
+    name = models.CharField(max_length=100)
+    age = models.IntegerField()
+
+    class Meta:
+        ordering = ['name']  # This is the problematic Meta.ordering
+
+# Create tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Author)
+
+# Add some test data
+Author.objects.create(name='John', age=25)
+Author.objects.create(name='Jane', age=25)
+Author.objects.create(name='Bob', age=30)
+
+# Create queries that use GROUP BY and aggregation
+print("Query without Meta.ordering:")
+Author._meta.ordering = []  # Clear Meta.ordering
+qs1 = Author.objects.values('age').annotate(count=Count('id'))
+print(qs1.query)
+print("Results:", list(qs1))
+
+print("\nQuery with Meta.ordering:")
+Author._meta.ordering = ['name']  # Set Meta.ordering
+qs2 = Author.objects.values('age').annotate(count=Count('id'))
+print(qs2.query)
+print("Results:", list(qs2))
+
+# Verify the results are the same (correct aggregation)
+assert list(qs1) == list(qs2), "Results differ with Meta.ordering!"
+print("\nSuccess! Meta.ordering does not affect GROUP BY results")
\ No newline at end of file
