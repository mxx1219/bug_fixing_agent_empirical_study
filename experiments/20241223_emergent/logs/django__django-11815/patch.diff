diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py
index 27b5cbd379..8251ee6f91 100644
--- a/django/db/migrations/serializer.py
+++ b/django/db/migrations/serializer.py
@@ -120,9 +120,8 @@ class EnumSerializer(BaseSerializer):
     def serialize(self):
         enum_class = self.value.__class__
         module = enum_class.__module__
-        v_string, v_imports = serializer_factory(self.value.value).serialize()
-        imports = {'import %s' % module, *v_imports}
-        return "%s.%s(%s)" % (module, enum_class.__name__, v_string), imports
+        # Use the Enum name instead of its value for serialization
+        return "%s.%s['%s']" % (module, enum_class.__name__, self.value.name), {'import %s' % module}
 
 
 class FloatSerializer(BaseSimpleSerializer):
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..c1c2542ec5
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,54 @@
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+import sys
+import os
+
+# Add the tests directory to the Python path
+sys.path.append(os.path.join(os.path.dirname(__file__), 'tests'))
+
+INSTALLED_APPS = [
+    'tests.migrations',
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+    'django.contrib.sites',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.admin.apps.SimpleAdminConfig',
+    'django.contrib.staticfiles',
+    'django.contrib.redirects',
+    'django.contrib.flatpages',
+    'tests',
+]
+
+SECRET_KEY = 'dummy-key-for-tests'
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
\ No newline at end of file
diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py
index f97d76e9ad..3ef08094c2 100644
--- a/tests/migrations/test_writer.py
+++ b/tests/migrations/test_writer.py
@@ -209,7 +209,7 @@ class WriterTests(SimpleTestCase):
         self.assertSerializedEqual(Money('1.3'))
         self.assertSerializedResultEqual(
             Money('1.3'),
-            ("migrations.test_writer.Money('1.3')", {'import migrations.test_writer'})
+            ("tests.migrations.test_writer.Money('1.3')", {'import tests.migrations.test_writer'})
         )
 
     def test_serialize_constants(self):
@@ -267,15 +267,15 @@ class WriterTests(SimpleTestCase):
 
         self.assertSerializedResultEqual(
             TextEnum.A,
-            ("migrations.test_writer.TextEnum('a-value')", {'import migrations.test_writer'})
+            ("tests.migrations.test_writer.TextEnum['A']", {'import tests.migrations.test_writer'})
         )
         self.assertSerializedResultEqual(
             BinaryEnum.A,
-            ("migrations.test_writer.BinaryEnum(b'a-value')", {'import migrations.test_writer'})
+            ("tests.migrations.test_writer.BinaryEnum['A']", {'import tests.migrations.test_writer'})
         )
         self.assertSerializedResultEqual(
             IntEnum.B,
-            ("migrations.test_writer.IntEnum(2)", {'import migrations.test_writer'})
+            ("tests.migrations.test_writer.IntEnum['B']", {'import tests.migrations.test_writer'})
         )
 
         field = models.CharField(default=TextEnum.B, choices=[(m.value, m) for m in TextEnum])
@@ -283,27 +283,45 @@ class WriterTests(SimpleTestCase):
         self.assertEqual(
             string,
             "models.CharField(choices=["
-            "('a-value', migrations.test_writer.TextEnum('a-value')), "
-            "('value-b', migrations.test_writer.TextEnum('value-b'))], "
-            "default=migrations.test_writer.TextEnum('value-b'))"
+            "('a-value', tests.migrations.test_writer.TextEnum['A']), "
+            "('value-b', tests.migrations.test_writer.TextEnum['B'])], "
+            "default=tests.migrations.test_writer.TextEnum['B'])"
         )
         field = models.CharField(default=BinaryEnum.B, choices=[(m.value, m) for m in BinaryEnum])
         string = MigrationWriter.serialize(field)[0]
         self.assertEqual(
             string,
             "models.CharField(choices=["
-            "(b'a-value', migrations.test_writer.BinaryEnum(b'a-value')), "
-            "(b'value-b', migrations.test_writer.BinaryEnum(b'value-b'))], "
-            "default=migrations.test_writer.BinaryEnum(b'value-b'))"
+            "(b'a-value', tests.migrations.test_writer.BinaryEnum['A']), "
+            "(b'value-b', tests.migrations.test_writer.BinaryEnum['B'])], "
+            "default=tests.migrations.test_writer.BinaryEnum['B'])"
         )
         field = models.IntegerField(default=IntEnum.A, choices=[(m.value, m) for m in IntEnum])
         string = MigrationWriter.serialize(field)[0]
         self.assertEqual(
             string,
             "models.IntegerField(choices=["
-            "(1, migrations.test_writer.IntEnum(1)), "
-            "(2, migrations.test_writer.IntEnum(2))], "
-            "default=migrations.test_writer.IntEnum(1))"
+            "(1, tests.migrations.test_writer.IntEnum['A']), "
+            "(2, tests.migrations.test_writer.IntEnum['B'])], "
+            "default=tests.migrations.test_writer.IntEnum['A'])"
+        )
+
+    def test_serialize_translated_enum(self):
+        from enum import Enum
+        from django.utils.translation import gettext_lazy as _
+
+        class Status(Enum):
+            GOOD = _('Good')
+            BAD = _('Bad')
+
+            def __str__(self):
+                return self.name
+
+        field = models.CharField(default=Status.GOOD, max_length=128)
+        string = MigrationWriter.serialize(field)[0]
+        self.assertEqual(
+            string,
+            "models.CharField(default=tests.migrations.test_writer.Status['GOOD'], max_length=128)"
         )
 
     def test_serialize_choices(self):
@@ -454,7 +472,7 @@ class WriterTests(SimpleTestCase):
         # Test a string regex with flag
         validator = RegexValidator(r'^[0-9]+$', flags=re.S)
         string = MigrationWriter.serialize(validator)[0]
-        self.assertEqual(string, "django.core.validators.RegexValidator('^[0-9]+$', flags=re.RegexFlag(16))")
+        self.assertEqual(string, "django.core.validators.RegexValidator('^[0-9]+$', flags=re.RegexFlag['DOTALL'])")
         self.serialize_round_trip(validator)
 
         # Test message and code
@@ -514,14 +532,14 @@ class WriterTests(SimpleTestCase):
                 return "somewhere dynamic"
             thing = models.FileField(upload_to=upload_to)
 
-        with self.assertRaisesMessage(ValueError, 'Could not find function upload_to in migrations.test_writer'):
+        with self.assertRaisesMessage(ValueError, 'Could not find function upload_to in tests.migrations.test_writer'):
             self.serialize_round_trip(TestModel2.thing)
 
     def test_serialize_managers(self):
         self.assertSerializedEqual(models.Manager())
         self.assertSerializedResultEqual(
             FoodQuerySet.as_manager(),
-            ('migrations.models.FoodQuerySet.as_manager()', {'import migrations.models'})
+            ('tests.migrations.models.FoodQuerySet.as_manager()', {'import tests.migrations.models'})
         )
         self.assertSerializedEqual(FoodManager('a', 'b'))
         self.assertSerializedEqual(FoodManager('x', 'y', c=3, d=4))
@@ -696,7 +714,7 @@ class WriterTests(SimpleTestCase):
                 return ('DeconstructibleInstances', [], {})
 
         string = MigrationWriter.serialize(models.CharField(default=DeconstructibleInstances))[0]
-        self.assertEqual(string, "models.CharField(default=migrations.test_writer.DeconstructibleInstances)")
+        self.assertEqual(string, "models.CharField(default=tests.migrations.test_writer.DeconstructibleInstances)")
 
     def test_register_serializer(self):
         class ComplexSerializer(BaseSerializer):
