diff --git a/django/template/library.py b/django/template/library.py
index 20bc86dac8..744d30d700 100644
--- a/django/template/library.py
+++ b/django/template/library.py
@@ -261,16 +261,16 @@ def parse_bits(parser, bits, params, varargs, varkw, defaults,
         if kwarg:
             # The kwarg was successfully extracted
             param, value = kwarg.popitem()
-            if param not in params and param not in unhandled_kwargs and varkw is None:
-                # An unexpected keyword argument was supplied
-                raise TemplateSyntaxError(
-                    "'%s' received unexpected keyword argument '%s'" %
-                    (name, param))
-            elif param in kwargs:
+            if param in kwargs:
                 # The keyword argument has already been supplied once
                 raise TemplateSyntaxError(
                     "'%s' received multiple values for keyword argument '%s'" %
                     (name, param))
+            elif param not in params and param not in unhandled_kwargs and param not in (kwonly_defaults or {}) and varkw is None:
+                # An unexpected keyword argument was supplied
+                raise TemplateSyntaxError(
+                    "'%s' received unexpected keyword argument '%s'" %
+                    (name, param))
             else:
                 # All good, record the keyword argument
                 kwargs[str(param)] = value
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..4e6405fbbb
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,48 @@
+from django.conf import settings
+from django.apps import apps
+
+settings.configure(
+    INSTALLED_APPS=[],
+    TEMPLATES=[{
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [],
+            'libraries': {
+                'reproduce': 'reproduce',
+            }
+        },
+    }]
+)
+
+import django
+django.setup()
+
+from django.template import Library, Template, Context
+
+register = Library()
+
+@register.simple_tag
+def hello(*, greeting='hello'):
+    return f'{greeting} world'
+
+@register.simple_tag
+def hi(*, greeting):
+    return f'{greeting} world'
+
+# Create a template that uses our custom tags
+template = Template('{% load reproduce %}{% hello greeting="hi" %}')
+context = Context({})
+
+# This should work but currently raises an error
+print(template.render(context))
+
+# Test the second case with duplicate keyword args
+template2 = Template('{% load reproduce %}{% hi greeting="hi" greeting="hello" %}')
+context2 = Context({})
+
+try:
+    print(template2.render(context2))
+except Exception as e:
+    print(f"Error: {str(e)}")
\ No newline at end of file
diff --git a/test.py b/test.py
new file mode 100644
index 0000000000..59bca337d8
--- /dev/null
+++ b/test.py
@@ -0,0 +1,27 @@
+import os
+os.environ['DJANGO_SETTINGS_MODULE'] = 'test_project.settings'
+
+import django
+django.setup()
+
+from django.template import Template, Context
+
+# Test case 1: keyword-only argument with default
+template = Template('{% load test_tags %}{% hello greeting="hi" %}')
+context = Context({})
+
+try:
+    result = template.render(context)
+    print("Test 1 result:", result)
+except Exception as e:
+    print("Test 1 failed:", str(e))
+
+# Test case 2: duplicate keyword argument
+template2 = Template('{% load test_tags %}{% hi greeting="hi" greeting="hello" %}')
+context2 = Context({})
+
+try:
+    result = template2.render(context2)
+    print("Test 2 result:", result)
+except Exception as e:
+    print("Test 2 error:", str(e))
\ No newline at end of file
diff --git a/test_project/__init__.py b/test_project/__init__.py
new file mode 100644
index 0000000000..a7506fdc94
--- /dev/null
+++ b/test_project/__init__.py
@@ -0,0 +1 @@
+# Empty init file
\ No newline at end of file
diff --git a/test_project/settings.py b/test_project/settings.py
new file mode 100644
index 0000000000..f7c8a2ca66
--- /dev/null
+++ b/test_project/settings.py
@@ -0,0 +1,12 @@
+SECRET_KEY = 'dummy'
+INSTALLED_APPS = ['test_project']
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [],
+        },
+    },
+]
\ No newline at end of file
diff --git a/test_project/templatetags/__init__.py b/test_project/templatetags/__init__.py
new file mode 100644
index 0000000000..a7506fdc94
--- /dev/null
+++ b/test_project/templatetags/__init__.py
@@ -0,0 +1 @@
+# Empty init file
\ No newline at end of file
diff --git a/test_project/templatetags/test_tags.py b/test_project/templatetags/test_tags.py
new file mode 100644
index 0000000000..8b6e5a490a
--- /dev/null
+++ b/test_project/templatetags/test_tags.py
@@ -0,0 +1,11 @@
+from django.template import Library
+
+register = Library()
+
+@register.simple_tag
+def hello(*, greeting='hello'):
+    return f'{greeting} world'
+
+@register.simple_tag
+def hi(*, greeting):
+    return f'{greeting} world'
\ No newline at end of file
