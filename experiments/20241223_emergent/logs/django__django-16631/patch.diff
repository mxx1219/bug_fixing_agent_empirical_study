diff --git a/django/contrib/auth/base_user.py b/django/contrib/auth/base_user.py
index 5ee30bf59c..6f6320eabf 100644
--- a/django/contrib/auth/base_user.py
+++ b/django/contrib/auth/base_user.py
@@ -135,12 +135,31 @@ class AbstractBaseUser(models.Model):
         """
         Return an HMAC of the password field.
         """
+        from django.conf import settings
         key_salt = "django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash"
-        return salted_hmac(
+        
+        # Try current SECRET_KEY first
+        current_hash = salted_hmac(
             key_salt,
             self.password,
             algorithm="sha256",
         ).hexdigest()
+        
+        # If SECRET_KEY_FALLBACKS is defined, try each key
+        if hasattr(settings, 'SECRET_KEY_FALLBACKS'):
+            for key in settings.SECRET_KEY_FALLBACKS:
+                fallback_hash = salted_hmac(
+                    key_salt,
+                    self.password,
+                    secret=key,
+                    algorithm="sha256",
+                ).hexdigest()
+                # Return the fallback hash if it's different from current hash
+                # This means the session was created with an old key
+                if fallback_hash != current_hash:
+                    return fallback_hash
+        
+        return current_hash
 
     @classmethod
     def get_email_field_name(cls):
diff --git a/reproduce_session_key_issue.py b/reproduce_session_key_issue.py
new file mode 100644
index 0000000000..66018d9ea0
--- /dev/null
+++ b/reproduce_session_key_issue.py
@@ -0,0 +1,61 @@
+from django.conf import settings
+
+# Configure Django settings
+settings.configure(
+    SECRET_KEY='new_key',
+    SECRET_KEY_FALLBACKS=['old_key'],
+    INSTALLED_APPS=['django.contrib.auth', 'django.contrib.contenttypes'],
+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+    DEFAULT_AUTO_FIELD='django.db.models.AutoField'
+)
+
+import django
+django.setup()
+
+from django.contrib.auth.base_user import AbstractBaseUser
+from django.db import models
+
+# Create a minimal user class that mimics the fixed version
+class User:
+    def __init__(self):
+        self.password = 'test_password'
+        
+    def get_session_auth_hash(self):
+        from django.utils.crypto import salted_hmac
+        key_salt = "django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash"
+        
+        # Try current SECRET_KEY first
+        current_hash = salted_hmac(key_salt, self.password).hexdigest()
+        
+        # If SECRET_KEY_FALLBACKS is defined, try each key
+        if hasattr(settings, 'SECRET_KEY_FALLBACKS'):
+            for key in settings.SECRET_KEY_FALLBACKS:
+                fallback_hash = salted_hmac(
+                    key_salt,
+                    self.password,
+                    secret=key
+                ).hexdigest()
+                # Return the fallback hash if it's different from current hash
+                # This means the session was created with an old key
+                if fallback_hash != current_hash:
+                    return fallback_hash
+        
+        return current_hash
+
+# Create a user instance
+user = User()
+
+# First, create a hash with the old key
+settings.SECRET_KEY = 'old_key'
+settings.SECRET_KEY_FALLBACKS = []
+old_hash = user.get_session_auth_hash()
+print(f"Original hash (with old key): {old_hash}")
+
+# Now simulate key rotation - new key is primary, old key in fallbacks
+settings.SECRET_KEY = 'new_key'
+settings.SECRET_KEY_FALLBACKS = ['old_key']
+
+# Try to validate the old hash with the new setup
+new_hash = user.get_session_auth_hash()
+print(f"New hash (with new key + fallback): {new_hash}")
+print(f"Hashes match: {old_hash == new_hash}")  # Should be True with our fix
\ No newline at end of file
