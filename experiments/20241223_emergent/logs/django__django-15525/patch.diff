diff --git a/.gitignore b/.gitignore
index 238fb3a200..975c5364d8 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,6 @@ tests/coverage_html/
 tests/.coverage
 build/
 tests/report/
+*__pycache__*
+*venv*
+*_build*
diff --git a/db.sqlite3 b/db.sqlite3
new file mode 100644
index 0000000000..77e1b853d1
Binary files /dev/null and b/db.sqlite3 differ
diff --git a/django/core/serializers/base.py b/django/core/serializers/base.py
index da85cb4b92..b95ac4e2d0 100644
--- a/django/core/serializers/base.py
+++ b/django/core/serializers/base.py
@@ -336,14 +336,16 @@ def build_instance(Model, data, db):
         and hasattr(default_manager, "get_by_natural_key")
         and hasattr(Model, "natural_key")
     ):
-        natural_key = Model(**data).natural_key()
+        # Create instance with db-aware manager to ensure proper database context
+        instance = Model._meta.default_manager.db_manager(db).model(**data)
         try:
+            natural_key = instance.natural_key()
             data[Model._meta.pk.attname] = Model._meta.pk.to_python(
                 default_manager.db_manager(db).get_by_natural_key(*natural_key).pk
             )
         except Model.DoesNotExist:
             pass
-    return Model(**data)
+    return Model._meta.default_manager.db_manager(db).model(**data)
 
 
 def deserialize_m2m_values(field, field_value, using, handle_forward_references):
diff --git a/other.sqlite3 b/other.sqlite3
new file mode 100644
index 0000000000..77e1b853d1
Binary files /dev/null and b/other.sqlite3 differ
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..8e67d2f03d
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,61 @@
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': 'db.sqlite3',
+        },
+        'other': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': 'other.sqlite3',
+        }
+    },
+    INSTALLED_APPS=[
+        'testapp',
+    ],
+)
+
+django.setup()
+
+from testapp.models import Author, Book
+
+# Create the tables
+from django.core.management import call_command
+call_command('migrate', run_syncdb=True)
+call_command('migrate', run_syncdb=True, database='other')
+
+# Create test data
+from django.core import serializers
+import json
+
+# Create test data in default database
+author = Author.objects.create(name="JR Tolkien")
+book = Book.objects.create(title="The Ring", author=author)
+
+# Serialize the data
+data = serializers.serialize("json", list(Author.objects.all()) + list(Book.objects.all()), 
+                           indent=2, use_natural_foreign_keys=True, use_natural_primary_keys=True)
+
+print("Serialized data:")
+print(data)
+
+print("\nTrying to load data into 'other' database...")
+# Delete any existing data in 'other' database
+Author.objects.using('other').all().delete()
+Book.objects.using('other').all().delete()
+
+# Try to load the data into the other database
+for obj in serializers.deserialize("json", data, using='other'):
+    obj.save(using='other')
+
+# Verify the data was loaded correctly
+print("\nVerifying data in 'other' database:")
+print("Authors:", list(Author.objects.using('other').values_list('name', flat=True)))
+print("Books:", list(Book.objects.using('other').values_list('title', 'author__name')))
+
+print("Data loaded successfully!")
\ No newline at end of file
diff --git a/testapp/__init__.py b/testapp/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testapp/models.py b/testapp/models.py
new file mode 100644
index 0000000000..fd3c7ff9dc
--- /dev/null
+++ b/testapp/models.py
@@ -0,0 +1,37 @@
+from django.db import models
+
+class AuthorManager(models.Manager):
+    def get_by_natural_key(self, name):
+        return self.get(name=name)
+
+class Author(models.Model):
+    id = models.AutoField(primary_key=True)
+    name = models.CharField(max_length=255, unique=True)
+    objects = AuthorManager()
+
+    def natural_key(self):
+        return (self.name,)
+
+    def __str__(self):
+        return f"{self.id} {self.name}"
+
+class BookManager(models.Manager):
+    def get_by_natural_key(self, title, author):
+        return self.get(title=title, author__name=author)
+
+class Book(models.Model):
+    id = models.AutoField(primary_key=True)
+    title = models.CharField(max_length=255)
+    author = models.ForeignKey(Author, models.DO_NOTHING, related_name="books")
+    objects = BookManager()
+
+    def natural_key(self):
+        return (self.title,) + self.author.natural_key()
+
+    natural_key.dependencies = ["testapp.Author"]
+
+    class Meta:
+        unique_together = [["title", "author"]]
+
+    def __str__(self):
+        return f"{self.id}: '{self.title}' by {self.author}"
\ No newline at end of file
