diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py
index 916478d075..b041bdc567 100644
--- a/django/db/models/lookups.py
+++ b/django/db/models/lookups.py
@@ -548,8 +548,8 @@ class YearLookup(Lookup):
 
     def as_sql(self, compiler, connection):
         # Avoid the extract operation if the rhs is a direct value to allow
-        # indexes to be used.
-        if self.rhs_is_direct_value():
+        # indexes to be used, but only for regular year lookups (not iso_year)
+        if self.rhs_is_direct_value() and getattr(self.lhs, 'lookup_name', None) != 'iso_year':
             # Skip the extract part by directly using the originating field,
             # that is self.lhs.lhs.
             lhs_sql, params = self.process_lhs(compiler, connection, self.lhs.lhs)
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..2280305912
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,31 @@
+import os
+import django
+from django.conf import settings
+from django.db import models
+from django.db.models import DateTimeField
+from django.db.models.functions import ExtractIsoYear
+
+# Configure Django settings
+settings.configure(
+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+    INSTALLED_APPS=[],  # No need for apps in this test
+)
+django.setup()
+
+# Create a simple model for testing
+class DTModel(models.Model):
+    start_date = models.DateTimeField()
+
+    class Meta:
+        app_label = 'testapp'
+
+# Print the SQL for both approaches
+qs = DTModel.objects.annotate(extracted=ExtractIsoYear('start_date')).only('id')
+print("Annotation SQL:")
+print(qs.query)
+
+print("\nAnnotation used in filter:")
+print(qs.filter(extracted=2020).query)
+
+print("\nImplicit lookup:")
+print(DTModel.objects.filter(start_date__iso_year=2020).only('id').query)
\ No newline at end of file
