diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index e15e64cde4..f62cc5e513 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -2216,11 +2216,27 @@ def get_order_dir(field, default='ASC'):
 
     The 'default' param is used to indicate which way no prefix (or a '+'
     prefix) should sort. The '-' prefix always sorts the opposite way.
+
+    If field is an OrderBy expression, extract the field name and direction
+    from the expression.
     """
+    from django.db.models.expressions import OrderBy
+    
     dirn = ORDER_DIR[default]
-    if field[0] == '-':
-        return field[1:], dirn[1]
-    return field, dirn[0]
+    
+    if isinstance(field, OrderBy):
+        return field.expression.name, 'DESC' if field.descending else 'ASC'
+    
+    if isinstance(field, str):
+        if field[0] == '-':
+            return field[1:], dirn[1]
+        return field, dirn[0]
+        
+    # Handle other expression types by returning their name/reference
+    if hasattr(field, 'name'):
+        return field.name, dirn[0]
+    
+    return str(field), dirn[0]
 
 
 def add_to_dict(data, key, value):
diff --git a/tests/ordering/test_meta_ordering.py b/tests/ordering/test_meta_ordering.py
new file mode 100644
index 0000000000..f85d7db74c
--- /dev/null
+++ b/tests/ordering/test_meta_ordering.py
@@ -0,0 +1,40 @@
+from django.db import models
+from django.test import TestCase
+from django.db.models import F
+
+class Parent(models.Model):
+    name = models.CharField(max_length=50)
+    order = models.IntegerField()
+
+    class Meta:
+        ordering = [F('order').asc()]
+
+class Child(Parent):
+    extra = models.CharField(max_length=50)
+
+class MetaOrderingTests(TestCase):
+    @classmethod
+    def setUpTestData(cls):
+        Parent.objects.create(name='Parent1', order=2)
+        Parent.objects.create(name='Parent2', order=1)
+        Child.objects.create(name='Child1', order=4, extra='extra1')
+        Child.objects.create(name='Child2', order=3, extra='extra2')
+
+    def test_meta_ordering_with_expression(self):
+        """Test that Meta.ordering with expressions works correctly."""
+        # Use filter to get only Parent instances, not Child instances
+        parents = Parent.objects.filter(child__isnull=True)
+        self.assertEqual([p.name for p in parents], ['Parent2', 'Parent1'])
+
+    def test_child_meta_ordering_with_expression(self):
+        """Test that Meta.ordering with expressions works for child models."""
+        children = Child.objects.all()
+        self.assertEqual([c.name for c in children], ['Child2', 'Child1'])
+
+    def test_mixed_query_with_meta_ordering(self):
+        """Test that queries mixing parent and child models work with Meta.ordering."""
+        all_objects = Parent.objects.all()
+        self.assertEqual(
+            [obj.name for obj in all_objects],
+            ['Parent2', 'Parent1', 'Child2', 'Child1']
+        )
\ No newline at end of file
diff --git a/tests/test_settings.py b/tests/test_settings.py
new file mode 100644
index 0000000000..ccbe3ae5e1
--- /dev/null
+++ b/tests/test_settings.py
@@ -0,0 +1,14 @@
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+    'tests.ordering',
+]
+
+SECRET_KEY = 'dummy-key-for-tests'
\ No newline at end of file
