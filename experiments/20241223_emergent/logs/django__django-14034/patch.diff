diff --git a/django/forms/fields.py b/django/forms/fields.py
index 65d6a9ec82..b16a8ac51c 100644
--- a/django/forms/fields.py
+++ b/django/forms/fields.py
@@ -1025,6 +1025,15 @@ class MultiValueField(Field):
             if not value or not [v for v in value if v not in self.empty_values]:
                 if self.required:
                     raise ValidationError(self.error_messages['required'], code='required')
+                elif not self.require_all_fields:
+                    # When require_all_fields=False, check if any individual field is required
+                    errors = []
+                    for i, field in enumerate(self.fields):
+                        if field.required:
+                            errors.append(field.error_messages['incomplete'])
+                    if errors:
+                        raise ValidationError(errors)
+                    return self.compress([])
                 else:
                     return self.compress([])
         else:
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..a51dcf2956
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,70 @@
+from django.conf import settings
+settings.configure(
+    USE_I18N=False,
+    USE_L10N=False,
+    USE_TZ=False,
+    INSTALLED_APPS=[],
+)
+
+import django
+django.setup()
+
+from django.forms import (
+    Form,
+    CharField,
+    MultiValueField,
+    MultiWidget,
+)
+
+class MF(MultiValueField):
+    widget = MultiWidget
+    def __init__(self):
+        fields = [
+            CharField(required=False),
+            CharField(required=True),
+        ]
+        widget = self.widget(widgets=[
+            f.widget
+            for f in fields
+        ], attrs={})
+        super(MF, self).__init__(
+            fields=fields,
+            widget=widget,
+            require_all_fields=False,
+            required=False,
+        )
+    def compress(self, value):
+        return []
+
+class F(Form):
+    mf = MF()
+
+# Test case 1: Both fields empty
+f = F({
+    'mf_0': '',
+    'mf_1': '',
+})
+print("Test case 1 - Both fields empty:")
+print(f"is_valid(): {f.is_valid()}")  # Should be False because mf_1 is required
+if not f.is_valid():
+    print(f"Errors: {f.errors}")
+
+# Test case 2: First field filled, second empty
+f2 = F({
+    'mf_0': 'xxx',
+    'mf_1': '',
+})
+print("\nTest case 2 - First field filled, second empty:")
+print(f"is_valid(): {f2.is_valid()}")  # Should be False because mf_1 is required
+if not f2.is_valid():
+    print(f"Errors: {f2.errors}")
+
+# Test case 3: Both fields filled (should be valid)
+f3 = F({
+    'mf_0': 'xxx',
+    'mf_1': 'yyy',
+})
+print("\nTest case 3 - Both fields filled:")
+print(f"is_valid(): {f3.is_valid()}")  # Should be True
+if not f3.is_valid():
+    print(f"Errors: {f3.errors}")
\ No newline at end of file
