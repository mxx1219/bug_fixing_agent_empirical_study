diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py
index b9eb33329f..9a6614a809 100644
--- a/django/contrib/auth/forms.py
+++ b/django/contrib/auth/forms.py
@@ -56,6 +56,7 @@ class ReadOnlyPasswordHashField(forms.Field):
 
     def __init__(self, *args, **kwargs):
         kwargs.setdefault("required", False)
+        kwargs.setdefault("disabled", True)
         super().__init__(*args, **kwargs)
 
     def bound_data(self, data, initial):
diff --git a/test_password_field.py b/test_password_field.py
new file mode 100644
index 0000000000..0ac294d5c9
--- /dev/null
+++ b/test_password_field.py
@@ -0,0 +1,89 @@
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings first
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        SECRET_KEY='dummy-key-for-tests',
+    )
+    django.setup()
+
+# Now import Django modules
+from django.contrib.auth.forms import UserChangeForm
+from django.contrib.auth.models import User
+from django.test import TestCase
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        SECRET_KEY='dummy-key-for-tests',
+    )
+    django.setup()
+
+# Create a custom UserChangeForm without clean_password method
+class CustomUserChangeForm(UserChangeForm):
+    class Meta(UserChangeForm.Meta):
+        model = User
+        fields = ('username', 'password')
+
+# Test case
+class TestPasswordField(TestCase):
+    def setUp(self):
+        self.user = User.objects.create_user(
+            username='testuser',
+            password='testpass123'
+        )
+        self.initial_password = self.user.password
+
+    def test_password_field_disabled(self):
+        # Create form instance
+        form = CustomUserChangeForm(instance=self.user)
+        
+        # Check that password field is disabled
+        self.assertTrue(form.fields['password'].disabled)
+        
+        # Try to submit form with modified password
+        data = {
+            'username': 'testuser',
+            'password': 'modified_password'
+        }
+        form = CustomUserChangeForm(data, instance=self.user)
+        
+        # Form should be valid even without clean_password method
+        self.assertTrue(form.is_valid())
+        
+        # Save the form
+        form.save()
+        
+        # Verify password hasn't changed
+        self.user.refresh_from_db()
+        self.assertEqual(self.user.password, self.initial_password)
+
+        print("All tests passed!")
+
+if __name__ == '__main__':
+    # Run the test
+    test = TestPasswordField()
+    test.setUp()
+    test.test_password_field_disabled()
\ No newline at end of file
diff --git a/test_password_field_fixed.py b/test_password_field_fixed.py
new file mode 100644
index 0000000000..7d5aa5813c
--- /dev/null
+++ b/test_password_field_fixed.py
@@ -0,0 +1,76 @@
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings first
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        SECRET_KEY='dummy-key-for-tests',
+    )
+    django.setup()
+
+# Run migrations
+from django.core.management import call_command
+call_command('migrate')
+
+# Now import Django modules
+from django.contrib.auth.forms import UserChangeForm
+from django.contrib.auth.models import User
+from django.test import TestCase
+
+# Create a custom UserChangeForm without clean_password method
+class CustomUserChangeForm(UserChangeForm):
+    class Meta(UserChangeForm.Meta):
+        model = User
+        fields = ('username', 'password')
+
+# Test case
+class TestPasswordField(TestCase):
+    def setUp(self):
+        self.user = User.objects.create_user(
+            username='testuser',
+            password='testpass123'
+        )
+        self.initial_password = self.user.password
+
+    def test_password_field_disabled(self):
+        # Create form instance
+        form = CustomUserChangeForm(instance=self.user)
+        
+        # Check that password field is disabled
+        self.assertTrue(form.fields['password'].disabled)
+        
+        # Try to submit form with modified password
+        data = {
+            'username': 'testuser',
+            'password': 'modified_password'
+        }
+        form = CustomUserChangeForm(data, instance=self.user)
+        
+        # Form should be valid even without clean_password method
+        self.assertTrue(form.is_valid())
+        
+        # Save the form
+        form.save()
+        
+        # Verify password hasn't changed
+        self.user.refresh_from_db()
+        self.assertEqual(self.user.password, self.initial_password)
+
+        print("All tests passed!")
+
+if __name__ == '__main__':
+    # Run the test
+    test = TestPasswordField()
+    test.setUp()
+    test.test_password_field_disabled()
\ No newline at end of file
