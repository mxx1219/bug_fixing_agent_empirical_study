diff --git a/.gitignore b/.gitignore
index 238fb3a200..975c5364d8 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,6 @@ tests/coverage_html/
 tests/.coverage
 build/
 tests/report/
+*__pycache__*
+*venv*
+*_build*
diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py
index 8e8c3da06a..67a84f55d4 100644
--- a/django/core/handlers/base.py
+++ b/django/core/handlers/base.py
@@ -49,14 +49,25 @@ class BaseHandler:
                 middleware_is_async = False
             else:
                 middleware_is_async = middleware_can_async
+
+            # Store the original handler in case we need to restore it
+            original_handler = handler
+            
             try:
-                # Adapt handler, if needed.
-                handler = self.adapt_method_mode(
+                # Adapt handler mode for this middleware
+                adapted_handler = self.adapt_method_mode(
                     middleware_is_async, handler, handler_is_async,
                     debug=settings.DEBUG, name='middleware %s' % middleware_path,
                 )
-                mw_instance = middleware(handler)
+                
+                # Try to instantiate the middleware
+                mw_instance = middleware(adapted_handler)
+                
+                # If middleware instantiation succeeded, commit to using the adapted handler
+                handler = adapted_handler
             except MiddlewareNotUsed as exc:
+                # Restore original handler since this middleware won't be used
+                handler = original_handler
                 if settings.DEBUG:
                     if str(exc):
                         logger.debug('MiddlewareNotUsed(%r): %s', middleware_path, exc)
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..26c3787164
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,54 @@
+from django.core.handlers.base import BaseHandler
+from django.core.exceptions import MiddlewareNotUsed
+from django.http import HttpResponse
+from django.conf import settings
+import asyncio
+
+# Configure settings before importing anything else
+settings.configure(
+    DEBUG=True,
+    SECRET_KEY='dummy',
+    PASSWORD_RESET_TIMEOUT=3600,
+    MIDDLEWARE=[
+        '__main__.DummyMiddleware',
+        '__main__.SyncMiddleware'
+    ],
+    ALLOWED_HOSTS=['*'],
+)
+
+# Mock middleware that raises MiddlewareNotUsed
+class DummyMiddleware:
+    async_capable = False
+    sync_capable = True
+    
+    def __init__(self, get_response):
+        raise MiddlewareNotUsed()
+
+    def __call__(self, request):
+        return self.get_response(request)
+
+# Sync middleware that will be affected by the handler state
+class SyncMiddleware:
+    async_capable = False
+    sync_capable = True
+    
+    def __init__(self, get_response):
+        self.get_response = get_response
+
+    def __call__(self, request):
+        return self.get_response(request)
+
+async def make_request():
+    # Create handler and try to load middleware
+    handler = BaseHandler()
+    handler.load_middleware(is_async=True)
+    
+    # Check the handler's middleware chain
+    print("Middleware chain types:")
+    print(f"- _middleware_chain type: {type(handler._middleware_chain)}")
+    print(f"- _middleware_chain: {handler._middleware_chain}")
+    print(f"- is coroutine: {asyncio.iscoroutinefunction(handler._middleware_chain)}")
+
+# Run the async code
+loop = asyncio.get_event_loop()
+loop.run_until_complete(make_request())
\ No newline at end of file
