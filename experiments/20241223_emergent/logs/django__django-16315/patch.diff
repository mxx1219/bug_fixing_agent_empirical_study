diff --git a/django/db/backends/postgresql/operations.py b/django/db/backends/postgresql/operations.py
index 62273fc43c..319f5e3553 100644
--- a/django/db/backends/postgresql/operations.py
+++ b/django/db/backends/postgresql/operations.py
@@ -353,12 +353,21 @@ class DatabaseOperations(BaseDatabaseOperations):
         if on_conflict == OnConflict.IGNORE:
             return "ON CONFLICT DO NOTHING"
         if on_conflict == OnConflict.UPDATE:
+            # Get a mapping of field names to their db_column values
+            field_map = {f.name: f.column for f in fields}
+            
+            # Use db_column values for unique_fields
+            unique_cols = [field_map.get(field, field) for field in unique_fields]
+            
+            # Use db_column values for update_fields
+            update_cols = [field_map.get(field, field) for field in update_fields]
+            
             return "ON CONFLICT(%s) DO UPDATE SET %s" % (
-                ", ".join(map(self.quote_name, unique_fields)),
+                ", ".join(map(self.quote_name, unique_cols)),
                 ", ".join(
                     [
-                        f"{field} = EXCLUDED.{field}"
-                        for field in map(self.quote_name, update_fields)
+                        f"{self.quote_name(field)} = EXCLUDED.{self.quote_name(field)}"
+                        for field in update_cols
                     ]
                 ),
             )
diff --git a/test_bulk_create.py b/test_bulk_create.py
new file mode 100644
index 0000000000..f1ab5b6847
--- /dev/null
+++ b/test_bulk_create.py
@@ -0,0 +1,52 @@
+from django.db import models
+from django.conf import settings
+
+# Configure Django settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=['django.contrib.contenttypes'],
+    DEFAULT_AUTO_FIELD='django.db.models.AutoField',
+)
+
+import django
+django.setup()
+
+from django.db import connection
+
+class ActivityBlackListed(models.Model):
+    """
+    Test model with mixed case db_column names
+    """
+    class Meta:
+        db_table = "Activity_BlackListed"
+        managed = False
+        app_label = 'django.contrib.contenttypes'
+    
+    blacklistid = models.IntegerField(primary_key=True, db_column="BlacklistID")
+    sectorid = models.IntegerField(null=True, blank=True, db_column="SectorID")
+
+    def __str__(self):
+        return f"BlacklistID: {self.blacklistid}, SectorID: {self.sectorid}"
+
+# Create test instances
+instances = [
+    ActivityBlackListed(blacklistid=1, sectorid=100),
+    ActivityBlackListed(blacklistid=2, sectorid=200),
+]
+
+# Create the table
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(ActivityBlackListed)
+
+# Try bulk_create with update_conflicts
+ActivityBlackListed.objects.bulk_create(
+    instances,
+    update_conflicts=True,
+    update_fields=["sectorid"],
+    unique_fields=["blacklistid"]
+)
\ No newline at end of file
