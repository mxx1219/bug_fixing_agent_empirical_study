diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index d69c24419b..9ee2dd303d 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1666,6 +1666,14 @@ class Query(BaseExpression):
             filter_expr = (filter_lhs, OuterRef(filter_rhs.name))
         # Generate the inner query.
         query = Query(self.model)
+        # Copy filtered relations and annotations to the new query to ensure
+        # they are available in the subquery for exclude operations
+        query._filtered_relations = self._filtered_relations.copy()
+        query.annotations = self.annotations.copy()
+        # Apply the filtered relation conditions to the subquery to ensure
+        # the conditions are properly applied when using exclude
+        for alias, filtered_relation in self._filtered_relations.items():
+            query.add_q(filtered_relation.condition)
         query.add_filter(filter_expr)
         query.clear_ordering(True)
         # Try to have as simple as possible subquery -> trim leading joins from
diff --git a/tests/filtered_relation/tests.py b/tests/filtered_relation/tests.py
index 5e85dff16c..2f6c764686 100644
--- a/tests/filtered_relation/tests.py
+++ b/tests/filtered_relation/tests.py
@@ -98,6 +98,23 @@ class FilteredRelationTests(TestCase):
             [self.author1]
         )
 
+    def test_with_join_exclude(self):
+        """
+        Test that exclude works correctly with FilteredRelation.
+        This should return all authors who don't have a book titled 'poem by alice'.
+        """
+        qs = Author.objects.annotate(
+            book_alice=FilteredRelation(
+                'book',
+                condition=Q(book__title__iexact='poem by alice')
+            )
+        ).filter(
+            ~Q(book_alice__isnull=False)
+        ).order_by('name')
+        print("\nQuery:", qs.query)
+        print("\nResults:", list(qs))
+        self.assertSequenceEqual(qs, [self.author2])
+
     def test_with_join_and_complex_condition(self):
         self.assertSequenceEqual(
             Author.objects.annotate(
