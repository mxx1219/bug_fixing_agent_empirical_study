diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py
index ad2f5a7da1..a09c0c0c3a 100644
--- a/django/db/backends/base/schema.py
+++ b/django/db/backends/base/schema.py
@@ -1066,7 +1066,9 @@ class BaseDatabaseSchemaEditor:
         )
 
     def _index_columns(self, table, columns, col_suffixes, opclasses):
-        return Columns(table, columns, self.quote_name, col_suffixes=col_suffixes)
+        # Convert Table instance to string if needed
+        table_name = table.table if isinstance(table, Table) else table
+        return Columns(table_name, columns, self.quote_name, col_suffixes=col_suffixes)
 
     def _model_indexes_sql(self, model):
         """
diff --git a/test_unique_sql.py b/test_unique_sql.py
new file mode 100644
index 0000000000..40febdd6f8
--- /dev/null
+++ b/test_unique_sql.py
@@ -0,0 +1,30 @@
+from django.db.backends.base.schema import BaseDatabaseSchemaEditor
+from django.db.backends.ddl_references import Table
+
+class MockConnection:
+    def __init__(self):
+        self.features = type('Features', (), {
+            'supports_index_column_ordering': False,
+            'can_rollback_ddl': False
+        })()
+
+class MockSchemaEditor(BaseDatabaseSchemaEditor):
+    def quote_name(self, name):
+        return f'"{name}"'
+
+def test_create_unique_sql():
+    connection = MockConnection()
+    schema_editor = MockSchemaEditor(connection)
+    table = Table('mytable', schema_editor.quote_name)
+    columns = ['col1', 'col2']
+    
+    # This should now work without error
+    result = schema_editor._index_columns(table, columns, col_suffixes=(), opclasses=())
+    print(f"Generated columns: {result}")
+    
+    # Test with string table name
+    result2 = schema_editor._index_columns('othertable', columns, col_suffixes=(), opclasses=())
+    print(f"Generated columns with string table: {result2}")
+
+if __name__ == '__main__':
+    test_create_unique_sql()
\ No newline at end of file
