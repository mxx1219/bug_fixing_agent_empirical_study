diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 9735ce10c8..be4d4406cb 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -545,11 +545,68 @@ class Query(BaseExpression):
 
         return dict(zip(outer_query.annotation_select, result))
 
+    def _is_annotation_used(self, annotation_name):
+        """
+        Check if an annotation is used in filters, other annotations, or ordering.
+        """
+        # Check if used in filters
+        def _check_node(node):
+            if hasattr(node, "refs_aggregate"):
+                return annotation_name in {ref[0] for ref in node.refs_aggregate}
+            for child in node.children:
+                if isinstance(child, Node):
+                    if _check_node(child):
+                        return True
+                elif isinstance(child, (tuple, list)) and len(child) >= 2:
+                    # Check if the annotation is used in a WHERE clause
+                    if isinstance(child[0], str) and child[0].startswith(annotation_name + "__"):
+                        return True
+            return False
+
+        if self.where and _check_node(self.where):
+            return True
+
+        # Check if used in ordering
+        if self.order_by:
+            for ordering in self.order_by:
+                if ordering.startswith(annotation_name + "__") or ordering == annotation_name:
+                    return True
+
+        # Check if used in other annotations
+        for other_name, annotation in self.annotations.items():
+            if other_name != annotation_name:
+                if hasattr(annotation, "contains_aggregate") and annotation.contains_aggregate:
+                    if annotation_name in {ref[0] for ref in annotation.get_refs_aggregate()}:
+                        return True
+
+        return False
+
     def get_count(self, using):
         """
         Perform a COUNT() query using the current filter constraints.
         """
         obj = self.clone()
+        
+        # Remove unused annotations
+        unused_annotations = []
+        for name in obj.annotations.keys():
+            if not obj._is_annotation_used(name):
+                unused_annotations.append(name)
+        
+        for name in unused_annotations:
+            del obj.annotations[name]
+            # Also remove from annotation_select if present
+            if name in obj.annotation_select:
+                obj.annotation_select.remove(name)
+        
+        # Clear joins if they're only used by removed annotations
+        if unused_annotations and not obj.where:
+            # Reset the query's table state
+            obj.alias_map = {obj.base_table: obj.alias_map[obj.base_table]}
+            obj.alias_refcount = {obj.base_table: obj.alias_refcount[obj.base_table]}
+            obj.table_map = {obj.base_table: []}
+            obj.default_cols = True
+        
         obj.add_annotation(Count("*"), alias="__count", is_summary=True)
         return obj.get_aggregation(using, ["__count"])["__count"]
 
diff --git a/test_reproduce/reproduce.py b/test_reproduce/reproduce.py
new file mode 100644
index 0000000000..ac6aec109a
--- /dev/null
+++ b/test_reproduce/reproduce.py
@@ -0,0 +1,70 @@
+import os
+import django
+from django.conf import settings
+from django.db import models
+from django.db.models import Count
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            '__main__',
+        ],
+        USE_TZ=False,
+    )
+    django.setup()
+
+# Define models
+class Book(models.Model):
+    title = models.CharField(max_length=100)
+
+class Chapter(models.Model):
+    book = models.ForeignKey(Book, on_delete=models.CASCADE, related_name='chapters')
+    title = models.CharField(max_length=100)
+
+# Create tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Book)
+    schema_editor.create_model(Chapter)
+
+# Create some test data
+book1 = Book.objects.create(title='Book 1')
+Chapter.objects.create(book=book1, title='Chapter 1')
+Chapter.objects.create(book=book1, title='Chapter 2')
+
+book2 = Book.objects.create(title='Book 2')
+Chapter.objects.create(book=book2, title='Chapter 1')
+
+# Test queries
+from django.db import connection, reset_queries
+django.db.connection.use_debug_cursor = True
+
+# Test 1: Simple count with unused annotation
+reset_queries()
+result = Book.objects.annotate(num_chapters=Count('chapters')).count()
+print("\nTest 1: Count with unused annotation:")
+print(f"Result: {result}")
+print("SQL:", connection.queries[-1]['sql'])
+
+# Test 2: Simple count without annotation
+reset_queries()
+result = Book.objects.count()
+print("\nTest 2: Count without annotation:")
+print(f"Result: {result}")
+print("SQL:", connection.queries[-1]['sql'])
+
+# Test 3: Count with annotation used in filter
+reset_queries()
+result = Book.objects.annotate(num_chapters=Count('chapters')).filter(num_chapters__gt=1).count()
+print("\nTest 3: Count with annotation used in filter:")
+print(f"Result: {result}")
+print("SQL:", connection.queries[-1]['sql'])
\ No newline at end of file
