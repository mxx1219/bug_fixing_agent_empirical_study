diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py
index 5f2e64761e..6f95b7d121 100644
--- a/django/core/management/__init__.py
+++ b/django/core/management/__init__.py
@@ -136,6 +136,20 @@ def call_command(command_name, *args, **options):
         '{}={}'.format(min(opt.option_strings), arg_options[opt.dest])
         for opt in parser_actions if opt.required and opt.dest in options
     ]
+    
+    # Handle required mutually exclusive groups
+    for group in parser._mutually_exclusive_groups:
+        if group.required:
+            # Check if any of the group's arguments are in options
+            group_options = [opt.dest for opt in group._group_actions]
+            for dest in group_options:
+                if dest in options:
+                    # Add the argument to parse_args
+                    for opt in group._group_actions:
+                        if opt.dest == dest:
+                            parse_args.append('{}={}'.format(min(opt.option_strings), arg_options[dest]))
+                            break
+                    break
     defaults = parser.parse_args(args=parse_args)
     defaults = dict(defaults._get_kwargs(), **arg_options)
     # Raise an error if any unknown options were passed.
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..d4cb0c43c4
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,64 @@
+import os
+import sys
+import django
+from django.core.management import BaseCommand, CommandParser, call_command
+
+# Set up Django environment
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')
+from django.conf import settings
+settings.configure(SECRET_KEY='dummy')
+django.setup()
+
+# Create a test command
+class TestCommand(BaseCommand):
+    def add_arguments(self, parser):
+        shop = parser.add_mutually_exclusive_group(required=True)
+        shop.add_argument('--shop-id', nargs='?', type=int, default=None, dest='shop_id')
+        shop.add_argument('--shop', nargs='?', type=str, default=None, dest='shop_name')
+
+    def handle(self, *args, **options):
+        print(f"Received options: {options}")
+
+# Register the command
+from django.core.management import get_commands
+get_commands.cache_clear()  # Clear the LRU cache
+_commands = get_commands()
+_commands['test_command'] = TestCommand()
+
+# Try to call the command with kwargs
+print("Calling with kwargs:")
+try:
+    call_command('test_command', shop_id=1)
+except Exception as e:
+    print(f"Error with kwargs: {e}")
+
+# Try to call with string args
+print("\nCalling with string args:")
+try:
+    call_command('test_command', '--shop-id=1')
+except Exception as e:
+    print(f"Error with string args: {e}")
+
+# Test edge cases
+print("\nTesting edge cases:")
+
+# Test with shop name
+print("\nTesting with shop name:")
+try:
+    call_command('test_command', shop_name='myshop')
+except Exception as e:
+    print(f"Error with shop name: {e}")
+
+# Test with both arguments (should fail)
+print("\nTesting with both arguments (should fail):")
+try:
+    call_command('test_command', shop_id=1, shop_name='myshop')
+except Exception as e:
+    print(f"Error with both args: {e}")
+
+# Test with neither argument (should fail)
+print("\nTesting with no arguments (should fail):")
+try:
+    call_command('test_command')
+except Exception as e:
+    print(f"Error with no args: {e}")
\ No newline at end of file
