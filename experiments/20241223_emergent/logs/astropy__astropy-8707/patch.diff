diff --git a/astropy/io/fits/_utils.py b/astropy/io/fits/_utils.py
new file mode 100644
index 0000000000..53b2e516c8
--- /dev/null
+++ b/astropy/io/fits/_utils.py
@@ -0,0 +1,25 @@
+"""Utility functions for FITS header parsing."""
+
+def parse_header(data, sep=''):
+    """Parse a FITS header string into individual card strings.
+
+    Parameters
+    ----------
+    data : str
+        String containing the entire header.
+    sep : str, optional
+        The string separating cards from each other, such as a newline.
+        By default there is no card separator.
+
+    Returns
+    -------
+    list
+        A list of individual card strings.
+    """
+    if sep:
+        return [card for card in data.split(sep) if card.strip()]
+    else:
+        from .card import Card
+        return [data[i:i + Card.length]
+                for i in range(0, len(data), Card.length)
+                if data[i:i + Card.length].strip()]
\ No newline at end of file
diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py
index 8c1ac5d738..fdb01b4356 100644
--- a/astropy/io/fits/card.py
+++ b/astropy/io/fits/card.py
@@ -547,12 +547,20 @@ class Card(_Verify):
     @classmethod
     def fromstring(cls, image):
         """
-        Construct a `Card` object from a (raw) string. It will pad the string
+        Construct a `Card` object from a (raw) string or bytes. It will pad the string
         if it is not the length of a card image (80 columns).  If the card
         image is longer than 80 columns, assume it contains ``CONTINUE``
         card(s).
+
+        Parameters
+        ----------
+        image : str or bytes
+            A string or bytes containing the card image
         """
 
+        if isinstance(image, bytes):
+            image = image.decode('ascii')
+
         card = cls()
         card._image = _pad(image)
         card._verified = False
diff --git a/astropy/io/fits/header.py b/astropy/io/fits/header.py
index ad07e6d52d..22fe6f4be1 100644
--- a/astropy/io/fits/header.py
+++ b/astropy/io/fits/header.py
@@ -329,13 +329,13 @@ class Header:
     @classmethod
     def fromstring(cls, data, sep=''):
         """
-        Creates an HDU header from a byte string containing the entire header
+        Creates an HDU header from a string or bytes containing the entire header
         data.
 
         Parameters
         ----------
-        data : str
-           String containing the entire header.
+        data : str or bytes
+           String or bytes containing the entire header.
 
         sep : str, optional
             The string separating cards from each other, such as a newline.  By
@@ -347,18 +347,17 @@ class Header:
         header
             A new `Header` instance.
         """
+        if isinstance(data, bytes):
+            data = decode_ascii(data)
 
         cards = []
+        for card_string in parse_header(data, sep):
+            if not card_string:
+                continue
+            card = Card.fromstring(card_string)
+            cards.append(card)
 
-        # If the card separator contains characters that may validly appear in
-        # a card, the only way to unambiguously distinguish between cards is to
-        # require that they be Card.length long.  However, if the separator
-        # contains non-valid characters (namely \n) the cards may be split
-        # immediately at the separator
-        require_full_cardlength = set(sep).issubset(VALID_HEADER_CHARS)
-
-        # Split the header into individual cards
-        idx = 0
+        return cls(cards)
         image = []
 
         while idx < len(data):
diff --git a/test_header.py b/test_header.py
new file mode 100644
index 0000000000..ab483b1e8b
--- /dev/null
+++ b/test_header.py
@@ -0,0 +1,37 @@
+import sys
+sys.path.insert(0, '/testbed')
+
+from astropy.io.fits.header import Header
+from astropy.io.fits.card import Card
+
+# Test Card.fromstring with bytes
+card_bytes = b'SIMPLE  =                    T / file does conform to FITS standard'
+try:
+    card = Card.fromstring(card_bytes)
+    print("Success! Card created from bytes:", card)
+except Exception as e:
+    print("Error creating card from bytes:", str(e))
+
+# Test Card.fromstring with string
+card_str = 'SIMPLE  =                    T / file does conform to FITS standard'
+try:
+    card = Card.fromstring(card_str)
+    print("\nSuccess! Card created from string:", card)
+except Exception as e:
+    print("\nError creating card from string:", str(e))
+
+# Test Header.fromstring with bytes
+header_bytes = b'SIMPLE  =                    T / file does conform to FITS standard\nBITPIX  =                    8 / number of bits per data pixel\nNAXIS   =                    0 / number of data axes\nEND'
+try:
+    header = Header.fromstring(header_bytes)
+    print("\nSuccess! Header created from bytes:", header)
+except Exception as e:
+    print("\nError creating header from bytes:", str(e))
+
+# Test Header.fromstring with string
+header_str = 'SIMPLE  =                    T / file does conform to FITS standard\nBITPIX  =                    8 / number of bits per data pixel\nNAXIS   =                    0 / number of data axes\nEND'
+try:
+    header = Header.fromstring(header_str)
+    print("\nSuccess! Header created from string:", header)
+except Exception as e:
+    print("\nError creating header from string:", str(e))
\ No newline at end of file
