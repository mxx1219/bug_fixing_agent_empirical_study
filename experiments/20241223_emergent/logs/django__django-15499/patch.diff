diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index 90fc31bee5..9508bcbcb8 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -186,6 +186,19 @@ class CreateModel(ModelOperation):
                     managers=self.managers,
                 ),
             ]
+        elif (
+            isinstance(operation, AlterModelManagers)
+            and self.name_lower == operation.name_lower
+        ):
+            return [
+                CreateModel(
+                    self.name,
+                    fields=self.fields,
+                    options=self.options,
+                    bases=self.bases,
+                    managers=operation.managers,
+                ),
+            ]
         elif (
             isinstance(operation, AlterOrderWithRespectTo)
             and self.name_lower == operation.name_lower
diff --git a/test_migration_optimization.py b/test_migration_optimization.py
new file mode 100644
index 0000000000..e5c08f2c31
--- /dev/null
+++ b/test_migration_optimization.py
@@ -0,0 +1,44 @@
+from django.db import migrations, models
+from django.db.migrations.optimizer import MigrationOptimizer
+
+def test_optimize_create_model_alter_managers():
+    # Create a test model with default manager
+    create_operation = migrations.CreateModel(
+        name='TestModel',
+        fields=[
+            ('id', models.AutoField(primary_key=True)),
+            ('name', models.CharField(max_length=100)),
+        ],
+    )
+    
+    # Create a custom manager
+    class CustomManager(models.Manager):
+        def get_queryset(self):
+            return super().get_queryset().filter(active=True)
+    
+    # Create an AlterModelManagers operation
+    alter_managers_operation = migrations.AlterModelManagers(
+        name='TestModel',
+        managers=[
+            ('objects', CustomManager()),
+        ]
+    )
+    
+    # Create an optimizer instance
+    optimizer = MigrationOptimizer()
+    
+    # Try to optimize the operations
+    optimized = optimizer.optimize(
+        [create_operation, alter_managers_operation],
+        app_label='testapp'
+    )
+    
+    # Print results
+    print("Original operations:", len([create_operation, alter_managers_operation]))
+    print("Optimized operations:", len(optimized))
+    print("First operation type:", optimized[0].__class__.__name__)
+    if len(optimized) == 1:
+        print("Managers in optimized operation:", optimized[0].managers)
+
+if __name__ == '__main__':
+    test_optimize_create_model_alter_managers()
\ No newline at end of file
