diff --git a/run_tests.py b/run_tests.py
new file mode 100644
index 0000000000..c3469aaad7
--- /dev/null
+++ b/run_tests.py
@@ -0,0 +1,9 @@
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+import django
+django.setup()
+
+if __name__ == '__main__':
+    from django.core.management import execute_from_command_line
+    execute_from_command_line(['manage.py', 'test', 'testapp.tests', '--verbosity=2'])
\ No newline at end of file
diff --git a/testproject/__init__.py b/testproject/__init__.py
new file mode 100644
index 0000000000..3ac45de9bf
--- /dev/null
+++ b/testproject/__init__.py
@@ -0,0 +1 @@
+# Django project initialization
\ No newline at end of file
diff --git a/testproject/run_tests.py b/testproject/run_tests.py
new file mode 100644
index 0000000000..688ab1c0a5
--- /dev/null
+++ b/testproject/run_tests.py
@@ -0,0 +1,9 @@
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'testproject.settings')
+
+import django
+django.setup()
+
+if __name__ == '__main__':
+    from django.core.management import execute_from_command_line
+    execute_from_command_line(['manage.py', 'test', 'testapp.tests', '--verbosity=2'])
\ No newline at end of file
diff --git a/testproject/settings.py b/testproject/settings.py
new file mode 100644
index 0000000000..d99938101c
--- /dev/null
+++ b/testproject/settings.py
@@ -0,0 +1,41 @@
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'testapp',
+]
+
+MIDDLEWARE = [
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+]
+
+SECRET_KEY = 'dummy-key-for-tests'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
\ No newline at end of file
diff --git a/testproject/testapp/__init__.py b/testproject/testapp/__init__.py
new file mode 100644
index 0000000000..8598f85d88
--- /dev/null
+++ b/testproject/testapp/__init__.py
@@ -0,0 +1 @@
+# Test app initialization
\ No newline at end of file
diff --git a/testproject/testapp/models.py b/testproject/testapp/models.py
new file mode 100644
index 0000000000..5cfe6e62f0
--- /dev/null
+++ b/testproject/testapp/models.py
@@ -0,0 +1,42 @@
+from django.db import models
+from django.db.models import Manager
+
+class TestTagManager(Manager):
+    def __init__(self):
+        super().__init__()
+        self._skip_select_related = False
+
+    def get_queryset(self):
+        qs = super().get_queryset()
+        if not self._skip_select_related:
+            qs = qs.select_related("master")  # follow master when retrieving object by default
+        return qs
+
+    def only(self, *fields):
+        # When only() is called, we need to skip select_related to avoid conflicts
+        self._skip_select_related = True
+        try:
+            return super().only(*fields)
+        finally:
+            self._skip_select_related = False
+
+class TestTagMaster(models.Model):
+    name = models.CharField(max_length=120)
+
+    class Meta:
+        app_label = 'testapp'
+
+class TestTag(models.Model):
+    objects = TestTagManager()
+    name = models.CharField(max_length=120)
+    master = models.ForeignKey(TestTagMaster, on_delete=models.SET_NULL, null=True)
+
+    class Meta:
+        app_label = 'testapp'
+
+class Test(models.Model):
+    name = models.CharField(max_length=120)
+    tags = models.ManyToManyField(TestTag, blank=True)
+
+    class Meta:
+        app_label = 'testapp'
\ No newline at end of file
diff --git a/testproject/testapp/tests.py b/testproject/testapp/tests.py
new file mode 100644
index 0000000000..762f1dc52c
--- /dev/null
+++ b/testproject/testapp/tests.py
@@ -0,0 +1,16 @@
+from django.test import TestCase
+from django.core import serializers
+from .models import TestTagMaster, TestTag, Test
+
+class SerializationTest(TestCase):
+    def test_serialization(self):
+        # Create test data and try to serialize
+        tag_master = TestTagMaster.objects.create(name="master")
+        tag = TestTag.objects.create(name="tag", master=tag_master)
+        test = Test.objects.create(name="test")
+        test.tags.add(tag)
+        test.save()
+
+        # This should no longer raise the FieldError
+        serialized = serializers.serialize("json", [test])
+        print(serialized)
\ No newline at end of file
