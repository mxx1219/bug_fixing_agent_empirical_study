diff --git a/.gitignore b/.gitignore
index 238fb3a200..975c5364d8 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,6 @@ tests/coverage_html/
 tests/.coverage
 build/
 tests/report/
+*__pycache__*
+*venv*
+*_build*
diff --git a/django/contrib/contenttypes/management/__init__.py b/django/contrib/contenttypes/management/__init__.py
index 2b5f688136..563cba2fdf 100644
--- a/django/contrib/contenttypes/management/__init__.py
+++ b/django/contrib/contenttypes/management/__init__.py
@@ -24,7 +24,7 @@ class RenameContentType(migrations.RunPython):
             content_type.model = new_model
             try:
                 with transaction.atomic(using=db):
-                    content_type.save(update_fields={'model'})
+                    content_type.save(using=db, update_fields={'model'})
             except IntegrityError:
                 # Gracefully fallback if a stale content type causes a
                 # conflict as remove_stale_contenttypes will take care of
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..2238ce5edf
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,62 @@
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')
+import django
+from django.conf import settings
+from django.db import connections
+from django.test import TestCase
+from django.apps import apps
+from django.contrib.contenttypes.models import ContentType
+from django.db import migrations, transaction
+from django.db.migrations.state import ProjectState
+from django.db.migrations.operations.models import RenameModel
+
+# Setup minimal Django settings
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',  # Using in-memory database
+    },
+    'other_db': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+settings.configure(
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+    ],
+    DATABASES=DATABASES,
+    SECRET_KEY='dummy-key-for-test',
+    DEFAULT_AUTO_FIELD='django.db.models.AutoField',
+)
+
+django.setup()
+
+# Create the content types table in both databases
+for db in ['default', 'other_db']:
+    with connections[db].schema_editor() as schema_editor:
+        ContentType._meta.create_all_constraints = lambda *args: None  # Disable constraints for this test
+        schema_editor.create_model(ContentType)
+
+# Create a test content type
+content_type = ContentType.objects.using('other_db').create(
+    app_label='test_app',
+    model='old_model'
+)
+
+# Try to rename it
+from django.contrib.contenttypes.management import RenameContentType
+
+# Create a schema editor for the other_db
+with connections['other_db'].schema_editor() as schema_editor:
+    # Create and execute the rename operation
+    rename_op = RenameContentType('test_app', 'old_model', 'new_model')
+    rename_op._rename(apps, schema_editor, 'old_model', 'new_model')
+
+# Check if the rename worked
+try:
+    renamed_ct = ContentType.objects.using('other_db').get(app_label='test_app', model='new_model')
+    print("Success: Content type was renamed correctly")
+except ContentType.DoesNotExist:
+    print("Error: Content type was not renamed correctly")
\ No newline at end of file
diff --git a/test_rename.py b/test_rename.py
new file mode 100644
index 0000000000..8fdd24dda1
--- /dev/null
+++ b/test_rename.py
@@ -0,0 +1,54 @@
+import os
+import django
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='dummy-key-for-test',
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            },
+            'other_db': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+        ],
+        DEFAULT_AUTO_FIELD='django.db.models.AutoField',
+    )
+    django.setup()
+
+from django.db import connections
+from django.contrib.contenttypes.models import ContentType
+from django.contrib.contenttypes.management import RenameContentType
+
+# Create the content types table in both databases
+for alias in ['default', 'other_db']:
+    with connections[alias].schema_editor() as schema_editor:
+        schema_editor.create_model(ContentType)
+
+# Create a test content type in other_db
+content_type = ContentType.objects.using('other_db').create(
+    app_label='test_app',
+    model='old_model'
+)
+
+print(f"Created content type in other_db: {content_type}")
+
+# Try to rename it
+from django.apps import apps
+with connections['other_db'].schema_editor() as schema_editor:
+    rename_op = RenameContentType('test_app', 'old_model', 'new_model')
+    rename_op._rename(apps, schema_editor, 'old_model', 'new_model')
+
+# Check if the rename worked
+try:
+    renamed_ct = ContentType.objects.using('other_db').get(app_label='test_app', model='new_model')
+    print(f"Success: Content type was renamed correctly to {renamed_ct.model}")
+except ContentType.DoesNotExist:
+    print("Error: Content type was not renamed correctly")
\ No newline at end of file
