diff --git a/django/core/management/commands/flush.py b/django/core/management/commands/flush.py
index e8ed3967f7..bc8021cf4e 100644
--- a/django/core/management/commands/flush.py
+++ b/django/core/management/commands/flush.py
@@ -60,7 +60,7 @@ Are you sure you want to do this?
 
         if confirm == 'yes':
             try:
-                connection.ops.execute_sql_flush(database, sql_list)
+                connection.ops.execute_sql_flush(sql_list)
             except Exception as exc:
                 raise CommandError(
                     "Database %s couldn't be flushed. Possible reasons:\n"
diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py
index 70ac07ae09..f07580c18b 100644
--- a/django/db/backends/base/operations.py
+++ b/django/db/backends/base/operations.py
@@ -400,9 +400,9 @@ class BaseDatabaseOperations:
         """
         raise NotImplementedError('subclasses of BaseDatabaseOperations must provide a sql_flush() method')
 
-    def execute_sql_flush(self, using, sql_list):
+    def execute_sql_flush(self, sql_list):
         """Execute a list of SQL statements to flush the database."""
-        with transaction.atomic(using=using, savepoint=self.connection.features.can_rollback_ddl):
+        with transaction.atomic(using=self.connection.alias, savepoint=self.connection.features.can_rollback_ddl):
             with self.connection.cursor() as cursor:
                 for sql in sql_list:
                     cursor.execute(sql)
diff --git a/test_execute_sql_flush.py b/test_execute_sql_flush.py
new file mode 100644
index 0000000000..d0f1b4aa21
--- /dev/null
+++ b/test_execute_sql_flush.py
@@ -0,0 +1,35 @@
+import unittest
+from unittest.mock import Mock, patch, MagicMock
+from django.db import transaction
+from django.db.backends.base.operations import BaseDatabaseOperations
+
+class ExecuteSQLFlushTests(unittest.TestCase):
+    def test_execute_sql_flush(self):
+        connection = Mock()
+        connection.alias = 'default'
+        connection.features.can_rollback_ddl = True
+        
+        # Mock cursor context manager
+        cursor_mock = Mock()
+        cursor_context = MagicMock()
+        cursor_context.__enter__.return_value = cursor_mock
+        connection.cursor.return_value = cursor_context
+        
+        ops = BaseDatabaseOperations(connection)
+        sql_list = ['DELETE FROM table1', 'DELETE FROM table2']
+        
+        with patch.object(transaction, 'atomic') as atomic_mock:
+            ops.execute_sql_flush(sql_list)
+            
+        atomic_mock.assert_called_once_with(
+            using='default',
+            savepoint=True
+        )
+        
+        # Verify SQL execution
+        self.assertEqual(cursor_mock.execute.call_count, 2)
+        cursor_mock.execute.assert_any_call('DELETE FROM table1')
+        cursor_mock.execute.assert_any_call('DELETE FROM table2')
+        
+if __name__ == '__main__':
+    unittest.main()
\ No newline at end of file
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..cb3dbcbcba
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,14 @@
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+    'tests',
+]
+
+SECRET_KEY = 'dummy-key-for-tests'
\ No newline at end of file
diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py
index 0485fe8465..b0ffe958c8 100644
--- a/tests/backends/base/test_operations.py
+++ b/tests/backends/base/test_operations.py
@@ -172,7 +172,7 @@ class SqlFlushTests(TransactionTestCase):
             reset_sequences=True,
             allow_cascade=True,
         )
-        connection.ops.execute_sql_flush(connection.alias, sql_list)
+        connection.ops.execute_sql_flush(sql_list)
 
         with transaction.atomic():
             self.assertIs(Author.objects.exists(), False)
