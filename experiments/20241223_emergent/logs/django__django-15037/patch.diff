diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py
index f9b4bfb477..2fe7653494 100644
--- a/django/core/management/commands/inspectdb.py
+++ b/django/core/management/commands/inspectdb.py
@@ -128,6 +128,10 @@ class Command(BaseCommand):
                             field_type = '%s(%s' % (rel_type, rel_to)
                         else:
                             field_type = "%s('%s'" % (rel_type, rel_to)
+                        # Add to_field if the foreign key is not referencing the primary key
+                        referenced_field = relations[column_name][0]
+                        if referenced_field != 'id':
+                            extra_params['to_field'] = referenced_field
                     else:
                         # Calling `get_field_type` to get the field type string and any
                         # additional parameters and notes.
diff --git a/tests/inspectdb/models.py b/tests/inspectdb/models.py
index 4d2c224da9..0a9b1228f9 100644
--- a/tests/inspectdb/models.py
+++ b/tests/inspectdb/models.py
@@ -109,3 +109,13 @@ class UniqueTogether(models.Model):
             ('from_field', 'field1'),
             ('non_unique', 'non_unique_0'),
         ]
+
+
+class Foo(models.Model):
+    id = models.AutoField(primary_key=True)
+    other_id = models.IntegerField(unique=True)
+
+
+class Bar(models.Model):
+    id = models.AutoField(primary_key=True)
+    other = models.ForeignKey(Foo, models.DO_NOTHING, to_field='other_id', db_column='other_id')
diff --git a/tests/inspectdb/tests.py b/tests/inspectdb/tests.py
index 8be1681106..a5632e35a8 100644
--- a/tests/inspectdb/tests.py
+++ b/tests/inspectdb/tests.py
@@ -177,6 +177,15 @@ class InspectDBTestCase(TestCase):
         assertFieldType('pos_small_int_field', 'models.%s()' % introspected_field_types['PositiveSmallIntegerField'])
         assertFieldType('small_int_field', 'models.%s()' % introspected_field_types['SmallIntegerField'])
 
+    @skipUnlessDBFeature('can_introspect_foreign_keys')
+    def test_foreign_key_to_non_pk_field(self):
+        """Test introspection of foreign key to non-pk field."""
+        out = StringIO()
+        call_command('inspectdb', table_name_filter=inspectdb_tables_only, stdout=out)
+        output = out.getvalue()
+        # Look for ForeignKey with to_field attribute
+        self.assertIn("other = models.ForeignKey('InspectdbFoo', models.DO_NOTHING, to_field='other_id')", output)
+
     @skipUnlessDBFeature('can_introspect_foreign_keys')
     def test_attribute_name_not_python_keyword(self):
         out = StringIO()
diff --git a/tests/test_settings.py b/tests/test_settings.py
new file mode 100644
index 0000000000..68a9831d07
--- /dev/null
+++ b/tests/test_settings.py
@@ -0,0 +1,13 @@
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'tests.inspectdb',
+]
+
+SECRET_KEY = 'dummy'
\ No newline at end of file
