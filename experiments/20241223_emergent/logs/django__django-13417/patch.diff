diff --git a/django/db/models/query.py b/django/db/models/query.py
index 85cd8311a7..e5c23866c2 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -1224,7 +1224,8 @@ class QuerySet:
             return True
         if self.query.extra_order_by or self.query.order_by:
             return True
-        elif self.query.default_ordering and self.query.get_meta().ordering:
+        # When GROUP BY is present, default ordering is not applied
+        elif not self.query.group_by and self.query.default_ordering and self.query.get_meta().ordering:
             return True
         else:
             return False
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..78d6804837
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,51 @@
+if __name__ == '__main__':
+    import django
+    from django.conf import settings
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+            'django.contrib.admin',  # This will register our test app
+        ],
+        APP_LABEL='admin',  # Use admin app for our model
+        SECRET_KEY='dummy-key-for-test'
+    )
+    django.setup()
+
+    from django.db import models
+    from django.db.models import Count
+    from django.test import TestCase
+
+    class Foo(models.Model):
+        uuid = models.UUIDField(primary_key=True)
+        name = models.CharField(max_length=100)
+
+        class Meta:
+            ordering = ['name']
+            app_label = 'admin'
+
+    # Create test case
+    class QuerySetOrderedTest(TestCase):
+        def test_ordered_property(self):
+            # Get base queryset
+            qs = Foo.objects.all()
+            print("\nBase queryset:")
+            print(f"SQL: {qs.query}")
+            print(f"ordered: {qs.ordered}")
+            print(f"default_ordering: {qs.query.default_ordering}")
+
+            # Add annotation with group by
+            qs2 = Foo.objects.annotate(Count("pk")).all()
+            print("\nAnnotated queryset:")
+            print(f"SQL: {qs2.query}")
+            print(f"ordered: {qs2.ordered}")
+            print(f"default_ordering: {qs2.query.default_ordering}")
+
+    test = QuerySetOrderedTest()
+    test.test_ordered_property()
\ No newline at end of file
