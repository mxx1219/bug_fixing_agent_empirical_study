diff --git a/django/db/backends/mysql/operations.py b/django/db/backends/mysql/operations.py
index af8cfd86b5..f566ddeb5e 100644
--- a/django/db/backends/mysql/operations.py
+++ b/django/db/backends/mysql/operations.py
@@ -1,3 +1,4 @@
+import datetime
 import uuid
 
 from django.conf import settings
@@ -298,6 +299,8 @@ class DatabaseOperations(BaseDatabaseOperations):
                 converters.append(self.convert_datetimefield_value)
         elif internal_type == 'UUIDField':
             converters.append(self.convert_uuidfield_value)
+        elif internal_type == 'DurationField':
+            converters.append(self.convert_durationfield_value)
         return converters
 
     def convert_booleanfield_value(self, value, expression, connection):
@@ -315,6 +318,15 @@ class DatabaseOperations(BaseDatabaseOperations):
             value = uuid.UUID(value)
         return value
 
+    def convert_durationfield_value(self, value, expression, connection):
+        if value is not None:
+            try:
+                # MySQL returns the value in microseconds
+                return datetime.timedelta(microseconds=int(value))
+            except (TypeError, ValueError):
+                raise ValueError("Invalid duration value")
+        return value
+
     def binary_placeholder_sql(self, value):
         return '_binary %s' if value is not None and not hasattr(value, 'as_sql') else '%s'
 
diff --git a/django/db/backends/sqlite3/operations.py b/django/db/backends/sqlite3/operations.py
index 9510b5edd9..b1c891c836 100644
--- a/django/db/backends/sqlite3/operations.py
+++ b/django/db/backends/sqlite3/operations.py
@@ -275,6 +275,8 @@ class DatabaseOperations(BaseDatabaseOperations):
             converters.append(self.convert_uuidfield_value)
         elif internal_type in ('NullBooleanField', 'BooleanField'):
             converters.append(self.convert_booleanfield_value)
+        elif internal_type == 'DurationField':
+            converters.append(self.convert_durationfield_value)
         return converters
 
     def convert_datetimefield_value(self, value, expression, connection):
@@ -321,6 +323,40 @@ class DatabaseOperations(BaseDatabaseOperations):
     def convert_booleanfield_value(self, value, expression, connection):
         return bool(value) if value in (1, 0) else value
 
+    def convert_durationfield_value(self, value, expression, connection):
+        if value is not None:
+            if isinstance(value, (int, float)):
+                return datetime.timedelta(microseconds=int(value))
+            elif isinstance(value, str):
+                try:
+                    # Try parsing as integer microseconds first
+                    return datetime.timedelta(microseconds=int(value))
+                except ValueError:
+                    # If that fails, try parsing as duration string
+                    days = hours = minutes = seconds = microseconds = 0
+                    if 'day' in value:
+                        parts = value.split(',', 1)
+                        days = int(parts[0].strip().split()[0])
+                        if len(parts) > 1:
+                            value = parts[1].strip()
+                    if value:
+                        time_parts = value.split(':')
+                        if len(time_parts) == 3:
+                            hours = int(time_parts[0])
+                            minutes = int(time_parts[1])
+                            seconds_parts = time_parts[2].split('.')
+                            seconds = int(seconds_parts[0])
+                            if len(seconds_parts) > 1:
+                                microseconds = int(seconds_parts[1].ljust(6, '0')[:6])
+                    return datetime.timedelta(
+                        days=days,
+                        hours=hours,
+                        minutes=minutes,
+                        seconds=seconds,
+                        microseconds=microseconds
+                    )
+        return value
+
     def bulk_insert_sql(self, fields, placeholder_rows):
         return " UNION ALL ".join(
             "SELECT %s" % ", ".join(row)
diff --git a/tests/expressions/test_duration.py b/tests/expressions/test_duration.py
new file mode 100644
index 0000000000..8930056a9d
--- /dev/null
+++ b/tests/expressions/test_duration.py
@@ -0,0 +1,71 @@
+import datetime
+
+from django.db import models
+from django.test import TestCase
+from django.db.models import F
+
+class DurationModel(models.Model):
+    name = models.CharField(max_length=32)
+    duration = models.DurationField()
+
+    class Meta:
+        app_label = 'expressions'
+
+class DurationExpressionTests(TestCase):
+    @classmethod
+    def setUpTestData(cls):
+        cls.one_day = datetime.timedelta(days=1)
+        cls.one_hour = datetime.timedelta(hours=1)
+        DurationModel.objects.create(
+            name='one_day',
+            duration=cls.one_day,
+        )
+        DurationModel.objects.create(
+            name='one_hour',
+            duration=cls.one_hour,
+        )
+
+    def test_duration_arithmetic(self):
+        """Test that duration field arithmetic works correctly."""
+        # Test addition
+        qs = DurationModel.objects.annotate(
+            duration_plus=F('duration') + datetime.timedelta(days=1)
+        )
+        one_day = qs.get(name='one_day')
+        one_hour = qs.get(name='one_hour')
+        self.assertEqual(one_day.duration_plus, datetime.timedelta(days=2))
+        self.assertEqual(one_hour.duration_plus, datetime.timedelta(days=1, hours=1))
+
+        # Test subtraction
+        qs = DurationModel.objects.annotate(
+            duration_minus=F('duration') - datetime.timedelta(hours=1)
+        )
+        one_day = qs.get(name='one_day')
+        one_hour = qs.get(name='one_hour')
+        self.assertEqual(one_day.duration_minus, datetime.timedelta(hours=23))
+        self.assertEqual(one_hour.duration_minus, datetime.timedelta(0))
+
+    def test_duration_large_numbers(self):
+        """Test that duration field works with large numbers."""
+        # Use a smaller duration for SQLite compatibility
+        large_duration = datetime.timedelta(days=999999)
+        DurationModel.objects.create(
+            name='large_duration',
+            duration=large_duration,
+        )
+        obj = DurationModel.objects.annotate(
+            duration_plus=F('duration') + datetime.timedelta(days=1)
+        ).get(name='large_duration')
+        self.assertEqual(obj.duration_plus, large_duration + datetime.timedelta(days=1))
+
+    def test_duration_microseconds(self):
+        """Test that duration field works with microsecond precision."""
+        micro_duration = datetime.timedelta(microseconds=8999999)
+        DurationModel.objects.create(
+            name='micro_duration',
+            duration=micro_duration,
+        )
+        obj = DurationModel.objects.annotate(
+            duration_plus=F('duration') + datetime.timedelta(microseconds=1)
+        ).get(name='micro_duration')
+        self.assertEqual(obj.duration_plus, micro_duration + datetime.timedelta(microseconds=1))
\ No newline at end of file
