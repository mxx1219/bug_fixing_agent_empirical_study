diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 5240b07cd6..cabfd29854 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -7,6 +7,7 @@ from urllib.parse import quote as urlquote
 
 from django import forms
 from django.conf import settings
+from django.db import models
 from django.contrib import messages
 from django.contrib.admin import helpers, widgets
 from django.contrib.admin.checks import (
@@ -464,10 +465,17 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):
             # It is allowed to filter on values that would be found from local
             # model anyways. For example, if you filter on employee__department__id,
             # then the id value would be found already from employee__department_id.
-            if not prev_field or (
-                prev_field.is_relation
-                and field not in prev_field.path_infos[-1].target_fields
-            ):
+            # Always include the field if:
+            # 1. There is no previous field, or
+            # 2. Previous field is not a relation, or
+            # 3. Previous field is a relation and current field is not in its target fields
+            #    (except for concrete inheritance where we want to skip it), or
+            # 4. Previous field is a OneToOneField primary key (which should not be treated
+            #    as concrete inheritance)
+            if (not prev_field or
+                not prev_field.is_relation or
+                field not in prev_field.path_infos[-1].target_fields or
+                (isinstance(prev_field, models.OneToOneField) and prev_field.primary_key)):
                 relation_parts.append(part)
             if not getattr(field, "path_infos", None):
                 # This is not a relational field, so further parts
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..6677c5ab9b
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,107 @@
+from django.contrib import admin
+from django.conf import settings
+from django.db import models
+from django.test import TestCase
+
+settings.configure(
+    INSTALLED_APPS=[
+        'django.contrib.admin',
+        'django.contrib.auth',
+        'django.contrib.contenttypes',
+        'django.contrib.sessions',
+        'django.contrib.messages',
+        'django.contrib.staticfiles',
+        '__main__',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    }
+)
+import django
+django.setup()
+
+class Country(models.Model):
+    name = models.CharField(max_length=256)
+
+class Place(models.Model):
+    country = models.ForeignKey(Country, models.CASCADE)
+
+class Restaurant(models.Model):
+    place = models.OneToOneField(Place, models.CASCADE, primary_key=True)
+
+class Waiter(models.Model):
+    restaurant = models.ForeignKey(Restaurant, models.CASCADE)
+
+class WaiterAdmin(admin.ModelAdmin):
+    list_filter = [
+        'restaurant__place__country',
+    ]
+
+class AdminSite:
+    def __init__(self):
+        self._registry = {}
+
+def debug_lookup_allowed(self, lookup, value):
+    """Debug version of lookup_allowed"""
+    dots = lookup.split('.')
+    # Check if the lookup is allowed on the admin class
+    if lookup in self.list_filter:
+        return True
+
+    # Check ForeignKey lookups
+    parts = lookup.split(LOOKUP_SEP)
+    print(f"Parts: {parts}")
+
+    # Go through the parts of the lookup and build the list of relation parts.
+    relation_parts = []
+    prev_field = None
+    model = self.model
+    for i, part in enumerate(parts):
+        try:
+            field = model._meta.get_field(part)
+            print(f"Field: {field}")
+            if prev_field:
+                print(f"Prev field: {prev_field}")
+                print(f"Is relation: {prev_field.is_relation}")
+                if prev_field.is_relation:
+                    print(f"Target fields: {prev_field.path_infos[-1].target_fields}")
+                    print(f"Current field in target fields: {field in prev_field.path_infos[-1].target_fields}")
+                    print(f"Is OneToOne: {isinstance(prev_field, models.OneToOneField)}")
+                    print(f"Is primary key: {getattr(prev_field, 'primary_key', False)}")
+            
+            if not prev_field or (
+                not prev_field.is_relation or
+                field not in prev_field.path_infos[-1].target_fields or
+                isinstance(prev_field, models.OneToOneField)
+            ):
+                relation_parts.append(part)
+                print(f"Added {part} to relation_parts")
+            if not getattr(field, "path_infos", None):
+                break
+            prev_field = field
+            if hasattr(field, "path_infos"):
+                model = field.path_infos[-1].to_opts.model
+        except FieldDoesNotExist:
+            # Break out if the field does not exist
+            break
+
+    print(f"Final relation_parts: {relation_parts}")
+    print(f"List filter: {self.list_filter}")
+    print(f"LOOKUP_SEP.join(relation_parts): {LOOKUP_SEP.join(relation_parts)}")
+    
+    # The final part must be in list_filter
+    return LOOKUP_SEP.join(relation_parts) in self.list_filter
+
+if __name__ == '__main__':
+    from django.db.models.constants import LOOKUP_SEP
+    from django.core.exceptions import FieldDoesNotExist
+    
+    site = AdminSite()
+    ma = WaiterAdmin(Waiter, site)
+    # Monkey patch the lookup_allowed method
+    ma.lookup_allowed = debug_lookup_allowed.__get__(ma)
+    result = ma.lookup_allowed('restaurant__place__country', 'test_value')
+    print(f"Lookup allowed: {result}")  # Should be True but returns False
\ No newline at end of file
