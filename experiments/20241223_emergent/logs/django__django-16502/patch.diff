diff --git a/reproduce_head.py b/reproduce_head.py
new file mode 100644
index 0000000000..ef484e9157
--- /dev/null
+++ b/reproduce_head.py
@@ -0,0 +1,54 @@
+import os
+import sys
+import django
+from django.core.management import execute_from_command_line
+from django.http import HttpResponse
+from django.urls import path
+from django.conf import settings
+import threading
+import time
+import http.client
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='dummy',
+        ROOT_URLCONF=__name__,
+        MIDDLEWARE=[
+            'django.middleware.common.CommonMiddleware',
+        ],
+    )
+
+# Define a simple view
+def home(request):
+    response = HttpResponse("This is a very long response body that should be stripped for HEAD requests")
+    response['Content-Length'] = len(response.content)
+    return response
+
+# URL configuration
+urlpatterns = [
+    path('', home),
+]
+
+def make_head_request():
+    time.sleep(2)  # Wait for server to start
+    conn = http.client.HTTPConnection("127.0.0.1:8000")
+    conn.request("HEAD", "/")
+    response = conn.getresponse()
+    print("\nResponse Status:", response.status)
+    print("Headers:", response.getheaders())
+    body = response.read()
+    print("Body length:", len(body))
+    print("Body content:", body.decode() if body else "No body")
+    os._exit(0)  # Force exit after request
+
+if __name__ == "__main__":
+    # Start the test client in a separate thread
+    client_thread = threading.Thread(target=make_head_request)
+    client_thread.daemon = True
+    client_thread.start()
+    
+    # Start the development server
+    django.setup()
+    execute_from_command_line(['manage.py', 'runserver', '8000'])
\ No newline at end of file
