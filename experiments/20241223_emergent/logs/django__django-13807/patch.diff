diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py
index 2eeaf98c0d..97e9a1c3f9 100644
--- a/django/db/backends/sqlite3/base.py
+++ b/django/db/backends/sqlite3/base.py
@@ -327,13 +327,13 @@ class DatabaseWrapper(BaseDatabaseWrapper):
                     violations = cursor.execute('PRAGMA foreign_key_check').fetchall()
                 else:
                     violations = chain.from_iterable(
-                        cursor.execute('PRAGMA foreign_key_check(%s)' % table_name).fetchall()
+                        cursor.execute('PRAGMA foreign_key_check("%s")' % table_name).fetchall()
                         for table_name in table_names
                     )
                 # See https://www.sqlite.org/pragma.html#pragma_foreign_key_check
                 for table_name, rowid, referenced_table_name, foreign_key_index in violations:
                     foreign_key = cursor.execute(
-                        'PRAGMA foreign_key_list(%s)' % table_name
+                        'PRAGMA foreign_key_list("%s")' % table_name
                     ).fetchall()[foreign_key_index]
                     column_name, referenced_column_name = foreign_key[3:5]
                     primary_key_column_name = self.introspection.get_primary_key_column(cursor, table_name)
diff --git a/fixtures/test_data.json b/fixtures/test_data.json
new file mode 100644
index 0000000000..b5493b3b18
--- /dev/null
+++ b/fixtures/test_data.json
@@ -0,0 +1,9 @@
+[
+    {
+        "model": "myapp.order",
+        "pk": 1,
+        "fields": {
+            "name": "Test Order"
+        }
+    }
+]
\ No newline at end of file
diff --git a/myapp/__init__.py b/myapp/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/myapp/models.py b/myapp/models.py
new file mode 100644
index 0000000000..fa6c1be27a
--- /dev/null
+++ b/myapp/models.py
@@ -0,0 +1,4 @@
+from django.db import models
+
+class Order(models.Model):
+    name = models.CharField(max_length=100)
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..7f50a3b44c
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,99 @@
+import os
+import sqlite3
+import sys
+import django
+from django.conf import settings
+from django.db import models
+
+# Create a models.py file for our app
+os.makedirs('myapp', exist_ok=True)
+with open('myapp/__init__.py', 'w') as f:
+    f.write('')
+
+with open('myapp/models.py', 'w') as f:
+    f.write('''from django.db import models
+
+class Order(models.Model):
+    name = models.CharField(max_length=100)
+''')
+
+# Add the current directory to Python path
+sys.path.insert(0, os.path.abspath('.'))
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'myapp',
+    ],
+    MIDDLEWARE=[],
+    USE_TZ=False,
+)
+
+django.setup()
+
+# Now import Django components
+from django.core.management import call_command
+from django.test import TestCase
+from django.test.utils import override_settings
+from myapp.models import Order
+
+# Create a fixture for the Order model
+FIXTURE_DATA = '''[
+    {
+        "model": "myapp.order",
+        "pk": 1,
+        "fields": {
+            "name": "Test Order"
+        }
+    }
+]'''
+
+# Create a test case
+class LoadDataTest(TestCase):
+    def setUp(self):
+        # Create fixtures directory if it doesn't exist
+        if not os.path.exists('fixtures'):
+            os.makedirs('fixtures')
+        
+        # Create the fixture file
+        with open('fixtures/test_data.json', 'w') as f:
+            f.write(FIXTURE_DATA)
+
+    def test_loaddata(self):
+        # This should fail with the current implementation
+        call_command('loaddata', 'test_data.json')
+
+if __name__ == '__main__':
+    import sys
+    
+    # Create the test database
+    
+    # Create the test database
+    from django.db import connection
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(Order)
+    
+    # Create fixtures directory if it doesn't exist
+    if not os.path.exists('fixtures'):
+        os.makedirs('fixtures')
+    
+    # Create the fixture file
+    with open('fixtures/test_data.json', 'w') as f:
+        f.write(FIXTURE_DATA)
+    
+    # Try to load the fixture
+    try:
+        fixture_path = os.path.abspath('fixtures/test_data.json')
+        call_command('loaddata', fixture_path)
+        print("Successfully loaded fixture")
+    except Exception as e:
+        print("Error loading fixture:", str(e))
+        sys.exit(1)
\ No newline at end of file
