diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 28374272f4..81728a3c2a 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -516,17 +516,28 @@ class Field(RegisterLookupMixin):
     def __eq__(self, other):
         # Needed for @total_ordering
         if isinstance(other, Field):
-            return self.creation_counter == other.creation_counter
+            if not hasattr(self, 'model') or not hasattr(other, 'model'):
+                return self.creation_counter == other.creation_counter
+            return (self.creation_counter == other.creation_counter and
+                   self.model == other.model)
         return NotImplemented
 
     def __lt__(self, other):
         # This is needed because bisect does not take a comparison function.
         if isinstance(other, Field):
-            return self.creation_counter < other.creation_counter
+            # Order by creation_counter first to maintain backwards compatibility
+            if self.creation_counter != other.creation_counter:
+                return self.creation_counter < other.creation_counter
+            # If creation_counter is equal, order by model name
+            if hasattr(self, 'model') and hasattr(other, 'model'):
+                return self.model._meta.label < other.model._meta.label
+            return False
         return NotImplemented
 
     def __hash__(self):
-        return hash(self.creation_counter)
+        if not hasattr(self, 'model'):
+            return hash(self.creation_counter)
+        return hash((self.creation_counter, self.model._meta.label))
 
     def __deepcopy__(self, memodict):
         # We don't have to deepcopy very much here, since most things are not
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..153734d8fd
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,30 @@
+from django.db import models
+from django.conf import settings
+from django.apps import apps
+
+settings.configure(
+    INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth', 'django.contrib.admin'],
+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}}
+)
+apps.populate(['django.contrib.contenttypes', 'django.contrib.auth'])
+
+class A(models.Model):
+    class Meta:
+        abstract = True
+        app_label = 'django.contrib.admin'
+    myfield = models.IntegerField()
+
+class B(A):
+    pass
+
+class C(A):
+    pass
+
+# Get the fields
+b_field = B._meta.get_field('myfield')
+c_field = C._meta.get_field('myfield')
+
+# Test equality
+print("Fields equal?", b_field == c_field)
+print("Set length:", len({b_field, c_field}))
+print("Field models:", b_field.model.__name__, "vs", c_field.model.__name__)
\ No newline at end of file
