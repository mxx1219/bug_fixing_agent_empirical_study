diff --git a/django/core/servers/basehttp.py b/django/core/servers/basehttp.py
index 14dab517c9..512aca9af4 100644
--- a/django/core/servers/basehttp.py
+++ b/django/core/servers/basehttp.py
@@ -81,6 +81,14 @@ class ThreadedWSGIServer(socketserver.ThreadingMixIn, WSGIServer):
     """A threaded version of the WSGIServer"""
     daemon_threads = True
 
+    def process_request_thread(self, request, client_address):
+        """Override process_request_thread to close database connections when thread exits."""
+        from django.db import connections
+        try:
+            super().process_request_thread(request, client_address)
+        finally:
+            connections.close_all()
+
 
 class ServerHandler(simple_server.ServerHandler):
     http_version = '1.1'
diff --git a/test_db.sqlite3 b/test_db.sqlite3
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_liveserver.py b/test_liveserver.py
new file mode 100644
index 0000000000..2ef26685e3
--- /dev/null
+++ b/test_liveserver.py
@@ -0,0 +1,58 @@
+import os
+import django
+from django.test import LiveServerTestCase
+from django.db import connection
+import threading
+import requests
+import time
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+# Create a basic settings module
+settings_content = '''
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': 'test_db.sqlite3',
+    }
+}
+INSTALLED_APPS = [
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+]
+SECRET_KEY = 'dummy'
+'''
+
+with open('test_settings.py', 'w') as f:
+    f.write(settings_content)
+
+django.setup()
+
+class TestLiveServer(LiveServerTestCase):
+    def test_concurrent_requests(self):
+        """Test that concurrent requests don't leave open database connections."""
+        def make_request():
+            try:
+                response = requests.get(self.live_server_url + '/nonexistent')
+                print(f"Request completed with status {response.status_code}")
+            except Exception as e:
+                print(f"Request failed: {e}")
+
+        # Create multiple threads to simulate concurrent requests
+        threads = []
+        for i in range(5):
+            t = threading.Thread(target=make_request)
+            threads.append(t)
+            t.start()
+
+        # Wait for all threads to complete
+        for t in threads:
+            t.join()
+
+        # Sleep briefly to allow for any cleanup
+        time.sleep(1)
+
+if __name__ == '__main__':
+    import unittest
+    unittest.main()
\ No newline at end of file
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..5cce352d15
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,12 @@
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': 'test_db.sqlite3',
+    }
+}
+INSTALLED_APPS = [
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+]
+SECRET_KEY = 'dummy'
