diff --git a/django/db/models/query.py b/django/db/models/query.py
index 387deca527..b1dbdc9818 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -527,6 +527,7 @@ class QuerySet:
     def bulk_update(self, objs, fields, batch_size=None):
         """
         Update the given fields in each of the given objects in the database.
+        Returns the number of rows matched by the update.
         """
         if batch_size is not None and batch_size < 0:
             raise ValueError('Batch size must be a positive integer.')
@@ -541,7 +542,7 @@ class QuerySet:
         if any(f.primary_key for f in fields):
             raise ValueError('bulk_update() cannot be used with primary key fields.')
         if not objs:
-            return
+            return 0
         # PK is used twice in the resulting update query, once in the filter
         # and once in the WHEN. Each field will also have one CAST.
         max_batch_size = connections[self.db].ops.bulk_batch_size(['pk', 'pk'] + fields, objs)
@@ -563,9 +564,11 @@ class QuerySet:
                     case_statement = Cast(case_statement, output_field=field)
                 update_kwargs[field.attname] = case_statement
             updates.append(([obj.pk for obj in batch_objs], update_kwargs))
+        rows_matched = 0
         with transaction.atomic(using=self.db, savepoint=False):
             for pks, update_kwargs in updates:
-                self.filter(pk__in=pks).update(**update_kwargs)
+                rows_matched += self.filter(pk__in=pks).update(**update_kwargs)
+        return rows_matched
     bulk_update.alters_data = True
 
     def get_or_create(self, defaults=None, **kwargs):
diff --git a/tests/update/tests.py b/tests/update/tests.py
index a90f0f8323..feafd9e5b7 100644
--- a/tests/update/tests.py
+++ b/tests/update/tests.py
@@ -219,10 +219,36 @@ class AdvancedTests(TestCase):
                         ).update(name=F('new_name'))
 
 
-@unittest.skipUnless(
-    connection.vendor == 'mysql',
-    'UPDATE...ORDER BY syntax is supported on MySQL/MariaDB',
-)
+class BulkUpdateReturnValueTests(TestCase):
+    """Test that bulk_update() returns the number of rows matched."""
+
+    @classmethod
+    def setUpTestData(cls):
+        cls.dp1 = DataPoint.objects.create(name="dp1", value="value1")
+        cls.dp2 = DataPoint.objects.create(name="dp2", value="value2")
+        cls.dp3 = DataPoint.objects.create(name="dp3", value="value3")
+
+    def test_bulk_update_returns_matched_rows(self):
+        """bulk_update() should return the number of rows matched."""
+        objects = list(DataPoint.objects.all())
+        for obj in objects:
+            obj.value = "new_value"
+        rows = DataPoint.objects.bulk_update(objects, ["value"])
+        self.assertEqual(rows, 3)
+
+    def test_bulk_update_returns_zero_for_empty_list(self):
+        """bulk_update() should return 0 when no objects are provided."""
+        rows = DataPoint.objects.bulk_update([], ["value"])
+        self.assertEqual(rows, 0)
+
+    def test_bulk_update_returns_correct_count_with_batch_size(self):
+        """bulk_update() should return correct count when using batch_size."""
+        objects = list(DataPoint.objects.all())
+        for obj in objects:
+            obj.value = "new_value"
+        rows = DataPoint.objects.bulk_update(objects, ["value"], batch_size=1)
+        self.assertEqual(rows, 3)
+
 class MySQLUpdateOrderByTest(TestCase):
     """Update field with a unique constraint using an ordered queryset."""
     @classmethod
