diff --git a/django/core/validators.py b/django/core/validators.py
index 92394a7eae..c7a212c168 100644
--- a/django/core/validators.py
+++ b/django/core/validators.py
@@ -94,7 +94,7 @@ class URLValidator(RegexValidator):
 
     regex = _lazy_re_compile(
         r'^(?:[a-z0-9\.\-\+]*)://'  # scheme is validated separately
-        r'(?:\S+(?::\S*)?@)?'  # user:pass authentication
+        r'(?:(?:[a-zA-Z0-9\-._~!$&\'()*+,;=%]|%[0-9A-Fa-f]{2})+(?::(?:[a-zA-Z0-9\-._~!$&\'()*+,;=%]|%[0-9A-Fa-f]{2})*)?@)?'  # user:pass authentication
         r'(?:' + ipv4_re + '|' + ipv6_re + '|' + host_re + ')'
         r'(?::\d{2,5})?'  # port
         r'(?:[/?#][^\s]*)?'  # resource path
diff --git a/test_url_validator.py b/test_url_validator.py
new file mode 100644
index 0000000000..9312afd5dc
--- /dev/null
+++ b/test_url_validator.py
@@ -0,0 +1,40 @@
+from django.core.validators import URLValidator
+from django.core.exceptions import ValidationError
+
+def test_url_validation():
+    validator = URLValidator()
+    
+    # These URLs should be invalid according to RFC 1738
+    invalid_urls = [
+        'http://foo/bar@example.com',  # Unencoded / and @ in username
+        'http://foo:pass@bar@example.com',  # Unencoded @ in password
+        'http://foo:pa/ss@example.com',  # Unencoded / in password
+        'http://foo:pa:ss@example.com',  # Unencoded : in password
+    ]
+    
+    # These URLs should be valid (with properly encoded special chars)
+    valid_urls = [
+        'http://foo%2Fbar%40example.com',  # Encoded / and @ in username
+        'http://foo:pass%40bar@example.com',  # Encoded @ in password
+        'http://foo:pa%2Fss@example.com',  # Encoded / in password
+        'http://foo:pa%3Ass@example.com',  # Encoded : in password
+    ]
+    
+    print("Testing invalid URLs (these should fail but currently pass):")
+    for url in invalid_urls:
+        try:
+            validator(url)
+            print("FAIL: {} - Validation passed but should have failed".format(url))
+        except ValidationError:
+            print("PASS: {} - Correctly failed validation".format(url))
+            
+    print("\nTesting valid URLs (these should pass):")
+    for url in valid_urls:
+        try:
+            validator(url)
+            print("PASS: {} - Correctly passed validation".format(url))
+        except ValidationError:
+            print("FAIL: {} - Validation failed but should have passed".format(url))
+
+if __name__ == '__main__':
+    test_url_validation()
\ No newline at end of file
