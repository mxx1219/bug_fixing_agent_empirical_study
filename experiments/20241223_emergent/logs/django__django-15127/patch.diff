diff --git a/django/contrib/messages/storage/base.py b/django/contrib/messages/storage/base.py
index 01422066a6..051cdc4cd8 100644
--- a/django/contrib/messages/storage/base.py
+++ b/django/contrib/messages/storage/base.py
@@ -1,7 +1,13 @@
 from django.conf import settings
 from django.contrib.messages import constants, utils
 
-LEVEL_TAGS = utils.get_level_tags()
+def get_level_tags():
+    """
+    Return the message level tags.
+    This is a function rather than module-level constant to handle
+    runtime changes of settings.
+    """
+    return utils.get_level_tags()
 
 
 class Message:
@@ -38,7 +44,7 @@ class Message:
 
     @property
     def level_tag(self):
-        return LEVEL_TAGS.get(self.level, '')
+        return get_level_tags().get(self.level, '')
 
 
 class BaseStorage:
diff --git a/test_messages.py b/test_messages.py
new file mode 100644
index 0000000000..27c492fe60
--- /dev/null
+++ b/test_messages.py
@@ -0,0 +1,25 @@
+from django.test import TestCase, override_settings
+from django.contrib.messages import constants
+from django.contrib.messages.storage.base import Message
+
+class MessageTagsTest(TestCase):
+    def test_level_tags_with_override_settings(self):
+        # Create a message with level INFO
+        message = Message(level=constants.INFO, message="Test message")
+        
+        # By default, INFO maps to "info"
+        self.assertEqual(message.level_tag, "info")
+        
+        # Override the MESSAGE_TAGS setting
+        with override_settings(MESSAGE_TAGS={constants.INFO: 'custom_info'}):
+            # Now INFO should map to "custom_info"
+            self.assertEqual(message.level_tag, "custom_info")
+
+if __name__ == '__main__':
+    import django
+    django.setup()
+    
+    # Run the test
+    test = MessageTagsTest()
+    test.test_level_tags_with_override_settings()
+    print("Test passed successfully!")
\ No newline at end of file
