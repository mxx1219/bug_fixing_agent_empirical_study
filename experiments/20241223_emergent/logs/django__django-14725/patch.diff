diff --git a/django/forms/formsets.py b/django/forms/formsets.py
index 75b0646512..588b7a7ad2 100644
--- a/django/forms/formsets.py
+++ b/django/forms/formsets.py
@@ -342,6 +342,11 @@ class BaseFormSet(RenderableFormMixin):
         """Return True if every form in self.forms is valid."""
         if not self.is_bound:
             return False
+        # If allow_new is False, reject any form that doesn't have an instance
+        if hasattr(self, 'allow_new') and not self.allow_new:
+            for form in self.forms[self.initial_form_count():]:
+                if form.is_bound and form.has_changed():
+                    return False
         # Accessing errors triggers a full clean the first time only.
         self.errors
         # List comprehension ensures is_valid() is called for all forms.
diff --git a/django/forms/models.py b/django/forms/models.py
index 7effb202e3..818cdd4fec 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -573,9 +573,12 @@ class BaseModelFormSet(BaseFormSet):
     unique_fields = set()
 
     def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,
-                 queryset=None, *, initial=None, **kwargs):
+                 queryset=None, *, initial=None, allow_new=True, **kwargs):
         self.queryset = queryset
         self.initial_extra = initial
+        self.allow_new = allow_new
+        if not allow_new:
+            kwargs['extra'] = 0
         super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})
 
     def initial_form_count(self):
@@ -599,6 +602,9 @@ class BaseModelFormSet(BaseFormSet):
         return field.to_python
 
     def _construct_form(self, i, **kwargs):
+        # Check if this is a new form and new objects are not allowed
+        if not getattr(self, 'allow_new', True) and i >= self.initial_form_count():
+            return None
         pk_required = i < self.initial_form_count()
         if pk_required:
             if self.is_bound:
@@ -627,6 +633,9 @@ class BaseModelFormSet(BaseFormSet):
                 kwargs['initial'] = self.initial_extra[i - self.initial_form_count()]
             except IndexError:
                 pass
+        # If allow_new is False and this is an extra form, prevent new object creation
+        if not getattr(self, 'allow_new', True) and not pk_required:
+            return None
         form = super()._construct_form(i, **kwargs)
         if pk_required:
             form.fields[self.model._meta.pk.name].required = True
@@ -875,7 +884,8 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,
                          widgets=None, validate_max=False, localized_fields=None,
                          labels=None, help_texts=None, error_messages=None,
                          min_num=None, validate_min=False, field_classes=None,
-                         absolute_max=None, can_delete_extra=True, renderer=None):
+                         absolute_max=None, can_delete_extra=True, renderer=None,
+                         allow_new=True):
     """Return a FormSet class for the given Django model class."""
     meta = getattr(form, 'Meta', None)
     if (getattr(meta, 'fields', fields) is None and
@@ -896,6 +906,7 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,
                               absolute_max=absolute_max, can_delete_extra=can_delete_extra,
                               renderer=renderer)
     FormSet.model = model
+    FormSet.allow_new = allow_new
     return FormSet
 
 
diff --git a/test_formset.py b/test_formset.py
new file mode 100644
index 0000000000..37b5d40f59
--- /dev/null
+++ b/test_formset.py
@@ -0,0 +1,89 @@
+import os
+import django
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+        INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth', '__main__'],
+        MIDDLEWARE=[],
+        ROOT_URLCONF=[],
+        SILENCED_SYSTEM_CHECKS=['models.E023'],  # Silence the warning about not having migrations
+    )
+    django.setup()
+
+from django.db import models
+from django.forms import modelformset_factory
+from django.test import TestCase
+
+class Author(models.Model):
+    name = models.CharField(max_length=100)
+
+    def __str__(self):
+        return self.name
+
+class TestModelFormSet(TestCase):
+    def setUp(self):
+        self.author1 = Author.objects.create(name="Author 1")
+        self.author2 = Author.objects.create(name="Author 2")
+
+    def test_allow_new_objects(self):
+        AuthorFormSet = modelformset_factory(Author, fields=['name'], extra=1)
+        formset = AuthorFormSet(queryset=Author.objects.all())
+        self.assertEqual(len(formset.forms), 3)  # 2 existing + 1 extra
+        
+        # Test that we can add a new author
+        data = {
+            'form-TOTAL_FORMS': '3',
+            'form-INITIAL_FORMS': '2',
+            'form-MIN_NUM_FORMS': '0',
+            'form-MAX_NUM_FORMS': '1000',
+            'form-0-id': str(self.author1.id),
+            'form-0-name': 'Author 1',
+            'form-1-id': str(self.author2.id),
+            'form-1-name': 'Author 2',
+            'form-2-id': '',
+            'form-2-name': 'New Author',
+        }
+        formset = AuthorFormSet(data)
+        self.assertTrue(formset.is_valid())
+        formset.save()
+        self.assertEqual(Author.objects.count(), 3)
+
+    def test_disallow_new_objects(self):
+        AuthorFormSet = modelformset_factory(Author, fields=['name'], extra=1, allow_new=False)
+        formset = AuthorFormSet(queryset=Author.objects.all())
+        self.assertEqual(len(formset.forms), 2)  # Only existing forms, no extra
+        
+        # Test that we cannot add a new author
+        data = {
+            'form-TOTAL_FORMS': '3',
+            'form-INITIAL_FORMS': '2',
+            'form-MIN_NUM_FORMS': '0',
+            'form-MAX_NUM_FORMS': '1000',
+            'form-0-id': str(self.author1.id),
+            'form-0-name': 'Author 1',
+            'form-1-id': str(self.author2.id),
+            'form-1-name': 'Author 2',
+            'form-2-id': '',
+            'form-2-name': 'New Author',
+        }
+        formset = AuthorFormSet(data)
+        self.assertFalse(formset.is_valid())  # Should fail validation
+        self.assertEqual(Author.objects.count(), 2)  # No new authors added
+
+if __name__ == '__main__':
+    import django
+    from django.conf import settings
+    settings.configure(
+        DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+        INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth'],
+    )
+    django.setup()
+    from django.test.runner import DiscoverRunner
+    test_runner = DiscoverRunner(verbosity=2)
+    failures = test_runner.run_tests(['__main__'])
+    if failures:
+        print("Tests failed!")
+    else:
+        print("All tests passed!")
\ No newline at end of file
diff --git a/test_project/formset_test/__init__.py b/test_project/formset_test/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_project/formset_test/models.py b/test_project/formset_test/models.py
new file mode 100644
index 0000000000..677a7f940b
--- /dev/null
+++ b/test_project/formset_test/models.py
@@ -0,0 +1,7 @@
+from django.db import models
+
+class Author(models.Model):
+    name = models.CharField(max_length=100)
+
+    def __str__(self):
+        return self.name
\ No newline at end of file
diff --git a/test_project/formset_test/tests.py b/test_project/formset_test/tests.py
new file mode 100644
index 0000000000..761fbddc2c
--- /dev/null
+++ b/test_project/formset_test/tests.py
@@ -0,0 +1,53 @@
+from django.test import TestCase
+from django.forms import modelformset_factory
+from .models import Author
+
+class TestModelFormSet(TestCase):
+    def setUp(self):
+        self.author1 = Author.objects.create(name="Author 1")
+        self.author2 = Author.objects.create(name="Author 2")
+
+    def test_allow_new_objects(self):
+        AuthorFormSet = modelformset_factory(Author, fields=['name'], extra=1)
+        formset = AuthorFormSet(queryset=Author.objects.all())
+        self.assertEqual(len(formset.forms), 3)  # 2 existing + 1 extra
+        
+        # Test that we can add a new author
+        data = {
+            'form-TOTAL_FORMS': '3',
+            'form-INITIAL_FORMS': '2',
+            'form-MIN_NUM_FORMS': '0',
+            'form-MAX_NUM_FORMS': '1000',
+            'form-0-id': str(self.author1.id),
+            'form-0-name': 'Author 1',
+            'form-1-id': str(self.author2.id),
+            'form-1-name': 'Author 2',
+            'form-2-id': '',
+            'form-2-name': 'New Author',
+        }
+        formset = AuthorFormSet(data)
+        self.assertTrue(formset.is_valid())
+        formset.save()
+        self.assertEqual(Author.objects.count(), 3)
+
+    def test_disallow_new_objects(self):
+        AuthorFormSet = modelformset_factory(Author, fields=['name'], extra=1, allow_new=False)
+        formset = AuthorFormSet(queryset=Author.objects.all())
+        self.assertEqual(len(formset.forms), 2)  # Only existing forms, no extra
+        
+        # Test that we cannot add a new author
+        data = {
+            'form-TOTAL_FORMS': '3',
+            'form-INITIAL_FORMS': '2',
+            'form-MIN_NUM_FORMS': '0',
+            'form-MAX_NUM_FORMS': '1000',
+            'form-0-id': str(self.author1.id),
+            'form-0-name': 'Author 1',
+            'form-1-id': str(self.author2.id),
+            'form-1-name': 'Author 2',
+            'form-2-id': '',
+            'form-2-name': 'New Author',
+        }
+        formset = AuthorFormSet(data)
+        self.assertFalse(formset.is_valid())  # Should fail validation
+        self.assertEqual(Author.objects.count(), 2)  # No new authors added
\ No newline at end of file
diff --git a/test_project/manage.py b/test_project/manage.py
new file mode 100644
index 0000000000..279e0aab36
--- /dev/null
+++ b/test_project/manage.py
@@ -0,0 +1,22 @@
+#!/usr/bin/env python
+import os
+import sys
+
+if __name__ == "__main__":
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "test_project.settings")
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError:
+        # The above import may fail for some other reason. Ensure that the
+        # issue is really that Django is missing to avoid masking other
+        # exceptions on Python 2.
+        try:
+            import django
+        except ImportError:
+            raise ImportError(
+                "Couldn't import Django. Are you sure it's installed and "
+                "available on your PYTHONPATH environment variable? Did you "
+                "forget to activate a virtual environment?"
+            )
+        raise
+    execute_from_command_line(sys.argv)
\ No newline at end of file
diff --git a/test_project/test_project/__init__.py b/test_project/test_project/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_project/test_project/settings.py b/test_project/test_project/settings.py
new file mode 100644
index 0000000000..c26daf582e
--- /dev/null
+++ b/test_project/test_project/settings.py
@@ -0,0 +1,61 @@
+import os
+
+BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
+
+SECRET_KEY = 'dummy-key-for-tests'
+
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+INSTALLED_APPS = [
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+    'formset_test',
+]
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+ROOT_URLCONF = 'test_project.urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
+    }
+}
+
+LANGUAGE_CODE = 'en-us'
+TIME_ZONE = 'UTC'
+USE_I18N = True
+USE_L10N = True
+USE_TZ = True
+
+STATIC_URL = '/static/'
\ No newline at end of file
diff --git a/test_project/test_project/urls.py b/test_project/test_project/urls.py
new file mode 100644
index 0000000000..a848dfb64f
--- /dev/null
+++ b/test_project/test_project/urls.py
@@ -0,0 +1,3 @@
+from django.urls import path
+
+urlpatterns = []
\ No newline at end of file
