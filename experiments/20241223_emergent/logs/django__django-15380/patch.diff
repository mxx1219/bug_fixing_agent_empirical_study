diff --git a/.gitignore b/.gitignore
index 238fb3a200..975c5364d8 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,6 @@ tests/coverage_html/
 tests/.coverage
 build/
 tests/report/
+*__pycache__*
+*venv*
+*_build*
diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py
index bf9c2acd26..f1238a3504 100644
--- a/django/db/migrations/autodetector.py
+++ b/django/db/migrations/autodetector.py
@@ -824,7 +824,7 @@ class MigrationAutodetector:
         for app_label, model_name, field_name in sorted(self.new_field_keys - self.old_field_keys):
             old_model_name = self.renamed_models.get((app_label, model_name), model_name)
             old_model_state = self.from_state.models[app_label, old_model_name]
-            new_model_state = self.to_state.models[app_label, old_model_name]
+            new_model_state = self.to_state.models[app_label, model_name]
             field = new_model_state.get_field(field_name)
             # Scan to see if this is actually a rename!
             field_dec = self.deep_deconstruct(field)
diff --git a/test_app/__init__.py b/test_app/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_rename.py b/test_rename.py
new file mode 100644
index 0000000000..59ca0108b3
--- /dev/null
+++ b/test_rename.py
@@ -0,0 +1,95 @@
+import os
+import sys
+from django.db import models
+from django.db.migrations.state import ProjectState
+from django.db.migrations.autodetector import MigrationAutodetector
+from django.db.migrations.questioner import MigrationQuestioner
+from django.conf import settings
+import django
+
+# Create test_app package
+os.makedirs('test_app', exist_ok=True)
+with open('test_app/__init__.py', 'w') as f:
+    f.write('')
+
+# Add current directory to Python path
+sys.path.insert(0, os.getcwd())
+
+# Configure Django settings
+settings.configure(
+    INSTALLED_APPS=['test_app'],
+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3'}},
+)
+
+# Setup Django
+django.setup()
+
+from django.db.migrations.state import ModelState
+
+# Create old state
+old_state = ProjectState()
+old_state.add_model(ModelState(
+    'test_app',
+    'MyModel',
+    [('old_field', models.CharField(max_length=100))],
+    {
+        'db_table': 'myapp_model',
+        'indexes': [],
+        'constraints': [],
+        'unique_together': None,
+        'index_together': None,
+        'order_with_respect_to': None,
+    },
+    None,
+))
+
+# Create new state
+new_state = ProjectState()
+new_state.add_model(ModelState(
+    'test_app',
+    'MyModel2',
+    [('new_field', models.CharField(max_length=100))],
+    {
+        'db_table': 'myapp_model',
+        'indexes': [],
+        'constraints': [],
+        'unique_together': None,
+        'index_together': None,
+        'order_with_respect_to': None,
+    },
+    None,
+))
+
+# Create questioner that always answers "yes" to rename questions
+class AutoYesQuestioner(MigrationQuestioner):
+    def ask_rename(self, model_name=None, old_name=None, new_name=None, field=None):
+        return True
+
+# Create empty migration graph
+from django.db.migrations.graph import MigrationGraph
+graph = MigrationGraph()
+
+# Run the autodetector
+detector = MigrationAutodetector(
+    old_state,
+    new_state,
+    questioner=AutoYesQuestioner()
+)
+
+# Initialize internal state
+detector._detect_changes(graph)
+
+print("\nOld model keys:", detector.old_model_keys)
+print("New model keys:", detector.new_model_keys)
+print("Old field keys:", detector.old_field_keys)
+print("New field keys:", detector.new_field_keys)
+
+changes = detector.changes(graph)
+
+print("\nChanges detected:")
+for app_label, migrations in changes.items():
+    print(f"\nApp: {app_label}")
+    for migration in migrations:
+        print("\nOperations:")
+        for operation in migration.operations:
+            print(f"  {operation.__class__.__name__}: {operation.describe()}")
\ No newline at end of file
