diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index 982816be3a..c316cde766 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -320,6 +320,11 @@ class RenameModel(ModelOperation):
         new_model = to_state.apps.get_model(app_label, self.new_name)
         if self.allow_migrate_model(schema_editor.connection.alias, new_model):
             old_model = from_state.apps.get_model(app_label, self.old_name)
+            # If both models have explicit db_table and they match, skip all operations
+            old_db_table = getattr(old_model._meta, 'db_table', None)
+            new_db_table = getattr(new_model._meta, 'db_table', None)
+            if old_db_table and new_db_table and old_db_table == new_db_table:
+                return
             # Move the main table
             schema_editor.alter_db_table(
                 new_model,
diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py
index 11961a1f40..af39288a25 100644
--- a/tests/migrations/test_operations.py
+++ b/tests/migrations/test_operations.py
@@ -764,6 +764,68 @@ class OperationTests(OperationTestBase):
         pony = Pony.objects.create()
         pony.ponies.add(pony)
 
+    def test_rename_model_with_same_db_table(self):
+        """
+        Test RenameModel operation with same db_table on both models.
+        A RenameModel operation that already has db_table defined must be a noop.
+        """
+        app_label = "test_rename_model_same_db"
+        project_state = self.set_up_test_model(app_label)
+        # Create initial model
+        project_state = self.apply_operations(app_label, project_state, operations=[
+            migrations.CreateModel(
+                "MyModel",
+                [
+                    ("id", models.AutoField(primary_key=True)),
+                    ("data", models.CharField(max_length=100)),
+                ],
+                options={"db_table": "custom_db_table"},
+            ),
+        ])
+        # Create a clone of the state with renamed model
+        new_state = project_state.clone()
+        operation = migrations.RenameModel("MyModel", "NewModel")
+        operation.state_forwards(app_label, new_state)
+        
+        # Get the number of queries during the rename
+        with connection.schema_editor() as editor:
+            with CaptureQueriesContext(connection) as ctx:
+                operation.database_forwards(app_label, editor, project_state, new_state)
+                # Should be no queries since both models use the same db_table
+                self.assertEqual(len(ctx), 0)
+
+    def test_rename_model_with_different_db_table(self):
+        """
+        Test RenameModel operation with different db_table values.
+        When db_table values are different, the operation should proceed normally.
+        """
+        app_label = "test_rename_model_diff_db"
+        project_state = self.set_up_test_model(app_label)
+        # Create initial model
+        project_state = self.apply_operations(app_label, project_state, operations=[
+            migrations.CreateModel(
+                "MyModel",
+                [
+                    ("id", models.AutoField(primary_key=True)),
+                    ("data", models.CharField(max_length=100)),
+                ],
+                options={"db_table": "old_table"},
+            ),
+        ])
+        # Create a clone of the state with renamed model and different db_table
+        new_state = project_state.clone()
+        operation = migrations.RenameModel("MyModel", "NewModel")
+        operation.state_forwards(app_label, new_state)
+        new_model = new_state.apps.get_model(app_label, "NewModel")
+        new_model._meta.db_table = "new_table"  # Force different db_table
+        
+        # Get the number of queries during the rename
+        with connection.schema_editor() as editor:
+            with CaptureQueriesContext(connection) as ctx:
+                operation.database_forwards(app_label, editor, project_state, new_state)
+                # Should have queries since db_table values are different
+                self.assertGreater(len(ctx), 0)
+
     def test_rename_model_with_m2m(self):
         app_label = "test_rename_model_with_m2m"
         project_state = self.apply_operations(app_label, ProjectState(), operations=[
