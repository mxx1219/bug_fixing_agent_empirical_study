diff --git a/django/db/migrations/executor.py b/django/db/migrations/executor.py
index 57042a8690..171cefa6b3 100644
--- a/django/db/migrations/executor.py
+++ b/django/db/migrations/executor.py
@@ -263,7 +263,8 @@ class MigrationExecutor:
 
     def check_replacements(self):
         """
-        Mark replacement migrations applied if their replaced set all are.
+        Mark replacement migrations applied if their replaced set all are,
+        and mark them unapplied if their replaced set are all unapplied.
 
         Do this unconditionally on every migrate, rather than just when
         migrations are applied or unapplied, to correctly handle the case
@@ -275,8 +276,14 @@ class MigrationExecutor:
         applied = self.recorder.applied_migrations()
         for key, migration in self.loader.replacements.items():
             all_applied = all(m in applied for m in migration.replaces)
+            none_applied = all(m not in applied for m in migration.replaces)
+            
             if all_applied and key not in applied:
+                # Mark squashed migration as applied if all replaced migrations are applied
                 self.recorder.record_applied(*key)
+            elif none_applied and key in applied:
+                # Mark squashed migration as unapplied if all replaced migrations are unapplied
+                self.recorder.record_unapplied(*key)
 
     def detect_soft_applied(self, project_state, migration):
         """
diff --git a/reproduce_squash_issue.py b/reproduce_squash_issue.py
new file mode 100644
index 0000000000..2e7b1f4438
--- /dev/null
+++ b/reproduce_squash_issue.py
@@ -0,0 +1,66 @@
+import os
+import django
+from django.db import connection
+from django.db.migrations.executor import MigrationExecutor
+from django.db.migrations.recorder import MigrationRecorder
+from django.db.migrations import Migration
+
+# Setup Django
+os.environ['DJANGO_SETTINGS_MODULE'] = 'tests.test_sqlite'
+django.setup()
+
+# Create a recorder and executor
+recorder = MigrationRecorder(connection)
+executor = MigrationExecutor(connection)
+
+# Ensure migrations table exists
+recorder.ensure_schema()
+
+# Create mock migrations
+class MockMigration(Migration):
+    def __init__(self, name, app_label='testapp', replaces=None):
+        self.name = name
+        self.app_label = app_label
+        self.replaces = replaces or []
+        self.operations = []
+        self.dependencies = []
+
+# Create our migrations
+migration_0001 = MockMigration('0001')
+migration_0002 = MockMigration('0002')
+migration_0003 = MockMigration('0003')
+migration_squashed = MockMigration('0001_squashed_0003', replaces=[
+    ('testapp', '0001'),
+    ('testapp', '0002'),
+    ('testapp', '0003')
+])
+
+# Add migrations to loader
+executor.loader.graph.add_node(('testapp', '0001'), migration_0001)
+executor.loader.graph.add_node(('testapp', '0002'), migration_0002)
+executor.loader.graph.add_node(('testapp', '0003'), migration_0003)
+executor.loader.graph.add_node(('testapp', '0001_squashed_0003'), migration_squashed)
+executor.loader.replacements[('testapp', '0001_squashed_0003')] = migration_squashed
+
+# Record initial state
+recorder.record_applied('testapp', '0001')
+recorder.record_applied('testapp', '0002')
+recorder.record_applied('testapp', '0003')
+recorder.record_applied('testapp', '0001_squashed_0003')
+
+print("Initial state:")
+print(recorder.applied_migrations())
+
+# Now unapply the replaced migrations
+recorder.record_unapplied('testapp', '0001')
+recorder.record_unapplied('testapp', '0002')
+recorder.record_unapplied('testapp', '0003')
+
+print("\nAfter unapplying replaced migrations:")
+print(recorder.applied_migrations())
+
+# Run check_replacements to update the state
+executor.check_replacements()
+
+print("\nAfter check_replacements:")
+print(recorder.applied_migrations())
\ No newline at end of file
diff --git a/test.db b/test.db
new file mode 100644
index 0000000000..de4283fe0e
Binary files /dev/null and b/test.db differ
diff --git a/tests/test_sqlite.py b/tests/test_sqlite.py
index e1252f5f7d..df3f0bdfbc 100644
--- a/tests/test_sqlite.py
+++ b/tests/test_sqlite.py
@@ -15,9 +15,11 @@
 DATABASES = {
     'default': {
         'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': 'test.db',
     },
     'other': {
         'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': 'test_other.db',
     }
 }
 
