diff --git a/astropy/timeseries/core.py b/astropy/timeseries/core.py
index c279f35f87..e33ef49688 100644
--- a/astropy/timeseries/core.py
+++ b/astropy/timeseries/core.py
@@ -69,16 +69,17 @@ class BaseTimeSeries(QTable):
             plural = 's' if len(required_columns) > 1 else ''
 
             if not self._required_columns_relax and len(self.colnames) == 0:
-
-                raise ValueError("{} object is invalid - expected '{}' "
-                                 "as the first column{} but time series has no columns"
-                                 .format(self.__class__.__name__, required_columns[0], plural))
+                raise ValueError("{} object is invalid - missing required columns: {}"
+                               .format(self.__class__.__name__, ", ".join(required_columns)))
 
             elif self.colnames[:len(required_columns)] != required_columns:
-
-                raise ValueError("{} object is invalid - expected '{}' "
-                                 "as the first column{} but found '{}'"
-                                 .format(self.__class__.__name__, required_columns[0], plural, self.colnames[0]))
+                missing = [col for col in required_columns if col not in self.colnames]
+                if missing:
+                    raise ValueError("{} object is invalid - missing required columns: {}"
+                                   .format(self.__class__.__name__, ", ".join(missing)))
+                else:
+                    raise ValueError("{} object is invalid - columns must be in order: {}"
+                                   .format(self.__class__.__name__, ", ".join(required_columns)))
 
             if (self._required_columns_relax
                     and self._required_columns == self.colnames[:len(self._required_columns)]):
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..03d6e4d978
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,8 @@
+import numpy as np
+from astropy.time import Time
+from astropy.timeseries import TimeSeries
+
+time = Time(np.arange(100000, 100003), format='jd')
+ts = TimeSeries(time=time, data={"flux": [99.9, 99.8, 99.7]})
+ts._required_columns = ["time", "flux"]
+ts.remove_column("flux")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..4eacbe9054
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,29 @@
+import numpy as np
+from astropy.time import Time
+from astropy.timeseries import TimeSeries
+
+# Test case 1: Empty TimeSeries with required columns
+ts1 = TimeSeries()
+ts1._required_columns = ["time", "flux"]
+try:
+    ts1._check_required_columns()
+except ValueError as e:
+    print("Test 1 (empty table):", e)
+
+# Test case 2: Wrong order of columns
+time = Time(np.arange(100000, 100003), format='jd')
+ts2 = TimeSeries(time=time, data={"flux": [99.9, 99.8, 99.7]})
+ts2._required_columns = ["flux", "time"]  # Requiring different order
+try:
+    ts2._check_required_columns()
+except ValueError as e:
+    print("\nTest 2 (wrong order):", e)
+
+# Test case 3: Multiple missing columns
+time = Time(np.arange(100000, 100003), format='jd')
+ts3 = TimeSeries(time=time)
+ts3._required_columns = ["time", "flux", "error"]
+try:
+    ts3._check_required_columns()
+except ValueError as e:
+    print("\nTest 3 (multiple missing):", e)
\ No newline at end of file
