diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
index 247e3680c0..8aed0a3aee 100644
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -63,10 +63,19 @@ class ResolverMatch:
         )
 
 
+def _get_urlconf_value(urlconf):
+    """Get the actual urlconf value, resolving None to settings.ROOT_URLCONF."""
+    return settings.ROOT_URLCONF if urlconf is None else urlconf
+
 @functools.lru_cache(maxsize=None)
 def get_resolver(urlconf=None):
-    if urlconf is None:
-        urlconf = settings.ROOT_URLCONF
+    """
+    Return a URLResolver instance for the specified urlconf.
+    If urlconf is None, the default ROOT_URLCONF setting is used.
+    The result is cached based on the actual urlconf value to avoid
+    creating multiple resolvers for the same configuration.
+    """
+    urlconf = _get_urlconf_value(urlconf)
     return URLResolver(RegexPattern(r'^/'), urlconf)
 
 
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..d8c154d6c1
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,26 @@
+from django.conf import settings
+from django.urls.resolvers import get_resolver, _get_urlconf_value
+from django.urls.base import set_urlconf
+
+# Configure Django settings
+settings.configure(
+    ROOT_URLCONF='myapp.urls',
+    DEBUG=True,
+)
+
+# First call with None
+resolver1 = get_resolver(None)
+print("First resolver urlconf:", resolver1.urlconf_name)
+
+# Second call with explicit ROOT_URLCONF
+resolver2 = get_resolver(settings.ROOT_URLCONF)
+print("Second resolver urlconf:", resolver2.urlconf_name)
+
+# Show that they're the same object (cache hit)
+print("Are resolvers the same object?", resolver1 is resolver2)
+
+# Show that _get_urlconf_value normalizes the inputs
+print("\nURL conf value normalization:")
+print("None ->", _get_urlconf_value(None))
+print("ROOT_URLCONF ->", _get_urlconf_value(settings.ROOT_URLCONF))
+print("Both resolve to same value:", _get_urlconf_value(None) == _get_urlconf_value(settings.ROOT_URLCONF))
\ No newline at end of file
