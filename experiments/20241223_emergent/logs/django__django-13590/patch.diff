diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 4648daf395..1a96c7a455 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1077,10 +1077,14 @@ class Query(BaseExpression):
         elif isinstance(value, (list, tuple)):
             # The items of the iterable may be expressions and therefore need
             # to be resolved independently.
-            return type(value)(
+            resolved_values = [
                 self.resolve_lookup_value(sub_value, can_reuse, allow_joins)
                 for sub_value in value
-            )
+            ]
+            # Handle named tuples specially to avoid iterator expansion issues
+            if hasattr(value, '_fields'):
+                return type(value)(*resolved_values)
+            return type(value)(resolved_values)
         return value
 
     def solve_lookup_type(self, lookup):
diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py
index 9094542808..f51c5cd793 100644
--- a/tests/lookup/tests.py
+++ b/tests/lookup/tests.py
@@ -171,6 +171,40 @@ class LookupTests(TestCase):
         with self.assertRaises(TypeError):
             Article.objects.in_bulk(headline__startswith='Blah')
 
+    def test_range_with_named_tuple(self):
+        from collections import namedtuple
+        from datetime import datetime
+        
+        # Clean up any existing articles
+        Article.objects.all().delete()
+        
+        # Create test data
+        Article.objects.create(
+            headline="Test Article 1",
+            pub_date=datetime(2005, 7, 26)
+        )
+        Article.objects.create(
+            headline="Test Article 2",
+            pub_date=datetime(2005, 7, 27)
+        )
+        Article.objects.create(
+            headline="Test Article 3",
+            pub_date=datetime(2005, 7, 28)
+        )
+        
+        # Create a named tuple for range bounds
+        RangeBounds = namedtuple('RangeBounds', ['start', 'end'])
+        bounds = RangeBounds(
+            start=datetime(2005, 7, 27),
+            end=datetime(2005, 7, 28)
+        )
+        
+        # Test that range lookup works with named tuple
+        results = Article.objects.filter(pub_date__range=bounds).order_by('headline')
+        self.assertEqual(len(results), 2)
+        self.assertEqual(results[0].headline, "Test Article 2")
+        self.assertEqual(results[1].headline, "Test Article 3")
+
     def test_in_bulk_lots_of_ids(self):
         test_range = 2000
         max_query_params = connection.features.max_query_params
