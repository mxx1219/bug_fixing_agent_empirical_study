diff --git a/django/core/validators.py b/django/core/validators.py
index a385819510..28843e8e0e 100644
--- a/django/core/validators.py
+++ b/django/core/validators.py
@@ -101,6 +101,11 @@ class URLValidator(RegexValidator):
     def __call__(self, value):
         if not isinstance(value, str):
             raise ValidationError(self.message, code=self.code, params={'value': value})
+        
+        # Reject URLs containing control characters early
+        if any(c in value for c in '\n\r\t'):
+            raise ValidationError(self.message, code=self.code, params={'value': value})
+            
         # Check if the scheme is valid.
         scheme = value.split('://')[0].lower()
         if scheme not in self.schemes:
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..cdf1f90272
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,25 @@
+from django.core.validators import URLValidator
+from django.core.exceptions import ValidationError
+
+def test_url_validation():
+    validator = URLValidator()
+    
+    # Test URLs with newlines that should fail
+    bad_urls = [
+        'http://www.djangoproject.com/\n',
+        'http://[::ffff:192.9.5.5]\n',
+        'http://example.com\nmalicious.com',
+        'http://example.com\tmalicious.com',
+        'http://example.com\rmalicious.com'
+    ]
+    
+    print("Testing URLs that should fail validation:")
+    for url in bad_urls:
+        try:
+            validator(url)
+            print(f"FAIL: URL '{url}' was accepted but should have been rejected")
+        except ValidationError:
+            print(f"PASS: URL '{url}' was correctly rejected")
+
+if __name__ == '__main__':
+    test_url_validation()
\ No newline at end of file
