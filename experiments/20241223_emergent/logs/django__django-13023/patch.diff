diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 0fd69059ee..693eee36a7 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -1501,7 +1501,7 @@ class DecimalField(Field):
             return self.context.create_decimal_from_float(value)
         try:
             return decimal.Decimal(value)
-        except decimal.InvalidOperation:
+        except (decimal.InvalidOperation, TypeError):
             raise exceptions.ValidationError(
                 self.error_messages['invalid'],
                 code='invalid',
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..588e6a2a6b
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,35 @@
+from django.db import models
+from django.core.exceptions import ValidationError
+from django.conf import settings
+import django
+
+# Configure Django settings
+settings.configure(
+    INSTALLED_APPS=['django.contrib.contenttypes'],
+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+)
+django.setup()
+
+# Create a test model with a DecimalField
+class TestModel(models.Model):
+    amount = models.DecimalField(max_digits=10, decimal_places=2)
+    
+    class Meta:
+        app_label = 'django.contrib.contenttypes'
+
+# Try to convert a dict value
+field = TestModel._meta.get_field('amount')
+def test_value(value):
+    try:
+        result = field.to_python(value)
+        print(f"Success converting {value} to {result}")
+    except Exception as e:
+        print(f"Value: {value}")
+        print(f"Exception type: {type(e)}")
+
+# Test various edge cases
+test_value({'invalid': 'dict'})  # Dictionary
+test_value([1, 2, 3])  # List
+test_value(set([1, 2, 3]))  # Set
+test_value(lambda x: x)  # Function
+test_value(object())  # Generic object
\ No newline at end of file
