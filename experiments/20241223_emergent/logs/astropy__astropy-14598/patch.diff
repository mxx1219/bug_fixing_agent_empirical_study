diff --git a/.gitignore b/.gitignore
index aad550ae53..431d0e0db9 100644
--- a/.gitignore
+++ b/.gitignore
@@ -89,3 +89,6 @@ pip-wheel-metadata
 
 # Files generated if figure tests are run
 results
+*__pycache__*
+*venv*
+*_build*
diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py
index 1b3285ddce..cecfd4e068 100644
--- a/astropy/io/fits/card.py
+++ b/astropy/io/fits/card.py
@@ -64,7 +64,7 @@ class Card(_Verify):
 
     # Used in cards using the CONTINUE convention which expect a string
     # followed by an optional comment
-    _strg = r"\'(?P<strg>([ -~]+?|\'\'|) *?)\'(?=$|/| )"
+    _strg = r"\'(?P<strg>([^']+|\'\')*)\'(?=$|/| )"
     _comm_field = r"(?P<comm_field>(?P<sepr>/ *)(?P<comm>(.|\n)*))"
     _strg_comment_RE = re.compile(f"({_strg})? *{_comm_field}?")
 
@@ -768,7 +768,7 @@ class Card(_Verify):
         if m.group("bool") is not None:
             value = m.group("bool") == "T"
         elif m.group("strg") is not None:
-            value = re.sub("''", "'", m.group("strg"))
+            value = m.group("strg").replace("''", "'")
         elif m.group("numr") is not None:
             #  Check for numbers with leading 0s.
             numr = self._number_NFSC_RE.match(m.group("numr"))
@@ -859,7 +859,7 @@ class Card(_Verify):
                     return kw, vc
 
                 value = m.group("strg") or ""
-                value = value.rstrip().replace("''", "'")
+                value = value.rstrip()
                 if value and value[-1] == "&":
                     value = value[:-1]
                 values.append(value)
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..585aafd3f9
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,23 @@
+import sys
+sys.path.insert(0, '/testbed')
+from astropy.io import fits
+
+def test_case(n, value):
+    card1 = fits.Card('CONFIG', value)
+    card2 = fits.Card.fromstring(str(card1))
+    equal = card1.value == card2.value
+    print(f"n={n}, len={len(value)}, equal={equal}")
+    if not equal:
+        print(f"card1: {repr(card1.value)}")
+        print(f"card2: {repr(card2.value)}")
+    return equal
+
+print("Test case 1: Double single quotes at end")
+print("-" * 50)
+for n in range(60, 70):
+    test_case(n, "x" * n + "''")
+
+print("\nTest case 2: Double single quotes in middle")
+print("-" * 50)
+for n in range(50, 70):
+    test_case(n, "x" * n + "''" + "x" * 10)
\ No newline at end of file
