diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index c120f5d32d..a4c0ebfe3c 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -528,6 +528,32 @@ class AlterTogetherOptionOperation(ModelOptionOperation):
     def migration_name_fragment(self):
         return 'alter_%s_%s' % (self.name_lower, self.option_name)
 
+    def can_optimize_through(self, operation):
+        # AlterUniqueTogether and AlterIndexTogether can be optimized independently
+        return isinstance(operation, AlterTogetherOptionOperation) and not isinstance(operation, self.__class__)
+
+    def reduce(self, operation, app_label):
+        if isinstance(operation, self.__class__):
+            if self.name_lower == operation.name_lower:
+                # If we're followed by another AlterTogetherOption of the same type
+                # and model, we can optimize:
+                # - If we're clearing constraints (empty set) and the next operation sets new ones,
+                #   we can skip our operation
+                # - If both operations set constraints, keep the last one
+                if not self.option_value and operation.option_value:
+                    # We're clearing constraints and next operation sets new ones
+                    # Skip our operation and use the next one
+                    return [operation]
+                elif operation.option_value:
+                    # Both operations set constraints, use the latter
+                    return [operation]
+                elif not operation.option_value and self.option_value:
+                    # We set constraints but next one clears them - keep ours
+                    return [self]
+            return False  # Prevent optimization across different models
+        # Different operation type - check if we can optimize through it
+        return True if self.can_optimize_through(operation) else super().reduce(operation, app_label)
+
 
 class AlterUniqueTogether(AlterTogetherOptionOperation):
     """
diff --git a/test_optimization.py b/test_optimization.py
new file mode 100644
index 0000000000..8dfec37ed5
--- /dev/null
+++ b/test_optimization.py
@@ -0,0 +1,41 @@
+from django.db.migrations.optimizer import MigrationOptimizer
+from django.db.migrations.operations.models import AlterUniqueTogether, AlterIndexTogether
+
+def test_optimize_alter_together():
+    # Create test operations
+    operations = [
+        AlterUniqueTogether(
+            name='mymodel',
+            unique_together=set(),
+        ),
+        AlterIndexTogether(
+            name='mymodel',
+            index_together=set(),
+        ),
+        AlterUniqueTogether(
+            name='mymodel',
+            unique_together={("col",)},
+        ),
+        AlterIndexTogether(
+            name='mymodel',
+            index_together={("col",)},
+        ),
+    ]
+
+    # Run optimization
+    optimizer = MigrationOptimizer()
+    optimized = optimizer.optimize(operations, app_label='testapp')
+
+    # Print results
+    print("Original operations:", len(operations))
+    print("Optimized operations:", len(optimized))
+    
+    # Print details of optimized operations
+    for op in optimized:
+        print(f"\nOperation: {op.__class__.__name__}")
+        if isinstance(op, (AlterUniqueTogether, AlterIndexTogether)):
+            print(f"Model: {op.name}")
+            print(f"Value: {getattr(op, op.option_name)}")
+
+if __name__ == '__main__':
+    test_optimize_alter_together()
\ No newline at end of file
