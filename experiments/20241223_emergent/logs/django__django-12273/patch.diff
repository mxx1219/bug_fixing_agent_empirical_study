diff --git a/reproduce_pk_reset.py b/reproduce_pk_reset.py
new file mode 100644
index 0000000000..49e2766fea
--- /dev/null
+++ b/reproduce_pk_reset.py
@@ -0,0 +1,68 @@
+import os
+import django
+from django.test import TestCase
+from django.db import models
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        MIDDLEWARE_CLASSES=[],
+        SILENCED_SYSTEM_CHECKS=['models.E015'],
+    )
+    django.setup()
+
+# Define the models
+class Item(models.Model):
+    uid = models.AutoField(primary_key=True, editable=False)
+    f = models.BooleanField(default=False)
+    
+    def reset(self):
+        # Setting uid to None should be ignored since it's not editable
+        try:
+            self.uid = None
+        except ValueError:
+            pass  # Ignore the attempt to set uid to None
+        self.f = False
+        return self
+        
+    class Meta:
+        app_label = 'testapp'
+
+class Derived(Item):
+    class Meta:
+        app_label = 'testapp'
+
+# Create the database tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Item)
+    schema_editor.create_model(Derived)
+
+# Create test case
+class SaveTestCase(TestCase):
+    def setUp(self):
+        self.derived = Derived.objects.create(f=True)  # create the first object
+        self.original_pk = self.derived.pk
+        self.derived.reset()
+        self.derived.save()  # should update the existing object
+        
+    def test_f_true(self):
+        # Verify the object was updated in place
+        updated = Derived.objects.get(pk=self.original_pk)
+        self.assertEqual(updated.pk, self.original_pk)  # PK should not change
+        self.assertFalse(updated.f)  # f should be reset to False
+
+if __name__ == '__main__':
+    from django.test.runner import DiscoverRunner
+    test_runner = DiscoverRunner(verbosity=2)
+    test_runner.run_tests(['__main__'])
\ No newline at end of file
