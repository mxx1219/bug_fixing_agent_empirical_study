diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py
index fafc1beee8..413d2c8c2d 100644
--- a/django/db/models/fields/json.py
+++ b/django/db/models/fields/json.py
@@ -378,6 +378,33 @@ class KeyTransformIsNull(lookups.IsNull):
         return super().as_sql(compiler, connection)
 
 
+class KeyTransformIn(lookups.In):
+    def get_prep_lookup(self):
+        # Apply the same preparation as exact matches
+        if hasattr(self.rhs, 'resolve_expression'):
+            return self.rhs
+        prepared_values = []
+        for rhs_value in self.rhs:
+            if hasattr(rhs_value, 'resolve_expression'):
+                prepared_values.append(rhs_value)
+            elif self.prepare_rhs and hasattr(self.lhs.output_field, 'get_prep_value'):
+                prepared_values.append(self.lhs.output_field.get_prep_value(rhs_value))
+            else:
+                prepared_values.append(rhs_value)
+        return prepared_values
+
+    def as_sql(self, compiler, connection):
+        # Treat the transformed value as a direct field reference
+        if connection.vendor in ['mysql', 'sqlite', 'oracle']:
+            # Process the left-hand side (the transformed value)
+            lhs_sql, lhs_params = self.process_lhs(compiler, connection)
+            rhs_sql, rhs_params = self.process_rhs(compiler, connection)
+            params = tuple(lhs_params) + tuple(rhs_params)
+            # Compare the extracted values directly
+            return '%s IN %s' % (lhs_sql, rhs_sql), params
+        return super().as_sql(compiler, connection)
+
+
 class KeyTransformExact(JSONExact):
     def process_lhs(self, compiler, connection):
         lhs, lhs_params = super().process_lhs(compiler, connection)
diff --git a/django/tests/model_fields/models.py b/django/tests/model_fields/models.py
new file mode 100644
index 0000000000..73ef868426
--- /dev/null
+++ b/django/tests/model_fields/models.py
@@ -0,0 +1,8 @@
+from django.db import models
+
+
+class NullableJSONModel(models.Model):
+    value = models.JSONField(null=True)
+
+    class Meta:
+        required_db_features = {'supports_json_field'}
\ No newline at end of file
diff --git a/django/tests/model_fields/test_jsonfield.py b/django/tests/model_fields/test_jsonfield.py
new file mode 100644
index 0000000000..d9f8b8ef80
--- /dev/null
+++ b/django/tests/model_fields/test_jsonfield.py
@@ -0,0 +1,64 @@
+from django.core import serializers
+from django.db import connection
+from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature
+
+from .models import NullableJSONModel
+
+
+@skipUnlessDBFeature('supports_json_field')
+class TestQuerying(TestCase):
+    @classmethod
+    def setUpTestData(cls):
+        cls.objs = [
+            NullableJSONModel.objects.create(value={'id': 1, 'data': 'foo'}),
+            NullableJSONModel.objects.create(value={'id': 2, 'data': 'bar'}),
+            NullableJSONModel.objects.create(value={'id': 3, 'data': 'baz'}),
+            NullableJSONModel.objects.create(value={'id': 4, 'data': 'foo'}),
+            NullableJSONModel.objects.create(value={'id': 5, 'data': None}),
+            NullableJSONModel.objects.create(value={'id': 6, 'data': True}),
+            NullableJSONModel.objects.create(value={'id': 7, 'data': False}),
+            NullableJSONModel.objects.create(value={'id': 8, 'data': 0}),
+            NullableJSONModel.objects.create(value={'id': 9, 'data': 1}),
+        ]
+
+    def test_key_transform_in(self):
+        self.assertSequenceEqual(
+            NullableJSONModel.objects.filter(value__data__in=['foo']),
+            [self.objs[0], self.objs[3]],
+        )
+        self.assertSequenceEqual(
+            NullableJSONModel.objects.filter(value__data__in=[True]),
+            [self.objs[5]],
+        )
+        self.assertSequenceEqual(
+            NullableJSONModel.objects.filter(value__data__in=[False]),
+            [self.objs[6]],
+        )
+        self.assertSequenceEqual(
+            NullableJSONModel.objects.filter(value__data__in=[0]),
+            [self.objs[7]],
+        )
+        self.assertSequenceEqual(
+            NullableJSONModel.objects.filter(value__data__in=[1]),
+            [self.objs[8]],
+        )
+        self.assertSequenceEqual(
+            NullableJSONModel.objects.filter(value__data__in=[None]),
+            [self.objs[4]],
+        )
+        self.assertSequenceEqual(
+            NullableJSONModel.objects.filter(value__data__in=['foo', 'bar']),
+            [self.objs[0], self.objs[1], self.objs[3]],
+        )
+        self.assertSequenceEqual(
+            NullableJSONModel.objects.filter(value__data__in=[True, 1]),
+            [self.objs[5], self.objs[8]],
+        )
+        self.assertSequenceEqual(
+            NullableJSONModel.objects.filter(value__data__in=[False, 0]),
+            [self.objs[6], self.objs[7]],
+        )
+        self.assertSequenceEqual(
+            NullableJSONModel.objects.filter(value__data__in=[None, 'foo']),
+            [self.objs[0], self.objs[3], self.objs[4]],
+        )
\ No newline at end of file
