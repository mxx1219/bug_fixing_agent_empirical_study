diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py
index 9d6952df21..85d53e3b1a 100644
--- a/django/db/backends/base/schema.py
+++ b/django/db/backends/base/schema.py
@@ -1378,6 +1378,7 @@ class BaseDatabaseSchemaEditor:
         # - adding only a db_column and the column name is not changed
         non_database_attrs = [
             "blank",
+            "choices",
             "db_column",
             "editable",
             "error_messages",
diff --git a/test_choices.py b/test_choices.py
new file mode 100644
index 0000000000..4cf1a106a3
--- /dev/null
+++ b/test_choices.py
@@ -0,0 +1,79 @@
+import os
+import sys
+from django.conf import settings
+from django.core.management import execute_from_command_line
+from django.db import migrations, models
+from django.apps import apps
+from django.db.migrations.executor import MigrationExecutor
+from django.db.migrations.state import ProjectState
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': 'test_db.sqlite3',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+    )
+
+# Create a test model
+class Migration(migrations.Migration):
+    initial = True
+    dependencies = []
+
+    operations = [
+        migrations.CreateModel(
+            name='TestModel',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('status', models.CharField(max_length=10, choices=[('A', 'Active'), ('I', 'Inactive')])),
+            ],
+        ),
+    ]
+
+# Create a migration that changes the choices
+class UpdateChoicesMigration(migrations.Migration):
+    dependencies = [('__main__', '0001_initial')]
+
+    operations = [
+        migrations.AlterField(
+            model_name='TestModel',
+            name='status',
+            field=models.CharField(max_length=10, choices=[('A', 'Active'), ('I', 'Inactive'), ('P', 'Pending')]),
+        ),
+    ]
+
+def main():
+    # Initialize Django
+    import django
+    django.setup()
+
+    # Create connection and executor
+    from django.db import connection
+    executor = MigrationExecutor(connection)
+
+    # Apply initial migration
+    state = ProjectState()
+    executor.migrate([('testapp', '0001_initial')])
+    
+    # Get the SQL for the choices update migration
+    sql_statements = executor.collect_sql([('testapp', '0002_update_choices')])
+    
+    print("SQL statements that would be executed:")
+    for sql in sql_statements:
+        print(sql)
+    
+    # The migration should generate no SQL statements since it's just changing choices
+    if not sql_statements:
+        print("\nSuccess! No SQL statements generated for choices change.")
+    else:
+        print("\nFailure! SQL statements were generated when they shouldn't be.")
+
+if __name__ == '__main__':
+    main()
\ No newline at end of file
diff --git a/test_choices_simple.py b/test_choices_simple.py
new file mode 100644
index 0000000000..f20e09dcf5
--- /dev/null
+++ b/test_choices_simple.py
@@ -0,0 +1,31 @@
+from django.conf import settings
+from django.db import models
+
+# Configure Django settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[],
+)
+
+import django
+django.setup()
+
+from django.db import connection
+
+# Create the old and new field instances
+old_field = models.CharField(max_length=10, choices=[('A', 'Active'), ('I', 'Inactive')])
+new_field = models.CharField(max_length=10, choices=[('A', 'Active'), ('I', 'Inactive'), ('P', 'Pending')])
+
+# Test if the field should be altered
+with connection.schema_editor() as schema_editor:
+    should_be_altered = schema_editor._field_should_be_altered(old_field, new_field)
+
+if not should_be_altered:
+    print("\nSuccess! Field alteration not needed for choices change.")
+else:
+    print("\nFailure! Field alteration was deemed necessary when it shouldn't be.")
\ No newline at end of file
diff --git a/test_db.sqlite3 b/test_db.sqlite3
new file mode 100644
index 0000000000..41ff276589
Binary files /dev/null and b/test_db.sqlite3 differ
