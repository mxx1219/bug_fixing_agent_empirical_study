diff --git a/default.db b/default.db
new file mode 100644
index 0000000000..41ff276589
Binary files /dev/null and b/default.db differ
diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py
index 1a37c6b7d0..4665a095c0 100644
--- a/django/db/migrations/recorder.py
+++ b/django/db/migrations/recorder.py
@@ -1,5 +1,5 @@
 from django.apps.registry import Apps
-from django.db import DatabaseError, models
+from django.db import DatabaseError, models, router
 from django.utils.functional import classproperty
 from django.utils.timezone import now
 
@@ -62,6 +62,9 @@ class MigrationRecorder:
         # in the codebase.
         if self.has_table():
             return
+        # Check if migrations are allowed on this database
+        if not router.allow_migrate(self.connection.alias, self.Migration._meta.app_label):
+            return
         # Make the table
         try:
             with self.connection.schema_editor() as editor:
diff --git a/other.db b/other.db
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..5f69561465
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,73 @@
+import os
+import django
+from django.conf import settings
+from django.db import connections
+from django.db.migrations.recorder import MigrationRecorder
+
+# Define a router that only allows migrations on default database
+class Router:
+    def allow_migrate(self, db, app_label, **hints):
+        if db == 'default':
+            return True
+        return False
+
+# Configure Django settings
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': 'default.db',
+    },
+    'other': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': 'other.db',
+    }
+}
+
+settings.configure(
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+    DATABASES=DATABASES,
+    DATABASE_ROUTERS=[Router()],
+    USE_TZ=False,
+)
+
+django.setup()
+
+def check_migrations_table(db_alias):
+    """Check if django_migrations table exists in the given database."""
+    connection = connections[db_alias]
+    recorder = MigrationRecorder(connection)
+    
+    # Check if migrations are allowed according to router
+    from django.db import router
+    can_migrate = router.allow_migrate(connection.alias, recorder.Migration._meta.app_label)
+    print(f"Router allows migrations on '{db_alias}': {can_migrate}")
+    
+    # Check if table exists
+    has_table = recorder.has_table()
+    print(f"Database '{db_alias}' has migrations table: {has_table}")
+    
+    # Try to ensure schema - this should respect router rules
+    try:
+        recorder.ensure_schema()
+        # Double check if table was created
+        has_table_after = recorder.has_table()
+        print(f"ensure_schema() succeeded on '{db_alias}', table exists: {has_table_after}")
+    except Exception as e:
+        print(f"ensure_schema() failed on '{db_alias}': {e}")
+
+def main():
+    # Clean up any existing database files
+    for db in ['default.db', 'other.db']:
+        if os.path.exists(db):
+            os.remove(db)
+    
+    # Check both databases
+    print("\nInitial state:")
+    check_migrations_table('default')
+    check_migrations_table('other')
+
+if __name__ == '__main__':
+    main()
\ No newline at end of file
