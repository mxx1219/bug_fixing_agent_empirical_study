diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
index 9b00e24509..03930e2d9b 100644
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -45,7 +45,22 @@ class ResolverMatch:
         self.namespaces = [x for x in namespaces if x] if namespaces else []
         self.namespace = ':'.join(self.namespaces)
 
-        if not hasattr(func, '__name__'):
+        if isinstance(func, functools.partial):
+            # Handle partial functions by showing the original function and args
+            partial_func = func.func
+            if not hasattr(partial_func, '__name__'):
+                # A class-based view
+                self._func_path = partial_func.__class__.__module__ + '.' + partial_func.__class__.__name__
+            else:
+                # A function-based view
+                self._func_path = partial_func.__module__ + '.' + partial_func.__name__
+            # Add partial args/kwargs to the path
+            partial_args = [repr(arg) for arg in func.args]
+            partial_kwargs = [f"{k}={repr(v)}" for k, v in func.keywords.items()]
+            all_args = partial_args + partial_kwargs
+            if all_args:
+                self._func_path += f"({', '.join(all_args)})"
+        elif not hasattr(func, '__name__'):
             # A class-based view
             self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__
         else:
diff --git a/edge_cases.py b/edge_cases.py
new file mode 100644
index 0000000000..4a38e58757
--- /dev/null
+++ b/edge_cases.py
@@ -0,0 +1,37 @@
+import functools
+from django.urls.resolvers import ResolverMatch
+
+# Test case 1: Class-based view with partial
+class MyView:
+    def __call__(self, request, arg1):
+        return f"View with arg1={arg1}"
+
+view_instance = MyView()
+partial_class_view = functools.partial(view_instance, arg1="test")
+
+# Test case 2: Nested partials
+def my_view(request, arg1, arg2):
+    return f"View with arg1={arg1}, arg2={arg2}"
+
+partial1 = functools.partial(my_view, arg1="test1")
+partial2 = functools.partial(partial1, arg2="test2")
+
+# Test the cases
+cases = [
+    ("Class-based view with partial:", ResolverMatch(
+        func=partial_class_view,
+        args=(),
+        kwargs={},
+        url_name="test-view"
+    )),
+    ("Nested partials:", ResolverMatch(
+        func=partial2,
+        args=(),
+        kwargs={},
+        url_name="test-view"
+    ))
+]
+
+for desc, resolver_match in cases:
+    print(f"\n{desc}")
+    print(resolver_match)
\ No newline at end of file
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..c8a99ca796
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,19 @@
+import functools
+from django.urls.resolvers import ResolverMatch
+
+def my_view(request, arg1):
+    return f"View with arg1={arg1}"
+
+# Create a partial function with pre-filled arg1
+partial_view = functools.partial(my_view, arg1="test")
+
+# Create a ResolverMatch instance with the partial function
+resolver_match = ResolverMatch(
+    func=partial_view,
+    args=(),
+    kwargs={},
+    url_name="test-view"
+)
+
+# Print the resolver match - this will show the issue
+print(resolver_match)
\ No newline at end of file
