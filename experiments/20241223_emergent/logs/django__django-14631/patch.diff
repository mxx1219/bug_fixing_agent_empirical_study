diff --git a/django/forms/boundfield.py b/django/forms/boundfield.py
index 88adadb37d..e395426d33 100644
--- a/django/forms/boundfield.py
+++ b/django/forms/boundfield.py
@@ -228,6 +228,31 @@ class BoundField:
             attrs['disabled'] = True
         return attrs
 
+    def _did_change(self):
+        """
+        Return True if the field value has changed from its initial value.
+        """
+        if not self.form.is_bound:
+            return False
+        
+        if self.field.disabled:
+            return False
+            
+        if not self.field.show_hidden_initial:
+            initial_value = self.initial
+        else:
+            initial_prefixed_name = self.form.add_initial_prefix(self.name)
+            hidden_widget = self.field.hidden_widget()
+            try:
+                initial_value = self.field.to_python(
+                    self.form._widget_data_value(hidden_widget, initial_prefixed_name)
+                )
+            except ValidationError:
+                # Always assume data has changed if validation fails.
+                return True
+                
+        return self.field.has_changed(initial_value, self.data)
+
     @property
     def widget_type(self):
         return re.sub(r'widget$|input$', '', self.field.widget.__class__.__name__.lower())
diff --git a/django/forms/forms.py b/django/forms/forms.py
index d14037bfe9..2b7623d20d 100644
--- a/django/forms/forms.py
+++ b/django/forms/forms.py
@@ -200,6 +200,10 @@ class BaseForm:
     def _field_data_value(self, field, html_name):
         return self._widget_data_value(field.widget, html_name)
 
+    def _bound_items(self):
+        """Return a list of (name, boundfield) pairs for this form."""
+        return [(name, self[name]) for name in self.fields]
+
     def _html_output(self, normal_row, error_row, row_ender, help_text_html, errors_on_separate_row):
         "Output HTML. Used by as_table(), as_ul(), as_p()."
         # Errors that should be displayed above all fields.
@@ -387,15 +391,15 @@ class BaseForm:
         self._post_clean()
 
     def _clean_fields(self):
-        for name, field in self.fields.items():
+        for name, bf in self._bound_items():
+            field = bf.field
             if field.disabled:
-                value = self.get_initial_for_field(field, name)
+                value = bf.initial
             else:
-                value = self._field_data_value(field, self.add_prefix(name))
+                value = bf.data
             try:
                 if isinstance(field, FileField):
-                    initial = self.get_initial_for_field(field, name)
-                    value = field.clean(value, initial)
+                    value = field.clean(value, bf.initial)
                 else:
                     value = field.clean(value)
                 self.cleaned_data[name] = value
@@ -436,27 +440,7 @@ class BaseForm:
 
     @cached_property
     def changed_data(self):
-        data = []
-        for name, field in self.fields.items():
-            data_value = self._field_data_value(field, self.add_prefix(name))
-            if not field.show_hidden_initial:
-                # Use the BoundField's initial as this is the value passed to
-                # the widget.
-                initial_value = self[name].initial
-            else:
-                initial_prefixed_name = self.add_initial_prefix(name)
-                hidden_widget = field.hidden_widget()
-                try:
-                    initial_value = field.to_python(
-                        self._widget_data_value(hidden_widget, initial_prefixed_name)
-                    )
-                except ValidationError:
-                    # Always assume data has changed if validation fails.
-                    data.append(name)
-                    continue
-            if field.has_changed(initial_value, data_value):
-                data.append(name)
-        return data
+        return [name for name, bf in self._bound_items() if bf._did_change()]
 
     @property
     def media(self):
diff --git a/test_form_changes.py b/test_form_changes.py
new file mode 100644
index 0000000000..39a562842f
--- /dev/null
+++ b/test_form_changes.py
@@ -0,0 +1,40 @@
+from django.conf import settings
+settings.configure(USE_I18N=False, USE_L10N=False)
+
+from django.forms import Form, CharField, DateTimeField
+from datetime import datetime
+
+class TestForm(Form):
+    name = CharField(initial='John')
+    date = DateTimeField(initial=lambda: datetime(2023, 1, 1))
+
+def test_clean_fields_and_changed_data():
+    # Test with unchanged data
+    form = TestForm(data={'name': 'John', 'date': '2023-01-01 00:00:00'})
+    assert form.is_valid()
+    assert form.cleaned_data['name'] == 'John'
+    assert form.cleaned_data['date'] == datetime(2023, 1, 1)
+    assert not form.has_changed()
+    assert form.changed_data == []
+
+    # Test with changed data
+    form = TestForm(data={'name': 'Jane', 'date': '2023-01-02 00:00:00'})
+    assert form.is_valid()
+    assert form.cleaned_data['name'] == 'Jane'
+    assert form.cleaned_data['date'] == datetime(2023, 1, 2)
+    assert form.has_changed()
+    assert set(form.changed_data) == {'name', 'date'}
+
+    # Test with disabled field
+    form = TestForm(data={'name': 'Jane', 'date': '2023-01-02 00:00:00'})
+    form.fields['name'].disabled = True
+    assert form.is_valid()
+    assert form.cleaned_data['name'] == 'John'  # Initial value used for disabled field
+    assert form.cleaned_data['date'] == datetime(2023, 1, 2)
+    assert form.has_changed()
+    assert form.changed_data == ['date']
+
+    print("All tests passed!")
+
+if __name__ == '__main__':
+    test_clean_fields_and_changed_data()
\ No newline at end of file
