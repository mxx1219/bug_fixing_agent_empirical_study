diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index ce18098fd2..de58243f5c 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1124,6 +1124,9 @@ class Query(BaseExpression):
 
     def check_filterable(self, expression):
         """Raise an error if expression cannot be used in a WHERE clause."""
+        # Skip filterable check for model instances since they may have a field named 'filterable'
+        if not isinstance(expression, type) and hasattr(expression, '_meta'):
+            return
         if not getattr(expression, 'filterable', True):
             raise NotSupportedError(
                 expression.__class__.__name__ + ' is disallowed in the filter '
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..0ce316db32
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,77 @@
+from django.db import models
+from django.utils import timezone
+from django.conf import settings
+import os
+
+# Configure Django settings
+BASE_DIR = os.path.dirname(os.path.abspath(__file__))
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+    DEFAULT_AUTO_FIELD='django.db.models.BigAutoField',
+)
+
+import django
+django.setup()
+
+# Define the models from the PR description
+class ProductMetaDataType(models.Model):
+    label = models.CharField(max_length=255, unique=True, blank=False, null=False)
+    filterable = models.BooleanField(default=False)
+    
+    class Meta:
+        app_label = 'testapp'
+    
+    def __str__(self):
+        return self.label
+
+class Product(models.Model):
+    name = models.CharField(max_length=255)
+    
+    class Meta:
+        app_label = 'testapp'
+
+class Platform(models.Model):
+    name = models.CharField(max_length=255)
+    
+    class Meta:
+        app_label = 'testapp'
+
+class ProductMetaData(models.Model):
+    id = models.BigAutoField(primary_key=True)
+    product = models.ForeignKey(Product, null=False, blank=False, on_delete=models.CASCADE)
+    value = models.TextField(null=False, blank=False)
+    marketplace = models.ForeignKey(Platform, null=False, blank=False, on_delete=models.CASCADE)
+    date_created = models.DateTimeField(null=True, default=timezone.now)
+    metadata_type = models.ForeignKey(ProductMetaDataType, null=False, blank=False, on_delete=models.CASCADE)
+    
+    class Meta:
+        app_label = 'testapp'
+
+# Create the tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(ProductMetaDataType)
+    schema_editor.create_model(Product)
+    schema_editor.create_model(Platform)
+    schema_editor.create_model(ProductMetaData)
+
+# Create test data
+platform = Platform.objects.create(name="Test Platform")
+product = Product.objects.create(name="Test Product")
+brand_metadata = ProductMetaDataType.objects.create(label="Brand", filterable=False)
+
+# Try to filter ProductMetaData - this should raise the error
+try:
+    list(ProductMetaData.objects.filter(value="Dark Vador", metadata_type=brand_metadata))
+except Exception as e:
+    print(f"Error occurred: {str(e)}")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..93bf0dc4a9
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,58 @@
+from django.db import models
+from django.conf import settings
+from django.db.models import Value, Expression
+import os
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+    DEFAULT_AUTO_FIELD='django.db.models.BigAutoField',
+)
+
+import django
+django.setup()
+
+# Create a custom expression that is not filterable
+class NonFilterableExpression(Expression):
+    filterable = False
+    
+    def as_sql(self, compiler, connection):
+        return "1", []
+
+# Create a model with a field named 'filterable'
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    filterable = models.BooleanField(default=False)
+    
+    class Meta:
+        app_label = 'testapp'
+
+# Create the tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(TestModel)
+
+# Test 1: Model with filterable field should work
+try:
+    TestModel.objects.create(name="test", filterable=False)
+    TestModel.objects.filter(filterable=False)
+    print("Test 1 passed: Model with filterable field works")
+except Exception as e:
+    print(f"Test 1 failed: {str(e)}")
+
+# Test 2: Non-filterable expression should still raise error
+try:
+    TestModel.objects.filter(name=NonFilterableExpression())
+    print("Test 2 failed: Non-filterable expression was allowed")
+except django.db.utils.NotSupportedError:
+    print("Test 2 passed: Non-filterable expression correctly blocked")
\ No newline at end of file
