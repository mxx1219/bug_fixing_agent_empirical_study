diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py
index 3a462f1c4c..79a8ef6a02 100644
--- a/django/db/models/deletion.py
+++ b/django/db/models/deletion.py
@@ -231,10 +231,17 @@ class Collector:
     def related_objects(self, related, objs):
         """
         Get a QuerySet of objects related to `objs` via the relation `related`.
+        Only fetch the fields required for deletion (primary key and foreign keys).
         """
+        # Get required fields: PK and any FK that points to a parent model
+        fields = [related.related_model._meta.pk.name]
+        for f in related.related_model._meta.fields:
+            if f.is_relation and f.many_to_one:
+                fields.append(f.name)
+        
         return related.related_model._base_manager.using(self.using).filter(
             **{"%s__in" % related.field.name: objs}
-        )
+        ).only(*fields)
 
     def instances_with_model(self):
         for model, instances in self.data.items():
diff --git a/manage.py b/manage.py
new file mode 100755
index 0000000000..279e0aab36
--- /dev/null
+++ b/manage.py
@@ -0,0 +1,22 @@
+#!/usr/bin/env python
+import os
+import sys
+
+if __name__ == "__main__":
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "test_project.settings")
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError:
+        # The above import may fail for some other reason. Ensure that the
+        # issue is really that Django is missing to avoid masking other
+        # exceptions on Python 2.
+        try:
+            import django
+        except ImportError:
+            raise ImportError(
+                "Couldn't import Django. Are you sure it's installed and "
+                "available on your PYTHONPATH environment variable? Did you "
+                "forget to activate a virtual environment?"
+            )
+        raise
+    execute_from_command_line(sys.argv)
\ No newline at end of file
diff --git a/test_app/__init__.py b/test_app/__init__.py
new file mode 100644
index 0000000000..f8149df2ef
--- /dev/null
+++ b/test_app/__init__.py
@@ -0,0 +1 @@
+# This file is intentionally empty
\ No newline at end of file
diff --git a/test_app/migrations/0001_initial.py b/test_app/migrations/0001_initial.py
new file mode 100644
index 0000000000..dc48f0c59d
--- /dev/null
+++ b/test_app/migrations/0001_initial.py
@@ -0,0 +1,31 @@
+# Generated by Django 3.0.dev20190417053413 on 2024-12-21 11:05
+
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Parent',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=100)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Child',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=100)),
+                ('description', models.TextField()),
+                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='test_app.Parent')),
+            ],
+        ),
+    ]
diff --git a/test_app/migrations/__init__.py b/test_app/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_app/models.py b/test_app/models.py
new file mode 100644
index 0000000000..ca198e30bc
--- /dev/null
+++ b/test_app/models.py
@@ -0,0 +1,15 @@
+from django.db import models
+
+class Parent(models.Model):
+    name = models.CharField(max_length=100)
+
+    class Meta:
+        app_label = 'test_app'
+
+class Child(models.Model):
+    parent = models.ForeignKey(Parent, on_delete=models.CASCADE)
+    name = models.CharField(max_length=100)
+    description = models.TextField()  # Field that will contain invalid UTF-8
+
+    class Meta:
+        app_label = 'test_app'
\ No newline at end of file
diff --git a/test_app/tests.py b/test_app/tests.py
new file mode 100644
index 0000000000..f36b5bb0e6
--- /dev/null
+++ b/test_app/tests.py
@@ -0,0 +1,25 @@
+import os
+import django
+from django.conf import settings
+from django.test import TestCase
+from django.db import connection
+from .models import Parent, Child
+
+class DeleteTest(TestCase):
+    def setUp(self):
+        # Create test data with invalid UTF-8
+        with connection.cursor() as cursor:
+            cursor.execute("INSERT INTO test_app_parent (name) VALUES ('test_parent')")
+            parent_id = cursor.lastrowid
+            # Insert child with invalid UTF-8 in description
+            cursor.execute(
+                "INSERT INTO test_app_child (parent_id, name, description) VALUES (%s, %s, %s)",
+                (parent_id, 'test_child', b'Invalid UTF-8: \xed\xa0\x80'.decode('latin1'))
+            )
+
+    def test_delete_with_invalid_utf8(self):
+        """Test that delete works even with invalid UTF-8 data"""
+        parent = Parent.objects.first()
+        parent.delete()  # This should not raise UnicodeDecodeError
+        self.assertEqual(Parent.objects.count(), 0)
+        self.assertEqual(Child.objects.count(), 0)
\ No newline at end of file
diff --git a/test_delete.py b/test_delete.py
new file mode 100644
index 0000000000..251646a08d
--- /dev/null
+++ b/test_delete.py
@@ -0,0 +1,60 @@
+import os
+import django
+from django.conf import settings
+from django.db import models
+from django.test import TestCase
+from django.test.utils import override_settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.mysql',
+                'NAME': 'test_db',
+                'USER': 'test_user',
+                'PASSWORD': 'test_pass',
+                'HOST': 'localhost',
+                'OPTIONS': {'charset': 'utf8mb4'},
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        MIDDLEWARE_CLASSES=[],
+    )
+    django.setup()
+
+class Parent(models.Model):
+    name = models.CharField(max_length=100)
+
+class Child(models.Model):
+    parent = models.ForeignKey(Parent, on_delete=models.CASCADE)
+    name = models.CharField(max_length=100)
+    # Field with invalid UTF-8 data
+    description = models.TextField()
+
+class DeleteTest(TestCase):
+    def setUp(self):
+        # Create test data with invalid UTF-8
+        parent = Parent.objects.create(name='test_parent')
+        Child.objects.create(
+            parent=parent,
+            name='test_child',
+            description=b'Invalid UTF-8: \xed\xa0\x80'.decode('latin1')  # This is invalid UTF-8
+        )
+
+    def test_delete_with_invalid_utf8(self):
+        """Test that delete works even with invalid UTF-8 data"""
+        parent = Parent.objects.first()
+        parent.delete()  # This should not raise UnicodeDecodeError
+        self.assertEqual(Parent.objects.count(), 0)
+        self.assertEqual(Child.objects.count(), 0)
+
+if __name__ == '__main__':
+    import django
+    django.setup()
+    from django.test.runner import DiscoverRunner
+    test_runner = DiscoverRunner(verbosity=2)
+    test_runner.run_tests(['test_delete'])
\ No newline at end of file
diff --git a/test_delete_unicode.py b/test_delete_unicode.py
new file mode 100644
index 0000000000..38cea244b3
--- /dev/null
+++ b/test_delete_unicode.py
@@ -0,0 +1,80 @@
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.mysql',
+                'NAME': 'test_db',
+                'USER': 'test_user',
+                'PASSWORD': 'test_pass',
+                'HOST': 'localhost',
+                'OPTIONS': {'charset': 'utf8mb4'},
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+            'test_delete_unicode',  # Add our test app
+        ],
+        MIDDLEWARE_CLASSES=[],
+    )
+    django.setup()
+
+from django.db import models, connection
+from django.test import TestCase
+
+# Create test models
+class Parent(models.Model):
+    name = models.CharField(max_length=100)
+
+    class Meta:
+        app_label = 'test_delete_unicode'
+
+class Child(models.Model):
+    parent = models.ForeignKey(Parent, on_delete=models.CASCADE)
+    name = models.CharField(max_length=100)
+    description = models.TextField()  # Field that will contain invalid UTF-8
+
+    class Meta:
+        app_label = 'test_delete_unicode'
+
+# Create test database
+with connection.cursor() as cursor:
+    cursor.execute("""
+        CREATE TABLE IF NOT EXISTS parent (
+            id INTEGER PRIMARY KEY AUTO_INCREMENT,
+            name VARCHAR(100)
+        )
+    """)
+    cursor.execute("""
+        CREATE TABLE IF NOT EXISTS child (
+            id INTEGER PRIMARY KEY AUTO_INCREMENT,
+            parent_id INTEGER,
+            name VARCHAR(100),
+            description TEXT,
+            FOREIGN KEY (parent_id) REFERENCES parent(id)
+        )
+    """)
+
+# Insert test data with invalid UTF-8
+with connection.cursor() as cursor:
+    cursor.execute("INSERT INTO parent (name) VALUES ('test_parent')")
+    parent_id = cursor.lastrowid
+    # Insert child with invalid UTF-8 in description
+    cursor.execute(
+        "INSERT INTO child (parent_id, name, description) VALUES (%s, %s, %s)",
+        (parent_id, 'test_child', b'Invalid UTF-8: \xed\xa0\x80'.decode('latin1'))
+    )
+
+# Test deletion
+parent = Parent.objects.first()
+parent.delete()  # This should not raise UnicodeDecodeError
+
+# Verify deletion
+assert Parent.objects.count() == 0
+assert Child.objects.count() == 0
+print("Test passed successfully!")
\ No newline at end of file
diff --git a/test_project/__init__.py b/test_project/__init__.py
new file mode 100644
index 0000000000..f8149df2ef
--- /dev/null
+++ b/test_project/__init__.py
@@ -0,0 +1 @@
+# This file is intentionally empty
\ No newline at end of file
diff --git a/test_project/settings.py b/test_project/settings.py
new file mode 100644
index 0000000000..4fa7a415f0
--- /dev/null
+++ b/test_project/settings.py
@@ -0,0 +1,87 @@
+import os
+
+BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
+
+SECRET_KEY = 'test-key'
+
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+    'test_app',
+]
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+ROOT_URLCONF = 'test_project.urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = 'test_project.wsgi.application'
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.mysql',
+        'NAME': 'test_db',
+        'USER': 'test_user',
+        'PASSWORD': 'test_pass',
+        'HOST': 'localhost',
+        'OPTIONS': {'charset': 'utf8mb4'},
+    }
+}
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
+    },
+]
+
+LANGUAGE_CODE = 'en-us'
+
+TIME_ZONE = 'UTC'
+
+USE_I18N = True
+
+USE_L10N = True
+
+USE_TZ = True
+
+STATIC_URL = '/static/'
\ No newline at end of file
diff --git a/test_project/urls.py b/test_project/urls.py
new file mode 100644
index 0000000000..773440b68d
--- /dev/null
+++ b/test_project/urls.py
@@ -0,0 +1,6 @@
+from django.conf.urls import url
+from django.contrib import admin
+
+urlpatterns = [
+    url(r'^admin/', admin.site.urls),
+]
\ No newline at end of file
