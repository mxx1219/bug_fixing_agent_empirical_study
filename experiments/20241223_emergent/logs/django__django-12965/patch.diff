diff --git a/django/db/backends/mysql/compiler.py b/django/db/backends/mysql/compiler.py
index 3682d6da05..a32c03eb7c 100644
--- a/django/db/backends/mysql/compiler.py
+++ b/django/db/backends/mysql/compiler.py
@@ -15,13 +15,8 @@ class SQLInsertCompiler(compiler.SQLInsertCompiler, SQLCompiler):
 
 class SQLDeleteCompiler(compiler.SQLDeleteCompiler, SQLCompiler):
     def as_sql(self):
-        if self.connection.features.update_can_self_select or self.single_alias:
-            return super().as_sql()
-        # MySQL and MariaDB < 10.3.2 doesn't support deletion with a subquery
-        # which is what the default implementation of SQLDeleteCompiler uses
-        # when multiple tables are involved. Use the MySQL/MariaDB specific
-        # DELETE table FROM table syntax instead to avoid performing the
-        # operation in two queries.
+        # Always use the MySQL-specific DELETE FROM syntax to avoid subqueries
+        # This avoids both the LOCK TABLES issue and performance regression
         result = [
             'DELETE %s FROM' % self.quote_name_unless_alias(
                 self.query.get_initial_alias()
diff --git a/test_delete.py b/test_delete.py
new file mode 100644
index 0000000000..b0293b79b2
--- /dev/null
+++ b/test_delete.py
@@ -0,0 +1,63 @@
+from django.db import connection
+from django.db import models
+from django.test import TestCase
+
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+
+    class Meta:
+        app_label = 'testapp'
+
+class DeleteTest(TestCase):
+    def setUp(self):
+        # Create some test data
+        for i in range(100):
+            TestModel.objects.create(name=f'test{i}')
+
+    def test_delete_all(self):
+        # Enable query logging
+        connection.queries_log.clear()
+        connection.force_debug_cursor = True
+
+        # Perform the delete
+        TestModel.objects.all().delete()
+
+        # Print the executed SQL
+        print("Executed SQL:", connection.queries[-1]['sql'])
+
+if __name__ == '__main__':
+    import django
+    from django.conf import settings
+    import os
+    
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.mysql',
+                'NAME': 'test_db',
+                'USER': 'test',
+                'PASSWORD': 'test',
+                'HOST': 'localhost',
+                'PORT': '3306',
+            }
+        },
+        INSTALLED_APPS=['testapp'],
+        MIDDLEWARE_CLASSES=[],
+        BASE_DIR=os.path.dirname(os.path.abspath(__file__)),
+    )
+    django.setup()
+    
+    # Create the models table
+    from django.db import connection
+    with connection.cursor() as cursor:
+        cursor.execute("""
+            CREATE TABLE IF NOT EXISTS testapp_testmodel (
+                id integer NOT NULL AUTO_INCREMENT PRIMARY KEY,
+                name varchar(100) NOT NULL
+            );
+        """)
+    
+    # Run the test
+    test = DeleteTest()
+    test.setUp()
+    test.test_delete_all()
\ No newline at end of file
diff --git a/test_delete2.py b/test_delete2.py
new file mode 100644
index 0000000000..27aa722a7a
--- /dev/null
+++ b/test_delete2.py
@@ -0,0 +1,66 @@
+from django.db import connection
+from django.db import models
+from django.test import TestCase
+
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+
+    class Meta:
+        app_label = 'testapp'
+
+class DeleteTest(TestCase):
+    def setUp(self):
+        # Create some test data
+        for i in range(100):
+            TestModel.objects.create(name=f'test{i}')
+
+    def test_delete_all(self):
+        # Enable query logging
+        connection.queries_log.clear()
+        connection.force_debug_cursor = True
+
+        # Perform the delete
+        TestModel.objects.all().delete()
+
+        # Print the executed SQL
+        print("Executed SQL:", connection.queries[-1]['sql'])
+
+if __name__ == '__main__':
+    import django
+    import os
+    from django.conf import settings
+    
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.mysql',
+                'NAME': 'test_db',
+                'USER': 'test',
+                'PASSWORD': 'test',
+                'HOST': 'localhost',
+                'PORT': '3306',
+            }
+        },
+        INSTALLED_APPS=['testapp'],
+        MIDDLEWARE_CLASSES=[],
+        BASE_DIR=os.path.dirname(os.path.abspath(__file__)),
+        SECRET_KEY='dummy',
+        DEFAULT_AUTO_FIELD='django.db.models.AutoField',
+    )
+    django.setup()
+    
+    # Create the models table
+    from django.db import connection
+    with connection.cursor() as cursor:
+        cursor.execute("""
+            DROP TABLE IF EXISTS testapp_testmodel;
+            CREATE TABLE IF NOT EXISTS testapp_testmodel (
+                id integer NOT NULL AUTO_INCREMENT PRIMARY KEY,
+                name varchar(100) NOT NULL
+            );
+        """)
+    
+    # Run the test
+    test = DeleteTest()
+    test.setUp()
+    test.test_delete_all()
\ No newline at end of file
diff --git a/test_delete3.py b/test_delete3.py
new file mode 100644
index 0000000000..b1a68d4d21
--- /dev/null
+++ b/test_delete3.py
@@ -0,0 +1,65 @@
+import django
+import os
+from django.conf import settings
+
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.mysql',
+            'NAME': 'test_db',
+            'USER': 'test',
+            'PASSWORD': 'test',
+            'HOST': 'localhost',
+            'PORT': '3306',
+        }
+    },
+    INSTALLED_APPS=['testapp'],
+    MIDDLEWARE_CLASSES=[],
+    BASE_DIR=os.path.dirname(os.path.abspath(__file__)),
+    SECRET_KEY='dummy',
+    DEFAULT_AUTO_FIELD='django.db.models.AutoField',
+)
+django.setup()
+
+from django.db import connection
+from django.db import models
+from django.test import TestCase
+
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+
+    class Meta:
+        app_label = 'testapp'
+
+class DeleteTest(TestCase):
+    def setUp(self):
+        # Create some test data
+        for i in range(100):
+            TestModel.objects.create(name=f'test{i}')
+
+    def test_delete_all(self):
+        # Enable query logging
+        connection.queries_log.clear()
+        connection.force_debug_cursor = True
+
+        # Perform the delete
+        TestModel.objects.all().delete()
+
+        # Print the executed SQL
+        print("Executed SQL:", connection.queries[-1]['sql'])
+
+if __name__ == '__main__':
+    # Create the models table
+    with connection.cursor() as cursor:
+        cursor.execute("""
+            DROP TABLE IF EXISTS testapp_testmodel;
+            CREATE TABLE IF NOT EXISTS testapp_testmodel (
+                id integer NOT NULL AUTO_INCREMENT PRIMARY KEY,
+                name varchar(100) NOT NULL
+            );
+        """)
+    
+    # Run the test
+    test = DeleteTest()
+    test.setUp()
+    test.test_delete_all()
\ No newline at end of file
diff --git a/test_delete4.py b/test_delete4.py
new file mode 100644
index 0000000000..fcb2fd5bdd
--- /dev/null
+++ b/test_delete4.py
@@ -0,0 +1,63 @@
+import django
+import os
+import sys
+from django.conf import settings
+
+# Add the current directory to Python path
+sys.path.append(os.path.dirname(os.path.abspath(__file__)))
+
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.mysql',
+            'NAME': 'test_db',
+            'USER': 'test',
+            'PASSWORD': 'test',
+            'HOST': 'localhost',
+            'PORT': '3306',
+        }
+    },
+    INSTALLED_APPS=['testapp.apps.TestappConfig'],
+    MIDDLEWARE_CLASSES=[],
+    BASE_DIR=os.path.dirname(os.path.abspath(__file__)),
+    SECRET_KEY='dummy',
+    DEFAULT_AUTO_FIELD='django.db.models.AutoField',
+)
+django.setup()
+
+from django.db import connection
+from testapp.models import TestModel
+from django.test import TestCase
+
+class DeleteTest(TestCase):
+    def setUp(self):
+        # Create some test data
+        for i in range(100):
+            TestModel.objects.create(name=f'test{i}')
+
+    def test_delete_all(self):
+        # Enable query logging
+        connection.queries_log.clear()
+        connection.force_debug_cursor = True
+
+        # Perform the delete
+        TestModel.objects.all().delete()
+
+        # Print the executed SQL
+        print("Executed SQL:", connection.queries[-1]['sql'])
+
+if __name__ == '__main__':
+    # Create the models table
+    with connection.cursor() as cursor:
+        cursor.execute("""
+            DROP TABLE IF EXISTS testapp_testmodel;
+            CREATE TABLE IF NOT EXISTS testapp_testmodel (
+                id integer NOT NULL AUTO_INCREMENT PRIMARY KEY,
+                name varchar(100) NOT NULL
+            );
+        """)
+    
+    # Run the test
+    test = DeleteTest()
+    test.setUp()
+    test.test_delete_all()
\ No newline at end of file
diff --git a/testapp/__init__.py b/testapp/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testapp/apps.py b/testapp/apps.py
new file mode 100644
index 0000000000..dc24defcca
--- /dev/null
+++ b/testapp/apps.py
@@ -0,0 +1,4 @@
+from django.apps import AppConfig
+
+class TestappConfig(AppConfig):
+    name = 'testapp'
\ No newline at end of file
diff --git a/testapp/models.py b/testapp/models.py
new file mode 100644
index 0000000000..ab810676be
--- /dev/null
+++ b/testapp/models.py
@@ -0,0 +1,7 @@
+from django.db import models
+
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+
+    class Meta:
+        app_label = 'testapp'
\ No newline at end of file
