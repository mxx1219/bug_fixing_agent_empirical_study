diff --git a/.gitignore b/.gitignore
index 238fb3a200..975c5364d8 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,6 @@ tests/coverage_html/
 tests/.coverage
 build/
 tests/report/
+*__pycache__*
+*venv*
+*_build*
diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py
index cc65c043ab..c21fb2c06a 100644
--- a/django/utils/autoreload.py
+++ b/django/utils/autoreload.py
@@ -220,6 +220,12 @@ def get_child_arguments():
     py_script = Path(sys.argv[0])
 
     args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]
+    # Add -X options to preserve implementation-specific options like -X utf8
+    for name, value in sys._xoptions.items():
+        if value is True:
+            args.append('-X' + name)
+        else:
+            args.append('-X{}={}'.format(name, value))
     # __spec__ is set when the server was started with the `-m` option,
     # see https://docs.python.org/3/reference/import.html#main-spec
     # __spec__ may not exist, e.g. when running in a Conda env.
diff --git a/test_project/manage.py b/test_project/manage.py
new file mode 100644
index 0000000000..7305b7d827
--- /dev/null
+++ b/test_project/manage.py
@@ -0,0 +1,18 @@
+#!/usr/bin/env python
+"""Django's command-line utility for administrative tasks."""
+import os
+import sys
+
+def main():
+    """Run administrative tasks."""
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_project.settings')
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+if __name__ == '__main__':
+    main()
diff --git a/test_project/test_app/__init__.py b/test_project/test_app/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_project/test_app/apps.py b/test_project/test_app/apps.py
new file mode 100644
index 0000000000..8f6dc12e7b
--- /dev/null
+++ b/test_project/test_app/apps.py
@@ -0,0 +1,9 @@
+
+from django.apps import AppConfig
+
+class TestAppConfig(AppConfig):
+    default_auto_field = 'django.db.models.BigAutoField'
+    name = 'test_app'
+
+    def ready(self):
+        print("=== %s" % 'UTF-8' if sys._xoptions.get('utf8') else 'default encoding')
diff --git a/test_project/test_project/__init__.py b/test_project/test_project/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_project/test_project/settings.py b/test_project/test_project/settings.py
new file mode 100644
index 0000000000..6b791c041e
--- /dev/null
+++ b/test_project/test_project/settings.py
@@ -0,0 +1,26 @@
+
+from pathlib import Path
+BASE_DIR = Path(__file__).resolve().parent.parent
+SECRET_KEY = 'test-key'
+DEBUG = True
+ALLOWED_HOSTS = []
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+    'test_app',
+]
+MIDDLEWARE = []
+ROOT_URLCONF = 'test_project.urls'
+TEMPLATES = []
+WSGI_APPLICATION = 'test_project.wsgi.application'
+DATABASES = {'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': BASE_DIR / 'db.sqlite3'}}
+LANGUAGE_CODE = 'en-us'
+TIME_ZONE = 'UTC'
+USE_I18N = True
+USE_TZ = True
+STATIC_URL = 'static/'
+DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
diff --git a/test_project/test_project/urls.py b/test_project/test_project/urls.py
new file mode 100644
index 0000000000..3629c4170d
--- /dev/null
+++ b/test_project/test_project/urls.py
@@ -0,0 +1,3 @@
+
+from django.urls import path
+urlpatterns = []
diff --git a/test_project/test_project/wsgi.py b/test_project/test_project/wsgi.py
new file mode 100644
index 0000000000..728dfcca90
--- /dev/null
+++ b/test_project/test_project/wsgi.py
@@ -0,0 +1,5 @@
+
+import os
+from django.core.wsgi import get_wsgi_application
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_project.settings')
+application = get_wsgi_application()
diff --git a/test_xoptions.py b/test_xoptions.py
new file mode 100644
index 0000000000..440ec19583
--- /dev/null
+++ b/test_xoptions.py
@@ -0,0 +1,107 @@
+import os
+import sys
+import time
+import threading
+from pathlib import Path
+
+# Create a test Django project structure
+project_dir = Path('test_project')
+project_dir.mkdir(exist_ok=True)
+
+# Create manage.py
+manage_py = project_dir / 'manage.py'
+manage_py.write_text('''#!/usr/bin/env python
+"""Django's command-line utility for administrative tasks."""
+import os
+import sys
+
+def main():
+    """Run administrative tasks."""
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_project.settings')
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+if __name__ == '__main__':
+    main()
+''')
+
+# Create project package
+project_pkg = project_dir / 'test_project'
+project_pkg.mkdir(exist_ok=True)
+(project_pkg / '__init__.py').touch()
+
+# Create settings.py
+settings_py = project_pkg / 'settings.py'
+settings_py.write_text('''
+from pathlib import Path
+BASE_DIR = Path(__file__).resolve().parent.parent
+SECRET_KEY = 'test-key'
+DEBUG = True
+ALLOWED_HOSTS = []
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+    'test_app',
+]
+MIDDLEWARE = []
+ROOT_URLCONF = 'test_project.urls'
+TEMPLATES = []
+WSGI_APPLICATION = 'test_project.wsgi.application'
+DATABASES = {'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': BASE_DIR / 'db.sqlite3'}}
+LANGUAGE_CODE = 'en-us'
+TIME_ZONE = 'UTC'
+USE_I18N = True
+USE_TZ = True
+STATIC_URL = 'static/'
+DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
+''')
+
+# Create urls.py
+urls_py = project_pkg / 'urls.py'
+urls_py.write_text('''
+from django.urls import path
+urlpatterns = []
+''')
+
+# Create wsgi.py
+wsgi_py = project_pkg / 'wsgi.py'
+wsgi_py.write_text('''
+import os
+from django.core.wsgi import get_wsgi_application
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_project.settings')
+application = get_wsgi_application()
+''')
+
+# Create test app
+app_dir = project_dir / 'test_app'
+app_dir.mkdir(exist_ok=True)
+(app_dir / '__init__.py').touch()
+
+# Create apps.py that will show the encoding
+apps_py = app_dir / 'apps.py'
+apps_py.write_text('''
+from django.apps import AppConfig
+
+class TestAppConfig(AppConfig):
+    default_auto_field = 'django.db.models.BigAutoField'
+    name = 'test_app'
+
+    def ready(self):
+        print("=== %s" % 'UTF-8' if sys._xoptions.get('utf8') else 'default encoding')
+''')
+
+# Change to project directory
+os.chdir(project_dir)
+
+# Start Django development server with -X utf8 option
+os.environ['PYTHONPATH'] = str(project_dir.parent)
+os.execv(sys.executable, [sys.executable, '-X', 'utf8=1', 'manage.py', 'runserver', '--nothreading'])
\ No newline at end of file
