diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py
index 118bfced89..934fbc6b0f 100644
--- a/astropy/io/fits/card.py
+++ b/astropy/io/fits/card.py
@@ -1299,14 +1299,22 @@ def _format_value(value):
 
 def _format_float(value):
     """Format a floating number to make sure it gets the decimal point."""
-    value_str = f"{value:.16G}"
-    if "." not in value_str and "E" not in value_str:
+    # First try using str() to get the most compact representation
+    value_str = str(value)
+    
+    # If str() gives us a string longer than 20 chars or doesn't include a decimal point,
+    # fall back to the scientific notation
+    if len(value_str) > 20 or ("." not in value_str and "E" not in value_str and "e" not in value_str):
+        value_str = f"{value:.16G}"
+        
+    # Ensure we have a decimal point if not in scientific notation
+    if "." not in value_str and "E" not in value_str and "e" not in value_str:
         value_str += ".0"
-    elif "E" in value_str:
+    elif "E" in value_str or "e" in value_str:
         # On some Windows builds of Python (and possibly other platforms?) the
         # exponent is zero-padded out to, it seems, three digits.  Normalize
         # the format to pad only to two digits.
-        significand, exponent = value_str.split("E")
+        significand, exponent = value_str.split("E" if "E" in value_str else "e")
         if exponent[0] in ("+", "-"):
             sign = exponent[0]
             exponent = exponent[1:]
diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py
index a8f4e1160f..91f4fbef6a 100644
--- a/astropy/io/fits/tests/test_header.py
+++ b/astropy/io/fits/tests/test_header.py
@@ -137,6 +137,10 @@ class TestHeaderFunctions(FitsTestCase):
         ):
             assert str(c) == _pad("FLOATNUM= -4.6737463674763E+32")
 
+        # Test for compact float representation
+        c = fits.Card("RADIUS", 0.009125, "[m] radius arround actuator to avoid")
+        assert str(c).strip() == "RADIUS  =             0.009125 / [m] radius arround actuator to avoid"
+
     def test_complex_value_card(self):
         """Test Card constructor with complex value"""
 
