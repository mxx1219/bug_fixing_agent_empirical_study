diff --git a/db.sqlite3 b/db.sqlite3
new file mode 100644
index 0000000000..6bafd6df38
Binary files /dev/null and b/db.sqlite3 differ
diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py
index f2ca8c8df9..d8eb71bb68 100644
--- a/django/db/backends/base/schema.py
+++ b/django/db/backends/base/schema.py
@@ -562,21 +562,39 @@ class BaseDatabaseSchemaEditor:
         }
         meta_index_names = {constraint.name for constraint in model._meta.indexes}
         columns = [model._meta.get_field(field).column for field in fields]
-        constraint_names = self._constraint_names(
+        # Get all constraints for these columns
+        all_constraints = self._constraint_names(
             model,
             columns,
             exclude=meta_constraint_names | meta_index_names,
             **constraint_kwargs,
         )
-        if len(constraint_names) != 1:
-            raise ValueError(
-                "Found wrong number (%s) of constraints for %s(%s)"
-                % (
-                    len(constraint_names),
-                    model._meta.db_table,
-                    ", ".join(columns),
+        
+        # If there's exactly one constraint, use it
+        if len(all_constraints) == 1:
+            constraint_names = all_constraints
+        else:
+            # If there are multiple constraints, try to find the one that matches our unique_together pattern
+            # This will typically be named something like "table_name_column_name_uniq"
+            table_name = model._meta.db_table
+            column_names = "_".join(columns)
+            expected_suffix = f"{table_name}_{column_names}_uniq"
+            matching_constraints = [
+                name for name in all_constraints
+                if name.lower().endswith(expected_suffix.lower())
+            ]
+            if len(matching_constraints) == 1:
+                constraint_names = matching_constraints
+            else:
+                # If we still can't uniquely identify the constraint, raise an error
+                raise ValueError(
+                    "Found wrong number (%s) of constraints for %s(%s)"
+                    % (
+                        len(all_constraints),
+                        model._meta.db_table,
+                        ", ".join(columns),
+                    )
                 )
-            )
         self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))
 
     def alter_db_table(self, model, old_db_table, new_db_table):
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..f06390ebe5
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,89 @@
+import os
+import sys
+
+# Add current directory to Python path
+sys.path.append(os.getcwd())
+
+# Create Django settings module
+settings_content = """
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': 'db.sqlite3',
+    }
+}
+
+INSTALLED_APPS = [
+    'testapp',
+]
+
+SECRET_KEY = 'dummy'
+"""
+
+with open('test_settings.py', 'w') as f:
+    f.write(settings_content)
+
+# Create app module
+os.makedirs('testapp', exist_ok=True)
+with open('testapp/__init__.py', 'w') as f:
+    pass
+
+# Create models module
+with open('testapp/models.py', 'w') as f:
+    f.write('''
+from django.db import models
+
+class TestModel(models.Model):
+    id = models.AutoField(primary_key=True)
+    
+    class Meta:
+        unique_together = (('id',),)
+''')
+
+import django
+from django.conf import settings
+from django.core.management import execute_from_command_line
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+django.setup()
+
+from django.db import models
+
+# Run migrations
+if __name__ == '__main__':
+    # Make migrations
+    sys.argv = ['manage.py', 'makemigrations', 'testapp']
+    execute_from_command_line(sys.argv)
+
+    # Try to apply migrations
+    sys.argv = ['manage.py', 'migrate', 'testapp']
+    execute_from_command_line(sys.argv)
+
+# End of script
+
+# Create app module
+os.makedirs('testapp', exist_ok=True)
+with open('testapp/__init__.py', 'w') as f:
+    pass
+
+# Create models module
+with open('testapp/models.py', 'w') as f:
+    f.write('''
+from django.db import models
+
+class TestModel(models.Model):
+    id = models.AutoField(primary_key=True)
+    
+    class Meta:
+        unique_together = (('id',),)
+''')
+
+if __name__ == '__main__':
+    # Make migrations
+    sys.argv = ['manage.py', 'makemigrations', 'testapp']
+    execute_from_command_line(sys.argv)
+
+    # Try to apply migrations
+    sys.argv = ['manage.py', 'migrate', 'testapp']
+    execute_from_command_line(sys.argv)
\ No newline at end of file
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..445913373e
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,13 @@
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': 'db.sqlite3',
+    }
+}
+
+INSTALLED_APPS = [
+    'testapp',
+]
+
+SECRET_KEY = 'dummy'
diff --git a/testapp/__init__.py b/testapp/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testapp/migrations/0001_initial.py b/testapp/migrations/0001_initial.py
new file mode 100644
index 0000000000..4c81ef6d1b
--- /dev/null
+++ b/testapp/migrations/0001_initial.py
@@ -0,0 +1,22 @@
+# Generated by Django 4.2.dev20220525111328 on 2024-12-21 06:18
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = []
+
+    operations = [
+        migrations.CreateModel(
+            name="TestModel",
+            fields=[
+                ("id", models.AutoField(primary_key=True, serialize=False)),
+            ],
+            options={
+                "unique_together": {("id",)},
+            },
+        ),
+    ]
diff --git a/testapp/migrations/0002_remove_unique_together.py b/testapp/migrations/0002_remove_unique_together.py
new file mode 100644
index 0000000000..abc80b2e73
--- /dev/null
+++ b/testapp/migrations/0002_remove_unique_together.py
@@ -0,0 +1,13 @@
+from django.db import migrations
+
+class Migration(migrations.Migration):
+    dependencies = [
+        ('testapp', '0001_initial'),
+    ]
+
+    operations = [
+        migrations.AlterUniqueTogether(
+            name='testmodel',
+            unique_together=set(),
+        ),
+    ]
\ No newline at end of file
diff --git a/testapp/migrations/0003_alter_testmodel_unique_together.py b/testapp/migrations/0003_alter_testmodel_unique_together.py
new file mode 100644
index 0000000000..35a6dfe6de
--- /dev/null
+++ b/testapp/migrations/0003_alter_testmodel_unique_together.py
@@ -0,0 +1,17 @@
+# Generated by Django 4.2.dev20220525111328 on 2024-12-21 06:18
+
+from django.db import migrations
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ("testapp", "0002_remove_unique_together"),
+    ]
+
+    operations = [
+        migrations.AlterUniqueTogether(
+            name="testmodel",
+            unique_together={("id",)},
+        ),
+    ]
diff --git a/testapp/migrations/__init__.py b/testapp/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testapp/models.py b/testapp/models.py
new file mode 100644
index 0000000000..e2b6d2cdc5
--- /dev/null
+++ b/testapp/models.py
@@ -0,0 +1,8 @@
+
+from django.db import models
+
+class TestModel(models.Model):
+    id = models.AutoField(primary_key=True)
+    
+    class Meta:
+        unique_together = (('id',),)
