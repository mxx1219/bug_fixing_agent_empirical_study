diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index d17232e4ec..f2afefb58c 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -957,19 +957,55 @@ class RenameIndex(IndexOperation):
                 fields=self.old_fields,
                 name=matching_index_name[0],
             )
+            new_index = models.Index(
+                fields=self.old_fields,
+                name=self.new_name,
+            )
         else:
             from_model_state = from_state.models[app_label, self.model_name_lower]
             old_index = from_model_state.get_index_by_name(self.old_name)
+            new_index = models.Index(
+                fields=old_index.fields,
+                name=self.new_name,
+            )
 
-        to_model_state = to_state.models[app_label, self.model_name_lower]
-        new_index = to_model_state.get_index_by_name(self.new_name)
         schema_editor.rename_index(model, old_index, new_index)
 
     def database_backwards(self, app_label, schema_editor, from_state, to_state):
+        model = from_state.apps.get_model(app_label, self.model_name)
+        if not self.allow_migrate_model(schema_editor.connection.alias, model):
+            return
+
         if self.old_fields:
-            # Backward operation with unnamed index is a no-op.
+            # For unnamed indexes, we need to find the auto-generated name
+            to_model = to_state.apps.get_model(app_label, self.model_name)
+            columns = [
+                to_model._meta.get_field(field).column for field in self.old_fields
+            ]
+            matching_index_name = schema_editor._constraint_names(
+                to_model, column_names=columns, index=True
+            )
+            if len(matching_index_name) != 1:
+                raise ValueError(
+                    "Found wrong number (%s) of indexes for %s(%s)."
+                    % (
+                        len(matching_index_name),
+                        to_model._meta.db_table,
+                        ", ".join(columns),
+                    )
+                )
+            old_index = models.Index(
+                fields=self.old_fields,
+                name=matching_index_name[0],
+            )
+            new_index = models.Index(
+                fields=self.old_fields,
+                name=self.new_name,
+            )
+            schema_editor.rename_index(model, new_index, old_index)
             return
 
+        # For named indexes, swap the names and use database_forwards
         self.new_name_lower, self.old_name_lower = (
             self.old_name_lower,
             self.new_name_lower,
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..bd87a5f713
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,68 @@
+import os
+os.environ['DJANGO_SETTINGS_MODULE'] = 'django.conf.global_settings'
+os.environ['DJANGO_ALLOW_ASYNC_UNSAFE'] = 'true'
+
+from django.conf import settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=['django.contrib.contenttypes'],
+)
+
+import django
+from django.db import connection
+from django.db.migrations.state import ProjectState, ModelState
+from django.db.migrations.operations import RenameIndex
+from django.db import models
+
+# Initialize Django
+django.setup()
+
+# Create a test model
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    age = models.IntegerField()
+
+    class Meta:
+        app_label = 'testapp'
+        unique_together = [('name', 'age')]
+
+# Create states
+project_state = ProjectState()
+model_state = ModelState.from_model(TestModel)
+project_state.add_model(model_state)
+
+# Create a new state with renamed index
+new_state = project_state.clone()
+
+# Create the table first
+with connection.schema_editor() as editor:
+    editor.create_model(TestModel)
+
+# Create RenameIndex operation
+operation = RenameIndex(
+    model_name='TestModel',
+    new_name='new_pony_test_idx',
+    old_fields=('name', 'age')
+)
+
+# Apply forward operation
+print("Applying forward operation...")
+with connection.schema_editor() as editor:
+    operation.database_forwards('testapp', editor, project_state, new_state)
+
+# Apply backward operation
+print("Applying backward operation...")
+with connection.schema_editor() as editor:
+    operation.database_backwards('testapp', editor, new_state, project_state)
+
+# Re-apply forward operation - this should work but currently fails
+print("Re-applying forward operation...")
+with connection.schema_editor() as editor:
+    operation.database_forwards('testapp', editor, project_state, new_state)
+
+print("Done!")
\ No newline at end of file
