diff --git a/django/contrib/admin/filters.py b/django/contrib/admin/filters.py
index d65e01d5e2..f6710f7e68 100644
--- a/django/contrib/admin/filters.py
+++ b/django/contrib/admin/filters.py
@@ -198,6 +198,8 @@ class RelatedFieldListFilter(FieldListFilter):
         related_admin = model_admin.admin_site._registry.get(field.remote_field.model)
         if related_admin is not None:
             ordering = related_admin.get_ordering(request)
+        if not ordering:
+            ordering = field.remote_field.model._meta.ordering or ()
         return field.get_choices(include_blank=False, ordering=ordering)
 
     def choices(self, changelist):
@@ -419,4 +421,10 @@ FieldListFilter.register(lambda f: True, AllValuesFieldListFilter)
 class RelatedOnlyFieldListFilter(RelatedFieldListFilter):
     def field_choices(self, field, request, model_admin):
         pk_qs = model_admin.get_queryset(request).distinct().values_list('%s__pk' % self.field_path, flat=True)
-        return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs})
+        ordering = ()
+        related_admin = model_admin.admin_site._registry.get(field.remote_field.model)
+        if related_admin is not None:
+            ordering = related_admin.get_ordering(request)
+        if not ordering:
+            ordering = field.remote_field.model._meta.ordering or ()
+        return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs}, ordering=ordering)
diff --git a/test_ordering.py b/test_ordering.py
new file mode 100644
index 0000000000..2cf0c0e290
--- /dev/null
+++ b/test_ordering.py
@@ -0,0 +1,125 @@
+import os
+import django
+from django.conf import settings
+from django.contrib import admin
+from django.db import models
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        INSTALLED_APPS=[
+            'django.contrib.admin',
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+            'django.contrib.sessions',
+            'django.contrib.messages',
+            '__main__',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        MIDDLEWARE=[
+            'django.contrib.sessions.middleware.SessionMiddleware',
+            'django.contrib.auth.middleware.AuthenticationMiddleware',
+            'django.contrib.messages.middleware.MessageMiddleware',
+        ],
+        ROOT_URLCONF='__main__',
+        SECRET_KEY='dummy-key-for-test',
+    )
+    django.setup()
+
+# Create database tables
+from django.core.management import call_command
+call_command('migrate', verbosity=0)
+
+# Define test models
+class Author(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        ordering = ['name']  # Define default ordering
+    
+    def __str__(self):
+        return self.name
+
+class Book(models.Model):
+    title = models.CharField(max_length=100)
+    author = models.ForeignKey(Author, on_delete=models.CASCADE)
+    
+    def __str__(self):
+        return self.title
+
+# Define admin classes
+class AuthorAdmin(admin.ModelAdmin):
+    pass  # No explicit ordering defined
+
+class BookAdmin(admin.ModelAdmin):
+    list_filter = ['author']  # Use RelatedFieldListFilter
+
+# Register models with admin
+admin.site.register(Author, AuthorAdmin)
+admin.site.register(Book, BookAdmin)
+
+# Create tables for our models
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Author)
+    schema_editor.create_model(Book)
+
+# Test the functionality
+def test_ordering():
+    # Create test data
+    author1 = Author.objects.create(name='Zoe Smith')
+    author2 = Author.objects.create(name='Alice Brown')
+    author3 = Author.objects.create(name='Bob Jones')
+    
+    book1 = Book.objects.create(title='Book 1', author=author1)
+    book2 = Book.objects.create(title='Book 2', author=author2)
+    book3 = Book.objects.create(title='Book 3', author=author3)
+    
+    # Get the admin site
+    admin_site = admin.site
+    book_admin = admin_site._registry[Book]
+    
+    # Create a mock request
+    from django.contrib.auth.models import User
+    from django.test.client import RequestFactory
+    factory = RequestFactory()
+    request = factory.get('/')
+    request.user = User.objects.create_superuser('admin', 'admin@test.com', 'password')
+    
+    # Get the list filter
+    from django.contrib.admin.filters import RelatedFieldListFilter
+    filter_instance = RelatedFieldListFilter(
+        Book._meta.get_field('author'),
+        request,
+        {'author__id__exact': ''},
+        Book,
+        book_admin,
+        'author'
+    )
+    
+    # Create a mock changelist
+    from django.contrib.admin.views.main import ChangeList
+    class MockChangeList:
+        def get_query_string(self, *args, **kwargs):
+            return ''
+    
+    # Get choices and verify ordering
+    choices = [choice['display'] for choice in filter_instance.choices(MockChangeList()) if choice.get('display')]
+    print("All choices:", choices)
+    
+    # Filter out the "All" choice and verify ordering
+    author_choices = [c for c in choices if c != 'All']
+    print("Author choices:", author_choices)
+    
+    # Verify that choices are ordered by name (Meta.ordering)
+    assert author_choices == sorted(author_choices), "Choices are not properly ordered!"
+    print("Test passed! Choices are properly ordered.")
+
+if __name__ == '__main__':
+    test_ordering()
\ No newline at end of file
