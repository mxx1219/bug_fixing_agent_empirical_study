diff --git a/django/contrib/auth/tokens.py b/django/contrib/auth/tokens.py
index 93e2d71af2..32fda3fb2b 100644
--- a/django/contrib/auth/tokens.py
+++ b/django/contrib/auth/tokens.py
@@ -94,7 +94,8 @@ class PasswordResetTokenGenerator:
         # Truncate microseconds so that tokens are consistent even if the
         # database doesn't support microseconds.
         login_timestamp = '' if user.last_login is None else user.last_login.replace(microsecond=0, tzinfo=None)
-        return str(user.pk) + user.password + str(login_timestamp) + str(timestamp)
+        email = getattr(user, 'email', '')  # Handle cases where user might not have an email field
+        return str(user.pk) + user.password + str(login_timestamp) + str(timestamp) + str(email)
 
     def _num_seconds(self, dt):
         return int((dt - datetime(2001, 1, 1)).total_seconds())
diff --git a/test_token_invalidation.py b/test_token_invalidation.py
new file mode 100644
index 0000000000..9678846f0b
--- /dev/null
+++ b/test_token_invalidation.py
@@ -0,0 +1,60 @@
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings first
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.auth',
+        'django.contrib.contenttypes',
+    ],
+    PASSWORD_HASHERS=['django.contrib.auth.hashers.MD5PasswordHasher'],
+    SECRET_KEY='dummy-key-for-tests',
+    DEFAULT_HASHING_ALGORITHM='sha256',
+    PASSWORD_RESET_TIMEOUT=3600,
+)
+
+django.setup()
+
+# Run migrations
+from django.core.management import call_command
+call_command('migrate')
+
+# Now import Django components
+from django.contrib.auth import get_user_model
+from django.contrib.auth.tokens import default_token_generator
+
+def test_token_invalidation():
+    User = get_user_model()
+    
+    # Create and save a test user
+    user = User.objects.create_user(
+        username='testuser',
+        email='foo@example.com',
+        password='oldpassword'
+    )
+    
+    # Generate password reset token
+    token = default_token_generator.make_token(user)
+    print(f"Generated token: {token}")
+    
+    # Verify token is valid
+    is_valid = default_token_generator.check_token(user, token)
+    print(f"Token valid before email change: {is_valid}")
+    
+    # Change user's email
+    user.email = 'bar@example.com'
+    user.save()
+    
+    # Verify token is now invalid
+    is_valid = default_token_generator.check_token(user, token)
+    print(f"Token valid after email change: {is_valid}")
+
+if __name__ == '__main__':
+    test_token_invalidation()
\ No newline at end of file
