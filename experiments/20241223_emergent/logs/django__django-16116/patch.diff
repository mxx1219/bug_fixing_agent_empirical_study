diff --git a/django/core/management/commands/makemigrations.py b/django/core/management/commands/makemigrations.py
index 2e97d9064b..23967e8022 100644
--- a/django/core/management/commands/makemigrations.py
+++ b/django/core/management/commands/makemigrations.py
@@ -248,12 +248,14 @@ class Command(BaseCommand):
                 else:
                     self.log("No changes detected")
         else:
+            if check_changes:
+                if self.verbosity >= 1:
+                    self.log("Model changes detected that need to be migrated")
+                sys.exit(1)
             if self.update:
                 self.write_to_last_migration_files(changes)
             else:
                 self.write_migration_files(changes)
-            if check_changes:
-                sys.exit(1)
 
     def write_to_last_migration_files(self, changes):
         loader = MigrationLoader(connections[DEFAULT_DB_ALIAS])
diff --git a/test_app.py b/test_app.py
new file mode 100644
index 0000000000..857085573a
--- /dev/null
+++ b/test_app.py
@@ -0,0 +1,53 @@
+import os
+import sys
+import django
+from django.conf import settings
+from django.core.management import execute_from_command_line
+
+# Create test app structure
+os.makedirs('testapp/migrations', exist_ok=True)
+with open('testapp/__init__.py', 'w') as f:
+    f.write('')
+with open('testapp/migrations/__init__.py', 'w') as f:
+    f.write('')
+with open('testapp/models.py', 'w') as f:
+    f.write('''
+from django.db import models
+
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    description = models.TextField()  # New field that needs migration
+''')
+
+# Add current directory to Python path
+sys.path.append(os.getcwd())
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.auth',
+        'django.contrib.contenttypes',
+        'testapp',
+    ],
+    SECRET_KEY='dummy'
+)
+
+django.setup()
+
+print("Testing makemigrations --check...")
+try:
+    execute_from_command_line(['django-admin', 'makemigrations', '--check'])
+    print("Exit code: 0")
+except SystemExit as e:
+    print(f"Exit code: {e.code}")
+
+# Clean up
+import shutil
+shutil.rmtree('testapp')
\ No newline at end of file
diff --git a/test_makemigrations.py b/test_makemigrations.py
new file mode 100644
index 0000000000..e40ab519a6
--- /dev/null
+++ b/test_makemigrations.py
@@ -0,0 +1,54 @@
+import os
+import sys
+import shutil
+import django
+from django.conf import settings
+from django.core.management import execute_from_command_line
+
+# Add current directory to Python path
+sys.path.append(os.getcwd())
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+            'testapp',
+        ],
+        SECRET_KEY='dummy'
+    )
+    django.setup()
+
+# Create test app structure
+os.makedirs('testapp/migrations', exist_ok=True)
+with open('testapp/__init__.py', 'w') as f:
+    f.write('')
+with open('testapp/migrations/__init__.py', 'w') as f:
+    f.write('')
+
+# Create models.py with a model that needs migration
+with open('testapp/models.py', 'w') as f:
+    f.write('''
+from django.db import models
+
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+''')
+
+print("Testing makemigrations --check...")
+try:
+    execute_from_command_line(['manage.py', 'makemigrations', '--check'])
+    print("Exit code: 0")
+except SystemExit as e:
+    print(f"Exit code: {e.code}")
+
+# Clean up
+os.chdir('..')
+shutil.rmtree('test_project')
\ No newline at end of file
diff --git a/test_project/manage.py b/test_project/manage.py
new file mode 100644
index 0000000000..d76e183b15
--- /dev/null
+++ b/test_project/manage.py
@@ -0,0 +1,8 @@
+#!/usr/bin/env python
+import os
+import sys
+
+if __name__ == "__main__":
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "test_project.settings")
+    from django.core.management import execute_from_command_line
+    execute_from_command_line(sys.argv)
diff --git a/test_project/test_project/__init__.py b/test_project/test_project/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_project/test_project/settings.py b/test_project/test_project/settings.py
new file mode 100644
index 0000000000..9f5a404276
--- /dev/null
+++ b/test_project/test_project/settings.py
@@ -0,0 +1,17 @@
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': 'db.sqlite3',
+    }
+}
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+    'testapp',
+]
+SECRET_KEY = 'dummy'
diff --git a/test_project/testapp/__init__.py b/test_project/testapp/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_project/testapp/migrations/__init__.py b/test_project/testapp/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_project/testapp/models.py b/test_project/testapp/models.py
new file mode 100644
index 0000000000..9f1bd10962
--- /dev/null
+++ b/test_project/testapp/models.py
@@ -0,0 +1,5 @@
+
+from django.db import models
+
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
diff --git a/test_simple.py b/test_simple.py
new file mode 100644
index 0000000000..8496355347
--- /dev/null
+++ b/test_simple.py
@@ -0,0 +1,51 @@
+import os
+import sys
+import django
+from django.conf import settings
+from django.core.management import execute_from_command_line
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.auth',
+        'django.contrib.contenttypes',
+        '.',  # Current directory as an app
+    ],
+    SECRET_KEY='dummy'
+)
+
+django.setup()
+
+# Create a migrations directory
+os.makedirs('migrations', exist_ok=True)
+with open('migrations/__init__.py', 'w') as f:
+    f.write('')
+
+# Create a temporary models.py file
+with open('models.py', 'w') as f:
+    f.write('''
+from django.db import models
+
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    description = models.TextField()  # New field that needs migration
+''')
+
+print("Testing makemigrations --check...")
+try:
+    execute_from_command_line(['django-admin', 'makemigrations', '--check'])
+    print("Exit code: 0")
+except SystemExit as e:
+    print(f"Exit code: {e.code}")
+
+# Clean up
+import shutil
+os.remove('models.py')
+shutil.rmtree('migrations')
\ No newline at end of file
