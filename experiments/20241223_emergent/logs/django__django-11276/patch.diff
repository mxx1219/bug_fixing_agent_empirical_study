diff --git a/benchmark.py b/benchmark.py
new file mode 100644
index 0000000000..76e591db48
--- /dev/null
+++ b/benchmark.py
@@ -0,0 +1,17 @@
+import timeit
+
+# Test with Django's current implementation
+setup_django = '''
+from django.utils.html import escape
+text = "Hello & World < > ' \\""
+'''
+print("Django's current implementation:")
+print(timeit.repeat(stmt='escape(text)', setup=setup_django, number=100000, repeat=5))
+
+# Test with Python's html.escape
+setup_stdlib = '''
+from html import escape
+text = "Hello & World < > ' \\""
+'''
+print("\nPython stdlib html.escape:")
+print(timeit.repeat(stmt='escape(text)', setup=setup_stdlib, number=100000, repeat=5))
\ No newline at end of file
diff --git a/django/utils/html.py b/django/utils/html.py
index 9c519978f5..875b3bd35b 100644
--- a/django/utils/html.py
+++ b/django/utils/html.py
@@ -2,7 +2,9 @@
 
 import json
 import re
+from html import escape as html_escape
 from html.parser import HTMLParser
+from django.utils.encoding import force_str
 from urllib.parse import (
     parse_qsl, quote, unquote, urlencode, urlsplit, urlunsplit,
 )
@@ -33,17 +35,15 @@ _html_escapes = {
 }
 
 
-@keep_lazy(str, SafeString)
+@keep_lazy_text
 def escape(text):
     """
-    Return the given text with ampersands, quotes and angle brackets encoded
-    for use in HTML.
-
-    Always escape input, even if it's already escaped and marked as such.
-    This may result in double-escaping. If this is a concern, use
-    conditional_escape() instead.
+    Return the given text with ampersands, quotes and angle brackets encoded for use in HTML.
+    
+    This is a wrapper around html.escape() from the Python standard library,
+    which is available since Python 3.2.
     """
-    return mark_safe(str(text).translate(_html_escapes))
+    return mark_safe(html_escape(force_str(text)))
 
 
 _js_escapes = {
