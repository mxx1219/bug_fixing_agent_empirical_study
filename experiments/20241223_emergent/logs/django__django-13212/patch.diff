diff --git a/django/core/validators.py b/django/core/validators.py
index 84b4f31ec7..f21f426cf7 100644
--- a/django/core/validators.py
+++ b/django/core/validators.py
@@ -48,7 +48,7 @@ class RegexValidator:
         regex_matches = self.regex.search(str(value))
         invalid_input = regex_matches if self.inverse_match else not regex_matches
         if invalid_input:
-            raise ValidationError(self.message, code=self.code)
+            raise ValidationError(self.message, code=self.code, params={'value': value})
 
     def __eq__(self, other):
         return (
@@ -208,12 +208,12 @@ class EmailValidator:
 
     def __call__(self, value):
         if not value or '@' not in value:
-            raise ValidationError(self.message, code=self.code)
+            raise ValidationError(self.message, code=self.code, params={'value': value})
 
         user_part, domain_part = value.rsplit('@', 1)
 
         if not self.user_regex.match(user_part):
-            raise ValidationError(self.message, code=self.code)
+            raise ValidationError(self.message, code=self.code, params={'value': value})
 
         if (domain_part not in self.domain_allowlist and
                 not self.validate_domain_part(domain_part)):
@@ -225,7 +225,7 @@ class EmailValidator:
             else:
                 if self.validate_domain_part(domain_part):
                     return
-            raise ValidationError(self.message, code=self.code)
+            raise ValidationError(self.message, code=self.code, params={'value': value})
 
     def validate_domain_part(self, domain_part):
         if self.domain_regex.match(domain_part):
diff --git a/test_validator.py b/test_validator.py
new file mode 100644
index 0000000000..c24e0e8d3b
--- /dev/null
+++ b/test_validator.py
@@ -0,0 +1,15 @@
+from django.core.validators import EmailValidator, RegexValidator, validate_email
+
+# Test with email validator
+email_validator = EmailValidator(message="'%(value)s' is not a valid email.")
+try:
+    email_validator("not.an.email")
+except Exception as e:
+    print(f"Email validation error: {str(e)}")
+
+# Test with regex validator
+regex_validator = RegexValidator(r'^[0-9]+$', message="'%(value)s' is not a valid number.")
+try:
+    regex_validator("abc")
+except Exception as e:
+    print(f"Regex validation error: {str(e)}")
\ No newline at end of file
