diff --git a/django/template/base.py b/django/template/base.py
index 9f4fe3363d..5d37319d21 100644
--- a/django/template/base.py
+++ b/django/template/base.py
@@ -164,6 +164,8 @@ class Template:
 
     def render(self, context):
         "Display stage -- can be called many times"
+        if not isinstance(context, Context):
+            context = Context(context, autoescape=self.engine.autoescape)
         with context.render_context.push_state(self):
             if context.template is None:
                 with context.bind_template(self):
diff --git a/django/template/engine.py b/django/template/engine.py
index dfaa67ba12..ff9ce58d59 100644
--- a/django/template/engine.py
+++ b/django/template/engine.py
@@ -160,7 +160,7 @@ class Engine:
         if isinstance(context, Context):
             return t.render(context)
         else:
-            return t.render(Context(context))
+            return t.render(Context(context, autoescape=self.autoescape))
 
     def select_template(self, template_name_list):
         """
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..d9d1751be1
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,18 @@
+from django.template import Engine
+
+# Create an engine with autoescape=False
+engine = Engine(autoescape=False)
+
+# Create a template with HTML that should not be escaped
+template_str = "Hello {{ name }}"
+
+# Create context with HTML content that would normally be escaped
+context_dict = {'name': '<b>World</b>'}
+
+# This should not escape the HTML since autoescape=False
+template = engine.from_string(template_str)
+result = template.render(context_dict)
+
+print("Result:", result)
+print("Expected: Hello <b>World</b>")
+print("Got same as expected:", result == "Hello <b>World</b>")
\ No newline at end of file
