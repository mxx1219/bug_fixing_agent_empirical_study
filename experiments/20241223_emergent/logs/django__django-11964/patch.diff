diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index d610dc86f0..61dd307f3f 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -792,6 +792,9 @@ class Field(RegisterLookupMixin):
         """Perform preliminary non-db specific value checks and conversions."""
         if isinstance(value, Promise):
             value = value._proxy____cast()
+        # Handle TextChoices/IntegerChoices enum members
+        if hasattr(value, 'value'):
+            return value.value
         return value
 
     def get_db_prep_value(self, value, connection, prepared=False):
@@ -1010,12 +1013,30 @@ class CharField(Field):
     def to_python(self, value):
         if isinstance(value, str) or value is None:
             return value
+        # Handle TextChoices enum members by returning their value
+        if hasattr(value, 'value') and isinstance(value.value, str):
+            return value.value
         return str(value)
 
     def get_prep_value(self, value):
+        # Handle TextChoices/IntegerChoices enum members first
+        if hasattr(value, 'value') and isinstance(value.value, str):
+            return value.value
         value = super().get_prep_value(value)
         return self.to_python(value)
 
+    def __get__(self, instance, owner):
+        """
+        Return the value of this field in the given model instance.
+        Override to handle TextChoices/IntegerChoices enum members.
+        """
+        if instance is None:
+            return self
+        value = instance.__dict__.get(self.attname)
+        if hasattr(value, 'value'):
+            return value.value
+        return value
+
     def formfield(self, **kwargs):
         # Passing max_length to forms.CharField means that the value's length
         # will be validated twice. This is considered acceptable since we want
diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py
index 189fb4fa44..da1452bdc0 100644
--- a/django/db/models/query_utils.py
+++ b/django/db/models/query_utils.py
@@ -136,7 +136,11 @@ class DeferredAttribute:
                 instance.refresh_from_db(fields=[field_name])
                 val = getattr(instance, field_name)
             data[field_name] = val
-        return data[field_name]
+        value = data[field_name]
+        # Handle TextChoices/IntegerChoices enum members
+        if hasattr(value, 'value'):
+            return value.value
+        return value
 
     def _check_parent_chain(self, instance):
         """
diff --git a/reproduce_enum_issue.py b/reproduce_enum_issue.py
new file mode 100644
index 0000000000..95f20ce407
--- /dev/null
+++ b/reproduce_enum_issue.py
@@ -0,0 +1,34 @@
+import os
+import django
+from django.conf import settings
+from django.db import models
+from django.utils.translation import gettext_lazy as _
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+        INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth'],
+        MIDDLEWARE=[],
+    )
+    django.setup()
+
+# Create the tables
+from django.core.management import call_command
+call_command('migrate')
+
+class MyChoice(models.TextChoices):
+    FIRST_CHOICE = "first", _("The first choice, it is")
+    SECOND_CHOICE = "second", _("The second choice, it is")
+
+class MyObject(models.Model):
+    my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)
+    
+    class Meta:
+        app_label = 'django.contrib.contenttypes'
+
+# Test code
+my_object = MyObject(my_str_value=MyChoice.FIRST_CHOICE)
+print(f"Type of my_str_value: {type(my_object.my_str_value)}")
+print(f"String value: {str(my_object.my_str_value)}")
+print(f"Raw value: {my_object.my_str_value}")
\ No newline at end of file
