diff --git a/django/core/management/base.py b/django/core/management/base.py
index abc6f79a15..3e9300116d 100644
--- a/django/core/management/base.py
+++ b/django/core/management/base.py
@@ -71,6 +71,37 @@ class CommandParser(ArgumentParser):
         else:
             raise CommandError("Error: %s" % message)
 
+    def add_subparsers(self, **kwargs):
+        """
+        Custom add_subparsers that uses CommandParser for the subparser instances
+        to ensure consistent error handling.
+        """
+        subparsers_action = super().add_subparsers(**kwargs)
+        original_add_parser = subparsers_action.add_parser
+        def add_parser(name, **kwargs):
+            # Create a new CommandParser instance directly
+            parser_kwargs = {
+                'prog': kwargs.get('prog'),
+                'usage': kwargs.get('usage'),
+                'description': kwargs.get('description'),
+                'epilog': kwargs.get('epilog'),
+                'parents': kwargs.get('parents', []),
+                'formatter_class': kwargs.get('formatter_class'),
+                'prefix_chars': kwargs.get('prefix_chars'),
+                'allow_abbrev': kwargs.get('allow_abbrev'),
+            }
+            # Filter out None values
+            parser_kwargs = {k: v for k, v in parser_kwargs.items() if v is not None}
+            parser = CommandParser(**parser_kwargs)
+            # Copy over attributes that affect error handling
+            parser.called_from_command_line = self.called_from_command_line
+            parser.missing_args_message = self.missing_args_message
+            # Register the parser in the parent's subparsers
+            subparsers_action._name_parser_map[name] = parser
+            return parser
+        subparsers_action.add_parser = add_parser
+        return subparsers_action
+
 
 def handle_default_options(options):
     """
diff --git a/test_subparser.py b/test_subparser.py
new file mode 100644
index 0000000000..2d2e17dc18
--- /dev/null
+++ b/test_subparser.py
@@ -0,0 +1,27 @@
+from django.core.management.base import BaseCommand, CommandParser
+
+class Command(BaseCommand):
+    def add_arguments(self, parser):
+        subparsers = parser.add_subparsers(required=True)
+        create = subparsers.add_parser("create")
+        create.add_argument("name")
+
+    def handle(self, *args, **options):
+        pass
+
+if __name__ == "__main__":
+    # Simulate django-admin/manage.py environment
+    cmd = Command()
+    cmd._called_from_command_line = True
+    
+    # Test case 1: Missing subcommand
+    try:
+        cmd.run_from_argv(['manage.py', 'test_cmd'])
+    except SystemExit:
+        print("Test 1 - Missing subcommand - Expected error format")
+    
+    # Test case 2: Missing required argument
+    try:
+        cmd.run_from_argv(['manage.py', 'test_cmd', 'create'])
+    except SystemExit:
+        print("Test 2 - Missing argument - Should show formatted error")
\ No newline at end of file
