diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py
index a778cd413b..072b159ab3 100644
--- a/django/db/models/aggregates.py
+++ b/django/db/models/aggregates.py
@@ -43,12 +43,16 @@ class Aggregate(Func):
         self.default = default
         super().__init__(*expressions, **extra)
 
-    def get_source_fields(self):
-        # Don't return the filter expression since it's not a source field.
-        return [e._output_field_or_none for e in super().get_source_expressions()]
-
     def get_source_expressions(self):
         source_expressions = super().get_source_expressions()
+        # Check if any source expression is a window function
+        for expr in source_expressions:
+            if getattr(expr, "contains_over_clause", False):
+                raise FieldError(
+                    f"Cannot use {self.__class__.__name__} with window functions. "
+                    "Aggregate function calls cannot contain window function calls. "
+                    "Use a subquery with the window function instead."
+                )
         if self.filter:
             return source_expressions + [self.filter]
         return source_expressions
@@ -60,6 +64,14 @@ class Aggregate(Func):
     def resolve_expression(
         self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False
     ):
+        # Check if we're trying to aggregate over a window function
+        for expr in self.get_source_expressions():
+            if getattr(expr, "window_compatible", False) and getattr(expr, "_window_frame", None):
+                name = getattr(expr, "name", repr(expr))
+                raise FieldError(
+                    f"Cannot compute {self.__class__.__name__}('{name}'): '{name}' is a window function. "
+                    "Aggregate function calls cannot contain window function calls."
+                )
         # Aggregates are not allowed in UPDATE queries, so ignore for_save
         c = super().resolve_expression(query, allow_joins, reuse, summarize)
         c.filter = c.filter and c.filter.resolve_expression(
@@ -88,6 +100,18 @@ class Aggregate(Func):
                         "Cannot compute %s('%s'): '%s' is an aggregate"
                         % (c.name, name, name)
                     )
+                # Check if we're trying to aggregate over a window function
+                if getattr(expr, "window_compatible", False) and getattr(expr, "_window_frame", None):
+                    before_resolved = self.get_source_expressions()[index]
+                    name = (
+                        before_resolved.name
+                        if hasattr(before_resolved, "name")
+                        else repr(before_resolved)
+                    )
+                    raise FieldError(
+                        "Cannot compute %s('%s'): '%s' is a window function"
+                        % (c.name, name, name)
+                    )
         if (default := c.default) is None:
             return c
         if hasattr(default, "resolve_expression"):
diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 280cb967b4..aca8ac0314 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -1701,6 +1701,7 @@ class Window(SQLiteNumericMixin, Expression):
     # be introduced in the query as a result is not desired.
     contains_aggregate = False
     contains_over_clause = True
+    window_compatible = False  # Prevent window functions from being used in other window functions or aggregates
 
     def __init__(
         self,
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..dbb340aff8
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,88 @@
+import os
+import django
+from django.db import models
+from django.db.models import F, Sum, Window
+from django.db.models.functions import Coalesce
+from django.core.exceptions import FieldError
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+# Create a test settings module
+class TestSettings:
+    DATABASES = {
+        'default': {
+            'ENGINE': 'django.db.backends.postgresql',
+            'NAME': 'test_db',
+            'USER': 'postgres',
+            'PASSWORD': 'postgres',
+            'HOST': 'localhost',
+            'PORT': '5432',
+        }
+    }
+    INSTALLED_APPS = ['django.contrib.contenttypes']
+    SECRET_KEY = 'dummy'
+
+import sys
+sys.modules['test_settings'] = TestSettings()
+
+django.setup()
+
+# Create a test model
+class TestModel(models.Model):
+    date = models.DateField()
+    DJR = models.FloatField()
+
+    class Meta:
+        app_label = 'test_app'
+        managed = False
+
+# Test the error case
+print("Testing error case (should raise FieldError)...")
+
+# Create a queryset to get a query object
+queryset = TestModel.objects.all()
+
+try:
+    # Create a window function
+    window_fn = Window(
+        expression=Sum("DJR"),
+        order_by=F("date").asc(),
+    )
+    # Try to aggregate over the window function
+    result = Sum(window_fn)
+    # Force expression resolution using the query from our queryset
+    result.resolve_expression(queryset.query)
+    print("ERROR: This should have raised an exception!")
+except FieldError as e:
+    print(f"Got expected error: {str(e)}")
+
+print("\nTesting valid alternative...")
+print("Instead of aggregating over a window function, you should:")
+print("1. Use a subquery with the window function")
+print("2. Then aggregate over the subquery result")
+print("""
+Example:
+from django.db.models import Subquery, OuterRef
+
+# First create a subquery that calculates the cumulative sum
+subquery = TestModel.objects.filter(
+    date__lte=OuterRef('date')
+).annotate(
+    running_total=Window(
+        expression=Sum('DJR'),
+        order_by=F('date').asc()
+    )
+).values('running_total')[:1]
+
+# Then use it in the main query
+queryset = TestModel.objects.annotate(
+    cumul_DJR=Coalesce(Subquery(subquery), 0.0)
+)
+
+# Now you can safely aggregate
+aggregate = queryset.aggregate(
+    DJR_total=Sum('DJR'),
+    cumul_DJR_total=Sum('cumul_DJR')
+)
+""")
\ No newline at end of file
