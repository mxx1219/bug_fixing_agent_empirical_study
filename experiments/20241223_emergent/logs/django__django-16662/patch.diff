diff --git a/.gitignore b/.gitignore
index 238fb3a200..975c5364d8 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,6 @@ tests/coverage_html/
 tests/.coverage
 build/
 tests/report/
+*__pycache__*
+*venv*
+*_build*
diff --git a/django/db/migrations/writer.py b/django/db/migrations/writer.py
index a59f0c8dcb..a13b1d3998 100644
--- a/django/db/migrations/writer.py
+++ b/django/db/migrations/writer.py
@@ -173,9 +173,21 @@ class MigrationWriter:
         else:
             imports.add("from django.db import migrations")
 
-        # Sort imports by the package / module to be imported (the part after
-        # "from" in "from ... import ..." or after "import" in "import ...").
-        sorted_imports = sorted(imports, key=lambda i: i.split()[1])
+        # First sort imports into two groups: "import" and "from"
+        import_lines = []
+        from_lines = []
+        for imp in imports:
+            if imp.startswith('import '):
+                import_lines.append(imp)
+            else:
+                from_lines.append(imp)
+        
+        # Sort each group by the module name
+        import_lines.sort(key=lambda i: i.split()[1])
+        from_lines.sort(key=lambda i: i.split()[1])
+        
+        # Join the groups with import lines first
+        sorted_imports = import_lines + ([""] if import_lines and from_lines else []) + from_lines
         items["imports"] = "\n".join(sorted_imports) + "\n" if imports else ""
         if migration_imports:
             items["imports"] += (
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..70cbe2cdf3
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,47 @@
+from django.conf import settings
+from django.db import migrations
+from django.db.migrations.writer import MigrationWriter
+
+# Configure minimal settings
+settings.configure(USE_TZ=True)
+
+class TestMigration:
+    def __init__(self):
+        self.operations = []
+        self.dependencies = []
+        self.name = "test_migration"
+        self.app_label = "test_app"
+        self.initial = False
+        self.replaces = []
+
+# Create a test migration that will need various imports
+migration = TestMigration()
+writer = MigrationWriter(migration)
+
+# Create a mock operation that will require our test imports
+class MockOperation:
+    def __init__(self):
+        self.serialization_expand_args = ['datetime', 'time', 'django.utils.timezone']
+
+    def deconstruct(self):
+        return (
+            "MockOperation",
+            [],
+            {
+                "datetime_field": "datetime.datetime.now()",
+                "time_field": "time.time()",
+                "model_field": "models.CharField(max_length=100)",
+                "timezone_field": "django.utils.timezone.now()",
+            }
+        )
+
+    def references_model(self, name, app_label=None):
+        return True
+
+migration.operations = [MockOperation()]
+
+# Generate the migration file content
+content = writer.as_string()
+print("Generated migration content:")
+print("-" * 40)
+print(content)
\ No newline at end of file
