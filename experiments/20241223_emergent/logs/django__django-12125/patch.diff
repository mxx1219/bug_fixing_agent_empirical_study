diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py
index 7d226955d5..6b3e10f1a0 100644
--- a/django/db/migrations/serializer.py
+++ b/django/db/migrations/serializer.py
@@ -90,13 +90,22 @@ class DeconstructableSerializer(BaseSerializer):
 
     @staticmethod
     def _serialize_path(path):
-        module, name = path.rsplit(".", 1)
-        if module == "django.db.models":
+        module_parts = path.split(".")
+        # Handle django.db.models specially
+        if module_parts[0] == "django" and module_parts[1] == "db" and module_parts[2] == "models":
             imports = {"from django.db import models"}
-            name = "models.%s" % name
+            name = "models." + ".".join(module_parts[3:])
         else:
-            imports = {"import %s" % module}
+            # For other paths, import the module part and keep the full path
+            # Find the last occurrence of a module (lowercase first letter)
+            module_end = len(module_parts)
+            for i, part in enumerate(module_parts):
+                if part[0].isupper():
+                    module_end = i
+                    break
+            module = ".".join(module_parts[:module_end])
             name = path
+            imports = {"import %s" % module}
         return name, imports
 
     def serialize(self):
diff --git a/test_app/__init__.py b/test_app/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_app/migrations/0001_initial.py b/test_app/migrations/0001_initial.py
new file mode 100644
index 0000000000..4a536a53a8
--- /dev/null
+++ b/test_app/migrations/0001_initial.py
@@ -0,0 +1,21 @@
+# Generated by Django 3.1 on 2024-12-21 12:25
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Thing',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('state', models.CharField(choices=[('on', 'on'), ('off', 'off')], max_length=10)),
+            ],
+        ),
+    ]
diff --git a/test_app/migrations/__init__.py b/test_app/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_app/models.py b/test_app/models.py
new file mode 100644
index 0000000000..6c615fe608
--- /dev/null
+++ b/test_app/models.py
@@ -0,0 +1,14 @@
+
+from django.db import models
+import enum
+
+class Thing(models.Model):
+    @enum.unique
+    class State(enum.Enum):
+        on = 'on'
+        off = 'off'
+    
+    state = models.CharField(
+        max_length=10,
+        choices=[(state.value, state.name) for state in State]
+    )
diff --git a/test_enum.py b/test_enum.py
new file mode 100644
index 0000000000..69fd7075e0
--- /dev/null
+++ b/test_enum.py
@@ -0,0 +1,51 @@
+import os
+import sys
+import django
+import enum
+from django.conf import settings
+from django.core.management import execute_from_command_line
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    INSTALLED_APPS=[
+        'test_app',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    }
+)
+
+# Create a test app directory
+os.makedirs('test_app', exist_ok=True)
+
+# Create models.py with the test case
+with open('test_app/models.py', 'w') as f:
+    f.write("""
+from django.db import models
+import enum
+
+class Thing(models.Model):
+    @enum.unique
+    class State(enum.Enum):
+        on = 'on'
+        off = 'off'
+    
+    state = models.CharField(
+        max_length=10,
+        choices=[(state.value, state.name) for state in State]
+    )
+""")
+
+# Create __init__.py to make it a package
+with open('test_app/__init__.py', 'w') as f:
+    f.write('')
+
+# Setup Django
+django.setup()
+
+# Run makemigrations
+execute_from_command_line(['manage.py', 'makemigrations', 'test_app'])
\ No newline at end of file
diff --git a/test_inner_class.py b/test_inner_class.py
new file mode 100644
index 0000000000..5c35b133ec
--- /dev/null
+++ b/test_inner_class.py
@@ -0,0 +1,45 @@
+import os
+import sys
+import django
+from django.conf import settings
+from django.core.management import execute_from_command_line
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    INSTALLED_APPS=[
+        'test_app',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    }
+)
+
+# Create a test app directory
+os.makedirs('test_app', exist_ok=True)
+
+# Create models.py with the test case
+with open('test_app/models.py', 'w') as f:
+    f.write("""
+from django.db import models
+
+class Outer(object):
+    class Inner(models.CharField):
+        pass
+
+class A(models.Model):
+    field = Outer.Inner(max_length=20)
+""")
+
+# Create __init__.py to make it a package
+with open('test_app/__init__.py', 'w') as f:
+    f.write('')
+
+# Setup Django
+django.setup()
+
+# Run makemigrations
+execute_from_command_line(['manage.py', 'makemigrations', 'test_app'])
\ No newline at end of file
