diff --git a/django/forms/formsets.py b/django/forms/formsets.py
index a89c35599f..1b0d4554e0 100644
--- a/django/forms/formsets.py
+++ b/django/forms/formsets.py
@@ -333,7 +333,7 @@ class BaseFormSet:
         self._non_form_errors.
         """
         self._errors = []
-        self._non_form_errors = self.error_class()
+        self._non_form_errors = self.error_class(error_class='nonform')
         empty_forms_count = 0
 
         if not self.is_bound:  # Stop further processing.
@@ -380,7 +380,7 @@ class BaseFormSet:
             # Give self.clean() a chance to do cross-form validation.
             self.clean()
         except ValidationError as e:
-            self._non_form_errors = self.error_class(e.error_list)
+            self._non_form_errors = self.error_class(e.error_list, error_class='nonform')
 
     def clean(self):
         """
diff --git a/docs/topics/forms/formsets.txt b/docs/topics/forms/formsets.txt
index 1f2c7c3fad..3e8d267a8d 100644
--- a/docs/topics/forms/formsets.txt
+++ b/docs/topics/forms/formsets.txt
@@ -162,7 +162,15 @@ Formset validation
 
 Validation with a formset is almost identical to a regular ``Form``. There is
 an ``is_valid`` method on the formset to provide a convenient way to validate
-all forms in the formset::
+all forms in the formset.
+
+Non-form errors in a formset (errors that are not specific to any particular form)
+are rendered with the ``nonform`` CSS class, similar to how non-field errors in a
+form are rendered with the ``nonfield`` CSS class. This allows custom error renderers
+to distinguish between form field errors, non-field errors (forms), and non-form
+errors (formsets).
+
+Here's an example of validating a formset::
 
     >>> from django.forms import formset_factory
     >>> from myapp.forms import ArticleForm
diff --git a/tests/forms_tests/tests/test_formset_css.py b/tests/forms_tests/tests/test_formset_css.py
new file mode 100644
index 0000000000..04e06707f1
--- /dev/null
+++ b/tests/forms_tests/tests/test_formset_css.py
@@ -0,0 +1,25 @@
+from django.test import TestCase
+from django.forms import formset_factory
+from django.forms import Form
+from django.forms import CharField
+
+class CSSClassFormSet(TestCase):
+    def test_non_form_errors_css_class(self):
+        """
+        The non_form_errors() should have the 'nonform' CSS class.
+        """
+        class SimpleForm(Form):
+            name = CharField()
+
+        FormSet = formset_factory(SimpleForm, extra=1, validate_max=True, max_num=2)
+        data = {
+            'form-TOTAL_FORMS': '3',  # This is more than max_num=2
+            'form-INITIAL_FORMS': '0',
+            'form-MAX_NUM_FORMS': '2',
+            'form-0-name': 'test',
+            'form-1-name': 'test2',
+            'form-2-name': 'test3',
+        }
+        formset = FormSet(data)
+        self.assertFalse(formset.is_valid())
+        self.assertTrue('nonform' in formset.non_form_errors().as_ul())
\ No newline at end of file
