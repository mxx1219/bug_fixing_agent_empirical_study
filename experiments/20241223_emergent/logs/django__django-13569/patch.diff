diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index 04e430a42e..681b9284b6 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -128,7 +128,8 @@ class SQLCompiler:
         for expr, (sql, params, is_ref) in order_by:
             # Skip References to the select clause, as all expressions in the
             # select clause are already part of the group by.
-            if not is_ref:
+            # Also skip Random() expressions as they should not affect grouping
+            if not is_ref and not (isinstance(expr, OrderBy) and isinstance(expr.expression, Random)):
                 expressions.extend(expr.get_group_by_cols())
         having_group_by = self.having.get_group_by_cols() if self.having else ()
         for expr in having_group_by:
diff --git a/tests/aggregation_regress/test_random_ordering.py b/tests/aggregation_regress/test_random_ordering.py
new file mode 100644
index 0000000000..63a31c04a6
--- /dev/null
+++ b/tests/aggregation_regress/test_random_ordering.py
@@ -0,0 +1,40 @@
+from django.db import models
+from django.test import TestCase
+
+class Thing(models.Model):
+    name = models.CharField(max_length=100)
+
+class Related(models.Model):
+    thing = models.ForeignKey(Thing, on_delete=models.CASCADE)
+    value = models.IntegerField()
+
+class RandomOrderingTests(TestCase):
+    @classmethod
+    def setUpTestData(cls):
+        cls.thing = Thing.objects.create(name='test')
+        Related.objects.bulk_create([
+            Related(thing=cls.thing, value=i) for i in range(2)
+        ])
+
+    def test_random_ordering_with_aggregation(self):
+        """
+        Test that order_by('?') does not break aggregation results
+        """
+        # This should return one result with count=2
+        qs = Thing.objects.annotate(rc=models.Count('related')).order_by('?')
+        result = list(qs.values('id', 'rc'))
+        self.assertEqual(len(result), 1)
+        self.assertEqual(result[0]['rc'], 2)
+
+    def test_random_ordering_with_multiple_aggregations(self):
+        """
+        Test that order_by('?') works correctly with multiple aggregations
+        """
+        qs = Thing.objects.annotate(
+            rc=models.Count('related'),
+            avg=models.Avg('related__value')
+        ).order_by('?')
+        result = list(qs.values('id', 'rc', 'avg'))
+        self.assertEqual(len(result), 1)
+        self.assertEqual(result[0]['rc'], 2)
+        self.assertEqual(result[0]['avg'], 0.5)  # Average of [0, 1]
\ No newline at end of file
