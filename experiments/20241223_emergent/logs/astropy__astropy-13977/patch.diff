diff --git a/astropy/units/core.py b/astropy/units/core.py
index 8c3204b8b0..26397e1ff3 100644
--- a/astropy/units/core.py
+++ b/astropy/units/core.py
@@ -1070,7 +1070,12 @@ class UnitBase:
             if scale == 1.0:
                 return unit_scale_converter
             else:
-                return lambda val: scale * _condition_arg(val)
+                def converter(val):
+                    conditioned = _condition_arg(val)
+                    if conditioned is NotImplemented:
+                        return NotImplemented
+                    return scale * conditioned
+                return converter
 
         # if that doesn't work, maybe we can do it with equivalencies?
         try:
@@ -2624,13 +2629,13 @@ def _condition_arg(value):
     if isinstance(value, (np.ndarray, float, int, complex, np.void)):
         return value
 
-    avalue = np.array(value)
-    if avalue.dtype.kind not in ["i", "f", "c"]:
-        raise ValueError(
-            "Value not scalar compatible or convertible to "
-            "an int, float, or complex array"
-        )
-    return avalue
+    try:
+        avalue = np.array(value)
+        if avalue.dtype.kind not in ["i", "f", "c"]:
+            return NotImplemented
+        return avalue
+    except (TypeError, ValueError):
+        return NotImplemented
 
 
 def unit_scale_converter(val):
diff --git a/astropy/units/quantity.py b/astropy/units/quantity.py
index b98abfafb0..c1114c377b 100644
--- a/astropy/units/quantity.py
+++ b/astropy/units/quantity.py
@@ -667,7 +667,13 @@ class Quantity(np.ndarray):
         arrays = []
         for input_, converter in zip(inputs, converters):
             input_ = getattr(input_, "value", input_)
-            arrays.append(converter(input_) if converter else input_)
+            if converter:
+                converted = converter(input_)
+                if converted is NotImplemented:
+                    return NotImplemented
+                arrays.append(converted)
+            else:
+                arrays.append(input_)
 
         # Call our superclass's __array_ufunc__
         result = super().__array_ufunc__(function, method, *arrays, **kwargs)
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..20efe1e7c9
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,46 @@
+import dataclasses
+import numpy as np
+import astropy.units as u
+
+
+@dataclasses.dataclass
+class DuckArray(np.lib.mixins.NDArrayOperatorsMixin):
+    ndarray: u.Quantity
+
+    @property
+    def unit(self) -> u.UnitBase:
+        return self.ndarray.unit
+
+    def __array_ufunc__(self, function, method, *inputs, **kwargs):
+        inputs = [inp.ndarray if isinstance(inp, DuckArray) else inp for inp in inputs]
+
+        for inp in inputs:
+            if isinstance(inp, np.ndarray):
+                result = inp.__array_ufunc__(function, method, *inputs, **kwargs)
+                if result is not NotImplemented:
+                    return DuckArray(result)
+
+        return NotImplemented
+
+
+# Test cases
+print("Test 1: DuckArray + Quantity (same units)")
+print(DuckArray(1 * u.mm) + (1 * u.mm))
+
+print("\nTest 2: Quantity + DuckArray (same units)")
+print((1 * u.mm) + DuckArray(1 * u.mm))
+
+print("\nTest 3: Quantity + DuckArray (different but compatible units)")
+print((1 * u.m) + DuckArray(1 * u.mm))
+
+print("\nTest 4: Quantity + DuckArray (incompatible units)")
+try:
+    print((1 * u.m) + DuckArray(1 * u.kg))
+except u.UnitConversionError as e:
+    print("Got expected UnitConversionError:", str(e))
+
+print("\nTest 5: Array operations")
+print(np.array([1, 2]) * DuckArray([1, 2] * u.m))
+
+print("\nTest 6: Multiple DuckArrays")
+print(DuckArray(1 * u.m) + DuckArray(2 * u.mm))
\ No newline at end of file
