diff --git a/demo.db b/demo.db
new file mode 100644
index 0000000000..e825ca9081
Binary files /dev/null and b/demo.db differ
diff --git a/demo_transaction.py b/demo_transaction.py
new file mode 100644
index 0000000000..c2fbaac967
--- /dev/null
+++ b/demo_transaction.py
@@ -0,0 +1,106 @@
+"""
+This script demonstrates why transactions are important in the changelist_view.
+It shows how database operations can fail in the middle of processing multiple
+items, and how transactions prevent partial updates.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': 'demo.db'
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.auth',
+        'django.contrib.contenttypes',
+    ]
+)
+django.setup()
+
+from django.db import models, transaction
+
+# Create a simple model
+class Product(models.Model):
+    name = models.CharField(max_length=100)
+    price = models.DecimalField(max_digits=10, decimal_places=2)
+    
+    class Meta:
+        app_label = 'demo'
+
+def setup_database():
+    """Create the database tables and sample data."""
+    from django.db import connection
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(Product)
+    
+    # Create sample products
+    Product.objects.create(name='Product 1', price=10.00)
+    Product.objects.create(name='Product 2', price=20.00)
+    Product.objects.create(name='Product 3', price=30.00)
+
+def update_without_transaction():
+    """Try to update products without a transaction."""
+    print("\nUpdating without transaction...")
+    try:
+        for product in Product.objects.all():
+            product.price *= 2
+            product.save()
+            if product.name == 'Product 2':
+                # Simulate an error in the middle of processing
+                raise Exception("Simulated error during update")
+    except Exception as e:
+        print(f"Error occurred: {e}")
+    
+    # Check the results
+    print("\nResults after failed update without transaction:")
+    for product in Product.objects.all():
+        print(f"{product.name}: ${product.price}")
+
+def update_with_transaction():
+    """Update products with a transaction."""
+    print("\nUpdating with transaction...")
+    try:
+        with transaction.atomic():
+            for product in Product.objects.all():
+                product.price *= 2
+                product.save()
+                if product.name == 'Product 2':
+                    # Simulate an error in the middle of processing
+                    raise Exception("Simulated error during update")
+    except Exception as e:
+        print(f"Error occurred: {e}")
+    
+    # Check the results
+    print("\nResults after failed update with transaction:")
+    for product in Product.objects.all():
+        print(f"{product.name}: ${product.price}")
+
+def main():
+    # Setup the database
+    setup_database()
+    
+    # Show initial state
+    print("\nInitial state:")
+    for product in Product.objects.all():
+        print(f"{product.name}: ${product.price}")
+    
+    # Try updating without transaction
+    update_without_transaction()
+    
+    # Reset the database
+    Product.objects.all().delete()
+    setup_database()
+    
+    # Try updating with transaction
+    update_with_transaction()
+
+if __name__ == '__main__':
+    main()
\ No newline at end of file
diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 5f07a4208a..128566c1f7 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -2011,25 +2011,26 @@ class ModelAdmin(BaseModelAdmin):
             )
             if formset.is_valid():
                 changecount = 0
-                for form in formset.forms:
-                    if form.has_changed():
-                        obj = self.save_form(request, form, change=True)
-                        self.save_model(request, obj, form, change=True)
-                        self.save_related(request, form, formsets=[], change=True)
-                        change_msg = self.construct_change_message(request, form, None)
-                        self.log_change(request, obj, change_msg)
-                        changecount += 1
-
-                if changecount:
-                    msg = ngettext(
-                        "%(count)s %(name)s was changed successfully.",
-                        "%(count)s %(name)s were changed successfully.",
-                        changecount,
-                    ) % {
-                        "count": changecount,
-                        "name": model_ngettext(self.opts, changecount),
-                    }
-                    self.message_user(request, msg, messages.SUCCESS)
+                with transaction.atomic():
+                    for form in formset.forms:
+                        if form.has_changed():
+                            obj = self.save_form(request, form, change=True)
+                            self.save_model(request, obj, form, change=True)
+                            self.save_related(request, form, formsets=[], change=True)
+                            change_msg = self.construct_change_message(request, form, None)
+                            self.log_change(request, obj, change_msg)
+                            changecount += 1
+
+                    if changecount:
+                        msg = ngettext(
+                            "%(count)s %(name)s was changed successfully.",
+                            "%(count)s %(name)s were changed successfully.",
+                            changecount,
+                        ) % {
+                            "count": changecount,
+                            "name": model_ngettext(self.opts, changecount),
+                        }
+                        self.message_user(request, msg, messages.SUCCESS)
 
                 return HttpResponseRedirect(request.get_full_path())
 
diff --git a/test_changelist.py b/test_changelist.py
new file mode 100644
index 0000000000..e18df747e2
--- /dev/null
+++ b/test_changelist.py
@@ -0,0 +1,88 @@
+import os
+import django
+from django.conf import settings
+
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:'
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.auth',
+        'django.contrib.contenttypes',
+        'django.contrib.sessions',
+        'django.contrib.admin',
+        'test_app'
+    ],
+    MIDDLEWARE=[
+        'django.contrib.sessions.middleware.SessionMiddleware',
+        'django.contrib.auth.middleware.AuthenticationMiddleware',
+        'django.contrib.messages.middleware.MessageMiddleware',
+    ]
+)
+django.setup()
+
+from django.contrib.admin.options import ModelAdmin
+from django.contrib.admin.sites import AdminSite
+from django.contrib.auth.models import User
+from django.db import models
+from django.http import HttpRequest
+from django.test import TestCase
+
+# Create a simple model for testing
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    value = models.IntegerField()
+
+    class Meta:
+        app_label = 'test_app'
+
+class TestModelAdmin(ModelAdmin):
+    list_editable = ['value']
+    list_display = ['name', 'value']
+
+class TestChangelistView(TestCase):
+    def setUp(self):
+        self.site = AdminSite()
+        self.model_admin = TestModelAdmin(TestModel, self.site)
+        self.request = HttpRequest()
+        self.request.method = 'POST'
+        self.request.POST = {
+            '_save': 'Save',
+            'form-TOTAL_FORMS': '2',
+            'form-INITIAL_FORMS': '2',
+            'form-MIN_NUM_FORMS': '0',
+            'form-MAX_NUM_FORMS': '1000',
+            'form-0-id': '1',
+            'form-0-value': '100',
+            'form-1-id': '2',
+            'form-1-value': '200'
+        }
+        self.user = User.objects.create_superuser('admin', 'admin@test.com', 'password')
+        self.request.user = self.user
+
+    def test_changelist_view_transaction(self):
+        # Create test objects
+        obj1 = TestModel.objects.create(name='Test 1', value=10)
+        obj2 = TestModel.objects.create(name='Test 2', value=20)
+
+        # Call the changelist view
+        response = self.model_admin.changelist_view(self.request)
+
+        # Check that both objects were updated
+        obj1.refresh_from_db()
+        obj2.refresh_from_db()
+        self.assertEqual(obj1.value, 100)
+        self.assertEqual(obj2.value, 200)
+
+if __name__ == '__main__':
+    # Create the test app models
+    from django.db import connection
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(TestModel)
+    
+    import unittest
+    unittest.main()
\ No newline at end of file
