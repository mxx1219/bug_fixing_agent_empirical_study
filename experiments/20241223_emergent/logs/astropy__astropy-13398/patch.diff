diff --git a/astropy/coordinates/builtin_frames/__init__.py b/astropy/coordinates/builtin_frames/__init__.py
index 6fd688c285..1315098747 100644
--- a/astropy/coordinates/builtin_frames/__init__.py
+++ b/astropy/coordinates/builtin_frames/__init__.py
@@ -50,6 +50,7 @@ from . import cirs_observed_transforms
 from . import icrs_observed_transforms
 from . import intermediate_rotation_transforms
 from . import ecliptic_transforms
+from . import itrs_observed_transforms
 
 # Import this after importing other frames, since this requires various
 # transformtions to set up the LSR frames
diff --git a/astropy/coordinates/builtin_frames/itrs_observed_transforms.py b/astropy/coordinates/builtin_frames/itrs_observed_transforms.py
new file mode 100644
index 0000000000..5bb954eb2d
--- /dev/null
+++ b/astropy/coordinates/builtin_frames/itrs_observed_transforms.py
@@ -0,0 +1,79 @@
+"""
+This module contains the direct transformations between ITRS and observed frames
+(AltAz and HADec).
+"""
+
+import numpy as np
+from astropy import units as u
+from astropy.coordinates.matrix_utilities import rotation_matrix, matrix_transpose
+from astropy.coordinates.baseframe import frame_transform_graph
+from astropy.coordinates.transformations import FunctionTransformWithFiniteDifference
+from .altaz import AltAz
+from .hadec import HADec
+from .itrs import ITRS
+from .utils import PIOVER2
+
+def itrs_to_observed_mat(observed_frame):
+    """
+    Form the transformation matrix from ITRS to either AltAz or HADec frame.
+    
+    Parameters
+    ----------
+    observed_frame : `~astropy.coordinates.AltAz` or `~astropy.coordinates.HADec`
+        The target frame.
+        
+    Returns
+    -------
+    matrix : ndarray
+        A 3x3 transformation matrix.
+    """
+    lon, lat, height = observed_frame.location.to_geodetic('WGS84')
+    elong = lon.to_value(u.radian)
+
+    if isinstance(observed_frame, AltAz):
+        # form ITRS to AltAz matrix
+        elat = lat.to_value(u.radian)
+        # AltAz frame is left handed
+        minus_x = np.eye(3)
+        minus_x[0][0] = -1.0
+        mat = (minus_x
+               @ rotation_matrix(PIOVER2 - elat, 'y', unit=u.radian)
+               @ rotation_matrix(elong, 'z', unit=u.radian))
+
+    else:
+        # form ITRS to HADec matrix
+        # HADec frame is left handed
+        minus_y = np.eye(3)
+        minus_y[1][1] = -1.0
+        mat = (minus_y
+               @ rotation_matrix(elong, 'z', unit=u.radian))
+    return mat
+
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ITRS, AltAz)
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ITRS, HADec)
+def itrs_to_observed(itrs_coo, observed_frame):
+    """
+    Transform from ITRS to either AltAz or HADec frame.
+    
+    This transformation treats ITRS coordinates as time invariant, since it makes
+    no sense to do an ITRS->ITRS transform for differing obstimes between input
+    and output frames.
+    """
+    # form the Topocentric ITRS position
+    topocentric_itrs_repr = (itrs_coo.cartesian
+                            - observed_frame.location.get_itrs().cartesian)
+    rep = topocentric_itrs_repr.transform(itrs_to_observed_mat(observed_frame))
+    return observed_frame.realize_frame(rep)
+
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, AltAz, ITRS)
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, HADec, ITRS)
+def observed_to_itrs(observed_coo, itrs_frame):
+    """
+    Transform from either AltAz or HADec frame to ITRS.
+    """
+    # form the Topocentric ITRS position
+    topocentric_itrs_repr = observed_coo.cartesian.transform(matrix_transpose(
+                            itrs_to_observed_mat(observed_coo)))
+    # form the Geocentric ITRS position
+    rep = topocentric_itrs_repr + observed_coo.location.get_itrs().cartesian
+    return itrs_frame.realize_frame(rep)
\ No newline at end of file
diff --git a/test_itrs_transforms.py b/test_itrs_transforms.py
new file mode 100644
index 0000000000..f9fe3f7692
--- /dev/null
+++ b/test_itrs_transforms.py
@@ -0,0 +1,61 @@
+"""
+Test script to verify ITRS to AltAz and HADec transformations.
+"""
+import numpy as np
+from astropy import units as u
+from astropy.coordinates import ITRS, AltAz, HADec, EarthLocation
+from astropy.time import Time
+
+# Create a test location (using Greenwich Observatory)
+location = EarthLocation.of_site('greenwich')
+
+# Create a test time
+time = Time('2020-01-01T00:00:00')
+
+# Create a test ITRS position (1km above Greenwich)
+itrs = ITRS(x=0*u.km, y=0*u.km, z=(location.geocentric[2].to(u.km) + 1*u.km),
+            obstime=time)
+
+# Create AltAz frame
+altaz_frame = AltAz(obstime=time, location=location)
+
+# Test ITRS -> AltAz transformation
+altaz = itrs.transform_to(altaz_frame)
+print("\nITRS -> AltAz transformation:")
+print(f"Alt: {altaz.alt.to(u.deg):.2f}")
+print(f"Az: {altaz.az.to(u.deg):.2f}")
+
+# Test AltAz -> ITRS transformation
+itrs_back = altaz.transform_to(ITRS(obstime=time))
+print("\nAltAz -> ITRS transformation:")
+print(f"X: {itrs_back.x.to(u.km):.2f}")
+print(f"Y: {itrs_back.y.to(u.km):.2f}")
+print(f"Z: {itrs_back.z.to(u.km):.2f}")
+
+# Create HADec frame
+hadec_frame = HADec(obstime=time, location=location)
+
+# Test ITRS -> HADec transformation
+hadec = itrs.transform_to(hadec_frame)
+print("\nITRS -> HADec transformation:")
+print(f"HA: {hadec.ha.to(u.deg):.2f}")
+print(f"Dec: {hadec.dec.to(u.deg):.2f}")
+
+# Test HADec -> ITRS transformation
+itrs_back2 = hadec.transform_to(ITRS(obstime=time))
+print("\nHADec -> ITRS transformation:")
+print(f"X: {itrs_back2.x.to(u.km):.2f}")
+print(f"Y: {itrs_back2.y.to(u.km):.2f}")
+print(f"Z: {itrs_back2.z.to(u.km):.2f}")
+
+# Verify round-trip transformations
+print("\nVerifying round-trip transformations...")
+print("ITRS -> AltAz -> ITRS difference (meters):")
+print(f"X: {abs(itrs.x - itrs_back.x).to(u.m):.2f}")
+print(f"Y: {abs(itrs.y - itrs_back.y).to(u.m):.2f}")
+print(f"Z: {abs(itrs.z - itrs_back.z).to(u.m):.2f}")
+
+print("\nITRS -> HADec -> ITRS difference (meters):")
+print(f"X: {abs(itrs.x - itrs_back2.x).to(u.m):.2f}")
+print(f"Y: {abs(itrs.y - itrs_back2.y).to(u.m):.2f}")
+print(f"Z: {abs(itrs.z - itrs_back2.z).to(u.m):.2f}")
\ No newline at end of file
