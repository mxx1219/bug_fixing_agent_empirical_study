diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 8642e1f151..be06b8409a 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -651,6 +651,7 @@ class OuterRef(F):
         return self
 
 
+@deconstructible(path='django.db.models.Func')
 class Func(SQLiteNumericMixin, Expression):
     """An SQL function call."""
     function = None
@@ -731,6 +732,7 @@ class Func(SQLiteNumericMixin, Expression):
         return copy
 
 
+@deconstructible(path='django.db.models.Value')
 class Value(SQLiteNumericMixin, Expression):
     """Represent a wrapped value as a node within an expression."""
     # Provide a default value for `for_save` in order to allow unresolved
@@ -1052,6 +1054,7 @@ class When(Expression):
         return cols
 
 
+@deconstructible(path='django.db.models.Case')
 class Case(SQLiteNumericMixin, Expression):
     """
     An SQL searched CASE expression:
@@ -1133,6 +1136,7 @@ class Case(SQLiteNumericMixin, Expression):
         return super().get_group_by_cols(alias)
 
 
+@deconstructible(path='django.db.models.Subquery')
 class Subquery(BaseExpression, Combinable):
     """
     An explicit subquery. It may contain OuterRef() references to the outer
@@ -1190,6 +1194,7 @@ class Subquery(BaseExpression, Combinable):
         return self.query.get_group_by_cols()
 
 
+@deconstructible(path='django.db.models.Exists')
 class Exists(Subquery):
     template = 'EXISTS(%(subquery)s)'
     output_field = fields.BooleanField()
diff --git a/settings.py b/settings.py
new file mode 100644
index 0000000000..bc2ad119f8
--- /dev/null
+++ b/settings.py
@@ -0,0 +1,13 @@
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+]
+
+SECRET_KEY = 'dummy'
\ No newline at end of file
diff --git a/test_deconstruct.py b/test_deconstruct.py
new file mode 100644
index 0000000000..edbe0767c4
--- /dev/null
+++ b/test_deconstruct.py
@@ -0,0 +1,49 @@
+import os
+import django
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'settings')
+django.setup()
+
+from django.db.models import F, Value, Func, Case, When, Exists, Subquery
+from django.db.models.query import QuerySet
+
+def test_deconstruct():
+    # Test F expression
+    f = F('name')
+    path, args, kwargs = f.deconstruct()
+    print(f"F deconstructs to: {path}")
+    assert path == 'django.db.models.F'
+
+    # Test Value expression
+    v = Value(42)
+    path, args, kwargs = v.deconstruct()
+    print(f"Value deconstructs to: {path}")
+    assert path == 'django.db.models.Value'
+
+    # Test Func expression
+    func = Func('col')
+    path, args, kwargs = func.deconstruct()
+    print(f"Func deconstructs to: {path}")
+    assert path == 'django.db.models.Func'
+
+    # Test Case expression
+    case = Case()
+    path, args, kwargs = case.deconstruct()
+    print(f"Case deconstructs to: {path}")
+    assert path == 'django.db.models.Case'
+
+    # Test Exists expression
+    exists = Exists(QuerySet())
+    path, args, kwargs = exists.deconstruct()
+    print(f"Exists deconstructs to: {path}")
+    assert path == 'django.db.models.Exists'
+
+    # Test Subquery expression
+    subquery = Subquery(QuerySet())
+    path, args, kwargs = subquery.deconstruct()
+    print(f"Subquery deconstructs to: {path}")
+    assert path == 'django.db.models.Subquery'
+
+    print("All tests passed!")
+
+if __name__ == '__main__':
+    test_deconstruct()
\ No newline at end of file
