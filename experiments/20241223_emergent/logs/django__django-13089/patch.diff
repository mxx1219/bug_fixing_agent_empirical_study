diff --git a/django/core/cache/backends/db.py b/django/core/cache/backends/db.py
index 33c79c5a14..6394ba878f 100644
--- a/django/core/cache/backends/db.py
+++ b/django/core/cache/backends/db.py
@@ -267,9 +267,11 @@ class DatabaseCache(BaseDatabaseCache):
                 cursor.execute(
                     connection.ops.cache_key_culling_sql() % table,
                     [cull_num])
-                cursor.execute("DELETE FROM %s "
-                               "WHERE cache_key < %%s" % table,
-                               [cursor.fetchone()[0]])
+                result = cursor.fetchone()
+                if result:
+                    cursor.execute("DELETE FROM %s "
+                                   "WHERE cache_key < %%s" % table,
+                                   [result[0]])
 
     def clear(self):
         db = router.db_for_write(self.cache_model_class)
diff --git a/reproduce_cache_cull.py b/reproduce_cache_cull.py
new file mode 100644
index 0000000000..74585e5fc2
--- /dev/null
+++ b/reproduce_cache_cull.py
@@ -0,0 +1,44 @@
+import os
+import django
+from django.conf import settings
+from django.core.cache import cache
+from django.db import connection
+
+# Configure minimal Django settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    CACHES={
+        'default': {
+            'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
+            'LOCATION': 'django_cache_table',
+            'OPTIONS': {
+                'MAX_ENTRIES': 2,  # Set low to trigger culling
+                'CULL_FREQUENCY': 2,  # Cull half the entries when max is reached
+            }
+        }
+    },
+    INSTALLED_APPS=['django.contrib.contenttypes'],
+)
+
+django.setup()
+
+# Create the cache table
+from django.core.management import call_command
+call_command('createcachetable')
+
+# No need to mock anymore, just use the real implementation
+
+# Add entries to trigger culling
+try:
+    for i in range(5):
+        cache.set(f'key{i}', f'value{i}')
+        print(f"Set key{i}")
+except Exception as e:
+    print(f"Error occurred: {e}")
+
+print("Cache operations completed")
\ No newline at end of file
