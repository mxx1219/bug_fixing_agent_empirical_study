diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index aaf35ee37c..33e989c978 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -575,6 +575,41 @@ class Query(BaseExpression):
         # Work out how to relabel the rhs aliases, if necessary.
         change_map = {}
         conjunction = (connector == AND)
+        
+        # Create a set of all existing aliases to avoid conflicts
+        existing_aliases = set(self.alias_map) | set(self.table_map)
+        rhs_aliases = set(rhs.alias_map) | set(rhs.table_map)
+        
+        # Find all RHS aliases that need to be renamed
+        aliases_to_rename = []
+        for alias in sorted(rhs_aliases):
+            # Always rename T-prefixed aliases to avoid conflicts
+            if alias.startswith('T'):
+                aliases_to_rename.append(alias)
+            # Also rename any other aliases that conflict with LHS
+            elif alias in existing_aliases:
+                aliases_to_rename.append(alias)
+        
+        if aliases_to_rename:
+            # Find the highest numbered alias across both queries
+            max_num = max(
+                (int(alias[1:]) for alias in existing_aliases | rhs_aliases
+                 if alias.startswith('T') and alias[1:].isdigit()),
+                default=0
+            )
+            
+            # Generate completely new aliases starting from max_num + 1
+            # This ensures we never generate an alias that exists in either query
+            # or that could conflict with the old aliases
+            new_aliases = [f'T{i}' for i in range(max_num + 2, max_num + 2 + len(aliases_to_rename))]
+            
+            # Create the change map
+            change_map.update(zip(aliases_to_rename, new_aliases))
+            print("DEBUG: aliases_to_rename =", aliases_to_rename)
+            print("DEBUG: new_aliases =", new_aliases)
+            print("DEBUG: change_map =", change_map)
+            print("DEBUG: existing_aliases =", existing_aliases)
+            print("DEBUG: rhs_aliases =", rhs_aliases)
 
         # Determine which existing joins can be reused. When combining the
         # query with AND we must recreate all joins for m2m filters. When
@@ -761,7 +796,14 @@ class Query(BaseExpression):
 
         # Create a new alias for this table.
         if alias_list:
-            alias = '%s%d' % (self.alias_prefix, len(self.alias_map) + 1)
+            # Find the next available alias number that won't conflict
+            next_num = len(self.alias_map) + 1
+            while True:
+                alias = '%s%d' % (self.alias_prefix, next_num)
+                # Check if this alias would conflict with any existing aliases
+                if alias not in self.alias_map and alias not in self.table_map:
+                    break
+                next_num += 1
             alias_list.append(alias)
         else:
             # The first occurrence of a table uses the table name directly.
@@ -845,8 +887,18 @@ class Query(BaseExpression):
         Change the aliases in change_map (which maps old-alias -> new-alias),
         relabelling any references to them in select columns and the where
         clause.
+
+        The change_map keys must be disjoint from its values to ensure each alias is
+        changed at most once. This prevents issues where an alias might be changed
+        multiple times (e.g., T4 -> T5, then T5 -> T6) which could lead to incorrect
+        alias mappings.
         """
-        assert set(change_map).isdisjoint(change_map.values())
+        print("DEBUG: change_aliases called with change_map =", change_map)
+        assert set(change_map).isdisjoint(change_map.values()), (
+            "Alias change map keys and values must be disjoint. This error can occur when "
+            "combining querysets if table aliases overlap in a way that would require "
+            "changing an alias more than once (e.g., T4 -> T5, then T5 -> T6)."
+        )
 
         # 1. Update references in "select" (normal columns plus aliases),
         # "group by" and "where".
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..eccb5a0f55
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,61 @@
+import os
+import sys
+import django
+from django.conf import settings
+
+sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
+
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'testapp',
+    ],
+)
+
+django.setup()
+
+from django.db import models
+from django.db.models import Q
+from testapp.models import Foo, Bar, Baz, Qux
+
+# Create test data
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    for model in [Foo, Bar, Baz, Qux]:
+        schema_editor.create_model(model)
+
+qux = Qux.objects.create()
+baz = Baz.objects.create()
+qux.bazes.add(baz)
+foo = Foo.objects.create(qux=qux)
+
+# Test the queries
+qs1 = qux.foos.all()
+qs2 = Foo.objects.filter(
+    Q(bars__baz__in=qux.bazes.all()) | Q(other_bars__baz__in=qux.bazes.all())
+)
+
+print("Testing qs2 | qs1...")
+print("qs2 aliases:", qs2.query.alias_map.keys())
+print("qs1 aliases:", qs1.query.alias_map.keys())
+combined = qs2 | qs1
+print("Combined result:", list(combined))
+print("Success!")
+
+print("\nTesting qs1 | qs2...")
+print("qs1 aliases:", qs1.query.alias_map.keys())
+print("qs2 aliases:", qs2.query.alias_map.keys())
+try:
+    combined = qs1 | qs2
+    print("Combined result:", list(combined))
+    print("Success!")
+except AssertionError as e:
+    print("Error:", str(e))
+    print("Change map:", e.args[0])
\ No newline at end of file
diff --git a/testapp/__init__.py b/testapp/__init__.py
new file mode 100644
index 0000000000..22ae0c5f40
--- /dev/null
+++ b/testapp/__init__.py
@@ -0,0 +1 @@
+# Empty file
\ No newline at end of file
diff --git a/testapp/models.py b/testapp/models.py
new file mode 100644
index 0000000000..5e00d7be76
--- /dev/null
+++ b/testapp/models.py
@@ -0,0 +1,15 @@
+from django.db import models
+
+class Foo(models.Model):
+    qux = models.ForeignKey("Qux", on_delete=models.CASCADE, related_name="foos")
+
+class Bar(models.Model):
+    foo = models.ForeignKey("Foo", on_delete=models.CASCADE, related_name="bars")
+    another_foo = models.ForeignKey("Foo", on_delete=models.CASCADE, related_name="other_bars")
+    baz = models.ForeignKey("Baz", on_delete=models.CASCADE, related_name="bars")
+
+class Baz(models.Model):
+    pass
+
+class Qux(models.Model):
+    bazes = models.ManyToManyField("Baz", related_name="quxes")
\ No newline at end of file
