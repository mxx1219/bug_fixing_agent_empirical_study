diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py
index a249f4cdbf..66c039c6e4 100644
--- a/django/db/models/fields/json.py
+++ b/django/db/models/fields/json.py
@@ -81,7 +81,7 @@ class JSONField(CheckFieldDefaultMixin, Field):
     def get_prep_value(self, value):
         if value is None:
             return value
-        return json.dumps(value, cls=self.encoder)
+        return json.dumps(value, cls=self.encoder, ensure_ascii=False)
 
     def get_transform(self, name):
         transform = super().get_transform(name)
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..421639a5dc
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,14 @@
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+    'tests.json_unicode',
+]
+
+SECRET_KEY = 'dummy-key-for-tests'
\ No newline at end of file
diff --git a/tests/json_unicode/migrations/0001_initial.py b/tests/json_unicode/migrations/0001_initial.py
new file mode 100644
index 0000000000..ec438689ce
--- /dev/null
+++ b/tests/json_unicode/migrations/0001_initial.py
@@ -0,0 +1,16 @@
+from django.db import migrations, models
+
+class Migration(migrations.Migration):
+    initial = True
+
+    dependencies = []
+
+    operations = [
+        migrations.CreateModel(
+            name='JSONModel',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('value', models.JSONField()),
+            ],
+        ),
+    ]
\ No newline at end of file
diff --git a/tests/json_unicode/migrations/__init__.py b/tests/json_unicode/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/json_unicode/test_json_unicode.py b/tests/json_unicode/test_json_unicode.py
new file mode 100644
index 0000000000..d6bb0e9ab0
--- /dev/null
+++ b/tests/json_unicode/test_json_unicode.py
@@ -0,0 +1,26 @@
+from django.test import TestCase
+from django.db import models
+
+class JSONModel(models.Model):
+    value = models.JSONField()
+
+    class Meta:
+        app_label = 'json_unicode'
+
+class JSONFieldUnicodeTests(TestCase):
+    def test_unicode_characters(self):
+        """Test that Unicode characters are handled properly in JSONField."""
+        values = [
+            {'name': '中国'},  # Chinese characters
+            {'city': '東京'},  # Japanese characters
+            {'greeting': 'Привет'},  # Russian characters
+            {'mixed': '中国 is 中国'},  # Mixed characters
+        ]
+        for value in values:
+            with self.subTest(value=value):
+                obj = JSONModel.objects.create(value=value)
+                obj.refresh_from_db()
+                self.assertEqual(obj.value, value)
+                # Ensure the value is stored as actual Unicode characters
+                raw_value = obj.value
+                self.assertNotIn('\\u', str(raw_value))
\ No newline at end of file
diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py
index 79f2609c35..79f9836e5a 100644
--- a/tests/model_fields/test_jsonfield.py
+++ b/tests/model_fields/test_jsonfield.py
@@ -253,6 +253,23 @@ class TestSaveLoad(TestCase):
         obj.refresh_from_db()
         self.assertEqual(obj.value, value)
 
+    def test_unicode_characters(self):
+        """Test that Unicode characters are handled properly in JSONField."""
+        values = [
+            {'name': '中国'},  # Chinese characters
+            {'city': '東京'},  # Japanese characters
+            {'greeting': 'Привет'},  # Russian characters
+            {'mixed': '中国 is 中国'},  # Mixed characters
+        ]
+        for value in values:
+            with self.subTest(value=value):
+                obj = JSONModel.objects.create(value=value)
+                obj.refresh_from_db()
+                self.assertEqual(obj.value, value)
+                # Ensure the value is stored as actual Unicode characters
+                raw_value = obj.value
+                self.assertNotIn('\\u', str(raw_value))
+
 
 @skipUnlessDBFeature('supports_json_field')
 class TestQuerying(TestCase):
