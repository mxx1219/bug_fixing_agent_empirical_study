diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py
index 872a4c98dc..2a3f54345c 100644
--- a/django/db/models/fields/related_descriptors.py
+++ b/django/db/models/fields/related_descriptors.py
@@ -254,7 +254,13 @@ class ForwardManyToOneDescriptor:
         # Set the values of the related field.
         else:
             for lh_field, rh_field in self.field.related_fields:
-                setattr(instance, lh_field.attname, getattr(value, rh_field.attname))
+                # Get the value from the related field
+                rel_value = getattr(value, rh_field.attname)
+                # For non-numeric primary keys that are empty strings, use None instead
+                # to prevent premature foreign key constraint violations
+                if rh_field.primary_key and not getattr(rh_field, 'auto_created', False) and rel_value == "":
+                    rel_value = None
+                setattr(instance, lh_field.attname, rel_value)
 
         # Set the related instance cache used by __get__ to avoid an SQL query
         # when accessing the attribute we just set.
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..56de757fbe
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,71 @@
+from django.db import models, transaction
+from django.test import TestCase
+from django.test.utils import setup_test_environment, teardown_test_environment
+import django
+import os
+
+# Set up Django settings
+from django.conf import settings
+
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'reproduce_test',
+    ],
+)
+django.setup()
+
+# Define the models
+class Product(models.Model):
+    sku = models.CharField(primary_key=True, max_length=50)
+    
+    class Meta:
+        app_label = 'reproduce_test'
+
+class Order(models.Model):
+    product = models.ForeignKey(Product, on_delete=models.CASCADE)
+    
+    class Meta:
+        app_label = 'reproduce_test'
+
+# Set up the test environment
+setup_test_environment()
+
+# Create the database tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Product)
+    schema_editor.create_model(Order)
+
+# Reproduce the issue
+try:
+    with transaction.atomic():
+        order = Order()
+        order.product = Product()  # Empty product instance
+        order.product.sku = "foo"  # Set SKU after assignment
+        order.product.save()
+        order.save()
+        
+        # These assertions should both pass, but currently the first one passes (shouldn't)
+        # and the second one fails
+        print("Checking if product_id is empty (should be False):")
+        print(Order.objects.filter(product_id="").exists())
+        
+        print("\nChecking if we can find the order with the actual product (should be True):")
+        print(Order.objects.filter(product=order.product).exists())
+        
+except Exception as e:
+    print(f"Error occurred: {e}")
+
+# Clean up
+with connection.schema_editor() as schema_editor:
+    schema_editor.delete_model(Order)
+    schema_editor.delete_model(Product)
+
+teardown_test_environment()
\ No newline at end of file
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..3b17706c58
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,78 @@
+from django.db import models, transaction
+from django.test import TestCase
+from django.conf import settings
+import django
+import os
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+)
+django.setup()
+
+# Define the test models
+class Product(models.Model):
+    sku = models.CharField(primary_key=True, max_length=50)
+    
+    class Meta:
+        app_label = 'test_app'
+
+class Order(models.Model):
+    product = models.ForeignKey(Product, on_delete=models.CASCADE)
+    
+    class Meta:
+        app_label = 'test_app'
+
+# Create the database tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Product)
+    schema_editor.create_model(Order)
+
+# Test the fix
+print("Testing scenario 1: Setting product after assignment")
+try:
+    with transaction.atomic():
+        order = Order()
+        order.product = Product()  # Empty product instance
+        order.product.sku = "foo"  # Set SKU after assignment
+        order.product.save()
+        order.save()
+        
+        print("- Checking if product_id is empty (should be False):")
+        print(Order.objects.filter(product_id="").exists())
+        
+        print("- Checking if we can find the order with the actual product (should be True):")
+        print(Order.objects.filter(product=order.product).exists())
+        
+except Exception as e:
+    print(f"Error occurred: {e}")
+
+print("\nTesting scenario 2: Setting product with SKU at creation")
+try:
+    with transaction.atomic():
+        order = Order()
+        order.product = Product(sku="bar")  # Set SKU during creation
+        order.product.save()
+        order.save()
+        
+        print("- Checking if we can find the order with the product (should be True):")
+        print(Order.objects.filter(product=order.product).exists())
+        
+except Exception as e:
+    print(f"Error occurred: {e}")
+
+# Clean up
+with connection.schema_editor() as schema_editor:
+    schema_editor.delete_model(Order)
+    schema_editor.delete_model(Product)
\ No newline at end of file
