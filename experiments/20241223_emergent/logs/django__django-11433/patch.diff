diff --git a/django/forms/models.py b/django/forms/models.py
index 5edbbd376f..6222459e42 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -46,10 +46,8 @@ def construct_instance(form, instance, fields=None, exclude=None):
             continue
         if exclude and f.name in exclude:
             continue
-        # Leave defaults for fields that aren't in POST data, except for
-        # checkbox inputs because they don't appear in POST data if not checked.
-        if (f.has_default() and
-                form[f.name].field.widget.value_omitted_from_data(form.data, form.files, form.add_prefix(f.name))):
+        # Only skip fields that aren't in cleaned_data and have defaults
+        if f.name not in cleaned_data and f.has_default():
             continue
         # Defer saving file-type fields until after the other fields, so a
         # callable upload_to can use the values from other fields.
diff --git a/test_form_defaults.py b/test_form_defaults.py
new file mode 100644
index 0000000000..2866a33ffc
--- /dev/null
+++ b/test_form_defaults.py
@@ -0,0 +1,52 @@
+from django.conf import settings
+settings.configure(
+    INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth'],
+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+    MIDDLEWARE=[],
+    SECRET_KEY='dummy'
+)
+
+import django
+django.setup()
+
+from django.db import models, connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model = lambda model: None  # Prevent creating auth tables
+from django.forms import ModelForm
+
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    status = models.CharField(max_length=20, default='active')
+    
+    class Meta:
+        app_label = 'auth'  # Use existing app for simplicity
+
+class TestForm(ModelForm):
+    class Meta:
+        model = TestModel
+        fields = ['name', 'status']
+
+    def __init__(self, *args, **kwargs):
+        super().__init__(*args, **kwargs)
+        # Make fields with defaults not required
+        for field_name, field in self.fields.items():
+            model_field = self._meta.model._meta.get_field(field_name)
+            if model_field.has_default():
+                field.required = False
+        
+    def clean(self):
+        cleaned_data = super().clean()
+        # If status is empty or not in cleaned_data, set it to 'inactive'
+        if not cleaned_data.get('status'):
+            cleaned_data['status'] = 'inactive'  # Override the default value
+        return cleaned_data
+
+# Test the form
+form = TestForm({'name': 'test'})  # Don't include status in POST data
+
+if form.is_valid():
+    print("Form is valid!")
+    print("Cleaned data:", form.cleaned_data)
+    print("Status value:", form.cleaned_data.get('status'))  # Should be 'inactive'
+else:
+    print("Form validation failed:", form.errors)
\ No newline at end of file
