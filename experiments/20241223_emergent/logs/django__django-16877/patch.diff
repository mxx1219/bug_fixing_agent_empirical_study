diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index 5289ef34a0..2d9906ec0f 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -498,6 +498,17 @@ def safeseq(value):
     return [mark_safe(obj) for obj in value]
 
 
+@register.filter(is_safe=True)
+def escapeseq(value):
+    """
+    A filter for sequences that escapes each element. Convert each element to a string
+    and apply HTML escaping, then return a list with the results. This is useful in
+    contexts where autoescape is off and you want to escape each item in a sequence
+    before operations like join.
+    """
+    return [escape(str(obj)) for obj in value]
+
+
 @register.filter(is_safe=True)
 @stringfilter
 def striptags(value):
diff --git a/test_escapeseq.py b/test_escapeseq.py
new file mode 100644
index 0000000000..0d491605c4
--- /dev/null
+++ b/test_escapeseq.py
@@ -0,0 +1,28 @@
+from django.conf import settings
+from django.template import Template, Context
+import django
+
+# Configure minimal Django settings
+settings.configure(
+    TEMPLATES=[{
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'APP_DIRS': True,
+    }]
+)
+django.setup()
+
+# Test with HTML content
+html_list = ['<p>Hello</p>', '<script>alert("XSS")</script>', 'Normal text & symbols']
+
+# Create template that uses escapeseq and join
+template = Template('{% autoescape off %}{{ items|escapeseq|join:", " }}{% endautoescape %}')
+context = Context({'items': html_list})
+
+# Render template
+result = template.render(context)
+print("Result:", result)
+
+# Expected output should have HTML escaped but joined with plain commas
+expected = '&lt;p&gt;Hello&lt;/p&gt;, &lt;script&gt;alert(&quot;XSS&quot;)&lt;/script&gt;, Normal text &amp; symbols'
+print("\nTest passed:", result == expected)
+print("\nExpected:", expected)
\ No newline at end of file
