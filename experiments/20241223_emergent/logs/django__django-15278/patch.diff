diff --git a/.gitignore b/.gitignore
index 238fb3a200..975c5364d8 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,6 @@ tests/coverage_html/
 tests/.coverage
 build/
 tests/report/
+*__pycache__*
+*venv*
+*_build*
diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py
index 6752a8e3c0..cac098b74a 100644
--- a/django/db/backends/sqlite3/schema.py
+++ b/django/db/backends/sqlite3/schema.py
@@ -326,8 +326,10 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):
         """Create a field on a model."""
         # Fields with default values cannot by handled by ALTER TABLE ADD
         # COLUMN statement because DROP DEFAULT is not supported in
-        # ALTER TABLE.
-        if not field.null or self.effective_default(field) is not None:
+        # ALTER TABLE. The same applies to unique fields since SQLite
+        # doesn't support adding unique columns with ALTER TABLE.
+        if (not field.null or self.effective_default(field) is not None or
+                field.unique or field.get_internal_type() == 'OneToOneField'):
             self._remake_table(model, create_field=field)
         else:
             super().add_field(model, field)
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..4171542d5e
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,79 @@
+import django
+from django.db import models, migrations
+from django.db import connection
+from django.conf import settings
+from django.apps import apps
+
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=['django.contrib.contenttypes', 'testapp'],
+    )
+    django.setup()
+
+# Create the test app
+class TestConfig(django.apps.AppConfig):
+    name = 'testapp'
+    verbose_name = 'Test App'
+
+django.apps.apps.register_config(TestConfig('testapp', __file__))
+
+class RefreshToken(models.Model):
+    id = models.BigAutoField(primary_key=True)
+
+    class Meta:
+        app_label = 'testapp'
+
+class AccessToken(models.Model):
+    id = models.BigAutoField(primary_key=True)
+    source_refresh_token = models.OneToOneField(
+        RefreshToken,
+        on_delete=models.SET_NULL,
+        null=True,
+        blank=True,
+        related_name="refreshed_access_token"
+    )
+
+    class Meta:
+        app_label = 'testapp'
+
+def main():
+    # Create the tables first
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(RefreshToken)
+        # Create AccessToken without the OneToOneField first
+        class TempAccessToken(models.Model):
+            id = models.BigAutoField(primary_key=True)
+        schema_editor.create_model(TempAccessToken)
+    
+    # Create project state with both models
+    project_state = migrations.state.ProjectState()
+    project_state.add_model(migrations.state.ModelState.from_model(RefreshToken))
+    project_state.add_model(migrations.state.ModelState.from_model(TempAccessToken))
+    
+    # Create new state with the field added
+    new_state = project_state.clone()
+    operation = migrations.AddField(
+        model_name='TempAccessToken',
+        name='source_refresh_token',
+        field=models.OneToOneField(
+            RefreshToken,
+            on_delete=models.SET_NULL,
+            null=True,
+            blank=True,
+            related_name="refreshed_access_token"
+        ),
+    )
+    operation.state_forwards("testapp", new_state)
+    
+    # Try to add the OneToOneField
+    with connection.schema_editor() as schema_editor:
+        operation.database_forwards("testapp", schema_editor, project_state, new_state)
+
+if __name__ == "__main__":
+    main()
\ No newline at end of file
