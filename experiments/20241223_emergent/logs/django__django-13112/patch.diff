diff --git a/django/apps/registry.py b/django/apps/registry.py
index 408964a146..beb2ead75c 100644
--- a/django/apps/registry.py
+++ b/django/apps/registry.py
@@ -149,14 +149,19 @@ class Apps:
         Import applications and returns an app config for the given label.
 
         Raise LookupError if no application exists with this label.
+        The lookup is case-insensitive.
         """
         self.check_apps_ready()
         try:
             return self.app_configs[app_label]
         except KeyError:
+            # Try case-insensitive lookup
+            for label, config in self.app_configs.items():
+                if label.lower() == app_label.lower():
+                    return config
             message = "No installed app with label '%s'." % app_label
             for app_config in self.get_app_configs():
-                if app_config.name == app_label:
+                if app_config.name.lower() == app_label.lower():
                     message += " Did you mean '%s'?" % app_config.label
                     break
             raise LookupError(message)
@@ -214,19 +219,25 @@ class Apps:
         # perform imports because of the risk of import loops. It mustn't
         # call get_app_config().
         model_name = model._meta.model_name
-        app_models = self.all_models[app_label]
+        # Try to find the app_label case-insensitively
+        actual_app_label = app_label
+        for existing_label in self.all_models:
+            if existing_label.lower() == app_label.lower():
+                actual_app_label = existing_label
+                break
+        app_models = self.all_models[actual_app_label]
         if model_name in app_models:
             if (model.__name__ == app_models[model_name].__name__ and
                     model.__module__ == app_models[model_name].__module__):
                 warnings.warn(
                     "Model '%s.%s' was already registered. "
                     "Reloading models is not advised as it can lead to inconsistencies, "
-                    "most notably with related models." % (app_label, model_name),
+                    "most notably with related models." % (actual_app_label, model_name),
                     RuntimeWarning, stacklevel=2)
             else:
                 raise RuntimeError(
                     "Conflicting '%s' models in application '%s': %s and %s." %
-                    (model_name, app_label, app_models[model_name], model))
+                    (model_name, actual_app_label, app_models[model_name], model))
         app_models[model_name] = model
         self.do_pending_operations(model)
         self.clear_cache()
@@ -236,9 +247,11 @@ class Apps:
         Check whether an application with this name exists in the registry.
 
         app_name is the full name of the app e.g. 'django.contrib.admin'.
+        The check is case-insensitive.
         """
         self.check_apps_ready()
-        return any(ac.name == app_name for ac in self.app_configs.values())
+        app_name_lower = app_name.lower()
+        return any(ac.name.lower() == app_name_lower for ac in self.app_configs.values())
 
     def get_containing_app_config(self, object_name):
         """
diff --git a/django/tests/apps/mixed_case_app/__init__.py b/django/tests/apps/mixed_case_app/__init__.py
new file mode 100644
index 0000000000..6b2d8be70c
--- /dev/null
+++ b/django/tests/apps/mixed_case_app/__init__.py
@@ -0,0 +1 @@
+default_app_config = 'django.tests.apps.mixed_case_app.apps.MixedCaseConfig'
\ No newline at end of file
diff --git a/django/tests/apps/mixed_case_app/apps.py b/django/tests/apps/mixed_case_app/apps.py
new file mode 100644
index 0000000000..4132aee93f
--- /dev/null
+++ b/django/tests/apps/mixed_case_app/apps.py
@@ -0,0 +1,5 @@
+from django.apps import AppConfig
+
+class MixedCaseConfig(AppConfig):
+    name = 'django.tests.apps.mixed_case_app'
+    label = 'MixedCase'
\ No newline at end of file
diff --git a/django/tests/apps/mixed_case_app/models.py b/django/tests/apps/mixed_case_app/models.py
new file mode 100644
index 0000000000..92a53b2353
--- /dev/null
+++ b/django/tests/apps/mixed_case_app/models.py
@@ -0,0 +1,7 @@
+from django.db import models
+
+class Category(models.Model):
+    name = models.CharField(max_length=100)
+
+    class Meta:
+        app_label = 'MixedCase'
\ No newline at end of file
diff --git a/django/tests/apps/other_app/__init__.py b/django/tests/apps/other_app/__init__.py
new file mode 100644
index 0000000000..f447322614
--- /dev/null
+++ b/django/tests/apps/other_app/__init__.py
@@ -0,0 +1 @@
+default_app_config = 'django.tests.apps.other_app.apps.OtherAppConfig'
\ No newline at end of file
diff --git a/django/tests/apps/other_app/apps.py b/django/tests/apps/other_app/apps.py
new file mode 100644
index 0000000000..fe828b71e2
--- /dev/null
+++ b/django/tests/apps/other_app/apps.py
@@ -0,0 +1,5 @@
+from django.apps import AppConfig
+
+class OtherAppConfig(AppConfig):
+    name = 'django.tests.apps.other_app'
+    label = 'other_app'
\ No newline at end of file
diff --git a/django/tests/apps/test_case_sensitive.py b/django/tests/apps/test_case_sensitive.py
new file mode 100644
index 0000000000..014d011431
--- /dev/null
+++ b/django/tests/apps/test_case_sensitive.py
@@ -0,0 +1,40 @@
+from django.apps import apps
+from django.db import models
+from django.test import TestCase, override_settings
+from django.test.utils import isolate_apps
+
+
+class CaseSensitiveAppConfigTests(TestCase):
+    @override_settings(INSTALLED_APPS=['django.tests.apps.mixed_case_app'])
+    def test_case_insensitive_app_config(self):
+        """
+        Test that app configs can be retrieved case-insensitively.
+        """
+        # Test that we can get the app config with different case variations
+        self.assertEqual(apps.get_app_config('MixedCase').label, 'MixedCase')
+        self.assertEqual(apps.get_app_config('mixedcase').label, 'MixedCase')
+        self.assertEqual(apps.get_app_config('MIXEDCASE').label, 'MixedCase')
+
+    @override_settings(INSTALLED_APPS=['django.tests.apps.mixed_case_app', 'django.tests.apps.other_app'])
+    def test_case_insensitive_foreign_key(self):
+        """
+        Test that ForeignKey relationships work with mixed-case app names.
+        """
+        class Content(models.Model):
+            category = models.ForeignKey('MixedCase.Category', on_delete=models.CASCADE)
+
+            class Meta:
+                app_label = 'other_app'
+
+        # This should not raise any exceptions
+        Content._meta.get_field('category').remote_field.model
+
+    @override_settings(INSTALLED_APPS=['django.tests.apps.mixed_case_app'])
+    def test_mixed_case_installed_apps(self):
+        """
+        Test that apps with mixed-case names in INSTALLED_APPS work correctly.
+        """
+        # Test that the app is properly registered
+        self.assertTrue(apps.is_installed('django.tests.apps.mixed_case_app'))
+        self.assertTrue(apps.is_installed('django.tests.apps.mixed_case_app'.upper()))
+        self.assertTrue(apps.is_installed('django.tests.apps.mixed_case_app'.lower()))
\ No newline at end of file
