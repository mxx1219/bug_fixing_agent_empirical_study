diff --git a/.gitignore b/.gitignore
index 238fb3a200..975c5364d8 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,6 @@ tests/coverage_html/
 tests/.coverage
 build/
 tests/report/
+*__pycache__*
+*venv*
+*_build*
diff --git a/demo_admin_url.py b/demo_admin_url.py
new file mode 100644
index 0000000000..5ce6ce3e4f
--- /dev/null
+++ b/demo_admin_url.py
@@ -0,0 +1,54 @@
+from django.contrib.admin.helpers import AdminReadonlyField
+from django.contrib.admin.sites import AdminSite
+from django.contrib.admin import ModelAdmin
+from django.db import models
+from django.urls import reverse
+
+# Create a simple model
+class DemoModel(models.Model):
+    name = models.CharField(max_length=100)
+
+# Create a custom admin site
+class CustomAdminSite(AdminSite):
+    site_url = '/custom-admin/'
+    name = 'custom_admin'
+
+# Create a model admin
+class DemoModelAdmin(ModelAdmin):
+    pass
+
+# Create instances
+custom_site = CustomAdminSite()
+model_admin = DemoModelAdmin(DemoModel, custom_site)
+obj = DemoModel(name='Test')
+
+# Create an AdminReadonlyField
+field = AdminReadonlyField(model_admin, obj, 'name', is_first=True)
+
+# Print the current implementation of get_admin_url
+print("Current get_admin_url implementation:")
+print(AdminReadonlyField.get_admin_url.__code__.co_code)
+
+# Create a patched version of get_admin_url
+def patched_get_admin_url(self, remote_field, remote_obj):
+    url_name = 'admin:%s_%s_change' % (
+        remote_field.model._meta.app_label,
+        remote_field.model._meta.model_name,
+    )
+    try:
+        url = reverse(
+            url_name,
+            args=[quote(remote_obj.pk)],
+            current_app=self.model_admin.admin_site.name
+        )
+        return format_html('<a href="{}">{}</a>', url, remote_obj)
+    except NoReverseMatch:
+        return str(remote_obj)
+
+print("\nPatched get_admin_url implementation:")
+print(patched_get_admin_url.__code__.co_code)
+
+# Show the difference
+print("\nKey difference:")
+print("Original: url = reverse(url_name, args=[quote(remote_obj.pk)])")
+print("Patched:  url = reverse(url_name, args=[quote(remote_obj.pk)], current_app=self.model_admin.admin_site.name)")
\ No newline at end of file
diff --git a/django/contrib/admin/helpers.py b/django/contrib/admin/helpers.py
index dd154f72ee..ba8c3463a0 100644
--- a/django/contrib/admin/helpers.py
+++ b/django/contrib/admin/helpers.py
@@ -209,7 +209,11 @@ class AdminReadonlyField:
             remote_field.model._meta.model_name,
         )
         try:
-            url = reverse(url_name, args=[quote(remote_obj.pk)])
+            url = reverse(
+                url_name,
+                args=[quote(remote_obj.pk)],
+                current_app=self.model_admin.admin_site.name
+            )
             return format_html('<a href="{}">{}</a>', url, remote_obj)
         except NoReverseMatch:
             return str(remote_obj)
diff --git a/test_admin_url.py b/test_admin_url.py
new file mode 100644
index 0000000000..b27900d2e2
--- /dev/null
+++ b/test_admin_url.py
@@ -0,0 +1,143 @@
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings before importing any Django modules
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.auth',
+        'django.contrib.contenttypes',
+        'django.contrib.sessions',
+        'django.contrib.admin',
+        'django.contrib.messages',
+        'admin_test',
+    ],
+    MIDDLEWARE=[
+        'django.contrib.sessions.middleware.SessionMiddleware',
+        'django.contrib.auth.middleware.AuthenticationMiddleware',
+        'django.contrib.messages.middleware.MessageMiddleware',
+    ],
+    ROOT_URLCONF=__name__,
+    DEFAULT_AUTO_FIELD='django.db.models.AutoField',
+    TEMPLATES=[{
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    }],
+)
+django.setup()
+
+from django.contrib import admin
+from django.contrib.admin.sites import AdminSite
+from django.db import models
+from django.test import TestCase, RequestFactory
+from django.urls import path, reverse
+from django.contrib.auth.models import User
+
+# Create test models
+class Author(models.Model):
+    name = models.CharField(max_length=100)
+
+    def __str__(self):
+        return self.name
+
+    class Meta:
+        app_label = 'admin_test'
+        db_table = 'admin_test_author'
+
+class Book(models.Model):
+    title = models.CharField(max_length=100)
+    author = models.ForeignKey(Author, on_delete=models.CASCADE)
+
+    def __str__(self):
+        return self.title
+
+    class Meta:
+        app_label = 'admin_test'
+        db_table = 'admin_test_book'
+
+# Create custom admin site
+class CustomAdminSite(AdminSite):
+    site_url = '/custom-admin/'
+    name = 'custom_admin'
+
+# Create model admin with readonly field
+class BookAdmin(admin.ModelAdmin):
+    readonly_fields = ['author']
+
+# Set up the custom admin site
+custom_admin_site = CustomAdminSite()
+custom_admin_site.register(Book, BookAdmin)
+custom_admin_site.register(Author)
+
+# Set up URLs
+urlpatterns = [
+    path('custom-admin/', custom_admin_site.urls),
+]
+
+# Create test case
+class AdminUrlTest(TestCase):
+    @classmethod
+    def setUpClass(cls):
+        super().setUpClass()
+        # Create database tables
+        from django.core.management import call_command
+        call_command('migrate')
+
+    def setUp(self):
+        self.factory = RequestFactory()
+        self.user = User.objects.create_superuser('admin', 'admin@test.com', 'password')
+        self.author = Author.objects.create(name='Test Author')
+        self.book = Book.objects.create(title='Test Book', author=self.author)
+        
+        # Set up URLs
+        self.urlpatterns = [
+            path('custom-admin/', custom_admin_site.urls),
+        ]
+        with self.settings(ROOT_URLCONF=__name__):
+            self.change_url = reverse(
+                'custom_admin:admin_test_book_change',
+                args=[self.book.pk],
+                current_app=custom_admin_site.name
+            )
+
+    def test_readonly_foreign_key_url(self):
+        request = self.factory.get(self.change_url)
+        request.user = self.user
+        
+        # Get the admin view
+        model_admin = custom_admin_site._registry[Book]
+        admin_form = model_admin.get_form(request, self.book)(instance=self.book)
+        
+        # Check if the author URL in readonly field uses custom admin URL
+        author_url = reverse(
+            'custom_admin:admin_test_author_change',
+            args=[self.author.pk],
+            current_app=custom_admin_site.name
+        )
+        self.assertIn(author_url, str(admin_form))
+
+if __name__ == '__main__':
+    
+    # Run the test
+    from django.test.runner import DiscoverRunner
+    test_runner = DiscoverRunner(verbosity=2)
+    failures = test_runner.run_tests(['__main__'])
+    if failures:
+        print("Test failed!")
+    else:
+        print("Test passed!")
\ No newline at end of file
