diff --git a/django/utils/numberformat.py b/django/utils/numberformat.py
index 88b35fc435..b32abee189 100644
--- a/django/utils/numberformat.py
+++ b/django/utils/numberformat.py
@@ -27,6 +27,13 @@ def format(number, decimal_sep, decimal_pos=None, grouping=0, thousand_sep='',
     # sign
     sign = ''
     if isinstance(number, Decimal):
+        # When decimal_pos is specified and the number is very small,
+        # return 0 with the specified number of decimal places
+        if decimal_pos is not None:
+            _, digits, exponent = number.as_tuple()
+            if exponent < -decimal_pos:
+                return '0' + decimal_sep + '0' * decimal_pos
+
         # Format values with more than 200 digits (an arbitrary cutoff) using
         # scientific notation to avoid high memory usage in {:f}'.format().
         _, digits, exponent = number.as_tuple()
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..010a89a889
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,22 @@
+from decimal import Decimal
+from django.conf import settings
+settings.configure()
+from django.utils.numberformat import format as nformat
+
+# Test cases
+test_values = [
+    Decimal('1e-199'),
+    Decimal('1e-200'),
+    Decimal('1e-201'),
+    Decimal('0.000000001'),  # 1e-9
+    Decimal('0.1'),         # Should show 0.10
+    Decimal('0.01'),        # Should show 0.01
+    Decimal('0.001'),       # Should show 0.00
+    Decimal('-1e-200'),     # Negative very small number
+    Decimal('0'),           # Zero
+]
+
+print("Testing number formatting with decimal_pos=2:")
+for value in test_values:
+    formatted = nformat(value, '.', decimal_pos=2)
+    print(f"{value} -> {formatted}")
\ No newline at end of file
