diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index a791908caf..9be6d6086a 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -454,9 +454,51 @@ class SQLCompiler:
         combinator_sql = self.connection.ops.set_operators[combinator]
         if all and combinator == 'union':
             combinator_sql += ' ALL'
-        braces = '({})' if features.supports_slicing_ordering_in_compound else '{}'
-        sql_parts, args_parts = zip(*((braces.format(sql), args) for sql, args in parts))
-        result = [' {} '.format(combinator_sql).join(sql_parts)]
+        
+        # For union queries with ordering, we need to handle the SQL generation carefully
+        needs_ordering = combinator == 'union' and self.query.order_by
+        
+        # Build each part of the union query
+        sql_parts, args_parts = [], []
+        for sql, args in parts:
+            # For SQLite, we need to ensure each part is a proper SELECT statement
+            if not sql.upper().startswith('SELECT '):
+                sql = 'SELECT * FROM (%s)' % sql
+            sql_parts.append(sql)
+            args_parts.append(args)
+        
+        # Join the parts with the combinator
+        combined_sql = ' %s ' % combinator_sql
+        combined_sql = combined_sql.join(sql_parts)
+        
+        # Handle ordering for union queries
+        if needs_ordering:
+            # Get the order by columns
+            order_by = []
+            for field in self.query.order_by:
+                if isinstance(field, str) and field.startswith('-'):
+                    field_name = field[1:]
+                    direction = ' DESC'
+                else:
+                    field_name = field
+                    direction = ''
+                # Use the column name instead of position
+                if field_name == '?':
+                    order_by.append('RANDOM()')
+                else:
+                    # Remove table name if present and quotes
+                    field_name = field_name.split('.')[-1].strip('"')
+                    # For union queries, we need to reference the column directly
+                    # Quote the field name to handle reserved words
+                    order_by.append('"%s"%s' % (field_name.lstrip('-'), direction))
+            if order_by:
+                # For union queries, we need to wrap the entire query
+                # For SQLite, we need to ensure the subquery has an alias and is properly wrapped
+                combined_sql = 'SELECT * FROM (%s) AS _union_subquery ORDER BY %s' % (
+                    combined_sql, ', '.join(order_by)
+                )
+        
+        result = [combined_sql]
         params = []
         for part in args_parts:
             params.extend(part)
diff --git a/reproduce_union_order.py b/reproduce_union_order.py
new file mode 100644
index 0000000000..6e051dd8a5
--- /dev/null
+++ b/reproduce_union_order.py
@@ -0,0 +1,60 @@
+from django.db import models
+from django.test.utils import setup_test_environment
+from django.db import connection
+from django.conf import settings
+
+# Set up the test environment
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:'
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ]
+)
+
+import django
+django.setup()
+
+# Create a simple model for testing
+class Dimension(models.Model):
+    name = models.CharField(max_length=100)
+    order = models.IntegerField()
+
+    class Meta:
+        # Use the default app_label
+        app_label = 'django.contrib.contenttypes'
+
+    def __str__(self):
+        return self.name
+
+# Create the tables
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Dimension)
+
+# Create some test data
+Dimension.objects.create(id=10, name='dim1', order=1)
+Dimension.objects.create(id=11, name='dim2', order=2)
+Dimension.objects.create(id=16, name='dim3', order=3)
+Dimension.objects.create(id=17, name='dim4', order=4)
+
+# Reproduce the issue
+qs = (
+    Dimension.objects.filter(pk__in=[10, 11])
+    .union(Dimension.objects.filter(pk__in=[16, 17]))
+    .order_by('order')
+)
+
+print("Initial queryset:")
+print(list(qs))
+
+print("\nTrying to reorder:")
+print(list(qs.order_by().values_list('pk', flat=True)))
+
+print("\nTrying to evaluate original qs again:")
+print(list(qs))
\ No newline at end of file
