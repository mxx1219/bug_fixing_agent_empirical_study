diff --git a/astropy/coordinates/sky_coordinate.py b/astropy/coordinates/sky_coordinate.py
index ab475f7d0d..bf202dae2d 100644
--- a/astropy/coordinates/sky_coordinate.py
+++ b/astropy/coordinates/sky_coordinate.py
@@ -871,33 +871,45 @@ class SkyCoord(ShapedLikeNDArray):
         Overrides getattr to return coordinates that this can be transformed
         to, based on the alias attr in the primary transform graph.
         """
-        if "_sky_coord_frame" in self.__dict__:
-            if self._is_name(attr):
-                return self  # Should this be a deepcopy of self?
-
-            # Anything in the set of all possible frame_attr_names is handled
-            # here. If the attr is relevant for the current frame then delegate
-            # to self.frame otherwise get it from self._<attr>.
-            if attr in frame_transform_graph.frame_attributes:
-                if attr in self.frame.frame_attributes:
-                    return getattr(self.frame, attr)
-                else:
-                    return getattr(self, "_" + attr, None)
-
-            # Some attributes might not fall in the above category but still
-            # are available through self._sky_coord_frame.
-            if not attr.startswith("_") and hasattr(self._sky_coord_frame, attr):
-                return getattr(self._sky_coord_frame, attr)
-
-            # Try to interpret as a new frame for transforming.
-            frame_cls = frame_transform_graph.lookup_name(attr)
-            if frame_cls is not None and self.frame.is_transformable_to(frame_cls):
-                return self.transform_to(attr)
-
-        # Fail
-        raise AttributeError(
-            f"'{self.__class__.__name__}' object has no attribute '{attr}'"
-        )
+        # First try to get the attribute normally - this handles properties
+        # that might raise AttributeError
+        try:
+            return object.__getattribute__(self, attr)
+        except AttributeError as orig_exc:
+            # If we get here, either:
+            # 1. The attribute doesn't exist at all
+            # 2. A property exists but raised AttributeError accessing an underlying attribute
+            # In case 2, we want to propagate the original error
+            if attr in type(self).__dict__ and isinstance(type(self).__dict__[attr], property):
+                raise orig_exc
+
+            if "_sky_coord_frame" in self.__dict__:
+                if self._is_name(attr):
+                    return self  # Should this be a deepcopy of self?
+
+                # Anything in the set of all possible frame_attr_names is handled
+                # here. If the attr is relevant for the current frame then delegate
+                # to self.frame otherwise get it from self._<attr>.
+                if attr in frame_transform_graph.frame_attributes:
+                    if attr in self.frame.frame_attributes:
+                        return getattr(self.frame, attr)
+                    else:
+                        return getattr(self, "_" + attr, None)
+
+                # Some attributes might not fall in the above category but still
+                # are available through self._sky_coord_frame.
+                if not attr.startswith("_") and hasattr(self._sky_coord_frame, attr):
+                    return getattr(self._sky_coord_frame, attr)
+
+                # Try to interpret as a new frame for transforming.
+                frame_cls = frame_transform_graph.lookup_name(attr)
+                if frame_cls is not None and self.frame.is_transformable_to(frame_cls):
+                    return self.transform_to(attr)
+
+            # Fail
+            raise AttributeError(
+                f"'{self.__class__.__name__}' object has no attribute '{attr}'"
+            )
 
     def __setattr__(self, attr, val):
         # This is to make anything available through __getattr__ immutable
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..6165ab05eb
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,11 @@
+import astropy.coordinates as coord
+
+
+class custom_coord(coord.SkyCoord):
+    @property
+    def prop(self):
+        return self.random_attr
+
+
+c = custom_coord('00h42m30s', '+41d12m00s', frame='icrs')
+c.prop
\ No newline at end of file
