diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py
index abdeba8efb..d75c0b6458 100644
--- a/astropy/io/ascii/rst.py
+++ b/astropy/io/ascii/rst.py
@@ -3,7 +3,6 @@
 :Author: Simon Gibbons (simongibbons@gmail.com)
 """
 
-
 from .core import DefaultSplitter
 from .fixedwidth import (
     FixedWidth,
@@ -12,7 +11,6 @@ from .fixedwidth import (
     FixedWidthTwoLineDataSplitter,
 )
 
-
 class SimpleRSTHeader(FixedWidthHeader):
     position_line = 0
     start_line = 1
@@ -25,13 +23,11 @@ class SimpleRSTHeader(FixedWidthHeader):
         ends[-1] = None
         return vals, starts, ends
 
-
 class SimpleRSTData(FixedWidthData):
     start_line = 3
     end_line = -1
     splitter_class = FixedWidthTwoLineDataSplitter
 
-
 class RST(FixedWidth):
     """reStructuredText simple format table.
 
@@ -42,14 +38,13 @@ class RST(FixedWidth):
         ==== ===== ======
         Col1  Col2  Col3
         ==== ===== ======
-          1    2.3  Hello
-          2    4.5  Worlds
+        1    2.3  Hello
+        2    4.5  Worlds
         ==== ===== ======
 
     Currently there is no support for reading tables which utilize continuation lines,
     or for ones which define column spans through the use of an additional
     line of dashes in the header.
-
     """
 
     _format_name = "rst"
@@ -57,10 +52,75 @@ class RST(FixedWidth):
     data_class = SimpleRSTData
     header_class = SimpleRSTHeader
 
-    def __init__(self):
-        super().__init__(delimiter_pad=None, bookend=False)
-
-    def write(self, lines):
-        lines = super().write(lines)
-        lines = [lines[1]] + lines + [lines[1]]
-        return lines
+    def __init__(self, header_rows=None, **kwargs):
+        super().__init__(delimiter_pad=None, bookend=False, **kwargs)
+        self.header_rows = header_rows
+
+    def write(self, table):
+        """Write the table as a list of strings.
+
+        Parameters
+        ----------
+        table : 
+            Input table data.
+
+        Returns
+        -------
+        lines : list
+            List of strings corresponding to ASCII table
+        """
+        self._table = table  # Store table reference for header_rows processing
+        lines = super().write(table)
+        
+        # Debug output
+        print("\nDebug: Original lines:")
+        for i, line in enumerate(lines):
+            print(f"{i}: {line}")
+        
+        if not self.header_rows:
+            return [lines[1]] + lines + [lines[1]]
+            
+        # Get the column widths from the separator line
+        sep_line = lines[1]
+        col_widths = []
+        current_width = 0
+        for char in sep_line:
+            if char == "=":
+                current_width += 1
+            elif char == " " and current_width > 0:
+                col_widths.append(current_width)
+                current_width = 0
+        if current_width > 0:
+            col_widths.append(current_width)
+        
+        # Create header rows
+        header_lines = []
+        for row_type in self.header_rows:
+            if row_type == "name":
+                header_lines.append(lines[2])  # Original column names
+            elif row_type == "unit":
+                # Get units from the table
+                units = []
+                for col in self._table.columns.values():
+                    unit = col.unit.to_string() if hasattr(col, "unit") and col.unit else ""
+                    units.append(unit)
+                # Format unit line with proper spacing
+                unit_line = ""
+                for width, unit in zip(col_widths, units):
+                    unit_line += f"{unit:{width}} "
+                header_lines.append(unit_line.rstrip())
+        
+        # Build the final table
+        result = []
+        result.append(sep_line)  # Top separator
+        result.extend(header_lines)  # Header rows
+        result.append(sep_line)  # Header separator
+        result.extend(lines[3:-1])  # Data rows (excluding the last separator)
+        result.append(sep_line)  # Bottom separator
+        
+        # Debug output
+        print("\nDebug: Generated lines:")
+        for i, line in enumerate(result):
+            print(f"{i}: {line}")
+        
+        return result
diff --git a/test.py b/test.py
new file mode 100644
index 0000000000..567a8bdd29
--- /dev/null
+++ b/test.py
@@ -0,0 +1,17 @@
+from astropy.table import QTable
+import astropy.units as u
+import sys
+
+tbl = QTable({"wave": [350,950]*u.nm, "response": [0.7, 1.2]*u.count})
+
+print("\nTesting basic RST output:")
+tbl.write(sys.stdout, format="ascii.rst")
+
+print("\nTesting RST output with name header:")
+tbl.write(sys.stdout, format="ascii.rst", header_rows=["name"])
+
+print("\nTesting RST output with unit header:")
+tbl.write(sys.stdout, format="ascii.rst", header_rows=["unit"])
+
+print("\nTesting RST output with name and unit headers:")
+tbl.write(sys.stdout, format="ascii.rst", header_rows=["name", "unit"])
