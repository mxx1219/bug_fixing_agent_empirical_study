diff --git a/.gitignore b/.gitignore
index 238fb3a200..975c5364d8 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,6 @@ tests/coverage_html/
 tests/.coverage
 build/
 tests/report/
+*__pycache__*
+*venv*
+*_build*
diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index abbb1e37cb..c48e3a0250 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -725,9 +725,17 @@ class SQLCompiler:
         field, targets, alias, joins, path, opts, transform_function = self._setup_joins(pieces, opts, alias)
 
         # If we get to this point and the field is a relation to another model,
-        # append the default ordering for that model unless it is the pk
-        # shortcut or the attribute name of the field that is specified.
-        if field.is_relation and opts.ordering and getattr(field, 'attname', None) != name and name != 'pk':
+        # append the default ordering for that model unless:
+        # 1. it is the pk shortcut
+        # 2. it is the attribute name of the field that is specified
+        # 3. it is a self-referential foreign key and we're ordering by its _id field
+        is_self_ref_fk = (field.is_relation and 
+                         field.related_model == field.model and 
+                         name.endswith('_id'))
+        if (field.is_relation and opts.ordering and 
+            getattr(field, 'attname', None) != name and 
+            name != 'pk' and 
+            not is_self_ref_fk):
             # Firstly, avoid infinite loops.
             already_seen = already_seen or set()
             join_tuple = tuple(getattr(self.query.alias_map[j], 'join_cols', None) for j in joins)
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..9445c0a496
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,77 @@
+from django.db import models
+from django.test.utils import setup_test_environment
+from django.conf import settings
+import os
+import django
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+        'django.db.models.base',  # Add this to allow our models
+    ],
+)
+
+django.setup()
+
+# Define the models
+class OneModel(models.Model):
+    class Meta:
+        ordering = ("-id",)
+        app_label = 'django.db.models.base'
+    id = models.BigAutoField(primary_key=True)
+    root = models.ForeignKey("self", on_delete=models.CASCADE, null=True)
+    oneval = models.BigIntegerField(null=True)
+
+class TwoModel(models.Model):
+    class Meta:
+        app_label = 'django.db.models.base'
+    id = models.BigAutoField(primary_key=True)
+    record = models.ForeignKey(OneModel, on_delete=models.CASCADE)
+    twoval = models.BigIntegerField(null=True)
+
+# Create tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(OneModel)
+    schema_editor.create_model(TwoModel)
+
+# Create some test data
+one1 = OneModel.objects.create(oneval=1)
+one2 = OneModel.objects.create(oneval=2, root=one1)
+one3 = OneModel.objects.create(oneval=3, root=one2)
+
+two1 = TwoModel.objects.create(record=one1, twoval=10)
+two2 = TwoModel.objects.create(record=one2, twoval=20)
+two3 = TwoModel.objects.create(record=one3, twoval=30)
+
+# Test the problematic queries
+print("\nTest 1 - Problematic query with record__root_id:")
+qs = TwoModel.objects.filter(record__oneval__in=[1,2,3])
+qs = qs.order_by("record__root_id")
+print(qs.query)
+
+print("\nTest 2 - Working query with record__root__id:")
+qs = TwoModel.objects.filter(record__oneval__in=[1,2,3])
+qs = qs.order_by("record__root__id")
+print(qs.query)
+
+print("\nTest 3 - Working query with annotation:")
+from django.db.models import F
+qs = TwoModel.objects.filter(record__oneval__in=[1,2,3])
+qs = qs.annotate(root_id=F("record__root_id"))
+qs = qs.order_by("root_id")
+print(qs.query)
+
+print("\nTest 4 - Inverted sort order:")
+qs = TwoModel.objects.filter(record__oneval__in=[1,2,3])
+qs = qs.order_by("-record__root_id")
+print(qs.query)
\ No newline at end of file
