diff --git a/django/core/management/commands/runserver.py b/django/core/management/commands/runserver.py
index d9fb088350..2933146c9f 100644
--- a/django/core/management/commands/runserver.py
+++ b/django/core/management/commands/runserver.py
@@ -51,6 +51,10 @@ class Command(BaseCommand):
             '--noreload', action='store_false', dest='use_reloader',
             help='Tells Django to NOT use the auto-reloader.',
         )
+        parser.add_argument(
+            '--skip-checks', action='store_true',
+            help='Skip system checks.',
+        )
 
     def execute(self, *args, **options):
         if options['no_color']:
@@ -114,11 +118,12 @@ class Command(BaseCommand):
         shutdown_message = options.get('shutdown_message', '')
         quit_command = 'CTRL-BREAK' if sys.platform == 'win32' else 'CONTROL-C'
 
-        self.stdout.write("Performing system checks...\n\n")
-        self.check(display_num_errors=True)
-        # Need to check migrations here, so can't use the
-        # requires_migrations_check attribute.
-        self.check_migrations()
+        if not options.get('skip_checks', False):
+            self.stdout.write("Performing system checks...\n\n")
+            self.check(display_num_errors=True)
+            # Need to check migrations here, so can't use the
+            # requires_migrations_check attribute.
+            self.check_migrations()
         now = datetime.now().strftime('%B %d, %Y - %X')
         self.stdout.write(now)
         self.stdout.write((
diff --git a/run_test.sh b/run_test.sh
new file mode 100755
index 0000000000..a15a722576
--- /dev/null
+++ b/run_test.sh
@@ -0,0 +1,3 @@
+#!/bin/bash
+cd /testbed
+PYTHONPATH=/testbed python3 test_runserver.py
\ No newline at end of file
diff --git a/test_runserver.py b/test_runserver.py
new file mode 100644
index 0000000000..c5d8bb3878
--- /dev/null
+++ b/test_runserver.py
@@ -0,0 +1,48 @@
+import os
+import sys
+import time
+from io import StringIO
+from django.core.management import call_command
+from django.test import TestCase
+from django.test.utils import override_settings
+
+class RunserverCommandTest(TestCase):
+    def setUp(self):
+        self.output = StringIO()
+
+    def test_skip_checks_option(self):
+        # Test without --skip-checks
+        start_time = time.time()
+        try:
+            call_command('runserver', '--noreload', stdout=self.output)
+        except Exception as e:
+            if not isinstance(e, SystemExit):
+                raise e
+        output_without_skip = self.output.getvalue()
+        time_without_skip = time.time() - start_time
+        print("\nWithout --skip-checks:")
+        print(output_without_skip)
+        print(f"Time taken: {time_without_skip:.2f}s")
+
+        # Test with --skip-checks
+        self.output = StringIO()
+        start_time = time.time()
+        try:
+            call_command('runserver', '--noreload', '--skip-checks', stdout=self.output)
+        except Exception as e:
+            if not isinstance(e, SystemExit):
+                raise e
+        output_with_skip = self.output.getvalue()
+        time_with_skip = time.time() - start_time
+        print("\nWith --skip-checks:")
+        print(output_with_skip)
+        print(f"Time taken: {time_with_skip:.2f}s")
+
+        # Verify that system checks message appears only when not skipping
+        self.assertIn("Performing system checks", output_without_skip)
+        self.assertNotIn("Performing system checks", output_with_skip)
+
+if __name__ == '__main__':
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.settings')
+    from django.core.management import execute_from_command_line
+    execute_from_command_line([sys.argv[0], 'test', 'test_runserver.RunserverCommandTest'])
\ No newline at end of file
diff --git a/tests/settings.py b/tests/settings.py
new file mode 100644
index 0000000000..884696714e
--- /dev/null
+++ b/tests/settings.py
@@ -0,0 +1,40 @@
+DEBUG = True
+SECRET_KEY = 'dummy-key-for-test'
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+]
+MIDDLEWARE = [
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+]
+ROOT_URLCONF = 'tests.urls'
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+STATIC_URL = '/static/'
\ No newline at end of file
