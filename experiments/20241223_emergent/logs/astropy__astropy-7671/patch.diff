diff --git a/astropy/utils/introspection.py b/astropy/utils/introspection.py
index 3e784f9fc3..3d2c4e6015 100644
--- a/astropy/utils/introspection.py
+++ b/astropy/utils/introspection.py
@@ -7,6 +7,7 @@ import inspect
 import types
 import importlib
 from distutils.version import LooseVersion
+from pkg_resources import parse_version
 
 
 __all__ = ['resolve_name', 'minversion', 'find_current_module',
@@ -139,10 +140,17 @@ def minversion(module, version, inclusive=True, version_path='__version__'):
     else:
         have_version = resolve_name(module.__name__, version_path)
 
-    if inclusive:
-        return LooseVersion(have_version) >= LooseVersion(version)
-    else:
-        return LooseVersion(have_version) > LooseVersion(version)
+    try:
+        if inclusive:
+            return LooseVersion(have_version) >= LooseVersion(version)
+        else:
+            return LooseVersion(have_version) > LooseVersion(version)
+    except TypeError:
+        # Fall back to parse_version for development versions
+        if inclusive:
+            return parse_version(have_version) >= parse_version(version)
+        else:
+            return parse_version(have_version) > parse_version(version)
 
 
 def find_current_module(depth=1, finddiff=False):
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..4992ce5ef2
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,30 @@
+import sys
+from types import ModuleType
+from astropy.utils import minversion
+
+# Create a mock module
+class MockModule:
+    def __init__(self, version):
+        self.__version__ = version
+
+print("Testing minversion with development version...")
+test_cases = [
+    ('1.14.3', '1.14dev'),
+    ('1.14', '1.14dev'),
+    ('1.13', '1.14dev'),
+    ('1.15', '1.14dev'),
+    ('2.0dev', '1.14dev'),
+    ('1.14dev', '1.14dev'),
+]
+
+mock_mod = ModuleType('mock_numpy')
+sys.modules['mock_numpy'] = mock_mod
+
+for have_version, required_version in test_cases:
+    print(f"\nTesting {have_version} >= {required_version}")
+    mock_mod.__version__ = have_version
+    try:
+        result = minversion('mock_numpy', required_version)
+        print(f"Result: {result}")
+    except Exception as e:
+        print(f"Error: {e}")
\ No newline at end of file
