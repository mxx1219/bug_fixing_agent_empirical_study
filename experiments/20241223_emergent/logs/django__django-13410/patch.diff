diff --git a/django/core/files/locks.py b/django/core/files/locks.py
index c46b00b905..4938347ea7 100644
--- a/django/core/files/locks.py
+++ b/django/core/files/locks.py
@@ -107,9 +107,15 @@ else:
             return True
     else:
         def lock(f, flags):
-            ret = fcntl.flock(_fd(f), flags)
-            return ret == 0
+            try:
+                fcntl.flock(_fd(f), flags)
+                return True
+            except OSError:
+                return False
 
         def unlock(f):
-            ret = fcntl.flock(_fd(f), fcntl.LOCK_UN)
-            return ret == 0
+            try:
+                fcntl.flock(_fd(f), fcntl.LOCK_UN)
+                return True
+            except OSError:
+                return False
diff --git a/reproduce_lock_bug.py b/reproduce_lock_bug.py
new file mode 100644
index 0000000000..8b7efbdd15
--- /dev/null
+++ b/reproduce_lock_bug.py
@@ -0,0 +1,32 @@
+import os
+import sys
+sys.path.insert(0, os.path.abspath('.'))
+
+from django.core.files import locks
+
+def test_file_locking():
+    print("Testing file locking...")
+    
+    # Create a test file
+    with open('test_lock_file.txt', 'w') as f:
+        f.write('test content')
+    
+    # Try to acquire lock
+    with open('test_lock_file.txt', 'r') as f:
+        # Try exclusive lock
+        result = locks.lock(f, locks.LOCK_EX)
+        print(f"Exclusive lock acquired: {result}")  # Should be True, but returns False
+        
+        # Try non-blocking lock (should fail since we already have lock)
+        result2 = locks.lock(f, locks.LOCK_EX | locks.LOCK_NB)
+        print(f"Non-blocking lock attempt: {result2}")  # Should be False
+        
+        # Unlock
+        unlock_result = locks.unlock(f)
+        print(f"Unlock result: {unlock_result}")  # Should be True, but returns False
+
+    # Clean up
+    os.remove('test_lock_file.txt')
+
+if __name__ == '__main__':
+    test_file_locking()
\ No newline at end of file
