diff --git a/django/core/handlers/asgi.py b/django/core/handlers/asgi.py
index 7fbabe4510..8dd285cc54 100644
--- a/django/core/handlers/asgi.py
+++ b/django/core/handlers/asgi.py
@@ -159,6 +159,11 @@ class ASGIHandler(base.BaseHandler):
             return
         # Get the response, using the async mode of BaseHandler.
         response = await self.get_response_async(request)
+        
+        # Handle coroutine responses
+        if asyncio.iscoroutine(response):
+            response = await response
+            
         response._handler_class = self.__class__
         # Increase chunk size on file responses (ASGI servers handles low-level
         # chunking).
diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py
index 169df6b3cf..bcb9c9240e 100644
--- a/django/core/handlers/base.py
+++ b/django/core/handlers/base.py
@@ -114,11 +114,28 @@ class BaseHandler:
             if not method_is_async:
                 if debug:
                     logger.debug('Synchronous %s adapted.', name)
-                return sync_to_async(method, thread_sensitive=True)
+                async def async_wrapper(*args, **kwargs):
+                    response = await sync_to_async(method, thread_sensitive=True)(*args, **kwargs)
+                    if asyncio.iscoroutine(response):
+                        response = await response
+                    return response
+                return async_wrapper
+            else:
+                async def async_wrapper(*args, **kwargs):
+                    response = await method(*args, **kwargs)
+                    if asyncio.iscoroutine(response):
+                        response = await response
+                    return response
+                return async_wrapper
         elif method_is_async:
             if debug:
                 logger.debug('Asynchronous %s adapted.', name)
-            return async_to_sync(method)
+            def sync_wrapper(*args, **kwargs):
+                response = async_to_sync(method)(*args, **kwargs)
+                if asyncio.iscoroutine(response):
+                    response = async_to_sync(lambda: response)()
+                return response
+            return sync_wrapper
         return method
 
     def get_response(self, request):
@@ -146,6 +163,11 @@ class BaseHandler:
         # Setup default url resolver for this thread.
         set_urlconf(settings.ROOT_URLCONF)
         response = await self._middleware_chain(request)
+        
+        # Handle coroutine responses
+        if asyncio.iscoroutine(response):
+            response = await response
+            
         response._resource_closers.append(request.close)
         if response.status_code >= 400:
             await sync_to_async(log_response)(
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..4f482c7cb5
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,77 @@
+import os
+import sys
+import django
+import asyncio
+from django.conf import settings
+from django.http import HttpResponse
+from django.urls import path
+from django.core.handlers.asgi import ASGIHandler
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='dummy',
+        MIDDLEWARE=[
+            'reproduce.DummyMiddleware1',
+            'reproduce.DummyMiddleware2',
+        ],
+        ROOT_URLCONF=__name__,
+        ALLOWED_HOSTS=['*'],
+    )
+    django.setup()
+
+class DummyMiddleware1:
+    def __init__(self, get_response):
+        self.get_response = get_response
+
+    async def __call__(self, request):
+        response = await self.get_response(request)
+        print(f"DummyMiddleware1 response type: {type(response)}")
+        return response
+
+class DummyMiddleware2:
+    def __init__(self, get_response):
+        self.get_response = get_response
+
+    async def __call__(self, request):
+        response = await self.get_response(request)
+        print(f"DummyMiddleware2 response type: {type(response)}")
+        return response
+
+async def test_view(request):
+    return HttpResponse("Test response")
+
+# URL configuration
+urlpatterns = [
+    path('', test_view),
+]
+
+async def test_request():
+    scope = {
+        'type': 'http',
+        'method': 'GET',
+        'path': '/',
+        'headers': [],
+        'query_string': b'',
+        'server': ('localhost', 8000),
+        'client': ('127.0.0.1', 32767),
+    }
+
+    async def receive():
+        return {'type': 'http.request', 'body': b'', 'more_body': False}
+
+    async def send(message):
+        if message['type'] == 'http.response.start':
+            print("Response headers:", message.get('headers', []))
+        elif message['type'] == 'http.response.body':
+            print("Response body:", message.get('body', b''))
+
+    handler = ASGIHandler()
+    await handler(scope, receive, send)
+
+if __name__ == '__main__':
+    loop = asyncio.new_event_loop()
+    asyncio.set_event_loop(loop)
+    loop.run_until_complete(test_request())
+    loop.close()
\ No newline at end of file
