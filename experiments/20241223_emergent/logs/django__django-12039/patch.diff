diff --git a/django/db/backends/ddl_references.py b/django/db/backends/ddl_references.py
index 44e49806f8..0b88837652 100644
--- a/django/db/backends/ddl_references.py
+++ b/django/db/backends/ddl_references.py
@@ -112,9 +112,13 @@ class IndexColumns(Columns):
         def col_str(column, idx):
             # Index.__init__() guarantees that self.opclasses is the same
             # length as self.columns.
-            col = '{} {}'.format(self.quote_name(column), self.opclasses[idx])
+            col = self.quote_name(column)
+            if self.opclasses[idx]:
+                col = '{} {}'.format(col, self.opclasses[idx].strip())
             try:
-                col = '{} {}'.format(col, self.col_suffixes[idx])
+                suffix = self.col_suffixes[idx]
+                if suffix:
+                    col = '{} {}'.format(col, suffix.strip())
             except IndexError:
                 pass
             return col
diff --git a/tests/backends/test_index_formatting.py b/tests/backends/test_index_formatting.py
new file mode 100644
index 0000000000..8e357208e3
--- /dev/null
+++ b/tests/backends/test_index_formatting.py
@@ -0,0 +1,65 @@
+from django.db.backends.ddl_references import IndexColumns
+import unittest
+
+
+class IndexFormattingTests(unittest.TestCase):
+    def setUp(self):
+        self.quote_name = lambda s: '"%s"' % s
+
+    def test_index_column_simple(self):
+        """Test simple column without opclass or suffix"""
+        index = IndexColumns(
+            'table',
+            ['name'],
+            self.quote_name,
+            col_suffixes=('',),
+            opclasses=('',),
+        )
+        self.assertEqual(str(index), '"name"')
+
+    def test_index_column_with_desc(self):
+        """Test column with DESC suffix"""
+        index = IndexColumns(
+            'table',
+            ['name'],
+            self.quote_name,
+            col_suffixes=('DESC',),
+            opclasses=('',),
+        )
+        self.assertEqual(str(index), '"name" DESC')
+
+    def test_index_column_with_opclass(self):
+        """Test column with opclass"""
+        index = IndexColumns(
+            'table',
+            ['name'],
+            self.quote_name,
+            col_suffixes=('',),
+            opclasses=('text_pattern_ops',),
+        )
+        self.assertEqual(str(index), '"name" text_pattern_ops')
+
+    def test_index_column_with_opclass_and_desc(self):
+        """Test column with both opclass and DESC"""
+        index = IndexColumns(
+            'table',
+            ['name'],
+            self.quote_name,
+            col_suffixes=('DESC',),
+            opclasses=('text_pattern_ops',),
+        )
+        self.assertEqual(str(index), '"name" text_pattern_ops DESC')
+
+    def test_multiple_columns(self):
+        """Test multiple columns with different combinations"""
+        index = IndexColumns(
+            'table',
+            ['name', 'age', 'city'],
+            self.quote_name,
+            col_suffixes=('DESC', '', 'ASC'),
+            opclasses=('text_pattern_ops', '', 'text_pattern_ops'),
+        )
+        self.assertEqual(
+            str(index),
+            '"name" text_pattern_ops DESC, "age", "city" text_pattern_ops ASC'
+        )
\ No newline at end of file
