diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py
index ae0f886107..48a4a56f67 100644
--- a/django/db/models/query_utils.py
+++ b/django/db/models/query_utils.py
@@ -87,7 +87,10 @@ class Q(tree.Node):
         args, kwargs = (), {}
         if len(self.children) == 1 and not isinstance(self.children[0], Q):
             child = self.children[0]
-            kwargs = {child[0]: child[1]}
+            if isinstance(child, tuple) and len(child) == 2:
+                kwargs = {child[0]: child[1]}
+            else:
+                args = (child,)
         else:
             args = tuple(self.children)
             if self.connector != self.default:
diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py
index 6dcf36ce02..4e48683e95 100644
--- a/tests/queries/test_q.py
+++ b/tests/queries/test_q.py
@@ -111,3 +111,16 @@ class QTests(SimpleTestCase):
         q = q1 & q2
         path, args, kwargs = q.deconstruct()
         self.assertEqual(Q(*args, **kwargs), q)
+
+    def test_deconstruct_non_subscriptable(self):
+        from django.db.models import Exists
+        from django.contrib.auth import get_user_model
+        User = get_user_model()
+        exists = Exists(User.objects.filter(username='jim'))
+        q = Q(exists)
+        path, args, kwargs = q.deconstruct()
+        self.assertEqual(args, (exists,))
+        self.assertEqual(kwargs, {})
+        # Verify reconstruction works
+        reconstructed = Q(*args, **kwargs)
+        self.assertEqual(reconstructed.children, [exists])
