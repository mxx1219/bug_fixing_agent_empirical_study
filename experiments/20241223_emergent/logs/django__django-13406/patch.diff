diff --git a/django/db/models/query.py b/django/db/models/query.py
index b48d0df9c0..ef1ed3455f 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -211,6 +211,9 @@ class QuerySet:
     @query.setter
     def query(self, value):
         self._query = value
+        # If the query is from a values() queryset, use ValuesIterable
+        if hasattr(value, 'values_select') and value.values_select:
+            self._iterable_class = ValuesIterable
 
     def as_manager(cls):
         # Address the circular dependency between `Queryset` and `Manager`.
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..ddc3068999
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,47 @@
+import os
+import django
+import pickle
+from django.conf import settings
+from django.db import models
+from django.db.models import Sum
+
+# Configure Django settings
+BASE_DIR = os.path.dirname(os.path.abspath(__file__))
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+        'reproduce_error',
+    ],
+)
+django.setup()
+
+# Create the tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Toy)
+
+# Create test data
+Toy.objects.create(name='foo', price=10, material='wood')
+Toy.objects.create(name='bar', price=20, material='plastic')
+Toy.objects.create(name='baz', price=100, material='wood')
+
+# Run the problematic query
+prices = Toy.objects.values('material').annotate(total_price=Sum('price'))
+print("Original query result:")
+print(prices)
+print("Type of first result:", type(prices[0]))
+
+# Try to pickle and unpickle
+prices2 = Toy.objects.all()
+prices2.query = pickle.loads(pickle.dumps(prices.query))
+print("\nAfter pickle/unpickle:")
+print("Type of first result:", type(prices2[0]))
+print(prices2)
\ No newline at end of file
diff --git a/reproduce_error2.py b/reproduce_error2.py
new file mode 100644
index 0000000000..67be33e5db
--- /dev/null
+++ b/reproduce_error2.py
@@ -0,0 +1,56 @@
+import os
+import django
+import pickle
+from django.conf import settings
+from django.db import models
+from django.db.models import Sum
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+            'reproduce_error',
+        ],
+    )
+    django.setup()
+
+# Define the model
+class Toy(models.Model):
+    name = models.CharField(max_length=16)
+    material = models.CharField(max_length=16)
+    price = models.PositiveIntegerField()
+
+    class Meta:
+        app_label = 'reproduce_error'
+
+# Create the tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Toy)
+
+# Create test data
+Toy.objects.create(name='foo', price=10, material='wood')
+Toy.objects.create(name='bar', price=20, material='plastic')
+Toy.objects.create(name='baz', price=100, material='wood')
+
+# Run the problematic query
+prices = Toy.objects.values('material').annotate(total_price=Sum('price'))
+print("Original query result:")
+print(prices)
+print("Type of first result:", type(prices[0]))
+
+# Try to pickle and unpickle
+prices2 = Toy.objects.all()
+prices2.query = pickle.loads(pickle.dumps(prices.query))
+print("\nAfter pickle/unpickle:")
+print("Type of first result:", type(prices2[0]))
+print(prices2)
\ No newline at end of file
diff --git a/test_pickle.py b/test_pickle.py
new file mode 100644
index 0000000000..5d73e4733f
--- /dev/null
+++ b/test_pickle.py
@@ -0,0 +1,51 @@
+import os
+import sys
+import django
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+            'test_pickle',
+        ],
+    )
+    django.setup()
+
+from django.db import models
+from django.db.models import Sum
+import pickle
+
+# Import model
+from test_pickle.models import Toy
+
+# Create tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Toy)
+
+# Create test data
+Toy.objects.create(name='foo', price=10, material='wood')
+Toy.objects.create(name='bar', price=20, material='plastic')
+Toy.objects.create(name='baz', price=100, material='wood')
+
+# Run query
+prices = Toy.objects.values('material').annotate(total_price=Sum('price'))
+print("\nOriginal query result:")
+print(prices)
+print("Type of first result:", type(prices[0]))
+
+# Pickle and unpickle
+prices2 = Toy.objects.all()
+prices2.query = pickle.loads(pickle.dumps(prices.query))
+print("\nAfter pickle/unpickle:")
+print("Type of first result:", type(prices2[0]))
+print(prices2)
\ No newline at end of file
diff --git a/test_pickle/__init__.py b/test_pickle/__init__.py
new file mode 100644
index 0000000000..ac509324b7
--- /dev/null
+++ b/test_pickle/__init__.py
@@ -0,0 +1 @@
+# Package init
\ No newline at end of file
diff --git a/test_pickle/models.py b/test_pickle/models.py
new file mode 100644
index 0000000000..e1dde978eb
--- /dev/null
+++ b/test_pickle/models.py
@@ -0,0 +1,9 @@
+from django.db import models
+
+class Toy(models.Model):
+    name = models.CharField(max_length=16)
+    material = models.CharField(max_length=16)
+    price = models.PositiveIntegerField()
+
+    class Meta:
+        app_label = 'test_pickle'
\ No newline at end of file
