diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 880a2cc17b..96a4a73f12 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -2030,6 +2030,21 @@ class InlineModelAdmin(BaseModelAdmin):
         # default.
         exclude = exclude or None
         can_delete = self.can_delete and self.has_delete_permission(request, obj)
+        can_change = self.has_change_permission(request, obj) if request else True
+        can_add = self.has_add_permission(request, obj) if request else True
+        has_view = self.has_view_permission(request, obj) if request else True
+        
+        # If user only has view permission, make all fields readonly
+        if has_view and not can_change:
+            # Make all fields readonly
+            readonly_fields = list(fields) if fields else [f.name for f in self.model._meta.fields]
+            exclude = list(exclude) if exclude else []
+            exclude.extend(readonly_fields)
+            # Disable adding new records
+            kwargs['extra'] = 0
+            # Disable deletion
+            can_delete = False
+
         defaults = {
             'form': self.form,
             'formset': self.formset,
@@ -2045,8 +2060,6 @@ class InlineModelAdmin(BaseModelAdmin):
         }
 
         base_model_form = defaults['form']
-        can_change = self.has_change_permission(request, obj) if request else True
-        can_add = self.has_add_permission(request, obj) if request else True
 
         class DeleteProtectedModelForm(base_model_form):
 
diff --git a/test_inline_permissions.py b/test_inline_permissions.py
new file mode 100644
index 0000000000..e512ef4340
--- /dev/null
+++ b/test_inline_permissions.py
@@ -0,0 +1,48 @@
+from django.contrib.admin.sites import AdminSite
+from django.contrib.admin.options import InlineModelAdmin
+from django.contrib.auth.models import User, Permission
+from django.test import TestCase, RequestFactory
+from django.db import models
+
+# Test models
+class Photo(models.Model):
+    title = models.CharField(max_length=100)
+
+class Report(models.Model):
+    title = models.CharField(max_length=100)
+    photos = models.ManyToManyField(Photo)
+
+# Test inline admin
+class ReportPhotoInline(InlineModelAdmin):
+    model = Report.photos.through
+    extra = 1
+
+class TestInlinePermissions(TestCase):
+    def setUp(self):
+        self.factory = RequestFactory()
+        self.user = User.objects.create_user(
+            username='testuser',
+            password='testpass'
+        )
+        # Add view permission only
+        view_perm = Permission.objects.get(codename='view_report')
+        self.user.user_permissions.add(view_perm)
+        
+        self.site = AdminSite()
+        self.inline = ReportPhotoInline(Report, self.site)
+        self.request = self.factory.get('/')
+        self.request.user = self.user
+
+    def test_view_only_permissions(self):
+        formset = self.inline.get_formset(self.request)()
+        
+        # Check that extra is 0 (no new records allowed)
+        self.assertEqual(formset.extra, 0)
+        
+        # Check that deletion is disabled
+        self.assertFalse(formset.can_delete)
+
+if __name__ == '__main__':
+    import django
+    django.setup()
+    TestCase.main()
\ No newline at end of file
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..2ab8373880
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,29 @@
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+]
+
+SECRET_KEY = 'dummy-key-for-tests'
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+ROOT_URLCONF = 'test_urls'
\ No newline at end of file
diff --git a/test_urls.py b/test_urls.py
new file mode 100644
index 0000000000..a848dfb64f
--- /dev/null
+++ b/test_urls.py
@@ -0,0 +1,3 @@
+from django.urls import path
+
+urlpatterns = []
\ No newline at end of file
diff --git a/testproject/db.sqlite3 b/testproject/db.sqlite3
new file mode 100644
index 0000000000..e7b56729a7
Binary files /dev/null and b/testproject/db.sqlite3 differ
diff --git a/testproject/manage.py b/testproject/manage.py
new file mode 100755
index 0000000000..fb52456bdf
--- /dev/null
+++ b/testproject/manage.py
@@ -0,0 +1,21 @@
+#!/usr/bin/env python
+"""Django's command-line utility for administrative tasks."""
+import os
+import sys
+
+
+def main():
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'testproject.settings')
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+
+if __name__ == '__main__':
+    main()
diff --git a/testproject/testapp/admin.py b/testproject/testapp/admin.py
new file mode 100644
index 0000000000..6c83648fe1
--- /dev/null
+++ b/testproject/testapp/admin.py
@@ -0,0 +1,100 @@
+from django.contrib import admin
+from django.contrib.admin.options import InlineModelAdmin as BaseInlineModelAdmin
+from .models import Report, Photo
+from django.forms.formsets import all_valid
+from functools import partial
+from django.contrib.admin.utils import flatten_fieldsets
+
+class InlineModelAdmin(BaseInlineModelAdmin):
+    def get_formset(self, request, obj=None, **kwargs):
+        """Return a BaseInlineFormSet class for use in admin add/change views."""
+        if 'fields' in kwargs:
+            fields = kwargs.pop('fields')
+        else:
+            fields = flatten_fieldsets(self.get_fieldsets(request, obj))
+        excluded = self.get_exclude(request, obj)
+        exclude = [] if excluded is None else list(excluded)
+        exclude.extend(self.get_readonly_fields(request, obj))
+        if excluded is None and hasattr(self.form, '_meta') and self.form._meta.exclude:
+            # Take the custom ModelForm's Meta.exclude into account only if the
+            # InlineModelAdmin doesn't define its own.
+            exclude.extend(self.form._meta.exclude)
+        # If exclude is an empty list we use None, since that's the actual
+        # default.
+        exclude = exclude or None
+        can_delete = self.can_delete and self.has_delete_permission(request, obj)
+        can_change = self.has_change_permission(request, obj) if request else True
+        can_add = self.has_add_permission(request, obj) if request else True
+        has_view = self.has_view_permission(request, obj) if request else True
+        
+        # Check if user has only view permission (no change permission)
+        if has_view and not can_change:
+            # Make all fields readonly
+            if fields:
+                exclude = list(exclude) if exclude else []
+                exclude.extend(fields)
+            else:
+                exclude = [f.name for f in self.model._meta.fields]
+            # Disable adding new records and deletion
+            kwargs['extra'] = 0
+            can_delete = False
+        
+        defaults = {
+            'form': self.form,
+            'formset': self.formset,
+            'fk_name': self.fk_name,
+            'fields': fields,
+            'exclude': exclude,
+            'formfield_callback': partial(self.formfield_for_dbfield, request=request),
+            'extra': 0 if has_view and not can_change else self.get_extra(request, obj),
+            'min_num': self.get_min_num(request, obj, **kwargs),
+            'max_num': self.get_max_num(request, obj, **kwargs),
+            'can_delete': can_delete,
+            **kwargs,
+        }
+        
+        # If user only has view permission, make sure they can't add/edit/delete
+        if has_view and not can_change:
+            defaults['extra'] = 0
+            defaults['can_delete'] = False
+            defaults['max_num'] = 0
+
+        base_model_form = defaults['form']
+        return super().get_formset(request, obj, **defaults)
+
+class ReportPhotoInline(InlineModelAdmin):
+    model = Report.photos.through
+    extra = 1
+    
+    def has_change_permission(self, request, obj=None):
+        # Check if user has change permission on both Report and Photo
+        if not request.user.has_perm('testapp.change_report'):
+            return False
+        if not request.user.has_perm('testapp.change_photo'):
+            return False
+        return True
+    
+    def has_view_permission(self, request, obj=None):
+        # Check if user has view permission on both Report and Photo
+        return (
+            request.user.has_perm('testapp.view_report') and
+            request.user.has_perm('testapp.view_photo')
+        )
+        
+    def has_add_permission(self, request, obj=None):
+        # Check if user has add permission on both Report and Photo
+        return (
+            request.user.has_perm('testapp.add_report') and
+            request.user.has_perm('testapp.add_photo')
+        )
+        
+    def has_delete_permission(self, request, obj=None):
+        # Check if user has delete permission on both Report and Photo
+        return (
+            request.user.has_perm('testapp.delete_report') and
+            request.user.has_perm('testapp.delete_photo')
+        )
+
+@admin.register(Report)
+class ReportAdmin(admin.ModelAdmin):
+    inlines = [ReportPhotoInline]
\ No newline at end of file
diff --git a/testproject/testapp/migrations/0001_initial.py b/testproject/testapp/migrations/0001_initial.py
new file mode 100644
index 0000000000..aa183c9872
--- /dev/null
+++ b/testproject/testapp/migrations/0001_initial.py
@@ -0,0 +1,29 @@
+# Generated by Django 3.0.dev20190330165530 on 2024-12-21 12:41
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Photo',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('title', models.CharField(max_length=100)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Report',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('title', models.CharField(max_length=100)),
+                ('photos', models.ManyToManyField(to='testapp.Photo')),
+            ],
+        ),
+    ]
diff --git a/testproject/testapp/migrations/__init__.py b/testproject/testapp/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testproject/testapp/models.py b/testproject/testapp/models.py
new file mode 100644
index 0000000000..a8ff6134ab
--- /dev/null
+++ b/testproject/testapp/models.py
@@ -0,0 +1,8 @@
+from django.db import models
+
+class Photo(models.Model):
+    title = models.CharField(max_length=100)
+
+class Report(models.Model):
+    title = models.CharField(max_length=100)
+    photos = models.ManyToManyField(Photo)
\ No newline at end of file
diff --git a/testproject/testapp/tests.py b/testproject/testapp/tests.py
new file mode 100644
index 0000000000..1c86865c1d
--- /dev/null
+++ b/testproject/testapp/tests.py
@@ -0,0 +1,64 @@
+from django.contrib.admin.sites import AdminSite
+from testapp.admin import InlineModelAdmin
+from django.contrib.auth.models import User, Permission
+from django.test import TestCase, RequestFactory
+from testapp.models import Photo, Report
+
+# Test inline admin
+class ReportPhotoInline(InlineModelAdmin):
+    model = Report.photos.through
+    extra = 1
+
+class TestInlinePermissions(TestCase):
+    def setUp(self):
+        self.factory = RequestFactory()
+        self.user = User.objects.create_user(
+            username='testuser',
+            password='testpass'
+        )
+        # Add view permission only for both models
+        from django.contrib.contenttypes.models import ContentType
+        report_ct = ContentType.objects.get_for_model(Report)
+        photo_ct = ContentType.objects.get_for_model(Photo)
+        
+        # Add only view permissions
+        view_report = Permission.objects.get(codename='view_report', content_type=report_ct)
+        view_photo = Permission.objects.get(codename='view_photo', content_type=photo_ct)
+        self.user.user_permissions.add(view_report, view_photo)
+        
+        self.site = AdminSite()
+        self.inline = ReportPhotoInline(Report, self.site)
+        self.request = self.factory.get('/')
+        self.request.user = self.user
+        
+        # Create a test report
+        self.report = Report.objects.create(title='Test Report')
+        
+        # Set up session and messages middleware
+        from django.contrib.sessions.middleware import SessionMiddleware
+        from django.contrib.messages.middleware import MessageMiddleware
+        middleware = SessionMiddleware(lambda x: None)
+        middleware.process_request(self.request)
+        self.request.session.save()
+        
+        middleware = MessageMiddleware(lambda x: None)
+        middleware.process_request(self.request)
+
+    def test_view_only_permissions(self):
+        # Verify permissions
+        print("User permissions:", [p.codename for p in self.user.user_permissions.all()])
+        print("View permission:", self.inline.has_view_permission(self.request, self.report))
+        print("Change permission:", self.inline.has_change_permission(self.request, self.report))
+        
+        formset = self.inline.get_formset(self.request, self.report)()
+        
+        # Check that extra is 0 (no new records allowed)
+        self.assertEqual(formset.extra, 0)
+        
+        # Check that deletion is disabled
+        self.assertFalse(formset.can_delete)
+
+if __name__ == '__main__':
+    import django
+    django.setup()
+    TestCase.main()
\ No newline at end of file
diff --git a/testproject/testproject/__init__.py b/testproject/testproject/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testproject/testproject/settings.py b/testproject/testproject/settings.py
new file mode 100644
index 0000000000..0fec2e12bc
--- /dev/null
+++ b/testproject/testproject/settings.py
@@ -0,0 +1,121 @@
+"""
+Django settings for testproject project.
+
+Generated by 'django-admin startproject' using Django 3.0.dev20190330165530.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/topics/settings/
+
+For the full list of settings and their values, see
+https://docs.djangoproject.com/en/dev/ref/settings/
+"""
+
+import os
+
+# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
+BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
+
+
+# Quick-start development settings - unsuitable for production
+# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/
+
+# SECURITY WARNING: keep the secret key used in production secret!
+SECRET_KEY = '#p-iif(p81*ag4(981j%0*istb_=x2j7w767v5gt%-ugamfwax'
+
+# SECURITY WARNING: don't run with debug turned on in production!
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+
+# Application definition
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+    'testapp',
+]
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+ROOT_URLCONF = 'testproject.urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = 'testproject.wsgi.application'
+
+
+# Database
+# https://docs.djangoproject.com/en/dev/ref/settings/#databases
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
+    }
+}
+
+
+# Password validation
+# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
+    },
+]
+
+
+# Internationalization
+# https://docs.djangoproject.com/en/dev/topics/i18n/
+
+LANGUAGE_CODE = 'en-us'
+
+TIME_ZONE = 'UTC'
+
+USE_I18N = True
+
+USE_L10N = True
+
+USE_TZ = True
+
+
+# Static files (CSS, JavaScript, Images)
+# https://docs.djangoproject.com/en/dev/howto/static-files/
+
+STATIC_URL = '/static/'
diff --git a/testproject/testproject/urls.py b/testproject/testproject/urls.py
new file mode 100644
index 0000000000..30a3850b5c
--- /dev/null
+++ b/testproject/testproject/urls.py
@@ -0,0 +1,21 @@
+"""testproject URL Configuration
+
+The `urlpatterns` list routes URLs to views. For more information please see:
+    https://docs.djangoproject.com/en/dev/topics/http/urls/
+Examples:
+Function views
+    1. Add an import:  from my_app import views
+    2. Add a URL to urlpatterns:  path('', views.home, name='home')
+Class-based views
+    1. Add an import:  from other_app.views import Home
+    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
+Including another URLconf
+    1. Import the include() function: from django.urls import include, path
+    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
+"""
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path('admin/', admin.site.urls),
+]
diff --git a/testproject/testproject/wsgi.py b/testproject/testproject/wsgi.py
new file mode 100644
index 0000000000..435e21ceb7
--- /dev/null
+++ b/testproject/testproject/wsgi.py
@@ -0,0 +1,16 @@
+"""
+WSGI config for testproject project.
+
+It exposes the WSGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/wsgi/
+"""
+
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'testproject.settings')
+
+application = get_wsgi_application()
