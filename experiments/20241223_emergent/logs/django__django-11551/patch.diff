diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py
index f82c20c2f1..9fd77b5d41 100644
--- a/django/contrib/admin/checks.py
+++ b/django/contrib/admin/checks.py
@@ -720,33 +720,33 @@ class ModelAdminChecks(BaseModelAdminChecks):
             return []
         elif hasattr(obj, item):
             return []
-        elif hasattr(obj.model, item):
+        else:
             try:
                 field = obj.model._meta.get_field(item)
             except FieldDoesNotExist:
-                return []
-            else:
-                if isinstance(field, models.ManyToManyField):
+                try:
+                    field = getattr(obj.model, item)
+                except AttributeError:
                     return [
                         checks.Error(
-                            "The value of '%s' must not be a ManyToManyField." % label,
+                            "The value of '%s' refers to '%s', which is not a callable, "
+                            "an attribute of '%s', or an attribute or method on '%s.%s'." % (
+                                label, item, obj.__class__.__name__,
+                                obj.model._meta.app_label, obj.model._meta.object_name,
+                            ),
                             obj=obj.__class__,
-                            id='admin.E109',
+                            id='admin.E108',
                         )
                     ]
-                return []
-        else:
-            return [
-                checks.Error(
-                    "The value of '%s' refers to '%s', which is not a callable, "
-                    "an attribute of '%s', or an attribute or method on '%s.%s'." % (
-                        label, item, obj.__class__.__name__,
-                        obj.model._meta.app_label, obj.model._meta.object_name,
-                    ),
-                    obj=obj.__class__,
-                    id='admin.E108',
-                )
-            ]
+            if isinstance(field, models.ManyToManyField):
+                return [
+                    checks.Error(
+                        "The value of '%s' must not be a ManyToManyField." % label,
+                        obj=obj.__class__,
+                        id='admin.E109',
+                    )
+                ]
+            return []
 
     def _check_list_display_links(self, obj):
         """ Check that list_display_links is a unique subset of list_display.
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..4cbc386a42
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,79 @@
+from django.conf import settings
+settings.configure(
+    INSTALLED_APPS=[
+        'django.contrib.admin',
+        'django.contrib.auth',
+        'django.contrib.contenttypes',
+        'django.contrib.sessions',
+        'django.contrib.messages',
+        'django.contrib.staticfiles',
+    ],
+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+)
+
+import django
+django.setup()
+
+from django.db import models
+from django.contrib import admin
+from django.core import checks
+
+# Mock PositionField to simulate the behavior
+class PositionField(models.Field):
+    def __get__(self, instance, owner):
+        if instance is None:
+            raise AttributeError("Can't access field on class, only instance")
+        return 0
+
+class Thing(models.Model):
+    number = models.IntegerField(default=0)
+    order = PositionField()
+
+    class Meta:
+        # This is a hack to avoid needing a real app
+        app_label = 'admin'
+
+@admin.register(Thing)
+class ThingAdmin(admin.ModelAdmin):
+    list_display = ['number', 'order']
+
+# Run the checks
+if __name__ == '__main__':
+    from django.contrib.admin.checks import ModelAdminChecks
+    checker = ModelAdminChecks()
+    thing_admin = admin.site._registry[Thing]
+
+    # Test case 1: Valid field that's only accessible via instance
+    errors = checker._check_list_display(thing_admin)
+    print("Test 1 - Valid PositionField:", errors)
+
+    # Test case 2: Non-existent field
+    class BadThingAdmin(admin.ModelAdmin):
+        list_display = ['number', 'nonexistent']
+    errors = checker._check_list_display(BadThingAdmin(Thing, admin.site))
+    print("Test 2 - Non-existent field:", errors)
+
+    # Test case 3: ManyToManyField
+    class ThingWithM2M(models.Model):
+        number = models.IntegerField(default=0)
+        m2m = models.ManyToManyField('self')
+        class Meta:
+            app_label = 'admin'
+    class M2MThingAdmin(admin.ModelAdmin):
+        list_display = ['number', 'm2m']
+    errors = checker._check_list_display(M2MThingAdmin(ThingWithM2M, admin.site))
+    print("Test 3 - ManyToManyField:", errors)
+
+    # Test case 4: Callable
+    class CallableThingAdmin(admin.ModelAdmin):
+        list_display = ['number', lambda x: x.number]
+    errors = checker._check_list_display(CallableThingAdmin(Thing, admin.site))
+    print("Test 4 - Callable:", errors)
+
+    # Test case 5: Admin method
+    class MethodThingAdmin(admin.ModelAdmin):
+        list_display = ['number', 'get_order']
+        def get_order(self, obj):
+            return obj.order
+    errors = checker._check_list_display(MethodThingAdmin(Thing, admin.site))
+    print("Test 5 - Admin method:", errors)
\ No newline at end of file
