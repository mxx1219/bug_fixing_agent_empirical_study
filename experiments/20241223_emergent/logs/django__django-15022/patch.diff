diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 66f3396a6b..979a43cb69 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -1031,14 +1031,22 @@ class ModelAdmin(BaseModelAdmin):
         if search_fields and search_term:
             orm_lookups = [construct_search(str(search_field))
                            for search_field in search_fields]
+            search_bits = []
             for bit in smart_split(search_term):
                 if bit.startswith(('"', "'")) and bit[0] == bit[-1]:
                     bit = unescape_string_literal(bit)
+                search_bits.append(bit)
+
+            # Combine all search terms into a single Q object
+            queries = models.Q()
+            for bit in search_bits:
                 or_queries = models.Q(
                     *((orm_lookup, bit) for orm_lookup in orm_lookups),
                     _connector=models.Q.OR,
                 )
-                queryset = queryset.filter(or_queries)
+                queries &= or_queries
+
+            queryset = queryset.filter(queries)
             may_have_duplicates |= any(
                 lookup_spawns_duplicates(self.opts, search_spec)
                 for search_spec in orm_lookups
diff --git a/test_search.py b/test_search.py
new file mode 100644
index 0000000000..23cfed9908
--- /dev/null
+++ b/test_search.py
@@ -0,0 +1,100 @@
+from django.contrib import admin
+from django.conf import settings
+from django.db import models
+from django.test import TestCase
+from django.apps import AppConfig
+
+# Configure Django settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.admin',
+        'django.contrib.auth',
+        'django.contrib.contenttypes',
+        'django.contrib.sessions',
+        'django.contrib.messages',
+    ],
+    MIDDLEWARE=[
+        'django.contrib.sessions.middleware.SessionMiddleware',
+        'django.middleware.common.CommonMiddleware',
+        'django.contrib.auth.middleware.AuthenticationMiddleware',
+        'django.contrib.messages.middleware.MessageMiddleware',
+    ]
+)
+
+import django
+django.setup()
+
+class Client(models.Model):
+    name = models.CharField('name', max_length=256)
+    name2 = models.CharField('unofficial or obsolete name', max_length=256, blank=True, null=True)
+    contact_person = models.CharField('contact person', max_length=256, blank=True, null=True)
+
+    class Meta:
+        app_label = 'test_app'
+
+class ClientOffice(models.Model):
+    name = models.CharField('name', max_length=256)
+    name2 = models.CharField('unofficial or obsolete name', max_length=256, blank=True, null=True)
+    client = models.ForeignKey(Client, verbose_name='client', on_delete=models.CASCADE)
+
+    class Meta:
+        app_label = 'test_app'
+
+class ClientAdmin(admin.ModelAdmin):
+    search_fields = ('name', 'name2', 'contact_person', 'clientoffice__name', 'clientoffice__name2')
+
+class TestSearch(TestCase):
+    def setUp(self):
+        # Create test data
+        self.client1 = Client.objects.create(
+            name='Test Client 1',
+            name2='Old Name 1',
+            contact_person='John Doe'
+        )
+        self.office1 = ClientOffice.objects.create(
+            name='Main Office 1',
+            name2='Branch 1',
+            client=self.client1
+        )
+        
+        self.client2 = Client.objects.create(
+            name='Test Client 2',
+            name2='Old Name 2',
+            contact_person='Jane Smith'
+        )
+        self.office2 = ClientOffice.objects.create(
+            name='Main Office 2',
+            name2='Branch 2',
+            client=self.client2
+        )
+
+    def test_search_performance(self):
+        admin_instance = ClientAdmin(Client, admin.site)
+        
+        # Test single word search
+        qs = Client.objects.all()
+        result, _ = admin_instance.get_search_results(None, qs, 'Test')
+        self.assertEqual(result.count(), 2)
+        
+        # Test multiple word search
+        qs = Client.objects.all()
+        result, _ = admin_instance.get_search_results(None, qs, 'Test Client')
+        self.assertEqual(result.count(), 2)
+        
+        # Test search across relations
+        qs = Client.objects.all()
+        result, _ = admin_instance.get_search_results(None, qs, 'Main Office')
+        self.assertEqual(result.count(), 2)
+        
+        # Test complex search
+        qs = Client.objects.all()
+        result, _ = admin_instance.get_search_results(None, qs, 'Test Main Office')
+        self.assertEqual(result.count(), 2)
+        
+        print("All tests passed!")
\ No newline at end of file
