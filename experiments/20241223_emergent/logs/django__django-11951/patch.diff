diff --git a/django/db/models/query.py b/django/db/models/query.py
index 794e0faae7..92349cd0c5 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -1209,7 +1209,8 @@ class QuerySet:
         if ignore_conflicts and not connections[self.db].features.supports_ignore_conflicts:
             raise NotSupportedError('This database backend does not support ignoring conflicts.')
         ops = connections[self.db].ops
-        batch_size = (batch_size or max(ops.bulk_batch_size(fields, objs), 1))
+        max_batch_size = max(ops.bulk_batch_size(fields, objs), 1)
+        batch_size = min(batch_size, max_batch_size) if batch_size else max_batch_size
         inserted_rows = []
         bulk_return = connections[self.db].features.can_return_rows_from_bulk_insert
         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..71a25092c3
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,46 @@
+from django.conf import settings
+from django.db import models
+from django.test import TestCase
+
+# Configure Django settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ]
+)
+
+import django
+django.setup()
+
+# Create a test model
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'test_app'
+
+# Create the database tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(TestModel)
+
+# Create some test objects
+objects = [TestModel(name=f'test_{i}') for i in range(10)]
+
+# Try bulk_create with a very large batch size
+TestModel.objects.bulk_create(objects, batch_size=1000000)  # This will use the large batch size directly
+
+# Try bulk_update with a very large batch size
+objects = list(TestModel.objects.all())
+for obj in objects:
+    obj.name = f'updated_{obj.name}'
+TestModel.objects.bulk_update(objects, ['name'], batch_size=1000000)  # This will use min(1000000, max_batch_size)
+
+print("Test completed successfully")
\ No newline at end of file
