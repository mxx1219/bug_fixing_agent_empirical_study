diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py
index d517d7269b..c2aea9c730 100644
--- a/django/db/models/fields/related.py
+++ b/django/db/models/fields/related.py
@@ -914,7 +914,7 @@ class ForeignKey(ForeignObject):
             return
 
         using = router.db_for_read(self.remote_field.model, instance=model_instance)
-        qs = self.remote_field.model._default_manager.using(using).filter(
+        qs = self.remote_field.model._base_manager.using(using).filter(
             **{self.remote_field.field_name: value}
         )
         qs = qs.complex_filter(self.get_limit_choices_to())
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..f3651f3aac
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,59 @@
+from django.db import models
+from django import forms
+from django.core.exceptions import ValidationError
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+import django
+django.setup()
+
+# Models
+class ArticleManager(models.Manager):
+    def get_queryset(self):
+        qs = super().get_queryset()
+        return qs.filter(archived=False)
+
+class Article(models.Model):
+    title = models.CharField(max_length=100)
+    archived = models.BooleanField(default=False)
+    # Don't include archived articles by default
+    objects = ArticleManager()
+
+    class Meta:
+        app_label = 'test_app'
+
+class FavoriteArticle(models.Model):
+    article = models.ForeignKey(Article, on_delete=models.CASCADE)
+
+    class Meta:
+        app_label = 'test_app'
+
+# Form
+class FavoriteArticleForm(forms.ModelForm):
+    class Meta:
+        model = FavoriteArticle
+        fields = '__all__'
+    
+    def __init__(self, *args, **kwargs):
+        super().__init__(*args, **kwargs)
+        # Use the base manager instead of the default manager to allow archived articles
+        self.fields['article'].queryset = Article._base_manager.all()
+
+# Test the issue
+if __name__ == '__main__':
+    # Create test database
+    from django.db import connection
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(Article)
+        schema_editor.create_model(FavoriteArticle)
+    
+    # Create an archived article
+    article = Article.objects.create(title='Test Article', archived=True)
+    
+    # Try to create a favorite with the archived article
+    form_data = {'article': article.id}
+    form = FavoriteArticleForm(data=form_data)
+    
+    print("Form is valid:", form.is_valid())
+    if not form.is_valid():
+        print("Errors:", form.errors)
\ No newline at end of file
diff --git a/test_app/__init__.py b/test_app/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..5cbd74efe6
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,13 @@
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'test_app',
+]
+
+SECRET_KEY = 'dummy-key-for-tests'
\ No newline at end of file
