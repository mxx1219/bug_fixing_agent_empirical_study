diff --git a/django/db/models/query.py b/django/db/models/query.py
index 07d6ffd4ca..a353b74ac1 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -919,6 +919,13 @@ class QuerySet:
     def none(self):
         """Return an empty QuerySet."""
         clone = self._chain()
+        # If this is a combined query (union, intersection, etc.), we need to
+        # handle it specially to ensure none() affects all parts of the query
+        if clone.query.combinator:
+            # Create a new queryset without the combinator
+            new_qs = self.model._base_manager.all()
+            new_qs.query.set_empty()
+            return new_qs
         clone.query.set_empty()
         return clone
 
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..8ef5b4673d
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,105 @@
+import os
+import django
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+            'django.contrib.admin',
+            'tests',  # our test app
+        ],
+        SECRET_KEY='dummy-key-for-tests'
+    )
+    django.setup()
+
+from django.core.management import call_command
+from django.db import models, connection
+from django import forms
+from django.test import TestCase
+from django.test.utils import setup_test_environment
+
+# Set up the test environment
+setup_test_environment()
+
+# Models
+class Publication(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'tests'
+
+class Article(models.Model):
+    class Meta:
+        app_label = 'tests'
+    title = models.CharField(max_length=100)
+    publications = models.ManyToManyField(Publication, blank=True)
+
+# Form with union
+class ArticleFormUnion(forms.ModelForm):
+    publications = forms.ModelMultipleChoiceField(
+        Publication.objects.filter(id__lt=2).union(
+            Publication.objects.filter(id__gt=5)
+        ),
+        required=False,
+    )
+    class Meta:
+        model = Article
+        fields = ["publications"]
+
+# Form with OR
+class ArticleFormOR(forms.ModelForm):
+    publications = forms.ModelMultipleChoiceField(
+        Publication.objects.filter(id__lt=2) | Publication.objects.filter(id__gt=5),
+        required=False,
+    )
+    class Meta:
+        model = Article
+        fields = ["publications"]
+
+# Test case
+class TestQuerySetNone(TestCase):
+    @classmethod
+    def setUpClass(cls):
+        super().setUpClass()
+        # Create some test publications
+        for i in range(10):
+            Publication.objects.create(name=f"Pub {i}")
+    
+    def test_none_behavior(self):
+        # Test union form
+        form_data = {'publications': []}
+        form_union = ArticleFormUnion(data=form_data)
+        print("\nTesting Union Form:")
+        print("Is form valid?", form_union.is_valid())
+        if form_union.is_valid():
+            article = form_union.save()
+            print("Publications count after union form save:", article.publications.count())
+            print("Publications after union form save:", list(article.publications.values_list('id', flat=True)))
+
+        # Test OR form
+        form_or = ArticleFormOR(data=form_data)
+        print("\nTesting OR Form:")
+        print("Is form valid?", form_or.is_valid())
+        if form_or.is_valid():
+            article = form_or.save()
+            print("Publications count after OR form save:", article.publications.count())
+            print("Publications after OR form save:", list(article.publications.values_list('id', flat=True)))
+
+if __name__ == '__main__':
+    # Create the test database
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(Publication)
+        schema_editor.create_model(Article)
+    
+    # Run the test
+    test = TestQuerySetNone()
+    test.setUpClass()
+    test.test_none_behavior()
\ No newline at end of file
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..3ab380a727
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,13 @@
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+]
+
+SECRET_KEY = 'dummy-key-for-tests'
\ No newline at end of file
