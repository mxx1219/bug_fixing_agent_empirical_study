diff --git a/django/db/migrations/loader.py b/django/db/migrations/loader.py
index 95a5062ec9..119b026208 100644
--- a/django/db/migrations/loader.py
+++ b/django/db/migrations/loader.py
@@ -90,7 +90,7 @@ class MigrationLoader:
             else:
                 # Empty directories are namespaces.
                 # getattr() needed on PY36 and older (replace w/attribute access).
-                if getattr(module, '__file__', None) is None:
+                if getattr(module, '__file__', None) is None and not isinstance(module.__path__, list):
                     self.unmigrated_apps.add(app_config.label)
                     continue
                 # Module is not a package (e.g. migrations.py).
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..30cf1ef404
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,16 @@
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+    'django.contrib.admin',
+    'django.contrib.sessions',
+    'tests',
+]
+
+SECRET_KEY = 'dummy-key-for-tests'
\ No newline at end of file
diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py
index 27a052ddac..c2866f8599 100644
--- a/tests/migrations/test_loader.py
+++ b/tests/migrations/test_loader.py
@@ -191,6 +191,23 @@ class LoaderTests(TestCase):
                 "App missing __init__.py in migrations module not in unmigrated apps."
             )
 
+    def test_load_no_file_attribute(self):
+        """
+        Test that non-namespace packages without __file__ attribute are handled correctly.
+        This simulates the behavior in frozen environments.
+        """
+        class MockModule:
+            __path__ = []  # Regular package with a list for __path__
+            __file__ = None  # No __file__ attribute
+
+        with override_settings(MIGRATION_MODULES={"migrations": "migrations.test_migrations"}):
+            loader = MigrationLoader(connection)
+            # Simulate a non-namespace package without __file__
+            module = MockModule()
+            # This should not add to unmigrated_apps since it's a regular package
+            result = loader._get_module_is_namespace(module)
+            self.assertFalse(result, "Non-namespace package without __file__ incorrectly marked as namespace")
+
     @override_settings(
         INSTALLED_APPS=['migrations.migrations_test_apps.migrated_app'],
     )
diff --git a/tests/test_migration_loader.py b/tests/test_migration_loader.py
new file mode 100644
index 0000000000..7aa737a0fb
--- /dev/null
+++ b/tests/test_migration_loader.py
@@ -0,0 +1,25 @@
+from django.test import TestCase
+from django.db.migrations.loader import MigrationLoader
+from unittest.mock import Mock
+
+class MigrationLoaderNoFileTests(TestCase):
+    def test_non_namespace_package_without_file(self):
+        """
+        Test that non-namespace packages without __file__ attribute are handled correctly.
+        """
+        # Create a mock module that simulates a non-namespace package without __file__
+        mock_module = Mock()
+        mock_module.__file__ = None
+        mock_module.__path__ = []  # Regular package has a list for __path__
+
+        loader = MigrationLoader(None)
+        # The module should not be considered a namespace package
+        self.assertFalse(loader._get_module_is_namespace(mock_module))
+
+        # Create a mock module that simulates a namespace package
+        mock_namespace_module = Mock()
+        mock_namespace_module.__file__ = None
+        mock_namespace_module.__path__ = Mock()  # Namespace package has a custom iterable
+
+        # The module should be considered a namespace package
+        self.assertTrue(loader._get_module_is_namespace(mock_namespace_module))
\ No newline at end of file
