diff --git a/django/contrib/admindocs/utils.py b/django/contrib/admindocs/utils.py
index 4c0e7e2a56..c7bb6089d5 100644
--- a/django/contrib/admindocs/utils.py
+++ b/django/contrib/admindocs/utils.py
@@ -34,8 +34,13 @@ def trim_docstring(docstring):
         return ''
     # Convert tabs to spaces and split into lines
     lines = docstring.expandtabs().splitlines()
-    indent = min(len(line) - len(line.lstrip()) for line in lines if line.lstrip())
-    trimmed = [lines[0].lstrip()] + [line[indent:].rstrip() for line in lines[1:]]
+    # Handle the first line separately
+    trimmed = [lines[0].lstrip()]
+    
+    # If there are more lines, calculate their common indentation and remove it
+    if len(lines) > 1:
+        indent = min((len(line) - len(line.lstrip()) for line in lines[1:] if line.lstrip()), default=0)
+        trimmed.extend(line[indent:].rstrip() for line in lines[1:])
     return "\n".join(trimmed).strip()
 
 
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..e292d9f82e
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,35 @@
+from django.contrib.admindocs.utils import trim_docstring
+
+def test_single_line():
+    """Single line docstring."""
+    pass
+
+def test_empty_after_first():
+    """First line with content.
+
+
+    """
+    pass
+
+def test_mixed_indentation():
+    """First line.
+    Second line with spaces.
+	Third line with tab.
+    Fourth line with spaces.
+    """
+    pass
+
+print("Test single line docstring:")
+docstring = test_single_line.__doc__
+print("Original:", repr(docstring))
+print("Trimmed:", repr(trim_docstring(docstring)))
+
+print("\nTest empty lines after first:")
+docstring = test_empty_after_first.__doc__
+print("Original:", repr(docstring))
+print("Trimmed:", repr(trim_docstring(docstring)))
+
+print("\nTest mixed indentation:")
+docstring = test_mixed_indentation.__doc__
+print("Original:", repr(docstring))
+print("Trimmed:", repr(trim_docstring(docstring)))
\ No newline at end of file
