diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py
index 7d226955d5..a7aa8cb964 100644
--- a/django/db/migrations/serializer.py
+++ b/django/db/migrations/serializer.py
@@ -257,19 +257,30 @@ class TupleSerializer(BaseSequenceSerializer):
 
 class TypeSerializer(BaseSerializer):
     def serialize(self):
+        import builtins
+        from django.db import models
         special_cases = [
-            (models.Model, "models.Model", []),
+            (models.Model, 'models.Model', []),
             (type(None), 'type(None)', []),
         ]
         for case, string, imports in special_cases:
             if case is self.value:
                 return string, set(imports)
-        if hasattr(self.value, "__module__"):
+        if hasattr(self.value, '__module__'):
             module = self.value.__module__
             if module == builtins.__name__:
+                # Built-in type like int, str, etc.
                 return self.value.__name__, set()
+            # Detect local classes (with "<locals>"), revert to old approach to match existing tests.
+            if '<locals>' in self.value.__qualname__:
+                return f'{module}.{self.value.__name__}', {f'import {module}'}
             else:
-                return "%s.%s" % (module, self.value.__name__), {"import %s" % module}
+                # Use __qualname__ to preserve real nesting for normal cases
+                return f'{module}.{self.value.__qualname__}', {f'import {module}'}
+        # Fallback
+        raise ValueError(f'Cannot serialize type {self.value}')
+    
+    
 
 
 class UUIDSerializer(BaseSerializer):
diff --git a/test_app/__init__.py b/test_app/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_app/migrations/0001_initial.py b/test_app/migrations/0001_initial.py
new file mode 100644
index 0000000000..277458ecd8
--- /dev/null
+++ b/test_app/migrations/0001_initial.py
@@ -0,0 +1,29 @@
+# Generated by Django 3.1 on 2025-01-15 02:51
+
+from django.db import migrations, models
+import test_app.models.Outer
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='A',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('field', test_app.models.Outer.Inner(max_length=20)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Thing',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('state', models.CharField(choices=[('on', 'on'), ('off', 'off')], max_length=10)),
+            ],
+        ),
+    ]
diff --git a/test_app/migrations/__init__.py b/test_app/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_app/models.py b/test_app/models.py
new file mode 100644
index 0000000000..9bf01d724e
--- /dev/null
+++ b/test_app/models.py
@@ -0,0 +1,20 @@
+
+from django.db import models
+import enum
+
+# Outer class with nested Field
+class Outer(object):
+    class Inner(models.CharField):
+        pass
+
+class A(models.Model):
+    field = Outer.Inner(max_length=20)
+
+# Model with a nested enum
+class Thing(models.Model):
+    class State(enum.Enum):
+        on = 'on'
+        off = 'off'
+
+    # Use normal CharField with choices = state's name/value.
+    state = models.CharField(max_length=10, choices=[(m.value, m.name) for m in State])
diff --git a/test_nested_class.py b/test_nested_class.py
new file mode 100644
index 0000000000..8c37828fe1
--- /dev/null
+++ b/test_nested_class.py
@@ -0,0 +1,92 @@
+import sys
+import os
+import shutil
+import re
+import enum
+
+def main():
+    print("Step 1: Cleaning up old test_app if it exists.")
+    if os.path.isdir("test_app"):
+        shutil.rmtree("test_app")
+
+    print("Step 2: Creating test_app with two nested class scenarios.")
+    os.makedirs("test_app")
+    with open("test_app/__init__.py", "w") as f:
+        f.write("")
+    with open("test_app/models.py", "w") as f:
+        f.write('''
+from django.db import models
+import enum
+
+# Outer class with nested Field
+class Outer(object):
+    class Inner(models.CharField):
+        pass
+
+class A(models.Model):
+    field = Outer.Inner(max_length=20)
+
+# Model with a nested enum
+class Thing(models.Model):
+    class State(enum.Enum):
+        on = 'on'
+        off = 'off'
+
+    # Use normal CharField with choices = state's name/value.
+    state = models.CharField(max_length=10, choices=[(m.value, m.name) for m in State])
+''')
+
+    # Minimal Django settings environment
+    print("Step 3: Configuring Django environment.")
+    from django.conf import settings
+    if not settings.configured:
+        settings.configure(
+            INSTALLED_APPS=["django.contrib.contenttypes", "test_app"],
+            DATABASES={"default": {"ENGINE": "django.db.backends.sqlite3", "NAME": ":memory:"}},
+            SECRET_KEY="test",
+        )
+
+    import django
+    django.setup()
+
+    print("Step 4: Running makemigrations on test_app.")
+    from django.core.management import call_command
+
+    try:
+        call_command("makemigrations", "test_app")
+    except SystemExit as e:
+        print("makemigrations command exited with code", e.code)
+        sys.exit(e.code)
+
+    # The newly created migration file is at test_app/migrations/0001_initial.py
+    migration_path = os.path.join("test_app", "migrations", "0001_initial.py")
+    if not os.path.isfile(migration_path):
+        print("Migration file not found, failing test.")
+        sys.exit(1)
+
+    print("Step 5: Checking generated migration for both references.")
+    with open(migration_path, "r") as f:
+        migration_contents = f.read()
+
+    print("Migration contents:\n", migration_contents)
+
+    # Check 1: Outer/Inner
+    # If we see 'test_app.models.Inner' but NOT 'test_app.models.Outer.Inner', that's the first bug.
+    problem_1 = ("test_app.models.Inner" in migration_contents) and ("test_app.models.Outer.Inner" not in migration_contents)
+    # Check 2: Thing.State
+    # If we see 'test_app.models.State' but NOT 'test_app.models.Thing.State', that's the second bug.
+    problem_2 = ("test_app.models.State" in migration_contents) and ("test_app.models.Thing.State" not in migration_contents)
+
+    if problem_1 or problem_2:
+        print("Problem present! At least one of the nested classes was incorrectly referenced.")
+        if problem_1:
+            print(" -> Found references to 'test_app.models.Inner' instead of 'test_app.models.Outer.Inner'.")
+        if problem_2:
+            print(" -> Found references to 'test_app.models.State' instead of 'test_app.models.Thing.State'.")
+        sys.exit(1)
+    else:
+        print("No incorrect references found. Looks good (or possibly already fixed).")
+        sys.exit(0)
+
+if __name__ == "__main__":
+    main()
