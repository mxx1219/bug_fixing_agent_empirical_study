diff --git a/django/db/migrations/writer.py b/django/db/migrations/writer.py
index 4918261fb0..b6d3bf6079 100644
--- a/django/db/migrations/writer.py
+++ b/django/db/migrations/writer.py
@@ -132,9 +132,9 @@ class MigrationWriter:
             "replaces_str": "",
             "initial_str": "",
         }
-
+    
         imports = set()
-
+    
         # Deconstruct operations
         operations = []
         for operation in self.migration.operations:
@@ -142,7 +142,7 @@ class MigrationWriter:
             imports.update(operation_imports)
             operations.append(operation_string)
         items["operations"] = "\n".join(operations) + "\n" if operations else ""
-
+    
         # Format dependencies and write out swappable dependencies right
         dependencies = []
         for dependency in self.migration.dependencies:
@@ -150,9 +150,11 @@ class MigrationWriter:
                 dependencies.append("        migrations.swappable_dependency(settings.%s)," % dependency[1])
                 imports.add("from django.conf import settings")
             else:
-                dependencies.append("        %s," % self.serialize(dependency)[0])
+                dep_string, dep_imports = self.serialize(dependency)
+                imports.update(dep_imports)
+                dependencies.append("        %s," % dep_string)
         items["dependencies"] = "\n".join(dependencies) + "\n" if dependencies else ""
-
+    
         # Format imports nicely, swapping imports of functions from migration files
         # for comments
         migration_imports = set()
@@ -161,7 +163,12 @@ class MigrationWriter:
                 migration_imports.add(line.split("import")[1].strip())
                 imports.remove(line)
                 self.needs_manual_porting = True
-
+    
+        # Detect references to "models." in items["operations"].
+        # Fix the pattern so it matches "models.Model" properly.
+        if re.search(r"(\W|^)models\.", items["operations"]):
+            imports.add("from django.db import models")
+    
         # django.db.migrations is always used, but models import may not be.
         # If models import exists, merge it with migrations import.
         if "from django.db import models" in imports:
@@ -169,21 +176,23 @@ class MigrationWriter:
             imports.add("from django.db import migrations, models")
         else:
             imports.add("from django.db import migrations")
-
-        # Sort imports by the package / module to be imported (the part after
-        # "from" in "from ... import ..." or after "import" in "import ...").
+    
+        # Sort imports by the package / module to be imported
         sorted_imports = sorted(imports, key=lambda i: i.split()[1])
         items["imports"] = "\n".join(sorted_imports) + "\n" if imports else ""
         if migration_imports:
             items["imports"] += (
-                "\n\n# Functions from the following migrations need manual "
-                "copying.\n# Move them and any dependencies into this file, "
-                "then update the\n# RunPython operations to refer to the local "
-                "versions:\n# %s"
+                "\n\n# Functions from the following migrations need manual copying.\n"
+                "# Move them and any dependencies into this file, then update the\n"
+                "# RunPython operations to refer to the local versions:\n# %s"
             ) % "\n# ".join(sorted(migration_imports))
+    
         # If there's a replaces, make a string for it
         if self.migration.replaces:
-            items['replaces_str'] = "\n    replaces = %s\n" % self.serialize(self.migration.replaces)[0]
+            rep_string, rep_imports = self.serialize(self.migration.replaces)
+            imports.update(rep_imports)
+            items['replaces_str'] = "\n    replaces = %s\n" % rep_string
+    
         # Hinting that goes into comment
         if self.include_header:
             items['migration_header'] = MIGRATION_HEADER_TEMPLATE % {
@@ -192,11 +201,13 @@ class MigrationWriter:
             }
         else:
             items['migration_header'] = ""
-
+    
         if self.migration.initial:
             items['initial_str'] = "\n    initial = True\n"
-
+    
         return MIGRATION_TEMPLATE % items
+    
+    
 
     @property
     def basedir(self):
diff --git a/manage.py b/manage.py
new file mode 100755
index 0000000000..a40f76655d
--- /dev/null
+++ b/manage.py
@@ -0,0 +1 @@
+#!/usr/bin/env python3\nimport os\nimport sys\n\nif __name__ == "__main__":\n    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "test_settings")\n    from django.core.management import execute_from_command_line\n    execute_from_command_line(sys.argv)\n
\ No newline at end of file
diff --git a/scripts/test_missing_import.py b/scripts/test_missing_import.py
new file mode 100644
index 0000000000..bbec278eff
--- /dev/null
+++ b/scripts/test_missing_import.py
@@ -0,0 +1,98 @@
+#!/usr/bin/env python3
+import os
+import sys
+import subprocess
+import shutil
+import re
+
+def main():
+    # 1) remove old test_proj if it exists
+    if os.path.exists("test_proj"):
+        shutil.rmtree("test_proj")
+
+    # 2) create test_proj using standard Django command
+    try:
+        subprocess.check_call([sys.executable, "-m", "django", "startproject", "test_proj"])
+    except subprocess.CalledProcessError as e:
+        print("ERROR: Could not create test_proj:", e)
+        sys.exit(1)
+
+    # 3) create test_app inside test_proj
+    project_path = os.path.abspath("test_proj")
+    manage_py = os.path.join(project_path, "manage.py")
+    try:
+        subprocess.check_call([sys.executable, manage_py, "startapp", "test_app"], cwd=project_path)
+    except subprocess.CalledProcessError as e:
+        print("ERROR: Could not create test_app:", e)
+        sys.exit(1)
+
+    # Confirm that test_app folder is created
+    app_path = os.path.join(project_path, "test_app")
+    if not os.path.isdir(app_path):
+        print("ERROR: test_app directory was not created inside test_proj.")
+        sys.exit(1)
+
+    # 4) Insert "test_app" into INSTALLED_APPS in test_proj/test_proj/settings.py
+    settings_py = os.path.join(project_path, "test_proj", "settings.py")
+    if not os.path.exists(settings_py):
+        print("ERROR: settings.py not found!")
+        sys.exit(1)
+
+    with open(settings_py, "r") as f:
+        settings_contents = f.read()
+
+    # Insert 'test_app' as a line in INSTALLED_APPS
+    pattern = r"(INSTALLED_APPS\s*=\s*\[)"
+    replacement = r"\1\n    'test_app',"
+    new_settings = re.sub(pattern, replacement, settings_contents, count=1)
+
+    with open(settings_py, "w") as f:
+        f.write(new_settings)
+
+    # 5) write the models.py
+    models_fname = os.path.join(app_path, "models.py")
+    with open(models_fname, "w") as f:
+        f.write("from django.db import models\n\n")
+        f.write("class MyField(models.TextField):\n")
+        f.write("    pass\n\n")
+        f.write("class MyBaseModel(models.Model):\n")
+        f.write("    class Meta:\n")
+        f.write("        abstract = True\n\n")
+        f.write("class MyMixin:\n")
+        f.write("    pass\n\n")
+        f.write("class MyModel(MyMixin, MyBaseModel):\n")
+        f.write("    name = MyField(primary_key=True)\n")
+
+    # 6) Remove old migrations if any
+    migrations_path = os.path.join(app_path, "migrations")
+    if os.path.exists(migrations_path):
+        shutil.rmtree(migrations_path)
+
+    # 7) run makemigrations specifying "test_app"
+    try:
+        subprocess.check_call([sys.executable, manage_py, "makemigrations", "test_app"], cwd=project_path)
+    except subprocess.CalledProcessError as e:
+        print("ERROR: makemigrations failed unexpectedly:", e)
+        sys.exit(1)
+
+    # 8) verify the generated migration
+    migration_file = os.path.join(migrations_path, "0001_initial.py")
+    if not os.path.exists(migration_file):
+        print("ERROR: Migration file not generated for test_app.")
+        sys.exit(1)
+
+    with open(migration_file, "r") as f:
+        migration_contents = f.read()
+
+    # 9) If 'models.Model' is present, ensure we import it
+    if "models.Model" in migration_contents:
+        # Accept either from django.db import models, from django.db import migrations, models, or import django.db.models
+        if not re.search(r"(?:from django\.db import (?:migrations,\s*)?models|import django\.db\.models)", migration_contents):
+            print('ERROR: The migration references "models.Model" but does not import it properly.')
+            sys.exit(1)
+
+    print('Test passed: either the migration does not reference "models.Model" or, if it does, itâ€™s properly imported.')
+    sys.exit(0)
+
+if __name__ == "__main__":
+    main()
diff --git a/test_proj/db.sqlite3 b/test_proj/db.sqlite3
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_proj/manage.py b/test_proj/manage.py
new file mode 100755
index 0000000000..40e6b93d51
--- /dev/null
+++ b/test_proj/manage.py
@@ -0,0 +1,22 @@
+#!/usr/bin/env python
+"""Django's command-line utility for administrative tasks."""
+import os
+import sys
+
+
+def main():
+    """Run administrative tasks."""
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_proj.settings')
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+
+if __name__ == '__main__':
+    main()
diff --git a/test_proj/test_app/__init__.py b/test_proj/test_app/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_proj/test_app/admin.py b/test_proj/test_app/admin.py
new file mode 100644
index 0000000000..8c38f3f3da
--- /dev/null
+++ b/test_proj/test_app/admin.py
@@ -0,0 +1,3 @@
+from django.contrib import admin
+
+# Register your models here.
diff --git a/test_proj/test_app/apps.py b/test_proj/test_app/apps.py
new file mode 100644
index 0000000000..7635468473
--- /dev/null
+++ b/test_proj/test_app/apps.py
@@ -0,0 +1,6 @@
+from django.apps import AppConfig
+
+
+class TestAppConfig(AppConfig):
+    default_auto_field = 'django.db.models.BigAutoField'
+    name = 'test_app'
diff --git a/test_proj/test_app/migrations/0001_initial.py b/test_proj/test_app/migrations/0001_initial.py
new file mode 100644
index 0000000000..183e59adac
--- /dev/null
+++ b/test_proj/test_app/migrations/0001_initial.py
@@ -0,0 +1,25 @@
+# Generated by Django 4.0.dev20210701101319 on 2025-01-13 06:41
+
+from django.db import migrations
+import test_app.models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='MyModel',
+            fields=[
+                ('name', test_app.models.MyField(primary_key=True, serialize=False)),
+            ],
+            options={
+                'abstract': False,
+            },
+            bases=(test_app.models.MyMixin, models.Model),
+        ),
+    ]
diff --git a/test_proj/test_app/migrations/__init__.py b/test_proj/test_app/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_proj/test_app/models.py b/test_proj/test_app/models.py
new file mode 100644
index 0000000000..2547eab593
--- /dev/null
+++ b/test_proj/test_app/models.py
@@ -0,0 +1,14 @@
+from django.db import models
+
+class MyField(models.TextField):
+    pass
+
+class MyBaseModel(models.Model):
+    class Meta:
+        abstract = True
+
+class MyMixin:
+    pass
+
+class MyModel(MyMixin, MyBaseModel):
+    name = MyField(primary_key=True)
diff --git a/test_proj/test_app/tests.py b/test_proj/test_app/tests.py
new file mode 100644
index 0000000000..7ce503c2dd
--- /dev/null
+++ b/test_proj/test_app/tests.py
@@ -0,0 +1,3 @@
+from django.test import TestCase
+
+# Create your tests here.
diff --git a/test_proj/test_app/views.py b/test_proj/test_app/views.py
new file mode 100644
index 0000000000..91ea44a218
--- /dev/null
+++ b/test_proj/test_app/views.py
@@ -0,0 +1,3 @@
+from django.shortcuts import render
+
+# Create your views here.
diff --git a/test_proj/test_proj/__init__.py b/test_proj/test_proj/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_proj/test_proj/asgi.py b/test_proj/test_proj/asgi.py
new file mode 100644
index 0000000000..28fa47072e
--- /dev/null
+++ b/test_proj/test_proj/asgi.py
@@ -0,0 +1,16 @@
+"""
+ASGI config for test_proj project.
+
+It exposes the ASGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/asgi/
+"""
+
+import os
+
+from django.core.asgi import get_asgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_proj.settings')
+
+application = get_asgi_application()
diff --git a/test_proj/test_proj/settings.py b/test_proj/test_proj/settings.py
new file mode 100644
index 0000000000..3d078c1bfc
--- /dev/null
+++ b/test_proj/test_proj/settings.py
@@ -0,0 +1,126 @@
+"""
+Django settings for test_proj project.
+
+Generated by 'django-admin startproject' using Django 4.0.dev20210701101319.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/topics/settings/
+
+For the full list of settings and their values, see
+https://docs.djangoproject.com/en/dev/ref/settings/
+"""
+
+from pathlib import Path
+
+# Build paths inside the project like this: BASE_DIR / 'subdir'.
+BASE_DIR = Path(__file__).resolve().parent.parent
+
+
+# Quick-start development settings - unsuitable for production
+# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/
+
+# SECURITY WARNING: keep the secret key used in production secret!
+SECRET_KEY = 'django-insecure-@v6qi^5y%dzycn!klahjlr*!vj9h)m4k&)k$g+npm=x9f$rcg*'
+
+# SECURITY WARNING: don't run with debug turned on in production!
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+
+# Application definition
+
+INSTALLED_APPS = [
+    'test_app',
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+]
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+ROOT_URLCONF = 'test_proj.urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = 'test_proj.wsgi.application'
+
+
+# Database
+# https://docs.djangoproject.com/en/dev/ref/settings/#databases
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': BASE_DIR / 'db.sqlite3',
+    }
+}
+
+
+# Password validation
+# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
+    },
+]
+
+
+# Internationalization
+# https://docs.djangoproject.com/en/dev/topics/i18n/
+
+LANGUAGE_CODE = 'en-us'
+
+TIME_ZONE = 'UTC'
+
+USE_I18N = True
+
+USE_L10N = True
+
+USE_TZ = True
+
+
+# Static files (CSS, JavaScript, Images)
+# https://docs.djangoproject.com/en/dev/howto/static-files/
+
+STATIC_URL = 'static/'
+
+# Default primary key field type
+# https://docs.djangoproject.com/en/dev/ref/settings/#default-auto-field
+
+DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
diff --git a/test_proj/test_proj/urls.py b/test_proj/test_proj/urls.py
new file mode 100644
index 0000000000..c7918bae4a
--- /dev/null
+++ b/test_proj/test_proj/urls.py
@@ -0,0 +1,21 @@
+"""test_proj URL Configuration
+
+The `urlpatterns` list routes URLs to views. For more information please see:
+    https://docs.djangoproject.com/en/dev/topics/http/urls/
+Examples:
+Function views
+    1. Add an import:  from my_app import views
+    2. Add a URL to urlpatterns:  path('', views.home, name='home')
+Class-based views
+    1. Add an import:  from other_app.views import Home
+    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
+Including another URLconf
+    1. Import the include() function: from django.urls import include, path
+    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
+"""
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path('admin/', admin.site.urls),
+]
diff --git a/test_proj/test_proj/wsgi.py b/test_proj/test_proj/wsgi.py
new file mode 100644
index 0000000000..5e7cbe4d1d
--- /dev/null
+++ b/test_proj/test_proj/wsgi.py
@@ -0,0 +1,16 @@
+"""
+WSGI config for test_proj project.
+
+It exposes the WSGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/wsgi/
+"""
+
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_proj.settings')
+
+application = get_wsgi_application()
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..4b42266c3a
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1 @@
+SECRET_KEY = "fake-key"\nINSTALLED_APPS = [\n    "django.contrib.contenttypes",\n    "test_app",\n]\nDATABASES = {\n    "default": {\n        "ENGINE": "django.db.backends.sqlite3",\n        "NAME": ":memory:",\n    }\n}\nROOT_URLCONF = "test_app.urls"\n
\ No newline at end of file
