diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py
index f82c20c2f1..66a3f2eb0c 100644
--- a/django/contrib/admin/checks.py
+++ b/django/contrib/admin/checks.py
@@ -716,37 +716,50 @@ class ModelAdminChecks(BaseModelAdminChecks):
             ))
 
     def _check_list_display_item(self, obj, item, label):
+        from django.core.exceptions import FieldDoesNotExist
+        from django.db import models
+        from django.core import checks
+    
+        # If it's a plain callable (function/lambda), that's allowed.
         if callable(item):
             return []
+        # If it's an attribute on the ModelAdmin subclass, that's allowed.
         elif hasattr(obj, item):
             return []
-        elif hasattr(obj.model, item):
+        else:
+            # Always try a Django model field first.
             try:
                 field = obj.model._meta.get_field(item)
             except FieldDoesNotExist:
-                return []
-            else:
-                if isinstance(field, models.ManyToManyField):
+                # Fallback: see if the model class has an attribute named 'item'
+                # If it raises AttributeError, that means there's no match.
+                # Do NOT catch TypeError so that descriptors remain valid.
+                try:
+                    field = getattr(obj.model, item)
+                except AttributeError:
                     return [
                         checks.Error(
-                            "The value of '%s' must not be a ManyToManyField." % label,
+                            "The value of '%s' refers to '%s', which is not a callable, "
+                            "an attribute of '%s', or an attribute or method on '%s.%s'." % (
+                                label, item, obj.__class__.__name__,
+                                obj.model._meta.app_label, obj.model._meta.object_name,
+                            ),
                             obj=obj.__class__,
-                            id='admin.E109',
+                            id='admin.E108',
                         )
                     ]
-                return []
-        else:
-            return [
-                checks.Error(
-                    "The value of '%s' refers to '%s', which is not a callable, "
-                    "an attribute of '%s', or an attribute or method on '%s.%s'." % (
-                        label, item, obj.__class__.__name__,
-                        obj.model._meta.app_label, obj.model._meta.object_name,
-                    ),
-                    obj=obj.__class__,
-                    id='admin.E108',
-                )
-            ]
+            # If it's a ManyToMany, that's disallowed in list_display.
+            if isinstance(field, models.ManyToManyField):
+                return [
+                    checks.Error(
+                        "The value of '%s' must not be a ManyToManyField." % label,
+                        obj=obj.__class__,
+                        id='admin.E109',
+                    )
+                ]
+            return []
+    
+    
 
     def _check_list_display_links(self, obj):
         """ Check that list_display_links is a unique subset of list_display.
diff --git a/e108_test_urls.py b/e108_test_urls.py
new file mode 100644
index 0000000000..dfc73621fa
--- /dev/null
+++ b/e108_test_urls.py
@@ -0,0 +1,6 @@
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path('admin/', admin.site.urls),
+]
diff --git a/mytestapp/__init__.py b/mytestapp/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/mytestapp/admin.py b/mytestapp/admin.py
new file mode 100644
index 0000000000..783de6e3c7
--- /dev/null
+++ b/mytestapp/admin.py
@@ -0,0 +1,6 @@
+from django.contrib import admin
+from .models import MyModel
+
+@admin.register(MyModel)
+class MyModelAdmin(admin.ModelAdmin):
+    list_display = ['testint', 'order']
diff --git a/mytestapp/apps.py b/mytestapp/apps.py
new file mode 100644
index 0000000000..31bce581d5
--- /dev/null
+++ b/mytestapp/apps.py
@@ -0,0 +1,4 @@
+from django.apps import AppConfig
+
+class MytestappConfig(AppConfig):
+    name = 'mytestapp'
diff --git a/mytestapp/models.py b/mytestapp/models.py
new file mode 100644
index 0000000000..4099f8af7c
--- /dev/null
+++ b/mytestapp/models.py
@@ -0,0 +1,19 @@
+from django.db import models
+
+class MyPositionField(models.IntegerField):
+    """
+    A custom field that raises TypeError at the class level, simulating
+    what 'PositionField' does if used on the class instead of an instance.
+    """
+    def __get__(self, instance, owner):
+        if instance is None:
+            # Simulate a descriptor that only works on an instance
+            raise TypeError("Descriptor only accessible via instance")
+        return super().__get__(instance, owner)
+
+class MyModel(models.Model):
+    testint = models.IntegerField(default=0)
+    order = MyPositionField()
+
+    class Meta:
+        app_label = 'mytestapp'
diff --git a/test_e108_positionfield.py b/test_e108_positionfield.py
new file mode 100644
index 0000000000..3212085783
--- /dev/null
+++ b/test_e108_positionfield.py
@@ -0,0 +1,71 @@
+import sys
+import traceback
+
+print("Starting test script for E108 bug...")
+
+try:
+    import django
+    from django.conf import settings
+    from django.core.management import call_command, CommandError
+
+    # Expanded settings so we don't get E403/E406/E408/E409/E410.
+    # Note that we add TEMPLATES and all the required apps and middleware.
+    if not settings.configured:
+        settings.configure(
+            SECRET_KEY='test',
+            INSTALLED_APPS=[
+                'django.contrib.contenttypes',
+                'django.contrib.auth',
+                'django.contrib.admin',
+                'django.contrib.messages',
+                'django.contrib.sessions',
+                'mytestapp',
+            ],
+            MIDDLEWARE=[
+                'django.contrib.sessions.middleware.SessionMiddleware',
+                'django.contrib.auth.middleware.AuthenticationMiddleware',
+                'django.contrib.messages.middleware.MessageMiddleware',
+            ],
+            TEMPLATES=[
+                {
+                    'BACKEND': 'django.template.backends.django.DjangoTemplates',
+                    'APP_DIRS': True,
+                    'OPTIONS': {
+                        'context_processors': [
+                            'django.contrib.auth.context_processors.auth',
+                            'django.contrib.messages.context_processors.messages',
+                        ],
+                    },
+                },
+            ],
+            DATABASES={
+                'default': {
+                    'ENGINE': 'django.db.backends.sqlite3',
+                    'NAME': ':memory:',
+                }
+            },
+            ROOT_URLCONF='e108_test_urls',  # Our custom URLconf
+        )
+
+    from django.apps import apps
+    apps.populate(settings.INSTALLED_APPS)
+
+    # Run "check" command to see if E108 is raised. With the fix, it should pass.
+    try:
+        call_command("check", "--fail-level", "ERROR")
+    except SystemExit as e:
+        print("check command triggered SystemExit with code:", e.code)
+        sys.exit(e.code)
+    except CommandError as e:
+        traceback.print_exc()
+        sys.exit(1)
+    except:
+        traceback.print_exc()
+        sys.exit(1)
+
+    print("No errors found. Exiting with code 0.")
+    sys.exit(0)
+
+except:
+    traceback.print_exc()
+    sys.exit(1)
