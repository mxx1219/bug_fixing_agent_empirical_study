diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 822968ef56..45fe0f7520 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -1299,6 +1299,8 @@ class When(Expression):
         template_params = extra_context
         sql_params = []
         condition_sql, condition_params = compiler.compile(self.condition)
+        if not condition_sql.strip():
+            condition_sql = "1=1"
         template_params["condition"] = condition_sql
         sql_params.extend(condition_params)
         result_sql, result_params = compiler.compile(self.result)
@@ -1306,6 +1308,7 @@ class When(Expression):
         sql_params.extend(result_params)
         template = template or self.template
         return template % template_params, sql_params
+    
 
     def get_group_by_cols(self, alias=None):
         # This is not a complete expression and cannot be used in GROUP BY.
diff --git a/test_case_bug.py b/test_case_bug.py
new file mode 100644
index 0000000000..6256ab012e
--- /dev/null
+++ b/test_case_bug.py
@@ -0,0 +1,79 @@
+#!/usr/bin/env python3
+import sys
+import traceback
+import django
+from django.conf import settings
+from django.db import models
+from django.db.models import Q, Value, BooleanField
+from django.db.models.functions import Cast
+from django.db.models import Case, When
+
+"""
+This script attempts to reproduce the bug where Case() with When(~Q(pk__in=[]))
+generates malformed SQL that triggers a syntax error:
+    ... WHEN THEN True ...
+rather than something valid.
+
+Exit 0 = Bug is fixed, no syntax error
+Exit 1 = Bug is still present (syntax error triggered)
+"""
+
+def main():
+    # Configure Django (sqlite memory, minimal setup)
+    settings.configure(
+        INSTALLED_APPS=["__main__"],
+        DATABASES={
+            "default": {
+                "ENGINE": "django.db.backends.sqlite3",
+                "NAME": ":memory:",
+            }
+        },
+        SECRET_KEY="test",
+    )
+    django.setup()
+
+    class TestModel(models.Model):
+        name = models.CharField(max_length=200)
+
+        class Meta:
+            app_label = "__main__"
+
+    # Create the tables
+    try:
+        with django.db.connection.schema_editor() as schema_editor:
+            schema_editor.create_model(TestModel)
+    except Exception as e:
+        print("Failed to create schema:", e)
+        traceback.print_exc()
+        sys.exit(1)
+
+    # Insert a row for testing
+    TestModel.objects.create(name="Row1")
+
+    try:
+        # Attempt the problematic query:
+        # This will fail (bug) if we get syntax error from 'CASE WHEN THEN True ...',
+        # instead of something more valid like 'CASE WHEN 1=1 THEN True'.
+        qs = TestModel.objects.annotate(
+            is_match=Case(
+                When(~Q(pk__in=[]), then=Value(True)),
+                default=Value(False),
+                output_field=BooleanField(),
+            )
+        ).order_by("-is_match")
+
+        # Force execution
+        results = list(qs)
+        print("Query succeeded. Number of rows:", len(results))
+        # If we got here without an error, presumably the bug is fixed
+        sys.exit(0)
+
+    except Exception as e:
+        # Syntax error indicates the bug
+        print("Caught exception, bug likely present:")
+        traceback.print_exc()
+        sys.exit(1)
+
+
+if __name__ == "__main__":
+    main()
