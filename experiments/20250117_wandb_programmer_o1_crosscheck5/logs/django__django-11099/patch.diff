diff --git a/django/contrib/auth/validators.py b/django/contrib/auth/validators.py
index b4878cfd45..45775426db 100644
--- a/django/contrib/auth/validators.py
+++ b/django/contrib/auth/validators.py
@@ -7,7 +7,7 @@ from django.utils.translation import gettext_lazy as _
 
 @deconstructible
 class ASCIIUsernameValidator(validators.RegexValidator):
-    regex = r'^[\w.@+-]+$'
+    regex = r'\A[\w.@+-]+\Z'
     message = _(
         'Enter a valid username. This value may contain only English letters, '
         'numbers, and @/./+/-/_ characters.'
@@ -15,11 +15,13 @@ class ASCIIUsernameValidator(validators.RegexValidator):
     flags = re.ASCII
 
 
+
 @deconstructible
 class UnicodeUsernameValidator(validators.RegexValidator):
-    regex = r'^[\w.@+-]+$'
+    regex = r'\A[\w.@+-]+\Z'
     message = _(
         'Enter a valid username. This value may contain only letters, '
         'numbers, and @/./+/-/_ characters.'
     )
     flags = 0
+
diff --git a/test_username_validator_trailing_newline.py b/test_username_validator_trailing_newline.py
new file mode 100644
index 0000000000..a5ada06d40
--- /dev/null
+++ b/test_username_validator_trailing_newline.py
@@ -0,0 +1,34 @@
+import sys
+import traceback
+
+def main():
+    print('TEST: Checking if newline is disallowed in ASCIIUsernameValidator/UnicodeUsernameValidator')
+    try:
+        from django.contrib.auth.validators import ASCIIUsernameValidator, UnicodeUsernameValidator
+        from django.core.exceptions import ValidationError
+    except ImportError:
+        print('Could not import necessary modules from Django.')
+        sys.exit(2)
+
+    test_username = 'newline_user\n'
+
+    for validator_class in [ASCIIUsernameValidator, UnicodeUsernameValidator]:
+        print(f'Testing validator {validator_class.__name__} with username: {repr(test_username)}')
+        print(f'Validator uses regex: {validator_class.regex}')
+        validator = validator_class()
+        try:
+            validator(test_username)
+            print(f'BUG: {validator_class.__name__} did NOT raise ValidationError.')
+            sys.exit(1)
+        except ValidationError:
+            print(f'OK: {validator_class.__name__} raised ValidationError.')
+        except Exception:
+            print(f'UNEXPECTED ERROR: {validator_class.__name__}')
+            traceback.print_exc()
+            sys.exit(2)
+
+    print('All validators properly disallowed newline => test passing => exit 0.')
+    sys.exit(0)
+
+if __name__ == '__main__':
+    main()
