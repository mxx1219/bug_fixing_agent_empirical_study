diff --git a/astropy/io/fits/diff.py b/astropy/io/fits/diff.py
index 100cdf1b8c..4ddf7d1530 100644
--- a/astropy/io/fits/diff.py
+++ b/astropy/io/fits/diff.py
@@ -1346,24 +1346,24 @@ class TableDataDiff(_BaseDiff):
         # comparing headers--consider refactoring
         colsa = self.a.columns
         colsb = self.b.columns
-
+    
         if len(colsa) != len(colsb):
             self.diff_column_count = (len(colsa), len(colsb))
-
+    
         # Even if the number of columns are unequal, we still do comparison of
         # any common columns
         colsa = {c.name.lower(): c for c in colsa}
         colsb = {c.name.lower(): c for c in colsb}
-
+    
         if "*" in self.ignore_fields:
             # If all columns are to be ignored, ignore any further differences
             # between the columns
             return
-
+    
         # Keep the user's original ignore_fields list for reporting purposes,
         # but internally use a case-insensitive version
         ignore_fields = {f.lower() for f in self.ignore_fields}
-
+    
         # It might be nice if there were a cleaner way to do this, but for now
         # it'll do
         for fieldname in ignore_fields:
@@ -1372,36 +1372,36 @@ class TableDataDiff(_BaseDiff):
                 del colsa[fieldname]
             if fieldname in colsb:
                 del colsb[fieldname]
-
+    
         colsa_set = set(colsa.values())
         colsb_set = set(colsb.values())
         self.common_columns = sorted(
             colsa_set.intersection(colsb_set), key=operator.attrgetter("name")
         )
-
+    
         self.common_column_names = {col.name.lower() for col in self.common_columns}
-
+    
         left_only_columns = {
             col.name.lower(): col for col in colsa_set.difference(colsb_set)
         }
         right_only_columns = {
             col.name.lower(): col for col in colsb_set.difference(colsa_set)
         }
-
+    
         if left_only_columns or right_only_columns:
             self.diff_columns = (left_only_columns, right_only_columns)
             self.diff_column_names = ([], [])
-
+    
         if left_only_columns:
             for col in self.a.columns:
                 if col.name.lower() in left_only_columns:
                     self.diff_column_names[0].append(col.name)
-
+    
         if right_only_columns:
             for col in self.b.columns:
                 if col.name.lower() in right_only_columns:
                     self.diff_column_names[1].append(col.name)
-
+    
         # If the tables have a different number of rows, we don't compare the
         # columns right now.
         # TODO: It might be nice to optionally compare the first n rows where n
@@ -1409,31 +1409,21 @@ class TableDataDiff(_BaseDiff):
         if len(self.a) != len(self.b):
             self.diff_rows = (len(self.a), len(self.b))
             return
-
+    
         # If the tables contain no rows there's no data to compare, so we're
         # done at this point. (See ticket #178)
         if len(self.a) == len(self.b) == 0:
             return
-
+    
         # Like in the old fitsdiff, compare tables on a column by column basis
-        # The difficulty here is that, while FITS column names are meant to be
-        # case-insensitive, Astropy still allows, for the sake of flexibility,
-        # two columns with the same name but different case.  When columns are
-        # accessed in FITS tables, a case-sensitive is tried first, and failing
-        # that a case-insensitive match is made.
-        # It's conceivable that the same column could appear in both tables
-        # being compared, but with different case.
-        # Though it *may* lead to inconsistencies in these rare cases, this
-        # just assumes that there are no duplicated column names in either
-        # table, and that the column names can be treated case-insensitively.
         for col in self.common_columns:
             name_lower = col.name.lower()
             if name_lower in ignore_fields:
                 continue
-
+    
             cola = colsa[name_lower]
             colb = colsb[name_lower]
-
+    
             for attr, _ in _COL_ATTRS:
                 vala = getattr(cola, attr, None)
                 valb = getattr(colb, attr, None)
@@ -1441,39 +1431,37 @@ class TableDataDiff(_BaseDiff):
                     self.diff_column_attributes.append(
                         ((col.name.upper(), attr), (vala, valb))
                     )
-
+    
             arra = self.a[col.name]
             arrb = self.b[col.name]
-
+    
             if np.issubdtype(arra.dtype, np.floating) and np.issubdtype(
                 arrb.dtype, np.floating
             ):
                 diffs = where_not_allclose(arra, arrb, rtol=self.rtol, atol=self.atol)
-            elif "P" in col.format:
-                diffs = (
-                    [
-                        idx
-                        for idx in range(len(arra))
-                        if not np.allclose(
-                            arra[idx], arrb[idx], rtol=self.rtol, atol=self.atol
-                        )
-                    ],
-                )
+            elif ("P" in col.format) or ("Q" in col.format):
+                # Handle both P and Q variable-length array columns row-by-row
+                row_diff_indices = []
+                for idx in range(len(arra)):
+                    # Compare each row's data with np.allclose
+                    if not np.allclose(arra[idx], arrb[idx], rtol=self.rtol, atol=self.atol):
+                        row_diff_indices.append(idx)
+                diffs = (row_diff_indices,)
             else:
                 diffs = np.where(arra != arrb)
-
+    
             self.diff_total += len(set(diffs[0]))
-
+    
             if self.numdiffs >= 0:
                 if len(self.diff_values) >= self.numdiffs:
                     # Don't save any more diff values
                     continue
-
+    
                 # Add no more diff'd values than this
                 max_diffs = self.numdiffs - len(self.diff_values)
             else:
                 max_diffs = len(diffs[0])
-
+    
             last_seen_idx = None
             for idx in islice(diffs[0], 0, max_diffs):
                 if idx == last_seen_idx:
@@ -1483,9 +1471,10 @@ class TableDataDiff(_BaseDiff):
                     continue
                 last_seen_idx = idx
                 self.diff_values.append(((col.name, idx), (arra[idx], arrb[idx])))
-
+    
         total_values = len(self.a) * len(self.a.dtype.fields)
         self.diff_ratio = float(self.diff_total) / float(total_values)
+    
 
     def _report(self):
         if self.diff_column_count:
diff --git a/diffbug.fits b/diffbug.fits
new file mode 100644
index 0000000000..fb6df78b71
Binary files /dev/null and b/diffbug.fits differ
diff --git a/test_diffbug_vla.py b/test_diffbug_vla.py
new file mode 100644
index 0000000000..e81a5913c3
--- /dev/null
+++ b/test_diffbug_vla.py
@@ -0,0 +1,35 @@
+#!/usr/bin/env python
+
+import sys
+import traceback
+from astropy.io import fits
+
+def main():
+    print("Step 1: Creating a variable-length array (VLA) column with QD format.")
+    col = fits.Column('a', format='QD', array=[[0], [0, 0]])
+    
+    print("Step 2: Creating a BinTableHDU from the column.")
+    hdu = fits.BinTableHDU.from_columns([col])
+    
+    filename = 'diffbug.fits'
+    print(f"Step 3: Writing to {filename}.")
+    hdu.writeto(filename, overwrite=True)
+    
+    print(f"Step 4: Comparing {filename} to itself with fits.FITSDiff.")
+    diff = fits.FITSDiff(filename, filename)
+    
+    print("Step 5: Checking if they are reported identical.")
+    print(f"diff.identical = {diff.identical}")
+    if diff.identical:
+        print("ERROR: According to the bug, this should not be identical on HEAD. Expected failure.")
+        sys.exit(0)  # If it's identical on HEAD, that means the bug didn't occur.
+    else:
+        print("FAIL: The two identical files are reported different. Non-zero exit to confirm bug.")
+        sys.exit(1)
+
+if __name__ == '__main__':
+    try:
+        main()
+    except Exception:
+        traceback.print_exc()
+        sys.exit(1)
