diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py
index ae82d26340..cd73655f1b 100644
--- a/django/db/models/deletion.py
+++ b/django/db/models/deletion.py
@@ -284,23 +284,25 @@ class Collector:
         # sort instance collections
         for model, instances in self.data.items():
             self.data[model] = sorted(instances, key=attrgetter("pk"))
-
+    
         # if possible, bring the models in an order suitable for databases that
         # don't support transactions or cannot defer constraint checks until the
         # end of a transaction.
         self.sort()
         # number of objects deleted for each model label
         deleted_counter = Counter()
-
+    
         # Optimize for the case with a single obj and no dependencies
-        if len(self.data) == 1 and len(instances) == 1:
-            instance = list(instances)[0]
-            if self.can_fast_delete(instance):
-                with transaction.mark_for_rollback_on_error():
-                    count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)
-                setattr(instance, model._meta.pk.attname, None)
-                return count, {model._meta.label: count}
-
+        if len(self.data) == 1:
+            (model, instances) = next(iter(self.data.items()))
+            if len(instances) == 1:
+                instance = list(instances)[0]
+                if self.can_fast_delete(instance):
+                    with transaction.mark_for_rollback_on_error():
+                        count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)
+                    setattr(instance, model._meta.pk.attname, None)
+                    return count, {model._meta.label: count}
+    
         with transaction.atomic(using=self.using, savepoint=False):
             # send pre_delete signals
             for model, obj in self.instances_with_model():
@@ -308,36 +310,47 @@ class Collector:
                     signals.pre_delete.send(
                         sender=model, instance=obj, using=self.using
                     )
-
-            # fast deletes
+    
+            # Combine fast deletes by model
+            from django.db.models.sql.where import OR
+            fast_deletes_by_model = {}
             for qs in self.fast_deletes:
-                count = qs._raw_delete(using=self.using)
-                deleted_counter[qs.model._meta.label] += count
-
+                fast_deletes_by_model.setdefault(qs.model, []).append(qs)
+    
+            for model, querysets in fast_deletes_by_model.items():
+                combined_qs = querysets[0]
+                for single_qs in querysets[1:]:
+                    combined_qs.query.combine(single_qs.query, connector='OR')
+                count = combined_qs._raw_delete(using=self.using)
+                deleted_counter[model._meta.label] += count
+    
             # update fields
             for model, instances_for_fieldvalues in self.field_updates.items():
                 for (field, value), instances in instances_for_fieldvalues.items():
                     query = sql.UpdateQuery(model)
-                    query.update_batch([obj.pk for obj in instances],
-                                       {field.name: value}, self.using)
-
+                    query.update_batch(
+                        [obj.pk for obj in instances],
+                        {field.name: value},
+                        self.using
+                    )
+    
             # reverse instance collections
             for instances in self.data.values():
                 instances.reverse()
-
+    
             # delete instances
             for model, instances in self.data.items():
                 query = sql.DeleteQuery(model)
                 pk_list = [obj.pk for obj in instances]
                 count = query.delete_batch(pk_list, self.using)
                 deleted_counter[model._meta.label] += count
-
+    
                 if not model._meta.auto_created:
                     for obj in instances:
                         signals.post_delete.send(
                             sender=model, instance=obj, using=self.using
                         )
-
+    
         # update collected instances
         for instances_for_fieldvalues in self.field_updates.values():
             for (field, value), instances in instances_for_fieldvalues.items():
@@ -346,4 +359,6 @@ class Collector:
         for model, instances in self.data.items():
             for instance in instances:
                 setattr(instance, model._meta.pk.attname, None)
+    
         return sum(deleted_counter.values()), dict(deleted_counter)
+    
diff --git a/scripts/test_combine_fast_delete.py b/scripts/test_combine_fast_delete.py
new file mode 100644
index 0000000000..73a450af10
--- /dev/null
+++ b/scripts/test_combine_fast_delete.py
@@ -0,0 +1,77 @@
+#!/usr/bin/env python
+
+import sys
+import django
+from django.conf import settings
+from django.core.management import call_command
+from django.db import connection
+from django.test.utils import CaptureQueriesContext
+
+DB_NAME = ":memory:"
+APP_LABEL = "test_combine_fast_delete_app"
+TABLE_NAME = f"{APP_LABEL}_person_friends"
+
+def main():
+    # 1) Minimal Django settings
+    if not settings.configured:
+        settings.configure(
+            DEBUG=True,
+            SECRET_KEY="testkey",
+            DATABASES={
+                "default": {
+                    "ENGINE": "django.db.backends.sqlite3",
+                    "NAME": DB_NAME,
+                }
+            },
+            INSTALLED_APPS=[
+                "django.contrib.contenttypes",
+                "test_combine_fast_delete_app.apps.TestCombineFastDeleteAppConfig",
+            ],
+            MIDDLEWARE=[],
+        )
+
+    # 2) Setup Django
+    django.setup()
+
+    # 3) Create/store migrations for our new app, then migrate.
+    try:
+        call_command("makemigrations", "test_combine_fast_delete_app", verbosity=1)
+        call_command("migrate", "test_combine_fast_delete_app", verbosity=1)
+    except Exception as e:
+        print("[ERROR] Migration failed:", e)
+        sys.exit(2)
+
+    # 4) Now safely import Person.
+    from test_combine_fast_delete_app.models import Person
+
+    # 5) Create test objects
+    p1 = Person.objects.create()
+    p2 = Person.objects.create()
+    # Add two directional friendships => two rows in the table
+    p1.friends.add(p2)
+    p2.friends.add(p1)
+
+    # 6) Capture queries
+    with CaptureQueriesContext(connection) as cqc:
+        p1.delete()
+
+    # 7) Inspect queries that were run
+    delete_statements = [
+        q["sql"]
+        for q in cqc.captured_queries
+        if f"DELETE FROM \"{TABLE_NAME}\"" in q["sql"] or f"DELETE FROM {TABLE_NAME}" in q["sql"]
+    ]
+    print("[INFO] Observed DELETE statements for the M2M table:")
+    for ds in delete_statements:
+        print("   ", ds)
+
+    # 8) If multiple DELETE statements occur for the same table, fail
+    if len(delete_statements) > 1:
+        print("[FAIL] More than one DELETE statement was issued for the same M2M table.")
+        sys.exit(1)
+    else:
+        print("[PASS] Fast-delete queries appear to be combined into a single statement (or none).")
+        sys.exit(0)
+
+if __name__ == "__main__":
+    main()
diff --git a/test_combine_fast_delete_app/__init__.py b/test_combine_fast_delete_app/__init__.py
new file mode 100644
index 0000000000..deae50a7f1
--- /dev/null
+++ b/test_combine_fast_delete_app/__init__.py
@@ -0,0 +1 @@
+# Empty init file
diff --git a/test_combine_fast_delete_app/apps.py b/test_combine_fast_delete_app/apps.py
new file mode 100644
index 0000000000..2df40a0393
--- /dev/null
+++ b/test_combine_fast_delete_app/apps.py
@@ -0,0 +1,5 @@
+from django.apps import AppConfig
+
+class TestCombineFastDeleteAppConfig(AppConfig):
+    name = "test_combine_fast_delete_app"
+    label = "test_combine_fast_delete_app"
diff --git a/test_combine_fast_delete_app/migrations/0001_initial.py b/test_combine_fast_delete_app/migrations/0001_initial.py
new file mode 100644
index 0000000000..3830774f09
--- /dev/null
+++ b/test_combine_fast_delete_app/migrations/0001_initial.py
@@ -0,0 +1,21 @@
+# Generated by Django 3.1 on 2025-01-13 02:05
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Person',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('friends', models.ManyToManyField(to='test_combine_fast_delete_app.Person')),
+            ],
+        ),
+    ]
diff --git a/test_combine_fast_delete_app/migrations/__init__.py b/test_combine_fast_delete_app/migrations/__init__.py
new file mode 100644
index 0000000000..eb944e9fe5
--- /dev/null
+++ b/test_combine_fast_delete_app/migrations/__init__.py
@@ -0,0 +1 @@
+# Empty migrations init file
diff --git a/test_combine_fast_delete_app/models.py b/test_combine_fast_delete_app/models.py
new file mode 100644
index 0000000000..71c2c049cf
--- /dev/null
+++ b/test_combine_fast_delete_app/models.py
@@ -0,0 +1,7 @@
+from django.db import models
+
+class Person(models.Model):
+    friends = models.ManyToManyField("self", symmetrical=False)
+
+    class Meta:
+        app_label = "test_combine_fast_delete_app"
