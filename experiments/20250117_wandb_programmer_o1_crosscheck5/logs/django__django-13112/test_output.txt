+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen
+ locale-gen
Generating locales (this might take a while)...
  en_US.UTF-8... done
Generation complete.
+ export LANG=en_US.UTF-8
+ LANG=en_US.UTF-8
+ export LANGUAGE=en_US:en
+ LANGUAGE=en_US:en
+ export LC_ALL=en_US.UTF-8
+ LC_ALL=en_US.UTF-8
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   django/core/checks/model_checks.py
	modified:   django/db/models/fields/related.py

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	test_mixed_case_app.py

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit 09914ccf688974e068941f55412b930729bafa06
Author: Mariusz Felisiak <felisiak.mariusz@gmail.com>
Date:   Fri Jun 26 22:37:58 2020 +0200

    Fixed test_clean_does_deduplicate_values on Oracle after e13cfc6dfd4212ef7a40db1a41d3ae6ac4b97de0.

diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py
index 42ea63dd4d..914defe5e7 100644
--- a/tests/model_forms/tests.py
+++ b/tests/model_forms/tests.py
@@ -1863,11 +1863,11 @@ class ModelMultipleChoiceFieldTests(TestCase):
             self.assertTrue(form.has_changed())
 
     def test_clean_does_deduplicate_values(self):
-        class WriterForm(forms.Form):
-            persons = forms.ModelMultipleChoiceField(queryset=Writer.objects.all())
+        class PersonForm(forms.Form):
+            persons = forms.ModelMultipleChoiceField(queryset=Person.objects.all())
 
-        person1 = Writer.objects.create(name="Person 1")
-        form = WriterForm(data={})
+        person1 = Person.objects.create(name='Person 1')
+        form = PersonForm(data={})
         queryset = form.fields['persons'].clean([str(person1.pk)] * 50)
         sql, params = queryset.query.sql_with_params()
         self.assertEqual(len(params), 1)
+ git diff 09914ccf688974e068941f55412b930729bafa06
diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py
index 15d9b7fd86..f7547bbbd0 100644
--- a/django/core/checks/model_checks.py
+++ b/django/core/checks/model_checks.py
@@ -119,6 +119,7 @@ def _check_lazy_references(apps, ignore=None):
         obj is a callback defined locally in Apps.lazy_model_operation() and
         annotated there with a `func` attribute so as to imitate a partial.
         """
+        import types
         operation, args, keywords = obj, [], {}
         while hasattr(operation, 'func'):
             args.extend(getattr(operation, 'args', []))
@@ -127,20 +128,37 @@ def _check_lazy_references(apps, ignore=None):
         return operation, args, keywords
 
     def app_model_error(model_key):
-        try:
-            apps.get_app_config(model_key[0])
-            model_error = "app '%s' doesn't provide model '%s'" % model_key
-        except LookupError:
-            model_error = "app '%s' isn't installed" % model_key[0]
-        return model_error
-
-    # Here are several functions which return CheckMessage instances for the
-    # most common usages of lazy operations throughout Django. These functions
-    # take the model that was being waited on as an (app_label, modelname)
-    # pair, the original lazy function, and its positional and keyword args as
-    # determined by extract_operation().
+        """
+        Return None if both the app and the model exist (case-insensitive).
+        Otherwise return an error string.
+        """
+        # 1) Case-insensitive lookup for the app label.
+        found_app_config = next(
+            (ac for ac in apps.get_app_configs() if ac.label.lower() == model_key[0].lower()),
+            None
+        )
+        if found_app_config is None:
+            # The app is not installed at all.
+            return "app '%s' isn't installed" % model_key[0]
+
+        # 2) Case-insensitive lookup for the model name.
+        desired_model_lower = model_key[1].lower()
+        for m in found_app_config.get_models():
+            if m._meta.model_name == desired_model_lower:
+                # The model is found; no error to report.
+                return None
+
+        # The app is installed, but the model wasn't found in it.
+        return "app '%s' doesn't provide model '%s'" % model_key
+
+    # Next, define the three error-building functions. Each returns None if
+    # there's actually no error.
+    from django.core.checks import Error
 
     def field_error(model_key, func, args, keywords):
+        model_err = app_model_error(model_key)
+        if model_err is None:
+            return None
         error_msg = (
             "The field %(field)s was declared with a lazy reference "
             "to '%(model)s', but %(model_error)s."
@@ -148,18 +166,22 @@ def _check_lazy_references(apps, ignore=None):
         params = {
             'model': '.'.join(model_key),
             'field': keywords['field'],
-            'model_error': app_model_error(model_key),
+            'model_error': model_err,
         }
         return Error(error_msg % params, obj=keywords['field'], id='fields.E307')
 
     def signal_connect_error(model_key, func, args, keywords):
+        import types
+        model_err = app_model_error(model_key)
+        if model_err is None:
+            return None
         error_msg = (
             "%(receiver)s was connected to the '%(signal)s' signal with a "
             "lazy reference to the sender '%(model)s', but %(model_error)s."
         )
         receiver = args[0]
         # The receiver is either a function or an instance of class
-        # defining a `__call__` method.
+        # defining a __call__ method.
         if isinstance(receiver, types.FunctionType):
             description = "The function '%s'" % receiver.__name__
         elif isinstance(receiver, types.MethodType):
@@ -171,22 +193,22 @@ def _check_lazy_references(apps, ignore=None):
             'model': '.'.join(model_key),
             'receiver': description,
             'signal': signal_name,
-            'model_error': app_model_error(model_key),
+            'model_error': model_err,
         }
         return Error(error_msg % params, obj=receiver.__module__, id='signals.E001')
 
     def default_error(model_key, func, args, keywords):
+        model_err = app_model_error(model_key)
+        if model_err is None:
+            return None
         error_msg = "%(op)s contains a lazy reference to %(model)s, but %(model_error)s."
         params = {
             'op': func,
             'model': '.'.join(model_key),
-            'model_error': app_model_error(model_key),
+            'model_error': model_err,
         }
         return Error(error_msg % params, obj=func, id='models.E022')
 
-    # Maps common uses of lazy operations to corresponding error functions
-    # defined above. If a key maps to None, no error will be produced.
-    # default_error() will be used for usages that don't appear in this dict.
     known_lazy = {
         ('django.db.models.fields.related', 'resolve_related_class'): field_error,
         ('django.db.models.fields.related', 'set_managed'): None,
@@ -205,6 +227,8 @@ def _check_lazy_references(apps, ignore=None):
     )), key=lambda error: error.msg)
 
 
+
+
 @register(Tags.models)
 def check_lazy_references(app_configs=None, **kwargs):
     return _check_lazy_references(apps)
diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py
index c2aea9c730..55329410ac 100644
--- a/django/db/models/fields/related.py
+++ b/django/db/models/fields/related.py
@@ -36,29 +36,54 @@ RECURSIVE_RELATIONSHIP_CONSTANT = 'self'
 
 def resolve_relation(scope_model, relation):
     """
-    Transform relation into a model or fully-qualified model string of the form
-    "app_label.ModelName", relative to scope_model.
+    Transform relation into a string "AppLabel.ModelName" or a model class,
+    relative to scope_model. Skip any real model lookups until after apps load.
+    This ensures we don't trigger AppRegistryNotReady.
 
     The relation argument can be:
-      * RECURSIVE_RELATIONSHIP_CONSTANT, i.e. the string "self", in which case
-        the model argument will be returned.
-      * A bare model name without an app_label, in which case scope_model's
-        app_label will be prepended.
-      * An "app_label.ModelName" string.
-      * A model class, which will be returned unchanged.
+      * "self" (RECURSIVE_RELATIONSHIP_CONSTANT), returning scope_model
+      * A bare model name, in which case scope_model._meta.app_label is prepended
+      * An "app_label.ModelName" string
+      * A model class, returned unchanged
+
+    We'll do minimal case-insensitive fixes on the string:
+      1) Fix app label by matching installed apps.
+      2) Capitalize() the model portion to match typical class naming.
+
+    Example: "dj_reglogin.category" => "DJ_RegLogin.Category"
     """
-    # Check for recursive relations
+    from django.apps import apps
+    RECURSIVE_RELATIONSHIP_CONSTANT = 'self'
+
     if relation == RECURSIVE_RELATIONSHIP_CONSTANT:
-        relation = scope_model
+        return scope_model
 
-    # Look for an "app.Model" relation
     if isinstance(relation, str):
-        if "." not in relation:
-            relation = "%s.%s" % (scope_model._meta.app_label, relation)
+        # Check if it's a bare model name
+        if '.' not in relation:
+            # Prepend the current scope's app_label
+            return f"{scope_model._meta.app_label}.{relation.capitalize()}"
+
+        app_label, model_name = relation.split('.', 1)
+        # Case-insensitive app label fix
+        found_app_config = next(
+            (ac for ac in apps.get_app_configs() if ac.label.lower() == app_label.lower()),
+            None
+        )
+        if found_app_config is not None:
+            # Return the fully qualified string with fixed app label,
+            # plus a naive capitalize() on the model name
+            return f"{found_app_config.label}.{model_name.capitalize()}"
+
+        # If we didn't find an app match, just return relation as is
+        # (will fail later if truly missing).
+        return relation
 
     return relation
 
 
+
+
 def lazy_related_operation(function, model, *related_models, **kwargs):
     """
     Schedule `function` to be called once `model` and all `related_models`
@@ -154,19 +179,66 @@ class RelatedField(FieldCacheMixin, Field):
         return errors
 
     def _check_relation_model_exists(self):
-        rel_is_missing = self.remote_field.model not in self.opts.apps.get_models()
+        from django.apps import apps
+        from django.core import checks
         rel_is_string = isinstance(self.remote_field.model, str)
-        model_name = self.remote_field.model if rel_is_string else self.remote_field.model._meta.object_name
-        if rel_is_missing and (rel_is_string or not self.remote_field.model._meta.swapped):
+    
+        # If it's a string, try a case-insensitive lookup similar to _check_lazy_references().
+        if rel_is_string:
+            model_str = self.remote_field.model
+            # Handle bare model name "Category"
+            if '.' not in model_str:
+                # Prepend this field's own app label
+                app_label = self.model._meta.app_label
+                object_name = model_str
+            else:
+                app_label, object_name = model_str.split('.', 1)
+    
+            # Attempt case-insensitive app lookup
+            found_app_config = next(
+                (ac for ac in apps.get_app_configs() if ac.label.lower() == app_label.lower()),
+                None
+            )
+            if found_app_config is not None:
+                # Attempt case-insensitive model lookup
+                lower_obj = object_name.lower()
+                for m in found_app_config.get_models():
+                    if m._meta.model_name == lower_obj:
+                        # Found a matching model class
+                        # Check if it's abstract
+                        if m._meta.abstract:
+                            return [
+                                checks.Error(
+                                    "Field defines a relation with model '%s', which is abstract." % model_str,
+                                    obj=self,
+                                    id='fields.E300',
+                                )
+                            ]
+                        # Otherwise it is installed and valid
+                        return []
+            # If not found, fall through and raise E300
+            return [
+                checks.Error(
+                    "Field defines a relation with model '%s', which is either not installed, or is abstract."
+                    % model_str,
+                    obj=self,
+                    id='fields.E300',
+                )
+            ]
+    
+        # Otherwise, the remote_field.model should be an actual model class.
+        rel_is_missing = self.remote_field.model not in self.opts.apps.get_models()
+        if rel_is_missing and not self.remote_field.model._meta.swapped:
             return [
                 checks.Error(
-                    "Field defines a relation with model '%s', which is either "
-                    "not installed, or is abstract." % model_name,
+                    "Field defines a relation with model '%s', which is either not installed, or is abstract."
+                    % self.remote_field.model._meta.object_name,
                     obj=self,
                     id='fields.E300',
                 )
             ]
         return []
+    
 
     def _check_referencing_to_swapped_model(self):
         if (self.remote_field.model not in self.opts.apps.get_models() and
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
Requirement already satisfied: asgiref>=3.2 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (3.4.1)
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (2024.2)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (0.4.4)
Requirement already satisfied: typing-extensions in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from asgiref>=3.2->Django==3.2) (4.1.1)
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 3.2
    Uninstalling Django-3.2:
      Successfully uninstalled Django-3.2
  Running setup.py develop for Django
Successfully installed Django-3.2
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
+ git checkout 09914ccf688974e068941f55412b930729bafa06 tests/migrations/test_state.py
Updated 0 paths from 89b268955a
+ git apply -v -
Checking patch tests/migrations/test_state.py...
Applied patch tests/migrations/test_state.py cleanly.
+ ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 migrations.test_state
test_abstract_model_children_inherit_indexes (migrations.test_state.ModelStateTests) ... ok
test_bound_field_sanity_check (migrations.test_state.ModelStateTests) ... ok
test_create_swappable (migrations.test_state.ModelStateTests) ... ok
test_create_swappable_from_abstract (migrations.test_state.ModelStateTests) ... ok
test_custom_manager_swappable (migrations.test_state.ModelStateTests) ... ok
test_custom_model_base (migrations.test_state.ModelStateTests) ... ok
test_explicit_index_name (migrations.test_state.ModelStateTests) ... ok
test_fields_immutability (migrations.test_state.ModelStateTests) ... ok
test_fields_ordering_equality (migrations.test_state.ModelStateTests) ... ok
test_from_model_constraints (migrations.test_state.ModelStateTests) ... ok
test_order_with_respect_to_private_field (migrations.test_state.ModelStateTests) ... ok
test_repr (migrations.test_state.ModelStateTests) ... ok
test_sanity_check_through (migrations.test_state.ModelStateTests) ... ok
test_sanity_check_to (migrations.test_state.ModelStateTests) ... ok
test_sanity_index_name (migrations.test_state.ModelStateTests) ... ok
test_abstract_base (migrations.test_state.RelatedModelsTests) ... ok
test_base (migrations.test_state.RelatedModelsTests) ... ok
test_base_to_base_fk (migrations.test_state.RelatedModelsTests) ... ok
test_base_to_subclass_fk (migrations.test_state.RelatedModelsTests) ... ok
test_circle (migrations.test_state.RelatedModelsTests) ... ok
test_direct_fk (migrations.test_state.RelatedModelsTests) ... ok
test_direct_hidden_fk (migrations.test_state.RelatedModelsTests) ... ok
test_direct_m2m (migrations.test_state.RelatedModelsTests) ... ok
test_direct_m2m_self (migrations.test_state.RelatedModelsTests) ... ok
test_fk_through_proxy (migrations.test_state.RelatedModelsTests) ... ok
test_generic_fk (migrations.test_state.RelatedModelsTests) ... ok
test_intermediate_m2m (migrations.test_state.RelatedModelsTests) ... ok
test_intermediate_m2m_base (migrations.test_state.RelatedModelsTests) ... ok
test_intermediate_m2m_extern_fk (migrations.test_state.RelatedModelsTests) ... ok
test_intermediate_m2m_self (migrations.test_state.RelatedModelsTests) ... ok
test_multiple_bases (migrations.test_state.RelatedModelsTests) ... ok
test_multiple_mixed_bases (migrations.test_state.RelatedModelsTests) ... ok
test_multiple_nested_bases (migrations.test_state.RelatedModelsTests) ... ok
test_nested_abstract_base (migrations.test_state.RelatedModelsTests) ... ok
test_nested_base (migrations.test_state.RelatedModelsTests) ... ok
test_nested_fk (migrations.test_state.RelatedModelsTests) ... ok
test_nested_proxy_base (migrations.test_state.RelatedModelsTests) ... ok
test_proxy_base (migrations.test_state.RelatedModelsTests) ... ok
test_two_sided (migrations.test_state.RelatedModelsTests) ... ok
test_unrelated (migrations.test_state.RelatedModelsTests) ... ok
test_add_relations (migrations.test_state.StateTests) ... ok
test_apps_bulk_update (migrations.test_state.StateTests) ... ok
test_choices_iterator (migrations.test_state.StateTests) ... ok
test_create (migrations.test_state.StateTests) ... ok
test_custom_base_manager (migrations.test_state.StateTests) ... ok
test_custom_default_manager (migrations.test_state.StateTests) ... ok
test_custom_default_manager_added_to_the_model_state (migrations.test_state.StateTests) ... ok
test_custom_default_manager_named_objects_with_false_migration_flag (migrations.test_state.StateTests) ... ok
test_dangling_references_throw_error (migrations.test_state.StateTests) ... ok
test_equality (migrations.test_state.StateTests) ... ok
test_ignore_order_wrt (migrations.test_state.StateTests) ... ok
test_manager_refer_correct_model_version (migrations.test_state.StateTests) ... ok
test_no_duplicate_managers (migrations.test_state.StateTests) ... ok
test_real_apps (migrations.test_state.StateTests) ... ok
test_reference_mixed_case_app_label (migrations.test_state.StateTests) ... ok
test_reload_model_relationship_consistency (migrations.test_state.StateTests) ... ok
test_reload_related_model_on_non_relational_fields (migrations.test_state.StateTests) ... ok
test_remove_relations (migrations.test_state.StateTests) ... ok
test_render (migrations.test_state.StateTests) ... ok
test_render_model_inheritance (migrations.test_state.StateTests) ... ok
test_render_model_with_multiple_inheritance (migrations.test_state.StateTests) ... ok
test_render_project_dependencies (migrations.test_state.StateTests) ... ok
test_render_unique_app_labels (migrations.test_state.StateTests) ... ok
test_self_relation (migrations.test_state.StateTests) ... ok

----------------------------------------------------------------------
Ran 64 tests in 0.112s

OK
Testing against Django installed in '/testbed/django'
Importing application migrations
Skipping setup of unused database(s): default, other.
System check identified no issues (0 silenced).
+ git checkout 09914ccf688974e068941f55412b930729bafa06 tests/migrations/test_state.py
Updated 1 path from 89b268955a
