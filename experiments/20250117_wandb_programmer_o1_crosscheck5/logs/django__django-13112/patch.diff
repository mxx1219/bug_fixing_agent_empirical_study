diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py
index 15d9b7fd86..f7547bbbd0 100644
--- a/django/core/checks/model_checks.py
+++ b/django/core/checks/model_checks.py
@@ -119,6 +119,7 @@ def _check_lazy_references(apps, ignore=None):
         obj is a callback defined locally in Apps.lazy_model_operation() and
         annotated there with a `func` attribute so as to imitate a partial.
         """
+        import types
         operation, args, keywords = obj, [], {}
         while hasattr(operation, 'func'):
             args.extend(getattr(operation, 'args', []))
@@ -127,20 +128,37 @@ def _check_lazy_references(apps, ignore=None):
         return operation, args, keywords
 
     def app_model_error(model_key):
-        try:
-            apps.get_app_config(model_key[0])
-            model_error = "app '%s' doesn't provide model '%s'" % model_key
-        except LookupError:
-            model_error = "app '%s' isn't installed" % model_key[0]
-        return model_error
-
-    # Here are several functions which return CheckMessage instances for the
-    # most common usages of lazy operations throughout Django. These functions
-    # take the model that was being waited on as an (app_label, modelname)
-    # pair, the original lazy function, and its positional and keyword args as
-    # determined by extract_operation().
+        """
+        Return None if both the app and the model exist (case-insensitive).
+        Otherwise return an error string.
+        """
+        # 1) Case-insensitive lookup for the app label.
+        found_app_config = next(
+            (ac for ac in apps.get_app_configs() if ac.label.lower() == model_key[0].lower()),
+            None
+        )
+        if found_app_config is None:
+            # The app is not installed at all.
+            return "app '%s' isn't installed" % model_key[0]
+
+        # 2) Case-insensitive lookup for the model name.
+        desired_model_lower = model_key[1].lower()
+        for m in found_app_config.get_models():
+            if m._meta.model_name == desired_model_lower:
+                # The model is found; no error to report.
+                return None
+
+        # The app is installed, but the model wasn't found in it.
+        return "app '%s' doesn't provide model '%s'" % model_key
+
+    # Next, define the three error-building functions. Each returns None if
+    # there's actually no error.
+    from django.core.checks import Error
 
     def field_error(model_key, func, args, keywords):
+        model_err = app_model_error(model_key)
+        if model_err is None:
+            return None
         error_msg = (
             "The field %(field)s was declared with a lazy reference "
             "to '%(model)s', but %(model_error)s."
@@ -148,18 +166,22 @@ def _check_lazy_references(apps, ignore=None):
         params = {
             'model': '.'.join(model_key),
             'field': keywords['field'],
-            'model_error': app_model_error(model_key),
+            'model_error': model_err,
         }
         return Error(error_msg % params, obj=keywords['field'], id='fields.E307')
 
     def signal_connect_error(model_key, func, args, keywords):
+        import types
+        model_err = app_model_error(model_key)
+        if model_err is None:
+            return None
         error_msg = (
             "%(receiver)s was connected to the '%(signal)s' signal with a "
             "lazy reference to the sender '%(model)s', but %(model_error)s."
         )
         receiver = args[0]
         # The receiver is either a function or an instance of class
-        # defining a `__call__` method.
+        # defining a __call__ method.
         if isinstance(receiver, types.FunctionType):
             description = "The function '%s'" % receiver.__name__
         elif isinstance(receiver, types.MethodType):
@@ -171,22 +193,22 @@ def _check_lazy_references(apps, ignore=None):
             'model': '.'.join(model_key),
             'receiver': description,
             'signal': signal_name,
-            'model_error': app_model_error(model_key),
+            'model_error': model_err,
         }
         return Error(error_msg % params, obj=receiver.__module__, id='signals.E001')
 
     def default_error(model_key, func, args, keywords):
+        model_err = app_model_error(model_key)
+        if model_err is None:
+            return None
         error_msg = "%(op)s contains a lazy reference to %(model)s, but %(model_error)s."
         params = {
             'op': func,
             'model': '.'.join(model_key),
-            'model_error': app_model_error(model_key),
+            'model_error': model_err,
         }
         return Error(error_msg % params, obj=func, id='models.E022')
 
-    # Maps common uses of lazy operations to corresponding error functions
-    # defined above. If a key maps to None, no error will be produced.
-    # default_error() will be used for usages that don't appear in this dict.
     known_lazy = {
         ('django.db.models.fields.related', 'resolve_related_class'): field_error,
         ('django.db.models.fields.related', 'set_managed'): None,
@@ -205,6 +227,8 @@ def _check_lazy_references(apps, ignore=None):
     )), key=lambda error: error.msg)
 
 
+
+
 @register(Tags.models)
 def check_lazy_references(app_configs=None, **kwargs):
     return _check_lazy_references(apps)
diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py
index c2aea9c730..55329410ac 100644
--- a/django/db/models/fields/related.py
+++ b/django/db/models/fields/related.py
@@ -36,29 +36,54 @@ RECURSIVE_RELATIONSHIP_CONSTANT = 'self'
 
 def resolve_relation(scope_model, relation):
     """
-    Transform relation into a model or fully-qualified model string of the form
-    "app_label.ModelName", relative to scope_model.
+    Transform relation into a string "AppLabel.ModelName" or a model class,
+    relative to scope_model. Skip any real model lookups until after apps load.
+    This ensures we don't trigger AppRegistryNotReady.
 
     The relation argument can be:
-      * RECURSIVE_RELATIONSHIP_CONSTANT, i.e. the string "self", in which case
-        the model argument will be returned.
-      * A bare model name without an app_label, in which case scope_model's
-        app_label will be prepended.
-      * An "app_label.ModelName" string.
-      * A model class, which will be returned unchanged.
+      * "self" (RECURSIVE_RELATIONSHIP_CONSTANT), returning scope_model
+      * A bare model name, in which case scope_model._meta.app_label is prepended
+      * An "app_label.ModelName" string
+      * A model class, returned unchanged
+
+    We'll do minimal case-insensitive fixes on the string:
+      1) Fix app label by matching installed apps.
+      2) Capitalize() the model portion to match typical class naming.
+
+    Example: "dj_reglogin.category" => "DJ_RegLogin.Category"
     """
-    # Check for recursive relations
+    from django.apps import apps
+    RECURSIVE_RELATIONSHIP_CONSTANT = 'self'
+
     if relation == RECURSIVE_RELATIONSHIP_CONSTANT:
-        relation = scope_model
+        return scope_model
 
-    # Look for an "app.Model" relation
     if isinstance(relation, str):
-        if "." not in relation:
-            relation = "%s.%s" % (scope_model._meta.app_label, relation)
+        # Check if it's a bare model name
+        if '.' not in relation:
+            # Prepend the current scope's app_label
+            return f"{scope_model._meta.app_label}.{relation.capitalize()}"
+
+        app_label, model_name = relation.split('.', 1)
+        # Case-insensitive app label fix
+        found_app_config = next(
+            (ac for ac in apps.get_app_configs() if ac.label.lower() == app_label.lower()),
+            None
+        )
+        if found_app_config is not None:
+            # Return the fully qualified string with fixed app label,
+            # plus a naive capitalize() on the model name
+            return f"{found_app_config.label}.{model_name.capitalize()}"
+
+        # If we didn't find an app match, just return relation as is
+        # (will fail later if truly missing).
+        return relation
 
     return relation
 
 
+
+
 def lazy_related_operation(function, model, *related_models, **kwargs):
     """
     Schedule `function` to be called once `model` and all `related_models`
@@ -154,19 +179,66 @@ class RelatedField(FieldCacheMixin, Field):
         return errors
 
     def _check_relation_model_exists(self):
-        rel_is_missing = self.remote_field.model not in self.opts.apps.get_models()
+        from django.apps import apps
+        from django.core import checks
         rel_is_string = isinstance(self.remote_field.model, str)
-        model_name = self.remote_field.model if rel_is_string else self.remote_field.model._meta.object_name
-        if rel_is_missing and (rel_is_string or not self.remote_field.model._meta.swapped):
+    
+        # If it's a string, try a case-insensitive lookup similar to _check_lazy_references().
+        if rel_is_string:
+            model_str = self.remote_field.model
+            # Handle bare model name "Category"
+            if '.' not in model_str:
+                # Prepend this field's own app label
+                app_label = self.model._meta.app_label
+                object_name = model_str
+            else:
+                app_label, object_name = model_str.split('.', 1)
+    
+            # Attempt case-insensitive app lookup
+            found_app_config = next(
+                (ac for ac in apps.get_app_configs() if ac.label.lower() == app_label.lower()),
+                None
+            )
+            if found_app_config is not None:
+                # Attempt case-insensitive model lookup
+                lower_obj = object_name.lower()
+                for m in found_app_config.get_models():
+                    if m._meta.model_name == lower_obj:
+                        # Found a matching model class
+                        # Check if it's abstract
+                        if m._meta.abstract:
+                            return [
+                                checks.Error(
+                                    "Field defines a relation with model '%s', which is abstract." % model_str,
+                                    obj=self,
+                                    id='fields.E300',
+                                )
+                            ]
+                        # Otherwise it is installed and valid
+                        return []
+            # If not found, fall through and raise E300
+            return [
+                checks.Error(
+                    "Field defines a relation with model '%s', which is either not installed, or is abstract."
+                    % model_str,
+                    obj=self,
+                    id='fields.E300',
+                )
+            ]
+    
+        # Otherwise, the remote_field.model should be an actual model class.
+        rel_is_missing = self.remote_field.model not in self.opts.apps.get_models()
+        if rel_is_missing and not self.remote_field.model._meta.swapped:
             return [
                 checks.Error(
-                    "Field defines a relation with model '%s', which is either "
-                    "not installed, or is abstract." % model_name,
+                    "Field defines a relation with model '%s', which is either not installed, or is abstract."
+                    % self.remote_field.model._meta.object_name,
                     obj=self,
                     id='fields.E300',
                 )
             ]
         return []
+    
 
     def _check_referencing_to_swapped_model(self):
         if (self.remote_field.model not in self.opts.apps.get_models() and
diff --git a/test_mixed_case_app.py b/test_mixed_case_app.py
new file mode 100644
index 0000000000..86fda9b039
--- /dev/null
+++ b/test_mixed_case_app.py
@@ -0,0 +1,82 @@
+#!/usr/bin/env python3
+import os
+import subprocess
+import sys
+import tempfile
+import textwrap
+
+def main():
+    print("Step 1: Creating temp directory for test project...")
+    with tempfile.TemporaryDirectory() as tmpdir:
+        os.chdir(tmpdir)
+        print(f"Working directory is now: {tmpdir}")
+        
+        print("Step 2: Initializing Django project...")
+        subprocess.check_call(['django-admin', 'startproject', 'mysite'])
+        
+        project_path = os.path.join(tmpdir, 'mysite')
+        os.chdir(project_path)
+        
+        # Modify settings.py to add DJ_RegLogin to INSTALLED_APPS
+        settings_path = os.path.join(project_path, 'mysite', 'settings.py')
+        with open(settings_path, 'r', encoding='utf-8') as f:
+            settings_lines = f.readlines()
+        new_settings_lines = []
+        for line in settings_lines:
+            new_settings_lines.append(line)
+            if 'INSTALLED_APPS = [' in line:
+                new_settings_lines.append("    'DJ_RegLogin',\n")
+        with open(settings_path, 'w', encoding='utf-8') as f:
+            f.writelines(new_settings_lines)
+        
+        print("Step 3: Creating the DJ_RegLogin app folder with uppercase name...")
+        app_dir = os.path.join(project_path, 'DJ_RegLogin')
+        os.mkdir(app_dir)
+        
+        print("Step 4: Creating apps.py with name='DJ_RegLogin' ...")
+        with open(os.path.join(app_dir, 'apps.py'), 'w', encoding='utf-8') as f:
+            f.write(textwrap.dedent('''
+            from django.apps import AppConfig
+
+            class DJ_RegLoginConfig(AppConfig):
+                name = 'DJ_RegLogin'
+            ''').strip() + '\n')
+        
+        print("Step 5: Creating models.py referencing a lowercase cluster 'dj_reglogin.category' forcibly...")
+        with open(os.path.join(app_dir, 'models.py'), 'w', encoding='utf-8') as f:
+            f.write(textwrap.dedent('''
+            from django.db import models
+
+            class Category(models.Model):
+                title = models.CharField(max_length=100)
+
+            class Content(models.Model):
+                title = models.CharField(max_length=100)
+                # Force a scenario referencing the uppercase app in a manner that
+                # triggers the 'dj_reglogin.category' mismatch:
+                category = models.ForeignKey(
+                    "dj_reglogin.Category",
+                    on_delete=models.CASCADE
+                )
+            ''').strip() + '\n')
+        
+        # Put an __init__.py in app folder
+        open(os.path.join(app_dir, '__init__.py'), 'w').close()
+        
+        # Register the app config
+        with open(os.path.join(app_dir, '__init__.py'), 'a', encoding='utf-8') as f:
+            f.write("default_app_config = 'DJ_RegLogin.apps.DJ_RegLoginConfig'\n")
+        
+        print("Step 6: Running 'python manage.py migrate' to see if the error appears.")
+        manage_py = os.path.join(project_path, 'manage.py')
+        cmd = [sys.executable, manage_py, 'migrate', '--verbosity', '2']
+        try:
+            subprocess.check_call(cmd)
+            print("Migration succeeded. The bug is presumably fixed.")
+            sys.exit(0)
+        except subprocess.CalledProcessError:
+            print("Migration failed. The bug is present.")
+            sys.exit(1)
+
+if __name__ == '__main__':
+    main()
