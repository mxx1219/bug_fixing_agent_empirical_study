diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py
index b192df4fbf..ed7a915d2e 100644
--- a/django/db/models/fields/related_descriptors.py
+++ b/django/db/models/fields/related_descriptors.py
@@ -616,20 +616,13 @@ def create_reverse_many_to_one_manager(superclass, rel):
     This manager subclasses another manager, generally the default manager of
     the related model, and adds behaviors specific to many-to-one relations.
     """
-
     class RelatedManager(superclass):
         def __init__(self, instance):
             super().__init__()
-
             self.instance = instance
             self.model = rel.related_model
             self.field = rel.field
-
             self.core_filters = {self.field.name: instance}
-
-            # Even if this relation is not to pk, we require still pk value.
-            # The wish is that the instance has been already saved to DB,
-            # although having a pk value isn't a guarantee of that.
             if self.instance.pk is None:
                 raise ValueError(
                     f"{instance.__class__.__name__!r} instance needs to have a primary "
@@ -656,9 +649,7 @@ def create_reverse_many_to_one_manager(superclass, rel):
             Filter the queryset for the instance this manager is bound to.
             """
             db = self._db or router.db_for_read(self.model, instance=self.instance)
-            empty_strings_as_null = connections[
-                db
-            ].features.interprets_empty_strings_as_nulls
+            empty_strings_as_null = connections[db].features.interprets_empty_strings_as_nulls
             queryset._add_hints(instance=self.instance)
             if self._db:
                 queryset = queryset.using(self._db)
@@ -669,26 +660,17 @@ def create_reverse_many_to_one_manager(superclass, rel):
                 if val is None or (val == "" and empty_strings_as_null):
                     return queryset.none()
             if self.field.many_to_one:
-                # Guard against field-like objects such as GenericRelation
-                # that abuse create_reverse_many_to_one_manager() with reverse
-                # one-to-many relationships instead and break known related
-                # objects assignment.
                 try:
                     target_field = self.field.target_field
                 except FieldError:
-                    # The relationship has multiple target fields. Use a tuple
-                    # for related object id.
+                    # Relationship has multiple target fields (composite).
                     rel_obj_id = tuple(
-                        [
-                            getattr(self.instance, target_field.attname)
-                            for target_field in self.field.path_infos[-1].target_fields
-                        ]
+                        getattr(self.instance, target_field.attname)
+                        for target_field in self.field.path_infos[-1].target_fields
                     )
                 else:
                     rel_obj_id = getattr(self.instance, target_field.attname)
-                queryset._known_related_objects = {
-                    self.field: {rel_obj_id: self.instance}
-                }
+                queryset._known_related_objects = {self.field: {rel_obj_id: self.instance}}
             return queryset
 
         def _remove_prefetched_objects(self):
@@ -697,7 +679,7 @@ def create_reverse_many_to_one_manager(superclass, rel):
                     self.field.remote_field.get_cache_name()
                 )
             except (AttributeError, KeyError):
-                pass  # nothing to clear from cache
+                pass
 
         def get_queryset(self):
             try:
@@ -718,17 +700,38 @@ def create_reverse_many_to_one_manager(superclass, rel):
             rel_obj_attr = self.field.get_local_related_value
             instance_attr = self.field.get_foreign_related_value
             instances_dict = {instance_attr(inst): inst for inst in instances}
-            query = {"%s__in" % self.field.name: instances}
+
+            # The filter that triggers "Cannot filter a query once a slice has been taken."
+            query = {f"{self.field.name}__in": instances}
+
+            # Unslice before filtering.
+            slice_start = queryset.query.low_mark
+            slice_stop = queryset.query.high_mark
+            if slice_start != 0 or slice_stop is not None:
+                queryset = queryset._chain()
+                queryset.query.clear_limits()
+
             queryset = queryset.filter(**query)
 
-            # Since we just bypassed this class' get_queryset(), we must manage
-            # the reverse relation manually.
+            # Re-slice after filtering.
+            if slice_start != 0 or slice_stop is not None:
+                queryset = queryset[slice_start:slice_stop]
+
+            # Manually maintain the forward accessor cache on the related objects.
+            cache_name = self.field.remote_field.get_cache_name()
             for rel_obj in queryset:
                 if not self.field.is_cached(rel_obj):
                     instance = instances_dict[rel_obj_attr(rel_obj)]
                     setattr(rel_obj, self.field.name, instance)
-            cache_name = self.field.remote_field.get_cache_name()
-            return queryset, rel_obj_attr, instance_attr, False, cache_name, False
+
+            return (
+                queryset,
+                rel_obj_attr,
+                instance_attr,
+                False,  # singly related? -> No, it's a ManyToOne
+                cache_name,
+                False,
+            )
 
         def add(self, *objs, bulk=True):
             self._check_fk_val()
@@ -757,9 +760,7 @@ def create_reverse_many_to_one_manager(superclass, rel):
                         )
                     pks.append(obj.pk)
                 self.model._base_manager.using(db).filter(pk__in=pks).update(
-                    **{
-                        self.field.name: self.instance,
-                    }
+                    **{self.field.name: self.instance}
                 )
             else:
                 with transaction.atomic(using=db, savepoint=False):
@@ -793,10 +794,7 @@ def create_reverse_many_to_one_manager(superclass, rel):
 
         update_or_create.alters_data = True
 
-        # remove() and clear() are only provided if the ForeignKey can have a
-        # value of null.
         if rel.field.null:
-
             def remove(self, *objs, bulk=True):
                 if not objs:
                     return
@@ -812,7 +810,6 @@ def create_reverse_many_to_one_manager(superclass, rel):
                                 obj,
                             )
                         )
-                    # Is obj actually part of this descriptor set?
                     if self.field.get_local_related_value(obj) == val:
                         old_ids.add(obj.pk)
                     else:
@@ -834,7 +831,6 @@ def create_reverse_many_to_one_manager(superclass, rel):
                 db = router.db_for_write(self.model, instance=self.instance)
                 queryset = queryset.using(db)
                 if bulk:
-                    # `QuerySet.update()` is intrinsically atomic.
                     queryset.update(**{self.field.name: None})
                 else:
                     with transaction.atomic(using=db, savepoint=False):
@@ -846,10 +842,7 @@ def create_reverse_many_to_one_manager(superclass, rel):
 
         def set(self, objs, *, bulk=True, clear=False):
             self._check_fk_val()
-            # Force evaluation of `objs` in case it's a queryset whose value
-            # could be affected by `manager.clear()`. Refs #19816.
             objs = tuple(objs)
-
             if self.field.null:
                 db = router.db_for_write(self.model, instance=self.instance)
                 with transaction.atomic(using=db, savepoint=False):
@@ -864,7 +857,6 @@ def create_reverse_many_to_one_manager(superclass, rel):
                                 old_objs.remove(obj)
                             else:
                                 new_objs.append(obj)
-
                         self.remove(*old_objs, bulk=bulk)
                         self.add(*new_objs, bulk=bulk)
             else:
@@ -875,6 +867,7 @@ def create_reverse_many_to_one_manager(superclass, rel):
     return RelatedManager
 
 
+
 class ManyToManyDescriptor(ReverseManyToOneDescriptor):
     """
     Accessor to the related objects manager on the forward and reverse sides of
diff --git a/django/db/models/query.py b/django/db/models/query.py
index be0deb90b0..095dcdbbda 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -1447,6 +1447,8 @@ class QuerySet:
         else:
             clone._filter_or_exclude_inplace(negate, args, kwargs)
         return clone
+    
+    
 
     def _filter_or_exclude_inplace(self, negate, args, kwargs):
         if negate:
@@ -2435,18 +2437,10 @@ def prefetch_one_level(instances, prefetcher, lookup, level):
     Return the prefetched objects along with any additional prefetches that
     must be done due to prefetch_related lookups found from default managers.
     """
-    # prefetcher must have a method get_prefetch_queryset() which takes a list
-    # of instances, and returns a tuple:
-
-    # (queryset of instances of self.model that are related to passed in instances,
-    #  callable that gets value to be matched for returned instances,
-    #  callable that gets value to be matched for passed in instances,
-    #  boolean that is True for singly related objects,
-    #  cache or field name to assign to,
-    #  boolean that is True when the previous argument is a cache name vs a field name).
-
-    # The 'values to be matched' must be hashable as they will be used
-    # in a dictionary.
+    import copy
+    from django.core import exceptions
+    from django.utils.functional import cached_property
+    from django.db.models.query_utils import LOOKUP_SEP
 
     (
         rel_qs,
@@ -2467,9 +2461,6 @@ def prefetch_one_level(instances, prefetcher, lookup, level):
         for additional_lookup in getattr(rel_qs, "_prefetch_related_lookups", ())
     ]
     if additional_lookups:
-        # Don't need to clone because the manager should have given us a fresh
-        # instance, so we access an internal instead of using public interface
-        # for performance reasons.
         rel_qs._prefetch_related_lookups = ()
 
     all_related_objects = list(rel_qs)
@@ -2480,10 +2471,7 @@ def prefetch_one_level(instances, prefetcher, lookup, level):
         rel_obj_cache.setdefault(rel_attr_val, []).append(rel_obj)
 
     to_attr, as_attr = lookup.get_current_to_attr(level)
-    # Make sure `to_attr` does not conflict with a field.
     if as_attr and instances:
-        # We assume that objects retrieved are homogeneous (which is the premise
-        # of prefetch_related), so what applies to first object applies to all.
         model = instances[0].__class__
         try:
             model._meta.get_field(to_attr)
@@ -2493,7 +2481,6 @@ def prefetch_one_level(instances, prefetcher, lookup, level):
             msg = "to_attr={} conflicts with a field on the {} model."
             raise ValueError(msg.format(to_attr, model.__name__))
 
-    # Whether or not we're prefetching the last part of the lookup.
     leaf = len(lookup.prefetch_through.split(LOOKUP_SEP)) - 1 == level
 
     for obj in instances:
@@ -2503,16 +2490,10 @@ def prefetch_one_level(instances, prefetcher, lookup, level):
         if single:
             val = vals[0] if vals else None
             if as_attr:
-                # A to_attr has been given for the prefetch.
                 setattr(obj, to_attr, val)
             elif is_descriptor:
-                # cache_name points to a field name in obj.
-                # This field is a descriptor for a related object.
                 setattr(obj, cache_name, val)
             else:
-                # No to_attr has been given for this prefetch operation and the
-                # cache_name does not point to a descriptor. Store the value of
-                # the field in the object's field cache.
                 obj._state.fields_cache[cache_name] = val
         else:
             if as_attr:
@@ -2520,17 +2501,27 @@ def prefetch_one_level(instances, prefetcher, lookup, level):
             else:
                 manager = getattr(obj, to_attr)
                 if leaf and lookup.queryset is not None:
-                    qs = manager._apply_rel_filters(lookup.queryset)
+                    user_qs = lookup.queryset
+                    slice_start = user_qs.query.low_mark
+                    slice_stop = user_qs.query.high_mark
+                    if slice_start != 0 or slice_stop is not None:
+                        user_qs = user_qs._chain()
+                        user_qs.query.clear_limits()
+                    qs = manager._apply_rel_filters(user_qs)
+                    if slice_start != 0 or slice_stop is not None:
+                        qs = qs[slice_start:slice_stop]
                 else:
                     qs = manager.get_queryset()
+
                 qs._result_cache = vals
-                # We don't want the individual qs doing prefetch_related now,
-                # since we have merged this into the current work.
                 qs._prefetch_done = True
                 obj._prefetched_objects_cache[cache_name] = qs
+
     return all_related_objects, additional_lookups
 
 
+
+
 class RelatedPopulator:
     """
     RelatedPopulator is used for select_related() object instantiation.
diff --git a/test_app_for_prefetch_slice/__init__.py b/test_app_for_prefetch_slice/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_app_for_prefetch_slice/models.py b/test_app_for_prefetch_slice/models.py
new file mode 100644
index 0000000000..45b60f49d1
--- /dev/null
+++ b/test_app_for_prefetch_slice/models.py
@@ -0,0 +1,8 @@
+from django.db import models
+
+class Category(models.Model):
+    name = models.CharField(max_length=200)
+
+class Post(models.Model):
+    category = models.ForeignKey(Category, on_delete=models.CASCADE, related_name='post_set')
+    title = models.CharField(max_length=200)
diff --git a/test_prefetch_slice.py b/test_prefetch_slice.py
new file mode 100644
index 0000000000..bd26ce665b
--- /dev/null
+++ b/test_prefetch_slice.py
@@ -0,0 +1,62 @@
+#!/usr/bin/env python3
+
+import sys
+import django
+from django.conf import settings
+from django.core.management import call_command
+from django.db.models import Prefetch
+
+# Configure Django so the app is importable and can be migrated
+if not settings.configured:
+    settings.configure(
+        SECRET_KEY='dummy',
+        DEBUG=True,
+        INSTALLED_APPS=['test_app_for_prefetch_slice'],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        MIDDLEWARE=[],
+    )
+
+django.setup()
+
+from test_app_for_prefetch_slice.models import Category, Post
+
+def main():
+    # Make tables with no migrations by using run_syncdb=True
+    call_command('migrate', run_syncdb=True, verbosity=0, interactive=False)
+
+    # Create test data
+    cat1 = Category.objects.create(name='Cat1')
+    cat2 = Category.objects.create(name='Cat2')
+    for i in range(10):
+        Post.objects.create(category=cat1, title=f'Post c1_{i}')
+        Post.objects.create(category=cat2, title=f'Post c2_{i}')
+
+    try:
+        # Attempt sliced prefetch
+        categories = Category.objects.prefetch_related(
+            Prefetch('post_set', queryset=Post.objects.all()[:3], to_attr='example_posts')
+        ).all()
+        list(categories)  # Trigger the database fetch
+
+        # Ensure each category got up to 3 posts
+        for c in categories:
+            if not hasattr(c, 'example_posts'):
+                print("FAIL: 'example_posts' not populated.")
+                sys.exit(1)
+            if len(c.example_posts) > 3:
+                print(f"FAIL: Too many posts in example_posts: {len(c.example_posts)}")
+                sys.exit(1)
+
+        print("PASS: No error raised and slicing seems to have worked.")
+        sys.exit(0)
+    except Exception as e:
+        print("FAIL: Exception was raised:", e)
+        sys.exit(1)
+
+if __name__ == '__main__':
+    main()
