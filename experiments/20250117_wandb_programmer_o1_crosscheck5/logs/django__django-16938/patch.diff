diff --git a/django/core/serializers/python.py b/django/core/serializers/python.py
index 36048601af..4c321ed940 100644
--- a/django/core/serializers/python.py
+++ b/django/core/serializers/python.py
@@ -63,29 +63,35 @@ class Serializer(base.Serializer):
 
     def handle_m2m_field(self, obj, field):
         if field.remote_field.through._meta.auto_created:
-            if self.use_natural_foreign_keys and hasattr(
-                field.remote_field.model, "natural_key"
-            ):
-
+            if self.use_natural_foreign_keys and hasattr(field.remote_field.model, "natural_key"):
+    
                 def m2m_value(value):
                     return value.natural_key()
-
+    
                 def queryset_iterator(obj, field):
-                    return getattr(obj, field.name).iterator()
-
+                    # Remove forced select_related to avoid FieldError, but do NOT “only('pk')”
+                    # since natural_key() may need other columns.
+                    return getattr(obj, field.name).select_related(None).iterator()
+    
             else:
-
+    
                 def m2m_value(value):
                     return self._value_from_field(value, value._meta.pk)
-
+    
                 def queryset_iterator(obj, field):
-                    return getattr(obj, field.name).only("pk").iterator()
-
+                    # Remove forced select_related, but do “only('pk')” to preserve
+                    # Django’s M2M serializer optimization for this code path.
+                    return getattr(obj, field.name).select_related(None).only("pk").iterator()
+    
             m2m_iter = getattr(obj, "_prefetched_objects_cache", {}).get(
                 field.name,
                 queryset_iterator(obj, field),
             )
             self._current[field.name] = [m2m_value(related) for related in m2m_iter]
+      
+      
+      
+      
 
     def getvalue(self):
         return self.objects
diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py
index 78148f76b0..e0bdfa8ab2 100644
--- a/django/db/models/query_utils.py
+++ b/django/db/models/query_utils.py
@@ -313,20 +313,6 @@ class RegisterLookupMixin:
 
 
 def select_related_descend(field, restricted, requested, select_mask, reverse=False):
-    """
-    Return True if this field should be used to descend deeper for
-    select_related() purposes. Used by both the query construction code
-    (compiler.get_related_selections()) and the model instance creation code
-    (compiler.klass_info).
-
-    Arguments:
-     * field - the field to be checked
-     * restricted - a boolean field, indicating if the field list has been
-       manually restricted using a requested clause)
-     * requested - The select_related() dictionary.
-     * select_mask - the dictionary of selected fields.
-     * reverse - boolean, True if we are checking a reverse select related
-    """
     if not field.remote_field:
         return False
     if field.remote_field.parent_link and not reverse:
@@ -351,6 +337,8 @@ def select_related_descend(field, restricted, requested, select_mask, reverse=Fa
     return True
 
 
+
+
 def refs_expression(lookup_parts, annotations):
     """
     Check if the lookup_parts contains references to the given annotations set.
diff --git a/test_bug_app/__init__.py b/test_bug_app/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_bug_app/apps.py b/test_bug_app/apps.py
new file mode 100644
index 0000000000..654d222b16
--- /dev/null
+++ b/test_bug_app/apps.py
@@ -0,0 +1,4 @@
+from django.apps import AppConfig
+
+class TestBugAppConfig(AppConfig):
+    name = 'test_bug_app'
diff --git a/test_m2m_select_related_bug.py b/test_m2m_select_related_bug.py
new file mode 100644
index 0000000000..8e0869295b
--- /dev/null
+++ b/test_m2m_select_related_bug.py
@@ -0,0 +1,84 @@
+#!/usr/bin/env python3
+import sys
+import traceback
+
+def main():
+    print("Step 1: Configure Django settings & define models.")
+    import django
+    from django.conf import settings
+    from django.db import models, connection
+    from django.core import serializers
+
+    if not settings.configured:
+        settings.configure(
+            DEBUG=True,
+            SECRET_KEY='xyz',
+            ALLOWED_HOSTS=['*'],
+            INSTALLED_APPS=[
+                'django.contrib.contenttypes',
+                'test_bug_app',  # Include our ephemeral app
+            ],
+            DATABASES={
+                'default': {
+                    'ENGINE': 'django.db.backends.sqlite3',
+                    'NAME': ':memory:',
+                }
+            },
+        )
+
+    django.setup()
+
+    class TagMaster(models.Model):
+        name = models.CharField(max_length=120)
+        class Meta:
+            app_label = 'test_bug_app'
+            managed = True
+
+    class TagManager(models.Manager):
+        def get_queryset(self):
+            qs = super().get_queryset()
+            qs = qs.select_related("master")  # forcibly select_related
+            return qs
+
+    class Tag(models.Model):
+        objects = TagManager()
+        name = models.CharField(max_length=120)
+        master = models.ForeignKey(TagMaster, on_delete=models.SET_NULL, null=True)
+        class Meta:
+            app_label = 'test_bug_app'
+            managed = True
+
+    class Foo(models.Model):
+        name = models.CharField(max_length=120)
+        tags = models.ManyToManyField(Tag, blank=True, related_name='foos')
+        class Meta:
+            app_label = 'test_bug_app'
+            managed = True
+
+    # Step 2: Create tables in memory using schema_editor.
+    print("Creating tables using schema_editor...")
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(TagMaster)
+        schema_editor.create_model(Tag)
+        schema_editor.create_model(Foo)
+
+    print("Step 3: Create test objects and attempt serialization.")
+    try:
+        tag_master = TagMaster.objects.create(name='master')
+        tag = Tag.objects.create(name='tag', master=tag_master)
+        foo_obj = Foo.objects.create(name='test1')
+        foo_obj.tags.add(tag)
+        foo_obj.save()
+
+        print("About to serialize:")
+        data = serializers.serialize('json', [foo_obj])
+        print("Serialization succeeded!")
+        print("Serialized data:", data)
+        sys.exit(0)
+    except Exception as e:
+        print("Serialization failed with exception:")
+        traceback.print_exc()
+        sys.exit(1)
+
+if __name__ == '__main__':
+    main()
