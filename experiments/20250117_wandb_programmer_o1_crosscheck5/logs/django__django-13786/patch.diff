diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index dddf7c679c..426f0dd2c1 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -122,9 +122,11 @@ class CreateModel(ModelOperation):
         return False
 
     def reduce(self, operation, app_label):
-        if (isinstance(operation, DeleteModel) and
-                self.name_lower == operation.name_lower and
-                not self.options.get("proxy", False)):
+        if (
+            isinstance(operation, DeleteModel) and
+            self.name_lower == operation.name_lower and
+            not self.options.get("proxy", False)
+        ):
             return []
         elif isinstance(operation, RenameModel) and self.name_lower == operation.old_name_lower:
             return [
@@ -137,11 +139,16 @@ class CreateModel(ModelOperation):
                 ),
             ]
         elif isinstance(operation, AlterModelOptions) and self.name_lower == operation.name_lower:
+            # Incorporate logic removing keys not in operation.options.
+            new_options = {**self.options, **operation.options}
+            for key in operation.ALTER_OPTION_KEYS:
+                if key not in operation.options:
+                    new_options.pop(key, None)
             return [
                 CreateModel(
                     self.name,
                     fields=self.fields,
-                    options={**self.options, **operation.options},
+                    options=new_options,
                     bases=self.bases,
                     managers=self.managers,
                 ),
@@ -241,6 +248,7 @@ class CreateModel(ModelOperation):
                     ),
                 ]
         return super().reduce(operation, app_label)
+    
 
 
 class DeleteModel(ModelOperation):
diff --git a/scripts/test_squash_options.py b/scripts/test_squash_options.py
new file mode 100644
index 0000000000..400cf05c31
--- /dev/null
+++ b/scripts/test_squash_options.py
@@ -0,0 +1,49 @@
+#!/usr/bin/env python3
+
+import sys
+from django.db.migrations.operations.models import CreateModel, AlterModelOptions
+from django.db import models
+
+def main():
+    print("Running test_squash_options...")
+
+    # 1) Create a CreateModel operation with some initial options, e.g. ordering and verbose_name.
+    create_op = CreateModel(
+        name="TestModel",
+        fields=[("id", models.AutoField(primary_key=True))],
+        options={"ordering": ["-id"], "verbose_name": "Original verbose"},
+    )
+
+    # 2) Create an AlterModelOptions operation intended to remove 'ordering' and 'verbose_name'.
+    #    The new options are empty, to replicate removal.
+    alter_op = AlterModelOptions(
+        name="TestModel",
+        options={},
+    )
+
+    # 3) Attempt to reduce (squash) the CreateModel with the AlterModelOptions.
+    #    On HEAD, the resulting CreateModel incorrectly retains the removed options.
+    reduced_ops = create_op.reduce(alter_op, "app_label")
+
+    print("Reduced operations:", reduced_ops)
+
+    # We expect 1 resulting CreateModel, let's check it:
+    if len(reduced_ops) != 1 or not isinstance(reduced_ops[0], CreateModel):
+        print("FAIL: Unexpected reduce result or object type.")
+        sys.exit(1)
+
+    resulting_create = reduced_ops[0]
+    print("Resulting CreateModel options:", resulting_create.options)
+
+    # 4) If the bug is present, 'ordering' or 'verbose_name' remain in options.
+    #    We expect them *not* to be present in the correct fix.
+    if "ordering" in resulting_create.options or "verbose_name" in resulting_create.options:
+        print("FAIL: Bug present - 'ordering' or 'verbose_name' not removed.")
+        sys.exit(1)
+
+    print("PASS: 'ordering' and 'verbose_name' were correctly removed.")
+    sys.exit(0)
+
+
+if __name__ == "__main__":
+    main()
