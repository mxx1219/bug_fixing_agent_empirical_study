diff --git a/astropy/utils/introspection.py b/astropy/utils/introspection.py
index 3e784f9fc3..82595b15f1 100644
--- a/astropy/utils/introspection.py
+++ b/astropy/utils/introspection.py
@@ -89,38 +89,10 @@ def resolve_name(name, *additional_parts):
 
 
 def minversion(module, version, inclusive=True, version_path='__version__'):
-    """
-    Returns `True` if the specified Python module satisfies a minimum version
-    requirement, and `False` if not.
-
-    Parameters
-    ----------
-
-    module : module or `str`
-        An imported module of which to check the version, or the name of
-        that module (in which case an import of that module is attempted--
-        if this fails `False` is returned).
-
-    version : `str`
-        The version as a string that this module must have at a minimum (e.g.
-        ``'0.12'``).
-
-    inclusive : `bool`
-        The specified version meets the requirement inclusively (i.e. ``>=``)
-        as opposed to strictly greater than (default: `True`).
+    import types
+    from packaging.version import Version
+    from .introspection import resolve_name
 
-    version_path : `str`
-        A dotted attribute path to follow in the module for the version.
-        Defaults to just ``'__version__'``, which should work for most Python
-        modules.
-
-    Examples
-    --------
-
-    >>> import astropy
-    >>> minversion(astropy, '0.4.4')
-    True
-    """
     if isinstance(module, types.ModuleType):
         module_name = module.__name__
     elif isinstance(module, str):
@@ -140,9 +112,10 @@ def minversion(module, version, inclusive=True, version_path='__version__'):
         have_version = resolve_name(module.__name__, version_path)
 
     if inclusive:
-        return LooseVersion(have_version) >= LooseVersion(version)
+        return Version(have_version) >= Version(version)
     else:
-        return LooseVersion(have_version) > LooseVersion(version)
+        return Version(have_version) > Version(version)
+
 
 
 def find_current_module(depth=1, finddiff=False):
diff --git a/test_repro_minversion.py b/test_repro_minversion.py
new file mode 100644
index 0000000000..23342be2f1
--- /dev/null
+++ b/test_repro_minversion.py
@@ -0,0 +1,28 @@
+import sys
+import traceback
+from unittest.mock import patch
+
+def main():
+    print("Step 1: Testing minversion with a mock version for numpy.")
+    try:
+        from astropy.utils.introspection import minversion
+        with patch("numpy.__version__", "1.14.3"):
+            mocked_version = "1.14.3"
+            required_version = "1.14dev"
+            print(f"Mocked numpy.__version__ to '{mocked_version}'")
+            print(f"Calling minversion('numpy', '{required_version}')...")
+            result = minversion("numpy", required_version)
+            print(f"minversion('numpy', '{required_version}') returned: {result}")
+    except TypeError:
+        print("ERROR: Caught TypeError (the bug is present).")
+        traceback.print_exc()
+        sys.exit(1)
+    except Exception as e:
+        print("ERROR: Unexpected exception.")
+        traceback.print_exc()
+        sys.exit(2)
+    print("No TypeError encountered. Bug appears fixed.")
+    sys.exit(0)
+
+if __name__ == "__main__":
+    main()
