diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index c913267476..000ed068c3 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1776,7 +1776,11 @@ class Query(BaseExpression):
         return condition, needed_inner
 
     def set_empty(self):
+        from django.db.models.sql.where import NothingNode, AND
+        self.combinator = None
+        self.combined_queries = ()
         self.where.add(NothingNode(), AND)
+    
 
     def is_empty(self):
         return any(isinstance(c, NothingNode) for c in self.where.children)
diff --git a/tests_manual/__init__.py b/tests_manual/__init__.py
new file mode 100644
index 0000000000..5314269fb4
--- /dev/null
+++ b/tests_manual/__init__.py
@@ -0,0 +1 @@
+# Empty __init__ to make tests_manual a package
\ No newline at end of file
diff --git a/tests_manual/apps.py b/tests_manual/apps.py
new file mode 100644
index 0000000000..5f79d8f10c
--- /dev/null
+++ b/tests_manual/apps.py
@@ -0,0 +1,4 @@
+from django.apps import AppConfig
+
+class TestsManualConfig(AppConfig):
+    name = "tests_manual"
diff --git a/tests_manual/migrations/0001_initial.py b/tests_manual/migrations/0001_initial.py
new file mode 100644
index 0000000000..861c471cf5
--- /dev/null
+++ b/tests_manual/migrations/0001_initial.py
@@ -0,0 +1,28 @@
+# Generated by Django 3.2 on 2025-01-15 10:26
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Publication',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=100)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Article',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('publications', models.ManyToManyField(blank=True, null=True, to='tests_manual.Publication')),
+            ],
+        ),
+    ]
diff --git a/tests_manual/migrations/__init__.py b/tests_manual/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests_manual/test_union_none_issue.py b/tests_manual/test_union_none_issue.py
new file mode 100644
index 0000000000..626965ede1
--- /dev/null
+++ b/tests_manual/test_union_none_issue.py
@@ -0,0 +1,86 @@
+#!/usr/bin/env python3
+
+import sys
+import os
+
+def main():
+    print("[Step 1] Setting up minimal Django environment in memory...")
+    os.environ['DJANGO_SETTINGS_MODULE'] = 'test_union_none_issue_settings'
+    import django
+    from django.conf import settings
+
+    # Provide minimal settings, now including 'tests_manual' as an installed app
+    if not settings.configured:
+        settings.configure(
+            SECRET_KEY='testkey',
+            INSTALLED_APPS=[
+                'django.contrib.contenttypes',
+                'django.contrib.auth',
+                'tests_manual'
+            ],
+            DATABASES={
+                'default': {
+                    'ENGINE': 'django.db.backends.sqlite3',
+                    'NAME': ':memory:',
+                }
+            },
+            MIDDLEWARE=[],
+        )
+    django.setup()
+
+    print("[Step 2] Defining minimal models and forms in 'tests_manual' app.")
+    from django.db import models
+    from django import forms
+
+    class Publication(models.Model):
+        name = models.CharField(max_length=100)
+        class Meta:
+            app_label = 'tests_manual'
+
+    class Article(models.Model):
+        publications = models.ManyToManyField(Publication, blank=True, null=True)
+        class Meta:
+            app_label = 'tests_manual'
+
+    class ArticleForm(forms.ModelForm):
+        publications = forms.ModelMultipleChoiceField(
+            queryset=Publication.objects.filter(id__lt=2).union(Publication.objects.filter(id__gt=5)),
+            required=False,
+        )
+        class Meta:
+            model = Article
+            fields = ['publications']
+
+    print("[Step 3] Generating and running migrations for the 'tests_manual' app.")
+    from django.core.management import call_command
+    call_command('makemigrations', 'tests_manual', verbosity=0, interactive=False)
+    call_command('migrate', verbosity=0, interactive=False)
+
+    print("[Step 4] Creating sample Publications for union conditions.")
+    pub1 = Publication.objects.create(pk=1, name='Pub1')  # id__lt=2
+    pub2 = Publication.objects.create(pk=2, name='Pub2')
+    pub6 = Publication.objects.create(pk=6, name='Pub6')  # id__gt=5
+    pub7 = Publication.objects.create(pk=7, name='Pub7')  # id__gt=5
+
+    print("[Step 5] Submitting the form with an empty set of publications.")
+    form_data = {'publications': []}  # user selects nothing
+    f = ArticleForm(data=form_data)
+    if not f.is_valid():
+        print("[ERROR] Unexpectedly invalid form:", f.errors)
+        sys.exit(2)
+
+    print("[Step 6] Saving the Article object.")
+    article = f.save(commit=True)
+    pubs_attached = list(article.publications.all())
+    print(f"[DEBUG] Publications attached to article after empty form submit: {[p.pk for p in pubs_attached]}")
+
+    # If the bug is present, the union-based queryset.none() incorrectly returns all
+    if pubs_attached:
+        print("[FAIL] The M2M field is not empty; bug is present.")
+        sys.exit(1)
+    else:
+        print("[PASS] The M2M field is empty as expected; bug is absent/fixed.")
+        sys.exit(0)
+
+if __name__ == '__main__':
+    main()
