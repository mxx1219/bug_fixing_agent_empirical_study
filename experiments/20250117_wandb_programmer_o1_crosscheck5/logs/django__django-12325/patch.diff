diff --git a/django/db/models/options.py b/django/db/models/options.py
index a375f6ba1d..308e0cc481 100644
--- a/django/db/models/options.py
+++ b/django/db/models/options.py
@@ -230,34 +230,44 @@ class Options:
                     if f.name == query or f.attname == query
                 )
             except StopIteration:
+                from django.core.exceptions import FieldDoesNotExist
                 raise FieldDoesNotExist("%s has no field named '%s'" % (self.object_name, query))
-
+    
+            from django.db.models.fields.proxy import OrderWrt
             self.ordering = ('_order',)
             if not any(isinstance(field, OrderWrt) for field in model._meta.local_fields):
                 model.add_to_class('_order', OrderWrt())
         else:
             self.order_with_respect_to = None
-
+    
         if self.pk is None:
             if self.parents:
-                # Promote the first parent link in lieu of adding yet another
-                # field.
+                # By default, Django picks whichever OneToOneField is stored in self.parents
+                # (dictionary iteration order). If that field doesn't actually have parent_link,
+                # but another local field referencing this parent model does, use that one.
                 field = next(iter(self.parents.values()))
-                # Look for a local field with the same name as the
-                # first parent link. If a local field has already been
-                # created, use it instead of promoting the parent
-                already_created = [fld for fld in self.local_fields if fld.name == field.name]
-                if already_created:
-                    field = already_created[0]
+                if not field.remote_field.parent_link:
+                    parent_model = field.remote_field.model
+                    # Check local fields for a OneToOneField referencing the same parent with parent_link=True.
+                    pl_fields = [
+                        fld for fld in self.local_fields
+                        if getattr(fld.remote_field, 'model', None) == parent_model
+                        and getattr(fld.remote_field, 'parent_link', False)
+                    ]
+                    if pl_fields:
+                        field = pl_fields[0]
                 field.primary_key = True
                 self.setup_pk(field)
                 if not field.remote_field.parent_link:
+                    from django.core.exceptions import ImproperlyConfigured
                     raise ImproperlyConfigured(
                         'Add parent_link=True to %s.' % field,
                     )
             else:
+                from django.db.models.fields import AutoField
                 auto = AutoField(verbose_name='ID', primary_key=True, auto_created=True)
                 model.add_to_class('id', auto)
+    
 
     def add_manager(self, manager):
         self.local_managers.append(manager)
diff --git a/test_mti_order_bug.py b/test_mti_order_bug.py
new file mode 100644
index 0000000000..853ad43ac4
--- /dev/null
+++ b/test_mti_order_bug.py
@@ -0,0 +1,42 @@
+import sys
+print("TEST SCRIPT: test_mti_order_bug.py started.")
+
+try:
+    import django
+    from django.conf import settings
+    from django.core.exceptions import ImproperlyConfigured
+    from django.db import models
+
+    # Configure Django (in-memory settings).
+    settings.configure(
+        SECRET_KEY="test",
+        INSTALLED_APPS=["__main__"],  # We'll define the models in this same file as __main__
+        DATABASES={
+            "default": {
+                "ENGINE": "django.db.backends.sqlite3",
+                "NAME": ":memory:",
+            }
+        },
+        DEFAULT_AUTO_FIELD="django.db.models.AutoField",
+    )
+    django.setup()
+
+    class Document(models.Model):
+        pass
+
+    # This ordering snippet triggers the bug on HEAD:
+    class Picking(Document):
+        document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name="+")
+        origin = models.OneToOneField(Document, related_name="picking", on_delete=models.PROTECT)
+
+    print("No error raised, so the bug is presumably fixed.")
+    sys.exit(0)
+
+except ImproperlyConfigured as e:
+    print("Got ImproperlyConfigured error, which indicates the bug is present. Error message:")
+    print(e)
+    sys.exit(1)
+
+except Exception as e:
+    print("Unexpected exception encountered:", e)
+    sys.exit(2)
