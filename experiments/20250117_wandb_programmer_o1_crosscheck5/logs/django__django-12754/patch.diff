diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py
index 30616c0172..d2be1bc36b 100644
--- a/django/db/migrations/autodetector.py
+++ b/django/db/migrations/autodetector.py
@@ -514,7 +514,7 @@ class MigrationAutodetector:
         operations for them as well as separate operations to create any
         foreign key or M2M relationships (these are optimized later, if
         possible).
-
+    
         Defer any model options that refer to collections of fields that might
         be deferred (e.g. unique_together, index_together).
         """
@@ -571,6 +571,22 @@ class MigrationAutodetector:
                     None,
                     True
                 ))
+    
+            # -----------------------------------------------------------------
+            # FIX: If the new model is moving a field from a base class (the base
+            # lost that field in the new state), force that RemoveField first.
+            # -----------------------------------------------------------------
+            new_deps = set(dependencies)
+            for field_name in model_state.fields:
+                for base2 in model_state.bases:
+                    if isinstance(base2, str) and "." in base2:
+                        base_app, base_mod = base2.split(".", 1)
+                        if (base_app, base_mod, field_name) in (self.old_field_keys - self.new_field_keys):
+                            # That means the base had this field in old state, but not in new.
+                            # If our new model also has it, we are moving that field => remove base field first.
+                            new_deps.add((base_app, base_mod, field_name, False))
+            dependencies = list(new_deps)
+    
             # Generate creation operation
             self.add_operation(
                 app_label,
@@ -584,17 +600,15 @@ class MigrationAutodetector:
                 dependencies=dependencies,
                 beginning=True,
             )
-
+    
             # Don't add operations which modify the database for unmanaged models
             if not model_opts.managed:
                 continue
-
             # Generate operations for each related field
             for name, field in sorted(related_fields.items()):
-                dependencies = self._get_dependencies_for_foreign_key(field)
+                deps = self._get_dependencies_for_foreign_key(field)
                 # Depend on our own model being created
-                dependencies.append((app_label, model_name, None, True))
-                # Make operation
+                deps.append((app_label, model_name, None, True))
                 self.add_operation(
                     app_label,
                     operations.AddField(
@@ -602,9 +616,9 @@ class MigrationAutodetector:
                         name=name,
                         field=field,
                     ),
-                    dependencies=list(set(dependencies)),
+                    dependencies=list(set(deps)),
                 )
-            # Generate other opns
+            # Generate other operations
             related_dependencies = [
                 (app_label, model_name, name, True)
                 for name in sorted(related_fields)
@@ -658,7 +672,7 @@ class MigrationAutodetector:
                         (app_label, model_name, None, True),
                     ]
                 )
-
+    
             # Fix relationships if the model changed from a proxy model to a
             # concrete model.
             if (app_label, model_name) in self.old_proxy_keys:
@@ -672,6 +686,7 @@ class MigrationAutodetector:
                         ),
                         dependencies=[(app_label, model_name, None, True)],
                     )
+    
 
     def generate_created_proxies(self):
         """
diff --git a/manage.py b/manage.py
new file mode 100644
index 0000000000..6bde0a5f18
--- /dev/null
+++ b/manage.py
@@ -0,0 +1,13 @@
+#!/usr/bin/env python
+import os
+import sys
+
+def main():
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'settings_test_app')
+    import django
+    django.setup()
+    from django.core.management import execute_from_command_line
+    execute_from_command_line(sys.argv)
+
+if __name__ == '__main__':
+    main()
diff --git a/settings_test_app.py b/settings_test_app.py
new file mode 100644
index 0000000000..8a510a16d4
--- /dev/null
+++ b/settings_test_app.py
@@ -0,0 +1,13 @@
+SECRET_KEY = 'testkey'
+INSTALLED_APPS = [
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'test_app',
+]
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+USE_TZ = False
diff --git a/test_app/__init__.py b/test_app/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_app/migrations/0001_initial.py b/test_app/migrations/0001_initial.py
new file mode 100644
index 0000000000..47d2f78acb
--- /dev/null
+++ b/test_app/migrations/0001_initial.py
@@ -0,0 +1,21 @@
+# Generated by Django 3.2 on 2025-01-12 20:24
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Readable',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('title', models.CharField(max_length=200)),
+            ],
+        ),
+    ]
diff --git a/test_app/migrations/0002_auto_20250112_2024.py b/test_app/migrations/0002_auto_20250112_2024.py
new file mode 100644
index 0000000000..1a6ae0c334
--- /dev/null
+++ b/test_app/migrations/0002_auto_20250112_2024.py
@@ -0,0 +1,26 @@
+# Generated by Django 3.2 on 2025-01-12 20:24
+
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('test_app', '0001_initial'),
+    ]
+
+    operations = [
+        migrations.RemoveField(
+            model_name='readable',
+            name='title',
+        ),
+        migrations.CreateModel(
+            name='Book',
+            fields=[
+                ('readable_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='test_app.readable')),
+                ('title', models.CharField(max_length=200)),
+            ],
+            bases=('test_app.readable',),
+        ),
+    ]
diff --git a/test_app/migrations/__init__.py b/test_app/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_app/models.py b/test_app/models.py
new file mode 100644
index 0000000000..f8a55a563f
--- /dev/null
+++ b/test_app/models.py
@@ -0,0 +1,8 @@
+
+from django.db import models
+
+class Readable(models.Model):
+    pass
+
+class Book(Readable):
+    title = models.CharField(max_length=200)
diff --git a/test_move_field.py b/test_move_field.py
new file mode 100644
index 0000000000..fcaf18b580
--- /dev/null
+++ b/test_move_field.py
@@ -0,0 +1,62 @@
+import sys
+import subprocess
+import os
+import shutil
+
+def main():
+    print("Step 1) Clean up any old test artifacts.")
+    if os.path.exists("test_app"):
+        shutil.rmtree("test_app")
+
+    print("Step 2) Create a minimal 'test_app' with an initial models.py.")
+    os.mkdir("test_app")
+    os.mkdir("test_app/migrations")
+    with open("test_app/__init__.py", "w") as f:
+        f.write("")
+    with open("test_app/migrations/__init__.py", "w") as f:
+        f.write("")
+    with open("test_app/models.py", "w") as f:
+        f.write('''
+from django.db import models
+
+class Readable(models.Model):
+    title = models.CharField(max_length=200)
+''')
+
+    print("Step 3) Run makemigrations and migrate for the initial state.")
+    r = subprocess.run(["python", "manage.py", "makemigrations", "test_app"])
+    if r.returncode != 0:
+        print("ERROR: Could not makemigrations for initial state.")
+        sys.exit(1)
+    r = subprocess.run(["python", "manage.py", "migrate", "test_app"])
+    if r.returncode != 0:
+        print("ERROR: Could not migrate initial state.")
+        sys.exit(1)
+
+    print("Step 4) Modify models.py to move 'title' from base to subclass.")
+    with open("test_app/models.py", "w") as f:
+        f.write('''
+from django.db import models
+
+class Readable(models.Model):
+    pass
+
+class Book(Readable):
+    title = models.CharField(max_length=200)
+''')
+
+    print("Step 5) Run makemigrations and migrate for the new state.")
+    r = subprocess.run(["python", "manage.py", "makemigrations", "test_app"])
+    if r.returncode != 0:
+        print("ERROR: Could not makemigrations for new state.")
+        sys.exit(1)
+    r = subprocess.run(["python", "manage.py", "migrate", "test_app"])
+    if r.returncode != 0:
+        print("FAIL: Migrate for new state returned non-zero => bug is present.")
+        sys.exit(1)
+
+    print("SUCCESS: Migration succeeded => bug is fixed => returning 0.")
+    sys.exit(0)
+
+if __name__ == "__main__":
+    main()
