diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py
index 2e283a3193..622e6da76e 100644
--- a/django/db/backends/base/operations.py
+++ b/django/db/backends/base/operations.py
@@ -579,8 +579,38 @@ class BaseDatabaseOperations:
         return []
 
     def convert_durationfield_value(self, value, expression, connection):
+        """
+        Convert the database return value for DurationField into a Python timedelta.
+        Handle strings by trying parse_duration. If parse_duration fails, treat the
+        string as microseconds. If it's an int/float, treat it as microseconds directly.
+        """
         if value is not None:
-            return datetime.timedelta(0, 0, value)
+            # If it's numeric (int, float, Decimal), interpret as microseconds directly.
+            if isinstance(value, (int, float)):
+                return datetime.timedelta(microseconds=value)
+            try:
+                from decimal import Decimal
+                if isinstance(value, Decimal):
+                    return datetime.timedelta(microseconds=float(value))
+            except ImportError:
+                pass
+    
+            # If we have a string, try parse_duration first:
+            if isinstance(value, str):
+                from django.utils.dateparse import parse_duration
+                td = parse_duration(value)
+                if td is not None:
+                    return td
+                # If that fails, assume value is a string microsecond count:
+                try:
+                    micros = float(value)
+                    return datetime.timedelta(microseconds=micros)
+                except (ValueError, TypeError):
+                    raise ValueError(f"Cannot interpret {value!r} as a duration.")
+            # Fallback: if it's not recognized above, treat it as microseconds
+            return datetime.timedelta(microseconds=value)
+        return value
+    
 
     def check_expression_support(self, expression):
         """
diff --git a/tests/test_issue_duration_expr.py b/tests/test_issue_duration_expr.py
new file mode 100644
index 0000000000..bee1bf7e06
--- /dev/null
+++ b/tests/test_issue_duration_expr.py
@@ -0,0 +1,60 @@
+import sys
+import traceback
+import django
+import os
+from django.conf import settings
+from django.db import connection, models
+from django.db.models import F
+import datetime
+
+print("Starting test_issue_duration_expr script...")
+
+# Configure Django (only if not already configured).
+if not settings.configured:
+    settings.configure(
+        SECRET_KEY="test",
+        INSTALLED_APPS=[],
+        DATABASES={
+            "default": {
+                "ENGINE": os.environ.get("DB_ENGINE", "django.db.backends.sqlite3"),
+                "NAME": os.environ.get("DB_NAME", ":memory:"),
+            }
+        },
+        TIME_ZONE="UTC",
+        USE_TZ=True,
+    )
+
+django.setup()
+
+class IssueDurationModel(models.Model):
+    estimated_time = models.DurationField()
+    class Meta:
+        app_label = 'test_issue_duration_expr'
+        managed = False  # We'll manually create the table
+
+try:
+    # Create the table using the schema editor.
+    with connection.schema_editor() as editor:
+        editor.create_model(IssueDurationModel)
+
+    # Insert a test row
+    obj = IssueDurationModel.objects.create(estimated_time=datetime.timedelta(hours=2))
+    print("Inserted object with estimated_time:", obj.estimated_time)
+
+    # Try an annotation with a 1-day timedelta
+    print("Attempting annotate with +1 day on a DurationField.")
+    qs = IssueDurationModel.objects.annotate(
+        duration_plus_day=F("estimated_time") + datetime.timedelta(days=1)
+    )
+    results = list(qs)
+    print("Annotated results length:", len(results))
+    for r in results:
+        print("Annotated duration_plus_day =", r.duration_plus_day)
+
+    print("Test passed: no exceptions raised.")
+    sys.exit(0)
+
+except Exception as e:
+    print("Test failed with exception:")
+    traceback.print_exc()
+    sys.exit(1)
