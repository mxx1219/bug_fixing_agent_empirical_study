diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py
index 1a37c6b7d0..46777c577e 100644
--- a/django/db/migrations/recorder.py
+++ b/django/db/migrations/recorder.py
@@ -57,17 +57,31 @@ class MigrationRecorder:
         return self.Migration._meta.db_table in tables
 
     def ensure_schema(self):
-        """Ensure the table exists and has the correct schema."""
-        # If the table's there, that's fine - we've never changed its schema
-        # in the codebase.
+        """
+        Ensure the table exists and has the correct schema,
+        but only if the router allows migrations for this DB/app/model.
+        """
+        from django.db import router
+        # If the router disallows migrations for this app/model on this DB, do nothing.
+        if not router.allow_migrate(
+            self.connection.alias,
+            self.Migration._meta.app_label,
+            model_name=self.Migration._meta.model_name,
+        ):
+            return
+    
+        # If the table's there, that's fine - we've never changed its schema in the codebase.
         if self.has_table():
             return
+    
         # Make the table
         try:
             with self.connection.schema_editor() as editor:
                 editor.create_model(self.Migration)
         except DatabaseError as exc:
             raise MigrationSchemaMissing("Unable to create the django_migrations table (%s)" % exc)
+    
+    
 
     def applied_migrations(self):
         """
diff --git a/test_migration_router.py b/test_migration_router.py
new file mode 100644
index 0000000000..17d424facf
--- /dev/null
+++ b/test_migration_router.py
@@ -0,0 +1,101 @@
+#!/usr/bin/env python3
+import sys
+import os
+import subprocess
+import tempfile
+import sqlite3
+
+"""
+This script reproduces the issue where MigrationRecorder creates
+the django_migrations table in a DB that disallows migrations.
+
+Steps:
+1. Create a temporary Django project with two databases:
+   - default (migrations allowed)
+   - otherdb (disallowed via router)
+2. Run "python manage.py migrate --database=otherdb".
+   On HEAD (unfixed), that will create django_migrations in otherdb anyway;
+   after the fix that checks the router in ensure_schema(), it won't.
+3. Check if 'django_migrations' is created in the otherdb DB file.
+   - If yes => FAIL
+   - If no => SUCCESS
+"""
+
+def main():
+    print("Setting up test to ensure 'django_migrations' is not created in 'otherdb' when migrations are disallowed via router.")
+
+    with tempfile.TemporaryDirectory() as tmpdir:
+        print("Created temp directory:", tmpdir)
+        os.chdir(tmpdir)
+
+        # Minimal settings with two DBs; router disallows otherdb
+        settings_content = r'''
+SECRET_KEY = "test"
+INSTALLED_APPS = [
+    "django.contrib.contenttypes",
+]
+MIDDLEWARE = []
+ROOT_URLCONF = ""
+
+DATABASES = {
+    "default": {
+        "ENGINE": "django.db.backends.sqlite3",
+        "NAME": "default_db.sqlite3",
+    },
+    "otherdb": {
+        "ENGINE": "django.db.backends.sqlite3",
+        "NAME": "other_db.sqlite3",
+    }
+}
+
+class Router:
+    def allow_migrate(self, db, app_label, model_name=None, **hints):
+        return (db == "default")
+
+DATABASE_ROUTERS = ["settings.Router"]
+'''
+        with open("settings.py", "w") as f:
+            f.write(settings_content)
+
+        manage_content = r'''
+#!/usr/bin/env python3
+import os
+import sys
+
+if __name__ == "__main__":
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "settings")
+    from django.core.management import execute_from_command_line
+    execute_from_command_line(sys.argv)
+'''
+        with open("manage.py", "w") as f:
+            f.write(manage_content)
+        os.chmod("manage.py", 0o755)
+
+        # Run "python manage.py migrate --database=otherdb"
+        print("Running 'python manage.py migrate --database=otherdb' ...")
+        result = subprocess.run(["python", "manage.py", "migrate", "--database=otherdb"], capture_output=True)
+        print("Exit code:", result.returncode)
+        print("stdout:\n", result.stdout.decode())
+        print("stderr:\n", result.stderr.decode())
+
+        # Check if 'django_migrations' table is created
+        db_name = "other_db.sqlite3"
+        if not os.path.exists(db_name):
+            print("No DB file for 'otherdb' was created at all. Possibly the scenario didn't replicate.")
+            sys.exit(2)
+
+        conn = sqlite3.connect(db_name)
+        cursor = conn.cursor()
+        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='django_migrations';")
+        table_exists = (cursor.fetchone() is not None)
+        conn.close()
+
+        if table_exists:
+            print("FAIL: 'django_migrations' table found in 'otherdb' but router disallows it!")
+            sys.exit(1)
+        else:
+            print("SUCCESS: 'django_migrations' table was NOT created in 'otherdb'.")
+            sys.exit(0)
+
+if __name__ == "__main__":
+    main()
