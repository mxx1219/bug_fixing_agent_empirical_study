diff --git a/django/contrib/admin/templatetags/admin_modify.py b/django/contrib/admin/templatetags/admin_modify.py
index 9df4b7aadb..24683aacce 100644
--- a/django/contrib/admin/templatetags/admin_modify.py
+++ b/django/contrib/admin/templatetags/admin_modify.py
@@ -89,6 +89,7 @@ def submit_row(context):
         not is_popup and can_save and has_view_permission and show_save_and_continue
     )
     can_change = has_change_permission or has_editable_inline_admin_formsets
+    from django.template import Context
     ctx = Context(context)
     ctx.update(
         {
@@ -99,10 +100,13 @@ def submit_row(context):
                 and change
                 and context.get("show_delete", True)
             ),
-            "show_save_as_new": not is_popup
-            and has_change_permission
-            and change
-            and save_as,
+            "show_save_as_new": (
+                not is_popup
+                and has_add_permission
+                and has_change_permission
+                and change
+                and save_as
+            ),
             "show_save_and_add_another": can_save_and_add_another,
             "show_save_and_continue": can_save_and_continue,
             "show_save": show_save and can_save,
@@ -112,6 +116,7 @@ def submit_row(context):
     return ctx
 
 
+
 @register.tag(name="submit_row")
 def submit_row_tag(parser, token):
     return InclusionAdminNode(
diff --git a/scripts/__init__.py b/scripts/__init__.py
new file mode 100644
index 0000000000..8b13789179
--- /dev/null
+++ b/scripts/__init__.py
@@ -0,0 +1 @@
+
diff --git a/scripts/test_save_as_new_permission.py b/scripts/test_save_as_new_permission.py
new file mode 100644
index 0000000000..c074a7cc67
--- /dev/null
+++ b/scripts/test_save_as_new_permission.py
@@ -0,0 +1,91 @@
+import sys
+import os
+
+CURRENT_DIR = os.path.dirname(os.path.abspath(__file__))
+PARENT_DIR = os.path.dirname(CURRENT_DIR)
+if PARENT_DIR not in sys.path:
+    sys.path.insert(0, PARENT_DIR)
+
+def main():
+    print("=== test_save_as_new_permission.py ===")
+    print("Step 1: Setting up Django settings...")
+
+    from django.conf import settings
+    if not settings.configured:
+        settings.configure(
+            SECRET_KEY="dummy",
+            DEBUG=True,
+            ALLOWED_HOSTS=["*"],
+            MIDDLEWARE=[
+                "django.contrib.sessions.middleware.SessionMiddleware",
+                "django.contrib.auth.middleware.AuthenticationMiddleware",
+            ],
+            INSTALLED_APPS=[
+                "django.contrib.auth",
+                "django.contrib.contenttypes",
+                "django.contrib.admin",
+                "django.contrib.sessions",
+                "django.contrib.messages",
+                "test_save_as_new_permission_app",
+            ],
+            DATABASES={"default": {"ENGINE": "django.db.backends.sqlite3", "NAME": ":memory:"}},
+            TEMPLATES=[{
+                "BACKEND": "django.template.backends.django.DjangoTemplates",
+                "DIRS": [],
+                "APP_DIRS": True,
+                "OPTIONS": {
+                    "context_processors": [
+                        "django.contrib.auth.context_processors.auth",
+                        "django.template.context_processors.debug",
+                        "django.template.context_processors.request",
+                        "django.contrib.messages.context_processors.messages",
+                    ],
+                },
+            }],
+            ROOT_URLCONF="scripts.test_save_as_new_permission_urls",
+        )
+
+    print("Step 2: Initializing Django...")
+    import django
+    django.setup()
+
+    print("Step 3: Running migrations and importing model...")
+    from django.core.management import call_command
+    from django.contrib.auth.models import User, Permission
+    from django.test import Client
+    from test_save_as_new_permission_app.models import Book
+
+    call_command("migrate", run_syncdb=True, verbosity=0)
+
+    print("Step 4: Creating a user with only change permission (staff, not add)...")
+    user = User.objects.create_user(username="changeuser", password="testpass")
+    user.is_staff = True
+    user.save()
+
+    add_book_perm = Permission.objects.get(codename="add_book")
+    change_book_perm = Permission.objects.get(codename="change_book")
+
+    # Give user only the change permission, NOT the add permission:
+    user.user_permissions.add(change_book_perm)
+
+    print("Step 5: Creating a Book object...")
+    book = Book.objects.create(title="MyTitle1")
+
+    print("Step 6: Logging in as 'changeuser' and requesting change form for the Book...")
+    client = Client()
+    assert client.login(username="changeuser", password="testpass"), "Could not log in!"
+
+    url = "/admin/test_save_as_new_permission_app/book/{}/change/".format(book.id)
+    response = client.get(url)
+    html = response.content.decode("utf-8")
+
+    print("Step 7: Checking if 'Save as new' button is visible...")
+    if "Save as new" in html:
+        print("BUG DETECTED: 'Save as new' button is visible to a user who lacks add_permission")
+        sys.exit(1)
+    else:
+        print("No bug: 'Save as new' button is NOT visible to a user who lacks add_permission.")
+        sys.exit(0)
+
+if __name__ == "__main__":
+    main()
diff --git a/scripts/test_save_as_new_permission_app/__init__.py b/scripts/test_save_as_new_permission_app/__init__.py
new file mode 100644
index 0000000000..88c3ea4fe0
--- /dev/null
+++ b/scripts/test_save_as_new_permission_app/__init__.py
@@ -0,0 +1 @@
+default_app_config = "test_save_as_new_permission_app.apps.TestSaveAsNewPermissionAppConfig"
diff --git a/scripts/test_save_as_new_permission_app/admin.py b/scripts/test_save_as_new_permission_app/admin.py
new file mode 100644
index 0000000000..06f2278686
--- /dev/null
+++ b/scripts/test_save_as_new_permission_app/admin.py
@@ -0,0 +1,7 @@
+from django.contrib import admin
+from .models import Book
+
+@admin.register(Book)
+class BookAdmin(admin.ModelAdmin):
+    save_as = True
+    list_display = ("title",)
diff --git a/scripts/test_save_as_new_permission_app/apps.py b/scripts/test_save_as_new_permission_app/apps.py
new file mode 100644
index 0000000000..149fe2cb06
--- /dev/null
+++ b/scripts/test_save_as_new_permission_app/apps.py
@@ -0,0 +1,4 @@
+from django.apps import AppConfig
+
+class TestSaveAsNewPermissionAppConfig(AppConfig):
+    name = "test_save_as_new_permission_app"
diff --git a/scripts/test_save_as_new_permission_app/models.py b/scripts/test_save_as_new_permission_app/models.py
new file mode 100644
index 0000000000..5f57bf61d5
--- /dev/null
+++ b/scripts/test_save_as_new_permission_app/models.py
@@ -0,0 +1,7 @@
+from django.db import models
+
+class Book(models.Model):
+    title = models.CharField(max_length=100)
+
+    class Meta:
+        app_label = "test_save_as_new_permission_app"
diff --git a/scripts/test_save_as_new_permission_urls.py b/scripts/test_save_as_new_permission_urls.py
new file mode 100644
index 0000000000..083932c6e2
--- /dev/null
+++ b/scripts/test_save_as_new_permission_urls.py
@@ -0,0 +1,6 @@
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path("admin/", admin.site.urls),
+]
