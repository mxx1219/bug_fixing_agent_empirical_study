diff --git a/django/db/migrations/loader.py b/django/db/migrations/loader.py
index 95a5062ec9..ba7c6d2d3b 100644
--- a/django/db/migrations/loader.py
+++ b/django/db/migrations/loader.py
@@ -66,7 +66,9 @@ class MigrationLoader:
             return '%s.%s' % (app_package_name, MIGRATIONS_MODULE_NAME), False
 
     def load_disk(self):
-        """Load the migrations from all INSTALLED_APPS from disk."""
+        """
+        Load the migrations from all INSTALLED_APPS from disk.
+        """
         self.disk_migrations = {}
         self.unmigrated_apps = set()
         self.migrated_apps = set()
@@ -91,14 +93,18 @@ class MigrationLoader:
                 # Empty directories are namespaces.
                 # getattr() needed on PY36 and older (replace w/attribute access).
                 if getattr(module, '__file__', None) is None:
-                    self.unmigrated_apps.add(app_config.label)
-                    continue
+                    # Possibly a namespace or a package in a special environment
+                    # Exclude it only if it's truly a namespace (non-list __path__).
+                    if not (hasattr(module, '__path__') and isinstance(module.__path__, list)):
+                        self.unmigrated_apps.add(app_config.label)
+                        continue
                 # Module is not a package (e.g. migrations.py).
                 if not hasattr(module, '__path__'):
                     self.unmigrated_apps.add(app_config.label)
                     continue
-                # Force a reload if it's already loaded (tests need this)
-                if was_loaded:
+                # Force a reload if it's already loaded (tests need this),
+                # but only if the module really has a __file__.
+                if was_loaded and getattr(module, '__file__', None) is not None:
                     reload(module)
             self.migrated_apps.add(app_config.label)
             migration_names = {
@@ -126,6 +132,8 @@ class MigrationLoader:
                     migration_name,
                     app_config.label,
                 )
+    
+    
 
     def get_migration(self, app_label, name_prefix):
         """Return the named migration or raise NodeNotFoundError."""
diff --git a/test_frozen_package.py b/test_frozen_package.py
new file mode 100644
index 0000000000..08c5489c64
--- /dev/null
+++ b/test_frozen_package.py
@@ -0,0 +1,70 @@
+import sys
+import types
+import django
+from django.conf import settings
+from django.apps import AppConfig
+
+def main():
+    print("Step 1: Create a 'fake_app' module in sys.modules with no __file__, but an AppConfig that overrides _path_from_module().")
+    fake_app_module = types.ModuleType('fake_app', 'fake app module')
+    # Remove __file__ if any, so it truly has no filesystem path.
+    if hasattr(fake_app_module, '__file__'):
+        del fake_app_module.__file__
+    # Provide a __path__ so Django sees it as a package.
+    fake_app_module.__path__ = []
+
+    # Define a custom AppConfig class that fakes a path.
+    class FakeAppConfig(AppConfig):
+        name = 'fake_app'
+        label = 'fake_app'
+        def _path_from_module(self, module):
+            # Bypass the usual check that would raise ImproperlyConfigured
+            return '/tmp/fake_app'
+
+    # Add the class to our module, and set default_app_config so Django uses it.
+    fake_app_module.FakeAppConfig = FakeAppConfig
+    fake_app_module.default_app_config = 'fake_app.FakeAppConfig'
+
+    # Finally, place our new module into sys.modules.
+    sys.modules['fake_app'] = fake_app_module
+
+    print("Step 2: Configure a minimal Django environment with INSTALLED_APPS=['fake_app'].")
+    settings.configure(
+        INSTALLED_APPS=['fake_app'],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        SECRET_KEY='foo',
+        MIGRATION_MODULES={
+            'fake_app': 'fake_app.migrations'
+        }
+    )
+
+    print("Step 3: Call django.setup().")
+    django.setup()
+
+    print("Step 4: Create 'fake_app.migrations' module, also with no __file__, but a normal list-based __path__.")
+    fake_migrations_module = types.ModuleType('fake_app.migrations', 'fake migrations module')
+    if hasattr(fake_migrations_module, '__file__'):
+        del fake_migrations_module.__file__
+    fake_migrations_module.__path__ = []
+    sys.modules['fake_app.migrations'] = fake_migrations_module
+
+    print("Step 5: Use MigrationLoader to load migrations from disk.")
+    from django.db.migrations.loader import MigrationLoader
+    loader = MigrationLoader(None, ignore_no_migrations=True)
+    loader.load_disk()
+
+    print("Step 6: Check if 'fake_app' was incorrectly recognized as unmigrated.")
+    if 'fake_app' in loader.unmigrated_apps:
+        print("Problem is NOT fixed. 'fake_app' was incorrectly recognized as unmigrated.")
+        sys.exit(1)
+    else:
+        print("Problem is FIXED. 'fake_app' was recognized as migrated.")
+        sys.exit(0)
+
+if __name__ == '__main__':
+    main()
