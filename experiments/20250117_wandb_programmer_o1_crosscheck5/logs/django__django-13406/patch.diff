diff --git a/django/db/models/query.py b/django/db/models/query.py
index b48d0df9c0..587527eef4 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -207,10 +207,23 @@ class QuerySet:
             self._filter_or_exclude_inplace(negate, args, kwargs)
             self._deferred_filter = None
         return self._query
-
+    
     @query.setter
     def query(self, value):
         self._query = value
+        # If the query had an _iterable_class_name, restore it:
+        iterable_class_name = getattr(value, '_iterable_class_name', None)
+        if iterable_class_name == 'ValuesIterable':
+            self._iterable_class = ValuesIterable
+        elif iterable_class_name == 'ValuesListIterable':
+            self._iterable_class = ValuesListIterable
+        elif iterable_class_name == 'NamedValuesListIterable':
+            self._iterable_class = NamedValuesListIterable
+        elif iterable_class_name == 'FlatValuesListIterable':
+            self._iterable_class = FlatValuesListIterable
+        # If there's no name, we leave the default (ModelIterable).
+    
+
 
     def as_manager(cls):
         # Address the circular dependency between `Queryset` and `Manager`.
@@ -829,14 +842,17 @@ class QuerySet:
         fields += tuple(expressions)
         clone = self._values(*fields, **expressions)
         clone._iterable_class = ValuesIterable
+        # Store the iterable class name in the Query so it persists across pickling.
+        clone.query._iterable_class_name = 'ValuesIterable'
         return clone
+      
 
     def values_list(self, *fields, flat=False, named=False):
         if flat and named:
             raise TypeError("'flat' and 'named' can't be used together.")
         if flat and len(fields) > 1:
             raise TypeError("'flat' is not valid when values_list is called with more than one field.")
-
+    
         field_names = {f for f in fields if not hasattr(f, 'resolve_expression')}
         _fields = []
         expressions = {}
@@ -853,14 +869,19 @@ class QuerySet:
                 _fields.append(field_id)
             else:
                 _fields.append(field)
-
+    
         clone = self._values(*_fields, **expressions)
-        clone._iterable_class = (
-            NamedValuesListIterable if named
-            else FlatValuesListIterable if flat
-            else ValuesListIterable
-        )
+        if named:
+            clone._iterable_class = NamedValuesListIterable
+            clone.query._iterable_class_name = 'NamedValuesListIterable'
+        elif flat:
+            clone._iterable_class = FlatValuesListIterable
+            clone.query._iterable_class_name = 'FlatValuesListIterable'
+        else:
+            clone._iterable_class = ValuesListIterable
+            clone.query._iterable_class_name = 'ValuesListIterable'
         return clone
+      
 
     def dates(self, field_name, kind, order='ASC'):
         """
diff --git a/tests/pickle_values_recreation_test.py b/tests/pickle_values_recreation_test.py
new file mode 100644
index 0000000000..230b92da7c
--- /dev/null
+++ b/tests/pickle_values_recreation_test.py
@@ -0,0 +1,83 @@
+#!/usr/bin/env python
+import sys
+import os
+import pickle
+import django
+from django.conf import settings
+from django.db import connection
+from django.db.models import Sum
+
+def configure_django():
+    if not settings.configured:
+        settings.configure(
+            DEBUG=True,
+            SECRET_KEY='testsecret',
+            INSTALLED_APPS=[
+                'django.contrib.contenttypes',
+                'tests.testapp',  # <--- Our test app
+            ],
+            DATABASES={
+                'default': {
+                    'ENGINE': 'django.db.backends.sqlite3',
+                    'NAME': ':memory:',
+                }
+            },
+            MIDDLEWARE=[],
+        )
+    django.setup()
+
+def main():
+    print("Starting pickle-values recreation test with minimal settings & real test app.")
+    configure_django()
+
+    # Import the Toy model from our new test app
+    from tests.testapp.models import Toy
+
+    # Create the table for Toy in our in-memory DB
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(Toy)
+
+    # Populate sample data
+    Toy.objects.create(name='foo', price=10, material='wood')
+    Toy.objects.create(name='bar', price=20, material='plastic')
+    Toy.objects.create(name='baz', price=100, material='wood')
+
+    # .values() + annotate() => dict results
+    prices = Toy.objects.values('material').annotate(total_price=Sum('price'))
+    prices_list = list(prices)
+    print("prices =>", prices_list)
+    print("type(prices[0]) =>", type(prices_list[0]))
+
+    if not isinstance(prices_list[0], dict):
+        print("ERROR: Original .values() query did not return dict.")
+        sys.exit(1)
+
+    # Pickle/unpickle only the Query
+    try:
+        pickled_query = pickle.dumps(prices.query)
+        unpickled_query = pickle.loads(pickled_query)
+    except Exception as e:
+        print("EXCEPTION during pickling/unpickling:", e)
+        sys.exit(1)
+
+    # Attach unpickled query to fresh QuerySet
+    prices2 = Toy.objects.all()
+    prices2.query = unpickled_query
+
+    print("Now evaluating prices2[0] ...")
+    try:
+        result = prices2[0]
+        print("type(prices2[0]) =>", type(result))
+        if not isinstance(result, dict):
+            print("ERROR: Re-created query returned non-dict. Got:", type(result))
+            sys.exit(1)
+        print("Success: Re-created query returned a dict =>", result)
+    except Exception as e:
+        print("EXCEPTION: The query crashed:", e)
+        sys.exit(1)
+
+    print("Test passed without crashing.")
+    sys.exit(0)
+
+if __name__ == '__main__':
+    main()
diff --git a/tests/testapp/__init__.py b/tests/testapp/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/testapp/apps.py b/tests/testapp/apps.py
new file mode 100644
index 0000000000..0492bdc308
--- /dev/null
+++ b/tests/testapp/apps.py
@@ -0,0 +1,4 @@
+from django.apps import AppConfig
+
+class TestappConfig(AppConfig):
+    name = 'tests.testapp'
diff --git a/tests/testapp/models.py b/tests/testapp/models.py
new file mode 100644
index 0000000000..8af4ce85ad
--- /dev/null
+++ b/tests/testapp/models.py
@@ -0,0 +1,6 @@
+from django.db import models
+
+class Toy(models.Model):
+    name = models.CharField(max_length=16)
+    material = models.CharField(max_length=16)
+    price = models.PositiveIntegerField()
