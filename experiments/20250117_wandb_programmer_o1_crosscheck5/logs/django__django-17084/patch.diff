diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py
index a778cd413b..ae7c928282 100644
--- a/django/db/models/aggregates.py
+++ b/django/db/models/aggregates.py
@@ -61,20 +61,25 @@ class Aggregate(Func):
         self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False
     ):
         # Aggregates are not allowed in UPDATE queries, so ignore for_save
-        c = super().resolve_expression(query, allow_joins, reuse, summarize)
+        c = super(Aggregate, self).resolve_expression(query, allow_joins, reuse, summarize)
         c.filter = c.filter and c.filter.resolve_expression(
             query, allow_joins, reuse, summarize
         )
         if summarize:
-            # Summarized aggregates cannot refer to summarized aggregates.
+            # Summarized aggregates cannot refer to summarized aggregates or window expressions.
             for ref in c.get_refs():
-                if query.annotations[ref].is_summary:
+                annotation_expr = query.annotations.get(ref)
+                if annotation_expr and annotation_expr.is_summary:
                     raise FieldError(
                         f"Cannot compute {c.name}('{ref}'): '{ref}' is an aggregate"
                     )
+                if annotation_expr and annotation_expr.contains_over_clause:
+                    raise FieldError(
+                        f"Cannot compute {c.name}('{ref}'): '{ref}' is a window expression"
+                    )
         elif not self.is_summary:
-            # Call Aggregate.get_source_expressions() to avoid
-            # returning self.filter and including that in this loop.
+            # Call Aggregate.get_source_expressions() to avoid returning
+            # self.filter and including that in this loop.
             expressions = super(Aggregate, c).get_source_expressions()
             for index, expr in enumerate(expressions):
                 if expr.contains_aggregate:
@@ -88,6 +93,17 @@ class Aggregate(Func):
                         "Cannot compute %s('%s'): '%s' is an aggregate"
                         % (c.name, name, name)
                     )
+                if expr.contains_over_clause:
+                    before_resolved = self.get_source_expressions()[index]
+                    name = (
+                        before_resolved.name
+                        if hasattr(before_resolved, "name")
+                        else repr(before_resolved)
+                    )
+                    raise FieldError(
+                        "Cannot compute %s('%s'): '%s' is a window expression"
+                        % (c.name, name, name)
+                    )
         if (default := c.default) is None:
             return c
         if hasattr(default, "resolve_expression"):
@@ -100,6 +116,8 @@ class Aggregate(Func):
         coalesce = Coalesce(c, default, output_field=c._output_field_or_none)
         coalesce.is_summary = c.is_summary
         return coalesce
+    
+    
 
     @property
     def default_alias(self):
diff --git a/tests/test_issue_window_agg.py b/tests/test_issue_window_agg.py
new file mode 100644
index 0000000000..9690ab56eb
--- /dev/null
+++ b/tests/test_issue_window_agg.py
@@ -0,0 +1,81 @@
+import sys
+import traceback
+
+def main():
+    print("Step 1: Configuring Django settings in-memory for test...")
+    import django
+    from django.conf import settings
+    from django.db import connection
+    from django.core.exceptions import FieldError
+
+    # Minimal Django settings for an in-memory DB test.
+    settings.configure(
+        INSTALLED_APPS=[],
+        DATABASES={
+            "default": {
+                "ENGINE": "django.db.backends.sqlite3",
+                "NAME": ":memory:",
+            }
+        },
+        TIME_ZONE="UTC",
+        SECRET_KEY="test",
+    )
+    django.setup()
+
+    print("Step 2: Defining a test model...")
+    from django.db import models
+    from django.db.models import Sum, F, Window
+    from django.db.models.functions import Coalesce
+
+    class MyModel(models.Model):
+        djr = models.IntegerField()
+        date = models.DateField()
+
+        class Meta:
+            app_label = 'test_issue_window_agg'
+
+    print("Step 3: Creating the table with schema_editor()...")
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(MyModel)
+
+    print("Step 4: Creating test data...")
+    MyModel.objects.create(djr=5, date="2023-01-01")
+    MyModel.objects.create(djr=2, date="2023-01-02")
+    MyModel.objects.create(djr=3, date="2023-01-03")
+
+    print("Step 5: Attempting aggregator over window expression...")
+    try:
+        qs = MyModel.objects.annotate(
+            cumul=Coalesce(
+                Window(
+                    Sum('djr'),
+                    order_by=F('date').asc()
+                ),
+                0.0,
+            )
+        )
+        agg_result = qs.aggregate(
+            total_djr=Sum('djr'),
+            cumul_djr_total=Sum('cumul'),
+        )
+        # If no exception, that means aggregator-over-window was accepted, which
+        # previously triggered a cryptic DB error. Now we either truly support it or
+        # haven't caught it. Let's see which is correct:
+        print("Unexpectedly succeeded. This might mean aggregator-over-window is fully supported.")
+        sys.exit(1)
+    except FieldError as e:
+        # We want to see "is a window expression" in the message.
+        if "is a window expression" in str(e):
+            print("Got the expected FieldError about window expression!")
+            sys.exit(0)
+        else:
+            print("Got a FieldError, but not the expected one:")
+            print(e)
+            sys.exit(1)
+    except Exception as e:
+        print("Got some other exception, which is not the user-friendly FieldError:")
+        traceback.print_exc()
+        sys.exit(1)
+
+if __name__ == "__main__":
+    main()
