diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py
index acee9887d2..bdeec80610 100644
--- a/django/conf/global_settings.py
+++ b/django/conf/global_settings.py
@@ -304,7 +304,7 @@ FILE_UPLOAD_TEMP_DIR = None
 
 # The numeric mode to set newly-uploaded files to. The value should be a mode
 # you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.
-FILE_UPLOAD_PERMISSIONS = None
+FILE_UPLOAD_PERMISSIONS = 0o644
 
 # The numeric mode to assign to newly-created directories, when uploading files.
 # The value should be a mode as you'd pass to os.chmod;
diff --git a/test_default_upload_perm.py b/test_default_upload_perm.py
new file mode 100644
index 0000000000..9f40f1f6cb
--- /dev/null
+++ b/test_default_upload_perm.py
@@ -0,0 +1,58 @@
+#!/usr/bin/env python3
+import sys
+import os
+import shutil
+import tempfile
+import django
+from django.conf import settings
+from django.core.files.uploadedfile import TemporaryUploadedFile
+from django.core.files.storage import default_storage
+
+def main():
+    print("Test script for default file upload permissions.")
+
+    if not settings.configured:
+        tmp_dir = tempfile.mkdtemp(prefix="test_upload_perm_")
+        print(f"Configuring Django with MEDIA_ROOT={tmp_dir}")
+        settings.configure(
+            DEFAULT_FILE_STORAGE="django.core.files.storage.FileSystemStorage",
+            MEDIA_ROOT=tmp_dir,
+            FILE_UPLOAD_HANDLERS=[
+                'django.core.files.uploadhandler.MemoryFileUploadHandler',
+                'django.core.files.uploadhandler.TemporaryFileUploadHandler'
+            ],
+            INSTALLED_APPS=[],
+            SECRET_KEY='testsecret',
+            DEBUG=True,
+        )
+
+    django.setup()
+
+    # Create 4MB of data (to ensure it surpasses the default memory upload limit).
+    chunk_size = 4 * 1024 * 1024
+    chunk = b'a' * chunk_size
+
+    # Write it to a TemporaryUploadedFile so that Djangoâ€™s FileSystemStorage renames it.
+    tmp_file = TemporaryUploadedFile("test_big.txt", "text/plain", chunk_size, "utf-8")
+    tmp_file.write(chunk)
+    tmp_file.seek(0)
+
+    print("Saving with default_storage...")
+    saved_name = default_storage.save("test_big.txt", tmp_file)
+
+    file_path = default_storage.path(saved_name)
+    print(f"File saved at {file_path}")
+
+    st_mode = os.stat(file_path).st_mode
+    perms = oct(st_mode & 0o777)
+    print(f"File permissions: {perms}")
+
+    expected = "0o644"
+    if perms != expected:
+        print(f"FAIL - got {perms}, expected {expected}")
+        sys.exit(1)
+    print("PASS - file has perms 0o644")
+    sys.exit(0)
+
+if __name__ == "__main__":
+    main()
diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py
index a1a113a26e..72da2c7fdd 100644
--- a/tests/test_utils/tests.py
+++ b/tests/test_utils/tests.py
@@ -1096,12 +1096,14 @@ class OverrideSettingsTests(SimpleTestCase):
     def test_override_file_upload_permissions(self):
         """
         Overriding the FILE_UPLOAD_PERMISSIONS setting should be reflected in
-        the file_permissions_mode attribute of
-        django.core.files.storage.default_storage.
+        the file_permissions_mode attribute of django.core.files.storage.default_storage.
+        Now that the global default is 0o644, we assert that is the default.
         """
-        self.assertIsNone(default_storage.file_permissions_mode)
+        # Expecting the new default is 0o644 (octal = 420 decimal).
+        self.assertEqual(default_storage.file_permissions_mode, 0o644)
         with self.settings(FILE_UPLOAD_PERMISSIONS=0o777):
             self.assertEqual(default_storage.file_permissions_mode, 0o777)
+    
 
     def test_override_file_upload_directory_permissions(self):
         """
