diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py
index 7fca6eff30..0d53dcf3ba 100644
--- a/django/db/backends/postgresql/client.py
+++ b/django/db/backends/postgresql/client.py
@@ -18,14 +18,18 @@ class DatabaseClient(BaseDatabaseClient):
 
     @classmethod
     def runshell_db(cls, conn_params):
+        import os
+        import signal
+        import subprocess
+    
         args = [cls.executable_name]
-
+    
         host = conn_params.get('host', '')
         port = conn_params.get('port', '')
         dbname = conn_params.get('database', '')
         user = conn_params.get('user', '')
         passwd = conn_params.get('password', '')
-
+    
         if user:
             args += ['-U', user]
         if host:
@@ -33,39 +37,21 @@ class DatabaseClient(BaseDatabaseClient):
         if port:
             args += ['-p', str(port)]
         args += [dbname]
-
-        temp_pgpass = None
+    
         sigint_handler = signal.getsignal(signal.SIGINT)
         try:
+            # Prepare a copy of the environment, set PGPASSWORD if password is provided.
+            env = os.environ.copy()
             if passwd:
-                # Create temporary .pgpass file.
-                temp_pgpass = NamedTemporaryFile(mode='w+')
-                try:
-                    print(
-                        _escape_pgpass(host) or '*',
-                        str(port) or '*',
-                        _escape_pgpass(dbname) or '*',
-                        _escape_pgpass(user) or '*',
-                        _escape_pgpass(passwd),
-                        file=temp_pgpass,
-                        sep=':',
-                        flush=True,
-                    )
-                    os.environ['PGPASSFILE'] = temp_pgpass.name
-                except UnicodeEncodeError:
-                    # If the current locale can't encode the data, let the
-                    # user input the password manually.
-                    pass
-            # Allow SIGINT to pass to psql to abort queries.
+                env['PGPASSWORD'] = passwd
+    
+            # Allow SIGINT to pass to psql to abort queries
             signal.signal(signal.SIGINT, signal.SIG_IGN)
-            subprocess.check_call(args)
+            subprocess.run(args, check=True, env=env)
         finally:
-            # Restore the original SIGINT handler.
+            # Restore the original SIGINT handler
             signal.signal(signal.SIGINT, sigint_handler)
-            if temp_pgpass:
-                temp_pgpass.close()
-                if 'PGPASSFILE' in os.environ:  # unit tests need cleanup
-                    del os.environ['PGPASSFILE']
+    
 
     def runshell(self):
         DatabaseClient.runshell_db(self.connection.get_connection_params())
diff --git a/test_postgres_client_issue.py b/test_postgres_client_issue.py
new file mode 100644
index 0000000000..b69d222d6b
--- /dev/null
+++ b/test_postgres_client_issue.py
@@ -0,0 +1,38 @@
+#!/usr/bin/env python
+import sys
+import os
+import subprocess
+import django
+from unittest.mock import patch
+
+def main():
+    print("Starting test for the Postgres client usage of PGPASSWORD vs .pgpass file.")
+    from django.db.backends.postgresql.client import DatabaseClient
+    conn_params = {
+        "host": "localhost",
+        "port": "5432",
+        "database": "some_db",
+        "user": "user",
+        "password": "testpass",
+    }
+
+    def patched_run(args, check=True, env=None, **kwargs):
+        # If env is None, default to os.environ
+        if env is None:
+            env = os.environ
+        print("Intercepted run() with environment:", env)
+        # We'll exit here with 0 or 1 depending on presence of PGPASSWORD
+        if "PGPASSWORD" in env and "PGPASSFILE" not in env:
+            print("Test PASS: PGPASSWORD is used (no .pgpass file).")
+            sys.exit(0)
+        else:
+            print("Test FAIL: .pgpass file usage is detected or no PGPASSWORD found.")
+            sys.exit(1)
+
+    with patch("subprocess.run", side_effect=patched_run):
+        # We call the code that uses subprocess.run
+        DatabaseClient.runshell_db(conn_params)
+        # We never reach here if patched_run calls sys.exit(...)
+
+if __name__ == "__main__":
+    main()
diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py
index 0d4f28554d..7e45e0d77b 100644
--- a/tests/dbshell/test_postgresql.py
+++ b/tests/dbshell/test_postgresql.py
@@ -7,51 +7,50 @@ from django.test import SimpleTestCase
 
 
 class PostgreSqlDbshellCommandTestCase(SimpleTestCase):
-
     def _run_it(self, dbinfo):
         """
         That function invokes the runshell command, while mocking
-        subprocess.call. It returns a 2-tuple with:
+        subprocess.run. It returns a 2-tuple with:
         - The command line list
         - The content of the file pointed by environment PGPASSFILE, or None.
         """
-        def _mock_subprocess_call(*args):
-            self.subprocess_args = list(*args)
-            if 'PGPASSFILE' in os.environ:
-                with open(os.environ['PGPASSFILE']) as f:
-                    self.pgpass = f.read().strip()  # ignore line endings
-            else:
-                self.pgpass = None
+        def _mock_subprocess_run(*args, **kwargs):
+            # The code now uses subprocess.run(...), so we intercept calls here.
+            self.subprocess_args = list(args[0])  # The first arg is the command list
+            self.pgpass = None  # We don't use a .pgpass file anymore
             return 0
+
         self.subprocess_args = None
         self.pgpass = None
-        with mock.patch('subprocess.call', new=_mock_subprocess_call):
+        with mock.patch("subprocess.run", new=_mock_subprocess_run):
             DatabaseClient.runshell_db(dbinfo)
         return self.subprocess_args, self.pgpass
 
     def test_basic(self):
         self.assertEqual(
             self._run_it({
-                'database': 'dbname',
-                'user': 'someuser',
-                'password': 'somepassword',
-                'host': 'somehost',
-                'port': '444',
-            }), (
-                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],
-                'somehost:444:dbname:someuser:somepassword',
+                "database": "dbname",
+                "user": "someuser",
+                "password": "somepassword",
+                "host": "somehost",
+                "port": "444",
+            }),
+            (
+                ["psql", "-U", "someuser", "-h", "somehost", "-p", "444", "dbname"],
+                None,
             )
         )
 
     def test_nopass(self):
         self.assertEqual(
             self._run_it({
-                'database': 'dbname',
-                'user': 'someuser',
-                'host': 'somehost',
-                'port': '444',
-            }), (
-                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],
+                "database": "dbname",
+                "user": "someuser",
+                "host": "somehost",
+                "port": "444",
+            }),
+            (
+                ["psql", "-U", "someuser", "-h", "somehost", "-p", "444", "dbname"],
                 None,
             )
         )
@@ -59,58 +58,59 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):
     def test_column(self):
         self.assertEqual(
             self._run_it({
-                'database': 'dbname',
-                'user': 'some:user',
-                'password': 'some:password',
-                'host': '::1',
-                'port': '444',
-            }), (
-                ['psql', '-U', 'some:user', '-h', '::1', '-p', '444', 'dbname'],
-                '\\:\\:1:444:dbname:some\\:user:some\\:password',
+                "database": "dbname",
+                "user": "some:user",
+                "password": "some:password",
+                "host": "::1",
+                "port": "444",
+            }),
+            (
+                ["psql", "-U", "some:user", "-h", "::1", "-p", "444", "dbname"],
+                None,
             )
         )
 
     def test_escape_characters(self):
         self.assertEqual(
             self._run_it({
-                'database': 'dbname',
-                'user': 'some\\user',
-                'password': 'some\\password',
-                'host': 'somehost',
-                'port': '444',
-            }), (
-                ['psql', '-U', 'some\\user', '-h', 'somehost', '-p', '444', 'dbname'],
-                'somehost:444:dbname:some\\\\user:some\\\\password',
+                "database": "dbname",
+                "user": "some\\user",
+                "password": "some\\password",
+                "host": "somehost",
+                "port": "444",
+            }),
+            (
+                ["psql", "-U", "some\\user", "-h", "somehost", "-p", "444", "dbname"],
+                None,
             )
         )
 
     def test_accent(self):
-        username = 'rôle'
-        password = 'sésame'
-        pgpass_string = 'somehost:444:dbname:%s:%s' % (username, password)
+        username = "rôle"
+        password = "sésame"
         self.assertEqual(
             self._run_it({
-                'database': 'dbname',
-                'user': username,
-                'password': password,
-                'host': 'somehost',
-                'port': '444',
-            }), (
-                ['psql', '-U', username, '-h', 'somehost', '-p', '444', 'dbname'],
-                pgpass_string,
+                "database": "dbname",
+                "user": username,
+                "password": password,
+                "host": "somehost",
+                "port": "444",
+            }),
+            (
+                ["psql", "-U", username, "-h", "somehost", "-p", "444", "dbname"],
+                None,
             )
         )
 
     def test_sigint_handler(self):
-        """SIGINT is ignored in Python and passed to psql to abort quries."""
-        def _mock_subprocess_call(*args):
+        """SIGINT is ignored in Python and passed to psql to abort queries."""
+        def _mock_subprocess_run(*args, **kwargs):
             handler = signal.getsignal(signal.SIGINT)
             self.assertEqual(handler, signal.SIG_IGN)
 
         sigint_handler = signal.getsignal(signal.SIGINT)
-        # The default handler isn't SIG_IGN.
         self.assertNotEqual(sigint_handler, signal.SIG_IGN)
-        with mock.patch('subprocess.check_call', new=_mock_subprocess_call):
+        with mock.patch("subprocess.run", new=_mock_subprocess_run):
             DatabaseClient.runshell_db({})
-        # dbshell restores the original handler.
         self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))
+
