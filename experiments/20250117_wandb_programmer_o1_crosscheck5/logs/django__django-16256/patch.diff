diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py
index c5d87f647a..f680e2f941 100644
--- a/django/db/models/fields/related_descriptors.py
+++ b/django/db/models/fields/related_descriptors.py
@@ -1,4 +1,8 @@
 """
+
+from asgiref.sync import sync_to_async
+
+
 Accessors for related objects.
 
 When a field defines a relation between two models, each model class provides
@@ -64,6 +68,10 @@ and two directions (forward and reverse) for a total of six combinations.
 """
 
 from django.core.exceptions import FieldError
+
+from asgiref.sync import sync_to_async
+
+
 from django.db import (
     DEFAULT_DB_ALIAS,
     NotSupportedError,
@@ -634,15 +642,12 @@ def create_reverse_many_to_one_manager(superclass, rel):
     This manager subclasses another manager, generally the default manager of
     the related model, and adds behaviors specific to many-to-one relations.
     """
-
     class RelatedManager(superclass, AltersData):
         def __init__(self, instance):
             super().__init__()
-
             self.instance = instance
             self.model = rel.related_model
             self.field = rel.field
-
             self.core_filters = {self.field.name: instance}
 
         def __call__(self, *, manager):
@@ -665,9 +670,7 @@ def create_reverse_many_to_one_manager(superclass, rel):
             Filter the queryset for the instance this manager is bound to.
             """
             db = self._db or router.db_for_read(self.model, instance=self.instance)
-            empty_strings_as_null = connections[
-                db
-            ].features.interprets_empty_strings_as_nulls
+            empty_strings_as_null = connections[db].features.interprets_empty_strings_as_nulls
             queryset._add_hints(instance=self.instance)
             if self._db:
                 queryset = queryset.using(self._db)
@@ -678,15 +681,10 @@ def create_reverse_many_to_one_manager(superclass, rel):
                 if val is None or (val == "" and empty_strings_as_null):
                     return queryset.none()
             if self.field.many_to_one:
-                # Guard against field-like objects such as GenericRelation
-                # that abuse create_reverse_many_to_one_manager() with reverse
-                # one-to-many relationships instead and break known related
-                # objects assignment.
                 try:
                     target_field = self.field.target_field
                 except FieldError:
-                    # The relationship has multiple target fields. Use a tuple
-                    # for related object id.
+                    # The relationship has multiple target fields. Use a tuple for related object id.
                     rel_obj_id = tuple(
                         [
                             getattr(self.instance, target_field.attname)
@@ -706,7 +704,7 @@ def create_reverse_many_to_one_manager(superclass, rel):
                     self.field.remote_field.get_cache_name()
                 )
             except (AttributeError, KeyError):
-                pass  # nothing to clear from cache
+                pass  # nothing to clear
 
         def get_queryset(self):
             # Even if this relation is not to pk, we require still pk value.
@@ -728,15 +726,12 @@ def create_reverse_many_to_one_manager(superclass, rel):
         def get_prefetch_queryset(self, instances, queryset=None):
             if queryset is None:
                 queryset = super().get_queryset()
-
             queryset._add_hints(instance=instances[0])
             queryset = queryset.using(queryset._db or self._db)
-
             rel_obj_attr = self.field.get_local_related_value
             instance_attr = self.field.get_foreign_related_value
             instances_dict = {instance_attr(inst): inst for inst in instances}
             queryset = _filter_prefetch_queryset(queryset, self.field.name, instances)
-
             # Since we just bypassed this class' get_queryset(), we must manage
             # the reverse relation manually.
             for rel_obj in queryset:
@@ -793,6 +788,14 @@ def create_reverse_many_to_one_manager(superclass, rel):
 
         create.alters_data = True
 
+        async def acreate(self, **kwargs):
+            self._check_fk_val()
+            kwargs[self.field.name] = self.instance
+            db = router.db_for_write(self.model, instance=self.instance)
+            return await sync_to_async(super(RelatedManager, self.db_manager(db)).create)(**kwargs)
+
+        acreate.alters_data = True
+
         def get_or_create(self, **kwargs):
             self._check_fk_val()
             kwargs[self.field.name] = self.instance
@@ -801,6 +804,14 @@ def create_reverse_many_to_one_manager(superclass, rel):
 
         get_or_create.alters_data = True
 
+        async def aget_or_create(self, **kwargs):
+            self._check_fk_val()
+            kwargs[self.field.name] = self.instance
+            db = router.db_for_write(self.model, instance=self.instance)
+            return await sync_to_async(super(RelatedManager, self.db_manager(db)).get_or_create)(**kwargs)
+
+        aget_or_create.alters_data = True
+
         def update_or_create(self, **kwargs):
             self._check_fk_val()
             kwargs[self.field.name] = self.instance
@@ -809,10 +820,17 @@ def create_reverse_many_to_one_manager(superclass, rel):
 
         update_or_create.alters_data = True
 
+        async def aupdate_or_create(self, **kwargs):
+            self._check_fk_val()
+            kwargs[self.field.name] = self.instance
+            db = router.db_for_write(self.model, instance=self.instance)
+            return await sync_to_async(super(RelatedManager, self.db_manager(db)).update_or_create)(**kwargs)
+
+        aupdate_or_create.alters_data = True
+
         # remove() and clear() are only provided if the ForeignKey can have a
         # value of null.
         if rel.field.null:
-
             def remove(self, *objs, bulk=True):
                 if not objs:
                     return
@@ -850,7 +868,6 @@ def create_reverse_many_to_one_manager(superclass, rel):
                 db = router.db_for_write(self.model, instance=self.instance)
                 queryset = queryset.using(db)
                 if bulk:
-                    # `QuerySet.update()` is intrinsically atomic.
                     queryset.update(**{self.field.name: None})
                 else:
                     with transaction.atomic(using=db, savepoint=False):
@@ -891,6 +908,7 @@ def create_reverse_many_to_one_manager(superclass, rel):
     return RelatedManager
 
 
+
 class ManyToManyDescriptor(ReverseManyToOneDescriptor):
     """
     Accessor to the related objects manager on the forward and reverse sides of
@@ -940,16 +958,14 @@ class ManyToManyDescriptor(ReverseManyToOneDescriptor):
 
 def create_forward_many_to_many_manager(superclass, rel, reverse):
     """
-    Create a manager for the either side of a many-to-many relation.
+    Create a manager for either side of a many-to-many relation.
 
     This manager subclasses another manager, generally the default manager of
     the related model, and adds behaviors specific to many-to-many relations.
     """
-
     class ManyRelatedManager(superclass, AltersData):
         def __init__(self, instance=None):
             super().__init__()
-
             self.instance = instance
 
             if not reverse:
@@ -969,10 +985,8 @@ def create_forward_many_to_many_manager(superclass, rel, reverse):
 
             self.through = rel.through
             self.reverse = reverse
-
             self.source_field = self.through._meta.get_field(self.source_field_name)
             self.target_field = self.through._meta.get_field(self.target_field_name)
-
             self.core_filters = {}
             self.pk_field_names = {}
             for lh_field, rh_field in self.source_field.related_fields:
@@ -1008,8 +1022,6 @@ def create_forward_many_to_many_manager(superclass, rel, reverse):
 
         def _build_remove_filters(self, removed_vals):
             filters = Q.create([(self.source_field_name, self.related_val)])
-            # No need to add a subquery condition if removed_vals is a QuerySet without
-            # filters.
             removed_vals_filters = (
                 not isinstance(removed_vals, QuerySet) or removed_vals._has_filters()
             )
@@ -1040,7 +1052,7 @@ def create_forward_many_to_many_manager(superclass, rel, reverse):
             try:
                 self.instance._prefetched_objects_cache.pop(self.prefetch_cache_name)
             except (AttributeError, KeyError):
-                pass  # nothing to clear from cache
+                pass  # nothing to clear
 
         def get_queryset(self):
             try:
@@ -1150,10 +1162,7 @@ def create_forward_many_to_many_manager(superclass, rel, reverse):
         clear.alters_data = True
 
         def set(self, objs, *, clear=False, through_defaults=None):
-            # Force evaluation of `objs` in case it's a queryset whose value
-            # could be affected by `manager.clear()`. Refs #19816.
             objs = tuple(objs)
-
             db = router.db_for_write(self.through, instance=self.instance)
             with transaction.atomic(using=db, savepoint=False):
                 if clear:
@@ -1165,14 +1174,12 @@ def create_forward_many_to_many_manager(superclass, rel, reverse):
                             self.target_field.target_field.attname, flat=True
                         )
                     )
-
                     new_objs = []
                     for obj in objs:
-                        fk_val = (
-                            self.target_field.get_foreign_related_value(obj)[0]
-                            if isinstance(obj, self.model)
-                            else self.target_field.get_prep_value(obj)
-                        )
+                        if isinstance(obj, self.model):
+                            fk_val = self.target_field.get_foreign_related_value(obj)[0]
+                        else:
+                            fk_val = self.target_field.get_prep_value(obj)
                         if fk_val in old_ids:
                             old_ids.remove(fk_val)
                         else:
@@ -1191,36 +1198,51 @@ def create_forward_many_to_many_manager(superclass, rel, reverse):
 
         create.alters_data = True
 
+        async def acreate(self, *, through_defaults=None, **kwargs):
+            db = router.db_for_write(self.instance.__class__, instance=self.instance)
+            new_obj = await sync_to_async(super(ManyRelatedManager, self.db_manager(db)).create)(**kwargs)
+            await sync_to_async(self.add)(new_obj, through_defaults=through_defaults)
+            return new_obj
+
+        acreate.alters_data = True
+
         def get_or_create(self, *, through_defaults=None, **kwargs):
             db = router.db_for_write(self.instance.__class__, instance=self.instance)
-            obj, created = super(ManyRelatedManager, self.db_manager(db)).get_or_create(
-                **kwargs
-            )
-            # We only need to add() if created because if we got an object back
-            # from get() then the relationship already exists.
+            obj, created = super(ManyRelatedManager, self.db_manager(db)).get_or_create(**kwargs)
             if created:
                 self.add(obj, through_defaults=through_defaults)
             return obj, created
 
         get_or_create.alters_data = True
 
+        async def aget_or_create(self, *, through_defaults=None, **kwargs):
+            db = router.db_for_write(self.instance.__class__, instance=self.instance)
+            obj, created = await sync_to_async(super(ManyRelatedManager, self.db_manager(db)).get_or_create)(**kwargs)
+            if created:
+                await sync_to_async(self.add)(obj, through_defaults=through_defaults)
+            return obj, created
+
+        aget_or_create.alters_data = True
+
         def update_or_create(self, *, through_defaults=None, **kwargs):
             db = router.db_for_write(self.instance.__class__, instance=self.instance)
-            obj, created = super(
-                ManyRelatedManager, self.db_manager(db)
-            ).update_or_create(**kwargs)
-            # We only need to add() if created because if we got an object back
-            # from get() then the relationship already exists.
+            obj, created = super(ManyRelatedManager, self.db_manager(db)).update_or_create(**kwargs)
             if created:
                 self.add(obj, through_defaults=through_defaults)
             return obj, created
 
         update_or_create.alters_data = True
 
+        async def aupdate_or_create(self, *, through_defaults=None, **kwargs):
+            db = router.db_for_write(self.instance.__class__, instance=self.instance)
+            obj, created = await sync_to_async(super(ManyRelatedManager, self.db_manager(db)).update_or_create)(**kwargs)
+            if created:
+                await sync_to_async(self.add)(obj, through_defaults=through_defaults)
+            return obj, created
+
+        aupdate_or_create.alters_data = True
+
         def _get_target_ids(self, target_field_name, objs):
-            """
-            Return the set of ids of `objs` that the target field references.
-            """
             from django.db.models import Model
 
             target_ids = set()
@@ -1252,10 +1274,6 @@ def create_forward_many_to_many_manager(superclass, rel, reverse):
         def _get_missing_target_ids(
             self, source_field_name, target_field_name, db, target_ids
         ):
-            """
-            Return the subset of ids of `objs` that aren't already assigned to
-            this relationship.
-            """
             vals = (
                 self.through._default_manager.using(db)
                 .values_list(target_field_name, flat=True)
@@ -1269,48 +1287,22 @@ def create_forward_many_to_many_manager(superclass, rel, reverse):
             return target_ids.difference(vals)
 
         def _get_add_plan(self, db, source_field_name):
-            """
-            Return a boolean triple of the way the add should be performed.
-
-            The first element is whether or not bulk_create(ignore_conflicts)
-            can be used, the second whether or not signals must be sent, and
-            the third element is whether or not the immediate bulk insertion
-            with conflicts ignored can be performed.
-            """
-            # Conflicts can be ignored when the intermediary model is
-            # auto-created as the only possible collision is on the
-            # (source_id, target_id) tuple. The same assertion doesn't hold for
-            # user-defined intermediary models as they could have other fields
-            # causing conflicts which must be surfaced.
             can_ignore_conflicts = (
                 self.through._meta.auto_created is not False
                 and connections[db].features.supports_ignore_conflicts
             )
-            # Don't send the signal when inserting duplicate data row
-            # for symmetrical reverse entries.
             must_send_signals = (
                 self.reverse or source_field_name == self.source_field_name
             ) and (signals.m2m_changed.has_listeners(self.through))
-            # Fast addition through bulk insertion can only be performed
-            # if no m2m_changed listeners are connected for self.through
-            # as they require the added set of ids to be provided via
-            # pk_set.
             return (
                 can_ignore_conflicts,
                 must_send_signals,
                 (can_ignore_conflicts and not must_send_signals),
             )
 
-        def _add_items(
-            self, source_field_name, target_field_name, *objs, through_defaults=None
-        ):
-            # source_field_name: the PK fieldname in join table for the source object
-            # target_field_name: the PK fieldname in join table for the target object
-            # *objs - objects to add. Either object instances, or primary keys
-            # of object instances.
+        def _add_items(self, source_field_name, target_field_name, *objs, through_defaults=None):
             if not objs:
                 return
-
             through_defaults = dict(resolve_callables(through_defaults or {}))
             target_ids = self._get_target_ids(target_field_name, objs)
             db = router.db_for_write(self.through, instance=self.instance)
@@ -1346,7 +1338,6 @@ def create_forward_many_to_many_manager(superclass, rel, reverse):
                         pk_set=missing_target_ids,
                         using=db,
                     )
-                # Add the ones that aren't there already.
                 self.through._default_manager.using(db).bulk_create(
                     [
                         self.through(
@@ -1360,7 +1351,6 @@ def create_forward_many_to_many_manager(superclass, rel, reverse):
                     ],
                     ignore_conflicts=can_ignore_conflicts,
                 )
-
                 if must_send_signals:
                     signals.m2m_changed.send(
                         sender=self.through,
@@ -1373,14 +1363,8 @@ def create_forward_many_to_many_manager(superclass, rel, reverse):
                     )
 
         def _remove_items(self, source_field_name, target_field_name, *objs):
-            # source_field_name: the PK colname in join table for the source object
-            # target_field_name: the PK colname in join table for the target object
-            # *objs - objects to remove. Either object instances, or primary
-            # keys of object instances.
             if not objs:
                 return
-
-            # Check that all the objects are of the right type
             old_ids = set()
             for obj in objs:
                 if isinstance(obj, self.model):
@@ -1388,10 +1372,8 @@ def create_forward_many_to_many_manager(superclass, rel, reverse):
                     old_ids.add(fk_val)
                 else:
                     old_ids.add(obj)
-
             db = router.db_for_write(self.through, instance=self.instance)
             with transaction.atomic(using=db, savepoint=False):
-                # Send a signal to the other end if need be.
                 signals.m2m_changed.send(
                     sender=self.through,
                     action="pre_remove",
@@ -1410,7 +1392,6 @@ def create_forward_many_to_many_manager(superclass, rel, reverse):
                     old_vals = old_ids
                 filters = self._build_remove_filters(old_vals)
                 self.through._default_manager.using(db).filter(filters).delete()
-
                 signals.m2m_changed.send(
                     sender=self.through,
                     action="post_remove",
@@ -1422,3 +1403,4 @@ def create_forward_many_to_many_manager(superclass, rel, reverse):
                 )
 
     return ManyRelatedManager
+
diff --git a/test_async_related_managers.py b/test_async_related_managers.py
new file mode 100644
index 0000000000..ca4991513b
--- /dev/null
+++ b/test_async_related_managers.py
@@ -0,0 +1,111 @@
+import sys
+import os
+import django
+import asyncio
+from django.db import models
+from django.conf import settings
+from asgiref.sync import sync_to_async
+from django.core.management import call_command
+
+# Minimal Django settings for a standalone test
+settings.configure(
+    SECRET_KEY='fake-key',
+    INSTALLED_APPS=['test_async_related_managers'],  # Register this label
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    }
+)
+django.setup()
+
+# Force table creation for models without formal migrations.
+call_command("migrate", "--run-syncdb", "--noinput", verbosity=0)
+
+class Parent(models.Model):
+    name = models.CharField(max_length=50, blank=True)
+    class Meta:
+        app_label = 'test_async_related_managers'
+
+class Child(models.Model):
+    parent = models.ForeignKey(
+        Parent, related_name='children', on_delete=models.CASCADE
+    )
+    name = models.CharField(max_length=50, blank=True)
+    class Meta:
+        app_label = 'test_async_related_managers'
+
+async def test_acreate():
+    print("Testing acreate()...")
+    p = await sync_to_async(Parent.objects.create)(name="P1")
+    try:
+        c = await p.children.acreate(name="C1")
+        print(f"Created Child: parent_id={c.parent_id}, expected={p.id}")
+        if c.parent_id != p.id:
+            print("FAIL: acreate() did not link Child to Parent.")
+            sys.exit(1)
+        print("acreate() linked Child correctly.")
+    except AttributeError as e:
+        print("FAIL: acreate() is missing or not implemented.")
+        print(e)
+        sys.exit(1)
+    except Exception as e:
+        print("FAIL: acreate() raised an unexpected exception.")
+        print(e)
+        sys.exit(1)
+
+async def test_aget_or_create():
+    print("Testing aget_or_create()...")
+    p = await sync_to_async(Parent.objects.create)(name="P2")
+    try:
+        c, created = await p.children.aget_or_create(name="C2")
+        print(f"Child: parent_id={c.parent_id}, expected={p.id}, created={created}")
+        if c.parent_id != p.id:
+            print("FAIL: aget_or_create() did not link Child to Parent.")
+            sys.exit(1)
+        print("aget_or_create() linked Child correctly.")
+    except AttributeError as e:
+        print("FAIL: aget_or_create() is missing or not implemented.")
+        print(e)
+        sys.exit(1)
+    except Exception as e:
+        print("FAIL: aget_or_create() raised an unexpected exception.")
+        print(e)
+        sys.exit(1)
+
+async def test_aupdate_or_create():
+    print("Testing aupdate_or_create()...")
+    p = await sync_to_async(Parent.objects.create)(name="P3")
+    try:
+        c, created = await p.children.aupdate_or_create(
+            name="C3",
+            defaults={"name": "C3_updated"}
+        )
+        print(f"Child: parent_id={c.parent_id}, expected={p.id}, created={created}")
+        if c.parent_id != p.id:
+            print("FAIL: aupdate_or_create() did not link Child to Parent.")
+            sys.exit(1)
+        print("aupdate_or_create() linked Child correctly.")
+    except AttributeError as e:
+        print("FAIL: aupdate_or_create() is missing or not implemented.")
+        print(e)
+        sys.exit(1)
+    except Exception as e:
+        print("FAIL: aupdate_or_create() raised an unexpected exception.")
+        print(e)
+        sys.exit(1)
+
+async def main():
+    # On HEAD, these tests should fail because the async manager methods
+    # (acreate, aget_or_create, aupdate_or_create) on related managers
+    # are missing or call QuerySet incorrectly.
+    await test_acreate()
+    await test_aget_or_create()
+    await test_aupdate_or_create()
+
+    print("All async related manager tests succeeded.")
+    sys.exit(0)
+
+if __name__ == "__main__":
+    asyncio.run(main())
diff --git a/tests/model_fields/test_async_related_mgr.py b/tests/model_fields/test_async_related_mgr.py
new file mode 100644
index 0000000000..6b5ef4db9f
--- /dev/null
+++ b/tests/model_fields/test_async_related_mgr.py
@@ -0,0 +1,49 @@
+from django.test import TestCase
+from django.db import models, DatabaseError
+from asgiref.sync import sync_to_async
+
+class AsyncRelatedParent(models.Model):
+    name = models.CharField(max_length=50, blank=True)
+
+    class Meta:
+        app_label = 'model_fields'
+
+class AsyncRelatedChild(models.Model):
+    parent = models.ForeignKey(
+        AsyncRelatedParent, related_name='children', on_delete=models.CASCADE
+    )
+    name = models.CharField(max_length=50, blank=True)
+
+    class Meta:
+        app_label = 'model_fields'
+
+class AsyncRelatedMgrTests(TestCase):
+    async def test_acreate(self):
+        p = await sync_to_async(AsyncRelatedParent.objects.create)(name='P1')
+        try:
+            c = await p.children.acreate(name='C1')
+            self.assertEqual(c.parent_id, p.id, "acreate() did not link Child to Parent")
+        except AttributeError as e:
+            self.fail(f"acreate() is missing or not implemented: {e}")
+        except DatabaseError as e:
+            self.fail(f"acreate() raised an unexpected DB error: {e}")
+
+    async def test_aget_or_create(self):
+        p = await sync_to_async(AsyncRelatedParent.objects.create)(name='P2')
+        try:
+            c, created = await p.children.aget_or_create(name='C2')
+            self.assertEqual(c.parent_id, p.id, "aget_or_create() did not link Child to Parent")
+        except AttributeError as e:
+            self.fail(f"aget_or_create() is missing or not implemented: {e}")
+        except DatabaseError as e:
+            self.fail(f"aget_or_create() raised an unexpected DB error: {e}")
+
+    async def test_aupdate_or_create(self):
+        p = await sync_to_async(AsyncRelatedParent.objects.create)(name='P3')
+        try:
+            c, created = await p.children.aupdate_or_create(name='C3', defaults={'name': 'C3_updated'})
+            self.assertEqual(c.parent_id, p.id, "aupdate_or_create() did not link Child to Parent")
+        except AttributeError as e:
+            self.fail(f"aupdate_or_create() is missing or not implemented: {e}")
+        except DatabaseError as e:
+            self.fail(f"aupdate_or_create() raised an unexpected DB error: {e}")
