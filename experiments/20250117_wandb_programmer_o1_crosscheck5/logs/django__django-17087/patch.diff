diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py
index d88cda6e20..8c13bcd096 100644
--- a/django/db/migrations/serializer.py
+++ b/django/db/migrations/serializer.py
@@ -163,12 +163,11 @@ class FrozensetSerializer(BaseUnorderedSequenceSerializer):
 
 class FunctionTypeSerializer(BaseSerializer):
     def serialize(self):
-        if getattr(self.value, "__self__", None) and isinstance(
-            self.value.__self__, type
-        ):
+        if getattr(self.value, "__self__", None) and isinstance(self.value.__self__, type):
             klass = self.value.__self__
             module = klass.__module__
-            return "%s.%s.%s" % (module, klass.__name__, self.value.__name__), {
+            # Use klass.__qualname__ to include outer class
+            return "%s.%s.%s" % (module, klass.__qualname__, self.value.__name__), {
                 "import %s" % module
             }
         # Further error checking
@@ -176,17 +175,18 @@ class FunctionTypeSerializer(BaseSerializer):
             raise ValueError("Cannot serialize function: lambda")
         if self.value.__module__ is None:
             raise ValueError("Cannot serialize function %r: No module" % self.value)
-
+    
         module_name = self.value.__module__
-
+    
         if "<" not in self.value.__qualname__:  # Qualname can include <locals>
             return "%s.%s" % (module_name, self.value.__qualname__), {
                 "import %s" % self.value.__module__
             }
-
+    
         raise ValueError(
             "Could not find function %s in %s.\n" % (self.value.__name__, module_name)
         )
+    
 
 
 class FunctoolsPartialSerializer(BaseSerializer):
diff --git a/scripts/test_nested_default.py b/scripts/test_nested_default.py
new file mode 100644
index 0000000000..040ebc8f36
--- /dev/null
+++ b/scripts/test_nested_default.py
@@ -0,0 +1,124 @@
+#!/usr/bin/env python3
+import os
+import sys
+import subprocess
+import shutil
+import tempfile
+
+"""
+This script will:
+1) Make a temporary directory.
+2) Create a minimal Django project/app with a model containing a nested class with a classmethod default.
+3) Run makemigrations to generate a migration.
+4) Inspect the resulting migration to see whether it references "Profile.Capability.default" or just "Capability.default".
+5) If it references "Profile.Capability.default", the bug is fixed -> exit(0).
+   Otherwise, the bug is present -> exit(1).
+"""
+
+def main():
+    print("Starting nested default test script...")
+
+    tmpdir = tempfile.mkdtemp(prefix="test_nested_default_")
+    print(f"Created temp directory: {tmpdir}")
+
+    try:
+        # Step 1: Create a minimal Django project
+        project_dir = os.path.join(tmpdir, "myproject")
+        os.makedirs(project_dir, exist_ok=True)
+        print("Creating Django project...")
+
+        # Use django-admin startproject
+        subprocess.run(["django-admin", "startproject", "myproject", project_dir], check=True)
+
+        # Step 2: Create an app
+        app_name = "myapp"
+        manage_py = os.path.join(project_dir, "manage.py")
+        subprocess.run([sys.executable, manage_py, "startapp", app_name], check=True, cwd=project_dir)
+        print("Created Django app")
+
+        # Step 3: Add model with nested class and default
+        models_path = os.path.join(project_dir, app_name, "models.py")
+        with open(models_path, "w", encoding="utf-8") as f:
+            # Use Postgres's ArrayField for demonstration, but it doesn't matter if it's present or not
+            f.write('''
+from django.db import models
+from django.contrib.postgres.fields import ArrayField
+
+class Profile(models.Model):
+    class Capability(models.TextChoices):
+        BASIC = ("BASIC", "Basic")
+        PROFESSIONAL = ("PROFESSIONAL", "Professional")
+
+        @classmethod
+        def default(cls):
+            return [cls.BASIC]
+
+    capabilities = ArrayField(
+        models.CharField(
+            choices=Capability.choices,
+            max_length=30,
+            blank=True
+        ),
+        null=True,
+        default=Capability.default
+    )
+''')
+
+        # Step 4: Update settings to install app and configure DB
+        settings_path = os.path.join(project_dir, "myproject", "settings.py")
+        with open(settings_path, "r", encoding="utf-8") as f:
+            settings_content = f.read()
+        settings_content = settings_content.replace(
+            "INSTALLED_APPS = [",
+            f"INSTALLED_APPS = [\n    '{app_name}',"
+        )
+        # Use sqlite as DB to keep it simple
+        settings_content = settings_content.replace(
+            "ENGINE': 'django.db.backends.sqlite3',",
+            "ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),"
+        )
+        with open(settings_path, "w", encoding="utf-8") as f:
+            f.write(settings_content)
+        print("Configured settings.py to include our test app")
+
+        # Step 5: Run makemigrations
+        print("Running makemigrations...")
+        subprocess.run([sys.executable, manage_py, "makemigrations", app_name], check=True, cwd=project_dir)
+
+        # Step 6: Inspect generated migration file
+        migrations_dir = os.path.join(project_dir, app_name, "migrations")
+        # There should be a newly generated 0001_initial.py or so
+        generated_migration = None
+        for fn in os.listdir(migrations_dir):
+            if fn.endswith(".py") and fn != "__init__.py":
+                generated_migration = os.path.join(migrations_dir, fn)
+                break
+
+        if not generated_migration:
+            print("No migration file was created, test script cannot proceed.")
+            sys.exit(1)
+
+        print(f"Inspecting generated migration: {generated_migration}")
+        with open(generated_migration, "r", encoding="utf-8") as f:
+            migration_content = f.read()
+
+        # Step 7: Check references
+        # We want to see "myapp.models.Profile.Capability.default" not "myapp.models.Capability.default"
+        if "Profile.Capability.default" in migration_content:
+            print("The bug is FIXED. Found 'Profile.Capability.default' in the generated migration.")
+            sys.exit(0)
+        else:
+            print("The bug is STILL PRESENT. Did not find 'Profile.Capability.default' in the generated migration.")
+            print("Migration content snippet:")
+            print(migration_content)
+            sys.exit(1)
+
+    except subprocess.CalledProcessError as e:
+        print("Error running subprocess:", e)
+        sys.exit(1)
+    finally:
+        # Clean up
+        shutil.rmtree(tmpdir, ignore_errors=True)
+
+if __name__ == "__main__":
+    main()
