diff --git a/django/contrib/contenttypes/management/__init__.py b/django/contrib/contenttypes/management/__init__.py
index 2b5f688136..a7342bb598 100644
--- a/django/contrib/contenttypes/management/__init__.py
+++ b/django/contrib/contenttypes/management/__init__.py
@@ -15,7 +15,7 @@ class RenameContentType(migrations.RunPython):
         db = schema_editor.connection.alias
         if not router.allow_migrate_model(db, ContentType):
             return
-
+    
         try:
             content_type = ContentType.objects.db_manager(db).get_by_natural_key(self.app_label, old_model)
         except ContentType.DoesNotExist:
@@ -24,7 +24,7 @@ class RenameContentType(migrations.RunPython):
             content_type.model = new_model
             try:
                 with transaction.atomic(using=db):
-                    content_type.save(update_fields={'model'})
+                    content_type.save(using=db, update_fields={'model'})
             except IntegrityError:
                 # Gracefully fallback if a stale content type causes a
                 # conflict as remove_stale_contenttypes will take care of
@@ -34,6 +34,7 @@ class RenameContentType(migrations.RunPython):
                 # Clear the cache as the `get_by_natual_key()` call will cache
                 # the renamed ContentType instance by its old model name.
                 ContentType.objects.clear_cache()
+    
 
     def rename_forward(self, apps, schema_editor):
         self._rename(apps, schema_editor, self.old_model, self.new_model)
diff --git a/test_rename_model_bug.py b/test_rename_model_bug.py
new file mode 100644
index 0000000000..694dca9f2e
--- /dev/null
+++ b/test_rename_model_bug.py
@@ -0,0 +1,172 @@
+#!/usr/bin/env python3
+import os
+import sys
+import traceback
+
+class ForceDefaultDBRouter:
+    """
+    A router that forces writes for the 'contenttypes' app to the default DB,
+    so that if code forgets to specify 'using=db', it goes to 'default'.
+    """
+    def db_for_read(self, model, **hints):
+        return None
+
+    def db_for_write(self, model, **hints):
+        if model._meta.app_label == 'contenttypes':
+            return 'default'
+        return None
+
+    def allow_migrate(self, db, app_label, model_name=None, **hints):
+        # We'll only let contenttypes migrate on 'actual_db'.
+        # We'll let testapp migrate on 'actual_db' as well.
+        if app_label == 'contenttypes':
+            return db == 'actual_db'
+        return True
+
+def main():
+    """
+    Test script that verifies django.contrib.contenttypes.management.RenameContentType
+    attempts to save the content type with the correct database alias.
+
+    We'll do two rename migrations:
+    1) ModelA -> RenamedModelA  (0002)
+    2) RenamedModelA -> RenamedAgainModelA (0003)
+
+    On HEAD (unfixed), the second rename triggers an OperationalError 
+    if content_type.save() is done without using=db. 
+    With the fix, everything should succeed.
+    """
+    print("Running test_rename_model_bug.py to reproduce the RenameContentType issue.")
+    try:
+        import tempfile
+        import django
+        from django.conf import settings
+        from django.core.management import call_command
+        from django.db.utils import OperationalError
+
+        tmp_dir = tempfile.mkdtemp(prefix='rename_model_test_')
+        testapp_dir = os.path.join(tmp_dir, 'testapp')
+        migrations_dir = os.path.join(testapp_dir, 'migrations')
+        os.makedirs(migrations_dir)
+
+        # __init__.py so Python finds our test app
+        open(os.path.join(testapp_dir, '__init__.py'), 'w').close()
+        open(os.path.join(migrations_dir, '__init__.py'), 'w').close()
+
+        # apps.py
+        with open(os.path.join(testapp_dir, 'apps.py'), 'w') as f:
+            f.write(
+                "from django.apps import AppConfig\n"
+                "class TestAppConfig(AppConfig):\n"
+                "    name = 'testapp'\n"
+            )
+
+        # models.py has a single ModelA
+        with open(os.path.join(testapp_dir, 'models.py'), 'w') as f:
+            f.write(
+                "from django.db import models\n"
+                "class ModelA(models.Model):\n"
+                "    name = models.CharField(max_length=50)\n"
+            )
+
+        # 0001_initial: create ModelA
+        with open(os.path.join(migrations_dir, '0001_initial.py'), 'w') as f:
+            f.write(
+                "from django.db import migrations, models\n"
+                "class Migration(migrations.Migration):\n"
+                "    initial = True\n"
+                "    dependencies = []\n"
+                "    operations = [\n"
+                "        migrations.CreateModel(\n"
+                "            name='ModelA',\n"
+                "            fields=[\n"
+                "                ('id', models.AutoField(primary_key=True, auto_created=True,serialize=False,verbose_name='ID')),\n"
+                "                ('name', models.CharField(max_length=50)),\n"
+                "            ],\n"
+                "        ),\n"
+                "    ]\n"
+            )
+
+        # 0002_rename_model_a: rename ModelA -> RenamedModelA
+        with open(os.path.join(migrations_dir, '0002_rename_model_a.py'), 'w') as f:
+            f.write(
+                "from django.db import migrations\n"
+                "class Migration(migrations.Migration):\n"
+                "    dependencies = [\n"
+                "        ('testapp', '0001_initial'),\n"
+                "    ]\n"
+                "    operations = [\n"
+                "        migrations.RenameModel(\n"
+                "            old_name='ModelA',\n"
+                "            new_name='RenamedModelA',\n"
+                "        ),\n"
+                "    ]\n"
+            )
+
+        # 0003_rename_model_a2: rename RenamedModelA -> RenamedAgainModelA
+        # This should call django.contrib.contenttypes.management.RenameContentType._rename()
+        with open(os.path.join(migrations_dir, '0003_rename_model_a2.py'), 'w') as f:
+            f.write(
+                "from django.db import migrations\n"
+                "class Migration(migrations.Migration):\n"
+                "    dependencies = [\n"
+                "        ('testapp', '0002_rename_model_a'),\n"
+                "    ]\n"
+                "    operations = [\n"
+                "        migrations.RenameModel(\n"
+                "            old_name='RenamedModelA',\n"
+                "            new_name='RenamedAgainModelA',\n"
+                "        ),\n"
+                "    ]\n"
+            )
+
+        sys.path.insert(0, tmp_dir)
+
+        # Configure settings so 'default' is guaranteed invalid
+        # If content_type.save() tries to use this DB, we get an error.
+        settings.configure(
+            INSTALLED_APPS=[
+                'django.contrib.contenttypes',
+                'testapp.apps.TestAppConfig',
+            ],
+            DATABASES={
+                'default': {
+                    'ENGINE': 'django.db.backends.sqlite3',
+                    'NAME': '/nonsense/unused_default.sqlite3',  # hopefully invalid path
+                },
+                'actual_db': {
+                    'ENGINE': 'django.db.backends.sqlite3',
+                    'NAME': ':memory:',
+                },
+            },
+            DATABASE_ROUTERS=['test_rename_model_bug.ForceDefaultDBRouter'],
+            MIDDLEWARE=[],
+            SECRET_KEY='test_key',
+        )
+
+        django.setup()
+
+        # Migrate contenttypes on 'actual_db' so it gets a table there
+        print("Migrating contenttypes on 'actual_db'...")
+        call_command('migrate', 'contenttypes', database='actual_db', interactive=False, verbosity=1)
+
+        # Now run all testapp migrations on 'actual_db'
+        # 0001_initial: create ModelA
+        # 0002_rename_model_a: rename -> RenamedModelA
+        # 0003_rename_model_a2: rename -> RenamedAgainModelA
+        print("Migrating testapp on 'actual_db' (including the second rename)...")
+        try:
+            call_command('migrate', 'testapp', database='actual_db', interactive=False, verbosity=1)
+            print("SUCCESS: All migrations applied without error.")
+            sys.exit(0)
+        except OperationalError:
+            print("FAILURE: We got an OperationalError, likely because content_type.save() used the default DB.")
+            traceback.print_exc()
+            sys.exit(1)
+
+    except Exception as e:
+        print("Unexpected exception encountered outside migration call:")
+        traceback.print_exc()
+        sys.exit(1)
+    finally:
+        print("Test script complete.")
