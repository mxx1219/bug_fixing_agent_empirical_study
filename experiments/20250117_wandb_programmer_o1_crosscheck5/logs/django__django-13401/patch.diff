diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 28374272f4..0a923414ae 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -514,19 +514,54 @@ class Field(RegisterLookupMixin):
         return self.__class__(*args, **kwargs)
 
     def __eq__(self, other):
-        # Needed for @total_ordering
-        if isinstance(other, Field):
-            return self.creation_counter == other.creation_counter
-        return NotImplemented
+        if not isinstance(other, Field):
+            return NotImplemented
+        left_model = getattr(self, 'model', None)
+        right_model = getattr(other, 'model', None)
+        # If both have models:
+        if left_model is not None and right_model is not None:
+            if left_model != right_model:
+                return False
+        elif (left_model is None) != (right_model is None):
+            # One has a model while the other doesn't - treat them as different fields.
+            return False
+        # Otherwise, compare creation_counters.
+        return self.creation_counter == other.creation_counter
+    
+    
 
     def __lt__(self, other):
-        # This is needed because bisect does not take a comparison function.
-        if isinstance(other, Field):
+        if not isinstance(other, Field):
+            return NotImplemented
+        # Compare creation_counters first so existing ordering is mostly unchanged:
+        if self.creation_counter != other.creation_counter:
             return self.creation_counter < other.creation_counter
-        return NotImplemented
+    
+        left_model = getattr(self, 'model', None)
+        right_model = getattr(other, 'model', None)
+    
+        # If one has a model while the other doesn't, pick a stable ordering:
+        if left_model is None and right_model is not None:
+            return True
+        if left_model is not None and right_model is None:
+            return False
+        if left_model is None and right_model is None:
+            # Both have no model - treat them as equal in ordering.
+            return False
+    
+        # Both have models - compare them lexicographically.
+        s_label = f'{left_model._meta.app_label}.{left_model._meta.model_name}'
+        o_label = f'{right_model._meta.app_label}.{right_model._meta.model_name}'
+        return s_label < o_label
+    
+    
 
     def __hash__(self):
-        return hash(self.creation_counter)
+        # If there's no model, treat it as None for hashing.
+        left_model = getattr(self, 'model', None)
+        return hash((left_model, self.creation_counter))
+    
+    
 
     def __deepcopy__(self, memodict):
         # We don't have to deepcopy very much here, since most things are not
diff --git a/tests_abstract_field_equality.py b/tests_abstract_field_equality.py
new file mode 100644
index 0000000000..c1cd386707
--- /dev/null
+++ b/tests_abstract_field_equality.py
@@ -0,0 +1,52 @@
+import sys
+import django
+from django.conf import settings
+from django.db import models
+
+# Minimal settings configuration for a standalone test script
+if not settings.configured:
+    settings.configure(
+        DATABASES={"default": {"ENGINE": "django.db.backends.sqlite3", "NAME": ":memory:"}},
+        INSTALLED_APPS=["django.contrib.auth", "django.contrib.contenttypes"],
+        MIDDLEWARE=[]
+    )
+django.setup()
+
+class A(models.Model):
+    class Meta:
+        abstract = True
+        # Use a made-up app_label so Django doesn't complain about not finding an app config
+        app_label = "test_abstract_equality"
+
+    myfield = models.IntegerField()
+
+class B(A):
+    class Meta:
+        app_label = "test_abstract_equality"
+
+class C(A):
+    class Meta:
+        app_label = "test_abstract_equality"
+
+def main():
+    print("Reproduction test for abstract field equality problem.")
+    b_field = B._meta.get_field("myfield")
+    c_field = C._meta.get_field("myfield")
+    print(f"B field: {b_field} (model={b_field.model})")
+    print(f"C field: {c_field} (model={c_field.model})")
+    field_set = {b_field, c_field}
+    print(f"Set of fields: {field_set}")
+
+    if len(field_set) != 2:
+        print("Bug present: set has length != 2, fields are considered the same.")
+        sys.exit(1)
+
+    if b_field == c_field:
+        print("Bug present: b_field == c_field is True.")
+        sys.exit(1)
+
+    print("No bug: fields are distinct. Exiting with code 0.")
+    sys.exit(0)
+
+if __name__ == "__main__":
+    main()
