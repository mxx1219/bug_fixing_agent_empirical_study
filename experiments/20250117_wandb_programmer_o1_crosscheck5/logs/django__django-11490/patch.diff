diff --git a/compose_queries_bug_test.py b/compose_queries_bug_test.py
new file mode 100644
index 0000000000..557c4bd6b2
--- /dev/null
+++ b/compose_queries_bug_test.py
@@ -0,0 +1,48 @@
+import sys
+import django
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+            'test_app.apps.TestAppConfig',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        MIDDLEWARE=[],
+    )
+
+django.setup()
+
+from django.core.management import call_command
+from test_app.models import TestReservedName
+
+# Create DB tables for this new model.
+call_command('migrate', '--run-syncdb', verbosity=0)
+
+print("Creating a TestReservedName instance ...")
+TestReservedName.objects.create(name='a', order=2)
+
+qs1 = TestReservedName.objects.all()
+
+print("Attempting first union with .values_list('name', 'order')")
+result1 = qs1.union(qs1).values_list('name', 'order').get()
+print("Result1:", result1)
+
+print("Attempting second union with .values_list('order')")
+result2 = qs1.union(qs1).values_list('order').get()
+print("Result2:", result2)
+
+# If the bug is fixed, result2 should be (2,), i.e. only the "order" value
+if result2 == (2,):
+    print("Test passed: expected (2,) and got", result2)
+    sys.exit(0)
+else:
+    print("Test failed: expected (2,) but got", result2)
+    sys.exit(1)
diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index a44adfc760..484d709b8e 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -422,19 +422,22 @@ class SQLCompiler:
         parts = ()
         for compiler in compilers:
             try:
-                # If the columns list is limited, then all combined queries
-                # must have the same columns list. Set the selects defined on
-                # the query on all combined queries, if not already set.
-                if not compiler.query.values_select and self.query.values_select:
-                    compiler.query.set_values((
-                        *self.query.extra_select,
-                        *self.query.values_select,
-                        *self.query.annotation_select,
-                    ))
+                # If the columns list is limited, then all combined queries must have
+                # the same columns list. However, only overwrite the child's columns if
+                # the child doesn't have columns yet or it has the same model.
+                if self.query.values_select:
+                    child_model = getattr(compiler.query, 'model', None)
+                    child_has_columns = bool(compiler.query.values_select or compiler.query.annotation_select or compiler.query.extra_select)
+                    same_model = child_model == self.query.model
+                    if not child_has_columns or same_model:
+                        compiler.query.set_values((
+                            *self.query.extra_select,
+                            *self.query.values_select,
+                            *self.query.annotation_select,
+                        ))
                 part_sql, part_args = compiler.as_sql()
                 if compiler.query.combinator:
-                    # Wrap in a subquery if wrapping in parentheses isn't
-                    # supported.
+                    # Wrap in a subquery if wrapping in parentheses isn't supported.
                     if not features.supports_parentheses_in_compound:
                         part_sql = 'SELECT * FROM ({})'.format(part_sql)
                     # Add parentheses when combining with compound query if not
@@ -460,6 +463,8 @@ class SQLCompiler:
         for part in args_parts:
             params.extend(part)
         return result, params
+    
+    
 
     def as_sql(self, with_limits=True, with_col_aliases=False):
         """
diff --git a/test_app/__init__.py b/test_app/__init__.py
new file mode 100644
index 0000000000..c96b87b0cb
--- /dev/null
+++ b/test_app/__init__.py
@@ -0,0 +1 @@
+# Empty init file to make this a valid Python package
diff --git a/test_app/apps.py b/test_app/apps.py
new file mode 100644
index 0000000000..d15f13972a
--- /dev/null
+++ b/test_app/apps.py
@@ -0,0 +1,4 @@
+from django.apps import AppConfig
+
+class TestAppConfig(AppConfig):
+    name = 'test_app'
diff --git a/test_app/models.py b/test_app/models.py
new file mode 100644
index 0000000000..1fe88e1efd
--- /dev/null
+++ b/test_app/models.py
@@ -0,0 +1,8 @@
+from django.db import models
+
+class TestReservedName(models.Model):
+    name = models.CharField(max_length=50)
+    order = models.IntegerField()
+
+    class Meta:
+        app_label = 'test_app'
