diff --git a/astropy/table/table.py b/astropy/table/table.py
index 5afe2127a3..5513b5895f 100644
--- a/astropy/table/table.py
+++ b/astropy/table/table.py
@@ -1181,21 +1181,21 @@ class Table:
         Convert any allowed sequence data ``col`` to a column object that can be used
         directly in the self.columns dict.  This could be a Column, MaskedColumn,
         or mixin column.
-
+    
         The final column name is determined by::
-
+    
             name or data.info.name or def_name
-
+    
         If ``data`` has no ``info`` then ``name = name or def_name``.
-
+    
         The behavior of ``copy`` for Column objects is:
         - copy=True: new class instance with a copy of data and deep copy of meta
         - copy=False: new class instance with same data and a key-only copy of meta
-
+    
         For mixin columns:
         - copy=True: new class instance with copy of data and deep copy of meta
         - copy=False: original instance (no copy at all)
-
+    
         Parameters
         ----------
         data : object (column-like sequence)
@@ -1208,24 +1208,24 @@ class Table:
             Data dtype
         name : str or None
             Column name
-
+    
         Returns
         -------
         col : Column, MaskedColumn, mixin-column type
             Object that can be used as a column in self
         """
-
+    
         data_is_mixin = self._is_mixin_for_table(data)
         masked_col_cls = (self.ColumnClass
                           if issubclass(self.ColumnClass, self.MaskedColumn)
                           else self.MaskedColumn)
-
+    
         try:
             data0_is_mixin = self._is_mixin_for_table(data[0])
         except Exception:
             # Need broad exception, cannot predict what data[0] raises for arbitrary data
             data0_is_mixin = False
-
+    
         # If the data is not an instance of Column or a mixin class, we can
         # check the registry of mixin 'handlers' to see if the column can be
         # converted to a mixin class
@@ -1238,14 +1238,9 @@ class Table:
                 raise TypeError('Mixin handler for object of type '
                                 f'{fully_qualified_name} '
                                 'did not return a valid mixin column')
-
-        # Structured ndarray gets viewed as a mixin unless already a valid
-        # mixin class
-        if (not isinstance(data, Column) and not data_is_mixin
-                and isinstance(data, np.ndarray) and len(data.dtype) > 1):
-            data = data.view(NdarrayMixin)
-            data_is_mixin = True
-
+    
+        # (Removed the forced NdarrayMixin transform for structured arrays)
+    
         # Get the final column name using precedence.  Some objects may not
         # have an info attribute. Also avoid creating info as a side effect.
         if not name:
@@ -1255,7 +1250,7 @@ class Table:
                 name = data.info.name or default_name
             else:
                 name = default_name
-
+    
         if isinstance(data, Column):
             # If self.ColumnClass is a subclass of col, then "upgrade" to ColumnClass,
             # otherwise just use the original class.  The most common case is a
@@ -1264,14 +1259,14 @@ class Table:
             # of downgrading from MaskedColumn to Column (for non-masked table)
             # does not happen.
             col_cls = self._get_col_cls_for_table(data)
-
+    
         elif data_is_mixin:
             # Copy the mixin column attributes if they exist since the copy below
             # may not get this attribute.
             col = col_copy(data, copy_indices=self._init_indices) if copy else data
             col.info.name = name
             return col
-
+    
         elif data0_is_mixin:
             # Handle case of a sequence of a mixin, e.g. [1*u.m, 2*u.m].
             try:
@@ -1282,13 +1277,13 @@ class Table:
                 # If that didn't work for some reason, just turn it into np.array of object
                 data = np.array(data, dtype=object)
                 col_cls = self.ColumnClass
-
+    
         elif isinstance(data, (np.ma.MaskedArray, Masked)):
             # Require that col_cls be a subclass of MaskedColumn, remembering
             # that ColumnClass could be a user-defined subclass (though more-likely
             # could be MaskedColumn).
             col_cls = masked_col_cls
-
+    
         elif data is None:
             # Special case for data passed as the None object (for broadcasting
             # to an object column). Need to turn data into numpy `None` scalar
@@ -1296,7 +1291,7 @@ class Table:
             # of a object column of `None`.
             data = np.array(None)
             col_cls = self.ColumnClass
-
+    
         elif not hasattr(data, 'dtype'):
             # `data` is none of the above, convert to numpy array or MaskedArray
             # assuming only that it is a scalar or sequence or N-d nested
@@ -1308,20 +1303,21 @@ class Table:
             data = _convert_sequence_data_to_array(data, dtype)
             copy = False  # Already made a copy above
             col_cls = masked_col_cls if isinstance(data, np.ma.MaskedArray) else self.ColumnClass
-
+    
         else:
             col_cls = self.ColumnClass
-
+    
         try:
             col = col_cls(name=name, data=data, dtype=dtype,
                           copy=copy, copy_indices=self._init_indices)
         except Exception:
             # Broad exception class since we don't know what might go wrong
             raise ValueError('unable to convert data to Column for Table')
-
+    
         col = self._convert_col_for_table(col)
-
+    
         return col
+    
 
     def _init_from_ndarray(self, data, names, dtype, n_cols, copy):
         """Initialize table from an ndarray structured array"""
diff --git a/astropy/table/tests/test_mixin.py b/astropy/table/tests/test_mixin.py
index 2fdcd20d8f..0cbd128331 100644
--- a/astropy/table/tests/test_mixin.py
+++ b/astropy/table/tests/test_mixin.py
@@ -699,56 +699,66 @@ def test_skycoord_representation():
 
 def test_ndarray_mixin():
     """
-    Test directly adding a plain structured array into a table instead of the
-    view as an NdarrayMixin.  Once added as an NdarrayMixin then all the previous
-    tests apply.
+    Test adding plain structured arrays vs. a pre-made NdarrayMixin array
+    into a Table. Now that we do not forcibly convert structured arrays,
+    they should become plain Column objects. An array already of type
+    NdarrayMixin (like "d") should remain NdarrayMixin.
     """
+    import numpy as np
+    from astropy.table import Table
+    from astropy.table.column import Column
+    from astropy.table.ndarray_mixin import NdarrayMixin
+
+    # a, b, c are plain structured arrays
     a = np.array([(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd')],
                  dtype='<i4,' + ('|U1'))
     b = np.array([(10, 'aa'), (20, 'bb'), (30, 'cc'), (40, 'dd')],
                  dtype=[('x', 'i4'), ('y', ('U2'))])
     c = np.rec.fromrecords([(100., 'raa'), (200., 'rbb'), (300., 'rcc'), (400., 'rdd')],
                            names=['rx', 'ry'])
+
+    # d is explicitly an NdarrayMixin
     d = np.arange(8, dtype='i8').reshape(4, 2).view(NdarrayMixin)
 
-    # Add one during initialization and the next as a new column.
+    # Put one in at init and add others as columns
     t = Table([a], names=['a'])
     t['b'] = b
     t['c'] = c
     t['d'] = d
 
-    assert isinstance(t['a'], NdarrayMixin)
+    # Verify that a, b, c are now Column, and d remains NdarrayMixin
+    assert isinstance(t['a'], Column)
+    assert isinstance(t['b'], Column)
+    assert isinstance(t['c'], Column)
+    assert isinstance(t['d'], NdarrayMixin)
 
+    # Check the structured data for a, b, c are correct
+    # For "a":
     assert t['a'][1][1] == a[1][1]
     assert t['a'][2][0] == a[2][0]
-
     assert t[1]['a'][1] == a[1][1]
     assert t[2]['a'][0] == a[2][0]
 
-    assert isinstance(t['b'], NdarrayMixin)
-
+    # For "b":
     assert t['b'][1]['x'] == b[1]['x']
     assert t['b'][1]['y'] == b[1]['y']
-
     assert t[1]['b']['x'] == b[1]['x']
     assert t[1]['b']['y'] == b[1]['y']
 
-    assert isinstance(t['c'], NdarrayMixin)
-
+    # For "c":
     assert t['c'][1]['rx'] == c[1]['rx']
     assert t['c'][1]['ry'] == c[1]['ry']
-
     assert t[1]['c']['rx'] == c[1]['rx']
     assert t[1]['c']['ry'] == c[1]['ry']
 
-    assert isinstance(t['d'], NdarrayMixin)
-
+    # Check "d" (the NdarrayMixin array) is unchanged
     assert t['d'][1][0] == d[1][0]
     assert t['d'][1][1] == d[1][1]
-
     assert t[1]['d'][0] == d[1][0]
     assert t[1]['d'][1] == d[1][1]
 
+    # Finally confirm the table formatting is still as expected
+    # (structured dtype columns show subfields)
     assert t.pformat(show_dtype=True) == [
         '  a [f0, f1]     b [x, y]      c [rx, ry]      d    ',
         '(int32, str1) (int32, str2) (float64, str3) int64[2]',
@@ -759,6 +769,7 @@ def test_ndarray_mixin():
         "     (4, 'd')    (40, 'dd')   (400., 'rdd')   6 .. 7"]
 
 
+
 def test_possible_string_format_functions():
     """
     The QuantityInfo info class for Quantity implements a
diff --git a/test_remove_structured_ndarray_autotransform.py b/test_remove_structured_ndarray_autotransform.py
new file mode 100644
index 0000000000..6c7b286805
--- /dev/null
+++ b/test_remove_structured_ndarray_autotransform.py
@@ -0,0 +1,28 @@
+import sys
+import numpy as np
+from astropy.table import Table
+
+def main():
+    print("STEP 1: Creating a structured array with multiple fields.")
+    structured_data = np.array([(1,2.), (3,4.)],
+                               dtype=[("intfield","i4"), ("floatfield","f8")])
+    print("structured_data:", structured_data)
+
+    print("STEP 2: Adding this structured array to an Astropy Table.")
+    t = Table([structured_data], names=["mycol"])
+    print("Created table:", t)
+
+    print("STEP 3: Checking the type of t['mycol'].")
+    col_type = type(t["mycol"]).__name__
+    print("Column type is:", col_type)
+
+    # If the auto-conversion is still happening, this will be NdarrayMixin instead of Column.
+    if col_type == "NdarrayMixin":
+        print("ERROR: The structured array was converted into NdarrayMixin!")
+        sys.exit(1)
+
+    print("SUCCESS: The structured array remained a Column.")
+    sys.exit(0)
+
+if __name__ == '__main__':
+    main()
