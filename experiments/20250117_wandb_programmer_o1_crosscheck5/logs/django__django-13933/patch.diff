diff --git a/django/forms/models.py b/django/forms/models.py
index 422bc5d178..f784b31707 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -1188,7 +1188,7 @@ class ModelChoiceField(ChoiceField):
     # This class is a subclass of ChoiceField for purity, but it doesn't
     # actually use any of ChoiceField's implementation.
     default_error_messages = {
-        'invalid_choice': _('Select a valid choice. That choice is not one of'
+        'invalid_choice': _('Select a valid choice. %(value)s is not one of'
                             ' the available choices.'),
     }
     iterator = ModelChoiceIterator
@@ -1284,7 +1284,11 @@ class ModelChoiceField(ChoiceField):
                 value = getattr(value, key)
             value = self.queryset.get(**{key: value})
         except (ValueError, TypeError, self.queryset.model.DoesNotExist):
-            raise ValidationError(self.error_messages['invalid_choice'], code='invalid_choice')
+            raise ValidationError(
+                self.error_messages['invalid_choice'],
+                code='invalid_choice',
+                params={'value': value},
+            )
         return value
 
     def validate(self, value):
@@ -1298,6 +1302,7 @@ class ModelChoiceField(ChoiceField):
         return str(self.prepare_value(initial_value)) != str(data_value)
 
 
+
 class ModelMultipleChoiceField(ModelChoiceField):
     """A MultipleChoiceField whose choices are a model QuerySet."""
     widget = SelectMultiple
diff --git a/test_modelchoicefield_invalid_choice.py b/test_modelchoicefield_invalid_choice.py
new file mode 100644
index 0000000000..e847ea2cee
--- /dev/null
+++ b/test_modelchoicefield_invalid_choice.py
@@ -0,0 +1,60 @@
+import sys
+print("Test: Checking if ModelChoiceField includes invalid value in error message...")
+
+import django
+from django.conf import settings
+
+settings.configure(
+    USE_I18N=False,
+    USE_L10N=False,
+    USE_TZ=False,
+    SECRET_KEY='test',
+    ALLOWED_HOSTS=['*'],
+)
+
+django.setup()
+
+from django.core.exceptions import ValidationError
+from django.forms.models import ModelChoiceField
+
+class RealMockModelDoesNotExist(Exception):
+    pass
+
+class RealMockModel:
+    pass
+
+RealMockModel.DoesNotExist = RealMockModelDoesNotExist
+
+class RealMockQuerySet:
+    model = RealMockModel
+    _prefetch_related_lookups = []
+    def get(self, **kwargs):
+        raise RealMockModelDoesNotExist("No object found.")
+    def all(self):
+        return self
+    def count(self):
+        return 0
+    def exists(self):
+        return False
+    def filter(self, *args, **kwargs):
+        return self
+    def iterator(self):
+        return iter([])
+
+mock_queryset = RealMockQuerySet()
+field = ModelChoiceField(queryset=mock_queryset, required=True)
+bad_value = "some_invalid_value"
+
+try:
+    field.clean(bad_value)
+    print("FAIL: No ValidationError thrown for invalid choice.")
+    sys.exit(1)
+except ValidationError as e:
+    message_text = str(e)
+    print(f"Received ValidationError message: {message_text}")
+    if bad_value in message_text:
+        print("PASS: The invalid value is included in the error message.")
+        sys.exit(0)
+    else:
+        print("FAIL: The invalid value is NOT included in the error message.")
+        sys.exit(1)
\ No newline at end of file
