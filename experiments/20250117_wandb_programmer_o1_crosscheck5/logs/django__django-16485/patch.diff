diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index 23c3a08c67..64a9147666 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -184,7 +184,8 @@ def floatformat(text, arg=-1):
     units = len(tupl[1])
     units += -tupl[2] if m else tupl[2]
     prec = abs(p) + units + 1
-
+    if prec < 1:
+        prec = 1
     # Avoid conversion to scientific notation by accessing `sign`, `digits`,
     # and `exponent` from Decimal.as_tuple() directly.
     rounded_d = d.quantize(exp, ROUND_HALF_UP, Context(prec=prec))
@@ -206,6 +207,7 @@ def floatformat(text, arg=-1):
     )
 
 
+
 @register.filter(is_safe=True)
 @stringfilter
 def iriencode(value):
diff --git a/test_floatformat_bug.py b/test_floatformat_bug.py
new file mode 100644
index 0000000000..4a442f70b5
--- /dev/null
+++ b/test_floatformat_bug.py
@@ -0,0 +1,37 @@
+import sys
+from decimal import Decimal
+
+from django.conf import settings
+import django
+
+# Minimal settings, required because floatformat calls Django's formatting utilities.
+if not settings.configured:
+    settings.configure(
+        USE_I18N=True,
+        LANGUAGE_CODE="en-us",
+        SECRET_KEY="secretkey",
+    )
+django.setup()
+
+from django.template.defaultfilters import floatformat
+
+def main():
+    print("Testing floatformat('0.00', 0) with settings configured...")
+    success = True
+    try:
+        res1 = floatformat('0.00', 0)
+        res2 = floatformat(Decimal('0.00'), 0)
+        print(f"res1 = {res1}")
+        print(f"res2 = {res2}")
+        # Expect "0" for both calls.
+        if res1 != "0" or res2 != "0":
+            print(f"**Unexpected result**: res1={res1}, res2={res2}, expected '0'")
+            success = False
+    except Exception as e:
+        print(f"Exception occurred: {e}")
+        success = False
+
+    sys.exit(0 if success else 1)
+
+if __name__ == "__main__":
+    main()
