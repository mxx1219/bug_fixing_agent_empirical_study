diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py
index 0dc1c77c53..b2e9b0a732 100644
--- a/django/db/migrations/autodetector.py
+++ b/django/db/migrations/autodetector.py
@@ -904,7 +904,7 @@ class MigrationAutodetector:
     def generate_altered_fields(self):
         """
         Make AlterField operations, or possibly RemovedField/AddField if alter
-        isn's possible.
+        isn't possible.
         """
         for app_label, model_name, field_name in sorted(self.old_field_keys & self.new_field_keys):
             # Did the field change?
@@ -954,8 +954,11 @@ class MigrationAutodetector:
                 if both_m2m or neither_m2m:
                     # Either both fields are m2m or neither is
                     preserve_default = True
-                    if (old_field.null and not new_field.null and not new_field.has_default() and
-                            not new_field.many_to_many):
+                    if (
+                        old_field.null and not new_field.null 
+                        and not new_field.has_default() 
+                        and not new_field.many_to_many
+                    ):
                         field = new_field.clone()
                         new_default = self.questioner.ask_not_null_alteration(field_name, model_name)
                         if new_default is not models.NOT_PROVIDED:
@@ -963,6 +966,10 @@ class MigrationAutodetector:
                             preserve_default = False
                     else:
                         field = new_field
+                    # Collect dependencies for new FK references if any
+                    dependencies = []
+                    if field.remote_field and field.remote_field.model:
+                        dependencies.extend(self._get_dependencies_for_foreign_key(field))
                     self.add_operation(
                         app_label,
                         operations.AlterField(
@@ -970,12 +977,14 @@ class MigrationAutodetector:
                             name=field_name,
                             field=field,
                             preserve_default=preserve_default,
-                        )
+                        ),
+                        dependencies=dependencies,
                     )
                 else:
                     # We cannot alter between m2m and concrete fields
                     self._generate_removed_field(app_label, model_name, field_name)
                     self._generate_added_field(app_label, model_name, field_name)
+    
 
     def create_altered_indexes(self):
         option_name = operations.AddIndex.option_name
diff --git a/test_change_uuid_to_fk.py b/test_change_uuid_to_fk.py
new file mode 100644
index 0000000000..bd295b468c
--- /dev/null
+++ b/test_change_uuid_to_fk.py
@@ -0,0 +1,105 @@
+import sys
+import django
+import uuid
+from django.conf import settings
+from django.db.migrations.state import ProjectState, ModelState
+from django.db.migrations.autodetector import MigrationAutodetector
+from django.db.migrations.graph import MigrationGraph
+from django.db import models
+
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            "testapp1.apps.TestApp1Config",  # label = "testapp1_real"
+            "testapp2.apps.TestApp2Config",  # label = "testapp2_real"
+            "django.contrib.auth",
+            "django.contrib.contenttypes",
+        ],
+        DATABASES={
+            "default": {
+                "ENGINE": "django.db.backends.sqlite3",
+                "NAME": ":memory:",
+            }
+        },
+    )
+django.setup()
+
+def main():
+    print("Realistic scenario: 'testapp2_real' is an existing (real) app, 'testapp1_real' is unmigrated.")
+
+    # from_state: we say testapp2_real is real => not tracked here.
+    # App1 has another_app as a UUIDField.
+    from_state = ProjectState()
+    from_state.real_apps = {"testapp2_real"}  
+    from_state.add_model(ModelState(
+        app_label="testapp1_real",
+        name="App1",
+        fields=[
+            ("id", models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)),
+            ("text", models.CharField(max_length=100)),
+            ("another_app", models.UUIDField(null=True, blank=True)),
+        ],
+        options={},
+        bases=(),
+    ))
+
+    # to_state: same real app, but App1 changes 'another_app' to a ForeignKey to testapp2_real.App2.
+    to_state = ProjectState()
+    to_state.real_apps = {"testapp2_real"}  
+    to_state.add_model(ModelState(
+        app_label="testapp1_real",
+        name="App1",
+        fields=[
+            ("id", models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)),
+            ("text", models.CharField(max_length=100)),
+            (
+                "another_app",
+                models.ForeignKey(
+                    "testapp2_real.App2",
+                    null=True,
+                    blank=True,
+                    on_delete=models.SET_NULL,
+                )
+            ),
+        ],
+        options={},
+        bases=(),
+    ))
+
+    # Now the autodetector sees app_label="testapp1_real" as unmigrated in both states, with a changed field:
+    autodetector = MigrationAutodetector(from_state, to_state)
+    changes = autodetector.changes(
+        graph=MigrationGraph(),
+        convert_apps={"testapp1_real"},  # only generate migrations for testapp1_real
+    )
+
+    testapp1_migrations = changes.get("testapp1_real")
+    if not testapp1_migrations:
+        print("No migrations detected for 'testapp1_real'; test fails.")
+        sys.exit(1)
+
+    found_alterfield = False
+    found_dependency = False
+    for migration in testapp1_migrations:
+        for operation in migration.operations:
+            if operation.__class__.__name__ == "AlterField" and operation.name_lower == "another_app":
+                found_alterfield = True
+                auto_deps = getattr(operation, "_auto_deps", None)
+                if auto_deps:
+                    for dep in auto_deps:
+                        if dep[0] == "testapp2_real":
+                            found_dependency = True
+
+    if not found_alterfield:
+        print("No AlterField('another_app') found; test fails.")
+        sys.exit(1)
+
+    if not found_dependency:
+        print("AlterField found but no dependency on 'testapp2_real'; test fails.")
+        sys.exit(1)
+
+    print("AlterField with dependency on 'testapp2_real' found; test passes.")
+    sys.exit(0)
+
+if __name__ == "__main__":
+    main()
diff --git a/testapp1/__init__.py b/testapp1/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testapp1/apps.py b/testapp1/apps.py
new file mode 100644
index 0000000000..73024b2dbd
--- /dev/null
+++ b/testapp1/apps.py
@@ -0,0 +1,5 @@
+from django.apps import AppConfig
+
+class TestApp1Config(AppConfig):
+    name = "testapp1"
+    label = "testapp1_real"
diff --git a/testapp2/__init__.py b/testapp2/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testapp2/apps.py b/testapp2/apps.py
new file mode 100644
index 0000000000..dc6af22d94
--- /dev/null
+++ b/testapp2/apps.py
@@ -0,0 +1,5 @@
+from django.apps import AppConfig
+
+class TestApp2Config(AppConfig):
+    name = "testapp2"
+    label = "testapp2_real"
diff --git a/testapp2/models.py b/testapp2/models.py
new file mode 100644
index 0000000000..8f58f4ad48
--- /dev/null
+++ b/testapp2/models.py
@@ -0,0 +1,6 @@
+from django.db import models
+import uuid
+
+class App2(models.Model):
+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
+    text = models.CharField(max_length=100)
