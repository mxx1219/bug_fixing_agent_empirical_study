diff --git a/django/views/debug.py b/django/views/debug.py
index 7a89f7bd15..bd71c6ef93 100644
--- a/django/views/debug.py
+++ b/django/views/debug.py
@@ -395,13 +395,13 @@ class ExceptionReporter:
         return lower_bound, pre_context, context_line, post_context
 
     def get_traceback_frames(self):
+        import warnings
         def explicit_or_implicit_cause(exc_value):
             explicit = getattr(exc_value, '__cause__', None)
-            suppress_context = getattr(exc_value, '__suppress_context__', None)
+            suppress_context = bool(getattr(exc_value, '__suppress_context__', False))
             implicit = getattr(exc_value, '__context__', None)
             return explicit or (None if suppress_context else implicit)
-
-        # Get the exception and all its causes
+    
         exceptions = []
         exc_value = self.exc_value
         while exc_value:
@@ -411,23 +411,18 @@ class ExceptionReporter:
                 warnings.warn(
                     "Cycle in the exception chain detected: exception '%s' "
                     "encountered again." % exc_value,
-                    ExceptionCycleWarning,
+                    ExceptionCycleWarning,  # Use top-level class here
                 )
-                # Avoid infinite loop if there's a cyclic reference (#29393).
                 break
-
+    
         frames = []
-        # No exceptions were supplied to ExceptionReporter
         if not exceptions:
             return frames
-
-        # In case there's just one exception, take the traceback from self.tb
+    
         exc_value = exceptions.pop()
         tb = self.tb if not exceptions else exc_value.__traceback__
-
+    
         while tb is not None:
-            # Support for __traceback_hide__ which is used by a few libraries
-            # to hide internal frames.
             if tb.tb_frame.f_locals.get('__traceback_hide__'):
                 tb = tb.tb_next
                 continue
@@ -459,16 +454,16 @@ class ExceptionReporter:
                 'post_context': post_context,
                 'pre_context_lineno': pre_context_lineno + 1,
             })
-
-            # If the traceback for current exception is consumed, try the
-            # other exception.
+    
             if not tb.tb_next and exceptions:
                 exc_value = exceptions.pop()
                 tb = exc_value.__traceback__
             else:
                 tb = tb.tb_next
-
+    
         return frames
+    
+    
 
 
 def technical_404_response(request, exception):
diff --git a/test_suppress_context.py b/test_suppress_context.py
new file mode 100644
index 0000000000..bce690ca60
--- /dev/null
+++ b/test_suppress_context.py
@@ -0,0 +1,51 @@
+#!/usr/bin/env python3
+import sys
+print("Starting test_suppress_context...")
+
+from django.conf import settings
+from django.test import RequestFactory
+from django.views.debug import technical_500_response
+
+# Minimal Django settings
+settings.configure(
+    DEBUG=True,
+    SECRET_KEY="test",
+    ROOT_URLCONF=__name__,
+    ALLOWED_HOSTS=["*"],
+)
+
+def test_exception():
+    try:
+        raise RuntimeError("my error")  # "my error" is the older exception
+    except Exception as exc:
+        # Suppress the context:
+        raise ValueError("my new error") from None
+
+def main():
+    rf = RequestFactory()
+    request = rf.get("/")
+    try:
+        test_exception()
+    except Exception:
+        exc_type, exc_value, tb = sys.exc_info()
+        response = technical_500_response(request, exc_type, exc_value, tb)
+        content = response.content.decode("utf-8", errors="replace")
+
+        # We only consider it a failure if the old exception
+        # text actually appears as part of the traceback chain.
+        # Searching for "RuntimeError:" or "During handling of the above exception"
+        # is how we detect exposure of the suppressed context.
+        # Just seeing "my error" due to source code snippet doesn't count.
+
+        print("Response content:\n", content.encode("ascii","backslashreplace").decode("ascii"))
+        fail_strings = ["RuntimeError:", "During handling of the above exception"]
+
+        if any(s in content for s in fail_strings):
+            print("FAIL: The suppressed context (old exception) is still displayed in the traceback!")
+            sys.exit(1)
+        else:
+            print("PASS: The suppressed exception isn't exposed in the traceback chain.")
+            sys.exit(0)
+
+if __name__ == "__main__":
+    main()
