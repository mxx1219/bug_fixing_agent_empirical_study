diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py
index 61f88401ab..bcd36fdab3 100644
--- a/django/db/backends/base/schema.py
+++ b/django/db/backends/base/schema.py
@@ -393,11 +393,13 @@ class BaseDatabaseSchemaEditor:
         news = {tuple(fields) for fields in new_index_together}
         # Deleted indexes
         for fields in olds.difference(news):
-            self._delete_composed_index(model, fields, {'index': True}, self.sql_delete_index)
+            # Pass unique=False so that we ignore any unique index constraints.
+            self._delete_composed_index(model, fields, {'index': True, 'unique': False}, self.sql_delete_index)
         # Created indexes
         for field_names in news.difference(olds):
             fields = [model._meta.get_field(field) for field in field_names]
             self.execute(self._create_index_sql(model, fields, suffix="_idx"))
+    
 
     def _delete_composed_index(self, model, fields, constraint_kwargs, sql):
         meta_constraint_names = {constraint.name for constraint in model._meta.constraints}
diff --git a/test_delete_index_together.py b/test_delete_index_together.py
new file mode 100644
index 0000000000..103cf1c90e
--- /dev/null
+++ b/test_delete_index_together.py
@@ -0,0 +1,106 @@
+import sys
+import os
+import django
+from django.conf import settings
+from django.db import connection
+
+# We'll use Django's migration API directly:
+from django.db.migrations.executor import MigrationExecutor
+from django.db.migrations.autodetector import MigrationAutodetector
+from django.db.migrations.state import ProjectState, ModelState
+from django.db import models
+
+"""
+This script reproduces the issue of dropping index_together when a unique_together
+constraint is on the exact same fields. On HEAD (unpatched), we expect:
+  ValueError: Found wrong number (2) of constraints...
+If we catch that error, we exit(1). If we don't catch it, we exit(0).
+"""
+
+# Minimal Django settings for an in-memory DB
+settings.configure(
+    SECRET_KEY='dummy',
+    INSTALLED_APPS=[],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+)
+
+django.setup()
+
+class TestModelInitial(models.Model):
+    f1 = models.IntegerField()
+    f2 = models.IntegerField()
+
+    class Meta:
+        app_label = 'test_app'
+        unique_together = [('f1', 'f2')]
+        index_together = [('f1', 'f2')]
+
+class TestModelFinal(models.Model):
+    f1 = models.IntegerField()
+    f2 = models.IntegerField()
+
+    class Meta:
+        app_label = 'test_app'
+        # Remove index_together, keep unique_together
+        unique_together = [('f1', 'f2')]
+
+def run_migrations(from_state, to_state):
+    """
+    Programmatically detect migrations from 'from_state' to 'to_state'
+    and apply them. Return True if everything succeeded.
+    """
+    # Autodetect changes
+    autodetector = MigrationAutodetector(from_state, to_state)
+    changes = autodetector.changes(graph=MigrationExecutor(connection).loader.graph)
+    if not changes:
+        return True
+    # Actually apply these migrations
+    executor = MigrationExecutor(connection)
+    executor.apply_changes(changes)
+    return True
+
+def main():
+    print("Creating empty initial ProjectState...")
+    empty_state = ProjectState()
+
+    # Build a state that includes (f1, f2) in both unique_together and index_together
+    state_with_index = ProjectState()
+    state_with_index.add_model(
+        ModelState.from_model(TestModelInitial)
+    )
+
+    # Build a state that only has the unique_together
+    state_without_index = ProjectState()
+    state_without_index.add_model(
+        ModelState.from_model(TestModelFinal)
+    )
+
+    try:
+        print("Migrating from empty -> (index + unique) state...")
+        run_migrations(empty_state, state_with_index)
+
+        print("Migrating from (index + unique) -> (unique only) state...")
+        run_migrations(state_with_index, state_without_index)
+
+        print("Index removed successfully; this is the FIXED behavior.")
+        sys.exit(0)
+    except ValueError as e:
+        err_msg = str(e)
+        print(f"Caught ValueError: {err_msg}")
+        if "Found wrong number" in err_msg:
+            print("This matches the known bug. Exiting with code 1.")
+            sys.exit(1)
+        else:
+            print("Unexpected error! Exiting with code 2.")
+            sys.exit(2)
+    except Exception as other:
+        print("Unexpected exception:", repr(other))
+        sys.exit(2)
+
+if __name__ == "__main__":
+    main()
