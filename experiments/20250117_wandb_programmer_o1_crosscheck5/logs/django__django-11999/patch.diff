diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index ee45bb941e..e17f1d7bdc 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -749,7 +749,7 @@ class Field(RegisterLookupMixin):
     def contribute_to_class(self, cls, name, private_only=False):
         """
         Register the field with the model class it belongs to.
-
+    
         If private_only is True, create a separate instance of this field
         for every subclass of cls, even if cls is not an abstract model.
         """
@@ -763,8 +763,12 @@ class Field(RegisterLookupMixin):
             if not getattr(cls, self.attname, None):
                 setattr(cls, self.attname, self.descriptor_class(self))
         if self.choices is not None:
-            setattr(cls, 'get_%s_display' % self.name,
-                    partialmethod(cls._get_FIELD_display, field=self))
+            method_name = 'get_%s_display' % self.name
+            # Only create the auto method if it doesn't already exist.
+            if not hasattr(cls, method_name):
+                from functools import partialmethod
+                setattr(cls, method_name, partialmethod(cls._get_FIELD_display, field=self))
+    
 
     def get_filter_kwargs_for_object(self, obj):
         """
diff --git a/test_get_field_display_override.py b/test_get_field_display_override.py
new file mode 100644
index 0000000000..59c70c95e5
--- /dev/null
+++ b/test_get_field_display_override.py
@@ -0,0 +1,44 @@
+import sys
+import django
+from django.conf import settings
+from django.db import models
+
+def main():
+    # Provide minimal settings:
+    if not settings.configured:
+        settings.configure(
+            INSTALLED_APPS=[],
+            DATABASES={
+                'default': {
+                    'ENGINE': 'django.db.backends.sqlite3',
+                    'NAME': ':memory:',
+                }
+            },
+        )
+    django.setup()
+
+    class FooBarOverride(models.Model):
+        foo_bar = models.CharField(
+            max_length=2,
+            choices=(('1', 'foo'), ('2', 'bar')),
+        )
+        def get_foo_bar_display(self):
+            return "something"
+
+        class Meta:
+            app_label = "my_fake_app"
+
+    print("Begin test: get_FIELD_display override check.")
+    inst = FooBarOverride()
+    inst.foo_bar = '1'
+    val = inst.get_foo_bar_display()
+    print(f"Value returned from inst.get_foo_bar_display(): {val!r}")
+    if val == "something":
+        print("Test passes: The override is respected.")
+        sys.exit(0)
+    else:
+        print("Test fails: The override is NOT respected.")
+        sys.exit(1)
+
+if __name__ == '__main__':
+    main()
