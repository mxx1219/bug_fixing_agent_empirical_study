diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py
index e4ddc8f017..7a284a2d5f 100644
--- a/django/contrib/admin/utils.py
+++ b/django/contrib/admin/utils.py
@@ -2,6 +2,10 @@ import datetime
 import decimal
 from collections import defaultdict
 
+from django.db.models import JSONField
+
+
+
 from django.core.exceptions import FieldDoesNotExist
 from django.db import models, router
 from django.db.models.constants import LOOKUP_SEP
@@ -398,10 +402,18 @@ def display_for_field(value, field, empty_value_display):
         return formats.number_format(value)
     elif isinstance(field, models.FileField) and value:
         return format_html('<a href="{}">{}</a>', value.url, value)
+    elif isinstance(field, JSONField):
+        # Use the form field to properly prepare the JSON for display
+        form_field = field.formfield()
+        try:
+            return form_field.prepare_value(value)
+        except Exception:
+            return display_for_value(value, empty_value_display)
     else:
         return display_for_value(value, empty_value_display)
 
 
+
 def display_for_value(value, empty_value_display, boolean=False):
     from django.contrib.admin.templatetags.admin_list import _boolean_icon
 
diff --git a/test_readonly_jsonfield_display.py b/test_readonly_jsonfield_display.py
new file mode 100644
index 0000000000..37d3fed07c
--- /dev/null
+++ b/test_readonly_jsonfield_display.py
@@ -0,0 +1,38 @@
+#!/usr/bin/env python
+
+import sys
+import json
+
+from django.db import models
+from django.contrib.admin.utils import display_for_field
+
+try:
+    from django.db.models import JSONField
+except ImportError:
+    # For older Django versions that had JSONField in postgres
+    from django.contrib.postgres.fields import JSONField
+
+def main():
+    print("Running JSONField display test...")
+    test_value = {"foo": "bar"}
+    field = JSONField(null=True)
+    displayed = display_for_field(test_value, field, empty_value_display="(empty)")
+    print("display_for_field returned:", displayed)
+
+    # Attempt to parse the returned display string as JSON:
+    try:
+        parsed = json.loads(displayed)
+        print("JSON parse succeeded:", parsed)
+        if parsed == test_value:
+            print("Test passed: JSON parsed exactly as expected.")
+            sys.exit(0)
+        else:
+            print("Test failed: JSON loaded, but not as expected. parsed =", parsed)
+            sys.exit(1)
+    except json.JSONDecodeError as e:
+        print("Test failed: Could not parse display string as valid JSON.")
+        print("JSONDecodeError:", e)
+        sys.exit(1)
+
+if __name__ == "__main__":
+    main()
