diff --git a/django/utils/dateparse.py b/django/utils/dateparse.py
index 8d08b7d1d3..e38c5c5526 100644
--- a/django/utils/dateparse.py
+++ b/django/utils/dateparse.py
@@ -29,7 +29,7 @@ datetime_re = re.compile(
 standard_duration_re = re.compile(
     r'^'
     r'(?:(?P<days>-?\d+) (days?, )?)?'
-    r'((?:(?P<hours>-?\d+):)(?=\d+:\d+))?'
+    r'((?:(?P<hours>-?\d+):)(?=-?\d+:-?\d+))?'
     r'(?:(?P<minutes>-?\d+):)?'
     r'(?P<seconds>-?\d+)'
     r'(?:\.(?P<microseconds>\d{1,6})\d{0,6})?'
@@ -122,25 +122,33 @@ def parse_datetime(value):
 
 
 def parse_duration(value):
-    """Parse a duration string and return a datetime.timedelta.
-
-    The preferred format for durations in Django is '%d %H:%M:%S.%f'.
-
-    Also supports ISO 8601 representation and PostgreSQL's day-time interval
-    format.
-    """
+    import datetime
+    import re
+    print("DEBUG parse_duration input:", repr(value))
     match = (
-        standard_duration_re.match(value) or
-        iso8601_duration_re.match(value) or
-        postgres_interval_re.match(value)
+        standard_duration_re.match(value)
+        or postgres_interval_re.match(value)
+        or iso8601_duration_re.match(value)
     )
+    print("DEBUG parse_duration match:", match and match.groupdict())
     if match:
         kw = match.groupdict()
         days = datetime.timedelta(float(kw.pop('days', 0) or 0))
         sign = -1 if kw.pop('sign', '+') == '-' else 1
         if kw.get('microseconds'):
             kw['microseconds'] = kw['microseconds'].ljust(6, '0')
-        if kw.get('seconds') and kw.get('microseconds') and kw['seconds'].startswith('-'):
+        # If seconds is explicitly negative, preserve that sign for microseconds.
+        if kw.get('seconds') and kw['seconds'].startswith('-') and kw.get('microseconds'):
             kw['microseconds'] = '-' + kw['microseconds']
+        # Convert numeric strings to floats to build a timedelta.
         kw = {k: float(v) for k, v in kw.items() if v is not None}
-        return days + sign * datetime.timedelta(**kw)
+        result = days + sign * datetime.timedelta(**kw)
+        print("DEBUG parse_duration result:", result)
+        return result
+    print("DEBUG parse_duration result: None")
+    return None
+
+
+
+
+
diff --git a/test_neg_duration.py b/test_neg_duration.py
new file mode 100644
index 0000000000..426a3828ae
--- /dev/null
+++ b/test_neg_duration.py
@@ -0,0 +1,33 @@
+#!/usr/bin/env python3
+import sys
+import datetime
+from django.utils.dateparse import parse_duration
+
+def main():
+    print("Starting negative duration parse test script (Django partial-negativity).")
+    pairs = [
+        # Under Django's partial-negativity, "-1:02:03" means: hours = -1, minutes=2, seconds=3 => -1 day + 23:02:03
+        ("-1:02:03", datetime.timedelta(days=-1, hours=23, minutes=2, seconds=3)),
+
+        # Similarly, "-0:00:05" => hours = -0, minutes=0, seconds=5 => basically +5 seconds
+        # No negative day offset here, so final is 0:00:05
+        ("-0:00:05", datetime.timedelta(seconds=5)),
+    ]
+    exit_code = 0
+
+    for inp, expected in pairs:
+        result = parse_duration(inp)
+        print(f"Testing input={inp}, got={result}, expected={expected}")
+        if result != expected:
+            print("FAIL: mismatch.")
+            exit_code = 1
+
+    if exit_code == 0:
+        print("Test passed.")
+    else:
+        print("Test failed.")
+
+    sys.exit(exit_code)
+
+if __name__ == "__main__":
+    main()
