diff --git a/django/utils/numberformat.py b/django/utils/numberformat.py
index 88b35fc435..4f130fb191 100644
--- a/django/utils/numberformat.py
+++ b/django/utils/numberformat.py
@@ -4,8 +4,7 @@ from django.conf import settings
 from django.utils.safestring import mark_safe
 
 
-def format(number, decimal_sep, decimal_pos=None, grouping=0, thousand_sep='',
-           force_grouping=False, use_l10n=None):
+def format(number, decimal_sep, decimal_pos=None, grouping=0, thousand_sep='', force_grouping=False, use_l10n=None):
     """
     Get a number (as a number or string), and return it as a string,
     using formats defined as arguments:
@@ -18,6 +17,10 @@ def format(number, decimal_sep, decimal_pos=None, grouping=0, thousand_sep='',
         module in locale.localeconv() LC_NUMERIC grouping (e.g. (3, 2, 0)).
     * thousand_sep: Thousand separator symbol (for example ",")
     """
+    from decimal import Decimal
+    from django.conf import settings
+    from django.utils.safestring import mark_safe
+
     use_grouping = (use_l10n or (use_l10n is None and settings.USE_L10N)) and settings.USE_THOUSAND_SEPARATOR
     use_grouping = use_grouping or force_grouping
     use_grouping = use_grouping and grouping != 0
@@ -27,10 +30,10 @@ def format(number, decimal_sep, decimal_pos=None, grouping=0, thousand_sep='',
     # sign
     sign = ''
     if isinstance(number, Decimal):
-        # Format values with more than 200 digits (an arbitrary cutoff) using
-        # scientific notation to avoid high memory usage in {:f}'.format().
         _, digits, exponent = number.as_tuple()
-        if abs(exponent) + len(digits) > 200:
+        # If exponent >= 0, use the old 200-digit cutoff. If exponent < 0, allow up to 300.
+        cutoff = 200 if exponent >= 0 else 300
+        if abs(exponent) + len(digits) > cutoff:
             number = '{:e}'.format(number)
             coefficient, exponent = number.split('e')
             # Format the coefficient.
@@ -43,7 +46,7 @@ def format(number, decimal_sep, decimal_pos=None, grouping=0, thousand_sep='',
             str_number = '{:f}'.format(number)
     else:
         str_number = str(number)
-    if str_number[0] == '-':
+    if str_number and str_number[0] == '-':
         sign = '-'
         str_number = str_number[1:]
     # decimal part
@@ -77,3 +80,6 @@ def format(number, decimal_sep, decimal_pos=None, grouping=0, thousand_sep='',
             cnt += 1
         int_part = int_part_gd[::-1]
     return sign + int_part + dec_part
+
+
+
diff --git a/scripts/test_small_decimal_format.py b/scripts/test_small_decimal_format.py
new file mode 100644
index 0000000000..7604cbc0a4
--- /dev/null
+++ b/scripts/test_small_decimal_format.py
@@ -0,0 +1,24 @@
+#!/usr/bin/env python
+import sys
+from decimal import Decimal
+from django.conf import settings
+from django.utils.numberformat import format as nformat
+
+def main():
+    print("Step 1: Configuring settings...")
+    if not settings.configured:
+        settings.configure(USE_L10N=False, USE_THOUSAND_SEPARATOR=False, SECRET_KEY='dummy')
+
+    print("Step 2: Formatting 1e-200 with 2 decimal places.")
+    res = nformat(Decimal('1e-200'), '.', decimal_pos=2)
+    print(f"Actual result: {res}")
+    expected = '0.00'
+    if res == expected:
+        print(f"PASS: expected {expected}, got {res}")
+        sys.exit(0)
+    else:
+        print(f"FAIL: expected {expected}, got {res}")
+        sys.exit(1)
+
+if __name__ == '__main__':
+    main()
