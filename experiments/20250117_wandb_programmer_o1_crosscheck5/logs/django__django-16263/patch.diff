diff --git a/django/db/models/query.py b/django/db/models/query.py
index de49e1c58c..09ba45c265 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -613,16 +613,31 @@ class QuerySet(AltersData):
 
     def count(self):
         """
-        Perform a SELECT COUNT() and return the number of records as an
-        integer.
-
-        If the QuerySet is already fully cached, return the length of the
-        cached results set to avoid multiple SELECT COUNT(*) calls.
+        Perform a SELECT COUNT() and return the number of records as an integer.
+        Strip out any user-supplied annotations that are not referenced by
+        filters, distinct, combinators, slicing, or ordering. Also unset
+        group_by so that they aren't forced into a subquery.
         """
         if self._result_cache is not None:
             return len(self._result_cache)
-
-        return self.query.get_count(using=self.db)
+    
+        clone = self._chain()
+    
+        # Remove user-supplied annotations if they're not required by the query.
+        if (
+            clone.query.annotations
+            and not clone.query.distinct_fields
+            and not clone.query.combinator
+            and not clone.query.is_sliced
+            and not clone.query.order_by
+        ):
+            clone.query.annotations.clear()
+            clone.query.set_annotation_mask(None)
+            clone.query.group_by = None
+    
+        return clone.query.get_count(using=clone.db)
+    
+    
 
     async def acount(self):
         return await sync_to_async(self.count)()
diff --git a/test_unused_annotation_in_count.py b/test_unused_annotation_in_count.py
new file mode 100644
index 0000000000..b4a7dd87b1
--- /dev/null
+++ b/test_unused_annotation_in_count.py
@@ -0,0 +1,65 @@
+import sys
+import django
+from django.conf import settings
+from django.db import models, connection
+from django.test.utils import CaptureQueriesContext
+
+# Minimal settings so we can run queries against an in-memory DB.
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            "default": {
+                "ENGINE": "django.db.backends.sqlite3",
+                "NAME": ":memory:",
+            }
+        },
+        INSTALLED_APPS=["__main__"],
+        SECRET_KEY="secret",
+    )
+
+django.setup()
+
+class Book(models.Model):
+    title = models.CharField(max_length=255)
+
+    class Meta:
+        app_label = "__main__"
+
+class Chapter(models.Model):
+    book = models.ForeignKey(Book, on_delete=models.CASCADE, related_name="chapters")
+    text = models.CharField(max_length=255)
+
+    class Meta:
+        app_label = "__main__"
+
+def main():
+    # Create tables for these models in the in-memory database.
+    with connection.schema_editor() as editor:
+        editor.create_model(Book)
+        editor.create_model(Chapter)
+
+    # Insert some sample data.
+    book = Book.objects.create(title="A Book")
+    Chapter.objects.create(book=book, text="Chapter One")
+
+    # Capture the SQL queries while performing annotate().count().
+    with CaptureQueriesContext(connection) as ctx:
+        total = Book.objects.annotate(numchapters=models.Count("chapters")).count()
+    final_query = ctx.captured_queries[-1]["sql"].lower()
+    print("Final Query:", final_query)
+
+    # Check if the unused annotation is still present in the final query.
+    if "numchapters" in final_query:
+        print("Unused annotation present in final count query => Problem not fixed.")
+        sys.exit(1)
+    else:
+        print("No unused annotation found => Problem is fixed.")
+        sys.exit(0)
+
+if __name__ == "__main__":
+    try:
+        main()
+    except Exception as exc:
+        print("Error running test:", exc)
+        sys.exit(1)
