diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py
index ac0b62d0bf..033e08bf18 100644
--- a/django/db/models/aggregates.py
+++ b/django/db/models/aggregates.py
@@ -68,11 +68,11 @@ class Aggregate(Func):
         return []
 
     def as_sql(self, compiler, connection, **extra_context):
-        extra_context['distinct'] = 'DISTINCT' if self.distinct else ''
+        extra_context["distinct"] = "DISTINCT " if self.distinct else ""
         if self.filter:
             if connection.features.supports_aggregate_filter_clause:
                 filter_sql, filter_params = self.filter.as_sql(compiler, connection)
-                template = self.filter_template % extra_context.get('template', self.template)
+                template = self.filter_template % extra_context.get("template", self.template)
                 sql, params = super().as_sql(
                     compiler, connection, template=template, filter=filter_sql,
                     **extra_context
@@ -86,6 +86,7 @@ class Aggregate(Func):
                 copy.set_source_expressions([Case(condition)] + source_expressions[1:])
                 return super(Aggregate, copy).as_sql(compiler, connection, **extra_context)
         return super().as_sql(compiler, connection, **extra_context)
+      
 
     def _get_repr_options(self):
         options = super()._get_repr_options()
diff --git a/test_bug_count_case_distinct.py b/test_bug_count_case_distinct.py
new file mode 100644
index 0000000000..6c6a2d4136
--- /dev/null
+++ b/test_bug_count_case_distinct.py
@@ -0,0 +1,67 @@
+import sys
+import os
+import traceback
+
+def main():
+    print("Step 1: Configure minimal Django settings in-memory for testing.")
+    os.environ["DJANGO_SETTINGS_MODULE"] = "test_bug_count_case_distinct_settings"
+    try:
+        from django.conf import settings
+        if not settings.configured:
+            settings.configure(
+                DEBUG=True,
+                SECRET_KEY="test",
+                INSTALLED_APPS=["django.contrib.contenttypes"],
+                DATABASES={
+                    "default": {
+                        "ENGINE": "django.db.backends.sqlite3",
+                        "NAME": ":memory:",
+                    }
+                },
+                MIDDLEWARE=[],
+                TEMPLATES=[],
+            )
+    except Exception as e:
+        print("Failed to configure Django settings:", e)
+        sys.exit(1)
+
+    print("Step 2: Initialize Django and define a trivial model.")
+    try:
+        import django
+        django.setup()
+        from django.db import models
+
+        class SimpleModel(models.Model):
+            name = models.CharField(max_length=100)
+            class Meta:
+                app_label = "contenttypes"
+
+        print("Step 3: Construct a query that uses Count with distinct=True and Case.")
+        from django.db.models import Count, Case, When, IntegerField
+
+        qs = SimpleModel.objects.annotate(
+            count_case_distinct=Count(
+                Case(
+                    When(name__isnull=False, then="id"),
+                    output_field=IntegerField(),
+                ),
+                distinct=True
+            )
+        )
+        compiled_sql = str(qs.query)
+        print("Compiled SQL:", compiled_sql)
+
+        print("Step 4: Check if the compiled SQL contains 'DISTINCTCASE' substring (bug).")
+        if "DISTINCTCASE" in compiled_sql:
+            print("BUG DETECTED: 'DISTINCTCASE' found in compiled SQL.")
+            sys.exit(1)
+        else:
+            print("No 'DISTINCTCASE' substring found. Likely fixed.")
+            sys.exit(0)
+    except Exception as e:
+        print("Unexpected exception while constructing query or checking output.")
+        traceback.print_exc()
+        sys.exit(1)
+
+if __name__ == "__main__":
+    main()
