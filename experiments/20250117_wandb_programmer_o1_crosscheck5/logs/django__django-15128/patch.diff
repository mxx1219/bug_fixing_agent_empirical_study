diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index aaf35ee37c..8e5a920620 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -557,11 +557,11 @@ class Query(BaseExpression):
     def combine(self, rhs, connector):
         """
         Merge the 'rhs' query into the current one (with any 'rhs' effects
-        being applied *after* (that is, "to the right of") anything in the
-        current query. 'rhs' is not modified during a call to this function.
-
+        being applied *after* anything in the current query). 'rhs' is not
+        modified during a call to this function.
+    
         The 'connector' parameter describes how to connect filters from the
-        'rhs' query.
+        'rhs' query (AND/OR).
         """
         if self.model != rhs.model:
             raise TypeError('Cannot combine queries on two different base models.')
@@ -571,93 +571,82 @@ class Query(BaseExpression):
             raise TypeError('Cannot combine a unique query with a non-unique query.')
         if self.distinct_fields != rhs.distinct_fields:
             raise TypeError('Cannot combine queries with different distinct fields.')
-
-        # Work out how to relabel the rhs aliases, if necessary.
+    
+        # If there's any overlap in alias names, rename rhs's aliases to avoid collisions.
+        overlap = set(self.alias_map).intersection(rhs.alias_map)
+        if overlap:
+            rhs.bump_prefix(self)
+    
+        # Prepare to unify rhs's base alias with ours so parent_alias lookups don't fail.
         change_map = {}
-        conjunction = (connector == AND)
-
-        # Determine which existing joins can be reused. When combining the
-        # query with AND we must recreate all joins for m2m filters. When
-        # combining with OR we can reuse joins. The reason is that in AND
-        # case a single row can't fulfill a condition like:
-        #     revrel__col=1 & revrel__col=2
-        # But, there might be two different related rows matching this
-        # condition. In OR case a single True is enough, so single row is
-        # enough, too.
-        #
-        # Note that we will be creating duplicate joins for non-m2m joins in
-        # the AND case. The results will be correct but this creates too many
-        # joins. This is something that could be fixed later on.
+        rhs_aliases = list(rhs.alias_map)
+        if not rhs_aliases:
+            # If rhs is empty, there's nothing to merge.
+            return
+    
+        # The 0th alias in rhs.alias_map is its base alias. Map it to our base_alias.
+        self.get_initial_alias()  # Ensure our base_table is set
+        rhs_base_alias = rhs_aliases[0]
+        change_map[rhs_base_alias] = self.base_table
+    
+        # Determine which existing joins can be reused.
+        conjunction = (connector == 'AND')
         reuse = set() if conjunction else set(self.alias_map)
-        # Base table must be present in the query - this is the same
-        # table on both sides.
-        self.get_initial_alias()
+    
+        from django.db.models.sql.constants import INNER
+        # Use the JoinPromoter class defined below in query.py (line ~2386).
         joinpromoter = JoinPromoter(connector, 2, False)
-        joinpromoter.add_votes(
-            j for j in self.alias_map if self.alias_map[j].join_type == INNER)
+        joinpromoter.add_votes(j for j in self.alias_map if self.alias_map[j].join_type == INNER)
         rhs_votes = set()
-        # Now, add the joins from rhs query into the new query (skipping base
-        # table).
-        rhs_tables = list(rhs.alias_map)[1:]
+    
+        # Now, add the joins from rhs query into the new query, skipping the base alias.
+        rhs_tables = rhs_aliases[1:]
         for alias in rhs_tables:
             join = rhs.alias_map[alias]
-            # If the left side of the join was already relabeled, use the
-            # updated alias.
+            # If the left side of the join was already relabeled, use the updated alias.
             join = join.relabeled_clone(change_map)
             new_alias = self.join(join, reuse=reuse)
             if join.join_type == INNER:
                 rhs_votes.add(new_alias)
-            # We can't reuse the same join again in the query. If we have two
-            # distinct joins for the same connection in rhs query, then the
-            # combined query must have two joins, too.
             reuse.discard(new_alias)
             if alias != new_alias:
                 change_map[alias] = new_alias
             if not rhs.alias_refcount[alias]:
-                # The alias was unused in the rhs query. Unref it so that it
-                # will be unused in the new query, too. We have to add and
-                # unref the alias so that join promotion has information of
-                # the join type for the unused alias.
                 self.unref_alias(new_alias)
         joinpromoter.add_votes(rhs_votes)
         joinpromoter.update_join_types(self)
-
-        # Combine subqueries aliases to ensure aliases relabelling properly
-        # handle subqueries when combining where and select clauses.
+    
+        # Merge subquery aliases so alias relabeling works in where/select clauses.
         self.subq_aliases |= rhs.subq_aliases
-
-        # Now relabel a copy of the rhs where-clause and add it to the current
-        # one.
+    
+        # Relabel a copy of rhs's where-clause and add it.
         w = rhs.where.clone()
         w.relabel_aliases(change_map)
         self.where.add(w, connector)
-
-        # Selection columns and extra extensions are those provided by 'rhs'.
+    
+        # Selection columns and extra extensions are those provided by rhs.
         if rhs.select:
             self.set_select([col.relabeled_clone(change_map) for col in rhs.select])
         else:
             self.select = ()
-
-        if connector == OR:
-            # It would be nice to be able to handle this, but the queries don't
-            # really make sense (or return consistent value sets). Not worth
-            # the extra complexity when you can write a real query instead.
+    
+        if connector == 'OR':
+            # extra(select=...) on both sides with OR is disallowed.
             if self.extra and rhs.extra:
                 raise ValueError("When merging querysets using 'or', you cannot have extra(select=...) on both sides.")
         self.extra.update(rhs.extra)
-        extra_select_mask = set()
-        if self.extra_select_mask is not None:
-            extra_select_mask.update(self.extra_select_mask)
-        if rhs.extra_select_mask is not None:
-            extra_select_mask.update(rhs.extra_select_mask)
+        extra_select_mask = set(self.extra_select_mask or ())
+        extra_select_mask.update(rhs.extra_select_mask or ())
         if extra_select_mask:
             self.set_extra_mask(extra_select_mask)
         self.extra_tables += rhs.extra_tables
-
-        # Ordering uses the 'rhs' ordering, unless it has none, in which case
-        # the current ordering is used.
+    
+        # Ordering uses rhs's ordering unless it has none.
         self.order_by = rhs.order_by or self.order_by
         self.extra_order_by = rhs.extra_order_by or self.extra_order_by
+    
+    
+    
 
     def deferred_to_data(self, target, callback):
         """
diff --git a/test_alias_collision.py b/test_alias_collision.py
new file mode 100644
index 0000000000..71f3bc8b90
--- /dev/null
+++ b/test_alias_collision.py
@@ -0,0 +1,74 @@
+import sys
+import traceback
+import django
+from django.conf import settings
+from django.db import connections
+from django.db.models import Q
+
+def main():
+    # Initialize Django if not already
+    if not settings.configured:
+        settings.configure(
+            INSTALLED_APPS=[
+                'django.contrib.contenttypes',
+                'django.contrib.auth',
+                'test_alias_collision',  # Our custom app
+            ],
+            DATABASES={
+                'default': {
+                    'ENGINE': 'django.db.backends.sqlite3',
+                    'NAME': ':memory:',
+                }
+            },
+            MIDDLEWARE=[],
+        )
+        django.setup()
+
+    try:
+        from test_alias_collision.models import Foo, Bar, Baz, Qux
+
+        # Enumerate & drop all tables, then VACUUM to finalize.
+        with connections['default'].cursor() as cursor:
+            cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
+            all_tables = [row[0] for row in cursor.fetchall()]
+            for t in all_tables:
+                cursor.execute(f'DROP TABLE IF EXISTS "{t}"')
+            cursor.execute("VACUUM")
+
+        # Now re-create our tables in memory
+        with connections['default'].schema_editor() as editor:
+            editor.create_model(Baz)
+            editor.create_model(Qux)
+            editor.create_model(Foo)
+            editor.create_model(Bar)
+            # Don't call create_model() for Qux.bazes.through again --
+            # Django already created that M2M table when Qux was created.
+
+        # Minimal reproduction
+        qux = Qux.objects.create()
+        qs1 = qux.foos.all()
+        qs2 = Foo.objects.filter(
+            Q(bars__baz__in=qux.bazes.all()) | Q(other_bars__baz__in=qux.bazes.all())
+        )
+
+        # The problematic calls that originally raised AssertionError:
+        try:
+            _ = qs2 | qs1
+            _ = (qs2 | qs1).count()
+            _ = qs1 | qs2
+            _ = (qs1 | qs2).count()
+        except AssertionError:
+            print("AssertionError encountered, bug not fixed.")
+            traceback.print_exc()
+            sys.exit(1)
+
+        print("No AssertionError. These queries ran successfully.")
+        sys.exit(0)
+
+    except Exception as e:
+        print("Encountered unexpected exception, failing.")
+        traceback.print_exc()
+        sys.exit(2)
+
+if __name__ == "__main__":
+    main()
diff --git a/test_alias_collision/__init__.py b/test_alias_collision/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_alias_collision/apps.py b/test_alias_collision/apps.py
new file mode 100644
index 0000000000..cd276e9ff9
--- /dev/null
+++ b/test_alias_collision/apps.py
@@ -0,0 +1,4 @@
+from django.apps import AppConfig
+
+class TestAliasCollisionConfig(AppConfig):
+    name = 'test_alias_collision'
diff --git a/test_alias_collision/models.py b/test_alias_collision/models.py
new file mode 100644
index 0000000000..948813aa79
--- /dev/null
+++ b/test_alias_collision/models.py
@@ -0,0 +1,15 @@
+from django.db import models
+
+class Baz(models.Model):
+    pass
+
+class Qux(models.Model):
+    bazes = models.ManyToManyField(Baz, related_name="quxes")
+
+class Foo(models.Model):
+    qux = models.ForeignKey(Qux, on_delete=models.CASCADE, related_name="foos")
+
+class Bar(models.Model):
+    foo = models.ForeignKey(Foo, on_delete=models.CASCADE, related_name="bars")
+    another_foo = models.ForeignKey(Foo, on_delete=models.CASCADE, related_name="other_bars")
+    baz = models.ForeignKey(Baz, on_delete=models.CASCADE, related_name="bars")
