diff --git a/django/contrib/contenttypes/fields.py b/django/contrib/contenttypes/fields.py
index ed98ecb48c..320d012af7 100644
--- a/django/contrib/contenttypes/fields.py
+++ b/django/contrib/contenttypes/fields.py
@@ -171,40 +171,37 @@ class GenericForeignKey(FieldCacheMixin):
     def get_prefetch_queryset(self, instances, queryset=None):
         if queryset is not None:
             raise ValueError("Custom queryset can't be used for this lookup.")
-
-        # For efficiency, group the instances by content type and then do one
-        # query per model
+    
+        from collections import defaultdict
         fk_dict = defaultdict(set)
-        # We need one instance for each group in order to get the right db:
         instance_dict = {}
         ct_attname = self.model._meta.get_field(self.ct_field).get_attname()
+    
         for instance in instances:
-            # We avoid looking for values if either ct_id or fkey value is None
             ct_id = getattr(instance, ct_attname)
             if ct_id is not None:
                 fk_val = getattr(instance, self.fk_field)
                 if fk_val is not None:
                     fk_dict[ct_id].add(fk_val)
                     instance_dict[ct_id] = instance
-
+    
         ret_val = []
         for ct_id, fkeys in fk_dict.items():
             instance = instance_dict[ct_id]
             ct = self.get_content_type(id=ct_id, using=instance._state.db)
             ret_val.extend(ct.get_all_objects_for_this_type(pk__in=fkeys))
-
-        # For doing the join in Python, we have to match both the FK val and the
-        # content type, so we use a callable that returns a (fk, class) pair.
+    
         def gfk_key(obj):
             ct_id = getattr(obj, ct_attname)
             if ct_id is None:
                 return None
             else:
-                model = self.get_content_type(id=ct_id,
-                                              using=obj._state.db).model_class()
-                return (model._meta.pk.get_prep_value(getattr(obj, self.fk_field)),
-                        model)
-
+                model = self.get_content_type(id=ct_id, using=obj._state.db).model_class()
+                if model is None:
+                    return None
+                # Convert the stored FK string to the proper Python type.
+                return (model._meta.pk.to_python(getattr(obj, self.fk_field)), model)
+    
         return (
             ret_val,
             lambda obj: (obj.pk, obj.__class__),
@@ -213,6 +210,7 @@ class GenericForeignKey(FieldCacheMixin):
             self.name,
             True,
         )
+    
 
     def __get__(self, instance, cls=None):
         if instance is None:
diff --git a/test_app/__init__.py b/test_app/__init__.py
new file mode 100644
index 0000000000..61e4666dfc
--- /dev/null
+++ b/test_app/__init__.py
@@ -0,0 +1 @@
+# Empty __init__ to make test_app a package.
diff --git a/test_app/apps.py b/test_app/apps.py
new file mode 100644
index 0000000000..b00435505e
--- /dev/null
+++ b/test_app/apps.py
@@ -0,0 +1,4 @@
+from django.apps import AppConfig
+
+class TestAppConfig(AppConfig):
+    name = "test_app"
diff --git a/test_app/migrations/0001_initial.py b/test_app/migrations/0001_initial.py
new file mode 100644
index 0000000000..236a09a4c0
--- /dev/null
+++ b/test_app/migrations/0001_initial.py
@@ -0,0 +1,32 @@
+# Generated by Django 3.0.dev20190413103531 on 2025-01-13 11:14
+
+from django.db import migrations, models
+import django.db.models.deletion
+import uuid
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+        ('contenttypes', '0002_remove_content_type_name'),
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Foo',
+            fields=[
+                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
+                ('data', models.CharField(blank=True, max_length=50, null=True)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Bar',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('foo_object_id', models.CharField(db_index=True, max_length=255)),
+                ('foo_content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
+            ],
+        ),
+    ]
diff --git a/test_app/migrations/__init__.py b/test_app/migrations/__init__.py
new file mode 100644
index 0000000000..98f30cca87
--- /dev/null
+++ b/test_app/migrations/__init__.py
@@ -0,0 +1 @@
+# Empty migrations init
diff --git a/test_app/models.py b/test_app/models.py
new file mode 100644
index 0000000000..499b3bf2be
--- /dev/null
+++ b/test_app/models.py
@@ -0,0 +1,19 @@
+import uuid
+from django.db import models
+from django.contrib.contenttypes.fields import GenericForeignKey
+from django.contrib.contenttypes.models import ContentType
+
+class Foo(models.Model):
+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
+    data = models.CharField(max_length=50, null=True, blank=True)
+
+    def __str__(self):
+        return f'Foo {self.pk}'
+
+class Bar(models.Model):
+    foo_content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)
+    foo_object_id = models.CharField(max_length=255, db_index=True)
+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')
+
+    def __str__(self):
+        return f'Bar referencing {self.foo_object_id}'
diff --git a/test_gfk_prefetch_uuid.py b/test_gfk_prefetch_uuid.py
new file mode 100644
index 0000000000..01716a1873
--- /dev/null
+++ b/test_gfk_prefetch_uuid.py
@@ -0,0 +1,84 @@
+import sys
+import traceback
+
+"""
+Checks if the GenericForeignKey+UUID prefetch bug is fixed.
+
+Exits 0 if bar0.foo is successfully prefetched,
+non-zero if bar0.foo is None or an exception occurs.
+"""
+
+from django.conf import settings
+import django
+
+def main():
+    print("[TEST] Starting test_gfk_prefetch_uuid.py")
+
+    # Configure Django with 'test_app' installed.
+    if not settings.configured:
+        settings.configure(
+            INSTALLED_APPS=[
+                "django.contrib.contenttypes",
+                "test_app.apps.TestAppConfig",
+            ],
+            DATABASES={
+                "default": {
+                    "ENGINE": "django.db.backends.sqlite3",
+                    "NAME": ":memory:",
+                }
+            },
+            MIDDLEWARE=[],
+            TEMPLATES=[],
+        )
+    django.setup()
+
+    from django.core.management import call_command
+
+    # Run migrations without silencing stdout, so we can see any errors or logs.
+    try:
+        print("[TEST] Running makemigrations test_app ...")
+        call_command("makemigrations", "test_app", interactive=False, verbosity=1)
+        print("[TEST] Running migrate contenttypes ...")
+        call_command("migrate", "contenttypes", interactive=False, verbosity=1)
+        print("[TEST] Running migrate test_app ...")
+        call_command("migrate", "test_app", interactive=False, verbosity=1)
+    except Exception as e:
+        print("[TEST ERROR] Could not run migrations:", e)
+        traceback.print_exc()
+        sys.exit(1)
+
+    from test_app.models import Foo, Bar
+    from django.contrib.contenttypes.models import ContentType
+
+    # Create a Foo
+    foo_obj = Foo.objects.create(data="Testing GFK with UUID PK")
+    print("[TEST] Created Foo with PK =", foo_obj.pk, "(type:", type(foo_obj.pk), ")")
+
+    # Create a Bar referencing Foo via GFK
+    bar_obj = Bar.objects.create(
+        foo_content_type=ContentType.objects.get_for_model(Foo),
+        foo_object_id=str(foo_obj.pk)
+    )
+    print("[TEST] Created Bar referencing Foo via GFK. ID:", bar_obj.pk)
+
+    # Attempt to prefetch
+    try:
+        bars = Bar.objects.all().prefetch_related("foo")
+        bar0 = bars[0]
+        print("[TEST] bar0.foo =", bar0.foo)
+        print("[TEST] bar0.foo type =", type(bar0.foo))
+        if bar0.foo is None:
+            print("[TEST FAILURE] bar0.foo is None => GFK+UUID prefetch bug persists!")
+            sys.exit(1)
+        else:
+            print("[TEST SUCCESS] bar0.foo is not None => GFK+UUID prefetch bug is fixed!")
+            sys.exit(0)
+    except Exception:
+        print("[TEST ERROR] Exception occurred during prefetch!")
+        traceback.print_exc()
+        sys.exit(1)
+
+
+if __name__ == "__main__":
+    main()
+  
\ No newline at end of file
diff --git a/test_output.log b/test_output.log
new file mode 100644
index 0000000000..4fc098bbf5
--- /dev/null
+++ b/test_output.log
@@ -0,0 +1 @@
+[TEST] Starting test_gfk_prefetch_uuid.py
