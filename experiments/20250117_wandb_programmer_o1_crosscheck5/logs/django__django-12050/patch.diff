diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index ea51912e8b..970ac95398 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1053,6 +1053,7 @@ class Query(BaseExpression):
     def resolve_lookup_value(self, value, can_reuse, allow_joins, simple_col):
         if hasattr(value, 'resolve_expression'):
             kwargs = {'reuse': can_reuse, 'allow_joins': allow_joins}
+            from django.db.models.expressions import F
             if isinstance(value, F):
                 kwargs['simple_col'] = simple_col
             value = value.resolve_expression(self, **kwargs)
@@ -1062,6 +1063,7 @@ class Query(BaseExpression):
             resolved_values = []
             for sub_value in value:
                 if hasattr(sub_value, 'resolve_expression'):
+                    from django.db.models.expressions import F
                     if isinstance(sub_value, F):
                         resolved_values.append(sub_value.resolve_expression(
                             self, reuse=can_reuse, allow_joins=allow_joins,
@@ -1073,8 +1075,10 @@ class Query(BaseExpression):
                         ))
                 else:
                     resolved_values.append(sub_value)
-            value = tuple(resolved_values)
+            # Preserve the original iterable type
+            value = type(value)(resolved_values)
         return value
+    
 
     def solve_lookup_type(self, lookup):
         """
diff --git a/test_list_coercion.py b/test_list_coercion.py
new file mode 100644
index 0000000000..81044e1e90
--- /dev/null
+++ b/test_list_coercion.py
@@ -0,0 +1,24 @@
+#!/usr/bin/env python3
+
+import sys
+from django.db.models.sql.query import Query
+
+def main():
+    print("Starting test_list_coercion.py...")
+    print("Creating a Query object without a model...")
+    q = Query(None)
+    original_value = [1, 2, 3]
+    print(f"Original value: {original_value}, type={type(original_value)}")
+
+    resolved_value = q.resolve_lookup_value(original_value, can_reuse=False, allow_joins=True, simple_col=False)
+    print(f"Resolved value: {resolved_value}, type={type(resolved_value)}")
+
+    if isinstance(resolved_value, tuple):
+        print("FAIL: The list was coerced into a tuple.")
+        sys.exit(1)
+    else:
+        print("PASS: The list remained a list.")
+        sys.exit(0)
+
+if __name__ == "__main__":
+    main()
