diff --git a/django/utils/deprecation.py b/django/utils/deprecation.py
index b2c681b33c..e278a2f201 100644
--- a/django/utils/deprecation.py
+++ b/django/utils/deprecation.py
@@ -108,16 +108,28 @@ class MiddlewareMixin:
             self._is_coroutine = asyncio.coroutines._is_coroutine
 
     def __call__(self, request):
+        import inspect
+        from asgiref.sync import async_to_sync
         # Exit out to async mode, if needed
         if asyncio.iscoroutinefunction(self.get_response):
             return self.__acall__(request)
         response = None
         if hasattr(self, 'process_request'):
             response = self.process_request(request)
+            # If process_request returned a coroutine, await it.
+            if inspect.iscoroutine(response):
+                response = async_to_sync(lambda: response)()
         response = response or self.get_response(request)
+        # If get_response returned a coroutine, await it.
+        if inspect.iscoroutine(response):
+            response = async_to_sync(lambda: response)()
         if hasattr(self, 'process_response'):
             response = self.process_response(request, response)
+            # If process_response returned a coroutine (unlikely, but safe):
+            if inspect.iscoroutine(response):
+                response = async_to_sync(lambda: response)()
         return response
+    
 
     async def __acall__(self, request):
         """
diff --git a/scripts/test_first_middleware_coroutine.py b/scripts/test_first_middleware_coroutine.py
new file mode 100644
index 0000000000..5ec2f0ab01
--- /dev/null
+++ b/scripts/test_first_middleware_coroutine.py
@@ -0,0 +1,82 @@
+import sys
+import asyncio
+import inspect
+
+import django
+from django.conf import settings
+from django.core.handlers.base import BaseHandler
+from django.core.handlers.asgi import ASGIRequest
+from django.http import HttpResponse
+from django.urls import re_path
+from django.utils.deprecation import MiddlewareMixin
+from io import BytesIO
+
+async def real_async_view(request):
+    # This is a properly async function returning an HttpResponse.
+    return HttpResponse("Hello from real_async_view")
+
+def sync_wrapper(request):
+    # This is a normal (sync) function returning the coroutine object
+    # produced by real_async_view, without awaiting it.
+    return real_async_view(request)
+
+urlpatterns = [
+    re_path(r'^$', sync_wrapper),
+]
+
+class FirstMiddleware(MiddlewareMixin):
+    sync_capable = True
+    async_capable = False  # Force sync-only path.
+
+    def process_response(self, request, response):
+        print("FirstMiddleware process_response sees:", type(response))
+        if inspect.iscoroutine(response):
+            print("FAIL: The response is a coroutine instead of HttpResponse.")
+            sys.exit(1)
+        if not isinstance(response, HttpResponse):
+            print("FAIL: The response is not an HttpResponse.")
+            sys.exit(1)
+        return response
+
+class SecondMiddleware(MiddlewareMixin):
+    def process_response(self, request, response):
+        return response
+
+def main():
+    settings.configure(
+        SECRET_KEY='test_secret',
+        MIDDLEWARE=[
+            '__main__.FirstMiddleware',  # sync-only
+            '__main__.SecondMiddleware', # normal
+        ],
+        DEBUG=True,
+        ROOT_URLCONF='__main__',
+        ALLOWED_HOSTS=['*']
+    )
+    django.setup()
+
+    handler = BaseHandler()
+    handler.load_middleware(is_async=True)
+
+    scope = {
+        'type': 'http',
+        'method': 'GET',
+        'path': '/',
+        'headers': [],
+    }
+    body_file = BytesIO()
+    request = ASGIRequest(scope, body_file)
+
+    loop = asyncio.get_event_loop()
+    response = loop.run_until_complete(handler.get_response_async(request))
+
+    print("Final response type:", type(response))
+    if not isinstance(response, HttpResponse):
+        print("FAIL: Final response is not an HttpResponse.")
+        sys.exit(1)
+
+    print("PASS: Everything is good.")
+    sys.exit(0)
+
+if __name__ == '__main__':
+    main()
