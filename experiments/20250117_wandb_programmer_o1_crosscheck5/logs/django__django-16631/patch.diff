diff --git a/django/contrib/auth/__init__.py b/django/contrib/auth/__init__.py
index 155330c596..e2fd1f7d7a 100644
--- a/django/contrib/auth/__init__.py
+++ b/django/contrib/auth/__init__.py
@@ -185,6 +185,8 @@ def get_user(request):
     If no user is retrieved, return an instance of `AnonymousUser`.
     """
     from .models import AnonymousUser
+    from django.conf import settings
+    from django.utils.crypto import constant_time_compare, salted_hmac
 
     user = None
     try:
@@ -196,12 +198,28 @@ def get_user(request):
         if backend_path in settings.AUTHENTICATION_BACKENDS:
             backend = load_backend(backend_path)
             user = backend.get_user(user_id)
-            # Verify the session
+            # Verify the session.
             if hasattr(user, "get_session_auth_hash"):
                 session_hash = request.session.get(HASH_SESSION_KEY)
-                session_hash_verified = session_hash and constant_time_compare(
-                    session_hash, user.get_session_auth_hash()
-                )
+                session_hash_verified = False
+                if session_hash:
+                    # First try verifying with the current SECRET_KEY.
+                    if constant_time_compare(session_hash, user.get_session_auth_hash()):
+                        session_hash_verified = True
+                    else:
+                        # Attempt fallback keys.
+                        for fk in settings.SECRET_KEY_FALLBACKS:
+                            fallback_hash = salted_hmac(
+                                "django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash",
+                                user.password,
+                                fk,
+                                algorithm="sha256"
+                            ).hexdigest()
+                            if constant_time_compare(session_hash, fallback_hash):
+                                # Upgrade the session's auth hash to the new key's version.
+                                request.session[HASH_SESSION_KEY] = user.get_session_auth_hash()
+                                session_hash_verified = True
+                                break
                 if not session_hash_verified:
                     request.session.flush()
                     user = None
@@ -209,6 +227,7 @@ def get_user(request):
     return user or AnonymousUser()
 
 
+
 def get_permission_codename(action, opts):
     """
     Return the codename of the permission for the specified action.
diff --git a/tests/__init__.py b/tests/__init__.py
new file mode 100644
index 0000000000..c1a73605e4
--- /dev/null
+++ b/tests/__init__.py
@@ -0,0 +1 @@
+# Empty file so "tests" is recognized as a python package
diff --git a/tests/fake_backend.py b/tests/fake_backend.py
new file mode 100644
index 0000000000..032a816e6f
--- /dev/null
+++ b/tests/fake_backend.py
@@ -0,0 +1,25 @@
+from django.utils.crypto import salted_hmac
+
+# Minimal authentication backend that returns a mock user with pk=1,
+# whose session auth hash is computed with the NEWSECRETKEY.
+
+class FakeBackend:
+    def get_user(self, user_id):
+        if user_id != "1":
+            return None
+
+        class MockUser:
+            pk = 1
+            password = "pretend_hashed_password"
+            def get_session_auth_hash(self):
+                return salted_hmac(
+                    "django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash",
+                    self.password,
+                    "NEWSECRETKEY",
+                    algorithm="sha256",
+                ).hexdigest()
+
+        return MockUser()
+
+    def authenticate(self, request, **credentials):
+        return None
diff --git a/tests/test_secret_key_fallback_session.py b/tests/test_secret_key_fallback_session.py
new file mode 100644
index 0000000000..ddcd6d5036
--- /dev/null
+++ b/tests/test_secret_key_fallback_session.py
@@ -0,0 +1,79 @@
+import sys
+
+def main():
+    print("Configuring Django for SECRET_KEY fallback test...")
+
+    from django.conf import settings
+    import django
+
+    settings.configure(
+        SECRET_KEY="NEWSECRETKEY",
+        SECRET_KEY_FALLBACKS=["OLDSECRETKEY"],
+        INSTALLED_APPS=[
+            "django.contrib.auth",
+            "django.contrib.contenttypes",
+        ],
+        AUTHENTICATION_BACKENDS=[
+            "django.contrib.auth.backends.ModelBackend",
+        ],
+        MIDDLEWARE=[],
+        DATABASES={
+            "default": {
+                "ENGINE": "django.db.backends.sqlite3",
+                "NAME": ":memory:",
+            }
+        },
+    )
+    django.setup()
+
+    # Run migrations so the User model can be used.
+    from django.core.management import call_command
+    call_command("migrate", run_syncdb=True, interactive=False)
+
+    from django.contrib.auth import (
+        get_user,
+        BACKEND_SESSION_KEY,
+        SESSION_KEY,
+        HASH_SESSION_KEY,
+        get_user_model,
+    )
+    from django.contrib.auth.models import AnonymousUser
+    from django.utils.crypto import salted_hmac
+
+    # Create a user with password="pretend_hashed_password" so session_auth_hash calls match.
+    UserModel = get_user_model()
+    user = UserModel.objects.create_user(username="someone")
+    user.password = "pretend_hashed_password"
+    user.save()
+
+    # Create a session auth hash that was computed with OLDSECRETKEY.
+    old_hash = salted_hmac(
+        "django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash",
+        "pretend_hashed_password",
+        "OLDSECRETKEY",
+        algorithm="sha256",
+    ).hexdigest()
+
+    mocked_session = {
+        SESSION_KEY: str(user.pk),
+        BACKEND_SESSION_KEY: "django.contrib.auth.backends.ModelBackend",
+        HASH_SESSION_KEY: old_hash,
+    }
+
+    class MockRequest:
+        session = mocked_session
+
+    request = MockRequest()
+
+    # This will fail if fallback logic isn't honored, because ModelBackend.get_user() finds
+    # the real user, but get_user() flushes session if the old hash can't be recognized.
+    user2 = get_user(request)
+    if isinstance(user2, AnonymousUser):
+        print("User is Anonymous => fallback logic failed => exit(1).")
+        sys.exit(1)
+    else:
+        print(f"User is real (pk={user2.pk}) => fallback logic WORKS => exit(0).")
+        sys.exit(0)
+
+if __name__ == "__main__":
+    main()
