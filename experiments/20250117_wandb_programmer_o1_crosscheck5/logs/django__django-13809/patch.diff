diff --git a/django/core/management/commands/runserver.py b/django/core/management/commands/runserver.py
index d9fb088350..0c2a4ec286 100644
--- a/django/core/management/commands/runserver.py
+++ b/django/core/management/commands/runserver.py
@@ -51,6 +51,11 @@ class Command(BaseCommand):
             '--noreload', action='store_false', dest='use_reloader',
             help='Tells Django to NOT use the auto-reloader.',
         )
+        parser.add_argument(
+            '--skip-checks', action='store_true', dest='skip_checks',
+            help='Skip system checks and migrations before starting the server.'
+        )
+    
 
     def execute(self, *args, **options):
         if options['no_color']:
@@ -105,41 +110,50 @@ class Command(BaseCommand):
             self.inner_run(None, **options)
 
     def inner_run(self, *args, **options):
-        # If an exception was silenced in ManagementUtility.execute in order
-        # to be raised in the child process, raise it now.
+        import sys
+        from django.utils import autoreload
         autoreload.raise_last_exception()
-
+    
         threading = options['use_threading']
-        # 'shutdown_message' is a stealth option.
         shutdown_message = options.get('shutdown_message', '')
         quit_command = 'CTRL-BREAK' if sys.platform == 'win32' else 'CONTROL-C'
-
-        self.stdout.write("Performing system checks...\n\n")
-        self.check(display_num_errors=True)
-        # Need to check migrations here, so can't use the
-        # requires_migrations_check attribute.
-        self.check_migrations()
+    
+        skip_checks = options.get('skip_checks', False)
+        if skip_checks:
+            self.stdout.write("Skipping system checks...\n\n")
+            self.stdout.flush()
+        else:
+            self.stdout.write("Performing system checks...\n\n")
+            self.stdout.flush()
+            self.check(display_num_errors=True)
+            self.check_migrations()
+    
+        from datetime import datetime
         now = datetime.now().strftime('%B %d, %Y - %X')
-        self.stdout.write(now)
-        self.stdout.write((
+        self.stdout.write(now + "\n")
+        self.stdout.flush()
+        self.stdout.write(
             "Django version %(version)s, using settings %(settings)r\n"
             "Starting development server at %(protocol)s://%(addr)s:%(port)s/\n"
-            "Quit the server with %(quit_command)s."
-        ) % {
-            "version": self.get_version(),
-            "settings": settings.SETTINGS_MODULE,
-            "protocol": self.protocol,
-            "addr": '[%s]' % self.addr if self._raw_ipv6 else self.addr,
-            "port": self.port,
-            "quit_command": quit_command,
-        })
-
+            "Quit the server with %(quit_command)s." % {
+                "version": self.get_version(),
+                "settings": settings.SETTINGS_MODULE,
+                "protocol": self.protocol,
+                "addr": '[%s]' % self.addr if self._raw_ipv6 else self.addr,
+                "port": self.port,
+                "quit_command": quit_command,
+            }
+        )
+        self.stdout.write("\n")
+        self.stdout.flush()
+    
+        import socket, errno, os
+        from django.core.servers.basehttp import run
         try:
             handler = self.get_handler(*args, **options)
             run(self.addr, int(self.port), handler,
                 ipv6=self.use_ipv6, threading=threading, server_cls=self.server_cls)
         except OSError as e:
-            # Use helpful error messages instead of ugly tracebacks.
             ERRORS = {
                 errno.EACCES: "You don't have permission to access that port.",
                 errno.EADDRINUSE: "That port is already in use.",
@@ -150,9 +164,12 @@ class Command(BaseCommand):
             except KeyError:
                 error_text = e
             self.stderr.write("Error: %s" % error_text)
-            # Need to use an OS exit because sys.exit doesn't work in a thread
             os._exit(1)
         except KeyboardInterrupt:
             if shutdown_message:
                 self.stdout.write(shutdown_message)
+                self.stdout.flush()
             sys.exit(0)
+    
+    
+    
diff --git a/test_runserver_skip_checks.py b/test_runserver_skip_checks.py
new file mode 100644
index 0000000000..9e5a8c7548
--- /dev/null
+++ b/test_runserver_skip_checks.py
@@ -0,0 +1,122 @@
+import subprocess
+import sys
+import time
+import select
+
+def read_streams(proc, saw_skip_msg_key, success_msg, fail_msg):
+    """
+    Read simultaneously from stdout and stderr.
+    If we see 'Skipping system checks', set saw_skip_msg_key to True.
+    """
+    saw_skip_msg = False
+    start_time = time.time()
+    while True:
+        # Give up if 4 seconds have passed with no lines.
+        if time.time() - start_time > 4:
+            break
+
+        reads = [proc.stdout.fileno(), proc.stderr.fileno()]
+        rlist, _, _ = select.select(reads, [], [], 0.1)
+        if not rlist:
+            continue
+        for fd in rlist:
+            if fd == proc.stdout.fileno():
+                line = proc.stdout.readline()
+                if line:
+                    print("STDOUT:", line.strip())
+                    if saw_skip_msg_key in line:
+                        saw_skip_msg = True
+                        print(success_msg)
+                        return saw_skip_msg
+            elif fd == proc.stderr.fileno():
+                line = proc.stderr.readline()
+                if line:
+                    print("STDERR:", line.strip())
+    return saw_skip_msg
+
+def main():
+    print("Test script to verify --skip-checks in runserver via 'python -m django'")
+    print("1) Checking behavior when --skip-checks is supplied...")
+
+    with subprocess.Popen(
+        [
+            sys.executable, "-m", "django", "runserver",
+            "--skip-checks", "--noreload", "--nothreading", 
+            "--settings=tests.test_sqlite", "8082"
+        ],
+        stdout=subprocess.PIPE,
+        stderr=subprocess.PIPE,
+        text=True,
+        bufsize=1
+    ) as proc_skip:
+        saw_skip_msg = read_streams(
+            proc_skip,
+            "Skipping system checks",
+            "Found 'Skipping system checks' in output!",
+            "ERROR: Did not see 'Skipping system checks' in runserver output."
+        )
+        # Kill the server
+        proc_skip.terminate()
+        try:
+            proc_skip.wait(timeout=5)
+        except Exception:
+            pass
+
+        if not saw_skip_msg:
+            print("ERROR: Did not see 'Skipping system checks' in runserver output.")
+            sys.exit(1)
+
+    print("2) Checking behavior without --skip-checks...")
+
+    with subprocess.Popen(
+        [
+            sys.executable, "-m", "django", "runserver",
+            "--noreload", "--nothreading", 
+            "--settings=tests.test_sqlite", "8083"
+        ],
+        stdout=subprocess.PIPE,
+        stderr=subprocess.PIPE,
+        text=True,
+        bufsize=1
+    ) as proc_normal:
+        saw_checks_msg = False
+        start_time = time.time()
+        while True:
+            if time.time() - start_time > 4:
+                break
+            reads = [proc_normal.stdout.fileno(), proc_normal.stderr.fileno()]
+            rlist, _, _ = select.select(reads, [], [], 0.1)
+            if not rlist:
+                continue
+            for fd in rlist:
+                if fd == proc_normal.stdout.fileno():
+                    line = proc_normal.stdout.readline()
+                    if line:
+                        print("STDOUT:", line.strip())
+                        if "Performing system checks" in line:
+                            saw_checks_msg = True
+                            print("Found 'Performing system checks' in output!")
+                            break
+                elif fd == proc_normal.stderr.fileno():
+                    line = proc_normal.stderr.readline()
+                    if line:
+                        print("STDERR:", line.strip())
+            if saw_checks_msg:
+                break
+
+        # Kill the server
+        proc_normal.terminate()
+        try:
+            proc_normal.wait(timeout=5)
+        except Exception:
+            pass
+
+        if not saw_checks_msg:
+            print("ERROR: Did not see 'Performing system checks' in runserver output.")
+            sys.exit(2)
+
+    print("All checks passed.")
+    sys.exit(0)
+
+if __name__ == "__main__":
+    main()
diff --git a/tests/test_sqlite.py b/tests/test_sqlite.py
index 099f37e56d..d131590416 100644
--- a/tests/test_sqlite.py
+++ b/tests/test_sqlite.py
@@ -29,3 +29,5 @@ PASSWORD_HASHERS = [
 ]
 
 DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'
+
+DEBUG = True
