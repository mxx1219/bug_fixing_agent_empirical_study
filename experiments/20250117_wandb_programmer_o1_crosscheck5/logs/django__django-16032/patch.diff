diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py
index 866e38df83..c5ea1a80aa 100644
--- a/django/db/models/lookups.py
+++ b/django/db/models/lookups.py
@@ -417,13 +417,14 @@ class In(FieldGetDbPrepValueIterableMixin, BuiltinLookup):
 
     def get_prep_lookup(self):
         from django.db.models.sql.query import Query  # avoid circular import
-
+    
         if isinstance(self.rhs, Query):
             self.rhs.clear_ordering(clear_default=True)
-            if not self.rhs.has_select_fields:
-                self.rhs.clear_select_clause()
-                self.rhs.add_fields(["pk"])
+            # Always reduce the SELECT to just ['pk'] for subqueries used with __in
+            self.rhs.clear_select_clause()
+            self.rhs.add_fields(["pk"])
         return super().get_prep_lookup()
+    
 
     def process_rhs(self, compiler, connection):
         db_rhs = getattr(self.rhs, "_db", None)
diff --git a/test_alias_in_subquery.py b/test_alias_in_subquery.py
new file mode 100644
index 0000000000..bbdd41e860
--- /dev/null
+++ b/test_alias_in_subquery.py
@@ -0,0 +1,99 @@
+import sys
+import traceback
+
+import django
+from django.conf import settings
+from django.db import OperationalError, models
+
+"""
+Standalone script to reproduce/fix the bug:
+'__in doesn't clear selected fields on the RHS when QuerySet.alias() is used after annotate().'
+Exits 0 if fixed, 1 if still present.
+"""
+
+# Minimal Django setup for an in-memory test DB
+settings.configure(
+    DEBUG=True,
+    SECRET_KEY='test',
+    INSTALLED_APPS=['__main__'],  # Use the current script as the "app"
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+)
+django.setup()
+
+class Publisher(models.Model):
+    name = models.CharField(max_length=100)
+
+class Book(models.Model):
+    title = models.CharField(max_length=100)
+    pages = models.IntegerField()
+    publisher = models.ForeignKey(Publisher, on_delete=models.CASCADE)
+
+def main():
+    print("Running test_alias_in_subquery.py...")
+    try:
+        # Migrate
+        with django.db.connection.schema_editor() as editor:
+            editor.create_model(Publisher)
+            editor.create_model(Book)
+
+        # Setup test data
+        publisher1 = Publisher.objects.create(name='Apress')
+        publisher2 = Publisher.objects.create(name='Sams')
+        publisher3 = Publisher.objects.create(name='Prentice Hall')
+        publisher4 = Publisher.objects.create(name='Morgan Kaufmann')
+        # Some books with varying pages
+        Book.objects.create(title='Short Book', pages=100, publisher=publisher1)
+        Book.objects.create(title='Big Book', pages=500, publisher=publisher1)
+        Book.objects.create(title='Huge Book', pages=600, publisher=publisher2)
+        Book.objects.create(title='Medium Book', pages=450, publisher=publisher3)
+        Book.objects.create(title='Giant Book', pages=1000, publisher=publisher4)
+
+        # Subquery on Book with annotate + alias
+        long_books_qs = (
+            Book.objects.filter(pages__gt=400)
+                .annotate(book_annotate=models.Value(1))
+                .alias(book_alias=models.Value(1))
+        )
+        # Filter Publishers where book__in = that subquery
+        # 'sub-select returns 10 columns - expected 1' if not fixed
+        result_qs = Publisher.objects.filter(book__in=long_books_qs).values("name")
+        result_list = list(result_qs)
+        print("Query returned:", result_list)
+        # Expect the 4 publishers to appear
+        expected = [
+          {'name':'Apress'},
+          {'name':'Sams'},
+          {'name':'Prentice Hall'},
+          {'name':'Morgan Kaufmann'},
+        ]
+        if len(result_list) != 4:
+            print("ERROR: Did not get the 4 expected results!")
+            sys.exit(1)
+        # Compare results ignoring ordering
+        fetched_names = sorted([row['name'] for row in result_list])
+        expected_names = sorted([row['name'] for row in expected])
+        if fetched_names != expected_names:
+            print("ERROR: Mismatch in publisher names.")
+            print("Got:", fetched_names)
+            print("Expected:", expected_names)
+            sys.exit(1)
+
+        print("Subquery in '__in' works correctly. Test PASSED.")
+        sys.exit(0)
+
+    except OperationalError:
+        print("OperationalError: sub-select returns multiple columns => BUG present.")
+        traceback.print_exc()
+        sys.exit(1)
+    except Exception as e:
+        print("Unexpected exception:", e)
+        traceback.print_exc()
+        sys.exit(1)
+
+if __name__ == "__main__":
+    main()
