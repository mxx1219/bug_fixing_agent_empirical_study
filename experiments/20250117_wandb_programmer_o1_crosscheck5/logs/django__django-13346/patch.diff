diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py
index fafc1beee8..68df0bc5b1 100644
--- a/django/db/models/fields/json.py
+++ b/django/db/models/fields/json.py
@@ -478,6 +478,67 @@ class KeyTransformGt(KeyTransformNumericLookupMixin, lookups.GreaterThan):
 class KeyTransformGte(KeyTransformNumericLookupMixin, lookups.GreaterThanOrEqual):
     pass
 
+class KeyTransformIn(lookups.In):
+    can_use_none_as_rhs = True
+
+    def process_lhs(self, compiler, connection):
+        lhs, lhs_params = super().process_lhs(compiler, connection)
+        # For SQLite or other backends, we can add special-case logic for null if needed.
+        return lhs, lhs_params
+
+    def process_rhs(self, compiler, connection):
+        import json
+        rhs, rhs_params = super().process_rhs(compiler, connection)
+        # Treat None as 'null' for consistency with JSONExact.
+        if rhs == '%s' and rhs_params == [None]:
+            rhs_params = ['null']
+
+        # MySQL: Wrap each param in JSON_EXTRACT(...).
+        if connection.vendor == 'mysql':
+            func = ["JSON_EXTRACT(%s, '$')"] * len(rhs_params)
+            rhs = rhs % tuple(func)
+
+        # Oracle: Convert each param into JSON_QUERY(...) or JSON_VALUE(...), same pattern as KeyTransformExact
+        elif connection.vendor == 'oracle':
+            func = []
+            for value in rhs_params:
+                if value == 'null':
+                    val = None
+                else:
+                    val = json.loads(value)
+                function = 'JSON_QUERY' if isinstance(val, (list, dict)) else 'JSON_VALUE'
+                json_data = json.dumps({'value': val})
+                func.append("%s('%s', '$.value')" % (function, json_data))
+            rhs = rhs % tuple(func)
+            rhs_params = []
+
+        # SQLite: Use JSON_EXTRACT for non-null values, matching KeyTransformExact.
+        elif connection.vendor == 'sqlite':
+            func = ["JSON_EXTRACT(%s, '$')" if param != 'null' else '%s' for param in rhs_params]
+            rhs = rhs % tuple(func)
+
+        return rhs, rhs_params
+
+    def as_oracle(self, compiler, connection):
+        # Handle the special case of a single 'null' in the IN list just as KeyTransformExact does.
+        rhs, rhs_params = super().process_rhs(compiler, connection)
+        if rhs_params == ['null']:
+            # Field has key and it's NULL.
+            has_key_expr = HasKey(self.lhs.lhs, self.lhs.key_name)
+            has_key_sql, has_key_params = has_key_expr.as_oracle(compiler, connection)
+            is_null_expr = self.lhs.get_lookup('isnull')(self.lhs, True)
+            is_null_sql, is_null_params = is_null_expr.as_sql(compiler, connection)
+            return (
+                '%s AND %s' % (has_key_sql, is_null_sql),
+                tuple(has_key_params) + tuple(is_null_params),
+            )
+        return super().as_sql(compiler, connection)
+
+
+KeyTransform.register_lookup(KeyTransformIn)
+
+
+
 
 KeyTransform.register_lookup(KeyTransformExact)
 KeyTransform.register_lookup(KeyTransformIExact)
diff --git a/test_json_key_transform_in.py b/test_json_key_transform_in.py
new file mode 100644
index 0000000000..921c13cc7b
--- /dev/null
+++ b/test_json_key_transform_in.py
@@ -0,0 +1,62 @@
+import sys
+import json
+import django
+from django.conf import settings
+from django.db import models, connection
+
+def main():
+    print("Step 1: Configure settings.")
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY="testsecret",
+        DATABASES={
+            "default": {
+                "ENGINE": "django.db.backends.sqlite3",
+                "NAME": ":memory:",
+            }
+        },
+        INSTALLED_APPS=[
+            "django.contrib.contenttypes",
+        ],
+    )
+
+    print("Step 2: Setup Django.")
+    django.setup()
+
+    print("Step 3: Define inline model with JSONField, pointing to contenttypes as the app_label.")
+    class OurModel(models.Model):
+        our_field = models.JSONField()
+
+        class Meta:
+            app_label = "contenttypes"
+            db_table = "testjson_ourmodel"
+            managed = False
+
+    print("Step 4: Create table via schema_editor.")
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(OurModel)
+
+    print("Step 5: Insert sample objects where our_field.key = 0.")
+    insert_sql = "INSERT INTO testjson_ourmodel (our_field) VALUES (%s)"
+    for _ in range(312):
+        with connection.cursor() as cursor:
+            cursor.execute(insert_sql, (json.dumps({"key": 0}),))
+
+    print("Step 6: Run the two filters to see if the 'in' lookup uses KeyTransformIn properly.")
+    first_items = OurModel.objects.filter(our_field__key__in=[0])
+    len_first = len(first_items)
+    print(f"len_first={len_first}")
+
+    second_items = OurModel.objects.filter(our_field__key=0)
+    len_second = len(second_items)
+    print(f"len_second={len_second}")
+
+    if len_first == len_second:
+        print(f"Success: KeyTransformIn is working as expected. Both are {len_first}.")
+        sys.exit(0)
+    else:
+        print(f"Failure: KeyTransformIn is not working. len_first={len_first}, len_second={len_second}")
+        sys.exit(1)
+
+if __name__ == "__main__":
+    main()
