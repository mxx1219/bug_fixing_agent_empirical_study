diff --git a/django/core/management/base.py b/django/core/management/base.py
index abc6f79a15..8c371fc9cc 100644
--- a/django/core/management/base.py
+++ b/django/core/management/base.py
@@ -43,16 +43,14 @@ class SystemCheckError(CommandError):
     pass
 
 
-class CommandParser(ArgumentParser):
+class CommandParser(argparse.ArgumentParser):
     """
     Customized ArgumentParser class to improve some error messages and prevent
     SystemExit in several occasions, as SystemExit is unacceptable when a
     command is called programmatically.
     """
 
-    def __init__(
-        self, *, missing_args_message=None, called_from_command_line=None, **kwargs
-    ):
+    def __init__(self, *, missing_args_message=None, called_from_command_line=None, **kwargs):
         self.missing_args_message = missing_args_message
         self.called_from_command_line = called_from_command_line
         super().__init__(**kwargs)
@@ -71,6 +69,32 @@ class CommandParser(ArgumentParser):
         else:
             raise CommandError("Error: %s" % message)
 
+    def add_subparsers(self, **kwargs):
+        """
+        Override add_subparsers to ensure all subparsers also use CommandParser
+        and inherit the specialized Django error formatting.
+        """
+        subparsers_action = super().add_subparsers(**kwargs)
+        old_add_parser = subparsers_action.add_parser
+
+        def new_add_parser(name, **kwargs2):
+            # Pull out our custom arguments, or fall back to those of the parent.
+            missing_args_msg = kwargs2.pop("missing_args_message", self.missing_args_message)
+            called_from_cmdline = kwargs2.pop("called_from_command_line", self.called_from_command_line)
+            # Default parser_class is the same as this class:
+            parser_class = kwargs2.pop("parser_class", type(self))
+            parser = parser_class(
+                missing_args_message=missing_args_msg,
+                called_from_command_line=called_from_cmdline,
+                **kwargs2,
+            )
+            subparsers_action._name_parser_map[name] = parser
+            return parser
+
+        subparsers_action.add_parser = new_add_parser
+        return subparsers_action
+
+
 
 def handle_default_options(options):
     """
diff --git a/test_subparsers_error_format_problem.py b/test_subparsers_error_format_problem.py
new file mode 100644
index 0000000000..5aa48b8220
--- /dev/null
+++ b/test_subparsers_error_format_problem.py
@@ -0,0 +1,37 @@
+import sys
+import argparse
+from django.core.management.base import CommandParser, CommandError
+
+def main():
+    print("[Test Script] Starting refined subparsers error format test...")
+
+    parser = CommandParser(prog="prog", description="Test subparser error format",
+                           missing_args_message="No sub-command given",
+                           called_from_command_line=False)
+    subparsers = parser.add_subparsers(required=True)
+    create_parser = subparsers.add_parser("create")
+    create_parser.add_argument("name", help="Required name argument")
+
+    args_to_test = ["create"]  # Missing "name"
+
+    print("[Test Script] Will parse:", args_to_test)
+    try:
+        parser.parse_args(args_to_test)
+        print("[Test Script] Parsing completed with no exception. This is unexpected!")
+        # If we get here, it means we didn't see a missing argument error at all, which shouldn't happen.
+        sys.exit(2)
+    except CommandError as e:
+        # This is the correct behavior with the fix: we get a CommandError, no traceback/exit.
+        print("[Test Script] Caught CommandError as expected with the fix.")
+        print("[Test Script] Exiting 0 to indicate the bug is fixed.")
+        sys.exit(0)
+    except SystemExit as e:
+        # HEAD's default Argparse-based subparser error leads to SystemExit -> potential traceback
+        print("[Test Script] SystemExit detected. This signals the bug is present.")
+        # Let's also check if 'Traceback' might appear if it reached a real unhandled exception?
+        # But typically Argparse won't say 'Traceback' unless we forcibly pass --traceback or something.
+        print("[Test Script] Exiting 1 to indicate the bug is present.")
+        sys.exit(1)
+
+if __name__ == "__main__":
+    main()
