diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py
index 97977d72ef..1df8fc4b73 100644
--- a/django/db/migrations/autodetector.py
+++ b/django/db/migrations/autodetector.py
@@ -96,9 +96,11 @@ class MigrationAutodetector:
         for name, field in sorted(fields.items()):
             deconstruction = self.deep_deconstruct(field)
             if field.remote_field and field.remote_field.model:
-                del deconstruction[2]['to']
+                # Use a safe removal instead of unconditional del.
+                deconstruction[2].pop('to', None)
             fields_def.append(deconstruction)
         return fields_def
+    
 
     def _detect_changes(self, convert_apps=None, graph=None):
         """
diff --git a/test_keyerror_autodetector.py b/test_keyerror_autodetector.py
new file mode 100644
index 0000000000..44f33da934
--- /dev/null
+++ b/test_keyerror_autodetector.py
@@ -0,0 +1,64 @@
+import sys
+import django
+from django.conf import settings
+from django.db import models
+from django.db.migrations.autodetector import MigrationAutodetector
+from django.db.migrations.state import ModelState, ProjectState
+
+# Configure Django so that "auth.User" is available and the registry is ready.
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            "django.contrib.auth",
+            "django.contrib.contenttypes",
+        ],
+        SECRET_KEY="secretkey",
+    )
+django.setup()
+
+class CustomFKField(models.ForeignKey):
+    def __init__(self, *args, **kwargs):
+        # Use an actually installed app/model reference to avoid AppRegistryNotReady.
+        kwargs["to"] = "auth.User"
+        super().__init__(*args, **kwargs)
+
+    def deconstruct(self):
+        name, path, args, kwargs = super().deconstruct()
+        # Deliberately remove "to" from kwargs so that the migration autodetector
+        # will try to del it again and cause KeyError if not handled.
+        del kwargs["to"]
+        return name, path, args, kwargs
+
+def main():
+    print("Starting KeyError autodetector test script...")
+    before = ProjectState()
+    # Just an empty model so we have some "before" state.
+    before.add_model(ModelState("auth", "User", []))
+
+    after = ProjectState()
+    after.add_model(ModelState("auth", "User", []))
+    # Add a second model with the custom field that forcibly drops 'to'.
+    after.add_model(
+        ModelState(
+            "testapp",  # label doesn't matter, as we've replaced the actual 'to' with 'auth.User'
+            "MyTestModel",
+            [
+                ("custom", CustomFKField(on_delete=models.CASCADE)),
+            ],
+        )
+    )
+
+    try:
+        MigrationAutodetector(before, after)._detect_changes()
+        print("No KeyError encountered. The code may be fixed already.")
+        sys.exit(0)
+    except KeyError as e:
+        if e.args and e.args[0] == "to":
+            print("KeyError on 'to' => BUG still present!")
+            sys.exit(1)
+        else:
+            print(f"Unexpected KeyError: {e}")
+            sys.exit(2)
+
+if __name__ == "__main__":
+    main()
