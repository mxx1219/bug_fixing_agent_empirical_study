diff --git a/django/db/migrations/state.py b/django/db/migrations/state.py
index 088f5c41f0..7690ac596f 100644
--- a/django/db/migrations/state.py
+++ b/django/db/migrations/state.py
@@ -90,14 +90,14 @@ class ProjectState:
 
     def __init__(self, models=None, real_apps=None):
         self.models = models or {}
-        # Apps to include from main registry, usually unmigrated ones
-        if real_apps:
-            self.real_apps = real_apps if isinstance(real_apps, set) else set(real_apps)
+        if real_apps is not None:
+            assert isinstance(real_apps, set), "real_apps must be a set."
+            self.real_apps = real_apps
         else:
             self.real_apps = set()
         self.is_delayed = False
-        # {remote_model_key: {model_key: [(field_name, field)]}}
         self.relations = None
+    
 
     def add_model(self, model_state):
         app_label, model_name = model_state.app_label, model_state.name_lower
diff --git a/test_real_apps_assertion.py b/test_real_apps_assertion.py
new file mode 100644
index 0000000000..38db1ca97a
--- /dev/null
+++ b/test_real_apps_assertion.py
@@ -0,0 +1,22 @@
+#!/usr/bin/env python3
+import sys
+import traceback
+
+def main():
+    print("Checking if ProjectState raises AssertionError when real_apps is a list.")
+    from django.db.migrations.state import ProjectState
+
+    try:
+        state = ProjectState(real_apps=["some_app"])
+        print("No assertion error encountered, fix not present.")
+        sys.exit(1)
+    except AssertionError:
+        print("AssertionError encountered as expected, fix is present.")
+        sys.exit(0)
+    except Exception as e:
+        print("Unexpected exception encountered:")
+        traceback.print_exc()
+        sys.exit(2)
+
+if __name__ == "__main__":
+    main()
