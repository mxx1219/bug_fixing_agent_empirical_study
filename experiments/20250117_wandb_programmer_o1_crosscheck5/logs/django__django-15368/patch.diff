diff --git a/django/db/models/query.py b/django/db/models/query.py
index f8d848e926..f41a42c9c0 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -670,19 +670,23 @@ class QuerySet:
                 when_statements = []
                 for obj in batch_objs:
                     attr = getattr(obj, field.attname)
-                    if not isinstance(attr, Expression):
+                    # Replaced the narrow isinstance(attr, Expression) check:
+                    if not hasattr(attr, 'resolve_expression'):
                         attr = Value(attr, output_field=field)
                     when_statements.append(When(pk=obj.pk, then=attr))
                 case_statement = Case(*when_statements, output_field=field)
                 if requires_casting:
+                    from django.db.models.functions import Cast
                     case_statement = Cast(case_statement, output_field=field)
                 update_kwargs[field.attname] = case_statement
             updates.append(([obj.pk for obj in batch_objs], update_kwargs))
         rows_updated = 0
+        from django.db import transaction
         with transaction.atomic(using=self.db, savepoint=False):
             for pks, update_kwargs in updates:
                 rows_updated += self.filter(pk__in=pks).update(**update_kwargs)
         return rows_updated
+    
     bulk_update.alters_data = True
 
     def get_or_create(self, defaults=None, **kwargs):
diff --git a/test_bulk_update_f_expression.py b/test_bulk_update_f_expression.py
new file mode 100644
index 0000000000..06b3570c3b
--- /dev/null
+++ b/test_bulk_update_f_expression.py
@@ -0,0 +1,71 @@
+import sys
+import django
+from django.conf import settings
+from django.apps import AppConfig, apps
+from django.db import models, connection
+from django.db.models import F
+import traceback
+
+class TestAppConfig(AppConfig):
+    name = "test_bulk_update_f_expression"
+    label = "testapp"
+
+def main():
+    print("Setting up test environment...", flush=True)
+    settings.configure(
+        INSTALLED_APPS=["test_bulk_update_f_expression.TestAppConfig"],
+        DATABASES={
+            "default": {
+                "ENGINE": "django.db.backends.sqlite3",
+                "NAME": ":memory:",
+            }
+        },
+        MIDDLEWARE=[],
+        SECRET_KEY="test_secret_key",
+        DEFAULT_AUTO_FIELD="django.db.models.AutoField",
+    )
+    django.setup()
+
+    class MyModel(models.Model):
+        name = models.CharField(max_length=100)
+        c8 = models.CharField(max_length=100, null=True)
+
+        class Meta:
+            app_label = "testapp"
+
+    # Register the model with the app registry, ignoring if it's already there.
+    try:
+        apps.register_model("testapp", MyModel)
+    except RuntimeError:
+        pass
+
+    print("Creating table with schema_editor...", flush=True)
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(MyModel)
+
+    print("Inserting a test row...", flush=True)
+    obj = MyModel.objects.create(name="TEST")
+
+    print("Assigning F('name') to c8 and calling bulk_update...", flush=True)
+    obj.c8 = F("name")
+    try:
+        MyModel.objects.bulk_update([obj], ["c8"])
+    except Exception:
+        print("Exception occurred during bulk_update:", flush=True)
+        traceback.print_exc()
+        sys.exit(1)
+
+    obj.refresh_from_db()
+    print(f"c8 after refresh_from_db(): '{obj.c8}' ; name: '{obj.name}'")
+
+    # On HEAD, the bug occurs: c8 == 'F(name)' when it should match 'TEST'.
+    # We'll exit 2 if c8 != name to confirm the bug is present.
+    if obj.c8 == obj.name:
+        print("Test PASSED unexpectedly. c8 matches the name column value.")
+        sys.exit(0)
+    else:
+        print(f"Test FAILED as expected: c8 ('{obj.c8}') != name ('{obj.name}')")
+        sys.exit(2)
+
+if __name__ == "__main__":
+    main()
