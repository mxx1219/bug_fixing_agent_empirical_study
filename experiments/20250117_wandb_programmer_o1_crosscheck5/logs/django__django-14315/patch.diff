diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py
index 3effab65a8..e1c14742a6 100644
--- a/django/db/backends/postgresql/client.py
+++ b/django/db/backends/postgresql/client.py
@@ -8,9 +8,10 @@ class DatabaseClient(BaseDatabaseClient):
 
     @classmethod
     def settings_to_cmd_args_env(cls, settings_dict, parameters):
+        import os
         args = [cls.executable_name]
         options = settings_dict.get('OPTIONS', {})
-
+    
         host = settings_dict.get('HOST')
         port = settings_dict.get('PORT')
         dbname = settings_dict.get('NAME')
@@ -22,9 +23,8 @@ class DatabaseClient(BaseDatabaseClient):
         sslrootcert = options.get('sslrootcert')
         sslcert = options.get('sslcert')
         sslkey = options.get('sslkey')
-
+    
         if not dbname and not service:
-            # Connect to the default 'postgres' db.
             dbname = 'postgres'
         if user:
             args += ['-U', user]
@@ -35,8 +35,9 @@ class DatabaseClient(BaseDatabaseClient):
         if dbname:
             args += [dbname]
         args.extend(parameters)
-
-        env = {}
+    
+        # Merge os.environ with any environment variables we want to override.
+        env = os.environ.copy()
         if passwd:
             env['PGPASSWORD'] = str(passwd)
         if service:
@@ -51,7 +52,9 @@ class DatabaseClient(BaseDatabaseClient):
             env['PGSSLKEY'] = str(sslkey)
         if passfile:
             env['PGPASSFILE'] = str(passfile)
+    
         return args, env
+    
 
     def runshell(self, parameters):
         sigint_handler = signal.getsignal(signal.SIGINT)
diff --git a/test_env_preservation.py b/test_env_preservation.py
new file mode 100644
index 0000000000..7871271a96
--- /dev/null
+++ b/test_env_preservation.py
@@ -0,0 +1,54 @@
+import os
+import subprocess
+import sys
+from unittest.mock import patch, MagicMock
+from django.db.backends.postgresql.client import DatabaseClient
+
+def main():
+    print("Step 1: Setting MYTESTENV=HELLO in os.environ ...")
+    os.environ["MYTESTENV"] = "HELLO"
+
+    print("Step 2: Creating a mock connection.settings_dict ...")
+    mock_conn = MagicMock()
+    # Minimal settings dict
+    mock_conn.settings_dict = {
+        "NAME": "mockdb",
+        "USER": "mockuser",
+        "PASSWORD": "",
+        "OPTIONS": {},
+    }
+
+    # Instantiate our DatabaseClient with the mock connection
+    client = DatabaseClient(connection=mock_conn)
+
+    print("Step 3: Patching subprocess.run to intercept the environment ...")
+    with patch('subprocess.run') as mock_run:
+        # We'll let runshell() think it's running something like '-c env'
+        # The bug is that the env param from settings_to_cmd_args_env() won't contain MYTESTENV
+        print("Calling client.runshell(...)")
+        client.runshell(["-c", "env"])
+
+        # The mock_run was called once. Let's gather its env argument
+        called_args, called_kwargs = mock_run.call_args
+        env_used = called_kwargs.get("env", None)
+        print("subprocess.run was called with env =", env_used)
+
+    print("Step 4: Checking if MYTESTENV=HELLO was preserved ...")
+    if not env_used:
+        # If env is None, ironically that means the OS environment was used, so that might pass.
+        # HEAD code uses an empty dict for env, not None, so let's check carefully.
+        print("Test failed! env argument was None or empty, implying no custom environment was passed to subprocess.")
+        sys.exit(1)
+
+    if "MYTESTENV" not in env_used:
+        print("Test failed! MYTESTENV not found in the environment passed to subprocess.")
+        sys.exit(1)
+    elif env_used["MYTESTENV"] != "HELLO":
+        print("Test failed! MYTESTENV is present but has the wrong value:", env_used["MYTESTENV"])
+        sys.exit(1)
+    else:
+        print("Test passed! MYTESTENV=HELLO was preserved.")
+        sys.exit(0)
+
+if __name__ == "__main__":
+    main()
