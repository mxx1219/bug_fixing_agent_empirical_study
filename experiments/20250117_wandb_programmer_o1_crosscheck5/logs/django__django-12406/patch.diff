diff --git a/django/contrib/contenttypes/migrations/0003_batchdata_testrun.py b/django/contrib/contenttypes/migrations/0003_batchdata_testrun.py
new file mode 100644
index 0000000000..a290e7ac90
--- /dev/null
+++ b/django/contrib/contenttypes/migrations/0003_batchdata_testrun.py
@@ -0,0 +1,28 @@
+# Generated by Django 3.1 on 2025-01-13 02:38
+
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('contenttypes', '0002_remove_content_type_name'),
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='BatchData',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=50)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='TestRun',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('data_file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.BatchData')),
+            ],
+        ),
+    ]
diff --git a/django/forms/models.py b/django/forms/models.py
index dafc11f995..02fc3cf513 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -1185,20 +1185,25 @@ class ModelChoiceField(ChoiceField):
                  required=True, widget=None, label=None, initial=None,
                  help_text='', to_field_name=None, limit_choices_to=None,
                  **kwargs):
-        if required and (initial is not None):
+        # Always remove self.empty_label if required=True.
+        if required:
             self.empty_label = None
         else:
             self.empty_label = empty_label
-
-        # Call Field instead of ChoiceField __init__() because we don't need
-        # ChoiceField.__init__().
+    
         Field.__init__(
-            self, required=required, widget=widget, label=label,
-            initial=initial, help_text=help_text, **kwargs
+            self,
+            required=required,
+            widget=widget,
+            label=label,
+            initial=initial,
+            help_text=help_text,
+            **kwargs
         )
         self.queryset = queryset
-        self.limit_choices_to = limit_choices_to   # limit the queryset later.
+        self.limit_choices_to = limit_choices_to
         self.to_field_name = to_field_name
+    
 
     def get_limit_choices_to(self):
         """
diff --git a/test_radioselect_fk.py b/test_radioselect_fk.py
new file mode 100644
index 0000000000..c36de41228
--- /dev/null
+++ b/test_radioselect_fk.py
@@ -0,0 +1,72 @@
+#!/usr/bin/env python
+
+import sys
+import os
+import django
+from django.conf import settings
+from django.db import models
+from django.forms import ModelForm, RadioSelect
+
+# Configure Django (since we have a standalone script, we need minimal settings)
+BASE_DIR = os.path.dirname(os.path.abspath(__file__))
+settings.configure(
+    SECRET_KEY='testkey',
+    DEBUG=True,
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+)
+
+django.setup()
+
+class BatchData(models.Model):
+    name = models.CharField(max_length=50)
+    class Meta:
+        app_label = 'contenttypes'
+
+class TestRun(models.Model):
+    data_file = models.ForeignKey(BatchData, on_delete=models.CASCADE, blank=False)
+    class Meta:
+        app_label = 'contenttypes'
+
+class TestRunForm(ModelForm):
+    class Meta:
+        model = TestRun
+        fields = ['data_file']
+        widgets = {
+            'data_file': RadioSelect(),
+        }
+
+def main():
+    from django.core.management import call_command
+    
+    # Make and apply migrations (under the contenttypes label)
+    call_command('makemigrations', 'contenttypes', verbosity=1)
+    call_command('migrate', verbosity=1)
+    
+    # Create a sample BatchData so there's something to select
+    bd = BatchData.objects.create(name='First Data File')
+
+    # Render a fresh form with no initial data
+    form = TestRunForm()
+    rendered = str(form['data_file'])
+
+    print("Rendered widget HTML:")
+    print(rendered)
+
+    # Fail if we see the blank choice
+    if 'value=""' in rendered or '---------' in rendered:
+        print("BUG FOUND: blank radio option labeled '---------' is present for a required FK field.")
+        sys.exit(1)
+    else:
+        print("SUCCESS: No blank radio option is present.")
+        sys.exit(0)
+
+if __name__ == '__main__':
+    main()
