diff --git a/django/forms/boundfield.py b/django/forms/boundfield.py
index 88adadb37d..28d0c2df85 100644
--- a/django/forms/boundfield.py
+++ b/django/forms/boundfield.py
@@ -1,6 +1,10 @@
 import datetime
 import re
 
+from django.core.exceptions import ValidationError
+
+
+
 from django.forms.utils import flatatt, pretty_name
 from django.forms.widgets import Textarea, TextInput
 from django.utils.functional import cached_property
@@ -231,6 +235,25 @@ class BoundField:
     @property
     def widget_type(self):
         return re.sub(r'widget$|input$', '', self.field.widget.__class__.__name__.lower())
+    def _did_change(self):
+        """
+        Return True if this BoundField has changed from its initial value, False otherwise.
+        Mirrors the old changed_data logic from BaseForm, but uses BoundField's approach.
+        """
+        if not self.field.show_hidden_initial:
+            initial_value = self.initial
+        else:
+            hidden_widget = self.field.hidden_widget()
+            initial_prefixed_name = self.form.add_initial_prefix(self.name)
+            try:
+                raw_val = self.form._widget_data_value(hidden_widget, initial_prefixed_name)
+                initial_value = self.field.to_python(raw_val)
+            except ValidationError:
+                # If to_python() fails, assume it changed.
+                return True
+    
+        return self.field.has_changed(initial_value, self.data)
+    
 
 
 @html_safe
diff --git a/django/forms/forms.py b/django/forms/forms.py
index d14037bfe9..61fadd838b 100644
--- a/django/forms/forms.py
+++ b/django/forms/forms.py
@@ -392,18 +392,28 @@ class BaseForm:
                 value = self.get_initial_for_field(field, name)
             else:
                 value = self._field_data_value(field, self.add_prefix(name))
+    
             try:
                 if isinstance(field, FileField):
-                    initial = self.get_initial_for_field(field, name)
-                    value = field.clean(value, initial)
+                    # For file fields, we pass both value and initial to .clean()
+                    value = field.clean(value, self.get_initial_for_field(field, name))
                 else:
                     value = field.clean(value)
+    
                 self.cleaned_data[name] = value
-                if hasattr(self, 'clean_%s' % name):
-                    value = getattr(self, 'clean_%s' % name)()
+    
+                # Give any custom clean_<fieldname>() a chance to run.
+                clean_method = getattr(self, "clean_%s" % name, None)
+                if clean_method is not None:
+                    value = clean_method()
                     self.cleaned_data[name] = value
+    
             except ValidationError as e:
                 self.add_error(name, e)
+    
+    
+    
+    
 
     def _clean_form(self):
         try:
@@ -436,27 +446,15 @@ class BaseForm:
 
     @cached_property
     def changed_data(self):
-        data = []
-        for name, field in self.fields.items():
-            data_value = self._field_data_value(field, self.add_prefix(name))
-            if not field.show_hidden_initial:
-                # Use the BoundField's initial as this is the value passed to
-                # the widget.
-                initial_value = self[name].initial
-            else:
-                initial_prefixed_name = self.add_initial_prefix(name)
-                hidden_widget = field.hidden_widget()
-                try:
-                    initial_value = field.to_python(
-                        self._widget_data_value(hidden_widget, initial_prefixed_name)
-                    )
-                except ValidationError:
-                    # Always assume data has changed if validation fails.
-                    data.append(name)
-                    continue
-            if field.has_changed(initial_value, data_value):
-                data.append(name)
-        return data
+        """
+        A simpler implementation that delegates to BoundField via bf._did_change().
+        """
+        changed = []
+        for name in self.fields:
+            if self[name]._did_change():
+                changed.append(name)
+        return changed
+    
 
     @property
     def media(self):
diff --git a/test_boundfield_integration.py b/test_boundfield_integration.py
new file mode 100644
index 0000000000..475efdcfc6
--- /dev/null
+++ b/test_boundfield_integration.py
@@ -0,0 +1,48 @@
+import sys
+import datetime
+import django
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=False,
+        SECRET_KEY='fake-key',
+        USE_I18N=True,
+        USE_L10N=True,
+        USE_TZ=False,
+    )
+django.setup()
+
+from django import forms
+
+"""
+Testing Django's official logic:
+ - If the user leaves a non-required field blank, cleaned_data is None.
+Exit code 0 if pass, 1 if fail.
+"""
+
+class MyForm(forms.Form):
+    date = forms.DateTimeField(required=False, initial=lambda: datetime.datetime(2020,1,1,0,0,0))
+
+def main():
+    print("STEP 1: Construct the form MyForm with empty data (non-required date).")
+    form = MyForm(data={})  # user leaves date blank
+    print("STEP 2: Calling is_valid() to trigger cleaning.")
+    valid = form.is_valid()
+    print(f"Form is_valid: {valid}")
+
+    date_cleaned = form.cleaned_data.get("date", None)
+    initial_value = form['date'].initial
+    print(f"STEP 3: form.cleaned_data['date']: {date_cleaned}")
+    print(f"STEP 4: form['date'].initial: {initial_value}")
+
+    # The official Django logic: blank user input => cleaned_data is None
+    if date_cleaned is not None:
+        print("Mismatch detected: expected None for blank input, got:", date_cleaned)
+        sys.exit(1)
+    else:
+        print("No mismatch. Behavior matches official Django logic. Exiting with code 0.")
+        sys.exit(0)
+
+if __name__ == '__main__':
+    main()
