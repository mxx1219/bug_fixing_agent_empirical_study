diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py
index 5f2e64761e..1d59ec1a60 100644
--- a/django/core/management/__init__.py
+++ b/django/core/management/__init__.py
@@ -76,29 +76,15 @@ def get_commands():
 def call_command(command_name, *args, **options):
     """
     Call the given command, with the given options and args/kwargs.
-
-    This is the primary API you should use for calling specific commands.
-
-    `command_name` may be a string or a command object. Using a string is
-    preferred unless the command object is required for further processing or
-    testing.
-
-    Some examples:
-        call_command('migrate')
-        call_command('shell', plain=True)
-        call_command('sqlmigrate', 'myapp')
-
-        from django.core.management.commands import flush
-        cmd = flush.Command()
-        call_command(cmd, verbosity=0, interactive=False)
-        # Do something with cmd ...
     """
+    from django.core.management.base import BaseCommand, CommandError
     if isinstance(command_name, BaseCommand):
         # Command object passed in.
         command = command_name
         command_name = command.__class__.__module__.split('.')[-1]
     else:
         # Load the command object by name.
+        from django.core.management import get_commands, load_command_class
         try:
             app_name = get_commands()[command_name]
         except KeyError:
@@ -120,6 +106,7 @@ def call_command(command_name, *args, **options):
     arg_options = {opt_mapping.get(key, key): value for key, value in options.items()}
     parse_args = [str(a) for a in args]
 
+    from argparse import _SubParsersAction
     def get_actions(parser):
         # Parser actions and actions from sub-parser choices.
         for opt in parser._actions:
@@ -130,12 +117,23 @@ def call_command(command_name, *args, **options):
                 yield opt
 
     parser_actions = list(get_actions(parser))
-    # Any required arguments which are passed in via **options must be passed
-    # to parse_args().
+
+    # Identify actions in required mutually exclusive groups.
+    mutually_required_actions = set()
+    if hasattr(parser, '_mutually_exclusive_groups'):
+        for group in parser._mutually_exclusive_groups:
+            if group.required:
+                for act in group._group_actions:
+                    mutually_required_actions.add(act)
+
+    # Any required arguments (or part of a required mutually exclusive group)
+    # which are passed in via **options must be passed to parse_args().
     parse_args += [
         '{}={}'.format(min(opt.option_strings), arg_options[opt.dest])
-        for opt in parser_actions if opt.required and opt.dest in options
+        for opt in parser_actions
+        if ((opt.required or opt in mutually_required_actions) and opt.dest in options)
     ]
+
     defaults = parser.parse_args(args=parse_args)
     defaults = dict(defaults._get_kwargs(), **arg_options)
     # Raise an error if any unknown options were passed.
@@ -160,6 +158,7 @@ def call_command(command_name, *args, **options):
     return command.execute(*args, **defaults)
 
 
+
 class ManagementUtility:
     """
     Encapsulate the logic of the django-admin and manage.py utilities.
diff --git a/tests/manual/test_mutually_exclusive.py b/tests/manual/test_mutually_exclusive.py
new file mode 100644
index 0000000000..b3d1fa65ab
--- /dev/null
+++ b/tests/manual/test_mutually_exclusive.py
@@ -0,0 +1,28 @@
+import sys
+import traceback
+from django.core.management import call_command, CommandError
+from django.core.management.base import BaseCommand
+
+class MyCommand(BaseCommand):
+    def add_arguments(self, parser):
+        group = parser.add_mutually_exclusive_group(required=True)
+        group.add_argument('--shop-id', type=int, default=None, dest='shop_id')
+        group.add_argument('--shop', type=str, default=None, dest='shop_name')
+
+    def handle(self, *args, **options):
+        # If handle is called, the required group has been satisfied
+        # so no CommandError from the parser.
+        print("We got shop_id =", options['shop_id'])
+        print("We got shop_name =", options['shop_name'])
+
+if __name__ == '__main__':
+    # We reproduce the problem by calling MyCommand with 'shop_id=1' via kwargs:
+    print("Testing call_command with MyCommand(shop_id=1) via kwargs ...")
+    try:
+        call_command(MyCommand(), shop_id=1)
+        print("Command succeeded. This indicates the bug is fixed.")
+        sys.exit(0)
+    except CommandError:
+        traceback.print_exc()
+        print("CommandError encountered. This indicates the bug is still present.")
+        sys.exit(1)
