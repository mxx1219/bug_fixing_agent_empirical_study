diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py
index b5453160a5..99cbfe368c 100644
--- a/django/contrib/sessions/backends/base.py
+++ b/django/contrib/sessions/backends/base.py
@@ -107,11 +107,28 @@ class SessionBase:
         return salted_hmac(key_salt, value).hexdigest()
 
     def encode(self, session_dict):
-        "Return the given session dictionary serialized and encoded as a string."
-        return signing.dumps(
-            session_dict, salt=self.key_salt, serializer=self.serializer,
-            compress=True,
-        )
+        """
+        Return the given session dictionary serialized and encoded as a string.
+    
+        If DEFAULT_HASHING_ALGORITHM == 'sha1', emit the legacy format hash:pickled_data,
+        base64-encoded, to support older Django instances during a transition.
+        Otherwise, use the new Django 3.1+ signing-based approach.
+        """
+        from django.conf import settings
+        if getattr(settings, 'DEFAULT_HASHING_ALGORITHM', None) == 'sha1':
+            import base64
+            serialized = self.serializer().dumps(session_dict)
+            h = self._hash(serialized)
+            return base64.b64encode(h.encode() + b':' + serialized).decode('ascii')
+        else:
+            from django.core import signing
+            return signing.dumps(
+                session_dict,
+                salt=self.key_salt,
+                serializer=self.serializer,
+                compress=True,
+            )
+    
 
     def decode(self, session_data):
         try:
diff --git a/test_legacy_session_encode.py b/test_legacy_session_encode.py
new file mode 100644
index 0000000000..a659046a14
--- /dev/null
+++ b/test_legacy_session_encode.py
@@ -0,0 +1,53 @@
+import sys
+import base64
+import django
+from django.conf import settings
+from django.contrib.sessions.backends.base import SessionBase
+
+def main():
+    if not settings.configured:
+        settings.configure(
+            SECRET_KEY='fake-key',
+            DEFAULT_HASHING_ALGORITHM='sha1',
+            INSTALLED_APPS=['django.contrib.sessions', 'django.contrib.contenttypes'],
+        )
+    django.setup()  # Initialize Django
+
+    print("Testing legacy encode with DEFAULT_HASHING_ALGORITHM='sha1'...")
+
+    session_dict = {'foo': 'bar'}
+    print("Creating SessionBase() instance and encoding session_dict:", session_dict)
+    session = SessionBase()
+    encoded_data = session.encode(session_dict)
+    print("Encoded session data:", encoded_data)
+
+    # Verify that it *looks* like the old, pre-3.1 format, i.e. base64-encoded
+    # containing a colon between the hash and pickled data.
+    try:
+        decoded_binary = base64.b64decode(encoded_data)
+        if b':' not in decoded_binary:
+            print("ERROR: the encoded data does not contain a colon, so it's not the legacy format.")
+            sys.exit(1)
+    except Exception as e:
+        print("ERROR: could not base64-decode the result. Exception:", e)
+        sys.exit(1)
+
+    print("Decoded base64 data contains colon - continuing to round-trip decode it now.")
+    new_session = SessionBase()
+    try:
+        round_trip = new_session.decode(encoded_data)
+    except Exception as e:
+        print("ERROR: decode() raised an exception:", e)
+        sys.exit(1)
+
+    print("Round-trip result:", round_trip)
+    if round_trip.get('foo') == 'bar':
+        print("Success: legacy encode/decode round-trip works.")
+        sys.exit(0)
+    else:
+        print("ERROR: round-trip decode does not contain 'foo' == 'bar'.")
+        sys.exit(1)
+
+if __name__ == '__main__':
+    main()
+  
\ No newline at end of file
