diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index d913658291..90d3f6b6b7 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -476,9 +476,24 @@ class CombinedExpression(SQLiteNumericMixin, Expression):
     def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False):
         c = self.copy()
         c.is_summary = summarize
+        # Resolve subexpressions first.
         c.lhs = c.lhs.resolve_expression(query, allow_joins, reuse, summarize, for_save)
         c.rhs = c.rhs.resolve_expression(query, allow_joins, reuse, summarize, for_save)
+        # Only attempt to convert to TemporalSubtraction if we're really a CombinedExpression,
+        # not a subclass like TemporalSubtraction, to avoid infinite recursion.
+        if type(self) is CombinedExpression:
+            try:
+                lhs_type = c.lhs.output_field.get_internal_type()
+                rhs_type = c.rhs.output_field.get_internal_type()
+            except (AttributeError, FieldError):
+                return c
+            datetime_fields = {'DateField', 'DateTimeField', 'TimeField'}
+            if c.connector == self.SUB and lhs_type in datetime_fields and lhs_type == rhs_type:
+                # Return a TemporalSubtraction that also has its subexpressions resolved.
+                return TemporalSubtraction(c.lhs, c.rhs).resolve_expression(query, allow_joins, reuse, summarize, for_save)
         return c
+    
+    
 
 
 class DurationExpression(CombinedExpression):
@@ -521,6 +536,16 @@ class TemporalSubtraction(CombinedExpression):
         rhs = compiler.compile(self.rhs)
         return connection.ops.subtract_temporals(self.lhs.output_field.get_internal_type(), lhs, rhs)
 
+    def get_source_expressions(self):
+        # Donâ€™t expose datetime subexpressions so unification sees only DurationField.
+        return []
+
+    def get_source_fields(self):
+        # Temporally subtracting two datetime fields yields a duration.
+        return [self.output_field]
+
+    
+
 
 @deconstructible
 class F(Combinable):
diff --git a/migrations/0001_initial.py b/migrations/0001_initial.py
new file mode 100644
index 0000000000..c92ae068c6
--- /dev/null
+++ b/migrations/0001_initial.py
@@ -0,0 +1,22 @@
+# Generated by Django 3.2 on 2025-01-13 04:36
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Experiment',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('start', models.DateTimeField()),
+                ('end', models.DateTimeField()),
+            ],
+        ),
+    ]
diff --git a/migrations/__init__.py b/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_temporal_subtraction_bug.py b/test_temporal_subtraction_bug.py
new file mode 100644
index 0000000000..8cd35cf8b3
--- /dev/null
+++ b/test_temporal_subtraction_bug.py
@@ -0,0 +1,47 @@
+import sys
+import datetime
+from django.conf import settings
+from django.db import models, connection
+from django import setup
+
+def main():
+    print("Setting up Django in-memory test for temporal subtraction bug.")
+    settings.configure(
+        INSTALLED_APPS=["__main__"],
+        DATABASES={"default": {"ENGINE": "django.db.backends.sqlite3", "NAME": ":memory:"}},
+        SECRET_KEY="abc123",
+    )
+    setup()
+
+    class Experiment(models.Model):
+        start = models.DateTimeField()
+        end = models.DateTimeField()
+        class Meta:
+            app_label = "__main__"
+
+    print("Creating table for Experiment model via schema_editor...")
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(Experiment)
+
+    try:
+        print("Creating data and running problematic query...")
+        e = Experiment.objects.create(
+            start=datetime.datetime(2023, 1, 1, 12, 0, 0),
+            end=datetime.datetime(2023, 1, 1, 14, 30, 0),
+        )
+        from django.db.models import F, Value, DurationField
+        qs = Experiment.objects.annotate(
+            delta=F("end") - F("start") + Value(datetime.timedelta(), output_field=DurationField())
+        )
+        results = list(qs)
+        for obj in results:
+            print(f"experiment ID={obj.id}, delta={obj.delta}")
+        print("No FieldError encountered. Test passes => bug is fixed.")
+        sys.exit(0)
+    except Exception as ex:
+        print(f"Error encountered: {ex}")
+        print("Bug present => test fails.")
+        sys.exit(1)
+
+if __name__ == "__main__":
+    main()
