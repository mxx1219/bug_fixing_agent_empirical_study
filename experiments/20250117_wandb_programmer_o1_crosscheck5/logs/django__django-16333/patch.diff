diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py
index d73d1c8495..125f47f89a 100644
--- a/django/contrib/auth/forms.py
+++ b/django/contrib/auth/forms.py
@@ -141,7 +141,9 @@ class UserCreationForm(forms.ModelForm):
         user.set_password(self.cleaned_data["password1"])
         if commit:
             user.save()
+            self.save_m2m()
         return user
+    
 
 
 class UserChangeForm(forms.ModelForm):
diff --git a/tests/manual_test_usercreationform_m2m.py b/tests/manual_test_usercreationform_m2m.py
new file mode 100644
index 0000000000..cfa6665bd1
--- /dev/null
+++ b/tests/manual_test_usercreationform_m2m.py
@@ -0,0 +1,75 @@
+import sys
+import os
+import django
+from django.conf import settings
+from django.core.management import call_command
+
+def configure_settings():
+    # Minimal Django settings for an in-memory test.
+    settings.configure(
+        INSTALLED_APPS=[
+            "django.contrib.auth",
+            "django.contrib.contenttypes",
+        ],
+        DATABASES={
+            "default": {
+                "ENGINE": "django.db.backends.sqlite3",
+                "NAME": ":memory:",
+            }
+        },
+        SECRET_KEY="secret",
+        MIDDLEWARE=[],
+    )
+    django.setup()
+
+def main():
+    print("Configuring settings...")
+    configure_settings()
+
+    print("Running migrations (create tables in in-memory DB)...")
+    call_command("migrate", run_syncdb=True, interactive=False, verbosity=0)
+
+    print("Importing models and forms...")
+    from django.contrib.auth.models import User, Group
+    from django.contrib.auth.forms import UserCreationForm
+
+    # Subclass that includes 'groups' in the Meta fields.
+    class CustomUserCreationForm(UserCreationForm):
+        class Meta(UserCreationForm.Meta):
+            model = User
+            fields = ("username", "groups")
+
+    print("Creating test group...")
+    group = Group.objects.create(name="testgroup")
+
+    # Prepare form data including the group.
+    data = {
+        "username": "testuser",
+        "password1": "secret123",
+        "password2": "secret123",
+        "groups": [group.pk],
+    }
+
+    print("Initializing form with data:", data)
+    form = CustomUserCreationForm(data=data)
+    print("Form valid?", form.is_valid(), "Form errors:", form.errors)
+
+    if not form.is_valid():
+        print("Form is not valid. Exiting with code 2.")
+        sys.exit(2)
+
+    print("Saving user...")
+    user = form.save()
+
+    group_count = user.groups.count()
+    print(f"User is in {group_count} group(s). Expected 1.")
+
+    if group_count == 1:
+        print("SUCCESS - user is in the group. Exiting 0.")
+        sys.exit(0)
+    else:
+        print("FAILURE - user is NOT in the group. Exiting 1.")
+        sys.exit(1)
+
+if __name__ == "__main__":
+    main()
