diff --git a/django/contrib/admin/views/autocomplete.py b/django/contrib/admin/views/autocomplete.py
index 3903e4c98c..0fe4670057 100644
--- a/django/contrib/admin/views/autocomplete.py
+++ b/django/contrib/admin/views/autocomplete.py
@@ -18,19 +18,18 @@ class AutocompleteJsonView(BaseListView):
         }
         """
         self.term, self.model_admin, self.source_field, to_field_name = self.process_request(request)
-
         if not self.has_perm(request):
             raise PermissionDenied
-
         self.object_list = self.get_queryset()
         context = self.get_context_data()
         return JsonResponse({
             'results': [
-                {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}
+                self.serialize_result(obj, to_field_name)
                 for obj in context['object_list']
             ],
             'pagination': {'more': context['page_obj'].has_next()},
         })
+    
 
     def get_paginator(self, *args, **kwargs):
         """Use the ModelAdmin's paginator."""
@@ -100,3 +99,9 @@ class AutocompleteJsonView(BaseListView):
     def has_perm(self, request, obj=None):
         """Check if user has permission to access the related model."""
         return self.model_admin.has_view_permission(request, obj=obj)
+    def serialize_result(self, obj, to_field_name):
+        return {
+            'id': str(getattr(obj, to_field_name)),
+            'text': str(obj),
+        }
+    
diff --git a/test_fix_autocomplete_extra_fields.py b/test_fix_autocomplete_extra_fields.py
new file mode 100644
index 0000000000..5f330ba446
--- /dev/null
+++ b/test_fix_autocomplete_extra_fields.py
@@ -0,0 +1,120 @@
+#!/usr/bin/env python3
+import sys
+import json
+import traceback
+
+try:
+    from django.conf import settings
+    if not settings.configured:
+        settings.configure(
+            DEBUG=True,
+            SECRET_KEY="dummy",
+            INSTALLED_APPS=[],
+            MIDDLEWARE=[],
+        )
+    import django
+    django.setup()
+
+    from django.core.exceptions import PermissionDenied
+    from django.http import JsonResponse
+    from django.contrib.admin.views.autocomplete import AutocompleteJsonView
+except ImportError:
+    print("Unable to import necessary Django modules. Django setup issue?")
+    sys.exit(1)
+except Exception as e:
+    print("Unable to configure Django settings:", e)
+    sys.exit(1)
+
+class FakeModel:
+    def __init__(self, obj_id, name, notes):
+        self.obj_id = obj_id
+        self.name = name
+        self.notes = notes
+    def __str__(self):
+        return self.name
+
+class MinimalRequest:
+    # Just enough so that "request.GET" works
+    def __init__(self, get_dict=None):
+        self.GET = get_dict or {}
+
+class CustomAutocompleteJsonView(AutocompleteJsonView):
+    def get_queryset(self):
+        # Return a dummy list of objects
+        return [FakeModel(1, "TestObject", "Additional info in notes")]
+
+    def process_request(self, request):
+        # Return fixed values so we do not attempt real model lookups
+        term = "dummy"
+        model_admin = None
+        source_field = None
+        to_field_name = "obj_id"
+        return (term, model_admin, source_field, to_field_name)
+
+    def get_context_data(self, *args, **kwargs):
+        # Return minimal data to avoid referencing real pagination/other settings
+        return {
+            'object_list': self.object_list,
+            'page_obj': type('DummyPage', (object,), {
+                'has_next': lambda self: False,
+            })(),
+        }
+
+    def has_perm(self, request, obj=None):
+        # Override to return True so the test won't fail due to missing model_admin
+        return True
+
+    def serialize_result(self, obj, to_field_name):
+        # Override to add 'notes'
+        base = {}
+        if hasattr(super(), "serialize_result"):
+            base = super().serialize_result(obj, to_field_name)
+        else:
+            base = {"id": str(getattr(obj, to_field_name)), "text": str(obj)}
+        base["notes"] = obj.notes
+        return base
+
+def main():
+    print("Starting test_fix_autocomplete_extra_fields...")
+
+    # 1) Check if 'serialize_result' method is in AutocompleteJsonView
+    if not hasattr(AutocompleteJsonView, "serialize_result"):
+        print("FAIL: 'serialize_result' method does NOT exist in AutocompleteJsonView. Code has not been refactored.")
+        sys.exit(1)
+
+    print("Found 'serialize_result' method. Proceeding with test...")
+
+    # 2) Invoke CustomAutocompleteJsonView.get() with a minimal request
+    try:
+        view = CustomAutocompleteJsonView()
+        request = MinimalRequest(get_dict={
+            "app_label": "some_app",
+            "model_name": "some_model",
+            "field_name": "some_field"
+        })
+        response = view.get(request)
+        if not isinstance(response, JsonResponse):
+            print("FAIL: Response is not a JsonResponse.")
+            sys.exit(1)
+        data = json.loads(response.content.decode("utf-8"))
+        if "results" not in data or not data["results"]:
+            print("FAIL: No 'results' key returned from the view.")
+            print("Returned data:", data)
+            sys.exit(1)
+        first_result = data["results"][0]
+        print("First result:", first_result)
+        if "notes" not in first_result:
+            print("FAIL: 'notes' key is missing. The code is not using a customizable serialize_result.")
+            sys.exit(1)
+        print("PASS: The code includes 'serialize_result' and populates 'notes'.")
+        sys.exit(0)
+    except PermissionDenied:
+        print("FAIL: Unexpected PermissionDenied, are we missing permissions logic override?")
+        sys.exit(1)
+    except Exception as e:
+        print("FAIL: Unexpected exception encountered:")
+        traceback.print_exc()
+        sys.exit(1)
+
+if __name__ == "__main__":
+    main()
