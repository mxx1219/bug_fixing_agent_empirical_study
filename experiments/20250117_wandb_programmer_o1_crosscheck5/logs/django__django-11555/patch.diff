diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index e15e64cde4..4f9987431d 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -2211,18 +2211,20 @@ class Query(BaseExpression):
 
 def get_order_dir(field, default='ASC'):
     """
-    Return the field name and direction for an order specification. For
-    example, '-foo' is returned as ('foo', 'DESC').
-
-    The 'default' param is used to indicate which way no prefix (or a '+'
-    prefix) should sort. The '-' prefix always sorts the opposite way.
+    Return the field name (or expression) and direction for an order specification.
+    If 'field' is a string, check for a leading '-' to indicate descending order.
+    Otherwise (e.g. if it's an expression), assume default ascending direction.
     """
     dirn = ORDER_DIR[default]
+    if not isinstance(field, str):
+        # If it's an expression or OrderBy object, return as-is with default direction.
+        return field, dirn[0]
     if field[0] == '-':
         return field[1:], dirn[1]
     return field, dirn[0]
 
 
+
 def add_to_dict(data, key, value):
     """
     Add "value" to the set of values for "key", whether or not "key" already
diff --git a/test_expr_order.py b/test_expr_order.py
new file mode 100644
index 0000000000..f9c55fada0
--- /dev/null
+++ b/test_expr_order.py
@@ -0,0 +1,45 @@
+import sys
+import traceback
+import django
+from django.conf import settings
+from django.core.management import call_command
+
+def main():
+    try:
+        settings.configure(
+            DEBUG=True,
+            SECRET_KEY="testkey",
+            INSTALLED_APPS=["testapp.apps.TestAppConfig"],
+            DATABASES={
+                "default": {
+                    "ENGINE": "django.db.backends.sqlite3",
+                    "NAME": ":memory:",
+                }
+            },
+            MIDDLEWARE=[],
+        )
+        django.setup()
+
+        # Generate migrations for testapp, then apply them
+        call_command("makemigrations", "testapp", verbosity=0, interactive=False)
+        call_command("migrate", verbosity=0, interactive=False)
+
+        from testapp.models import MyChild
+
+        # Create some example data
+        MyChild.objects.create(name="BBB", desc="Hello B")
+        MyChild.objects.create(name="AAA", desc="Hello A")
+
+        # Attempt to retrieve them with multi-table inheritance + expression ordering
+        for child in MyChild.objects.all():
+            print(child.desc)
+
+        print("No exception encountered. Code is presumably FIXED.")
+        sys.exit(0)
+    except Exception:
+        print("Exception encountered, code is presumably NOT FIXED.")
+        traceback.print_exc()
+        sys.exit(1)
+
+if __name__ == "__main__":
+    main()
diff --git a/testapp/__init__.py b/testapp/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testapp/apps.py b/testapp/apps.py
new file mode 100644
index 0000000000..c75ff35727
--- /dev/null
+++ b/testapp/apps.py
@@ -0,0 +1,4 @@
+from django.apps import AppConfig
+
+class TestAppConfig(AppConfig):
+    name = "testapp"
diff --git a/testapp/migrations/0001_initial.py b/testapp/migrations/0001_initial.py
new file mode 100644
index 0000000000..a5a013468c
--- /dev/null
+++ b/testapp/migrations/0001_initial.py
@@ -0,0 +1,34 @@
+# Generated by Django 3.0.dev20190711082539 on 2025-01-13 01:51
+
+from django.db import migrations, models
+import django.db.models.deletion
+import django.db.models.functions.text
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='MyParent',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=255)),
+            ],
+            options={
+                'ordering': [django.db.models.functions.text.Lower('name')],
+            },
+        ),
+        migrations.CreateModel(
+            name='MyChild',
+            fields=[
+                ('myparent_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='testapp.MyParent')),
+                ('desc', models.CharField(blank=True, max_length=255)),
+            ],
+            bases=('testapp.myparent',),
+        ),
+    ]
diff --git a/testapp/migrations/__init__.py b/testapp/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testapp/models.py b/testapp/models.py
new file mode 100644
index 0000000000..eac00d8f9b
--- /dev/null
+++ b/testapp/models.py
@@ -0,0 +1,12 @@
+from django.db import models
+from django.db.models import functions
+
+class MyParent(models.Model):
+    name = models.CharField(max_length=255)
+
+    class Meta:
+        # Using a query expression in ordering
+        ordering = [functions.Lower("name")]
+
+class MyChild(MyParent):
+    desc = models.CharField(max_length=255, blank=True)
