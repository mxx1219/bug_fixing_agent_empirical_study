diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 5240b07cd6..f98223b3c7 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -438,7 +438,10 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):
 
     def lookup_allowed(self, lookup, value):
         from django.contrib.admin.filters import SimpleListFilter
-
+        from django.contrib.admin import widgets
+        from django.db.models.constants import LOOKUP_SEP
+        from django.core.exceptions import FieldDoesNotExist
+    
         model = self.model
         # Check FKey lookups that are allowed, so that popups produced by
         # ForeignKeyRawIdWidget, on the basis of ForeignKey.limit_choices_to,
@@ -447,54 +450,50 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):
             # As ``limit_choices_to`` can be a callable, invoke it here.
             if callable(fk_lookup):
                 fk_lookup = fk_lookup()
-            if (lookup, value) in widgets.url_params_from_lookup_dict(
-                fk_lookup
-            ).items():
+            if (lookup, value) in widgets.url_params_from_lookup_dict(fk_lookup).items():
                 return True
-
+    
         relation_parts = []
         prev_field = None
         for part in lookup.split(LOOKUP_SEP):
             try:
                 field = model._meta.get_field(part)
             except FieldDoesNotExist:
-                # Lookups on nonexistent fields are ok, since they're ignored
-                # later.
+                # Lookups on nonexistent fields are ok, since they're ignored later.
                 break
-            # It is allowed to filter on values that would be found from local
-            # model anyways. For example, if you filter on employee__department__id,
-            # then the id value would be found already from employee__department_id.
+            # It is allowed to filter on values found from a local field anyway,
+            # but we want to preserve the entire chain if there's no parent_link.
             if not prev_field or (
                 prev_field.is_relation
-                and field not in prev_field.path_infos[-1].target_fields
+                and not getattr(prev_field.remote_field, 'parent_link', False)
             ):
                 relation_parts.append(part)
             if not getattr(field, "path_infos", None):
-                # This is not a relational field, so further parts
-                # must be transforms.
+                # This is not a relational field, so further parts must be transforms.
                 break
             prev_field = field
             model = field.path_infos[-1].to_opts.model
-
+    
         if len(relation_parts) <= 1:
             # Either a local field filter, or no fields at all.
             return True
+    
         valid_lookups = {self.date_hierarchy}
         for filter_item in self.list_filter:
-            if isinstance(filter_item, type) and issubclass(
-                filter_item, SimpleListFilter
-            ):
+            if isinstance(filter_item, type) and issubclass(filter_item, SimpleListFilter):
                 valid_lookups.add(filter_item.parameter_name)
             elif isinstance(filter_item, (list, tuple)):
                 valid_lookups.add(filter_item[0])
             else:
                 valid_lookups.add(filter_item)
-
+    
         # Is it a valid relational lookup?
         return not {
             LOOKUP_SEP.join(relation_parts),
             LOOKUP_SEP.join(relation_parts + [part]),
         }.isdisjoint(valid_lookups)
+    
+    
 
     def to_field_allowed(self, request, to_field):
         """
diff --git a/test_foreign_primary_lookup.py b/test_foreign_primary_lookup.py
new file mode 100644
index 0000000000..1e2500fcd8
--- /dev/null
+++ b/test_foreign_primary_lookup.py
@@ -0,0 +1,92 @@
+#!/usr/bin/env python3
+
+import sys
+import traceback
+
+def main():
+    print("Starting test_foreign_primary_lookup.py ...")
+    try:
+        # Configure minimal Django settings for an in-memory test
+        from django.conf import settings
+        if not settings.configured:
+            settings.configure(
+                INSTALLED_APPS=[
+                    'django.contrib.admin',
+                    'django.contrib.auth',
+                    'django.contrib.contenttypes',
+                    'django.contrib.sessions',
+                ],
+                DATABASES={
+                    'default': {
+                        'ENGINE': 'django.db.backends.sqlite3',
+                        'NAME': ':memory:',
+                    }
+                },
+                MIDDLEWARE=[],
+                ROOT_URLCONF='',
+                SECRET_KEY='test_key',
+            )
+
+        import django
+        django.setup()
+
+        from django.db import models
+        from django.contrib import admin
+        from django.contrib.admin import ModelAdmin
+
+        class Country(models.Model):
+            name = models.CharField(max_length=256)
+
+            class Meta:
+                app_label = 'foreign_primary_test'
+
+        class Place(models.Model):
+            country = models.ForeignKey(Country, models.CASCADE)
+
+            class Meta:
+                app_label = 'foreign_primary_test'
+
+        class Restaurant(models.Model):
+            place = models.OneToOneField(Place, models.CASCADE, primary_key=True)
+
+            class Meta:
+                app_label = 'foreign_primary_test'
+
+        class Waiter(models.Model):
+            restaurant = models.ForeignKey(Restaurant, models.CASCADE)
+
+            class Meta:
+                app_label = 'foreign_primary_test'
+
+        class WaiterAdmin(ModelAdmin):
+            list_filter = [
+                'restaurant__place__country',
+            ]
+
+        # Register the models/admin
+        site = admin.AdminSite()
+        site.register(Country)
+        site.register(Place)
+        site.register(Restaurant)
+        site.register(Waiter, WaiterAdmin)
+
+        # Instantiate WaiterAdmin and check lookup_allowed().
+        ma = WaiterAdmin(Waiter, site)
+        test_lookup = 'restaurant__place__country'
+        result = ma.lookup_allowed(test_lookup, 'test_value')
+
+        print(f"lookup_allowed('{test_lookup}', 'test_value') returned: {result}")
+        if result:
+            print("Result is True. That means the bug is likely fixed.")
+            sys.exit(0)
+        else:
+            print("Result is False. That means the bug is still present.")
+            sys.exit(1)
+
+    except Exception as e:
+        print("Exception encountered!")
+        traceback.print_exc()
+        sys.exit(2)
+
+if __name__ == "__main__":
+    main()
