diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py
index ad2f5a7da1..08698bb3fc 100644
--- a/django/db/backends/base/schema.py
+++ b/django/db/backends/base/schema.py
@@ -1066,7 +1066,12 @@ class BaseDatabaseSchemaEditor:
         )
 
     def _index_columns(self, table, columns, col_suffixes, opclasses):
+        # If 'table' is a Table object, convert to its .table string so references_column() sees a string.
+        from django.db.backends.ddl_references import Table
+        if isinstance(table, Table):
+            table = table.table
         return Columns(table, columns, self.quote_name, col_suffixes=col_suffixes)
+    
 
     def _model_indexes_sql(self, model):
         """
@@ -1141,12 +1146,17 @@ class BaseDatabaseSchemaEditor:
         )
 
     def _rename_field_sql(self, table, old_field, new_field, new_type):
-        return self.sql_rename_column % {
+        sql = self.sql_rename_column % {
             "table": self.quote_name(table),
             "old_column": self.quote_name(old_field.column),
             "new_column": self.quote_name(new_field.column),
             "type": new_type,
         }
+        # Since we may be calling _rename_field_sql() directly, update references now.
+        for statement in self.deferred_sql:
+            statement.rename_column_references(table, old_field.column, new_field.column)
+        return sql
+    
 
     def _create_fk_sql(self, model, field, suffix):
         table = Table(model._meta.db_table, self.quote_name)
diff --git a/test_references_always_false.py b/test_references_always_false.py
new file mode 100644
index 0000000000..19a917df6b
--- /dev/null
+++ b/test_references_always_false.py
@@ -0,0 +1,119 @@
+import sys
+import traceback
+import django
+from django.db import connections, DEFAULT_DB_ALIAS
+from django.db.migrations.state import ProjectState, ModelState
+from django.db.backends.base.schema import BaseDatabaseSchemaEditor
+from django.db.models import Model
+from django.db import models
+
+"""
+This script explicitly tests whether rename_column_references() updates a deferred unique
+constraint statement referencing old column names.
+
+Steps:
+1) Create a table with a 'name' column.
+2) Use _create_unique_sql() for a unique constraint referencing 'name' and store it in editor.deferred_sql.
+3) Rename the 'name' column to 'new_name' within the same migration context.
+4) Once the context ends, rename_column_references() is called on each deferred statement.
+   If references_column() always returns False, the final unique statement will continue to
+   reference "name" instead of "new_name".
+
+We detect the bug by searching the final executed SQL for:
+   ALTER TABLE "tempmodel" ADD CONSTRAINT "test_unique_const" UNIQUE ("name");
+If that is found, the bug is present. The correct fix would produce:
+   ALTER TABLE "tempmodel" ADD CONSTRAINT "test_unique_const" UNIQUE ("new_name");
+"""
+
+def main():
+    try:
+        # Minimal Django setup.
+        import django.conf
+        if not django.conf.settings.configured:
+            django.conf.settings.configure(
+                INSTALLED_APPS=[],
+                DATABASES={"default": {"ENGINE": "django.db.backends.sqlite3", "NAME": ":memory:"}},
+            )
+        django.setup()
+
+        # Model definition for test.
+        model_state = ModelState(
+            app_label='test_app_unique_bug',
+            name='TempModel',
+            fields=[
+                ('id', models.AutoField(primary_key=True)),
+                ('name', models.CharField(max_length=100)),  # We'll add unique later
+            ],
+            options={'db_table': 'tempmodel'},
+            bases=[],
+            managers=[],
+        )
+
+        project_state = ProjectState()
+        project_state.add_model(model_state)
+
+        connection = connections[DEFAULT_DB_ALIAS]
+        editor = BaseDatabaseSchemaEditor(connection=connection, collect_sql=True, atomic=False)
+
+        # Step 1 & 2: Create table, then build a unique constraint referencing "name".
+        with editor:
+            model_cls = project_state.apps.get_model('test_app_unique_bug', 'TempModel')
+            editor.create_model(model_cls)
+
+            # Build a statement for a unique constraint referencing "name".
+            stmt = editor._create_unique_sql(
+                model_cls,
+                columns=['name'],
+                name='test_unique_const'
+            )
+            if stmt is not None:
+                editor.deferred_sql.append(stmt)
+
+            # Step 3: Rename the column "name" -> "new_name" within the same context.
+            old_field = model_cls._meta.get_field('name')
+            new_field = models.CharField(max_length=100)
+            new_field.set_attributes_from_name('new_name')
+            new_type = connection.data_types.get(new_field.get_internal_type(), "")
+            rename_sql = editor._rename_field_sql('tempmodel', old_field, new_field, new_type)
+            editor.execute(rename_sql)
+
+        # After exiting the "with editor:" block, the unique constraint is actually
+        # executed. rename_column_references() runs on that statement, renaming
+        # references if references_column() is correct.
+
+        final_sql_list = editor.collected_sql
+        final_sql_text = "\n".join(final_sql_list)
+
+        print("==== DEBUG: Final SQL statements ====")
+        for line in final_sql_list:
+            print(line)
+        print("======================================")
+
+        # If the final unique constraint references ("name") and not ("new_name"), bug is present.
+        # Conversely, if it references ("new_name"), the bug is fixed.
+        constraint_on_old_name = any(
+            'ADD CONSTRAINT "test_unique_const" UNIQUE ("name")' in line
+            for line in final_sql_list
+        )
+        constraint_on_new_name = any(
+            'ADD CONSTRAINT "test_unique_const" UNIQUE ("new_name")' in line
+            for line in final_sql_list
+        )
+
+        if constraint_on_old_name and not constraint_on_new_name:
+            print("Bug present: constraint references ('name'), rename_column_references() did not update.")
+            sys.exit(1)
+        else:
+            print("Bug fixed or backend doesn't support constraints that way.")
+            if constraint_on_new_name:
+                print("Constraint references ('new_name'), as expected.")
+            else:
+                print("Constraint statement was possibly not created or is handled differently by this backend.")
+            sys.exit(0)
+
+    except Exception as e:
+        traceback.print_exc()
+        sys.exit(2)
+
+if __name__ == '__main__':
+    main()
