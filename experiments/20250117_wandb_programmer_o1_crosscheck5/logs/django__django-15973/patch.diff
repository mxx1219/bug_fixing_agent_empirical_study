diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py
index 09785e8586..3f58d835cd 100644
--- a/django/db/backends/base/schema.py
+++ b/django/db/backends/base/schema.py
@@ -439,19 +439,33 @@ class BaseDatabaseSchemaEditor:
         Create a table and any accompanying indexes or unique constraints for
         the given `model`.
         """
+        # Create the model's table.
         sql, params = self.table_sql(model)
-        # Prevent using [] as params, in the case a literal '%' is used in the
-        # definition.
         self.execute(sql, params or None)
-
+    
         # Add any field index and index_together's (deferred as SQLite
         # _remake_table needs it).
         self.deferred_sql.extend(self._model_indexes_sql(model))
-
+    
         # Make M2M tables
+        from django.apps import apps
         for field in model._meta.local_many_to_many:
-            if field.remote_field.through._meta.auto_created:
-                self.create_model(field.remote_field.through)
+            through = field.remote_field.through
+            # If 'through' is still a string, attempt to resolve it here:
+            if isinstance(through, str):
+                resolved_model = apps.get_model(through)
+                if resolved_model is None:
+                    raise ValueError(
+                        f"Could not resolve string-based 'through': {through}. "
+                        "Make sure the app is in INSTALLED_APPS and that "
+                        "migrations are applied in the correct order."
+                    )
+                field.remote_field.through = resolved_model
+                through = resolved_model
+    
+            if through._meta.auto_created:
+                self.create_model(through)
+    
 
     def delete_model(self, model):
         """Delete a model from the database."""
diff --git a/test_m2m_through.py b/test_m2m_through.py
new file mode 100644
index 0000000000..b28420346d
--- /dev/null
+++ b/test_m2m_through.py
@@ -0,0 +1,65 @@
+import sys
+import traceback
+
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        SECRET_KEY='testkey',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        MIDDLEWARE=[],
+    )
+
+import django
+django.setup()
+
+from django.db import models, connection
+
+# By giving these models a custom app_label that is NOT in INSTALLED_APPS,
+# Django's lazy model resolution won't find them, so "through" remains a string.
+class FooModel(models.Model):
+    class Meta:
+        app_label = 'unregistered_app'
+
+class BarThrough(models.Model):
+    foo = models.ForeignKey(FooModel, on_delete=models.CASCADE)
+    # We'll reference "MyModel" below, but from a different "unregistered_app"
+    # so this is recognized if they do get resolved. For now, we want them
+    # not to be recognized.
+    class Meta:
+        app_label = 'another_unregistered_app'
+
+class MyModel(models.Model):
+    # Here is the ManyToMany with a "through" that references BarThrough
+    # by a cross-app string "another_unregistered_app.BarThrough"
+    foo_m2m = models.ManyToManyField(
+        FooModel,
+        through='another_unregistered_app.BarThrough'
+    )
+    class Meta:
+        app_label = 'unregistered_app'
+
+def main():
+    print("Step 1: Creating schema editor to create MyModel table in :memory: DB.")
+    schema_editor = connection.schema_editor(collect_sql=True)
+    try:
+        with schema_editor:
+            print("Step 2: schema_editor.create_model(MyModel) => Expecting a str._meta error on HEAD.")
+            schema_editor.create_model(MyModel)
+        print("Success! No AttributeError => bug is apparently fixed.")
+        sys.exit(0)
+    except Exception:
+        print("Encountered an exception, likely 'str' object has no attribute '_meta'.")
+        traceback.print_exc()
+        sys.exit(1)
+
+if __name__ == '__main__':
+    main()
diff --git a/tests/__init__.py b/tests/__init__.py
new file mode 100644
index 0000000000..f94b461665
--- /dev/null
+++ b/tests/__init__.py
@@ -0,0 +1 @@
+# Empty file to mark "tests" as a Python package so we can import "tests.test_sqlite".
