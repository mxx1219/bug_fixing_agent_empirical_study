diff --git a/django/core/management/base.py b/django/core/management/base.py
index 0c3a981290..b7acfb0b31 100644
--- a/django/core/management/base.py
+++ b/django/core/management/base.py
@@ -248,9 +248,11 @@ class BaseCommand:
 
     def create_parser(self, prog_name, subcommand, **kwargs):
         """
-        Create and return the ``ArgumentParser`` which will be used to
+        Create and return the ArgumentParser which will be used to
         parse the arguments to this command.
         """
+        import os
+        from django.core.management.base import CommandParser, DjangoHelpFormatter
         parser = CommandParser(
             prog='%s %s' % (os.path.basename(prog_name), subcommand),
             description=self.help or None,
@@ -261,8 +263,7 @@ class BaseCommand:
         )
         parser.add_argument('--version', action='version', version=self.get_version())
         parser.add_argument(
-            '-v', '--verbosity', default=1,
-            type=int, choices=[0, 1, 2, 3],
+            '-v', '--verbosity', default=1, type=int, choices=[0, 1, 2, 3],
             help='Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output',
         )
         parser.add_argument(
@@ -286,8 +287,16 @@ class BaseCommand:
             '--force-color', action='store_true',
             help='Force colorization of the command output.',
         )
+        # New user-facing argument for skip_checks
+        parser.add_argument(
+            '--skip-checks',
+            dest='skip_checks',
+            action='store_true',
+            help='Skip system checks before executing the command.',
+        )
         self.add_arguments(parser)
         return parser
+    
 
     def add_arguments(self, parser):
         """
@@ -356,7 +365,11 @@ class BaseCommand:
             self.stdout = OutputWrapper(options['stdout'])
         if options.get('stderr'):
             self.stderr = OutputWrapper(options['stderr'])
-
+    
+        # Remove skip_checks from the options dict if set/parsed as False
+        if 'skip_checks' in options and not options['skip_checks']:
+            del options['skip_checks']
+    
         if self.requires_system_checks and not options.get('skip_checks'):
             self.check()
         if self.requires_migrations_checks:
@@ -372,6 +385,7 @@ class BaseCommand:
                 )
             self.stdout.write(output)
         return output
+    
 
     def _run_checks(self, **kwargs):
         return checks.run_checks(**kwargs)
diff --git a/test_script_skip_checks.py b/test_script_skip_checks.py
new file mode 100644
index 0000000000..4b4b7a9405
--- /dev/null
+++ b/test_script_skip_checks.py
@@ -0,0 +1,26 @@
+#!/usr/bin/env python3
+import subprocess
+import sys
+
+def main():
+    print("STEP 1: Testing '--skip-checks' argument on HEAD")
+    cmd = ["python", "-m", "django", "help", "--skip-checks"]
+    print("Running command:", " ".join(cmd))
+    proc = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)
+    print("Return code:", proc.returncode)
+    print("STDOUT:", proc.stdout)
+    print("STDERR:", proc.stderr)
+
+    if "unrecognized arguments" in proc.stderr:
+        print("TEST RESULT: FAIL (unrecognized '--skip-checks' argument on HEAD)")
+        sys.exit(1)
+
+    if proc.returncode != 0:
+        print("TEST RESULT: FAIL (command failed for a different reason).")
+        sys.exit(1)
+
+    print("TEST RESULT: PASS (recognized '--skip-checks' argument)")
+    sys.exit(0)
+
+if __name__ == "__main__":
+    main()
