diff --git a/django/db/models/functions/datetime.py b/django/db/models/functions/datetime.py
index b6594b043b..ad9028dfa5 100644
--- a/django/db/models/functions/datetime.py
+++ b/django/db/models/functions/datetime.py
@@ -290,11 +290,13 @@ class TruncDate(TruncBase):
     output_field = DateField()
 
     def as_sql(self, compiler, connection):
-        # Cast to date rather than truncate to date.
         lhs, lhs_params = compiler.compile(self.lhs)
-        tzname = timezone.get_current_timezone_name() if settings.USE_TZ else None
+        tzname = None
+        if settings.USE_TZ:
+            tzname = self.get_tzname()
         sql = connection.ops.datetime_cast_date_sql(lhs, tzname)
         return sql, lhs_params
+    
 
 
 class TruncTime(TruncBase):
@@ -303,11 +305,13 @@ class TruncTime(TruncBase):
     output_field = TimeField()
 
     def as_sql(self, compiler, connection):
-        # Cast to time rather than truncate to time.
         lhs, lhs_params = compiler.compile(self.lhs)
-        tzname = timezone.get_current_timezone_name() if settings.USE_TZ else None
+        tzname = None
+        if settings.USE_TZ:
+            tzname = self.get_tzname()
         sql = connection.ops.datetime_cast_time_sql(lhs, tzname)
         return sql, lhs_params
+    
 
 
 class TruncHour(TruncBase):
diff --git a/test_truncdate_tzinfo_issue.py b/test_truncdate_tzinfo_issue.py
new file mode 100644
index 0000000000..26f2cfdf95
--- /dev/null
+++ b/test_truncdate_tzinfo_issue.py
@@ -0,0 +1,58 @@
+import sys
+import django
+import pytz
+from datetime import datetime
+from django.conf import settings
+from django.db import models, connection
+from django.db import transaction
+
+# We'll define a minimal settings configuration
+settings.configure(
+    SECRET_KEY='test',
+    INSTALLED_APPS=[__name__],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    USE_TZ=True,
+    TIME_ZONE='UTC',
+)
+
+django.setup()
+
+class TimeSlots(models.Model):
+    start_at = models.DateTimeField()
+
+def main():
+    # Create table manually, bypassing migrations.
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(TimeSlots)
+
+    # Create an instance with a date/time that will differ by day in America/New_York vs UTC.
+    t = TimeSlots(start_at=datetime(2023, 1, 1, 0, 30, tzinfo=pytz.UTC))
+    t.save()
+
+    # We'll try to truncate the date with tzinfo=America/New_York
+    from django.db.models.functions import TruncDate
+    ny_tz = pytz.timezone("America/New_York")
+
+    result = TimeSlots.objects.annotate(
+        truncated=TruncDate('start_at', tzinfo=ny_tz)
+    ).values_list('truncated', flat=True).get(pk=t.pk)
+
+    print("Truncated date from DB:", result)
+    # Expect 2022-12-31 if tzinfo is honored; ignoring tzinfo yields 2023-01-01
+    expected = datetime(2022, 12, 31).date()
+    print("Expected date if tzinfo is honored:", expected)
+
+    if result == expected:
+        print("Test PASS.")
+        sys.exit(0)
+    else:
+        print("Test FAIL.")
+        sys.exit(1)
+
+if __name__ == '__main__':
+    main()
