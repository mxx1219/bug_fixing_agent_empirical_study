+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   django/db/models/fields/json.py

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	test_scripts/

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit 859a87d873ce7152af73ab851653b4e1c3ffea4c
Author: Biel Frontera <bfrontera@socib.es>
Date:   Mon Mar 14 09:53:36 2022 +0100

    Fixed #31357 -- Fixed get_for_models() crash for stale content types when model with the same name exists in another app.

diff --git a/django/contrib/contenttypes/models.py b/django/contrib/contenttypes/models.py
index ef4f30556f..b83c9afcae 100644
--- a/django/contrib/contenttypes/models.py
+++ b/django/contrib/contenttypes/models.py
@@ -2,6 +2,7 @@ from collections import defaultdict
 
 from django.apps import apps
 from django.db import models
+from django.db.models import Q
 from django.utils.translation import gettext_lazy as _
 
 
@@ -64,9 +65,8 @@ class ContentTypeManager(models.Manager):
         Given *models, return a dictionary mapping {model: content_type}.
         """
         results = {}
-        # Models that aren't already in the cache.
-        needed_app_labels = set()
-        needed_models = set()
+        # Models that aren't already in the cache grouped by app labels.
+        needed_models = defaultdict(set)
         # Mapping of opts to the list of models requiring it.
         needed_opts = defaultdict(list)
         for model in models:
@@ -74,14 +74,20 @@ class ContentTypeManager(models.Manager):
             try:
                 ct = self._get_from_cache(opts)
             except KeyError:
-                needed_app_labels.add(opts.app_label)
-                needed_models.add(opts.model_name)
+                needed_models[opts.app_label].add(opts.model_name)
                 needed_opts[opts].append(model)
             else:
                 results[model] = ct
         if needed_opts:
             # Lookup required content types from the DB.
-            cts = self.filter(app_label__in=needed_app_labels, model__in=needed_models)
+            condition = Q(
+                *(
+                    Q(("app_label", app_label), ("model__in", models), _connector=Q.AND)
+                    for app_label, models in needed_models.items()
+                ),
+                _connector=Q.OR,
+            )
+            cts = self.filter(condition)
             for ct in cts:
                 opts_models = needed_opts.pop(ct.model_class()._meta, [])
                 for model in opts_models:
diff --git a/tests/contenttypes_tests/test_models.py b/tests/contenttypes_tests/test_models.py
index e2fb7fe818..a96e12e69f 100644
--- a/tests/contenttypes_tests/test_models.py
+++ b/tests/contenttypes_tests/test_models.py
@@ -248,6 +248,26 @@ class ContentTypesTests(TestCase):
         ct_fetched = ContentType.objects.get_for_id(ct.pk)
         self.assertIsNone(ct_fetched.model_class())
 
+    def test_missing_model_with_existing_model_name(self):
+        """
+        Displaying content types in admin (or anywhere) doesn't break on
+        leftover content type records in the DB for which no model is defined
+        anymore, even if a model with the same name exists in another app.
+        """
+        # Create a stale ContentType that matches the name of an existing
+        # model.
+        ContentType.objects.create(app_label="contenttypes", model="author")
+        ContentType.objects.clear_cache()
+        # get_for_models() should work as expected for existing models.
+        cts = ContentType.objects.get_for_models(ContentType, Author)
+        self.assertEqual(
+            cts,
+            {
+                ContentType: ContentType.objects.get_for_model(ContentType),
+                Author: ContentType.objects.get_for_model(Author),
+            },
+        )
+
     def test_str(self):
         ct = ContentType.objects.get(app_label="contenttypes_tests", model="site")
         self.assertEqual(str(ct), "contenttypes_tests | site")
+ git diff 859a87d873ce7152af73ab851653b4e1c3ffea4c
diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py
index fdca700c9d..4c7270293a 100644
--- a/django/db/models/fields/json.py
+++ b/django/db/models/fields/json.py
@@ -138,6 +138,22 @@ def compile_json_path(key_transforms, include_root=True):
             path.append("[%s]" % num)
     return "".join(path)
 
+def compile_json_path_string_keys(key_transforms, include_root=True):
+    """
+    Like compile_json_path but forces numeric-looking keys to be treated as strings.
+    Used in HasKeyLookup.as_sqlite() for dictionary fallback.
+    """
+    path = ["$"] if include_root else []
+    for key_transform in key_transforms:
+        # Always treat the key as a string property:
+        path.append(".")
+        path.append(json.dumps(str(key_transform)))
+    return "".join(path)
+
+
+
+
+
 
 class DataContains(PostgresOperatorLookup):
     lookup_name = "contains"
@@ -175,14 +191,12 @@ class HasKeyLookup(PostgresOperatorLookup):
     def as_sql(self, compiler, connection, template=None):
         # Process JSON path from the left-hand side.
         if isinstance(self.lhs, KeyTransform):
-            lhs, lhs_params, lhs_key_transforms = self.lhs.preprocess_lhs(
-                compiler, connection
-            )
+            lhs, lhs_params, lhs_key_transforms = self.lhs.preprocess_lhs(compiler, connection)
             lhs_json_path = compile_json_path(lhs_key_transforms)
         else:
             lhs, lhs_params = self.process_lhs(compiler, connection)
             lhs_json_path = "$"
-        sql = template % lhs
+        sql = template % lhs if template else lhs
         # Process JSON path from the right-hand side.
         rhs = self.rhs
         rhs_params = []
@@ -193,13 +207,7 @@ class HasKeyLookup(PostgresOperatorLookup):
                 *_, rhs_key_transforms = key.preprocess_lhs(compiler, connection)
             else:
                 rhs_key_transforms = [key]
-            rhs_params.append(
-                "%s%s"
-                % (
-                    lhs_json_path,
-                    compile_json_path(rhs_key_transforms, include_root=False),
-                )
-            )
+            rhs_params.append("%s%s" % (lhs_json_path, compile_json_path(rhs_key_transforms, include_root=False)))
         # Add condition for each key.
         if self.logical_operator:
             sql = "(%s)" % self.logical_operator.join([sql] * len(rhs_params))
@@ -227,9 +235,53 @@ class HasKeyLookup(PostgresOperatorLookup):
         return super().as_postgresql(compiler, connection)
 
     def as_sqlite(self, compiler, connection):
-        return self.as_sql(
-            compiler, connection, template="JSON_TYPE(%s, %%s) IS NOT NULL"
-        )
+        """
+        Custom SQLite implementation that tries both array index and dictionary key
+        whenever the key is numeric, preserving existing array-based behavior while
+        also supporting numeric dictionary keys when using has_key / has_keys / has_any_keys.
+        """
+        if isinstance(self.lhs, KeyTransform):
+            lhs, lhs_params, lhs_key_transforms = self.lhs.preprocess_lhs(compiler, connection)
+            lhs_json_path = "$" if not lhs_key_transforms else compile_json_path(lhs_key_transforms)
+        else:
+            lhs, lhs_params = self.process_lhs(compiler, connection)
+            lhs_json_path = "$"
+    
+        rhs = self.rhs
+        if not isinstance(rhs, (list, tuple)):
+            rhs = [rhs]
+    
+        expressions = []
+        for key in rhs:
+            if isinstance(key, KeyTransform):
+                *_, rhs_key_transforms = key.preprocess_lhs(compiler, connection)
+            else:
+                rhs_key_transforms = [key]
+    
+            # Build array-based path (old behavior: numeric => array index).
+            array_path = compile_json_path(rhs_key_transforms, include_root=False)
+            # Build dictionary-based path (numeric => treat as string).
+            dict_path = compile_json_path_string_keys(rhs_key_transforms, include_root=False)
+    
+            # If the key is numeric, array_path differs from dict_path. Try both:
+            #    JSON_TYPE(lhs, "$[1]") OR JSON_TYPE(lhs, "$.'1'")
+            expr = (
+                f"(JSON_TYPE({lhs}, '{lhs_json_path}{array_path}') IS NOT NULL OR "
+                f"JSON_TYPE({lhs}, '{lhs_json_path}{dict_path}') IS NOT NULL)"
+            )
+            expressions.append(expr)
+    
+        if self.logical_operator:
+            joined = f" {self.logical_operator} ".join(expressions)
+            sql = f"({joined})"
+        else:
+            sql = " AND ".join(expressions)
+    
+        return sql, tuple(lhs_params)
+    
+
+    
+    
 
 
 class HasKey(HasKeyLookup):
@@ -238,6 +290,7 @@ class HasKey(HasKeyLookup):
     prepare_rhs = False
 
 
+
 class HasKeys(HasKeyLookup):
     lookup_name = "has_keys"
     postgres_operator = "?&"
@@ -247,12 +300,14 @@ class HasKeys(HasKeyLookup):
         return [str(item) for item in self.rhs]
 
 
+
 class HasAnyKeys(HasKeys):
     lookup_name = "has_any_keys"
     postgres_operator = "?|"
     logical_operator = " OR "
 
 
+
 class CaseInsensitiveMixin:
     """
     Mixin to allow case-insensitive comparison of JSON values on MySQL.
@@ -347,14 +402,52 @@ class KeyTransform(Transform):
 
     def as_sqlite(self, compiler, connection):
         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)
+        # Escape string-formatting for Oracle, but leave SQLite alone:
+        if connection.vendor == "oracle":
+            key_transforms = [key.replace("%", "%%") for key in key_transforms]
         json_path = compile_json_path(key_transforms)
         datatype_values = ",".join(
             [repr(datatype) for datatype in connection.ops.jsonfield_datatype_values]
         )
         return (
-            "(CASE WHEN JSON_TYPE(%s, %%s) IN (%s) "
-            "THEN JSON_TYPE(%s, %%s) ELSE JSON_EXTRACT(%s, %%s) END)"
-        ) % (lhs, datatype_values, lhs, lhs), (tuple(params) + (json_path,)) * 3
+            f"(CASE WHEN JSON_TYPE({lhs}, %s) IN ({datatype_values}) "
+            f"THEN JSON_TYPE({lhs}, %s) "
+            f"ELSE JSON_EXTRACT({lhs}, %s) END)",
+            (tuple(params) + (json_path,)) * 3
+        )
+    
+    
+    def _build_sqlite_case_expr(self, compiler, connection, force_string_keys=False):
+        """
+        Build a single CASE WHEN JSON_TYPE(...) THEN JSON_TYPE(...) ELSE JSON_EXTRACT(...) END
+        expression, replicating placeholders for multi-placeholder LHS or path usage.
+        """
+        lhs, lhs_params, key_transforms = self.preprocess_lhs(compiler, connection)
+        # If the LHS compiled to an expression with N placeholders, each usage must re-inject them.
+        # So using the LHS 3 times => 3*N placeholders from lhs_params.
+        datatype_values = ",".join(
+            [repr(datatype) for datatype in connection.ops.jsonfield_datatype_values]
+        )
+        # Build a single JSON path (array vs. dictionary usage):
+        json_path = compile_json_path(key_transforms, include_root=True, force_string_keys=force_string_keys)
+        # The final expression: we have 3 references to {lhs} and 3 references to %s for the path:
+        # e.g. "CASE WHEN JSON_TYPE((lhs), %s) IN (datatype_values) THEN JSON_TYPE((lhs), %s) ELSE JSON_EXTRACT((lhs), %s) END"
+        # each {lhs} might already contain placeholders, so we embed it as-is.
+        case_sql = (
+            f"(CASE WHEN JSON_TYPE({lhs}, ?) IN ({datatype_values}) "
+            f"THEN JSON_TYPE({lhs}, ?) "
+            f"ELSE JSON_EXTRACT({lhs}, ?) END)"
+        )
+        # For each usage of {lhs}, we must replicate lhs_params.
+        # For each usage of '?' for the path, we provide json_path.
+        # So final params = 3 * lhs_params + 3 * (json_path,).
+        final_params = []
+        for _ in range(3):
+            final_params.extend(lhs_params)
+            final_params.append(json_path)
+        return case_sql, tuple(final_params)
+    
+    
 
 
 class KeyTextTransform(KeyTransform):
@@ -406,6 +499,7 @@ class KeyTransformIsNull(lookups.IsNull):
             connection,
             template=template,
         )
+    
 
 
 class KeyTransformIn(lookups.In):
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: asgiref>=3.4.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.1.dev20220314115226) (3.8.1)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.1.dev20220314115226) (0.5.3)
Requirement already satisfied: typing-extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from asgiref>=3.4.1->Django==4.1.dev20220314115226) (4.12.2)
Building wheels for collected packages: Django
  Building editable for Django (pyproject.toml): started
  Building editable for Django (pyproject.toml): finished with status 'done'
  Created wheel for Django: filename=Django-4.1.dev20220314115226-0.editable-py3-none-any.whl size=26932 sha256=bb4e7fb0ae76c2f87432c66ce967eeb68b29065fea9444bd75e3ad1b2b22b266
  Stored in directory: /tmp/pip-ephem-wheel-cache-rf1bqoc4/wheels/7d/66/67/70d1ee2124ccf21d601c352e25cdca10f611f7c8b3f9ffb9e4
Successfully built Django
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 4.1.dev20220314115226
    Uninstalling Django-4.1.dev20220314115226:
      Successfully uninstalled Django-4.1.dev20220314115226
Successfully installed Django-4.1.dev20220314115226
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git checkout 859a87d873ce7152af73ab851653b4e1c3ffea4c tests/model_fields/test_jsonfield.py
Updated 0 paths from 72cda8bf81
+ git apply -v -
Checking patch tests/model_fields/test_jsonfield.py...
Applied patch tests/model_fields/test_jsonfield.py cleanly.
+ ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 model_fields.test_jsonfield
Creating test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
Testing against Django installed in '/testbed/django'
Importing application model_fields
Found 88 test(s).
Skipping setup of unused database(s): other.
Operations to perform:
  Synchronize unmigrated apps: auth, contenttypes, messages, model_fields, sessions, staticfiles
  Apply all migrations: admin, sites
Synchronizing apps without migrations:
  Creating tables...
    Creating table django_content_type
    Creating table auth_permission
    Creating table auth_group
    Creating table auth_user
    Creating table django_session
    Creating table model_fields_foo
    Creating table model_fields_bar
    Creating table model_fields_whiz
    Creating table model_fields_whizdelayed
    Creating table model_fields_whiziter
    Creating table model_fields_whiziterempty
    Creating table model_fields_choiceful
    Creating table model_fields_bigd
    Creating table model_fields_floatmodel
    Creating table model_fields_bigs
    Creating table model_fields_unicodeslugfield
    Creating table model_fields_automodel
    Creating table model_fields_bigautomodel
    Creating table model_fields_smallautomodel
    Creating table model_fields_smallintegermodel
    Creating table model_fields_integermodel
    Creating table model_fields_bigintegermodel
    Creating table model_fields_positivebigintegermodel
    Creating table model_fields_positivesmallintegermodel
    Creating table model_fields_positiveintegermodel
    Creating table model_fields_post
    Creating table model_fields_nullbooleanmodel
    Creating table model_fields_booleanmodel
    Creating table model_fields_datetimemodel
    Creating table model_fields_durationmodel
    Creating table model_fields_nulldurationmodel
    Creating table model_fields_primarykeycharmodel
    Creating table model_fields_fkstobooleans
    Creating table model_fields_fktochar
    Creating table model_fields_renamedfield
    Creating table model_fields_verbosenamefield
    Creating table model_fields_genericipaddress
    Creating table model_fields_decimallessthanone
    Creating table model_fields_fieldclassattributemodel
    Creating table model_fields_datamodel
    Creating table model_fields_document
    Creating table model_fields_person
    Creating table model_fields_personwithheight
    Creating table model_fields_personwithheightandwidth
    Creating table model_fields_persondimensionsfirst
    Creating table model_fields_persontwoimages
    Creating table model_fields_jsonmodel
    Creating table model_fields_nullablejsonmodel
    Creating table model_fields_relatedjsonmodel
    Creating table model_fields_allfieldsmodel
    Creating table model_fields_manytomany
    Creating table model_fields_uuidmodel
    Creating table model_fields_nullableuuidmodel
    Creating table model_fields_primarykeyuuidmodel
    Creating table model_fields_relatedtouuidmodel
    Creating table model_fields_uuidchild
    Creating table model_fields_uuidgrandchild
    Running deferred SQL...
Running migrations:
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying sites.0001_initial... OK
  Applying sites.0002_alter_domain_unique... OK
System check identified no issues (0 silenced).
test_custom_encoder_decoder (model_fields.test_jsonfield.JSONFieldTests) ... ok
test_db_check_constraints (model_fields.test_jsonfield.JSONFieldTests) ... ok
test_invalid_value (model_fields.test_jsonfield.JSONFieldTests) ... ok
test_array_key_contains (model_fields.test_jsonfield.TestQuerying) ... skipped "Database doesn't support feature(s): supports_json_field_contains"
test_contained_by (model_fields.test_jsonfield.TestQuerying) ... skipped "Database doesn't support feature(s): supports_json_field_contains"
test_contained_by_unsupported (model_fields.test_jsonfield.TestQuerying) ... ok
test_contains (model_fields.test_jsonfield.TestQuerying) ... skipped "Database doesn't support feature(s): supports_json_field_contains"
test_contains_contained_by_with_key_transform (model_fields.test_jsonfield.TestQuerying) ... skipped "Database doesn't support feature(s): supports_json_field_contains"
test_contains_primitives (model_fields.test_jsonfield.TestQuerying) ... skipped "Database doesn't support feature(s): supports_primitives_in_json_field, supports_json_field_contains"
test_contains_unsupported (model_fields.test_jsonfield.TestQuerying) ... ok
test_deep_distinct (model_fields.test_jsonfield.TestQuerying) ... skipped "Database doesn't support feature(s): can_distinct_on_fields"
test_deep_lookup_array (model_fields.test_jsonfield.TestQuerying) ... ok
test_deep_lookup_mixed (model_fields.test_jsonfield.TestQuerying) ... ok
test_deep_lookup_objs (model_fields.test_jsonfield.TestQuerying) ... ok
test_deep_lookup_transform (model_fields.test_jsonfield.TestQuerying) ... ok
test_deep_values (model_fields.test_jsonfield.TestQuerying) ... ok
test_exact (model_fields.test_jsonfield.TestQuerying) ... ok
test_exact_complex (model_fields.test_jsonfield.TestQuerying) ... ok
test_expression_wrapper_key_transform (model_fields.test_jsonfield.TestQuerying) ... ok
test_has_any_keys (model_fields.test_jsonfield.TestQuerying) ... ok
test_has_key (model_fields.test_jsonfield.TestQuerying) ... ok
test_has_key_deep (model_fields.test_jsonfield.TestQuerying) ... ok
test_has_key_list (model_fields.test_jsonfield.TestQuerying) ... ok
test_has_key_null_value (model_fields.test_jsonfield.TestQuerying) ... ok
test_has_key_number (model_fields.test_jsonfield.TestQuerying) ... test_has_keys (model_fields.test_jsonfield.TestQuerying) ... ok
test_icontains (model_fields.test_jsonfield.TestQuerying) ... ok
test_isnull (model_fields.test_jsonfield.TestQuerying) ... ok
test_isnull_key (model_fields.test_jsonfield.TestQuerying) ... ok
test_isnull_key_or_none (model_fields.test_jsonfield.TestQuerying) ... ok
test_join_key_transform_annotation_expression (model_fields.test_jsonfield.TestQuerying) ... ok
test_key_contains (model_fields.test_jsonfield.TestQuerying) ... skipped "Database doesn't support feature(s): supports_json_field_contains"
test_key_endswith (model_fields.test_jsonfield.TestQuerying) ... ok
test_key_escape (model_fields.test_jsonfield.TestQuerying) ... ok
test_key_icontains (model_fields.test_jsonfield.TestQuerying) ... ok
test_key_iendswith (model_fields.test_jsonfield.TestQuerying) ... ok
test_key_iexact (model_fields.test_jsonfield.TestQuerying) ... ok
test_key_in (model_fields.test_jsonfield.TestQuerying) ... ok
test_key_iregex (model_fields.test_jsonfield.TestQuerying) ... ok
test_key_istartswith (model_fields.test_jsonfield.TestQuerying) ... ok
test_key_quoted_string (model_fields.test_jsonfield.TestQuerying) ... ok
test_key_regex (model_fields.test_jsonfield.TestQuerying) ... ok
test_key_sql_injection (model_fields.test_jsonfield.TestQuerying) ... skipped "Database doesn't support feature(s): has_json_operators"
test_key_sql_injection_escape (model_fields.test_jsonfield.TestQuerying) ... ok
test_key_startswith (model_fields.test_jsonfield.TestQuerying) ... ok
test_key_transform_annotation_expression (model_fields.test_jsonfield.TestQuerying) ... ok
test_key_transform_expression (model_fields.test_jsonfield.TestQuerying) ... ok
test_key_transform_raw_expression (model_fields.test_jsonfield.TestQuerying) ... ok
test_key_values (model_fields.test_jsonfield.TestQuerying) ... ok
test_key_values_boolean (model_fields.test_jsonfield.TestQuerying) ... ok
test_lookup_exclude (model_fields.test_jsonfield.TestQuerying) ... ok
test_lookup_exclude_nonexistent_key (model_fields.test_jsonfield.TestQuerying) ... ok
test_lookups_with_key_transform (model_fields.test_jsonfield.TestQuerying) ... ok
test_nested_key_transform_annotation_expression (model_fields.test_jsonfield.TestQuerying) ... ok
test_nested_key_transform_expression (model_fields.test_jsonfield.TestQuerying) ... ok
test_nested_key_transform_on_subquery (model_fields.test_jsonfield.TestQuerying) ... ok
test_nested_key_transform_raw_expression (model_fields.test_jsonfield.TestQuerying) ... ok
test_none_key (model_fields.test_jsonfield.TestQuerying) ... ok
test_none_key_and_exact_lookup (model_fields.test_jsonfield.TestQuerying) ... ok
test_none_key_exclude (model_fields.test_jsonfield.TestQuerying) ... ok
test_obj_subquery_lookup (model_fields.test_jsonfield.TestQuerying) ... ok
test_order_grouping_custom_decoder (model_fields.test_jsonfield.TestQuerying) ... ok
test_ordering_by_transform (model_fields.test_jsonfield.TestQuerying) ... ok
test_ordering_grouping_by_count (model_fields.test_jsonfield.TestQuerying) ... ok
test_ordering_grouping_by_key_transform (model_fields.test_jsonfield.TestQuerying) ... ok
test_shallow_list_lookup (model_fields.test_jsonfield.TestQuerying) ... ok
test_shallow_lookup_obj_target (model_fields.test_jsonfield.TestQuerying) ... ok
test_shallow_obj_lookup (model_fields.test_jsonfield.TestQuerying) ... ok
test_usage_in_subquery (model_fields.test_jsonfield.TestQuerying) ... ok
test_dict (model_fields.test_jsonfield.TestSaveLoad) ... ok
test_json_null_different_from_sql_null (model_fields.test_jsonfield.TestSaveLoad) ... ok
test_list (model_fields.test_jsonfield.TestSaveLoad) ... ok
test_null (model_fields.test_jsonfield.TestSaveLoad) ... ok
test_primitives (model_fields.test_jsonfield.TestSaveLoad) ... ok
test_realistic_object (model_fields.test_jsonfield.TestSaveLoad) ... ok
test_formfield (model_fields.test_jsonfield.TestFormField) ... ok
test_formfield_custom_encoder_decoder (model_fields.test_jsonfield.TestFormField) ... ok
test_deconstruct (model_fields.test_jsonfield.TestMethods) ... ok
test_deconstruct_custom_encoder_decoder (model_fields.test_jsonfield.TestMethods) ... ok
test_get_transforms (model_fields.test_jsonfield.TestMethods) ... ok
test_key_transform_text_lookup_mixin_non_key_transform (model_fields.test_jsonfield.TestMethods) ... ok
test_dumping (model_fields.test_jsonfield.TestSerialization) ... ok
test_loading (model_fields.test_jsonfield.TestSerialization) ... ok
test_xml_serialization (model_fields.test_jsonfield.TestSerialization) ... ok
test_custom_encoder (model_fields.test_jsonfield.TestValidation) ... ok
test_invalid_decoder (model_fields.test_jsonfield.TestValidation) ... ok
test_invalid_encoder (model_fields.test_jsonfield.TestValidation) ... ok
test_validation_error (model_fields.test_jsonfield.TestValidation) ... ok

======================================================================
FAIL: test_has_key_number (model_fields.test_jsonfield.TestQuerying) (condition=<Q: (AND: ('value__has_any_keys', ['000', 'nonexistent']))>)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/model_fields/test_jsonfield.py", line 601, in test_has_key_number
    self.assertSequenceEqual(
AssertionError: Sequences differ: <QuerySet [<NullableJSONModel: NullableJS[68 chars]4)>]> != [<NullableJSONModel: NullableJSONModel object (14)>]

First differing element 0:
<NullableJSONModel: NullableJSONModel object (6)>
<NullableJSONModel: NullableJSONModel object (14)>

First sequence contains 1 additional elements.
First extra element 1:
<NullableJSONModel: NullableJSONModel object (14)>

- <QuerySet [<NullableJSONModel: NullableJSONModel object (6)>, <NullableJSONModel: NullableJSONModel object (14)>]>
+ [<NullableJSONModel: NullableJSONModel object (14)>]

----------------------------------------------------------------------
Ran 88 tests in 0.195s

FAILED (failures=1, skipped=8)
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
+ git checkout 859a87d873ce7152af73ab851653b4e1c3ffea4c tests/model_fields/test_jsonfield.py
Updated 1 path from 72cda8bf81
