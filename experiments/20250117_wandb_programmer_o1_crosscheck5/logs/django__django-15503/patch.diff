diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py
index fdca700c9d..4c7270293a 100644
--- a/django/db/models/fields/json.py
+++ b/django/db/models/fields/json.py
@@ -138,6 +138,22 @@ def compile_json_path(key_transforms, include_root=True):
             path.append("[%s]" % num)
     return "".join(path)
 
+def compile_json_path_string_keys(key_transforms, include_root=True):
+    """
+    Like compile_json_path but forces numeric-looking keys to be treated as strings.
+    Used in HasKeyLookup.as_sqlite() for dictionary fallback.
+    """
+    path = ["$"] if include_root else []
+    for key_transform in key_transforms:
+        # Always treat the key as a string property:
+        path.append(".")
+        path.append(json.dumps(str(key_transform)))
+    return "".join(path)
+
+
+
+
+
 
 class DataContains(PostgresOperatorLookup):
     lookup_name = "contains"
@@ -175,14 +191,12 @@ class HasKeyLookup(PostgresOperatorLookup):
     def as_sql(self, compiler, connection, template=None):
         # Process JSON path from the left-hand side.
         if isinstance(self.lhs, KeyTransform):
-            lhs, lhs_params, lhs_key_transforms = self.lhs.preprocess_lhs(
-                compiler, connection
-            )
+            lhs, lhs_params, lhs_key_transforms = self.lhs.preprocess_lhs(compiler, connection)
             lhs_json_path = compile_json_path(lhs_key_transforms)
         else:
             lhs, lhs_params = self.process_lhs(compiler, connection)
             lhs_json_path = "$"
-        sql = template % lhs
+        sql = template % lhs if template else lhs
         # Process JSON path from the right-hand side.
         rhs = self.rhs
         rhs_params = []
@@ -193,13 +207,7 @@ class HasKeyLookup(PostgresOperatorLookup):
                 *_, rhs_key_transforms = key.preprocess_lhs(compiler, connection)
             else:
                 rhs_key_transforms = [key]
-            rhs_params.append(
-                "%s%s"
-                % (
-                    lhs_json_path,
-                    compile_json_path(rhs_key_transforms, include_root=False),
-                )
-            )
+            rhs_params.append("%s%s" % (lhs_json_path, compile_json_path(rhs_key_transforms, include_root=False)))
         # Add condition for each key.
         if self.logical_operator:
             sql = "(%s)" % self.logical_operator.join([sql] * len(rhs_params))
@@ -227,9 +235,53 @@ class HasKeyLookup(PostgresOperatorLookup):
         return super().as_postgresql(compiler, connection)
 
     def as_sqlite(self, compiler, connection):
-        return self.as_sql(
-            compiler, connection, template="JSON_TYPE(%s, %%s) IS NOT NULL"
-        )
+        """
+        Custom SQLite implementation that tries both array index and dictionary key
+        whenever the key is numeric, preserving existing array-based behavior while
+        also supporting numeric dictionary keys when using has_key / has_keys / has_any_keys.
+        """
+        if isinstance(self.lhs, KeyTransform):
+            lhs, lhs_params, lhs_key_transforms = self.lhs.preprocess_lhs(compiler, connection)
+            lhs_json_path = "$" if not lhs_key_transforms else compile_json_path(lhs_key_transforms)
+        else:
+            lhs, lhs_params = self.process_lhs(compiler, connection)
+            lhs_json_path = "$"
+    
+        rhs = self.rhs
+        if not isinstance(rhs, (list, tuple)):
+            rhs = [rhs]
+    
+        expressions = []
+        for key in rhs:
+            if isinstance(key, KeyTransform):
+                *_, rhs_key_transforms = key.preprocess_lhs(compiler, connection)
+            else:
+                rhs_key_transforms = [key]
+    
+            # Build array-based path (old behavior: numeric => array index).
+            array_path = compile_json_path(rhs_key_transforms, include_root=False)
+            # Build dictionary-based path (numeric => treat as string).
+            dict_path = compile_json_path_string_keys(rhs_key_transforms, include_root=False)
+    
+            # If the key is numeric, array_path differs from dict_path. Try both:
+            #    JSON_TYPE(lhs, "$[1]") OR JSON_TYPE(lhs, "$.'1'")
+            expr = (
+                f"(JSON_TYPE({lhs}, '{lhs_json_path}{array_path}') IS NOT NULL OR "
+                f"JSON_TYPE({lhs}, '{lhs_json_path}{dict_path}') IS NOT NULL)"
+            )
+            expressions.append(expr)
+    
+        if self.logical_operator:
+            joined = f" {self.logical_operator} ".join(expressions)
+            sql = f"({joined})"
+        else:
+            sql = " AND ".join(expressions)
+    
+        return sql, tuple(lhs_params)
+    
+
+    
+    
 
 
 class HasKey(HasKeyLookup):
@@ -238,6 +290,7 @@ class HasKey(HasKeyLookup):
     prepare_rhs = False
 
 
+
 class HasKeys(HasKeyLookup):
     lookup_name = "has_keys"
     postgres_operator = "?&"
@@ -247,12 +300,14 @@ class HasKeys(HasKeyLookup):
         return [str(item) for item in self.rhs]
 
 
+
 class HasAnyKeys(HasKeys):
     lookup_name = "has_any_keys"
     postgres_operator = "?|"
     logical_operator = " OR "
 
 
+
 class CaseInsensitiveMixin:
     """
     Mixin to allow case-insensitive comparison of JSON values on MySQL.
@@ -347,14 +402,52 @@ class KeyTransform(Transform):
 
     def as_sqlite(self, compiler, connection):
         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)
+        # Escape string-formatting for Oracle, but leave SQLite alone:
+        if connection.vendor == "oracle":
+            key_transforms = [key.replace("%", "%%") for key in key_transforms]
         json_path = compile_json_path(key_transforms)
         datatype_values = ",".join(
             [repr(datatype) for datatype in connection.ops.jsonfield_datatype_values]
         )
         return (
-            "(CASE WHEN JSON_TYPE(%s, %%s) IN (%s) "
-            "THEN JSON_TYPE(%s, %%s) ELSE JSON_EXTRACT(%s, %%s) END)"
-        ) % (lhs, datatype_values, lhs, lhs), (tuple(params) + (json_path,)) * 3
+            f"(CASE WHEN JSON_TYPE({lhs}, %s) IN ({datatype_values}) "
+            f"THEN JSON_TYPE({lhs}, %s) "
+            f"ELSE JSON_EXTRACT({lhs}, %s) END)",
+            (tuple(params) + (json_path,)) * 3
+        )
+    
+    
+    def _build_sqlite_case_expr(self, compiler, connection, force_string_keys=False):
+        """
+        Build a single CASE WHEN JSON_TYPE(...) THEN JSON_TYPE(...) ELSE JSON_EXTRACT(...) END
+        expression, replicating placeholders for multi-placeholder LHS or path usage.
+        """
+        lhs, lhs_params, key_transforms = self.preprocess_lhs(compiler, connection)
+        # If the LHS compiled to an expression with N placeholders, each usage must re-inject them.
+        # So using the LHS 3 times => 3*N placeholders from lhs_params.
+        datatype_values = ",".join(
+            [repr(datatype) for datatype in connection.ops.jsonfield_datatype_values]
+        )
+        # Build a single JSON path (array vs. dictionary usage):
+        json_path = compile_json_path(key_transforms, include_root=True, force_string_keys=force_string_keys)
+        # The final expression: we have 3 references to {lhs} and 3 references to %s for the path:
+        # e.g. "CASE WHEN JSON_TYPE((lhs), %s) IN (datatype_values) THEN JSON_TYPE((lhs), %s) ELSE JSON_EXTRACT((lhs), %s) END"
+        # each {lhs} might already contain placeholders, so we embed it as-is.
+        case_sql = (
+            f"(CASE WHEN JSON_TYPE({lhs}, ?) IN ({datatype_values}) "
+            f"THEN JSON_TYPE({lhs}, ?) "
+            f"ELSE JSON_EXTRACT({lhs}, ?) END)"
+        )
+        # For each usage of {lhs}, we must replicate lhs_params.
+        # For each usage of '?' for the path, we provide json_path.
+        # So final params = 3 * lhs_params + 3 * (json_path,).
+        final_params = []
+        for _ in range(3):
+            final_params.extend(lhs_params)
+            final_params.append(json_path)
+        return case_sql, tuple(final_params)
+    
+    
 
 
 class KeyTextTransform(KeyTransform):
@@ -406,6 +499,7 @@ class KeyTransformIsNull(lookups.IsNull):
             connection,
             template=template,
         )
+    
 
 
 class KeyTransformIn(lookups.In):
diff --git a/test_scripts/test_numeric_json_keys.py b/test_scripts/test_numeric_json_keys.py
new file mode 100644
index 0000000000..08b144119d
--- /dev/null
+++ b/test_scripts/test_numeric_json_keys.py
@@ -0,0 +1,66 @@
+import sys
+import django
+import traceback
+
+from django.conf import settings
+from django.db import models, connection
+from django.core.management import call_command
+
+# Configure Django settings
+settings.configure(
+    SECRET_KEY='test_key',
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.auth',
+        'django.contrib.contenttypes',  # JSONField depends on contenttypes
+    ],
+)
+
+django.setup()
+
+class NumericKeyJSONTestModel(models.Model):
+    data = models.JSONField()
+
+    class Meta:
+        app_label = '__main__'
+
+def main():
+    try:
+        # Create table directly via schema_editor
+        with connection.schema_editor() as editor:
+            editor.create_model(NumericKeyJSONTestModel)
+
+        # Insert data with numeric JSON key
+        instance1 = NumericKeyJSONTestModel.objects.create(data={'foo': 'bar'})
+        instance2 = NumericKeyJSONTestModel.objects.create(data={'1111': 'bar'})
+
+        # Check queries
+        c1 = NumericKeyJSONTestModel.objects.filter(data__has_key='foo').count()
+        c2 = NumericKeyJSONTestModel.objects.filter(data__has_key='1111').count()
+
+        print("Count for foo =", c1)
+        print("Count for 1111 =", c2)
+
+        # Expect each to be 1
+        if c1 != 1:
+            print("FAIL: expected c1=1, got", c1)
+            sys.exit(1)
+        if c2 != 1:
+            print("FAIL: expected c2=1, got", c2)
+            sys.exit(1)
+
+        print("PASS: numeric key is handled correctly (unexpected on HEAD).")
+        sys.exit(0)
+
+    except Exception as e:
+        print("FAIL: encountered an exception:", e)
+        traceback.print_exc()
+        sys.exit(1)
+
+if __name__ == '__main__':
+    main()
