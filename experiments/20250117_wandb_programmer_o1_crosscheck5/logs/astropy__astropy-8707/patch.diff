diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py
index 8c1ac5d738..ad0de97c7c 100644
--- a/astropy/io/fits/card.py
+++ b/astropy/io/fits/card.py
@@ -552,11 +552,15 @@ class Card(_Verify):
         image is longer than 80 columns, assume it contains ``CONTINUE``
         card(s).
         """
-
+        # Decode bytes input to ASCII to avoid str/bytes concatenation issues
+        if isinstance(image, bytes):
+            image = image.decode('ascii')
+    
         card = cls()
         card._image = _pad(image)
         card._verified = False
         return card
+    
 
     @classmethod
     def normalize_keyword(cls, keyword):
diff --git a/astropy/io/fits/header.py b/astropy/io/fits/header.py
index ad07e6d52d..0b8acfff8d 100644
--- a/astropy/io/fits/header.py
+++ b/astropy/io/fits/header.py
@@ -331,36 +331,38 @@ class Header:
         """
         Creates an HDU header from a byte string containing the entire header
         data.
-
+    
         Parameters
         ----------
         data : str
            String containing the entire header.
-
         sep : str, optional
             The string separating cards from each other, such as a newline.  By
             default there is no card separator (as is the case in a raw FITS
             file).
-
+    
         Returns
         -------
         header
             A new `Header` instance.
         """
-
+        # Fix: If data is bytes on Python 3, decode it to ASCII.
+        if isinstance(data, bytes):
+            data = data.decode('ascii')
+    
         cards = []
-
+    
         # If the card separator contains characters that may validly appear in
         # a card, the only way to unambiguously distinguish between cards is to
         # require that they be Card.length long.  However, if the separator
         # contains non-valid characters (namely \n) the cards may be split
         # immediately at the separator
         require_full_cardlength = set(sep).issubset(VALID_HEADER_CHARS)
-
+    
         # Split the header into individual cards
         idx = 0
         image = []
-
+    
         while idx < len(data):
             if require_full_cardlength:
                 end_idx = idx + Card.length
@@ -369,16 +371,16 @@ class Header:
                     end_idx = data.index(sep, idx)
                 except ValueError:
                     end_idx = len(data)
-
+    
             next_image = data[idx:end_idx]
             idx = end_idx + len(sep)
-
+    
             if image:
                 if next_image[:8] == 'CONTINUE':
                     image.append(next_image)
                     continue
                 cards.append(Card.fromstring(''.join(image)))
-
+    
             if require_full_cardlength:
                 if next_image == END_CARD:
                     image = []
@@ -387,14 +389,15 @@ class Header:
                 if next_image.split(sep)[0].rstrip() == 'END':
                     image = []
                     break
-
+    
             image = [next_image]
-
+    
         # Add the last image that was found before the end, if any
         if image:
             cards.append(Card.fromstring(''.join(image)))
-
+    
         return cls._fromcards(cards)
+    
 
     @classmethod
     def fromfile(cls, fileobj, sep='', endcard=True, padding=True):
diff --git a/test_card_fromstring_bytes.py b/test_card_fromstring_bytes.py
new file mode 100644
index 0000000000..890d3da3c2
--- /dev/null
+++ b/test_card_fromstring_bytes.py
@@ -0,0 +1,35 @@
+import sys
+from astropy.io.fits.card import Card
+
+def main():
+    print("Step 1: Creating a minimal 80-byte FITS card in bytes.")
+    # 80 bytes total: key, equals sign, T, comment, some trailing spaces, etc.
+    # Keyword: SIMPLE, Value: T, comment: "Test card".
+    # Keep it exactly 80 bytes.
+    card_bytes = (
+        b"SIMPLE  =                    T / Test card" +
+        b" " * (80 - 44)  # fill to length 80
+    )
+
+    print("The raw card_bytes is:", card_bytes, "length:", len(card_bytes))
+    print("Step 2: Attempting to call Card.fromstring on bytes.")
+    try:
+        c = Card.fromstring(card_bytes)
+        print("Successfully parsed card:", c)
+    except Exception as e:
+        print("FAIL: Card.fromstring raised exception:", e)
+        sys.exit(1)
+
+    print("Step 3: Checking if the SIMPLE keyword is parsed as True.")
+    if c.keyword != "SIMPLE":
+        print("FAIL: c.keyword is not SIMPLE, actual:", c.keyword)
+        sys.exit(1)
+    if c.value is not True:
+        print("FAIL: c.value is not True, actual:", c.value)
+        sys.exit(1)
+
+    print("SUCCESS: Test passed, Card.fromstring handled bytes input correctly.")
+    sys.exit(0)
+
+if __name__ == '__main__':
+    main()
diff --git a/test_fromstring_bytes.py b/test_fromstring_bytes.py
new file mode 100644
index 0000000000..b4b58f9630
--- /dev/null
+++ b/test_fromstring_bytes.py
@@ -0,0 +1,28 @@
+import sys
+from astropy.io.fits import Header
+
+def main():
+    print("Step 1: Creating minimal FITS header in bytes (with SIMPLE= T and an END card).")
+    header_bytes = (
+        b"SIMPLE  =                    T / file conforms to FITS standard\\n"
+        + b"END" + b" " * 77
+    )
+
+    print("Step 2: Attempting to call Header.fromstring on bytes.")
+    try:
+        h = Header.fromstring(header_bytes)
+        print("Successfully parsed header:", h)
+    except Exception as e:
+        print("FAIL: Header.fromstring raised exception:", e)
+        sys.exit(1)
+
+    print("Step 3: Checking if the SIMPLE keyword is parsed as True.")
+    if h['SIMPLE'] is not True:
+        print("FAIL: h['SIMPLE'] is not True, actual:", h['SIMPLE'])
+        sys.exit(1)
+
+    print("SUCCESS: Test passed, fromstring handled bytes input correctly.")
+    sys.exit(0)
+
+if __name__ == '__main__':
+    main()
