diff --git a/django/db/models/base.py b/django/db/models/base.py
index 844c01e95e..b069b026b6 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -799,14 +799,33 @@ class Model(metaclass=ModelBase):
     save_base.alters_data = True
 
     def _save_parents(self, cls, using, update_fields):
-        """Save all the parents of cls using values from self."""
+        """
+        Save all the parents of cls using values from self.
+    
+        Hybrid fix:
+        1) If this object was previously saved (not _state.adding) but child.pk is reset
+           to None, break the existing parent pointer (set to None). This ensures a new
+           row is inserted rather than updating the old row.
+        2) If it's a brand-new object (child.pk is None and _state.adding is True), or if
+           other code set the child's pointer to an existing PK, reusing the existing row
+           still applies (test_issue_6755 scenario).
+        """
         meta = cls._meta
         inserted = False
+    
+        # If the object was previously saved but pk is reset to None, break the parent's pointer.
+        if not self._state.adding and self.pk is None and not meta.abstract:
+            # Force parent pointer fields to None so we don't accidentally update an existing row.
+            for p, f in meta.parents.items():
+                if f:
+                    setattr(self, f.attname, None)
+    
         for parent, field in meta.parents.items():
-            # Make sure the link fields are synced between parent and self.
-            if (field and getattr(self, parent._meta.pk.attname) is None and
-                    getattr(self, field.attname) is not None):
+            # Django's standard logic: if parent's PK is None but the child's pointer is not None,
+            # then reuse that parent's row (test_issue_6755). We skip this if we just broke the pointer.
+            if field and getattr(self, parent._meta.pk.attname) is None and getattr(self, field.attname) is not None:
                 setattr(self, parent._meta.pk.attname, getattr(self, field.attname))
+    
             parent_inserted = self._save_parents(cls=parent, using=using, update_fields=update_fields)
             updated = self._save_table(
                 cls=parent, using=using, update_fields=update_fields,
@@ -814,17 +833,18 @@ class Model(metaclass=ModelBase):
             )
             if not updated:
                 inserted = True
-            # Set the parent's PK value to self.
+    
+            # Finally, sync the child's pointer / PK with the parent's PK.
             if field:
                 setattr(self, field.attname, self._get_pk_val(parent._meta))
-                # Since we didn't have an instance of the parent handy set
-                # attname directly, bypassing the descriptor. Invalidate
-                # the related object cache, in case it's been accidentally
-                # populated. A fresh instance will be re-built from the
-                # database if necessary.
                 if field.is_cached(self):
                     field.delete_cached_value(self)
+    
         return inserted
+    
+    
+    
+    
 
     def _save_table(self, raw=False, cls=None, force_insert=False,
                     force_update=False, using=None, update_fields=None):
diff --git a/tests/test_pk_reset.py b/tests/test_pk_reset.py
new file mode 100644
index 0000000000..7df1de8873
--- /dev/null
+++ b/tests/test_pk_reset.py
@@ -0,0 +1,99 @@
+#!/usr/bin/env python3
+import sys
+import os
+import unittest
+import traceback
+
+def main():
+    print("Running test for PK reset scenario with direct table creation...")
+    try:
+        import django
+        from django.conf import settings
+        from django.db import connection, models
+        from django.test import TestCase
+        from django.test.utils import setup_test_environment, teardown_test_environment
+        from django.test.utils import setup_databases, teardown_databases
+
+        # Minimal settings for an in-memory DB
+        settings.configure(
+            INSTALLED_APPS=[
+                'django.contrib.contenttypes',
+                'django.contrib.auth',
+            ],
+            DATABASES={
+                'default': {
+                    'ENGINE': 'django.db.backends.sqlite3',
+                    'NAME': ':memory:',
+                }
+            },
+            MIDDLEWARE=[],
+            BASE_DIR=os.path.dirname(__file__),
+            SECRET_KEY='test',
+        )
+        django.setup()
+        setup_test_environment()
+        db_cfg = setup_databases(verbosity=0, interactive=False)
+
+        # Define test models
+        class Item(models.Model):
+            uid = models.AutoField(primary_key=True, editable=False)
+            f = models.BooleanField(default=False)
+            def reset(self):
+                self.uid = None
+                self.f = False
+            class Meta:
+                app_label = 'dontcare'
+                managed = False  # We'll manually manage creation with schema_editor
+
+        class Derived(Item):
+            class Meta:
+                app_label = 'dontcare'
+                managed = False  # We'll manually manage creation with schema_editor
+
+        # Manually create the tables
+        with connection.schema_editor() as editor:
+            editor.create_model(Item)
+            editor.create_model(Derived)
+
+        class SaveTestCase(TestCase):
+            def test_pk_reset(self):
+                derived = Derived.objects.create(f=True)
+                item = Item.objects.get(pk=derived.pk)
+                obj1 = item.derived
+                obj1.reset()
+                obj1.save()
+                # The original item should remain with f=True
+                old_obj = Item.objects.get(pk=derived.pk)
+                self.assertTrue(
+                    old_obj.f,
+                    f"Old object was overwritten, old_obj.f={old_obj.f}"
+                )
+                # We expect 2 total items
+                all_items = list(Item.objects.all())
+                self.assertEqual(
+                    len(all_items), 2,
+                    f"Expected 2 items, got {len(all_items)}, items = {[(x.pk, x.f) for x in all_items]}"
+                )
+
+        suite = unittest.TestSuite()
+        suite.addTest(unittest.makeSuite(SaveTestCase))
+        runner = unittest.TextTestRunner(verbosity=2)
+        result = runner.run(suite)
+
+        teardown_databases(db_cfg, verbosity=0)
+        teardown_test_environment()
+
+        if result.wasSuccessful():
+            print("Test unexpectedly passed. The bug did NOT reproduce.")
+            sys.exit(0)
+        else:
+            # Non-zero => test failed => we reproduced the bug
+            sys.exit(1)
+
+    except Exception:
+        print("Unhandled exception in test script!")
+        traceback.print_exc()
+        sys.exit(2)
+
+if __name__ == "__main__":
+    main()
