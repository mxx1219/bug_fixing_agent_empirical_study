diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index 29e33c075f..085efbe6cc 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -1407,9 +1407,20 @@ class SQLInsertCompiler(SQLCompiler):
 class SQLDeleteCompiler(SQLCompiler):
     @cached_property
     def single_alias(self):
-        return sum(self.query.alias_refcount[t] > 0 for t in self.query.alias_map) == 1
+        alias_count = sum(self.query.alias_refcount[t] > 0 for t in self.query.alias_map)
+        print("DEBUG single_alias alias_count =", alias_count, "base_table =", self.query.base_table)
+        return alias_count <= 1
+    
+    
+    
+    
+    
+    
 
     def _as_sql(self, query):
+        # Ensure base_table is set if it's None.
+        if query.base_table is None:
+            query.get_initial_alias()
         result = [
             'DELETE FROM %s' % self.quote_name_unless_alias(query.base_table)
         ]
@@ -1417,25 +1428,33 @@ class SQLDeleteCompiler(SQLCompiler):
         if where:
             result.append('WHERE %s' % where)
         return ' '.join(result), tuple(params)
+    
 
     def as_sql(self):
-        """
-        Create the SQL for this query. Return the SQL string and list of
-        parameters.
-        """
         if self.single_alias:
-            return self._as_sql(self.query)
-        innerq = self.query.clone()
-        innerq.__class__ = Query
-        innerq.clear_select_clause()
-        pk = self.query.model._meta.pk
-        innerq.select = [
-            pk.get_col(self.query.get_initial_alias())
-        ]
-        outerq = Query(self.query.model)
-        outerq.where = self.query.where_class()
-        outerq.add_q(Q(pk__in=innerq))
-        return self._as_sql(outerq)
+            from django.db.models.sql.query import Query
+            from django.db.models.query_utils import Q
+            directq = Query(self.query.model)
+            # Copy the where clause so directq can do a single-table delete.
+            directq.where = self.query.where.clone()
+            directq.get_initial_alias()
+            return self._as_sql(directq)
+        else:
+            # Subquery approach unchanged.
+            from django.db.models.sql.query import Query
+            from django.db.models.query_utils import Q
+            innerq = self.query.clone()
+            innerq.__class__ = Query
+            innerq.clear_select_clause()
+            pk = self.query.model._meta.pk
+            innerq.select = [
+                pk.get_col(self.query.get_initial_alias())
+            ]
+            outerq = Query(self.query.model)
+            outerq.where = self.query.where_class()
+            outerq.add_q(Q(pk__in=innerq))
+            return self._as_sql(outerq)
+    
 
 
 class SQLUpdateCompiler(SQLCompiler):
diff --git a/subquery_delete_repro/__init__.py b/subquery_delete_repro/__init__.py
new file mode 100644
index 0000000000..8b13789179
--- /dev/null
+++ b/subquery_delete_repro/__init__.py
@@ -0,0 +1 @@
+
diff --git a/subquery_delete_repro/models.py b/subquery_delete_repro/models.py
new file mode 100644
index 0000000000..4985b6f978
--- /dev/null
+++ b/subquery_delete_repro/models.py
@@ -0,0 +1,7 @@
+from django.db import models
+
+class TestModel(models.Model):
+    name = models.CharField(max_length=31)
+
+    class Meta:
+        app_label = "subquery_delete_repro"
diff --git a/test_subquery_delete_issue.py b/test_subquery_delete_issue.py
new file mode 100644
index 0000000000..4efac44ddb
--- /dev/null
+++ b/test_subquery_delete_issue.py
@@ -0,0 +1,53 @@
+import sys
+import django
+from django.conf import settings
+from django.db import connection
+from django.test.utils import CaptureQueriesContext
+import traceback
+
+def main():
+    print("Step: Configuring Django settings (minimal) and calling setup...")
+    try:
+        settings.configure(
+            SECRET_KEY="test",
+            INSTALLED_APPS=["subquery_delete_repro"],
+            DATABASES={"default": {"ENGINE": "django.db.backends.sqlite3", "NAME": ":memory:"}},
+        )
+        django.setup()
+        print("Django configured and setup completed.")
+    except Exception as e:
+        traceback.print_exc()
+        sys.exit(1)
+
+    # Import the model after django.setup() to avoid ImproperlyConfigured error
+    from subquery_delete_repro.models import TestModel
+
+    print("Step: Creating table manually via the schema editor...")
+    try:
+        with connection.schema_editor() as schema_editor:
+            schema_editor.create_model(TestModel)
+        print("Table created.")
+    except Exception as e:
+        traceback.print_exc()
+        sys.exit(1)
+
+    try:
+        obj = TestModel.objects.create(name='test')
+        print(f'Inserted object with id={obj.id}')
+        with CaptureQueriesContext(connection) as ctx:
+            TestModel.objects.all().delete()
+        print('Captured queries:')
+        for q in ctx.captured_queries:
+            print(q['sql'])
+        for q in ctx.captured_queries:
+            if 'IN (SELECT' in q['sql'].upper():
+                print('SUBQUERY DETECTED -> test fails (exit status=1).')
+                sys.exit(1)
+        print('No subquery found -> test passes (exit status=0).')
+        sys.exit(0)
+    except Exception as e:
+        traceback.print_exc()
+        sys.exit(1)
+
+if __name__ == '__main__':
+    main()
