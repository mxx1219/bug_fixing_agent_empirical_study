diff --git a/django/utils/http.py b/django/utils/http.py
index 572cfb4347..0c54745b89 100644
--- a/django/utils/http.py
+++ b/django/utils/http.py
@@ -164,9 +164,6 @@ def parse_http_date(date):
 
     Return an integer expressed in seconds since the epoch, in UTC.
     """
-    # email.utils.parsedate() does the job for RFC1123 dates; unfortunately
-    # RFC7231 makes it mandatory to support RFC850 dates too. So we roll
-    # our own RFC-compliant parsing.
     for regex in RFC1123_DATE, RFC850_DATE, ASCTIME_DATE:
         m = regex.match(date)
         if m is not None:
@@ -175,11 +172,15 @@ def parse_http_date(date):
         raise ValueError("%r is not in a valid HTTP date format" % date)
     try:
         year = int(m.group('year'))
-        if year < 100:
-            if year < 70:
-                year += 2000
-            else:
-                year += 1900
+        # Dynamic pivot based on the current year to comply with RFC 7231.
+        if 0 <= year <= 99:
+            now_year = datetime.datetime.utcnow().year
+            test_year = (now_year - (now_year % 100)) + year
+            # If test_year is more than 50 years in the future, interpret it as the past.
+            if test_year - now_year > 50:
+                test_year -= 100
+            year = test_year
+
         month = MONTHS.index(m.group('mon').lower()) + 1
         day = int(m.group('day'))
         hour = int(m.group('hour'))
@@ -191,6 +192,7 @@ def parse_http_date(date):
         raise ValueError("%r is not a valid date" % date) from exc
 
 
+
 def parse_http_date_safe(date):
     """
     Same as parse_http_date, but return None if the input is invalid.
diff --git a/test_parse_http_date_future.py b/test_parse_http_date_future.py
new file mode 100644
index 0000000000..4c5390379f
--- /dev/null
+++ b/test_parse_http_date_future.py
@@ -0,0 +1,37 @@
+import sys
+import datetime
+from django.utils.http import parse_http_date
+
+class MockDateTime(datetime.datetime):
+    @classmethod
+    def utcnow(cls):
+        # Force the 'current year' to 2017
+        return cls(2017, 1, 1)
+
+def main():
+    print("Testing parse_http_date's handling of two-digit year when current year is mocked to 2017.")
+    # Monkey patch datetime
+    real_datetime = datetime.datetime
+    datetime.datetime = MockDateTime
+    try:
+        # RFC 850 date requires day of week to be 6-9 letters
+        date_str = "Saturday, 27-May-68 09:13:12 GMT"
+        print(f"Parsing date: {date_str}")
+        parsed = parse_http_date(date_str)
+        dt = datetime.datetime.utcfromtimestamp(parsed)
+        print(f"Parsed to: {dt.isoformat()}")
+        # The code on HEAD interprets year=68 as 2068, which is 51 years after 2017
+        # RFC 7231 says a 2-digit year more than 50 years in the future must be in the past
+        # so it should be 1968, not 2068.
+        if dt.year == 1968:
+            print("PASS: Correctly interpreted (1968).")
+            sys.exit(0)
+        else:
+            print(f"FAIL: Returned year={dt.year}, expected 1968 per RFC 7231.")
+            sys.exit(1)
+    finally:
+        # Restore real datetime
+        datetime.datetime = real_datetime
+
+if __name__ == "__main__":
+    main()
