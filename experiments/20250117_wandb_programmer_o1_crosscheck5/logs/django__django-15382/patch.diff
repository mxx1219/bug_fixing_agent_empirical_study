diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 81f8f79c71..0ef568ad4b 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -1210,17 +1210,28 @@ class Exists(Subquery):
         return clone
 
     def as_sql(self, compiler, connection, template=None, **extra_context):
+        from django.core.exceptions import EmptyResultSet
         query = self.query.exists(using=connection.alias)
-        sql, params = super().as_sql(
-            compiler,
-            connection,
-            template=template,
-            query=query,
-            **extra_context,
-        )
+        try:
+            sql, params = super(Exists, self).as_sql(
+                compiler,
+                connection,
+                template=template,
+                query=query,
+                **extra_context,
+            )
+        except EmptyResultSet:
+            # If the subquery is guaranteed empty, then:
+            # EXISTS(empty) is false -> 1=0
+            # NOT EXISTS(empty) is true -> 1=1
+            if self.negated:
+                return '1=1', []
+            else:
+                return '1=0', []
         if self.negated:
             sql = 'NOT {}'.format(sql)
         return sql, params
+    
 
     def select_format(self, compiler, sql, params):
         # Wrap EXISTS() with a CASE WHEN expression if a database backend
diff --git a/tests/__init__.py b/tests/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/fix_exists_issue.py b/tests/fix_exists_issue.py
new file mode 100644
index 0000000000..48d142d153
--- /dev/null
+++ b/tests/fix_exists_issue.py
@@ -0,0 +1,64 @@
+#!/usr/bin/env python3
+
+import sys
+import django
+from django.conf import settings
+from django.db import connections, models, DEFAULT_DB_ALIAS
+
+def main():
+    print("Starting fix_exists_issue test script...")
+
+    # Step 1: Configure settings if not already configured.
+    if not settings.configured:
+        settings.configure(
+            DEBUG=True,
+            SECRET_KEY='testkey',
+            INSTALLED_APPS=['django.contrib.contenttypes'],
+            DATABASES={
+                'default': {
+                    'ENGINE': 'django.db.backends.sqlite3',
+                    'NAME': ':memory:',
+                }
+            },
+        )
+
+    django.setup()
+
+    # Step 2: Dynamically create a test model after django.setup()
+    class MyModel(models.Model):
+        name = models.CharField(max_length=50)
+
+        class Meta:
+            app_label = 'contenttypes'
+
+    # Step 3: Create the database table
+    with connections[DEFAULT_DB_ALIAS].schema_editor() as schema_editor:
+        schema_editor.create_model(MyModel)
+    print("Created MyModel table in memory DB.")
+
+    # Step 4: Create a test row
+    MyModel.objects.create(name='test')
+    print("Inserted row with name='test' into MyModel.")
+
+    # Step 5: Perform the test filter
+    from django.db.models import Exists
+    queryset = MyModel.objects.filter(~Exists(MyModel.objects.none()), name='test')
+
+    # Print the SQL representation
+    print("Generated SQL:", str(queryset.query))
+
+    # Step 6: Check results
+    count = queryset.count()
+    print("Retrieved row count =", count)
+
+    # Step 7: Decide pass/fail
+    # If the bug is present, count == 0. If fixed, count == 1.
+    if count == 1:
+        print("Success: The row was found as expected.")
+        sys.exit(0)
+    else:
+        print("Failure: The row was unexpectedly NOT found (bug present).")
+        sys.exit(1)
+
+if __name__ == '__main__':
+    main()
