diff --git a/django/forms/models.py b/django/forms/models.py
index 192d9fad94..2014df42cd 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -603,11 +603,7 @@ def modelform_factory(
     ``field_classes`` is a dictionary of model field names mapped to a form
     field class.
     """
-    # Create the inner Meta class. FIXME: ideally, we should be able to
-    # construct a ModelForm without creating and passing in a temporary
-    # inner class.
-
-    # Build up a list of attributes that the Meta object will have.
+    # Create the inner Meta class.
     attrs = {"model": model}
     if fields is not None:
         attrs["fields"] = fields
@@ -626,17 +622,21 @@ def modelform_factory(
     if field_classes is not None:
         attrs["field_classes"] = field_classes
 
-    # If parent form class already has an inner Meta, the Meta we're
-    # creating needs to inherit from the parent's inner meta.
     bases = (form.Meta,) if hasattr(form, "Meta") else ()
     Meta = type("Meta", bases, attrs)
-    if formfield_callback:
+
+    # Only set the Meta's callback if explicitly passed.
+    if formfield_callback is not None:
         Meta.formfield_callback = staticmethod(formfield_callback)
-    # Give this new form class a reasonable name.
+
     class_name = model.__name__ + "Form"
 
-    # Class attributes for the new form class.
-    form_class_attrs = {"Meta": Meta, "formfield_callback": formfield_callback}
+    # Build the class attributes.
+    form_class_attrs = {"Meta": Meta}
+
+    # Only override the formfield_callback in the new form if explicitly passed.
+    if formfield_callback is not None:
+        form_class_attrs["formfield_callback"] = formfield_callback
 
     if getattr(Meta, "fields", None) is None and getattr(Meta, "exclude", None) is None:
         raise ImproperlyConfigured(
@@ -644,10 +644,10 @@ def modelform_factory(
             "'exclude' explicitly is prohibited."
         )
 
-    # Instantiate type(form) in order to use the same metaclass as form.
     return type(form)(class_name, (form,), form_class_attrs)
 
 
+
 # ModelFormSets ##############################################################
 
 
diff --git a/test_formfield_callback_bug.py b/test_formfield_callback_bug.py
new file mode 100644
index 0000000000..ff195e81de
--- /dev/null
+++ b/test_formfield_callback_bug.py
@@ -0,0 +1,68 @@
+import sys
+
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[],
+        DATABASES={
+            "default": {
+                "ENGINE": "django.db.backends.sqlite3",
+                "NAME": ":memory:"
+            }
+        },
+        SECRET_KEY="fake-key",
+    )
+
+import django
+django.setup()
+
+from django.db import models
+from django import forms
+from django.forms import modelform_factory
+
+def all_required(field, **kwargs):
+    formfield = field.formfield(**kwargs)
+    formfield.required = True
+    return formfield
+
+class MyModel(models.Model):
+    active = models.BooleanField()
+    name = models.CharField(max_length=64, blank=True, null=True)
+
+    class Meta:
+        app_label = "test_formfield_callback_bug"
+
+class MyForm(forms.ModelForm):
+    # The top-level attribute is what ModelFormMetaclass actually uses.
+    formfield_callback = all_required
+
+    class Meta:
+        model = MyModel
+        fields = ["active", "name"]
+        # Often, developers also mention it here, but historically Django ignores it.
+        formfield_callback = all_required
+
+def main():
+    print("Creating MyForm directly...")
+    form_instance = MyForm()
+    print(f"  MyForm.active.required = {form_instance.fields['active'].required}")
+    print(f"  MyForm.name.required   = {form_instance.fields['name'].required}")
+    if not form_instance.fields["active"].required or not form_instance.fields["name"].required:
+        print("ERROR: MyForm does not have required fields. Failing test.")
+        sys.exit(1)
+
+    print("Creating FactoryForm via modelform_factory(MyModel, form=MyForm)...")
+    FactoryForm = modelform_factory(MyModel, form=MyForm)
+    factory_form_instance = FactoryForm()
+    print(f"  FactoryForm.active.required = {factory_form_instance.fields['active'].required}")
+    print(f"  FactoryForm.name.required   = {factory_form_instance.fields['name'].required}")
+    if not factory_form_instance.fields["active"].required or not factory_form_instance.fields["name"].required:
+        print("ERROR: FactoryForm does not have required fields. Failing test.")
+        sys.exit(1)
+
+    print("SUCCESS: Both forms have required fields as expected.")
+    sys.exit(0)
+
+if __name__ == "__main__":
+    main()
