diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 88c9ca9f28..11432d1a72 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -542,11 +542,10 @@ class Field(RegisterLookupMixin):
         return NotImplemented
 
     def __hash__(self):
-        return hash((
-            self.creation_counter,
-            self.model._meta.app_label if hasattr(self, 'model') else None,
-            self.model._meta.model_name if hasattr(self, 'model') else None,
-        ))
+        # Revert the hash from #31750 by removing references to self.model
+        # to keep the hash stable across the field's lifetime.
+        return hash(self.creation_counter)
+    
 
     def __deepcopy__(self, memodict):
         # We don't have to deepcopy very much here, since most things are not
@@ -561,11 +560,19 @@ class Field(RegisterLookupMixin):
 
     def __copy__(self):
         # We need to avoid hitting __reduce__, so define this
-        # slightly weird copy construct.
+        # slightly weird copy construct that reassigns creation_counter.
         obj = Empty()
         obj.__class__ = self.__class__
         obj.__dict__ = self.__dict__.copy()
+        # Assign a new creation_counter, mirroring the constructor:
+        if obj.auto_created:
+            obj.creation_counter = Field.auto_creation_counter
+            Field.auto_creation_counter -= 1
+        else:
+            obj.creation_counter = Field.creation_counter
+            Field.creation_counter += 1
         return obj
+    
 
     def __reduce__(self):
         """
diff --git a/test_field_hash_repro.py b/test_field_hash_repro.py
new file mode 100644
index 0000000000..43e34eb517
--- /dev/null
+++ b/test_field_hash_repro.py
@@ -0,0 +1,49 @@
+import sys
+import os
+from django.conf import settings
+import django
+
+def main():
+    print("Running field hash repro test...")
+    # Minimal settings for Django
+    if not settings.configured:
+        settings.configure(
+            INSTALLED_APPS=[
+                "django.contrib.auth",
+                "django.contrib.contenttypes"
+            ],
+            DATABASES={
+                "default": {
+                    "ENGINE": "django.db.backends.sqlite3",
+                    "NAME": ":memory:",
+                }
+            },
+            MIDDLEWARE=[],
+        )
+    django.setup()
+
+    from django.db import models
+
+    print("Step 1: Create a CharField f.")
+    f = models.CharField(max_length=200)
+    d = {f: 1}
+    print(f"Dictionary is: {d}")
+
+    print("Step 2: Define model class Book with 'title = f' (this triggers assignment).")
+    class Book(models.Model):
+        title = f
+        class Meta:
+            app_label = "hash_bug_test"
+
+    print("Step 3: Check membership of 'f' in the dictionary.")
+    try:
+        assert f in d
+    except AssertionError:
+        print("Bug triggered: 'f' is no longer in the dictionary => hash changed.")
+        sys.exit(1)
+    else:
+        print("No bug: 'f' is still in the dictionary => hash is stable.")
+        sys.exit(0)
+
+if __name__ == "__main__":
+    main()
