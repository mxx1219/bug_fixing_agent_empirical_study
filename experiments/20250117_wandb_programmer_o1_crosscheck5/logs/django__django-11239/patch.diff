diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py
index cf4df76882..4f036cc8d1 100644
--- a/django/db/backends/postgresql/client.py
+++ b/django/db/backends/postgresql/client.py
@@ -10,14 +10,24 @@ class DatabaseClient(BaseDatabaseClient):
 
     @classmethod
     def runshell_db(cls, conn_params):
+        import os
+        import signal
+        import subprocess
+    
         args = [cls.executable_name]
-
+    
         host = conn_params.get('host', '')
         port = conn_params.get('port', '')
         dbname = conn_params.get('database', '')
         user = conn_params.get('user', '')
         passwd = conn_params.get('password', '')
-
+    
+        # The ssl keys in get_connection_params() are merged into the top-level dict.
+        sslrootcert = conn_params.get('sslrootcert')
+        sslcert = conn_params.get('sslcert')
+        sslkey = conn_params.get('sslkey')
+        sslmode = conn_params.get('sslmode')
+    
         if user:
             args += ['-U', user]
         if host:
@@ -25,11 +35,22 @@ class DatabaseClient(BaseDatabaseClient):
         if port:
             args += ['-p', str(port)]
         args += [dbname]
-
+    
         sigint_handler = signal.getsignal(signal.SIGINT)
         subprocess_env = os.environ.copy()
         if passwd:
             subprocess_env['PGPASSWORD'] = str(passwd)
+    
+        # TLS environment variables
+        if sslrootcert:
+            subprocess_env['PGSSLROOTCERT'] = sslrootcert
+        if sslcert:
+            subprocess_env['PGSSLCERT'] = sslcert
+        if sslkey:
+            subprocess_env['PGSSLKEY'] = sslkey
+        if sslmode:
+            subprocess_env['PGSSLMODE'] = sslmode
+    
         try:
             # Allow SIGINT to pass to psql to abort queries.
             signal.signal(signal.SIGINT, signal.SIG_IGN)
@@ -37,6 +58,8 @@ class DatabaseClient(BaseDatabaseClient):
         finally:
             # Restore the original SIGINT handler.
             signal.signal(signal.SIGINT, sigint_handler)
+    
+    
 
     def runshell(self):
         DatabaseClient.runshell_db(self.connection.get_connection_params())
diff --git a/test_postgres_tls.py b/test_postgres_tls.py
new file mode 100644
index 0000000000..67ff7febc5
--- /dev/null
+++ b/test_postgres_tls.py
@@ -0,0 +1,70 @@
+print("Starting test_postgres_tls.py")
+
+import sys
+import os
+import django
+from django.conf import settings
+from django.db import connections
+import subprocess
+
+print("Configuring Django settings with SSL param in OPTIONS...")
+
+test_db_config = {
+    'ENGINE': 'django.db.backends.postgresql',
+    'NAME': 'some_db',
+    'USER': 'some_user',
+    'HOST': 'localhost',
+    'OPTIONS': {
+        'sslrootcert': 'test_ca.crt',
+        'sslcert': 'test_client.crt',
+        'sslkey': 'test_client.key',
+        'sslmode': 'require'
+    }
+}
+
+print("Applying settings.configure...")
+
+settings.configure(
+    DATABASES={
+        'default': test_db_config
+    },
+    SECRET_KEY='dummy-key',
+    INSTALLED_APPS=[]
+)
+django.setup()
+
+print("Patching subprocess.run to capture environment...")
+
+old_run = subprocess.run
+
+def patched_run(args, check, env=None):
+    print("Inside patched_run. Checking environment variables for TLS support...")
+    sslrootcert = env.get('PGSSLROOTCERT', None)
+    sslcert = env.get('PGSSLCERT', None)
+    sslkey = env.get('PGSSLKEY', None)
+    sslmode = env.get('PGSSLMODE', None)
+    print("PGSSLROOTCERT =", sslrootcert)
+    print("PGSSLCERT     =", sslcert)
+    print("PGSSLKEY      =", sslkey)
+    print("PGSSLMODE     =", sslmode)
+
+    if None in [sslrootcert, sslcert, sslkey, sslmode]:
+        print("ERROR: Not all TLS environment variables found, test fails.")
+        sys.exit(1)
+    print("All TLS environment variables found, test passes.")
+    sys.exit(0)
+
+subprocess.run = patched_run
+
+print("Invoking dbshell...")
+
+try:
+    connections['default'].client.runshell()
+except SystemExit as e:
+    print("SystemExit with code", e.code)
+    sys.exit(e.code)
+finally:
+    subprocess.run = old_run
+
+print("Somehow we didn't exit in patched_run. This is unexpected.")
+sys.exit(1)
