diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py
index 9d6952df21..c6091fed1d 100644
--- a/django/db/backends/base/schema.py
+++ b/django/db/backends/base/schema.py
@@ -1389,13 +1389,16 @@ class BaseDatabaseSchemaEditor:
             "related_query_name",
             "validators",
             "verbose_name",
+            "choices",
         ]
         for attr in non_database_attrs:
             old_kwargs.pop(attr, None)
             new_kwargs.pop(attr, None)
-        return self.quote_name(old_field.column) != self.quote_name(
-            new_field.column
-        ) or (old_path, old_args, old_kwargs) != (new_path, new_args, new_kwargs)
+        return (
+            self.quote_name(old_field.column) != self.quote_name(new_field.column)
+            or (old_path, old_args, old_kwargs) != (new_path, new_args, new_kwargs)
+        )
+    
 
     def _field_should_be_indexed(self, model, field):
         return field.db_index and not field.unique
diff --git a/test_sqlite_choices_alter.py b/test_sqlite_choices_alter.py
new file mode 100644
index 0000000000..f9bfd4621f
--- /dev/null
+++ b/test_sqlite_choices_alter.py
@@ -0,0 +1,70 @@
+import sys
+import textwrap
+import django
+from django.conf import settings
+from django.db import connection, models
+
+# Configure minimal Django settings if not already configured.
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            "django.contrib.contenttypes",
+        ],
+        DATABASES={
+            "default": {
+                "ENGINE": "django.db.backends.sqlite3",
+                "NAME": ":memory:",
+            }
+        },
+        SECRET_KEY="dummy",
+        USE_I18N=False,
+        USE_L10N=False,
+        USE_TZ=False,
+    )
+django.setup()
+
+def main():
+    """
+    1) Create an in-memory SQLite db.
+    2) Define a test model with initial 'choices'.
+    3) Use schema_editor(collect_sql=True) to alter the field with new 'choices'.
+    4) If "CREATE TABLE \"NEW__" is found in the SQL (uppercase), we fail with code 1.
+    """
+
+    print("Step 1: Defining a test model with a 'choices' attribute.")
+    class TestModel(models.Model):
+        name = models.CharField(
+            max_length=20,
+            choices=[("A","A label"), ("B","B label")],
+        )
+        class Meta:
+            app_label = "test_app_choices_alter"
+
+    with connection.schema_editor(collect_sql=True) as editor:
+        editor.create_model(TestModel)
+
+    print("Step 2: Attempting to alter only the field's choices.")
+    old_field = TestModel._meta.get_field("name")
+    new_field = models.CharField(
+        max_length=20,
+        choices=[("A","A label"), ("C","C label")],  # changed from B->C
+    )
+    new_field.set_attributes_from_name("name")
+
+    with connection.schema_editor(collect_sql=True) as editor:
+        editor.alter_field(TestModel, old_field, new_field)
+        generated_sql = "\n".join(editor.collected_sql)
+
+    print("Collected SQL:\n", textwrap.indent(generated_sql, "    "))
+
+    # Check if a new table is created.
+    # The actual snippet is CREATE TABLE "new__..., so we look for CREATE TABLE \"NEW__ in uppercase:
+    if "CREATE TABLE \"NEW__" in generated_sql.upper():
+        print("ERROR: Found 'CREATE TABLE \"NEW__' => unwanted table remake => bug present.")
+        sys.exit(1)
+    else:
+        print("SUCCESS: No 'CREATE TABLE \"NEW__' => no unwanted table remake => bug appears fixed.")
+        sys.exit(0)
+
+if __name__ == "__main__":
+    main()
