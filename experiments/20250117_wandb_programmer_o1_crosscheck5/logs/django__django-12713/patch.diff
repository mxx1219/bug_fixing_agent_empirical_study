diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 69a5fbf389..61d1ffeae3 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -248,30 +248,34 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):
         if not db_field.remote_field.through._meta.auto_created:
             return None
         db = kwargs.get('using')
-
+    
         autocomplete_fields = self.get_autocomplete_fields(request)
-        if db_field.name in autocomplete_fields:
-            kwargs['widget'] = AutocompleteSelectMultiple(db_field.remote_field, self.admin_site, using=db)
-        elif db_field.name in self.raw_id_fields:
-            kwargs['widget'] = widgets.ManyToManyRawIdWidget(db_field.remote_field, self.admin_site, using=db)
-        elif db_field.name in [*self.filter_vertical, *self.filter_horizontal]:
-            kwargs['widget'] = widgets.FilteredSelectMultiple(
-                db_field.verbose_name,
-                db_field.name in self.filter_vertical
-            )
-
+        if 'widget' not in kwargs:
+            if db_field.name in autocomplete_fields:
+                kwargs['widget'] = AutocompleteSelectMultiple(db_field.remote_field, self.admin_site, using=db)
+            elif db_field.name in self.raw_id_fields:
+                kwargs['widget'] = widgets.ManyToManyRawIdWidget(db_field.remote_field, self.admin_site, using=db)
+            elif db_field.name in [*self.filter_vertical, *self.filter_horizontal]:
+                kwargs['widget'] = widgets.FilteredSelectMultiple(
+                    db_field.verbose_name,
+                    db_field.name in self.filter_vertical
+                )
+    
         if 'queryset' not in kwargs:
             queryset = self.get_field_queryset(db, db_field, request)
             if queryset is not None:
                 kwargs['queryset'] = queryset
-
+    
         form_field = db_field.formfield(**kwargs)
-        if (isinstance(form_field.widget, SelectMultiple) and
-                not isinstance(form_field.widget, (CheckboxSelectMultiple, AutocompleteSelectMultiple))):
+        if (
+            isinstance(form_field.widget, SelectMultiple) and
+            not isinstance(form_field.widget, (CheckboxSelectMultiple, AutocompleteSelectMultiple))
+        ):
             msg = _('Hold down “Control”, or “Command” on a Mac, to select more than one.')
             help_text = form_field.help_text
             form_field.help_text = format_lazy('{} {}', help_text, msg) if help_text else msg
         return form_field
+    
 
     def get_autocomplete_fields(self, request):
         """
diff --git a/test_widget_override_m2m.py b/test_widget_override_m2m.py
new file mode 100644
index 0000000000..553c6ca1e4
--- /dev/null
+++ b/test_widget_override_m2m.py
@@ -0,0 +1,72 @@
+#!/usr/bin/env python3
+import sys
+print("Step: Starting the widget override test for many-to-many fields.")
+
+try:
+    import django
+    from django.conf import settings
+    from django.db import models
+    from django import forms
+    from django.contrib import admin
+
+    # Configure minimal Django settings using only built-in apps.
+    settings.configure(
+        INSTALLED_APPS=[
+            'django.contrib.admin',
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+        SECRET_KEY='testsecretkey',
+        MIDDLEWARE=[],
+        ROOT_URLCONF=None,
+    )
+    django.setup()
+
+    class Tag(models.Model):
+        name = models.CharField(max_length=50)
+
+        class Meta:
+            # Use a built-in label to avoid importing a missing package.
+            app_label = 'admin'
+            managed = False
+
+    class Article(models.Model):
+        title = models.CharField(max_length=50)
+        tags = models.ManyToManyField(Tag)
+
+        class Meta:
+            app_label = 'admin'
+            managed = False
+
+    class ArticleAdmin(admin.ModelAdmin):
+        filter_horizontal = ('tags',)
+
+        def formfield_for_manytomany(self, db_field, request, **kwargs):
+            if db_field.name == 'tags':
+                print("Step: Overriding widget in formfield_for_manytomany.")
+                kwargs['widget'] = forms.CheckboxSelectMultiple
+            return super().formfield_for_manytomany(db_field, request, **kwargs)
+
+    # Instantiate the admin and retrieve the form field for 'tags'.
+    admin_site = admin.AdminSite()
+    test_admin = ArticleAdmin(Article, admin_site)
+    field = test_admin.formfield_for_manytomany(Article._meta.get_field('tags'), request=None)
+
+    actual_widget_type = type(field.widget)
+    intended_widget_type = forms.CheckboxSelectMultiple
+    print(f"Step: The final widget is {actual_widget_type}, intended is {intended_widget_type}.")
+
+    if actual_widget_type is not intended_widget_type:
+        print("Result: FAIL (the widget override was lost). Exiting with status 1.")
+        sys.exit(1)
+    else:
+        print("Result: PASS (the widget override was preserved). Exiting with status 0.")
+        sys.exit(0)
+
+except Exception as e:
+    print("An unexpected exception occurred:")
+    import traceback
+    traceback.print_exc()
+    print("Result: ERROR. Exiting with status 2.")
+    sys.exit(2)
