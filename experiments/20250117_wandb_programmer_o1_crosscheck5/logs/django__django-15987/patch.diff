diff --git a/django/core/management/commands/loaddata.py b/django/core/management/commands/loaddata.py
index ac97f13161..b7dd3dd238 100644
--- a/django/core/management/commands/loaddata.py
+++ b/django/core/management/commands/loaddata.py
@@ -355,25 +355,30 @@ class Command(BaseCommand):
     def fixture_dirs(self):
         """
         Return a list of fixture directories.
-
+    
         The list contains the 'fixtures' subdirectory of each installed
         application, if it exists, the directories in FIXTURE_DIRS, and the
         current directory.
         """
+        import os
+        from django.apps import apps
+        from django.core.exceptions import ImproperlyConfigured
+    
         dirs = []
-        fixture_dirs = settings.FIXTURE_DIRS
+        # Convert settings.FIXTURE_DIRS to realpath strings for duplicate detection.
+        fixture_dirs = [os.path.realpath(str(d)) for d in settings.FIXTURE_DIRS]
         if len(fixture_dirs) != len(set(fixture_dirs)):
             raise ImproperlyConfigured("settings.FIXTURE_DIRS contains duplicates.")
         for app_config in apps.get_app_configs():
             app_label = app_config.label
-            app_dir = os.path.join(app_config.path, "fixtures")
+            # Realpath the app fixture directory as well.
+            app_dir = os.path.realpath(os.path.join(app_config.path, "fixtures"))
             if app_dir in fixture_dirs:
                 raise ImproperlyConfigured(
                     "'%s' is a default fixture directory for the '%s' app "
                     "and cannot be listed in settings.FIXTURE_DIRS."
                     % (app_dir, app_label)
                 )
-
             if self.app_label and app_label != self.app_label:
                 continue
             if os.path.isdir(app_dir):
@@ -381,6 +386,7 @@ class Command(BaseCommand):
         dirs.extend(fixture_dirs)
         dirs.append("")
         return [os.path.realpath(d) for d in dirs]
+    
 
     def parse_name(self, fixture_name):
         """
diff --git a/test_fixture_duplicate_check.py b/test_fixture_duplicate_check.py
new file mode 100644
index 0000000000..4bba7fd5ff
--- /dev/null
+++ b/test_fixture_duplicate_check.py
@@ -0,0 +1,40 @@
+import sys
+import django
+from pathlib import Path
+from django.conf import settings, ImproperlyConfigured
+from django.core.management.commands.loaddata import Command
+
+def main():
+    if not settings.configured:
+        settings.configure(
+            DEBUG=True,
+            SECRET_KEY='test',
+            DATABASES={
+                'default': {
+                    'ENGINE': 'django.db.backends.sqlite3',
+                    'NAME': ':memory:',
+                },
+            },
+            INSTALLED_APPS=[],  # We'll keep this empty
+            FIXTURE_DIRS=[],
+        )
+    django.setup()
+
+    print("Test: Checking duplicate fixture dirs with a Path vs. string via fixture_dirs property.")
+    str_dir = "/tmp/my_fixtures"
+    path_dir = Path("/tmp/my_fixtures")
+    settings.FIXTURE_DIRS = [str_dir, path_dir]
+    print(f"Using fixture dirs: {settings.FIXTURE_DIRS!r}")
+    try:
+        c = Command()
+        # Accessing fixture_dirs calls the property and triggers the duplicates check
+        _ = c.fixture_dirs
+        # If we reach here, no exception => the bug is present
+        print("Bug present: duplicates were NOT detected.")
+        sys.exit(1)
+    except ImproperlyConfigured:
+        print("Success: duplicates were detected (fix is present).")
+        sys.exit(0)
+
+if __name__ == '__main__':
+    main()
