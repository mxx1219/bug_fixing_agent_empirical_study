diff --git a/django/forms/models.py b/django/forms/models.py
index 5edbbd376f..cc998e7be2 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -30,40 +30,86 @@ ALL_FIELDS = '__all__'
 
 def construct_instance(form, instance, fields=None, exclude=None):
     """
-    Construct and return a model instance from the bound ``form``'s
-    ``cleaned_data``, but do not save the returned instance to the database.
+    Construct and return a model instance from the bound form's cleaned_data,
+    but do not save it to the database.
+
+    Default Django logic:
+      - Skip uneditable fields or fields not in cleaned_data.
+      - Skip fields if they're not listed in `fields` (unless the developer
+        provided a non-empty override in cleaned_data for a field that doesn't
+        actually exist on the form).
+      - Skip fields if they're in the exclude list.
+      - Skip fields if the user truly omitted them from data and cleaned_data
+        for that field is empty/blank.
+
+    Otherwise, apply cleaned_data to the instance, preserving the possibility
+    for form.clean() to override a default even if the field wasn't exposed
+    as a form field at all.
     """
     from django.db import models
     opts = instance._meta
 
     cleaned_data = form.cleaned_data
     file_field_list = []
+
     for f in opts.fields:
-        if not f.editable or isinstance(f, models.AutoField) \
-                or f.name not in cleaned_data:
+        # 1) Skip if not editable, or if the field isn't in cleaned_data at all.
+        if not f.editable or isinstance(f, models.AutoField) or (f.name not in cleaned_data):
             continue
+
+        override_val = cleaned_data[f.name]
+
+        # 2) If fields is specified but doesn't include f.name, skip if the
+        #    form does actually have that field (user input scenario).
+        #    If there's no such field on the form, it might be a developer override.
         if fields is not None and f.name not in fields:
-            continue
+            if f.name in form.fields:
+                # The user provided data for a field not in fields => skip.
+                continue
+            else:
+                # No real form field => check if override is empty.
+                if override_val in (None, '', [], (), {}):
+                    continue
+
+        # 3) Skip if in exclude.
         if exclude and f.name in exclude:
             continue
-        # Leave defaults for fields that aren't in POST data, except for
-        # checkbox inputs because they don't appear in POST data if not checked.
-        if (f.has_default() and
-                form[f.name].field.widget.value_omitted_from_data(form.data, form.files, form.add_prefix(f.name))):
+
+        # 4) Check if the user truly omitted input for this field
+        #    and cleaned_data is empty => keep default.
+        formfield = form.fields.get(f.name)
+        if formfield is not None:
+            omitted = formfield.widget.value_omitted_from_data(
+                form.data, form.files, form.add_prefix(f.name)
+            )
+            empty_values = getattr(formfield, 'empty_values', [None, '', [], (), {}])
+        else:
+            omitted = (f.name not in form.data)
+            empty_values = [None, '', [], (), {}]
+
+        if omitted and override_val in empty_values:
             continue
-        # Defer saving file-type fields until after the other fields, so a
-        # callable upload_to can use the values from other fields.
+
+        # Defer file field updates until after other fields.
         if isinstance(f, models.FileField):
             file_field_list.append(f)
         else:
-            f.save_form_data(instance, cleaned_data[f.name])
+            f.save_form_data(instance, override_val)
 
+    # Now save file fields.
     for f in file_field_list:
         f.save_form_data(instance, cleaned_data[f.name])
 
     return instance
 
 
+
+
+
+
+
+
+
 # ModelForms #################################################################
 
 def model_to_dict(instance, fields=None, exclude=None):
diff --git a/test_allow_cleaned_data_overwrite.py b/test_allow_cleaned_data_overwrite.py
new file mode 100644
index 0000000000..cf1a655fb5
--- /dev/null
+++ b/test_allow_cleaned_data_overwrite.py
@@ -0,0 +1,87 @@
+import sys
+import os
+
+# Minimal Django setup to allow in-memory testing
+import django
+from django.conf import settings
+from django.db import models
+from django.forms import ModelForm
+
+# Configure settings for an in-memory test DB.
+# The app_label can be anything that's not used by the django/django suite.
+# Also ensure INSTALLED_APPS includes this "testapp" so the model is recognized.
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test_key',
+        INSTALLED_APPS=['testapp'],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        MIDDLEWARE=[],
+        TEMPLATES=[],
+    )
+
+django.setup()
+
+# Define a testapp models module on the fly to hold our test model
+class MyModel(models.Model):
+    name = models.CharField(max_length=100, default='default_name')
+
+    class Meta:
+        app_label = 'testapp'
+
+# Create or mutate a migrations module in memory if needed
+# We'll create the table manually
+from django.core.management import call_command
+try:
+    call_command('makemigrations', 'testapp', interactive=False, verbosity=0)
+    call_command('migrate', interactive=False, verbosity=0)
+except Exception as e:
+    print("Error creating in-memory DB schema:", e)
+    sys.exit(2)
+
+# Now define a ModelForm that omits "name" from the data payload,
+# but tries to set it in cleaned_data.
+class MyModelForm(ModelForm):
+    class Meta:
+        model = MyModel
+        fields = []  # intentionally empty
+
+    def clean(self):
+        cd = super().clean()
+        # The user wants to override "name" even though it isn't in posted data:
+        cd["name"] = "overridden_in_cleaned_data"
+        return cd
+
+def main():
+    try:
+        # Simulate a post with no data for "name".
+        data = {}
+        form = MyModelForm(data=data)
+        if not form.is_valid():
+            # If the form is invalid for some reason, the issue is overshadowed
+            print("FAIL: The form is unexpectedly invalid:", form.errors)
+            sys.exit(1)
+
+        # Save the instance
+        instance = form.save(commit=True)
+
+        # We EXPECT instance.name == "overridden_in_cleaned_data" if the bug is fixed.
+        # On HEAD (unpatched), instance.name will remain "default_name" due to the skip logic.
+        if instance.name == "overridden_in_cleaned_data":
+            print("PASS: The form's cleaned_data successfully overwrote the default value.")
+            sys.exit(0)
+        else:
+            print("FAIL: instance.name =", instance.name, "did not overwrite the default.")
+            sys.exit(1)
+
+    except Exception as e:
+        print("FAIL: Exception occurred while testing:", e)
+        sys.exit(1)
+
+if __name__ == "__main__":
+    main()
diff --git a/testapp/__init__.py b/testapp/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testapp/migrations/0001_initial.py b/testapp/migrations/0001_initial.py
new file mode 100644
index 0000000000..40e76a2cd2
--- /dev/null
+++ b/testapp/migrations/0001_initial.py
@@ -0,0 +1,21 @@
+# Generated by Django 3.0.dev20190603194455 on 2025-01-13 10:15
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='MyModel',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(default='default_name', max_length=100)),
+            ],
+        ),
+    ]
diff --git a/testapp/migrations/__init__.py b/testapp/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
