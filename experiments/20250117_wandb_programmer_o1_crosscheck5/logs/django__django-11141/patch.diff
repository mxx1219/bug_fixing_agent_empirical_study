diff --git a/django/db/migrations/loader.py b/django/db/migrations/loader.py
index 8c308621d2..e9d1dd7d5d 100644
--- a/django/db/migrations/loader.py
+++ b/django/db/migrations/loader.py
@@ -1,5 +1,6 @@
 import pkgutil
 import sys
+import os
 from importlib import import_module, reload
 
 from django.apps import apps
@@ -78,17 +79,14 @@ class MigrationLoader:
             except ImportError as e:
                 # I hate doing this, but I don't want to squash other import errors.
                 # Might be better to try a directory check directly.
-                if ((explicit and self.ignore_no_migrations) or (
-                        not explicit and "No module named" in str(e) and MIGRATIONS_MODULE_NAME in str(e))):
+                if (
+                    (explicit and self.ignore_no_migrations) or
+                    (not explicit and "No module named" in str(e) and MIGRATIONS_MODULE_NAME in str(e))
+                ):
                     self.unmigrated_apps.add(app_config.label)
                     continue
                 raise
             else:
-                # Empty directories are namespaces.
-                # getattr() needed on PY36 and older (replace w/attribute access).
-                if getattr(module, '__file__', None) is None:
-                    self.unmigrated_apps.add(app_config.label)
-                    continue
                 # Module is not a package (e.g. migrations.py).
                 if not hasattr(module, '__path__'):
                     self.unmigrated_apps.add(app_config.label)
@@ -96,12 +94,38 @@ class MigrationLoader:
                 # Force a reload if it's already loaded (tests need this)
                 if was_loaded:
                     reload(module)
-            self.migrated_apps.add(app_config.label)
+
+            # Gather .py files in the migrations directory
             migration_names = {
                 name for _, name, is_pkg in pkgutil.iter_modules(module.__path__)
                 if not is_pkg and name[0] not in '_~'
             }
-            # Load migrations
+
+            if not migration_names:
+                # Distinguish an empty directory with no __init__.py from
+                # a real package that just has no migration files.
+                dir_paths = list(module.__path__)
+                # If there's more than one path, we can't reliably do a single check,
+                # but typically there's only one path in both normal & namespace pkgs.
+                # We'll just check each path for an __init__.py.
+                has_init = False
+                for p in dir_paths:
+                    init_py = os.path.join(p, '__init__.py')
+                    if os.path.isfile(init_py):
+                        has_init = True
+                        break
+                if has_init:
+                    # It's a real package but just no actual migration files => show “(no migrations)”
+                    self.migrated_apps.add(app_config.label)
+                else:
+                    # It's an empty or namespace directory with no .py => “unmigrated”
+                    self.unmigrated_apps.add(app_config.label)
+                continue
+
+            # We do have .py files => treat it as migrated
+            self.migrated_apps.add(app_config.label)
+
+            # Load each actual migration
             for migration_name in migration_names:
                 migration_path = '%s.%s' % (module_name, migration_name)
                 try:
@@ -131,7 +155,6 @@ class MigrationLoader:
         """
         Return the migration(s) which match the given app label and name_prefix.
         """
-        # Do the search
         results = []
         for migration_app_label, migration_name in self.disk_migrations:
             if migration_app_label == app_label and migration_name.startswith(name_prefix):
@@ -253,9 +276,9 @@ class MigrationLoader:
             # (#23556).
             # Get reverse replacements.
             reverse_replacements = {}
-            for key, migration in self.replacements.items():
-                for replaced in migration.replaces:
-                    reverse_replacements.setdefault(replaced, set()).add(key)
+            for r_key, r_migration in self.replacements.items():
+                for replaced in r_migration.replaces:
+                    reverse_replacements.setdefault(replaced, set()).add(r_key)
             # Try to reraise exception with more detail.
             if exc.node in reverse_replacements:
                 candidates = reverse_replacements.get(exc.node, set())
diff --git a/test_namespace_app/apps.py b/test_namespace_app/apps.py
new file mode 100644
index 0000000000..371e081ffa
--- /dev/null
+++ b/test_namespace_app/apps.py
@@ -0,0 +1,4 @@
+from django.apps import AppConfig
+
+class TestNamespaceAppConfig(AppConfig):
+    name = 'test_namespace_app'
diff --git a/test_namespace_app/migrations/0001_initial.py b/test_namespace_app/migrations/0001_initial.py
new file mode 100644
index 0000000000..bae176e346
--- /dev/null
+++ b/test_namespace_app/migrations/0001_initial.py
@@ -0,0 +1,13 @@
+from django.db import migrations, models
+
+class Migration(migrations.Migration):
+    initial = True
+    dependencies = []
+    operations = [
+        migrations.CreateModel(
+            name='Example',
+            fields=[
+                ('id', models.AutoField(primary_key=True)),
+            ],
+        ),
+    ]
diff --git a/test_namespace_migrations_bug.py b/test_namespace_migrations_bug.py
new file mode 100644
index 0000000000..c03556dd51
--- /dev/null
+++ b/test_namespace_migrations_bug.py
@@ -0,0 +1,45 @@
+import sys
+import os
+import django
+from django.conf import settings
+from django.db import connections
+from django.db.migrations.loader import MigrationLoader
+
+def main():
+    print('STEP: Configuring minimal Django settings...')
+    BASE_DIR = os.path.dirname(os.path.abspath(__file__))
+
+    settings.configure(
+        INSTALLED_APPS=[
+            'test_namespace_app.apps.TestNamespaceAppConfig',
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        MIDDLEWARE=[],
+        SECRET_KEY='test',
+        DEBUG=True,
+    )
+
+    print('STEP: Initializing Django...')
+    django.setup()
+
+    print('STEP: Building migrations graph...')
+    connection = connections['default']
+    loader = MigrationLoader(connection, ignore_no_migrations=False)
+
+    print('STEP: Checking if "test_namespace_app" is recognized as migrated...')
+    if 'test_namespace_app' in loader.migrated_apps:
+        print('PASS: test_namespace_app is recognized as migrated.')
+        sys.exit(0)
+    else:
+        print('FAIL: test_namespace_app is NOT recognized as migrated. Possibly blocked by the __file__ check.')
+        sys.exit(1)
+
+if __name__ == '__main__':
+    main()
