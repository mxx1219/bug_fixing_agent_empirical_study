diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 33cc636b22..5036335bec 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -748,7 +748,7 @@ class Query(BaseExpression):
                     cur_model = source.related_model
                 else:
                     cur_model = source.remote_field.model
-                opts = cur_model._meta
+                opts = cur_model._meta.concrete_model._meta
                 # Even if we're "just passing through" this model, we must add
                 # both the current model's pk and the related reference field
                 # (if it's not a reverse relation) to the things we select.
diff --git a/test_bug_app/__init__.py b/test_bug_app/__init__.py
new file mode 100644
index 0000000000..695ed15fe5
--- /dev/null
+++ b/test_bug_app/__init__.py
@@ -0,0 +1 @@
+# Empty __init__.py so that "test_bug_app" is a valid package
diff --git a/test_bug_app/migrations/0001_initial.py b/test_bug_app/migrations/0001_initial.py
new file mode 100644
index 0000000000..08e3bc3719
--- /dev/null
+++ b/test_bug_app/migrations/0001_initial.py
@@ -0,0 +1,62 @@
+# Generated by Django 4.2.dev20220702144524 on 2025-01-13 02:16
+
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = []
+
+    operations = [
+        migrations.CreateModel(
+            name="CustomModel",
+            fields=[
+                (
+                    "id",
+                    models.AutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                ("name", models.CharField(max_length=16)),
+            ],
+        ),
+        migrations.CreateModel(
+            name="ProxyCustomModel",
+            fields=[],
+            options={
+                "proxy": True,
+                "indexes": [],
+                "constraints": [],
+            },
+            bases=("test_bug_app.custommodel",),
+        ),
+        migrations.CreateModel(
+            name="AnotherModel",
+            fields=[
+                (
+                    "id",
+                    models.AutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                (
+                    "custom",
+                    models.ForeignKey(
+                        blank=True,
+                        null=True,
+                        on_delete=django.db.models.deletion.SET_NULL,
+                        to="test_bug_app.proxycustommodel",
+                    ),
+                ),
+            ],
+        ),
+    ]
diff --git a/test_bug_app/migrations/__init__.py b/test_bug_app/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_bug_app/models.py b/test_bug_app/models.py
new file mode 100644
index 0000000000..064c5be6b1
--- /dev/null
+++ b/test_bug_app/models.py
@@ -0,0 +1,21 @@
+from django.db import models
+
+class CustomModel(models.Model):
+    name = models.CharField(max_length=16)
+    class Meta:
+        app_label = "test_bug_app"
+
+class ProxyCustomModel(CustomModel):
+    class Meta:
+        proxy = True
+        app_label = "test_bug_app"
+
+class AnotherModel(models.Model):
+    custom = models.ForeignKey(
+        ProxyCustomModel,
+        on_delete=models.SET_NULL,
+        null=True,
+        blank=True,
+    )
+    class Meta:
+        app_label = "test_bug_app"
diff --git a/test_bug_proxy_model_selectrelated_only.py b/test_bug_proxy_model_selectrelated_only.py
new file mode 100644
index 0000000000..11703edea4
--- /dev/null
+++ b/test_bug_proxy_model_selectrelated_only.py
@@ -0,0 +1,56 @@
+import sys
+import os
+import django
+
+print("Running test_bug_proxy_model_selectrelated_only.py...")
+
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            "django.contrib.contenttypes",
+            "django.contrib.auth",
+            "test_bug_app",  # Our new test app
+        ],
+        DATABASES={
+            "default": {
+                "ENGINE": "django.db.backends.sqlite3",
+                "NAME": ":memory:",
+            }
+        },
+        MIDDLEWARE_CLASSES=[],
+        SECRET_KEY="xyz",
+    )
+
+django.setup()
+
+from django.core.management import call_command
+from test_bug_app.models import CustomModel, ProxyCustomModel, AnotherModel
+
+def main():
+    print("Running makemigrations for test_bug_app...")
+    call_command("makemigrations", "test_bug_app", verbosity=1)
+    
+    print("Running migrate...")
+    call_command("migrate", verbosity=1)
+    print("Database set up.")
+
+    # Insert an object to ensure the SELECT code path is triggered.
+    c = CustomModel.objects.create(name="Alice")
+    pm = ProxyCustomModel.objects.get(pk=c.pk)
+    AnotherModel.objects.create(custom=pm)
+
+    print("Attempting: AnotherModel.objects.select_related('custom').only('custom__name').all()")
+    try:
+        results = list(AnotherModel.objects.select_related("custom").only("custom__name"))
+        print("Got results:", results)
+        print("Expected behavior: No crash.")
+        print("Test PASSED. Exiting with code 0.")
+        sys.exit(0)
+    except Exception as exc:
+        print("Caught Exception:", exc)
+        print("This indicates the bug still exists. Exiting with code 1.")
+        sys.exit(1)
+
+if __name__ == "__main__":
+    main()
diff --git a/tests/__init__.py b/tests/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
