diff --git a/django/utils/timesince.py b/django/utils/timesince.py
index 701c49bab9..5f6acb88b0 100644
--- a/django/utils/timesince.py
+++ b/django/utils/timesince.py
@@ -39,7 +39,7 @@ def timesince(d, now=None, reversed=False, time_strings=None, depth=2):
     but also between 2007/08/10 and 2008/09/10 despite the delta being 393 days
     in the former case and 397 in the latter.
 
-    Up to `depth` adjacent units will be displayed.  For example,
+    Up to `depth` adjacent units will be displayed. For example,
     "2 weeks, 3 days" and "1 year, 3 months" are possible outputs, but
     "2 weeks, 3 hours" and "1 year, 5 days" are not.
 
@@ -53,6 +53,28 @@ def timesince(d, now=None, reversed=False, time_strings=None, depth=2):
     https://web.archive.org/web/20060617175230/http://blog.natbat.co.uk/archive/2003/Jun/14/time_since
     Modified to improve results for years and months.
     """
+    import datetime
+    from django.utils.html import avoid_wrapping
+    from django.utils.timezone import is_aware
+    from django.utils.translation import gettext, ngettext_lazy
+
+    TIME_STRINGS = {
+        "year": ngettext_lazy("%(num)d year", "%(num)d years", "num"),
+        "month": ngettext_lazy("%(num)d month", "%(num)d months", "num"),
+        "week": ngettext_lazy("%(num)d week", "%(num)d weeks", "num"),
+        "day": ngettext_lazy("%(num)d day", "%(num)d days", "num"),
+        "hour": ngettext_lazy("%(num)d hour", "%(num)d hours", "num"),
+        "minute": ngettext_lazy("%(num)d minute", "%(num)d minutes", "num"),
+    }
+    TIME_STRINGS_KEYS = list(TIME_STRINGS.keys())
+    TIME_CHUNKS = [
+        60 * 60 * 24 * 7,  # week
+        60 * 60 * 24,      # day
+        60 * 60,           # hour
+        60,                # minute
+    ]
+    MONTHS_DAYS = (31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)
+
     if time_strings is None:
         time_strings = TIME_STRINGS
     if depth <= 0:
@@ -97,6 +119,8 @@ def timesince(d, now=None, reversed=False, time_strings=None, depth=2):
             d.hour,
             d.minute,
             d.second,
+            0,
+            d.tzinfo
         )
     else:
         pivot = d
@@ -107,8 +131,7 @@ def timesince(d, now=None, reversed=False, time_strings=None, depth=2):
         partials.append(count)
         remaining_time -= chunk * count
 
-    # Find the first non-zero part (if any) and then build the result, until
-    # depth.
+    # Find the first non-zero part (if any) and then build the result, until depth.
     i = 0
     for i, value in enumerate(partials):
         if value != 0:
@@ -130,6 +153,7 @@ def timesince(d, now=None, reversed=False, time_strings=None, depth=2):
     return gettext(", ").join(result)
 
 
+
 def timeuntil(d, now=None, time_strings=None, depth=2):
     """
     Like timesince, but return a string measuring the time until the given time.
diff --git a/test_timesince_tz.py b/test_timesince_tz.py
new file mode 100644
index 0000000000..004014aa8f
--- /dev/null
+++ b/test_timesince_tz.py
@@ -0,0 +1,36 @@
+import sys
+import datetime
+import django
+from django.conf import settings
+from django.utils import timezone
+from django.utils.timesince import timesince
+
+def main():
+    print("Configuring Django settings...")
+    settings.configure(USE_TZ=True, TIME_ZONE='UTC')
+    django.setup()
+
+    now = timezone.now()
+    print("Current time is:", now)
+    d = now - datetime.timedelta(days=31)
+    print("Test datetime is:", d)
+
+    try:
+        result = timesince(d)
+        print("timesince(d) returned:", result)
+        # We expect "1 month" in the result, so let's do a simple check:
+        if "month" in result and result.startswith("1"):
+            # If we get a successful "1 month" result, consider it "some version of success."
+            print("Check: '1 month' found in timesince output => Potentially correct, finalize whether to pass/fail.")
+            # We'll pass if no exception occurred AND we see '1 month' at the start.
+            sys.exit(0)
+        else:
+            # If no exception but the result is not '1 month', we fail
+            print("FAIL: timesince output doesn't match expected '1 month' text.")
+            sys.exit(1)
+    except Exception as e:
+        print("FAIL: timesince raised an exception =>", e)
+        sys.exit(2)
+
+if __name__ == '__main__':
+    main()
