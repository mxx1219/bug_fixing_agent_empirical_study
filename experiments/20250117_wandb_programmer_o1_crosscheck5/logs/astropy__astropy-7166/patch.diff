diff --git a/astropy/utils/misc.py b/astropy/utils/misc.py
index de3fb01d18..4b125eb829 100644
--- a/astropy/utils/misc.py
+++ b/astropy/utils/misc.py
@@ -523,21 +523,29 @@ class InheritDocstrings(type):
     def __init__(cls, name, bases, dct):
         def is_public_member(key):
             return (
-                (key.startswith('__') and key.endswith('__')
-                 and len(key) > 4) or
-                not key.startswith('_'))
-
+                (key.startswith('__') and key.endswith('__') and len(key) > 4)
+                or not key.startswith('_')
+            )
+    
         for key, val in dct.items():
-            if (inspect.isfunction(val) and
-                is_public_member(key) and
-                val.__doc__ is None):
-                for base in cls.__mro__[1:]:
-                    super_method = getattr(base, key, None)
-                    if super_method is not None:
-                        val.__doc__ = super_method.__doc__
-                        break
-
+            if is_public_member(key) and val.__doc__ is None:
+                # If it's a function
+                if inspect.isfunction(val):
+                    for base in cls.__mro__[1:]:
+                        super_method = getattr(base, key, None)
+                        if super_method is not None and inspect.isfunction(super_method):
+                            val.__doc__ = super_method.__doc__
+                            break
+                # If it's a property
+                elif isinstance(val, property):
+                    for base in cls.__mro__[1:]:
+                        super_prop = getattr(base, key, None)
+                        if isinstance(super_prop, property):
+                            val.__doc__ = super_prop.__doc__
+                            break
+    
         super().__init__(name, bases, dct)
+    
 
 
 class OrderedDescriptor(metaclass=abc.ABCMeta):
diff --git a/test_inherit_property_docstring.py b/test_inherit_property_docstring.py
new file mode 100644
index 0000000000..878f30ed77
--- /dev/null
+++ b/test_inherit_property_docstring.py
@@ -0,0 +1,31 @@
+import sys
+
+print("STEP: Define classes for reproduction of property docstring inheritance issue.")
+
+from astropy.utils.misc import InheritDocstrings
+
+class BaseWithProperty:
+    @property
+    def my_prop(self):
+        "DOCSTRING_IN_BASE"
+        return 42
+
+class DerivedWithProperty(BaseWithProperty, metaclass=InheritDocstrings):
+    @property
+    def my_prop(self):
+        # Intentional absence of docstring
+        return super().my_prop
+
+def main():
+    print("STEP: Checking docstring on DerivedWithProperty.my_prop...")
+    docstring = DerivedWithProperty.my_prop.__doc__
+    print("Observed docstring:", docstring)
+    if docstring is None:
+        print("FAIL: DerivedWithProperty.my_prop docstring was not inherited.")
+        sys.exit(1)
+    else:
+        print("PASS: DerivedWithProperty.my_prop docstring was inherited:", docstring)
+        sys.exit(0)
+
+if __name__ == "__main__":
+    main()
