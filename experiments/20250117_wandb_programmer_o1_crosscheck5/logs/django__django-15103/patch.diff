diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index 5ccef38048..6288cc6ca3 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -83,14 +83,15 @@ def escapejs_filter(value):
 
 
 @register.filter(is_safe=True)
-def json_script(value, element_id):
+def json_script(value, element_id=None):
     """
-    Output value JSON-encoded, wrapped in a <script type="application/json">
-    tag.
+    Output value JSON-encoded, wrapped in a <script type="application/json"> tag.
+    If no element_id is provided, the script will have no id attribute.
     """
     return _json_script(value, element_id)
 
 
+
 @register.filter(is_safe=True)
 def floatformat(text, arg=-1):
     """
diff --git a/django/utils/html.py b/django/utils/html.py
index da1b5675ec..9f773e2e58 100644
--- a/django/utils/html.py
+++ b/django/utils/html.py
@@ -61,7 +61,7 @@ _json_script_escapes = {
 }
 
 
-def json_script(value, element_id):
+def json_script(value, element_id=None):
     """
     Escape all the HTML/XML special characters with their unicode escapes, so
     value is safe to be output anywhere except for inside a tag attribute. Wrap
@@ -69,10 +69,18 @@ def json_script(value, element_id):
     """
     from django.core.serializers.json import DjangoJSONEncoder
     json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)
-    return format_html(
-        '<script id="{}" type="application/json">{}</script>',
-        element_id, mark_safe(json_str)
-    )
+    if element_id is not None:
+        return format_html(
+            '<script id="{}" type="application/json">{}</script>',
+            element_id,
+            mark_safe(json_str)
+        )
+    else:
+        return format_html(
+            '<script type="application/json">{}</script>',
+            mark_safe(json_str)
+        )
+
 
 
 def conditional_escape(text):
diff --git a/test_json_script_optional_id.py b/test_json_script_optional_id.py
new file mode 100644
index 0000000000..9281ac6d14
--- /dev/null
+++ b/test_json_script_optional_id.py
@@ -0,0 +1,50 @@
+import sys
+
+def main():
+    print("Starting test for optional element_id in json_script()...")
+    import django.utils.html as html_utils
+
+    succeeded = True
+
+    # Test calling json_script with only one argument
+    print("Test 1: Calling json_script({'foo': 'bar'}) without element_id...")
+    try:
+        output_no_id = html_utils.json_script({'foo': 'bar'})
+        print("Got output:", output_no_id)
+        # If the fix is present, we should have a <script> tag without id=
+        if "id=" in output_no_id:
+            print("FAIL: Output includes an id= even though we didn't pass one.")
+            succeeded = False
+        else:
+            print("PASS: No id= found in script tag when not specified.")
+    except TypeError as e:
+        print("FAIL: TypeError encountered (missing argument), so the code is NOT fixed.")
+        print(str(e))
+        succeeded = False
+    except Exception as e:
+        print("FAIL: Unexpected exception:", e)
+        succeeded = False
+
+    # Test calling json_script with element_id
+    print("\nTest 2: Calling json_script({'foo': 'bar'}, 'myid') with element_id='myid'...")
+    try:
+        output_with_id = html_utils.json_script({'foo': 'bar'}, 'myid')
+        print("Got output:", output_with_id)
+        if 'id="myid"' in output_with_id:
+            print("PASS: When element_id is given, it appears in output.")
+        else:
+            print("FAIL: No id=\"myid\" found in script tag despite specifying it.")
+            succeeded = False
+    except Exception as e:
+        print("FAIL: Unexpected exception when calling with element_id:", e)
+        succeeded = False
+
+    if succeeded:
+        print("\nAll checks in test_json_script_optional_id passed.")
+        sys.exit(0)
+    else:
+        print("\nSome checks in test_json_script_optional_id failed.")
+        sys.exit(1)
+
+if __name__ == "__main__":
+    main()
