diff --git a/django/db/models/base.py b/django/db/models/base.py
index 2428218696..4050791d37 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -933,14 +933,15 @@ class Model(metaclass=ModelBase):
                         "%s() prohibited to prevent data loss due to unsaved "
                         "related object '%s'." % (operation_name, field.name)
                     )
-                elif getattr(self, field.attname) is None:
+                elif getattr(self, field.attname) in (None, ''):
                     # Use pk from related object if it has been saved after
-                    # an assignment.
+                    # an assignment and the parent's FK is still uninitialized.
                     setattr(self, field.attname, obj.pk)
                 # If the relationship's pk/to_field was changed, clear the
                 # cached relationship.
                 if getattr(obj, field.target_field.attname) != getattr(self, field.attname):
                     field.delete_cached_value(self)
+    
 
     def delete(self, using=None, keep_parents=False):
         using = using or router.db_for_write(self.__class__, instance=self)
diff --git a/test_nonauto_fk.py b/test_nonauto_fk.py
new file mode 100644
index 0000000000..ecdaa4849f
--- /dev/null
+++ b/test_nonauto_fk.py
@@ -0,0 +1,58 @@
+import sys
+import django
+from django.conf import settings
+from django.db import connection, transaction, models
+
+def main():
+    # Configure settings if not already.
+    if not settings.configured:
+        settings.configure(
+            SECRET_KEY='abc123',
+            INSTALLED_APPS=['django.contrib.contenttypes'],
+            DATABASES={
+                'default': {
+                    'ENGINE': 'django.db.backends.sqlite3',
+                    'NAME': ':memory:',
+                },
+            },
+        )
+    django.setup()
+
+    class Product(models.Model):
+        sku = models.CharField(primary_key=True, max_length=50)
+        class Meta:
+            app_label = '__test__'
+
+    class Order(models.Model):
+        product = models.ForeignKey(Product, on_delete=models.CASCADE)
+        class Meta:
+            app_label = '__test__'
+
+    # Create database tables in memory.
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(Product)
+        schema_editor.create_model(Order)
+
+    # Replicate the problematic scenario in a transaction.
+    try:
+        with transaction.atomic():
+            order = Order()
+            order.product = Product()
+            order.product.sku = 'foo'
+            order.product.save()
+            order.save()
+            # Check if the parent's FK is "foo".
+            actual_product_id = order.product_id
+            if actual_product_id == 'foo':
+                print('PASS: Foreign key updated. product_id is "foo".')
+                sys.exit(0)
+            else:
+                print(f'FAIL: product_id is "{actual_product_id}", expected "foo".')
+                sys.exit(1)
+
+    except Exception as e:
+        print('FAIL: Exception occurred (possibly a constraint violation).', e)
+        sys.exit(1)
+
+if __name__ == '__main__':
+    main()
