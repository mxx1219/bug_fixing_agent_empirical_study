diff --git a/ccalias_testproj/manage.py b/ccalias_testproj/manage.py
new file mode 100755
index 0000000000..87ab2e2dbb
--- /dev/null
+++ b/ccalias_testproj/manage.py
@@ -0,0 +1,8 @@
+#!/usr/bin/env python
+import os
+import sys
+
+if __name__ == "__main__":
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "settings")
+    from django.core.management import execute_from_command_line
+    execute_from_command_line(sys.argv)
diff --git a/ccalias_testproj/settings.py b/ccalias_testproj/settings.py
new file mode 100644
index 0000000000..d493637d1d
--- /dev/null
+++ b/ccalias_testproj/settings.py
@@ -0,0 +1,13 @@
+SECRET_KEY = 'test'
+INSTALLED_APPS = [
+    'tcapp',
+]
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': 'test_alias_db.sqlite3',
+    }
+}
+MIGRATION_MODULES = {
+   'tcapp': 'tcapp.migrations'
+}
diff --git a/ccalias_testproj/tcapp/__init__.py b/ccalias_testproj/tcapp/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/ccalias_testproj/tcapp/migrations/0001_initial.py b/ccalias_testproj/tcapp/migrations/0001_initial.py
new file mode 100644
index 0000000000..437b9e0b8f
--- /dev/null
+++ b/ccalias_testproj/tcapp/migrations/0001_initial.py
@@ -0,0 +1,22 @@
+# Generated by Django 3.0.dev20190430084830 on 2025-01-14 20:37
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='TestConstraint',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('field_1', models.IntegerField(blank=True, null=True)),
+                ('flag', models.BooleanField()),
+            ],
+        ),
+    ]
diff --git a/ccalias_testproj/tcapp/migrations/0002_auto_20250114_2037.py b/ccalias_testproj/tcapp/migrations/0002_auto_20250114_2037.py
new file mode 100644
index 0000000000..5731e6dfd4
--- /dev/null
+++ b/ccalias_testproj/tcapp/migrations/0002_auto_20250114_2037.py
@@ -0,0 +1,17 @@
+# Generated by Django 3.0.dev20190430084830 on 2025-01-14 20:37
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('tcapp', '0001_initial'),
+    ]
+
+    operations = [
+        migrations.AddConstraint(
+            model_name='testconstraint',
+            constraint=models.CheckConstraint(check=models.Q(models.Q(('field_1__isnull', False), ('flag__exact', True)), ('flag__exact', False), _connector='OR'), name='field_1_has_value_if_flag_set'),
+        ),
+    ]
diff --git a/ccalias_testproj/tcapp/migrations/__init__.py b/ccalias_testproj/tcapp/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/ccalias_testproj/tcapp/models.py b/ccalias_testproj/tcapp/models.py
new file mode 100644
index 0000000000..cdbe3e5074
--- /dev/null
+++ b/ccalias_testproj/tcapp/models.py
@@ -0,0 +1,15 @@
+
+from django.db import models
+from django.db.models import Q, CheckConstraint
+
+class TestConstraint(models.Model):
+    field_1 = models.IntegerField(blank=True, null=True)
+    flag = models.BooleanField(blank=False, null=False)
+
+    class Meta:
+        constraints = [
+            CheckConstraint(
+                check=Q(flag__exact=True, field_1__isnull=False) | Q(flag__exact=False),
+                name="field_1_has_value_if_flag_set",
+            ),
+        ]
diff --git a/ccalias_testproj/test_alias_db.sqlite3 b/ccalias_testproj/test_alias_db.sqlite3
new file mode 100644
index 0000000000..32f2806c98
Binary files /dev/null and b/ccalias_testproj/test_alias_db.sqlite3 differ
diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py
index e7f81d3ee9..b66359d291 100644
--- a/django/db/models/constraints.py
+++ b/django/db/models/constraints.py
@@ -33,11 +33,20 @@ class CheckConstraint(BaseConstraint):
         super().__init__(name)
 
     def _get_check_sql(self, model, schema_editor):
+        from django.db.models.sql.query import Query
         query = Query(model=model)
         where = query.build_where(self.check)
         compiler = query.get_compiler(connection=schema_editor.connection)
         sql, params = where.as_sql(compiler, schema_editor.connection)
+        # If there's exactly one alias in the query, remove it from the SQL to avoid
+        # referencing "new__mytable" in the final constraint.
+        if len(query.alias_map) == 1:
+            alias = next(iter(query.alias_map))
+            quoted_alias = schema_editor.quote_name(alias)
+            # Remove occurrences of "alias." from the final SQL
+            sql = sql.replace(f'{quoted_alias}.', '')
         return sql % tuple(schema_editor.quote_value(p) for p in params)
+    
 
     def constraint_sql(self, model, schema_editor):
         check = self._get_check_sql(model, schema_editor)
diff --git a/scripts/test_checkconstraint_alias.py b/scripts/test_checkconstraint_alias.py
new file mode 100644
index 0000000000..36961bdf98
--- /dev/null
+++ b/scripts/test_checkconstraint_alias.py
@@ -0,0 +1,121 @@
+#!/usr/bin/env python3
+import os
+import sys
+import subprocess
+import shutil
+
+def main():
+    print("== Test script for CheckConstraint alias issue with OR clauses (two-migration scenario) ==")
+    test_dir = "ccalias_testproj"
+    if os.path.exists(test_dir):
+        shutil.rmtree(test_dir)
+
+    os.mkdir(test_dir)
+    os.mkdir(os.path.join(test_dir, "tcapp"))
+
+    # Minimal settings.py
+    settings_py = """SECRET_KEY = 'test'
+INSTALLED_APPS = [
+    'tcapp',
+]
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': 'test_alias_db.sqlite3',
+    }
+}
+MIGRATION_MODULES = {
+   'tcapp': 'tcapp.migrations'
+}
+"""
+    with open(os.path.join(test_dir, "settings.py"), "w", encoding="utf-8") as f:
+        f.write(settings_py)
+
+    open(os.path.join(test_dir, "tcapp", "__init__.py"), "w").close()
+
+    # Step 0: First, create a models.py with no constraints
+    # so the first migration won't rename tables later.
+    models_py_no_constraint = r'''
+from django.db import models
+
+class TestConstraint(models.Model):
+    field_1 = models.IntegerField(blank=True, null=True)
+    flag = models.BooleanField(blank=False, null=False)
+
+    class Meta:
+        # no constraints
+        pass
+'''
+    with open(os.path.join(test_dir, "tcapp", "models.py"), "w", encoding="utf-8") as f:
+        f.write(models_py_no_constraint)
+
+    manage_py = r'''#!/usr/bin/env python
+import os
+import sys
+
+if __name__ == "__main__":
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "settings")
+    from django.core.management import execute_from_command_line
+    execute_from_command_line(sys.argv)
+'''
+    with open(os.path.join(test_dir, "manage.py"), "w", encoding="utf-8") as f:
+        f.write(manage_py)
+    os.chmod(os.path.join(test_dir, "manage.py"), 0o755)
+
+    old_cwd = os.getcwd()
+    os.chdir(test_dir)
+    try:
+        print("== First phase: create table with no constraints ==")
+        r1 = subprocess.run(
+            [sys.executable, "manage.py", "makemigrations", "tcapp"],
+            check=True
+        )
+        r2 = subprocess.run(
+            [sys.executable, "manage.py", "migrate"],
+            check=True
+        )
+
+        # Step 1: Now we add the CheckConstraint to the code (second migration).
+        models_py_with_constraint = r'''
+from django.db import models
+from django.db.models import Q, CheckConstraint
+
+class TestConstraint(models.Model):
+    field_1 = models.IntegerField(blank=True, null=True)
+    flag = models.BooleanField(blank=False, null=False)
+
+    class Meta:
+        constraints = [
+            CheckConstraint(
+                check=Q(flag__exact=True, field_1__isnull=False) | Q(flag__exact=False),
+                name="field_1_has_value_if_flag_set",
+            ),
+        ]
+'''
+        with open(os.path.join("tcapp", "models.py"), "w", encoding="utf-8") as f:
+            f.write(models_py_with_constraint)
+
+        print("== Second phase: add constraint, see if rename fails on HEAD ==")
+        r3 = subprocess.run(
+            [sys.executable, "manage.py", "makemigrations", "tcapp"],
+            check=True
+        )
+        # The next migrate should attempt the table rename + constraint creation
+        r4 = subprocess.run(
+            [sys.executable, "manage.py", "migrate"],
+            check=True
+        )
+
+        print("No error encountered => the bug is presumably fixed.")
+        print("Exiting with code 0.")
+        sys.exit(0)
+
+    except subprocess.CalledProcessError:
+        print("Encountered CalledProcessError => this indicates the rename step failed => bug present.")
+        print("Exiting with code 1.")
+        sys.exit(1)
+    finally:
+        os.chdir(old_cwd)
+
+if __name__ == "__main__":
+    main()
