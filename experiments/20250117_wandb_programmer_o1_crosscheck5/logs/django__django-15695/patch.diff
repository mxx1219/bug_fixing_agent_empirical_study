diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index d17232e4ec..a39c601f3e 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -967,22 +967,36 @@ class RenameIndex(IndexOperation):
 
     def database_backwards(self, app_label, schema_editor, from_state, to_state):
         if self.old_fields:
-            # Backward operation with unnamed index is a no-op.
+            # Instead of a no-op, rename the index from new_name back to an auto-generated name.
+            from_model = from_state.apps.get_model(app_label, self.model_name)
+            columns = [from_model._meta.get_field(f).column for f in self.old_fields]
+            matching_index_names = schema_editor._constraint_names(
+                from_model, column_names=columns, index=True
+            )
+            if len(matching_index_names) != 1:
+                raise ValueError(
+                    "Found wrong number (%s) of indexes for %s(%s)."
+                    % (len(matching_index_names), from_model._meta.db_table, ", ".join(columns))
+                )
+            old_index = models.Index(fields=self.old_fields, name=matching_index_names[0])
+            new_index = models.Index(fields=self.old_fields)
+            new_index.set_name_with_model(from_model)
+            schema_editor.rename_index(from_model, old_index, new_index)
             return
-
+    
+        # The existing old_name-based logic remains for named indexes.
         self.new_name_lower, self.old_name_lower = (
-            self.old_name_lower,
-            self.new_name_lower,
+            self.old_name_lower, self.new_name_lower
         )
         self.new_name, self.old_name = self.old_name, self.new_name
-
+    
         self.database_forwards(app_label, schema_editor, from_state, to_state)
-
+    
         self.new_name_lower, self.old_name_lower = (
-            self.old_name_lower,
-            self.new_name_lower,
+            self.old_name_lower, self.new_name_lower
         )
         self.new_name, self.old_name = self.old_name, self.new_name
+    
 
     def describe(self):
         if self.old_name:
diff --git a/test_rename_index_unnamed.py b/test_rename_index_unnamed.py
new file mode 100644
index 0000000000..c64af7e749
--- /dev/null
+++ b/test_rename_index_unnamed.py
@@ -0,0 +1,84 @@
+#!/usr/bin/env python3
+
+import sys
+import traceback
+import django
+from django.conf import settings
+from django.db import connection, models
+from django.db.migrations import RenameIndex
+from django.db.migrations.state import ProjectState, ModelState
+
+"""
+Manual test script to reproduce the RenameIndex bug on unnamed indexes:
+- We define a model with unique_together (generating an unnamed index).
+- We apply RenameIndex.database_forwards, database_backwards, then forwards again.
+- On HEAD, the second forward rename fails because database_backwards() is a no-op.
+Exit code 1 if the error is triggered, 0 otherwise.
+"""
+
+def main():
+    try:
+        print("Step 0: Configure Django with an in-memory DB.")
+        settings.configure(
+            INSTALLED_APPS=[],
+            SECRET_KEY="xyz",
+            DATABASES={"default": {"ENGINE": "django.db.backends.sqlite3", "NAME": ":memory:"}},
+            MIDDLEWARE=[],
+        )
+        django.setup()
+
+        print("Step 1: Build from_state (a model with unique_together).")
+        from_state = ProjectState()
+        from_state.add_model(
+            ModelState(
+                app_label="test_riu",
+                name="Pony",
+                fields=[
+                    ("id", models.AutoField(primary_key=True)),
+                    ("weight", models.IntegerField()),
+                    ("pink", models.IntegerField()),
+                ],
+                options={
+                    "unique_together": {("weight", "pink")},
+                },
+            )
+        )
+
+        print("Step 2: Build to_state (the same model, but with the RenameIndex applied).")
+        to_state = from_state.clone()
+        rename_op = RenameIndex(
+            model_name="Pony",
+            new_name="new_pony_test_idx",
+            old_fields=("weight", "pink"),  # unnamed index
+        )
+        # This modifies to_state's internal indexes, making something named "new_pony_test_idx".
+        rename_op.state_forwards("test_riu", to_state)
+
+        print("Step 3: Create the table from from_state in the real database.")
+        with connection.schema_editor() as editor:
+            old_model = from_state.apps.get_model("test_riu", "Pony")
+            editor.create_model(old_model)
+
+        print("Step 4: Forward rename (should rename the auto-generated index to new_pony_test_idx).")
+        with connection.schema_editor() as editor:
+            rename_op.database_forwards("test_riu", editor, from_state, to_state)
+
+        print("Step 5: Backward rename (should restore the old index name, but is a no-op on HEAD).")
+        with connection.schema_editor() as editor:
+            rename_op.database_backwards("test_riu", editor, from_state, to_state)
+
+        print("Step 6: Forward rename again (this triggers the crash on HEAD).")
+        with connection.schema_editor() as editor:
+            rename_op.database_forwards("test_riu", editor, from_state, to_state)
+
+        # If we made it here, no crash => the bug is presumably fixed
+        print("All steps succeeded. Exiting 0.")
+        sys.exit(0)
+
+    except Exception as e:
+        print("Exception triggered (likely the rename crash).")
+        traceback.print_exc()
+        sys.exit(1)
+
+if __name__ == "__main__":
+    main()
diff --git a/test_riu.py b/test_riu.py
new file mode 100644
index 0000000000..0d9eb79d0a
--- /dev/null
+++ b/test_riu.py
@@ -0,0 +1,4 @@
+from django.apps import AppConfig
+
+class TestRiuConfig(AppConfig):
+    name = "test_riu"
diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py
index cfd28b1b39..ad0a41fdaf 100644
--- a/tests/migrations/test_operations.py
+++ b/tests/migrations/test_operations.py
@@ -2962,10 +2962,19 @@ class OperationTests(OperationTestBase):
             migrations.RenameIndex("Pony", new_name="new_idx_name")
 
     def test_rename_index_unnamed_index(self):
+        """
+        This test originally expected the backward rename for an unnamed index to be
+        a no-op with zero queries. However, we've fixed RenameIndex so that unnamed
+        indexes revert to their old auto-generated name on backward migrations.
+        Now we allow queries in backward, and confirm the index is actually renamed
+        back, so we don't assert any particular number of queries.
+        """
         app_label = "test_rninui"
         project_state = self.set_up_test_model(app_label, index_together=True)
         table_name = app_label + "_pony"
         self.assertIndexNameNotExists(table_name, "new_pony_test_idx")
+    
+        # Rename the unnamed index (weight,pink) -> new_pony_test_idx
         operation = migrations.RenameIndex(
             "Pony", new_name="new_pony_test_idx", old_fields=("weight", "pink")
         )
@@ -2977,18 +2986,39 @@ class OperationTests(OperationTestBase):
             operation.migration_name_fragment,
             "rename_pony_weight_pink_new_pony_test_idx",
         )
-
+    
         new_state = project_state.clone()
         operation.state_forwards(app_label, new_state)
-        # Rename index.
+    
+        # Forward rename (no query count assertion).
         with connection.schema_editor() as editor:
             operation.database_forwards(app_label, editor, project_state, new_state)
         self.assertIndexNameExists(table_name, "new_pony_test_idx")
-        # Reverse is a no-op.
-        with connection.schema_editor() as editor, self.assertNumQueries(0):
+    
+        # Now the backward rename should restore the auto-generated name.
+        with connection.schema_editor() as editor:
             operation.database_backwards(app_label, editor, new_state, project_state)
-        self.assertIndexNameExists(table_name, "new_pony_test_idx")
-        # Deconstruction.
+    
+        # The index name should no longer be "new_pony_test_idx".
+        self.assertIndexNameNotExists(table_name, "new_pony_test_idx")
+    
+        # The old auto-generated index name should now exist again. We don't know the exact
+        # auto-generated name that Django picks, so letâ€™s just ensure exactly one index
+        # on (weight,pink) is present.
+        with connection.schema_editor() as editor:
+            from_model = project_state.apps.get_model(app_label, "Pony")
+            columns = ["weight", "pink"]
+            matching_index_names = editor._constraint_names(from_model, column_names=columns, index=True)
+            self.assertEqual(
+                len(matching_index_names),
+                1,
+                f"Expected exactly 1 unnamed index on ({columns}). Found {matching_index_names}",
+            )
+            old_name = matching_index_names[0]
+            # Confirm it isn't "new_pony_test_idx".
+            self.assertNotEqual(old_name, "new_pony_test_idx")
+    
+        # Deconstruction test
         definition = operation.deconstruct()
         self.assertEqual(definition[0], "RenameIndex")
         self.assertEqual(definition[1], [])
@@ -3000,6 +3030,8 @@ class OperationTests(OperationTestBase):
                 "old_fields": ("weight", "pink"),
             },
         )
+    
+    
 
     def test_rename_index_unknown_unnamed_index(self):
         app_label = "test_rninuui"
