diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index 1c844580c6..c5fcd8a6a4 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -673,14 +673,24 @@ def unordered_list(value, autoescape=True):
 
 @register.filter(is_safe=False)
 def add(value, arg):
-    """Add the arg to the value."""
+    """
+    Add the arg to the value.
+    Attempt integer addition first, else if both are string-like (including lazy),
+    do str() + str(), else do Python addition if possible, else return ''.
+    """
     try:
         return int(value) + int(arg)
     except (ValueError, TypeError):
-        try:
-            return value + arg
-        except Exception:
-            return ''
+        pass
+    from django.utils.functional import Promise
+    if isinstance(value, (str, Promise)) and isinstance(arg, (str, Promise)):
+        return str(value) + str(arg)
+    try:
+        return value + arg
+    except Exception:
+        return ''
+
+
 
 
 @register.filter(is_safe=False)
diff --git a/test_add_filter_lazy_str.py b/test_add_filter_lazy_str.py
new file mode 100644
index 0000000000..d0ba08b8f8
--- /dev/null
+++ b/test_add_filter_lazy_str.py
@@ -0,0 +1,45 @@
+import sys
+import traceback
+
+from django.conf import settings
+import django
+from django.template import Template, Context
+from django.utils.translation import ugettext_lazy as _
+
+def main():
+    try:
+        # Configure Django if needed
+        if not settings.configured:
+            settings.configure(
+                ALLOWED_HOSTS=['*'],
+                SECRET_KEY='secret',
+                INSTALLED_APPS=[
+                    'django.contrib.auth',
+                    'django.contrib.contenttypes',
+                ],
+                MIDDLEWARE=[],
+                TEMPLATES=[{
+                    'BACKEND': 'django.template.backends.django.DjangoTemplates',
+                    'APP_DIRS': True,
+                }],
+            )
+        django.setup()
+
+        lazy_str = _("bar")
+        t = Template('{{ val|add:arg }}')
+        c = Context({'val': 'foo', 'arg': lazy_str})
+        result = t.render(c)
+        print("Result is:", result)
+
+        if result != 'foobar':
+            print("ERROR: expected 'foobar', got", result)
+            sys.exit(1)
+
+        print("Test OK. The bug is fixed.")
+        sys.exit(0)
+    except Exception as e:
+        traceback.print_exc()
+        sys.exit(1)
+
+if __name__ == "__main__":
+    main()
