diff --git a/django/core/serializers/base.py b/django/core/serializers/base.py
index da85cb4b92..60646715e0 100644
--- a/django/core/serializers/base.py
+++ b/django/core/serializers/base.py
@@ -323,12 +323,6 @@ class DeserializedObject:
 
 
 def build_instance(Model, data, db):
-    """
-    Build a model instance.
-
-    If the model instance doesn't have a primary key and the model supports
-    natural keys, try to retrieve it from the database.
-    """
     default_manager = Model._meta.default_manager
     pk = data.get(Model._meta.pk.attname)
     if (
@@ -336,14 +330,19 @@ def build_instance(Model, data, db):
         and hasattr(default_manager, "get_by_natural_key")
         and hasattr(Model, "natural_key")
     ):
-        natural_key = Model(**data).natural_key()
+        instance_for_nk = Model(**data)
+        instance_for_nk._state.db = db
+        natural_key = instance_for_nk.natural_key()
         try:
             data[Model._meta.pk.attname] = Model._meta.pk.to_python(
                 default_manager.db_manager(db).get_by_natural_key(*natural_key).pk
             )
         except Model.DoesNotExist:
             pass
-    return Model(**data)
+    instance = Model(**data)
+    instance._state.db = db
+    return instance
+
 
 
 def deserialize_m2m_values(field, field_value, using, handle_forward_references):
diff --git a/test_fixture_nk_dbissue.json b/test_fixture_nk_dbissue.json
new file mode 100644
index 0000000000..49a62b2ee1
--- /dev/null
+++ b/test_fixture_nk_dbissue.json
@@ -0,0 +1,17 @@
+
+    [
+      {
+        "model": "testapp_nkdbissue.author",
+        "fields": {
+          "name": "JR Tolkien"
+        }
+      },
+      {
+        "model": "testapp_nkdbissue.book",
+        "fields": {
+          "title": "The Ring",
+          "author": ["JR Tolkien"]
+        }
+      }
+    ]
+    
\ No newline at end of file
diff --git a/test_natural_keys_database_issue.py b/test_natural_keys_database_issue.py
new file mode 100644
index 0000000000..d93348473b
--- /dev/null
+++ b/test_natural_keys_database_issue.py
@@ -0,0 +1,75 @@
+import sys
+import django
+from django.conf import settings
+from django.core.management import call_command
+
+def main():
+    if not settings.configured:
+        settings.configure(
+            DEBUG=True,
+            SECRET_KEY="secret",
+            INSTALLED_APPS=[
+                "django.contrib.contenttypes",
+                "testapp_nkdbissue"
+            ],
+            DATABASES={
+                "default": {
+                    "ENGINE": "django.db.backends.sqlite3",
+                    "NAME": ":memory:"
+                },
+                "other": {
+                    "ENGINE": "django.db.backends.sqlite3",
+                    "NAME": ":memory:"
+                }
+            },
+            MIDDLEWARE=[]
+        )
+
+    try:
+        django.setup()
+    except Exception as e:
+        print(f"django.setup() failed: {e}")
+        sys.exit(1)
+
+    # Create DB tables
+    try:
+        call_command("migrate", database="default", interactive=False, verbosity=0, run_syncdb=True)
+        call_command("migrate", database="other", interactive=False, verbosity=0, run_syncdb=True)
+    except Exception as e:
+        print(f"Migration failed: {e}")
+        sys.exit(1)
+
+    # Build fixture referencing testapp_nkdbissue.author and book by natural key:
+    fixture_data = '''
+    [
+      {
+        "model": "testapp_nkdbissue.author",
+        "fields": {
+          "name": "JR Tolkien"
+        }
+      },
+      {
+        "model": "testapp_nkdbissue.book",
+        "fields": {
+          "title": "The Ring",
+          "author": ["JR Tolkien"]
+        }
+      }
+    ]
+    '''
+    with open("test_fixture_nk_dbissue.json", "w", encoding="utf-8") as f:
+        f.write(fixture_data)
+
+    # Attempt loaddata
+    try:
+        call_command("loaddata", "test_fixture_nk_dbissue.json", "--database=other", format="json", verbosity=0)
+    except Exception as e:
+        print("BUG DETECTED: loaddata failed with error.")
+        print(f"Error: {e}")
+        sys.exit(1)
+
+    print("SUCCESS: loaddata succeeded - bug presumably fixed.")
+    sys.exit(0)
+
+if __name__ == "__main__":
+    main()
diff --git a/testapp_nkdbissue/__init__.py b/testapp_nkdbissue/__init__.py
new file mode 100644
index 0000000000..0f854d52e8
--- /dev/null
+++ b/testapp_nkdbissue/__init__.py
@@ -0,0 +1 @@
+default_app_config = "testapp_nkdbissue.apps.TestAppNkDbIssueConfig"
diff --git a/testapp_nkdbissue/apps.py b/testapp_nkdbissue/apps.py
new file mode 100644
index 0000000000..6a0ebd337a
--- /dev/null
+++ b/testapp_nkdbissue/apps.py
@@ -0,0 +1,5 @@
+from django.apps import AppConfig
+
+class TestAppNkDbIssueConfig(AppConfig):
+    name = "testapp_nkdbissue"
+    label = "testapp_nkdbissue"
diff --git a/testapp_nkdbissue/models.py b/testapp_nkdbissue/models.py
new file mode 100644
index 0000000000..74b348f1a5
--- /dev/null
+++ b/testapp_nkdbissue/models.py
@@ -0,0 +1,33 @@
+from django.db import models
+
+class AuthorManager(models.Manager):
+    def get_by_natural_key(self, name):
+        return self.get(name=name)
+
+class Author(models.Model):
+    name = models.CharField(max_length=255, unique=True)
+    objects = AuthorManager()
+
+    def natural_key(self):
+        return (self.name,)
+
+    class Meta:
+        app_label = "testapp_nkdbissue"
+
+class BookManager(models.Manager):
+    def get_by_natural_key(self, title, author):
+        return self.get(title=title, author__name=author)
+
+class Book(models.Model):
+    title = models.CharField(max_length=255)
+    author = models.ForeignKey(Author, models.CASCADE, related_name="books")
+    objects = BookManager()
+
+    def natural_key(self):
+        return (self.title,) + self.author.natural_key()
+
+    natural_key.dependencies = ["testapp_nkdbissue.Author"]
+
+    class Meta:
+        app_label = "testapp_nkdbissue"
+        unique_together = [["title","author"]]
