diff --git a/django/db/models/base.py b/django/db/models/base.py
index 3ce711f3f1..7a1ec3a1e7 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -1659,10 +1659,14 @@ class Model(metaclass=ModelBase):
     @classmethod
     def _check_ordering(cls):
         """
-        Check "ordering" option -- is it a list of strings and do all fields
-        exist?
+        Check "ordering" option -- is it a list of strings and do all fields exist?
         """
-        if cls._meta._ordering_clash:
+        from django.core import checks
+        from itertools import chain
+        from django.db.models.constants import LOOKUP_SEP
+        opts = cls._meta
+    
+        if opts._ordering_clash:
             return [
                 checks.Error(
                     "'ordering' and 'order_with_respect_to' cannot be used together.",
@@ -1670,11 +1674,11 @@ class Model(metaclass=ModelBase):
                     id='models.E021',
                 ),
             ]
-
-        if cls._meta.order_with_respect_to or not cls._meta.ordering:
+    
+        if opts.order_with_respect_to or not opts.ordering:
             return []
-
-        if not isinstance(cls._meta.ordering, (list, tuple)):
+    
+        if not isinstance(opts.ordering, (list, tuple)):
             return [
                 checks.Error(
                     "'ordering' must be a tuple or list (even if you want to order by only one field).",
@@ -1682,16 +1686,16 @@ class Model(metaclass=ModelBase):
                     id='models.E014',
                 )
             ]
-
+    
         errors = []
-        fields = cls._meta.ordering
-
+        fields = opts.ordering
+    
         # Skip expressions and '?' fields.
         fields = (f for f in fields if isinstance(f, str) and f != '?')
-
+    
         # Convert "-field" to "field".
         fields = ((f[1:] if f.startswith('-') else f) for f in fields)
-
+    
         # Separate related fields and non-related fields.
         _fields = []
         related_fields = []
@@ -1701,44 +1705,52 @@ class Model(metaclass=ModelBase):
             else:
                 _fields.append(f)
         fields = _fields
-
+    
         # Check related fields.
         for field in related_fields:
             _cls = cls
             fld = None
-            for part in field.split(LOOKUP_SEP):
+            parts = field.split(LOOKUP_SEP)
+            for part in parts:
                 try:
                     fld = _cls._meta.get_field(part)
                     if fld.is_relation:
                         _cls = fld.get_path_info()[-1].to_opts.model
-                except (FieldDoesNotExist, AttributeError):
-                    if fld is None or fld.get_transform(part) is None:
-                        errors.append(
-                            checks.Error(
-                                "'ordering' refers to the nonexistent field, "
-                                "related field, or lookup '%s'." % field,
-                                obj=cls,
-                                id='models.E015',
-                            )
+                except (LookupError, AttributeError):
+                    # Special-case 'pk' so it doesn't trigger E015, since it's
+                    # a valid alias for the primary key in queries.
+                    if part == 'pk':
+                        # Don't add an error; just stop checking further parts.
+                        break
+                    # Otherwise, it's indeed nonexistent -> E015.
+                    errors.append(
+                        checks.Error(
+                            "'ordering' refers to the nonexistent field, "
+                            "related field, or lookup '%s'." % field,
+                            obj=cls,
+                            id='models.E015',
                         )
-
+                    )
+                    break
+    
         # Skip ordering on pk. This is always a valid order_by field
         # but is an alias and therefore won't be found by opts.get_field.
         fields = {f for f in fields if f != 'pk'}
-
+    
         # Check for invalid or nonexistent fields in ordering.
         invalid_fields = []
-
+    
         # Any field name that is not present in field_names does not exist.
         # Also, ordering by m2m fields is not allowed.
-        opts = cls._meta
-        valid_fields = set(chain.from_iterable(
-            (f.name, f.attname) if not (f.auto_created and not f.concrete) else (f.field.related_query_name(),)
-            for f in chain(opts.fields, opts.related_objects)
-        ))
-
+        valid_fields = set(
+            chain.from_iterable(
+                (f.name, f.attname) if not (f.auto_created and not f.concrete) else (f.field.related_query_name(),)
+                for f in chain(opts.fields, opts.related_objects)
+            )
+        )
+    
         invalid_fields.extend(fields - valid_fields)
-
+    
         for invalid_field in invalid_fields:
             errors.append(
                 checks.Error(
@@ -1749,6 +1761,7 @@ class Model(metaclass=ModelBase):
                 )
             )
         return errors
+    
 
     @classmethod
     def _check_long_column_names(cls):
diff --git a/scripts/test_pk_order.py b/scripts/test_pk_order.py
new file mode 100644
index 0000000000..3ff9859d89
--- /dev/null
+++ b/scripts/test_pk_order.py
@@ -0,0 +1,53 @@
+import sys
+from django.conf import settings
+
+def main():
+    print("Configuring Django settings for test_pk_order.")
+    if not settings.configured:
+        settings.configure(
+            SECRET_KEY="test",
+            DATABASES={"default": {"ENGINE": "django.db.backends.sqlite3", "NAME": ":memory:"}},
+            INSTALLED_APPS=[],
+            MIGRATION_MODULES={},
+        )
+
+    print("Calling django.setup()...")
+    import django
+    django.setup()
+
+    print("Defining models now that apps are loaded...")
+    from django.db import models
+    from django.core.checks import run_checks
+
+    class OtherModel(models.Model):
+        my_pk = models.AutoField(primary_key=True)
+        name = models.CharField(max_length=50)
+        class Meta:
+            app_label = "test_label"
+
+    class SomeModel(models.Model):
+        fk = models.ForeignKey(OtherModel, on_delete=models.CASCADE)
+        class Meta:
+            app_label = "test_label"
+            # We expect "fk__pk" to fail because "pk" isn't a real name
+            # when OtherModel has a custom primary key = my_pk.
+            ordering = ["fk__pk"]
+
+    print("Running checks...")
+    errors = run_checks()
+    e015_found = False
+
+    for e in errors:
+        print("CHECK FOUND", e.id, e.msg)
+        if e.id == "models.E015":
+            e015_found = True
+
+    if e015_found:
+        print("Error E015 is found. Exiting with code 1.")
+        sys.exit(1)
+    else:
+        print("No E015 found. Exiting with code 0.")
+        sys.exit(0)
+
+if __name__ == "__main__":
+    main()
