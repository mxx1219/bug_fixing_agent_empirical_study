diff --git a/commonuserapp/__init__.py b/commonuserapp/__init__.py
new file mode 100644
index 0000000000..71a65f362f
--- /dev/null
+++ b/commonuserapp/__init__.py
@@ -0,0 +1 @@
+# empty init
\ No newline at end of file
diff --git a/commonuserapp/apps.py b/commonuserapp/apps.py
new file mode 100644
index 0000000000..71a320b65e
--- /dev/null
+++ b/commonuserapp/apps.py
@@ -0,0 +1,5 @@
+from django.apps import AppConfig
+
+class CommonUserAppConfig(AppConfig):
+    name = "commonuserapp"
+    label = "commonuserapp"
diff --git a/commonuserapp/models.py b/commonuserapp/models.py
new file mode 100644
index 0000000000..f87541b2ad
--- /dev/null
+++ b/commonuserapp/models.py
@@ -0,0 +1,26 @@
+from django.db import models
+from django.db.models import UniqueConstraint
+from django.contrib.auth.base_user import AbstractBaseUser
+from django.contrib.auth.models import PermissionsMixin, Group, Permission
+
+class CommonUsernameUser(AbstractBaseUser, PermissionsMixin):
+    username = models.CharField(max_length=30)
+    USERNAME_FIELD = "username"
+
+    # Override groups/user_permissions with distinct related_names so we don't clash with the default User model.
+    groups = models.ManyToManyField(
+        Group,
+        related_name="commonusernameuser_set",
+        blank=True
+    )
+    user_permissions = models.ManyToManyField(
+        Permission,
+        related_name="commonusernameuser_set",
+        blank=True
+    )
+
+    class Meta:
+        app_label = "commonuserapp"
+        constraints = [
+            UniqueConstraint(fields=["username"], name="user_username_unq"),
+        ]
diff --git a/django/contrib/auth/checks.py b/django/contrib/auth/checks.py
index 65fc266f7e..93bbc4a670 100644
--- a/django/contrib/auth/checks.py
+++ b/django/contrib/auth/checks.py
@@ -9,6 +9,12 @@ from .management import _get_builtin_permissions
 
 
 def check_user_model(app_configs=None, **kwargs):
+    from django.db.models import UniqueConstraint
+    from django.apps import apps
+    from django.conf import settings
+    from django.core import checks
+    from types import MethodType
+
     if app_configs is None:
         cls = apps.get_model(settings.AUTH_USER_MODEL)
     else:
@@ -51,10 +57,17 @@ def check_user_model(app_configs=None, **kwargs):
             )
         )
 
-    # Check that the username field is unique
-    if not cls._meta.get_field(cls.USERNAME_FIELD).unique:
-        if (settings.AUTHENTICATION_BACKENDS ==
-                ['django.contrib.auth.backends.ModelBackend']):
+    # Check that the username field is effectively unique
+    username_field = cls._meta.get_field(cls.USERNAME_FIELD)
+    has_single_field_unique_constraint = any(
+        isinstance(constraint, UniqueConstraint) and
+        len(constraint.fields) == 1 and
+        constraint.fields[0] == cls.USERNAME_FIELD
+        for constraint in cls._meta.constraints
+    )
+
+    if not (username_field.unique or has_single_field_unique_constraint):
+        if settings.AUTHENTICATION_BACKENDS == ['django.contrib.auth.backends.ModelBackend']:
             errors.append(
                 checks.Error(
                     "'%s.%s' must be unique because it is named as the 'USERNAME_FIELD'." % (
@@ -99,6 +112,7 @@ def check_user_model(app_configs=None, **kwargs):
     return errors
 
 
+
 def check_models_permissions(app_configs=None, **kwargs):
     if app_configs is None:
         models = apps.get_models()
diff --git a/test_username_uniqueconstraint.py b/test_username_uniqueconstraint.py
new file mode 100644
index 0000000000..86c585c4a5
--- /dev/null
+++ b/test_username_uniqueconstraint.py
@@ -0,0 +1,37 @@
+import sys
+from django.conf import settings
+import django
+from django.core import checks
+
+def run_test():
+    print("Step 1: Configuring settings with AUTH_USER_MODEL = 'commonuserapp.CommonUsernameUser'")
+    if not settings.configured:
+        settings.configure(
+            DATABASES={"default": {"ENGINE": "django.db.backends.sqlite3", "NAME": ":memory:"}},
+            INSTALLED_APPS=[
+                "django.contrib.auth",
+                "django.contrib.contenttypes",
+                "commonuserapp",
+            ],
+            AUTH_USER_MODEL="commonuserapp.CommonUsernameUser",
+            MIDDLEWARE=[],
+        )
+    django.setup()
+
+    print("Step 2: Running checks.")
+    errors = checks.run_checks()
+    print("Got errors:", errors)
+
+    from commonuserapp.models import CommonUsernameUser
+    # On HEAD (without our fix), we expect E003 here because username doesn't have unique=True.
+    # If the code is still unpatched, this test must exit(1).
+    for e in errors:
+        if e.id == "auth.E003" and e.obj == CommonUsernameUser:
+            print("E003 was triggered incorrectly despite having a UniqueConstraint!")
+            sys.exit(1)
+
+    print("No E003 error from the checks. That means the fix is in place or the check is being skipped.")
+    sys.exit(0)
+
+if __name__ == '__main__':
+    run_test()
