diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index 967a91fdc8..d41337ddd0 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -860,6 +860,19 @@ class AddIndex(IndexOperation):
     @property
     def migration_name_fragment(self):
         return "%s_%s" % (self.model_name_lower, self.index.name.lower())
+    def reduce(self, operation, app_label):
+        """
+        If followed immediately by RemoveIndex with the same model_name and index.name,
+        remove both from the migration plan by returning [].
+        """
+        if (
+            isinstance(operation, RemoveIndex) and
+            self.model_name_lower == operation.model_name_lower and
+            self.index.name == operation.name
+        ):
+            return []
+        return super().reduce(operation, app_label)
+    
 
 
 class RemoveIndex(IndexOperation):
diff --git a/test_reduce_add_remove_index.py b/test_reduce_add_remove_index.py
new file mode 100644
index 0000000000..8728e9a10e
--- /dev/null
+++ b/test_reduce_add_remove_index.py
@@ -0,0 +1,24 @@
+import sys
+from django.db.migrations.optimizer import MigrationOptimizer
+from django.db.migrations.operations.models import AddIndex, RemoveIndex
+from django.db import models
+
+print("Starting test for AddIndex-RemoveIndex optimization...")
+
+my_index = models.Index(fields=['foo'], name='my_index')
+ops = [
+    AddIndex(model_name='MyModel', index=my_index),
+    RemoveIndex(model_name='MyModel', name='my_index'),
+]
+
+print("Operations before optimization:", ops)
+optimizer = MigrationOptimizer()
+optimized_ops = optimizer.optimize(ops, 'myapp')
+print("Optimized operations:", optimized_ops)
+
+if len(optimized_ops) == 0:
+    print("SUCCESS: AddIndex/RemoveIndex are optimized away.")
+    sys.exit(0)
+else:
+    print("FAILURE: They were not optimized away.")
+    sys.exit(1)
