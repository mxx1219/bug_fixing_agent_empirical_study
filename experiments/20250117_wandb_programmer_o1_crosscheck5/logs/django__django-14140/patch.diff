diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py
index ae0f886107..47ded0a887 100644
--- a/django/db/models/query_utils.py
+++ b/django/db/models/query_utils.py
@@ -84,17 +84,15 @@ class Q(tree.Node):
         path = '%s.%s' % (self.__class__.__module__, self.__class__.__name__)
         if path.startswith('django.db.models.query_utils'):
             path = path.replace('django.db.models.query_utils', 'django.db.models')
-        args, kwargs = (), {}
-        if len(self.children) == 1 and not isinstance(self.children[0], Q):
-            child = self.children[0]
-            kwargs = {child[0]: child[1]}
-        else:
-            args = tuple(self.children)
-            if self.connector != self.default:
-                kwargs = {'_connector': self.connector}
+        # Remove the single-child special case and always treat children as args.
+        args = tuple(self.children)
+        kwargs = {}
+        if self.connector != self.default:
+            kwargs['_connector'] = self.connector
         if self.negated:
             kwargs['_negated'] = True
         return path, args, kwargs
+    
 
 
 class DeferredAttribute:
diff --git a/test_q_deconstruct_issue.py b/test_q_deconstruct_issue.py
new file mode 100644
index 0000000000..122e74ae1c
--- /dev/null
+++ b/test_q_deconstruct_issue.py
@@ -0,0 +1,40 @@
+import sys
+import traceback
+
+from django.conf import settings
+
+# Provide minimal config to allow get_user_model() usage.
+settings.configure(
+    INSTALLED_APPS=[
+        "django.contrib.auth",
+        "django.contrib.contenttypes",
+    ],
+    DATABASES={
+        "default": {
+            "ENGINE": "django.db.backends.sqlite3",
+            "NAME": ":memory:",
+        }
+    },
+)
+
+import django
+django.setup()
+
+from django.db.models import Q, Exists
+from django.contrib.auth import get_user_model
+
+def main():
+    print("Running Q single-child deconstruct bug test with minimal settings...")
+    # Attempt to deconstruct a Q with a single-child Exists() node.
+    # If it crashes with TypeError, the bug is still present.
+    try:
+        Q(Exists(get_user_model().objects.filter(username='jim'))).deconstruct()
+        print("No crash => problem is fixed => exit 0")
+        sys.exit(0)
+    except Exception as e:
+        print("Crash => problem not fixed => exit 1")
+        traceback.print_exc()
+        sys.exit(1)
+
+if __name__ == '__main__':
+    main()
diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py
index 6dcf36ce02..ac615ffacf 100644
--- a/tests/queries/test_q.py
+++ b/tests/queries/test_q.py
@@ -39,17 +39,21 @@ class QTests(SimpleTestCase):
         q = Q(price__gt=F('discounted_price'))
         path, args, kwargs = q.deconstruct()
         self.assertEqual(path, 'django.db.models.Q')
-        self.assertEqual(args, ())
-        self.assertEqual(kwargs, {'price__gt': F('discounted_price')})
+        # Now we expect the single child to appear in args.
+        self.assertEqual(args, (('price__gt', F('discounted_price')),))
+        # No kwargs in the new logic.
+        self.assertEqual(kwargs, {})
+    
 
     def test_deconstruct_negated(self):
         q = ~Q(price__gt=F('discounted_price'))
         path, args, kwargs = q.deconstruct()
-        self.assertEqual(args, ())
+        # Single child is in args, negation is in kwargs.
+        self.assertEqual(args, (('price__gt', F('discounted_price')),))
         self.assertEqual(kwargs, {
-            'price__gt': F('discounted_price'),
             '_negated': True,
         })
+    
 
     def test_deconstruct_or(self):
         q1 = Q(price__gt=F('discounted_price'))
