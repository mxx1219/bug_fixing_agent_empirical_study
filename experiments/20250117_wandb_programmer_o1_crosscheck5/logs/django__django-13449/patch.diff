diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 90d90119d0..5a70534e85 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -19,17 +19,22 @@ class SQLiteNumericMixin:
     """
     Some expressions with output_field=DecimalField() must be cast to
     numeric to be properly filtered.
+    However, if the expression is a window function (contains OVER),
+    SQLite doesn't allow wrapping with CAST(...).
     """
     def as_sqlite(self, compiler, connection, **extra_context):
         sql, params = self.as_sql(compiler, connection, **extra_context)
         try:
-            if self.output_field.get_internal_type() == 'DecimalField':
+            # Skip casting if this expression uses an OVER clause.
+            # That would produce invalid syntax like CAST(LAG(...) AS NUMERIC) OVER(...)
+            if self.output_field.get_internal_type() == 'DecimalField' and not self.contains_over_clause:
                 sql = 'CAST(%s AS NUMERIC)' % sql
         except FieldError:
             pass
         return sql, params
 
 
+
 class Combinable:
     """
     Provide the ability to combine one or two objects with
diff --git a/django/db/models/functions/window.py b/django/db/models/functions/window.py
index 84b2b24ffa..2e735d42a6 100644
--- a/django/db/models/functions/window.py
+++ b/django/db/models/functions/window.py
@@ -48,6 +48,12 @@ class LagLeadFunction(Func):
         sources = self.get_source_expressions()
         return sources[0].output_field
 
+    @property
+    def contains_over_clause(self):
+        # LAG/LEAD are only meaningful in a window, so override to always True.
+        return True
+
+
 
 class Lag(LagLeadFunction):
     function = 'LAG'
diff --git a/test_lag_decimal_sqlite.py b/test_lag_decimal_sqlite.py
new file mode 100644
index 0000000000..e8eede9752
--- /dev/null
+++ b/test_lag_decimal_sqlite.py
@@ -0,0 +1,66 @@
+import sys
+import django
+from django.conf import settings
+from django.db import models, connection
+from django.db.utils import OperationalError
+from django.db.models.functions import Lag
+from django.db.models import Window, F
+
+# Minimal settings for an in-memory SQLite database
+SETTINGS_DICT = {
+    "INSTALLED_APPS": ["test_lag_decimal_sqlite_app.apps.TestLagDecimalSQLiteAppConfig"],
+    "DATABASES": {
+        "default": {
+            "ENGINE": "django.db.backends.sqlite3",
+            "NAME": ":memory:",
+        }
+    },
+    "SECRET_KEY": "secret",
+}
+
+if not settings.configured:
+    settings.configure(**SETTINGS_DICT)
+django.setup()
+
+class LagTest(models.Model):
+    modified = models.DateField()
+    data = models.FloatField()
+    amount = models.DecimalField(decimal_places=4, max_digits=7)
+    class Meta:
+        app_label = "test_lag_decimal_sqlite_app"
+
+def main():
+    # Manually create the table for LagTest using schema_editor.
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(LagTest)
+
+    # Insert some test data:
+    from datetime import date
+    LagTest.objects.create(modified=date(2021, 1, 1), data=1.1, amount=10.0000)
+    LagTest.objects.create(modified=date(2021, 1, 1), data=2.2, amount=20.0000)
+
+    # Attempt the window function query:
+    try:
+        w = Window(
+            expression=Lag("amount", 7),
+            partition_by=[F("modified")],
+            order_by=F("modified").asc()
+        )
+        queryset = LagTest.objects.all().annotate(w=w)
+        # Trigger evaluation to see if it crashes.
+        results = list(queryset)
+        print("Query completed successfully. Results:")
+        for r in results:
+            print(r.id, r.modified, r.data, r.amount, r.w)
+        # If we got here with no OperationalError, then the bug is fixed.
+        sys.exit(0)
+    except OperationalError as oe:
+        print("Caught OperationalError, likely from the LAG(...) syntax failure on SQLite.")
+        print("Error details:", oe)
+        sys.exit(1)
+    except Exception as e:
+        print("Some other error occurred:", e)
+        sys.exit(1)
+
+if __name__ == "__main__":
+    main()
diff --git a/test_lag_decimal_sqlite_app/__init__.py b/test_lag_decimal_sqlite_app/__init__.py
new file mode 100644
index 0000000000..a37b747f79
--- /dev/null
+++ b/test_lag_decimal_sqlite_app/__init__.py
@@ -0,0 +1 @@
+# Just an empty __init__ so Python sees this directory as a module.
diff --git a/test_lag_decimal_sqlite_app/apps.py b/test_lag_decimal_sqlite_app/apps.py
new file mode 100644
index 0000000000..e8347f46f9
--- /dev/null
+++ b/test_lag_decimal_sqlite_app/apps.py
@@ -0,0 +1,5 @@
+from django.apps import AppConfig
+
+class TestLagDecimalSQLiteAppConfig(AppConfig):
+    name = 'test_lag_decimal_sqlite_app'
+    label = 'test_lag_decimal_sqlite_app'
