diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py
index 075ecee1be..bd119d9f41 100644
--- a/django/db/models/constraints.py
+++ b/django/db/models/constraints.py
@@ -18,11 +18,13 @@ __all__ = ["BaseConstraint", "CheckConstraint", "Deferrable", "UniqueConstraint"
 
 class BaseConstraint:
     default_violation_error_message = _("Constraint “%(name)s” is violated.")
+    default_violation_error_code = None
     violation_error_message = None
+    violation_error_code = None
 
     # RemovedInDjango60Warning: When the deprecation ends, replace with:
-    # def __init__(self, *, name, violation_error_message=None):
-    def __init__(self, *args, name=None, violation_error_message=None):
+    # def __init__(self, *, name, violation_error_message=None, violation_error_code=None):
+    def __init__(self, *args, name=None, violation_error_message=None, violation_error_code=None):
         # RemovedInDjango60Warning.
         if name is None and not args:
             raise TypeError(
@@ -34,6 +36,10 @@ class BaseConstraint:
             self.violation_error_message = violation_error_message
         else:
             self.violation_error_message = self.default_violation_error_message
+        if violation_error_code is not None:
+            self.violation_error_code = violation_error_code
+        else:
+            self.violation_error_code = self.default_violation_error_code
         # RemovedInDjango60Warning.
         if args:
             warnings.warn(
@@ -42,7 +48,7 @@ class BaseConstraint:
                 RemovedInDjango60Warning,
                 stacklevel=2,
             )
-            for arg, attr in zip(args, ["name", "violation_error_message"]):
+            for arg, attr in zip(args, ["name", "violation_error_message", "violation_error_code"]):
                 if arg:
                     setattr(self, attr, arg)
 
@@ -65,6 +71,9 @@ class BaseConstraint:
     def get_violation_error_message(self):
         return self.violation_error_message % {"name": self.name}
 
+    def get_violation_error_code(self):
+        return self.violation_error_code
+
     def deconstruct(self):
         path = "%s.%s" % (self.__class__.__module__, self.__class__.__name__)
         path = path.replace("django.db.models.constraints", "django.db.models")
@@ -74,6 +83,11 @@ class BaseConstraint:
             and self.violation_error_message != self.default_violation_error_message
         ):
             kwargs["violation_error_message"] = self.violation_error_message
+        if (
+            self.violation_error_code is not None
+            and self.violation_error_code != self.default_violation_error_code
+        ):
+            kwargs["violation_error_code"] = self.violation_error_code
         return (path, (), kwargs)
 
     def clone(self):
@@ -81,14 +95,15 @@ class BaseConstraint:
         return self.__class__(*args, **kwargs)
 
 
+
 class CheckConstraint(BaseConstraint):
-    def __init__(self, *, check, name, violation_error_message=None):
+    def __init__(self, *, check, name, violation_error_message=None, violation_error_code=None):
         self.check = check
         if not getattr(check, "conditional", False):
             raise TypeError(
                 "CheckConstraint.check must be a Q instance or boolean expression."
             )
-        super().__init__(name=name, violation_error_message=violation_error_message)
+        super().__init__(name=name, violation_error_message=violation_error_message, violation_error_code=violation_error_code)
 
     def _get_check_sql(self, model, schema_editor):
         query = Query(model=model, alias_cols=False)
@@ -112,7 +127,7 @@ class CheckConstraint(BaseConstraint):
         against = instance._get_field_value_map(meta=model._meta, exclude=exclude)
         try:
             if not Q(self.check).check(against, using=using):
-                raise ValidationError(self.get_violation_error_message())
+                raise ValidationError(self.get_violation_error_message(), code=self.get_violation_error_code())
         except FieldError:
             pass
 
@@ -144,6 +159,7 @@ class CheckConstraint(BaseConstraint):
         return path, args, kwargs
 
 
+
 class Deferrable(Enum):
     DEFERRED = "deferred"
     IMMEDIATE = "immediate"
@@ -164,6 +180,7 @@ class UniqueConstraint(BaseConstraint):
         include=None,
         opclasses=(),
         violation_error_message=None,
+        violation_error_code=None,
     ):
         if not name:
             raise ValueError("A unique constraint must be named.")
@@ -213,7 +230,11 @@ class UniqueConstraint(BaseConstraint):
             F(expression) if isinstance(expression, str) else expression
             for expression in expressions
         )
-        super().__init__(name=name, violation_error_message=violation_error_message)
+        super().__init__(
+            name=name,
+            violation_error_message=violation_error_message,
+            violation_error_code=violation_error_code,
+        )
 
     @property
     def contains_expressions(self):
@@ -385,14 +406,17 @@ class UniqueConstraint(BaseConstraint):
         if not self.condition:
             if queryset.exists():
                 if self.expressions:
-                    raise ValidationError(self.get_violation_error_message())
+                    raise ValidationError(
+                        self.get_violation_error_message(), code=self.get_violation_error_code()
+                    )
                 # When fields are defined, use the unique_error_message() for
                 # backward compatibility.
-                for model, constraints in instance.get_constraints():
+                for model_, constraints in instance.get_constraints():
                     for constraint in constraints:
                         if constraint is self:
                             raise ValidationError(
-                                instance.unique_error_message(model, self.fields)
+                                instance.unique_error_message(model_, self.fields),
+                                code=self.get_violation_error_code(),
                             )
         else:
             against = instance._get_field_value_map(meta=model._meta, exclude=exclude)
@@ -400,6 +424,7 @@ class UniqueConstraint(BaseConstraint):
                 if (self.condition & Exists(queryset.filter(self.condition))).check(
                     against, using=using
                 ):
-                    raise ValidationError(self.get_violation_error_message())
+                    raise ValidationError(self.get_violation_error_message(), code=self.get_violation_error_code())
             except FieldError:
                 pass
+
diff --git a/test_violation_error_code.py b/test_violation_error_code.py
new file mode 100644
index 0000000000..4fd16831f3
--- /dev/null
+++ b/test_violation_error_code.py
@@ -0,0 +1,69 @@
+import sys
+import django
+from django.conf import settings
+from django.core.exceptions import ValidationError
+from django.db import models, connection
+from django.db.models import Q, CheckConstraint
+
+def main():
+    print("Step 1: Configuring the Django test environment.")
+    if not settings.configured:
+        settings.configure(
+            DATABASES={
+                "default": {
+                    "ENGINE": "django.db.backends.sqlite3",
+                    "NAME": ":memory:",
+                }
+            },
+            INSTALLED_APPS=["__main__"],  # We'll treat this script as an app
+        )
+    django.setup()
+
+    print("Step 2: Defining a test model with a CheckConstraint that has code='custom_code'.")
+    try:
+        class MyModel(models.Model):
+            name = models.CharField(max_length=10)
+            field = models.IntegerField()
+
+            class Meta:
+                app_label = "__main__"
+                constraints = [
+                    CheckConstraint(
+                        check=Q(field__lte=5),
+                        name="field_lte_5",
+                        violation_error_message="Field must be ≤5!",
+                        violation_error_code="custom_code",
+                    )
+                ]
+    except TypeError as e:
+        print("Got a TypeError when defining CheckConstraint. This indicates no support for violation_error_code.")
+        print("Exiting non-zero to indicate the problem is not fixed.")
+        sys.exit(2)
+
+    print("Step 3: Creating DB schema in memory.")
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(MyModel)
+
+    print("Step 4: Creating an invalid instance (field=6). Expecting ValidationError with code='custom_code'.")
+    instance = MyModel(name="test", field=6)
+    try:
+        instance.full_clean()
+        print("ERROR: full_clean() did NOT raise ValidationError; expected code='custom_code'.")
+        sys.exit(3)
+    except ValidationError as e:
+        # Usually the constraint error goes into error_dict["__all__"]
+        errors = e.error_dict.get("__all__", [])
+        if not errors:
+            print("ERROR: No errors found under '__all__'; cannot verify code.")
+            sys.exit(4)
+        error_code = errors[0].code
+        print(f"ValidationError was raised. The first error code is '{error_code}'.")
+        if error_code == "custom_code":
+            print("SUCCESS: The ValidationError code is 'custom_code'. Exiting with 0 to indicate the fix is present.")
+            sys.exit(0)
+        else:
+            print(f"FAILURE: Expected 'custom_code' but got '{error_code}'. Exiting non-zero.")
+            sys.exit(5)
+
+if __name__ == "__main__":
+    main()
