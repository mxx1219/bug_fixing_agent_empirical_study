diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py
index 7a99b12691..81c1db28d5 100644
--- a/django/db/models/fields/files.py
+++ b/django/db/models/fields/files.py
@@ -295,9 +295,13 @@ class FileField(Field):
         if kwargs.get("max_length") == 100:
             del kwargs["max_length"]
         kwargs["upload_to"] = self.upload_to
-        if self.storage is not default_storage:
-            kwargs["storage"] = getattr(self, "_storage_callable", self.storage)
+        # Always specialize if a callable is present.
+        if hasattr(self, '_storage_callable'):
+            kwargs['storage'] = self._storage_callable
+        elif self.storage is not default_storage:
+            kwargs["storage"] = self.storage
         return name, path, args, kwargs
+    
 
     def get_internal_type(self):
         return "FileField"
diff --git a/scripts/test_callable_storage_deconstruct.py b/scripts/test_callable_storage_deconstruct.py
new file mode 100644
index 0000000000..2a2f3ae500
--- /dev/null
+++ b/scripts/test_callable_storage_deconstruct.py
@@ -0,0 +1,36 @@
+#!/usr/bin/env python
+import sys
+import random
+import django
+from django.conf import settings
+from django.core.files.storage import default_storage, FileSystemStorage
+from django.db.models.fields.files import FileField
+
+print("Starting test_callable_storage_deconstruct...")
+
+# Minimal Django settings, if needed
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[],
+        DATABASES={"default": {"ENGINE": "django.db.backends.sqlite3"}}
+    )
+
+django.setup()
+
+def choose_storage():
+    """Return either default_storage or FileSystemStorage()."""
+    return random.choice([default_storage, FileSystemStorage()])
+
+# Create a FileField whose storage is a callable returning possibly default_storage
+field = FileField(storage=choose_storage, name="test_filefield")
+
+print("Deconstructing field...")
+name, path, args, kwargs = field.deconstruct()
+print(f"Deconstruct result => name={name}, path={path}, args={args}, kwargs={kwargs}")
+
+if "storage" not in kwargs:
+    print("FAIL - 'storage' is missing from deconstruct() output => bug not fixed")
+    sys.exit(1)
+else:
+    print("PASS - 'storage' is present in deconstruct() output => bug is fixed")
+    sys.exit(0)
