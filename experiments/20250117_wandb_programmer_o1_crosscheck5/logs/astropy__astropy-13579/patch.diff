diff --git a/astropy/wcs/wcsapi/wrappers/sliced_wcs.py b/astropy/wcs/wcsapi/wrappers/sliced_wcs.py
index d7605b078c..a37d743d4b 100644
--- a/astropy/wcs/wcsapi/wrappers/sliced_wcs.py
+++ b/astropy/wcs/wcsapi/wrappers/sliced_wcs.py
@@ -120,9 +120,15 @@ class SlicedLowLevelWCS(BaseWCSWrapper):
 
     """
     def __init__(self, wcs, slices):
-
+        from collections import defaultdict
+        import numbers
+        import numpy as np
+        from ..low_level_api import BaseLowLevelWCS
+        from .base import BaseWCSWrapper
+        from .sliced_wcs import sanitize_slices, combine_slices
+    
         slices = sanitize_slices(slices, wcs.pixel_n_dim)
-
+    
         if isinstance(wcs, SlicedLowLevelWCS):
             # Here we combine the current slices with the previous slices
             # to avoid ending up with many nested WCSes
@@ -137,21 +143,59 @@ class SlicedLowLevelWCS(BaseWCSWrapper):
         else:
             self._wcs = wcs
             self._slices_array = slices
-
+    
         self._slices_pixel = self._slices_array[::-1]
-
+    
         # figure out which pixel dimensions have been kept, then use axis correlation
         # matrix to figure out which world dims are kept
-        self._pixel_keep = np.nonzero([not isinstance(self._slices_pixel[ip], numbers.Integral)
-                                       for ip in range(self._wcs.pixel_n_dim)])[0]
-
+        import numpy as np
+        self._pixel_keep = np.nonzero([
+            not isinstance(self._slices_pixel[ip], numbers.Integral)
+            for ip in range(self._wcs.pixel_n_dim)
+        ])[0]
+    
         # axis_correlation_matrix[world, pixel]
         self._world_keep = np.nonzero(
-            self._wcs.axis_correlation_matrix[:, self._pixel_keep].any(axis=1))[0]
-
+            self._wcs.axis_correlation_matrix[:, self._pixel_keep].any(axis=1)
+        )[0]
+    
         if len(self._pixel_keep) == 0 or len(self._world_keep) == 0:
-            raise ValueError("Cannot slice WCS: the resulting WCS should have "
-                             "at least one pixel and one world dimension.")
+            raise ValueError(
+                "Cannot slice WCS: the resulting WCS should have "
+                "at least one pixel and one world dimension."
+            )
+    
+        # -------------------------------------------------------------------
+        # NEW CODE: Build a "pinned_world" array of length self._wcs.world_n_dim.
+        # For each pinned pixel dimension, set that pixel coordinate in a
+        # "base_array" and 0 for the rest, then do pixel->world, so at least
+        # we don't blindly use 1.0 in world_to_pixel_values.
+        # This is an approximation for strongly coupled axes, but better than 1.0.
+        # -------------------------------------------------------------------
+        self._pinned_world = [None] * self._wcs.world_n_dim
+    
+        # Build one global pixel array that includes all pinned dims at once:
+        pinned_pixel_array = [0.0] * self._wcs.pixel_n_dim
+        for ipix in range(self._wcs.pixel_n_dim):
+            if isinstance(self._slices_pixel[ipix], numbers.Integral):
+                pinned_pixel_array[ipix] = float(self._slices_pixel[ipix])
+    
+        # Evaluate the underlying WCS once at that pixel combination:
+        # This yields a set of "combined pinned" world coords for all pinned dims.
+        pinned_world_vals = self._wcs.pixel_to_world_values(*pinned_pixel_array)
+    
+        # pinned_world_vals might be a tuple if world_n_dim>1, or a single array otherwise
+        # We'll treat it as a tuple in the next lines
+        if self._wcs.world_n_dim == 1:
+            pinned_world_vals = (pinned_world_vals,)
+    
+        for iworld in range(self._wcs.world_n_dim):
+            if iworld not in self._world_keep:
+                # This dimension is pinned
+                self._pinned_world[iworld] = pinned_world_vals[iworld]
+            else:
+                self._pinned_world[iworld] = None
+    
 
     @lazyproperty
     def dropped_world_dimensions(self):
@@ -243,30 +287,48 @@ class SlicedLowLevelWCS(BaseWCSWrapper):
         return world_arrays
 
     def world_to_pixel_values(self, *world_arrays):
+        import numpy as np
+        from collections import defaultdict
+        import numbers
+    
         world_arrays = tuple(map(np.asanyarray, world_arrays))
         world_arrays_new = []
         iworld_curr = -1
+    
+        # We construct the full set of world coords for the underlying WCS.
+        # If a dimension is kept, we take the user's input. If a dimension
+        # was sliced out, we take _pinned_world[iworld] instead of 1.0.
         for iworld in range(self._wcs.world_n_dim):
             if iworld in self._world_keep:
                 iworld_curr += 1
                 world_arrays_new.append(world_arrays[iworld_curr])
             else:
-                world_arrays_new.append(1.)
-
+                # Instead of 1.0, use the pinned world coordinate from the constructor.
+                # If no pinned world was stored (somehow?), fall back to 1.0.
+                if self._pinned_world[iworld] is not None:
+                    world_arrays_new.append(self._pinned_world[iworld])
+                else:
+                    world_arrays_new.append(1.0)
+    
         world_arrays_new = np.broadcast_arrays(*world_arrays_new)
         pixel_arrays = list(self._wcs.world_to_pixel_values(*world_arrays_new))
-
+    
+        # Next, we apply any needed shifts from slicing. If the slice was
+        # slice(start=some_value), we remove that start from the result
+        # so that pixel=0 in the new WCS matches pixel=start in the old WCS.
         for ipixel in range(self._wcs.pixel_n_dim):
             if isinstance(self._slices_pixel[ipixel], slice) and self._slices_pixel[ipixel].start is not None:
                 pixel_arrays[ipixel] -= self._slices_pixel[ipixel].start
-
-        # Detect the case of a length 0 array
+    
+        # Now pick out only the pixel dimensions that remain in the sliced WCS
+        # (i.e., those that weren't pinned).
         if isinstance(pixel_arrays, np.ndarray) and not pixel_arrays.shape:
             return pixel_arrays
         pixel = tuple(pixel_arrays[ip] for ip in self._pixel_keep)
         if self.pixel_n_dim == 1 and self._wcs.pixel_n_dim > 1:
             pixel = pixel[0]
         return pixel
+    
 
     @property
     def world_axis_object_components(self):
diff --git a/test_sliced_wcs_bug.py b/test_sliced_wcs_bug.py
new file mode 100644
index 0000000000..9c006ecabb
--- /dev/null
+++ b/test_sliced_wcs_bug.py
@@ -0,0 +1,86 @@
+#!/usr/bin/env python3
+
+import sys
+import numpy as np
+import astropy.wcs
+
+def main():
+    print("Constructing the 3D WCS from the issue snippet...")
+
+    nx = 100
+    ny = 25
+    nz = 2
+    wcs_header = {
+        'WCSAXES': 3,
+        'CRPIX1': (nx + 1)/2,  # 50.5 if nx=100
+        'CRPIX2': (ny + 1)/2,  # 13 if ny=25
+        'CRPIX3': 1.0,
+        'PC1_1': 0.0,
+        'PC1_2': -1.0,
+        'PC1_3': 0.0,
+        'PC2_1': 1.0,
+        'PC2_2': 0.0,
+        'PC2_3': -1.0,
+        'CDELT1': 5,
+        'CDELT2': 5,
+        'CDELT3': 0.055,
+        'CUNIT1': 'arcsec',
+        'CUNIT2': 'arcsec',
+        'CUNIT3': 'Angstrom',
+        'CTYPE1': 'HPLN-TAN',
+        'CTYPE2': 'HPLT-TAN',
+        'CTYPE3': 'WAVE',
+        'CRVAL1': 0.0,
+        'CRVAL2': 0.0,
+        'CRVAL3': 1.05,
+    }
+    fits_wcs = astropy.wcs.WCS(header=wcs_header)
+
+    # Choose pixel coords near the reference pixel so that
+    # the spectral dimension is the reference wave = 1.05 A.
+    px_in, py_in, pz_in = 49.5, 12.0, 1.0
+
+    print(f"Full WCS: pixel_to_world_values({px_in}, {py_in}, {pz_in}) ->")
+    w0, w1, w2 = fits_wcs.pixel_to_world_values(px_in, py_in, pz_in)
+    print(f"  w0={w0}, w1={w1}, w2={w2}")
+
+    print("Now world_to_pixel_values on that same world coords:")
+    px_full, py_full, pz_full = fits_wcs.world_to_pixel_values(w0, w1, w2)
+    print(f"  px_full={px_full}, py_full={py_full}, pz_full={pz_full}")
+
+    # We expect px_full ~ 49.5, py_full ~ 12, pz_full ~ 1 if everything is consistent.
+    diff_full_x = abs(px_in - px_full)
+    diff_full_y = abs(py_in - py_full)
+    diff_full_z = abs(pz_in - pz_full)
+
+    # Now slice out the last pixel dimension:
+    from astropy.wcs.wcsapi import SlicedLowLevelWCS
+    ll_sliced_wcs = SlicedLowLevelWCS(fits_wcs, 0)
+
+    # On the sliced WCS, we only have two world coords (w0, w1).
+    print("Sliced WCS: world_to_pixel_values(w0, w1) ->")
+    px_sliced, py_sliced = ll_sliced_wcs.world_to_pixel_values(w0, w1)
+    print(f"  px_sliced={px_sliced}, py_sliced={py_sliced}")
+
+    # Compare with the full WCS pixel solution ignoring spectral dimension.
+    diff_sliced_x = abs(px_sliced - px_full)
+    diff_sliced_y = abs(py_sliced - py_full)
+
+    print("\nSummary of differences:")
+    print(f" Full WCS round trip differences: dx={diff_full_x}, dy={diff_full_y}, dz={diff_full_z}")
+    print(f" Sliced vs Full differences: dx={diff_sliced_x}, dy={diff_sliced_y}")
+
+    # If the bug is present, dx would be enormous for the sliced WCS.
+    # Meanwhile, the full WCS round-trip difference should be small if it is consistent.
+    if diff_full_x > 1e-3 or diff_full_y > 1e-3 or diff_full_z > 1e-3:
+        print("Test FAILED: Full WCS is not self-consistent. We expected px_in ~ px_full, etc.")
+        sys.exit(1)
+    if diff_sliced_x > 1.0 or diff_sliced_y > 1.0:
+        print("Test FAILED: The sliced WCS gave a very different pixel coordinate than the full WCS.")
+        sys.exit(1)
+
+    print("Test PASSED: The sliced WCS matches the full WCS (no bug).")
+    sys.exit(0)
+
+if __name__ == "__main__":
+    main()
