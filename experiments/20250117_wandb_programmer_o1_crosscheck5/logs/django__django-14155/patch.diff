diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
index 9b00e24509..8c5003cc5d 100644
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -31,38 +31,65 @@ from .utils import get_callable
 
 class ResolverMatch:
     def __init__(self, func, args, kwargs, url_name=None, app_names=None, namespaces=None, route=None, tried=None):
+        if isinstance(func, functools.partial):
+            self.partial = func
+            real = func.func
+            while isinstance(real, functools.partial):
+                real = real.func
+            func = real
+        else:
+            self.partial = None
+    
         self.func = func
         self.args = args
         self.kwargs = kwargs
         self.url_name = url_name
         self.route = route
         self.tried = tried
-
-        # If a URLRegexResolver doesn't have a namespace or app_name, it passes
-        # in an empty value.
+    
+        # If a URLRegexResolver doesn't have a namespace or app_name, it passes in an empty value.
         self.app_names = [x for x in app_names if x] if app_names else []
         self.app_name = ':'.join(self.app_names)
         self.namespaces = [x for x in namespaces if x] if namespaces else []
         self.namespace = ':'.join(self.namespaces)
-
+    
         if not hasattr(func, '__name__'):
             # A class-based view
             self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__
         else:
             # A function-based view
             self._func_path = func.__module__ + '.' + func.__name__
-
+    
         view_path = url_name or self._func_path
         self.view_name = ':'.join(self.namespaces + [view_path])
+    
 
     def __getitem__(self, index):
         return (self.func, self.args, self.kwargs)[index]
 
     def __repr__(self):
-        return "ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)" % (
-            self._func_path, self.args, self.kwargs, self.url_name,
-            self.app_names, self.namespaces, self.route,
+        if self.partial is not None:
+            partial_string = "functools.partial(%s, args=%r, kwargs=%r)" % (
+                self._func_path,
+                self.partial.args,
+                self.partial.keywords
+            )
+            func_str = partial_string
+        else:
+            func_str = self._func_path
+    
+        return (
+            "ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)" % (
+                func_str,
+                self.args,
+                self.kwargs,
+                self.url_name,
+                self.app_names,
+                self.namespaces,
+                self.route,
+            )
         )
+    
 
 
 def get_resolver(urlconf=None):
diff --git a/scripts/test_partial_resolver.py b/scripts/test_partial_resolver.py
new file mode 100644
index 0000000000..258a542e1b
--- /dev/null
+++ b/scripts/test_partial_resolver.py
@@ -0,0 +1,27 @@
+import functools
+import sys
+
+def sample_view():
+    return "sample_view called"
+
+def main():
+    print("Testing partial __repr__ in ResolverMatch...")
+
+    from django.urls import ResolverMatch
+    p = functools.partial(sample_view, default_arg=123)
+    rm = ResolverMatch(p, [], {})
+    s = repr(rm)
+    print(f"ResolverMatch repr: {s}")
+
+    # We assert that it should contain the string 'sample_view',
+    # which currently does not happen on HEAD with partial.
+    if "sample_view" not in s:
+        print("FAIL: partial was not unwrapped in __repr__!")
+        # Non-zero exit code for failure
+        sys.exit(1)
+    else:
+        print("PASS: partial unwrapped in __repr__!")
+        sys.exit(0)
+
+if __name__ == "__main__":
+    main()
