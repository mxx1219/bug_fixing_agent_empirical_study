diff --git a/django/core/management/base.py b/django/core/management/base.py
index e6cbf8c64f..5f7f1e61a6 100644
--- a/django/core/management/base.py
+++ b/django/core/management/base.py
@@ -149,6 +149,14 @@ class OutputWrapper(TextIOBase):
             msg += ending
         style_func = style_func or self.style_func
         self._out.write(style_func(msg))
+    def flush(self):
+        """
+        Explicitly flush the underlying stream. This avoids potential issues with
+        attribute delegation in certain environments.
+        """
+        if hasattr(self._out, "flush"):
+            self._out.flush()
+    
 
 
 class BaseCommand:
diff --git a/django/core/management/commands/flush_bug_command.py b/django/core/management/commands/flush_bug_command.py
new file mode 100644
index 0000000000..f503d8dd54
--- /dev/null
+++ b/django/core/management/commands/flush_bug_command.py
@@ -0,0 +1,10 @@
+# Generated flush test command
+from django.core.management.base import BaseCommand
+import time
+
+class Command(BaseCommand):
+    def handle(self, *args, **options):
+        self.stdout.write("Starting flush test...", ending="")
+        self.stdout.flush()
+        time.sleep(3)
+        self.stdout.write(" done\n")
diff --git a/manage.py b/manage.py
new file mode 100644
index 0000000000..7c2ab21489
--- /dev/null
+++ b/manage.py
@@ -0,0 +1,16 @@
+#!/usr/bin/env python3
+import os
+import sys
+
+def main():
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "test_settings")
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+if __name__ == "__main__":
+    main()
diff --git a/test_flush_repro.py b/test_flush_repro.py
new file mode 100644
index 0000000000..8898d10d8c
--- /dev/null
+++ b/test_flush_repro.py
@@ -0,0 +1,71 @@
+#!/usr/bin/env python3
+import sys
+import subprocess
+import time
+import os
+
+def main():
+    # This script attempts to reproduce the flush bug by causing a mock command
+    # that prints a partial line, then flushes, then waits, and prints the rest.
+
+    cmd_path = os.path.join("django", "core", "management", "commands", "flush_bug_command.py")
+    command_code = (
+        "# Generated flush test command\n"
+        "from django.core.management.base import BaseCommand\n"
+        "import time\n"
+        "\n"
+        "class Command(BaseCommand):\n"
+        "    def handle(self, *args, **options):\n"
+        "        self.stdout.write(\"Starting flush test...\", ending=\"\")\n"
+        "        self.stdout.flush()\n"
+        "        time.sleep(3)\n"
+        "        self.stdout.write(\" done\\n\")\n"
+    )
+
+    with open(cmd_path, "w") as f:
+        f.write(command_code)
+
+    print("[test_flush_repro] Created flush_bug_command.py to replicate flush scenario.")
+
+    run_cmd = [sys.executable, "manage.py", "flush_bug_command"]
+    print("[test_flush_repro] Running:", " ".join(run_cmd))
+    start_time = time.time()
+    process = subprocess.Popen(
+        run_cmd,
+        stdout=subprocess.PIPE,
+        stderr=subprocess.PIPE,
+        universal_newlines=True,
+        bufsize=1
+    )
+
+    partial_observed = False
+    lines = []
+    while True:
+        line = process.stdout.readline()
+        if not line:
+            if process.poll() is not None:
+                break
+            continue
+        lines.append(line)
+        if "Starting flush test..." in line:
+            partial_observed = True
+            print("[test_flush_repro] Observed partial line mid-execution.")
+        print("[test_flush_repro] out:", line.strip())
+
+    retcode = process.wait()
+    stderr_out = process.stderr.read()
+    if stderr_out:
+        for l in stderr_out.splitlines():
+            print("[test_flush_repro] err:", l)
+
+    end_time = time.time()
+    if partial_observed and (end_time - start_time) > 2:
+        print("[test_flush_repro] PASS: partial line was displayed well before end.")
+        sys.exit(0)
+    else:
+        print("[test_flush_repro] FAIL: partial line was not observed until end.")
+        print(f"[test_flush_repro] partial_observed={partial_observed}, time elapsed={end_time - start_time:.2f}s")
+        sys.exit(1)
+
+if __name__ == "__main__":
+    main()
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..30323a145a
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,8 @@
+SECRET_KEY = 'fake-key'
+INSTALLED_APPS = []
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
