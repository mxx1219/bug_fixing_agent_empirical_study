diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py
index 118bfced89..7dc6f5ec22 100644
--- a/astropy/io/fits/card.py
+++ b/astropy/io/fits/card.py
@@ -1298,36 +1298,50 @@ def _format_value(value):
 
 
 def _format_float(value):
-    """Format a floating number to make sure it gets the decimal point."""
-    value_str = f"{value:.16G}"
-    if "." not in value_str and "E" not in value_str:
-        value_str += ".0"
-    elif "E" in value_str:
-        # On some Windows builds of Python (and possibly other platforms?) the
-        # exponent is zero-padded out to, it seems, three digits.  Normalize
-        # the format to pad only to two digits.
-        significand, exponent = value_str.split("E")
-        if exponent[0] in ("+", "-"):
+    # First attempt to use Python's default str(value)
+    python_str = str(value)
+    # Ensure it has a decimal if it doesn't already
+    if '.' not in python_str and 'e' not in python_str and 'E' not in python_str:
+        python_str += '.0'
+
+    # If there's an exponent, normalize to uppercase 'E' and 2-digit exponent
+    if 'e' in python_str or 'E' in python_str:
+        splitted = python_str.upper().split('E')
+        significand, exponent = splitted
+        sign = ''
+        if exponent.startswith('+') or exponent.startswith('-'):
             sign = exponent[0]
             exponent = exponent[1:]
-        else:
-            sign = ""
-        value_str = f"{significand}E{sign}{int(exponent):02d}"
+        python_str = f'{significand}E{sign}{int(exponent):02d}'
+
+    # If this string fits within 20 characters, use it
+    if len(python_str) <= 20:
+        return python_str
+
+    # Otherwise, fall back to the original .16G formatting
+    value_str = f'{value:.16G}'
+    if '.' not in value_str and 'E' not in value_str:
+        value_str += '.0'
+    elif 'E' in value_str:
+        significand, exponent = value_str.split('E')
+        sign = ''
+        if exponent.startswith('+') or exponent.startswith('-'):
+            sign = exponent[0]
+            exponent = exponent[1:]
+        value_str = f'{significand}E{sign}{int(exponent):02d}'
 
-    # Limit the value string to at most 20 characters.
+    # Limit the value string to at most 20 characters
     str_len = len(value_str)
-
     if str_len > 20:
-        idx = value_str.find("E")
-
+        idx = value_str.find('E')
         if idx < 0:
             value_str = value_str[:20]
         else:
             value_str = value_str[: 20 - (str_len - idx)] + value_str[idx:]
-
     return value_str
 
 
+
 def _pad(input):
     """Pad blank space to the input string to be multiple of 80."""
     _len = len(input)
diff --git a/test_float_issue.py b/test_float_issue.py
new file mode 100644
index 0000000000..0067ccfc8b
--- /dev/null
+++ b/test_float_issue.py
@@ -0,0 +1,29 @@
+import sys
+from astropy.io import fits
+
+def main():
+    print("Creating new card with float=0.009125, comment='[m] radius arround actuator to avoid'")
+    new_c = fits.Card("HIERARCH ESO IFM CL RADIUS", 0.009125, "[m] radius arround actuator to avoid")
+    
+    result_str = str(new_c)
+    print(f"Resulting card string: {result_str!r}")
+    # Check that '0.009125' is in the string (not expanded to '0.009124999999...')
+    if "0.009125" not in result_str:
+        print("Test FAILED: Float was not 0.009125 in the card string.")
+        sys.exit(1)
+
+    # Check that 'avoid' is present near the end of the comment (not truncated)
+    if "avoid" not in result_str:
+        print("Test FAILED: The comment seems truncated (missing 'avoid').")
+        sys.exit(1)
+
+    # Check the final string length is at least 80 (the standard FITS card length).
+    if len(result_str) < 80:
+        print("Test FAILED: Card string is shorter than 80 chars, indicating truncation.")
+        sys.exit(1)
+
+    print("Test PASSED: Float is 0.009125 and the comment is not truncated.")
+    sys.exit(0)
+
+if __name__ == "__main__":
+    main()
