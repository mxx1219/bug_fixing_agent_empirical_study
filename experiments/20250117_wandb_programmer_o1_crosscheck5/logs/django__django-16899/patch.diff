diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py
index c395b0bde2..4aeacf6cc2 100644
--- a/django/contrib/admin/checks.py
+++ b/django/contrib/admin/checks.py
@@ -771,10 +771,11 @@ class BaseModelAdminChecks:
             except FieldDoesNotExist:
                 return [
                     checks.Error(
-                        "The value of '%s' is not a callable, an attribute of "
+                        "The value of '%s' refers to '%s', which is not a callable, an attribute of "
                         "'%s', or an attribute of '%s'."
                         % (
                             label,
+                            field_name,
                             obj.__class__.__name__,
                             obj.model._meta.label,
                         ),
@@ -784,6 +785,7 @@ class BaseModelAdminChecks:
                 ]
             else:
                 return []
+    
 
 
 class ModelAdminChecks(BaseModelAdminChecks):
diff --git a/issue_readonly_fields_message_test.py b/issue_readonly_fields_message_test.py
new file mode 100644
index 0000000000..4305ff6d1c
--- /dev/null
+++ b/issue_readonly_fields_message_test.py
@@ -0,0 +1,97 @@
+import sys
+import io
+import re
+from contextlib import redirect_stdout
+
+def main():
+    print("STEP 1: Setting up a scenario with a properly configured admin environment plus an invalid readonly_fields entry.")
+
+    import django
+    from django.conf import settings
+    from django.db import models
+    from django.contrib import admin
+    from django.core.management import call_command
+    from django.contrib.admin.sites import site
+    from django.core.management.base import SystemCheckError
+
+    if not settings.configured:
+        settings.configure(
+            SECRET_KEY="test",
+            INSTALLED_APPS=[
+                "django.contrib.contenttypes",
+                "django.contrib.auth",
+                "django.contrib.admin",
+                "django.contrib.messages",
+                "django.contrib.sessions",
+            ],
+            DATABASES={
+                "default": {
+                    "ENGINE": "django.db.backends.sqlite3",
+                    "NAME": ":memory:",
+                }
+            },
+            MIDDLEWARE=[
+                "django.contrib.sessions.middleware.SessionMiddleware",
+                "django.contrib.auth.middleware.AuthenticationMiddleware",
+                "django.contrib.messages.middleware.MessageMiddleware",
+            ],
+            TEMPLATES=[
+                {
+                    "BACKEND": "django.template.backends.django.DjangoTemplates",
+                    "DIRS": [],
+                    "APP_DIRS": True,
+                    "OPTIONS": {
+                        "context_processors": [
+                            "django.contrib.auth.context_processors.auth",
+                            "django.contrib.messages.context_processors.messages",
+                            "django.template.context_processors.request",
+                        ]
+                    },
+                }
+            ],
+            ROOT_URLCONF=None,
+        )
+
+    django.setup()
+
+    print("Defining a test model and a model admin with an invalid readonly_fields entry...")
+
+    class MyTestModel(models.Model):
+        name = models.CharField(max_length=100)
+
+        class Meta:
+            # Instead of a missing admin_checks module, just reuse the installed 'admin' label:
+            app_label = "admin"
+
+    class MyTestModelAdmin(admin.ModelAdmin):
+        # Deliberately reference an invalid field name
+        readonly_fields = ("non_existent_field",)
+
+    site.register(MyTestModel, MyTestModelAdmin)
+
+    buffer = io.StringIO()
+    try:
+        with redirect_stdout(buffer):
+            call_command("check", "--fail-level", "ERROR")
+        output = buffer.getvalue()
+        print("System checks have succeeded unexpectedly.")
+        print("Output was:", output)
+        sys.exit(1)
+    except SystemCheckError as e:
+        output = buffer.getvalue() + str(e)
+        print("Caught SystemCheckError as expected. Checking output for the new error message format...")
+        print("SystemCheckError output below:")
+        print(output)
+
+        # The test script wants an error containing "refers to 'non_existent_field'"
+        if re.search(r"refers to 'non_existent_field'", output):
+            print("Success: Found 'refers to 'non_existent_field'' in the error message.")
+            print("Exiting with code 0.")
+            sys.exit(0)
+        else:
+            print("Failure: Did NOT find 'refers to 'non_existent_field'' in the output.")
+            print("Exiting with code 1.")
+            sys.exit(1)
+
+if __name__ == "__main__":
+    main()
diff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py
index 4d171ed737..a98b4f6112 100644
--- a/tests/admin_checks/tests.py
+++ b/tests/admin_checks/tests.py
@@ -794,33 +794,33 @@ class SystemChecksTestCase(SimpleTestCase):
     def test_nonexistent_field(self):
         class SongAdmin(admin.ModelAdmin):
             readonly_fields = ("title", "nonexistent")
-
+    
         errors = SongAdmin(Song, AdminSite()).check()
         expected = [
             checks.Error(
-                "The value of 'readonly_fields[1]' is not a callable, an attribute "
-                "of 'SongAdmin', or an attribute of 'admin_checks.Song'.",
+                "The value of 'readonly_fields[1]' refers to 'nonexistent', which is not a callable, an attribute of 'SongAdmin', or an attribute of 'admin_checks.Song'.",
                 obj=SongAdmin,
                 id="admin.E035",
             )
         ]
         self.assertEqual(errors, expected)
+    
 
     def test_nonexistent_field_on_inline(self):
         class CityInline(admin.TabularInline):
             model = City
             readonly_fields = ["i_dont_exist"]  # Missing attribute
-
+    
         errors = CityInline(State, AdminSite()).check()
         expected = [
             checks.Error(
-                "The value of 'readonly_fields[0]' is not a callable, an attribute "
-                "of 'CityInline', or an attribute of 'admin_checks.City'.",
+                "The value of 'readonly_fields[0]' refers to 'i_dont_exist', which is not a callable, an attribute of 'CityInline', or an attribute of 'admin_checks.City'.",
                 obj=CityInline,
                 id="admin.E035",
             )
         ]
         self.assertEqual(errors, expected)
+    
 
     def test_readonly_fields_not_list_or_tuple(self):
         class SongAdmin(admin.ModelAdmin):
