diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index f30b523346..978e8c0e3d 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -1010,7 +1010,9 @@ class CharField(Field):
     def __init__(self, *args, db_collation=None, **kwargs):
         super().__init__(*args, **kwargs)
         self.db_collation = db_collation
-        self.validators.append(validators.MaxLengthValidator(self.max_length))
+        if self.max_length is not None:
+            self.validators.append(validators.MaxLengthValidator(self.max_length))
+    
 
     def check(self, **kwargs):
         databases = kwargs.get('databases') or []
diff --git a/test_value_charfield_bug.py b/test_value_charfield_bug.py
new file mode 100644
index 0000000000..cf0e9e790e
--- /dev/null
+++ b/test_value_charfield_bug.py
@@ -0,0 +1,26 @@
+#!/usr/bin/env python3
+
+import sys
+import traceback
+from django.db.models import Value
+
+def main():
+    print("Starting test of the Value('test') bug using CharField with None max_length.")
+    try:
+        x = Value("test")
+        y = x._resolve_output_field()
+        y.clean("1", None)
+    except TypeError as e:
+        print("BUG still present: A TypeError occurred:")
+        traceback.print_exc()
+        sys.exit(1)
+    except Exception as e:
+        print("An unexpected exception occurred:")
+        traceback.print_exc()
+        sys.exit(2)
+
+    print("No error occurred. It appears the bug is fixed. Exiting 0.")
+    sys.exit(0)
+
+if __name__ == "__main__":
+    main()
