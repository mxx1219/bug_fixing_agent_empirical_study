diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py
index 3a462f1c4c..eeef89d27f 100644
--- a/django/db/models/deletion.py
+++ b/django/db/models/deletion.py
@@ -231,10 +231,16 @@ class Collector:
     def related_objects(self, related, objs):
         """
         Get a QuerySet of objects related to `objs` via the relation `related`.
+        Only fetch PK and the foreign key field to avoid decoding other columns
+        that may contain invalid data or are not required for deletion.
         """
-        return related.related_model._base_manager.using(self.using).filter(
+        qs = related.related_model._base_manager.using(self.using).filter(
             **{"%s__in" % related.field.name: objs}
         )
+        pk_name = related.related_model._meta.pk.name
+        fk_attname = related.field.get_attname()
+        return qs.only(pk_name, fk_attname)
+    
 
     def instances_with_model(self):
         for model, instances in self.data.items():
diff --git a/test_delete_invalid_utf8.py b/test_delete_invalid_utf8.py
new file mode 100644
index 0000000000..45e9559223
--- /dev/null
+++ b/test_delete_invalid_utf8.py
@@ -0,0 +1,77 @@
+#!/usr/bin/env python3
+
+"""
+Test script for invalid UTF-8 data during .delete() cascade.
+Exits 0 if the bug is fixed (i.e., no UnicodeDecodeError),
+exits non-zero if the bug is present or something else fails.
+
+Usage:
+  python test_delete_invalid_utf8.py
+"""
+
+import sys
+import traceback
+
+def main():
+    print("Starting test: Attempting to reproduce invalid UTF-8 decode error with .delete() cascade.")
+    try:
+        import django
+        from django.conf import settings
+        from django.db import models, connection
+
+        # Configure an in-memory SQLite DB.
+        if not settings.configured:
+            settings.configure(
+                DEBUG=True,
+                SECRET_KEY="not-so-secret",
+                INSTALLED_APPS=[],
+                DATABASES={
+                    "default": {
+                        "ENGINE": "django.db.backends.sqlite3",
+                        "NAME": ":memory:",
+                    }
+                },
+            )
+        django.setup()
+
+        class Parent(models.Model):
+            class Meta:
+                app_label = 'delete_utf8_app'
+
+        class Child(models.Model):
+            # Disable actual DB-level foreign key constraint so that Python-level CASCADE is used.
+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE, db_constraint=False)
+            text = models.TextField()
+
+            class Meta:
+                app_label = 'delete_utf8_app'
+
+        # Dynamically create tables for these models.
+        with connection.schema_editor() as schema_editor:
+            schema_editor.create_model(Parent)
+            schema_editor.create_model(Child)
+
+        print("Creating test objects...")
+        p = Parent.objects.create()
+        c = Child.objects.create(parent=p, text="placeholder")
+
+        # Overwrite the child's text column with invalid bytes 0xED 0xA0 0x80
+        with connection.cursor() as cursor:
+            query = f"UPDATE {Child._meta.db_table} SET text=X'eda080' WHERE id={c.id}"
+            cursor.execute(query)
+
+        # Attempt .delete() from the parent side. On HEAD, that should lead to
+        # a UnicodeDecodeError if the code is fetching text.
+        print("Attempting Parent.delete() that cascades to Child with invalid data in text field...")
+        p.delete()
+
+        print("SUCCESS: No UnicodeDecodeError encountered - indicates the fix is present.")
+        sys.exit(0)
+
+    except Exception as ex:
+        print("ERROR: An exception occurred (likely means the bug is present if it's a UnicodeDecodeError).")
+        traceback.print_exc()
+        sys.exit(1)
+
+if __name__ == "__main__":
+    main()
