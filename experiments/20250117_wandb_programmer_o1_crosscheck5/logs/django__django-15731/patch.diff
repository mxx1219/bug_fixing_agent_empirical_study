diff --git a/django/db/models/manager.py b/django/db/models/manager.py
index e37e56cd17..58e1cc2d6b 100644
--- a/django/db/models/manager.py
+++ b/django/db/models/manager.py
@@ -80,18 +80,17 @@ class BaseManager:
 
     @classmethod
     def _get_queryset_methods(cls, queryset_class):
+        import inspect
+        from functools import wraps
+    
         def create_method(name, method):
+            @wraps(method)
             def manager_method(self, *args, **kwargs):
                 return getattr(self.get_queryset(), name)(*args, **kwargs)
-
-            manager_method.__name__ = method.__name__
-            manager_method.__doc__ = method.__doc__
             return manager_method
-
+    
         new_methods = {}
-        for name, method in inspect.getmembers(
-            queryset_class, predicate=inspect.isfunction
-        ):
+        for name, method in inspect.getmembers(queryset_class, predicate=inspect.isfunction):
             # Only copy missing methods.
             if hasattr(cls, name):
                 continue
@@ -103,6 +102,7 @@ class BaseManager:
             # Copy the method onto the manager.
             new_methods[name] = create_method(name, method)
         return new_methods
+    
 
     @classmethod
     def from_queryset(cls, queryset_class, class_name=None):
diff --git a/test_signature.py b/test_signature.py
new file mode 100644
index 0000000000..eb28a1b7ef
--- /dev/null
+++ b/test_signature.py
@@ -0,0 +1,44 @@
+import sys
+import inspect
+import django
+from django.conf import settings
+from django.db import models
+
+def main():
+    print("Configuring Django for test...")
+    if not settings.configured:
+        settings.configure(
+            INSTALLED_APPS=[
+                "django.contrib.contenttypes",
+            ],
+            DATABASES={
+                "default": {
+                    "ENGINE": "django.db.backends.sqlite3",
+                    "NAME": ":memory:",
+                }
+            },
+        )
+    django.setup()
+
+    print("Defining Person model for test...")
+
+    class Person(models.Model):
+        name = models.CharField(max_length=100)
+        class Meta:
+            app_label = "contenttypes"
+
+    print("Getting signature for Person.objects.bulk_create...")
+    sig = str(inspect.signature(Person.objects.bulk_create))
+    print(f'Signature is: {sig}')
+
+    expected = '(objs, batch_size=None, ignore_conflicts=False, update_conflicts=False, update_fields=None, unique_fields=None)'
+    print(f'Expected  : {expected}')
+    if sig == expected:
+        print("Signature matches expected. Test passing.")
+        sys.exit(0)
+    else:
+        print("Signature does NOT match expected. Test failing.")
+        sys.exit(1)
+
+if __name__ == "__main__":
+    main()
