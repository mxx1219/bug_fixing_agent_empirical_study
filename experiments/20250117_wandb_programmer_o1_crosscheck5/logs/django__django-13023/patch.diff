diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 0fd69059ee..282b4ce81e 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -1501,12 +1501,13 @@ class DecimalField(Field):
             return self.context.create_decimal_from_float(value)
         try:
             return decimal.Decimal(value)
-        except decimal.InvalidOperation:
+        except (decimal.InvalidOperation, TypeError):
             raise exceptions.ValidationError(
                 self.error_messages['invalid'],
                 code='invalid',
                 params={'value': value},
             )
+    
 
     def get_db_prep_save(self, value, connection):
         return connection.ops.adapt_decimalfield_value(self.to_python(value), self.max_digits, self.decimal_places)
diff --git a/test_dict_decimal.py b/test_dict_decimal.py
new file mode 100644
index 0000000000..fdb1c8807a
--- /dev/null
+++ b/test_dict_decimal.py
@@ -0,0 +1,24 @@
+import sys
+from django.core.exceptions import ValidationError
+from django.db.models.fields import DecimalField
+
+def main():
+    print("Running test_dict_decimal.py...")
+    df = DecimalField(max_digits=5, decimal_places=2)
+    bad_value = {"some": "dict"}
+    print("Testing DecimalField.to_python(...) with a dict:", bad_value)
+    try:
+        res = df.to_python(bad_value)
+        print("Error: we expected a ValidationError, but got no error. Returned:", res)
+        print("Failing test.")
+        sys.exit(1)
+    except ValidationError:
+        print("Success: got the expected ValidationError.")
+        sys.exit(0)
+    except Exception as e:
+        print("Error: got an unexpected exception type:", type(e).__name__, "-", str(e))
+        print("Failing test.")
+        sys.exit(2)
+
+if __name__ == "__main__":
+    main()
