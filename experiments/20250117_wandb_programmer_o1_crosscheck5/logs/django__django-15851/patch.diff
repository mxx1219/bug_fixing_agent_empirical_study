diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py
index 4c9bd63546..b93cd9b889 100644
--- a/django/db/backends/postgresql/client.py
+++ b/django/db/backends/postgresql/client.py
@@ -10,7 +10,7 @@ class DatabaseClient(BaseDatabaseClient):
     def settings_to_cmd_args_env(cls, settings_dict, parameters):
         args = [cls.executable_name]
         options = settings_dict.get("OPTIONS", {})
-
+    
         host = settings_dict.get("HOST")
         port = settings_dict.get("PORT")
         dbname = settings_dict.get("NAME")
@@ -22,7 +22,7 @@ class DatabaseClient(BaseDatabaseClient):
         sslrootcert = options.get("sslrootcert")
         sslcert = options.get("sslcert")
         sslkey = options.get("sslkey")
-
+    
         if not dbname and not service:
             # Connect to the default 'postgres' db.
             dbname = "postgres"
@@ -32,10 +32,12 @@ class DatabaseClient(BaseDatabaseClient):
             args += ["-h", host]
         if port:
             args += ["-p", str(port)]
-        if dbname:
-            args += [dbname]
+    
+        # Reorder so parameters come before db name.
         args.extend(parameters)
-
+        if dbname:
+            args.append(dbname)
+    
         env = {}
         if passwd:
             env["PGPASSWORD"] = str(passwd)
@@ -51,7 +53,9 @@ class DatabaseClient(BaseDatabaseClient):
             env["PGSSLKEY"] = str(sslkey)
         if passfile:
             env["PGPASSFILE"] = str(passfile)
+    
         return args, (env or None)
+    
 
     def runshell(self, parameters):
         sigint_handler = signal.getsignal(signal.SIGINT)
diff --git a/test_dbshell_extra_args.py b/test_dbshell_extra_args.py
new file mode 100644
index 0000000000..442a779eaf
--- /dev/null
+++ b/test_dbshell_extra_args.py
@@ -0,0 +1,66 @@
+import sys
+import subprocess
+from unittest.mock import patch
+import django
+from django.conf import settings
+from django.db import connections
+
+def main():
+    print("Step: Setting up minimal Django config for using the PostgreSQL backend.")
+    # Configure the default database to a dummy config; we won't actually connect because we'll mock subprocess calls.
+    settings.configure(
+        DATABASES={
+            "default": {
+                "ENGINE": "django.db.backends.postgresql",
+                "NAME": "fake_db",
+                "USER": "fake_user",
+                "PASSWORD": "fake_pass",
+                "HOST": "fake_host",
+                "PORT": "5432",
+            }
+        }
+    )
+    django.setup()
+
+    print("Step: Patching subprocess.run to capture arguments.")
+    with patch("subprocess.run") as mock_run:
+        mock_run.return_value.returncode = 0
+        mock_run.return_value.stdout = "fake stdout"
+        mock_run.return_value.stderr = "fake stderr"
+
+        user_params = ["-c", "SELECT 1;"]
+        print(f"Step: Calling runshell with parameters={user_params}")
+        connections["default"].client.runshell(user_params)
+
+        if not mock_run.called:
+            print("Error: subprocess.run was never called.")
+            sys.exit(1)
+
+        # Extract the arguments used for psql
+        args, kwargs = mock_run.call_args
+        ps_args = args[0]  # The list of command-line args to psql
+        print("Observed psql command arguments:", ps_args)
+
+        # We'll look for the database name "fake_db" and the parameter "-c"
+        try:
+            db_index = ps_args.index("fake_db")
+        except ValueError:
+            print("Error: 'fake_db' not found in the psql args.")
+            sys.exit(1)
+
+        try:
+            c_index = ps_args.index("-c")
+        except ValueError:
+            print("Error: '-c' not found in the psql args.")
+            sys.exit(1)
+
+        # If db_index is less than c_index, the db name occurs first -> old bug
+        if db_index < c_index:
+            print("Bug: The db name is placed before '-c'. This indicates the broken ordering!")
+            sys.exit(1)
+        else:
+            print("Success: '-c' is placed before the db name. The fix is in place!")
+            sys.exit(0)
+
+if __name__ == "__main__":
+    main()
diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py
index 02924d0bcc..38dba6471e 100644
--- a/tests/dbshell/test_postgresql.py
+++ b/tests/dbshell/test_postgresql.py
@@ -152,10 +152,13 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):
         )
 
     def test_parameters(self):
+        # Now that we place user-supplied parameters before the db name,
+        # we expect ["psql", "--help", "dbname"].
         self.assertEqual(
             self.settings_to_cmd_args_env({"NAME": "dbname"}, ["--help"]),
-            (["psql", "dbname", "--help"], None),
+            (["psql", "--help", "dbname"], None),
         )
+      
 
     @skipUnless(connection.vendor == "postgresql", "Requires a PostgreSQL connection")
     def test_sigint_handler(self):
