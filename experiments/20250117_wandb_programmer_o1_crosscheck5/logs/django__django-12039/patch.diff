diff --git a/django/db/backends/ddl_references.py b/django/db/backends/ddl_references.py
index 44e49806f8..b32549c914 100644
--- a/django/db/backends/ddl_references.py
+++ b/django/db/backends/ddl_references.py
@@ -83,12 +83,16 @@ class Columns(TableColumns):
 
     def __str__(self):
         def col_str(column, idx):
+            parts = [self.quote_name(column)]
             try:
-                return self.quote_name(column) + self.col_suffixes[idx]
+                suffix = self.col_suffixes[idx]
+                if suffix:
+                    parts.append(suffix)
             except IndexError:
-                return self.quote_name(column)
-
+                pass
+            return ' '.join(parts)
         return ', '.join(col_str(column, idx) for idx, column in enumerate(self.columns))
+    
 
 
 class IndexName(TableColumns):
@@ -110,16 +114,19 @@ class IndexColumns(Columns):
 
     def __str__(self):
         def col_str(column, idx):
-            # Index.__init__() guarantees that self.opclasses is the same
-            # length as self.columns.
-            col = '{} {}'.format(self.quote_name(column), self.opclasses[idx])
+            parts = [self.quote_name(column)]
+            opclass = self.opclasses[idx]
+            if opclass:
+                parts.append(opclass)
             try:
-                col = '{} {}'.format(col, self.col_suffixes[idx])
+                suffix = self.col_suffixes[idx]
+                if suffix:
+                    parts.append(suffix)
             except IndexError:
                 pass
-            return col
-
+            return ' '.join(parts)
         return ', '.join(col_str(column, idx) for idx, column in enumerate(self.columns))
+    
 
 
 class ForeignKeyName(TableColumns):
diff --git a/test_create_index_whitespace.py b/test_create_index_whitespace.py
new file mode 100644
index 0000000000..f4b3a2b67a
--- /dev/null
+++ b/test_create_index_whitespace.py
@@ -0,0 +1,46 @@
+import sys
+from django.db.backends.ddl_references import Columns, IndexColumns
+
+def main():
+    print("Testing Index/Columns whitespace issues...")
+
+    # CASE 1: Columns with col_suffixes=["DESC"] (no opclass).
+    # Expect '"name" DESC' not '"name"DESC'.
+    desc_columns = Columns(
+        table="schema_author",
+        columns=["name"],
+        quote_name=lambda x: f'"{x}"',
+        col_suffixes=["DESC"]
+    )
+    desc_str = str(desc_columns)
+    print("Output for descending field:", desc_str)
+    expected_desc = '"name" DESC'
+    if desc_str != expected_desc:
+        print(f"FAIL: Expected {expected_desc} but got {desc_str}")
+        sys.exit(1)
+    else:
+        print("PASS: Descending field is correct.")
+
+    # CASE 2: IndexColumns with opclasses=["text_pattern_ops"] but no ordering suffix.
+    # Expect '"name" text_pattern_ops' (no trailing space).
+    opclass_columns = IndexColumns(
+        table="schema_author",
+        columns=["name"],
+        quote_name=lambda x: f'"{x}"',
+        col_suffixes=[""],  # ascending order => suffix is empty
+        opclasses=["text_pattern_ops"]
+    )
+    opclass_str = str(opclass_columns)
+    print("Output for opclass no ordering:", opclass_str)
+    expected_opclass = '"name" text_pattern_ops'
+    if opclass_str != expected_opclass:
+        print(f"FAIL: Expected {expected_opclass} but got {opclass_str}")
+        sys.exit(1)
+    else:
+        print("PASS: Opclass no ordering is correct.")
+
+    print("All checks passed successfully.")
+    sys.exit(0)
+
+if __name__ == "__main__":
+    main()
