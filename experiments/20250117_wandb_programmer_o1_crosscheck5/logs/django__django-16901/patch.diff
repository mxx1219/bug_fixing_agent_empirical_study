diff --git a/django/db/models/sql/where.py b/django/db/models/sql/where.py
index aaab1730b7..b8ab82a716 100644
--- a/django/db/models/sql/where.py
+++ b/django/db/models/sql/where.py
@@ -6,6 +6,10 @@ from functools import reduce
 
 from django.core.exceptions import EmptyResultSet, FullResultSet
 from django.db.models.expressions import Case, When
+
+from django.db.models.functions import Mod
+
+
 from django.db.models.lookups import Exact
 from django.utils import tree
 from django.utils.functional import cached_property
@@ -112,34 +116,35 @@ class WhereNode(tree.Node):
         return where_node, having_node, qualify_node
 
     def as_sql(self, compiler, connection):
-        """
+        '''
         Return the SQL version of the where clause and the value to be
         substituted in. Return '', [] if this node matches everything,
         None, [] if this node is empty, and raise EmptyResultSet if this
         node can't match anything.
-        """
+        '''
         result = []
         result_params = []
         if self.connector == AND:
             full_needed, empty_needed = len(self.children), 1
         else:
             full_needed, empty_needed = 1, len(self.children)
-
+    
         if self.connector == XOR and not connection.features.supports_logical_xor:
             # Convert if the database doesn't support XOR:
             #   a XOR b XOR c XOR ...
             # to:
-            #   (a OR b OR c OR ...) AND (a + b + c + ...) == 1
+            #   (a OR b OR c OR ...) AND ((a + b + c + ...) mod 2) = 1
             lhs = self.__class__(self.children, OR)
             rhs_sum = reduce(
                 operator.add,
                 (Case(When(c, then=1), default=0) for c in self.children),
             )
-            rhs = Exact(1, rhs_sum)
+            rhs_mod = Mod(rhs_sum, 2)
+            rhs = Exact(1, rhs_mod)
             return self.__class__([lhs, rhs], AND, self.negated).as_sql(
                 compiler, connection
             )
-
+    
         for child in self.children:
             try:
                 sql, params = compiler.compile(child)
@@ -153,11 +158,6 @@ class WhereNode(tree.Node):
                     result_params.extend(params)
                 else:
                     full_needed -= 1
-            # Check if this node matches nothing or everything.
-            # First check the amount of full nodes and empty nodes
-            # to make this node empty/full.
-            # Now, check if this node is full/empty using the
-            # counts.
             if empty_needed == 0:
                 if self.negated:
                     raise FullResultSet
@@ -168,18 +168,16 @@ class WhereNode(tree.Node):
                     raise EmptyResultSet
                 else:
                     raise FullResultSet
-        conn = " %s " % self.connector
+        conn = ' %s ' % self.connector
         sql_string = conn.join(result)
         if not sql_string:
             raise FullResultSet
         if self.negated:
-            # Some backends (Oracle at least) need parentheses around the inner
-            # SQL in the negated case, even if the inner SQL contains just a
-            # single expression.
-            sql_string = "NOT (%s)" % sql_string
+            sql_string = 'NOT (%s)' % sql_string
         elif len(result) > 1 or self.resolved:
-            sql_string = "(%s)" % sql_string
+            sql_string = '(%s)' % sql_string
         return sql_string, result_params
+    
 
     def get_group_by_cols(self):
         cols = []
diff --git a/tests/test_xor_parity_bug.py b/tests/test_xor_parity_bug.py
new file mode 100644
index 0000000000..3dc9c27537
--- /dev/null
+++ b/tests/test_xor_parity_bug.py
@@ -0,0 +1,72 @@
+import sys
+
+print("Step 1: Configuring Django settings for an in-memory DB...")
+
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            "django.contrib.contenttypes",
+            "django.contrib.auth",
+        ],
+        DATABASES={
+            "default": {
+                "ENGINE": "django.db.backends.sqlite3",
+                "NAME": ":memory:",
+            }
+        },
+        SECRET_KEY="testsecretkey",
+    )
+
+print("Step 2: Setting up Django and monkey-patching features...")
+
+import django
+django.setup()
+from django.db import connection
+connection.features.supports_logical_xor = False
+
+from django.db import models
+
+print("Step 3: Defining a temporary model (with explicit app_label)...")
+
+class TempXorModel(models.Model):
+    number = models.IntegerField()
+    class Meta:
+        app_label = 'temp_xor_app'  # Required for ephemeral models
+
+print("Step 4: Creating table for TempXorModel in-memory...")
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(TempXorModel)
+
+print("Step 5: Inserting test rows id=1..5...")
+for i in range(1, 6):
+    TempXorModel.objects.create(number=i)
+
+print("Step 6: Performing the XOR-based filter using Q objects...")
+
+from django.db.models import Q
+
+# We want to ensure that the XOR fallback picks out rows for which
+# (number__lte=3) ^ (number__gte=2) ^ (number__lt=5) is true under parity logic:
+#   row1 => T,F,T => sum=2 => even => exclude
+#   row2 => T,T,T => sum=3 => odd  => include
+#   row3 => T,T,T => sum=3 => odd  => include
+#   row4 => F,T,T => sum=2 => even => exclude
+#   row5 => F,T,F => sum=1 => odd  => include
+# So the final set must be [2,3,5], i.e. length=3.
+
+qs = TempXorModel.objects.filter(
+    Q(number__lte=3) ^ Q(number__gte=2) ^ Q(number__lt=5)
+)
+actual = list(qs.values_list("number", flat=True))
+expected_set = {2, 3, 5}
+
+print(f"Returned rows: {actual}")
+print(f"Expected rows: {sorted(expected_set)}")
+
+if set(actual) == expected_set and len(actual) == 3:
+    print("PASS: XOR fallback yields the correct parity-based subset.")
+    sys.exit(0)
+else:
+    print("FAIL: XOR fallback did NOT yield the correct parity-based subset.")
+    sys.exit(1)
