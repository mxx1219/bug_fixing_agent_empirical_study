diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index 982816be3a..c0732bc1b7 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -122,9 +122,11 @@ class CreateModel(ModelOperation):
         return False
 
     def reduce(self, operation, app_label):
-        if (isinstance(operation, DeleteModel) and
-                self.name_lower == operation.name_lower and
-                not self.options.get("proxy", False)):
+        if (
+            isinstance(operation, DeleteModel)
+            and self.name_lower == operation.name_lower
+            and not self.options.get("proxy", False)
+        ):
             return []
         elif isinstance(operation, RenameModel) and self.name_lower == operation.old_name_lower:
             return [
@@ -136,7 +138,10 @@ class CreateModel(ModelOperation):
                     managers=self.managers,
                 ),
             ]
-        elif isinstance(operation, AlterModelOptions) and self.name_lower == operation.name_lower:
+        elif (
+            isinstance(operation, AlterModelOptions)
+            and self.name_lower == operation.name_lower
+        ):
             options = {**self.options, **operation.options}
             for key in operation.ALTER_OPTION_KEYS:
                 if key not in operation.options:
@@ -150,7 +155,10 @@ class CreateModel(ModelOperation):
                     managers=self.managers,
                 ),
             ]
-        elif isinstance(operation, AlterTogetherOptionOperation) and self.name_lower == operation.name_lower:
+        elif (
+            isinstance(operation, AlterTogetherOptionOperation)
+            and self.name_lower == operation.name_lower
+        ):
             return [
                 CreateModel(
                     self.name,
@@ -160,17 +168,23 @@ class CreateModel(ModelOperation):
                     managers=self.managers,
                 ),
             ]
-        elif isinstance(operation, AlterOrderWithRespectTo) and self.name_lower == operation.name_lower:
+        elif (
+            isinstance(operation, AlterOrderWithRespectTo)
+            and self.name_lower == operation.name_lower
+        ):
             return [
                 CreateModel(
                     self.name,
                     fields=self.fields,
-                    options={**self.options, 'order_with_respect_to': operation.order_with_respect_to},
+                    options={**self.options, "order_with_respect_to": operation.order_with_respect_to},
                     bases=self.bases,
                     managers=self.managers,
                 ),
             ]
-        elif isinstance(operation, FieldOperation) and self.name_lower == operation.model_name_lower:
+        elif (
+            isinstance(operation, FieldOperation)
+            and self.name_lower == operation.model_name_lower
+        ):
             if isinstance(operation, AddField):
                 return [
                     CreateModel(
@@ -196,17 +210,23 @@ class CreateModel(ModelOperation):
                 ]
             elif isinstance(operation, RemoveField):
                 options = self.options.copy()
-                for option_name in ('unique_together', 'index_together'):
+                for option_name in ("unique_together", "index_together"):
                     option = options.pop(option_name, None)
                     if option:
-                        option = set(filter(bool, (
-                            tuple(f for f in fields if f != operation.name_lower) for fields in option
-                        )))
+                        option = set(
+                            filter(
+                                bool,
+                                (
+                                    tuple(f for f in fields if f != operation.name_lower)
+                                    for fields in option
+                                ),
+                            )
+                        )
                         if option:
                             options[option_name] = option
-                order_with_respect_to = options.get('order_with_respect_to')
+                order_with_respect_to = options.get("order_with_respect_to")
                 if order_with_respect_to == operation.name_lower:
-                    del options['order_with_respect_to']
+                    del options["order_with_respect_to"]
                 return [
                     CreateModel(
                         self.name,
@@ -222,21 +242,27 @@ class CreateModel(ModelOperation):
                 ]
             elif isinstance(operation, RenameField):
                 options = self.options.copy()
-                for option_name in ('unique_together', 'index_together'):
+                for option_name in ("unique_together", "index_together"):
                     option = options.get(option_name)
                     if option:
                         options[option_name] = {
-                            tuple(operation.new_name if f == operation.old_name else f for f in fields)
+                            tuple(
+                                operation.new_name if f == operation.old_name else f
+                                for f in fields
+                            )
                             for fields in option
                         }
-                order_with_respect_to = options.get('order_with_respect_to')
+                order_with_respect_to = options.get("order_with_respect_to")
                 if order_with_respect_to == operation.old_name:
-                    options['order_with_respect_to'] = operation.new_name
+                    options["order_with_respect_to"] = operation.new_name
                 return [
                     CreateModel(
                         self.name,
                         fields=[
-                            (operation.new_name if n == operation.old_name else n, v)
+                            (
+                                operation.new_name if n == operation.old_name else n,
+                                v,
+                            )
                             for n, v in self.fields
                         ],
                         options=options,
@@ -245,6 +271,8 @@ class CreateModel(ModelOperation):
                     ),
                 ]
         return super().reduce(operation, app_label)
+    
+    
 
 
 class DeleteModel(ModelOperation):
@@ -320,13 +348,19 @@ class RenameModel(ModelOperation):
         new_model = to_state.apps.get_model(app_label, self.new_name)
         if self.allow_migrate_model(schema_editor.connection.alias, new_model):
             old_model = from_state.apps.get_model(app_label, self.old_name)
-            # Move the main table
+            old_db_table = old_model._meta.db_table
+            new_db_table = new_model._meta.db_table
+            # Skip the whole rename process if db_table hasn't changed.
+            if old_db_table == new_db_table:
+                return
+    
+            # Move the main table (rename).
             schema_editor.alter_db_table(
                 new_model,
-                old_model._meta.db_table,
-                new_model._meta.db_table,
+                old_db_table,
+                new_db_table,
             )
-            # Alter the fields pointing to us
+            # Alter the fields pointing to us.
             for related_object in old_model._meta.related_objects:
                 if related_object.related_model == old_model:
                     model = new_model
@@ -359,13 +393,13 @@ class RenameModel(ModelOperation):
                     old_m2m_model._meta.db_table,
                     new_m2m_model._meta.db_table,
                 )
-                # Rename the column in the M2M table that's based on this
-                # model's name.
+                # Rename the column in the M2M table that's based on this model's name.
                 schema_editor.alter_field(
                     new_m2m_model,
                     old_m2m_model._meta.get_field(old_model._meta.model_name),
                     new_m2m_model._meta.get_field(new_model._meta.model_name),
                 )
+    
 
     def database_backwards(self, app_label, schema_editor, from_state, to_state):
         self.new_name_lower, self.old_name_lower = self.old_name_lower, self.new_name_lower
diff --git a/manage.py b/manage.py
new file mode 100644
index 0000000000..b812e997de
--- /dev/null
+++ b/manage.py
@@ -0,0 +1,11 @@
+#!/usr/bin/env python
+import os
+import sys
+
+if __name__ == "__main__":
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "test_settings")
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError("Couldn't import Django. Is it installed and available on your PYTHONPATH environment variable?") from exc
+    execute_from_command_line(sys.argv)
diff --git a/test_app/__init__.py b/test_app/__init__.py
new file mode 100644
index 0000000000..1b622a94b2
--- /dev/null
+++ b/test_app/__init__.py
@@ -0,0 +1 @@
+# empty file to make this a Python package
\ No newline at end of file
diff --git a/test_app/apps.py b/test_app/apps.py
new file mode 100644
index 0000000000..b00435505e
--- /dev/null
+++ b/test_app/apps.py
@@ -0,0 +1,4 @@
+from django.apps import AppConfig
+
+class TestAppConfig(AppConfig):
+    name = "test_app"
diff --git a/test_app/migrations/0001_initial.py b/test_app/migrations/0001_initial.py
new file mode 100644
index 0000000000..32e45b1caa
--- /dev/null
+++ b/test_app/migrations/0001_initial.py
@@ -0,0 +1,18 @@
+from django.db import migrations, models
+
+class Migration(migrations.Migration):
+    initial = True
+    dependencies = []
+
+    operations = [
+        migrations.CreateModel(
+            name="MyModel",
+            fields=[
+                ("id", models.AutoField(primary_key=True)),
+                ("name", models.CharField(max_length=50)),
+            ],
+            options={
+                "db_table": "mytable",
+            },
+        ),
+    ]
diff --git a/test_app/migrations/0002_rename.py b/test_app/migrations/0002_rename.py
new file mode 100644
index 0000000000..c534ecb9a6
--- /dev/null
+++ b/test_app/migrations/0002_rename.py
@@ -0,0 +1,12 @@
+from django.db import migrations
+
+class Migration(migrations.Migration):
+    dependencies = [
+        ("test_app", "0001_initial"),
+    ]
+    operations = [
+        migrations.RenameModel(
+            old_name="MyModel",
+            new_name="MyModelRenamed",
+        )
+    ]
diff --git a/test_app/migrations/__init__.py b/test_app/migrations/__init__.py
new file mode 100644
index 0000000000..5d98bd6776
--- /dev/null
+++ b/test_app/migrations/__init__.py
@@ -0,0 +1 @@
+# empty migrations package
\ No newline at end of file
diff --git a/test_rename_model_with_same_db_table.py b/test_rename_model_with_same_db_table.py
new file mode 100644
index 0000000000..866809b285
--- /dev/null
+++ b/test_rename_model_with_same_db_table.py
@@ -0,0 +1,49 @@
+import sys
+import os
+import subprocess
+
+def run_cmd(cmd):
+    print(f"Running: {cmd}")
+    result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
+    print("Return code:", result.returncode)
+    print("stdout:", result.stdout)
+    print("stderr:", result.stderr)
+    return result.returncode, result.stdout, result.stderr
+
+def main():
+    # Ensure a clean slate by removing any leftover DB file
+    if os.path.exists("testdb.sqlite3"):
+        print("Removing stale testdb.sqlite3")
+        os.remove("testdb.sqlite3")
+
+    print("Step: Migrate test_app to 0001_initial.")
+    code, out, err = run_cmd("DJANGO_SETTINGS_MODULE=test_settings python manage.py migrate test_app 0001 --no-input")
+    if code != 0:
+        print("FAIL: Could not apply 0001_initial.")
+        sys.exit(2)
+
+    print("Step: Insert a row into mytable pre-rename.")
+    cmd_insert = "DJANGO_SETTINGS_MODULE=test_settings python manage.py shell -c \"from django.db import connection; c=connection.cursor(); c.execute('INSERT INTO mytable (id, name) VALUES (?, ?)', [1, 'before_rename']); connection.commit(); print('Inserted row.');\""
+    code, out, err = run_cmd(cmd_insert)
+    if code != 0:
+        print("FAIL: Could not insert row before rename.")
+        sys.exit(3)
+
+    print("Step: Migrate test_app to 0002_rename.")
+    code, out, err = run_cmd("DJANGO_SETTINGS_MODULE=test_settings python manage.py migrate test_app 0002 --no-input")
+    if code != 0:
+        print("FAIL: Could not apply 0002_rename.")
+        sys.exit(4)
+
+    print("Step: Checking row in mytable after rename.")
+    cmd_check = "DJANGO_SETTINGS_MODULE=test_settings python manage.py shell -c \"from django.db import connection; c=connection.cursor(); c.execute('SELECT name FROM mytable WHERE id=?', [1]); row=c.fetchone(); print('Row:', row); import sys; sys.exit(0 if (row and row[0]=='before_rename') else 1);\""
+    code, out, err = run_cmd(cmd_check)
+    if code != 0:
+        print("FAIL: Row missing or mismatched. Table was re-created.")
+        sys.exit(1)
+
+    print("PASS: Row is intact, rename with same db_table is a no-op.")
+    sys.exit(0)
+
+if __name__ == '__main__':
+    main()
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..0a742cd9e6
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,14 @@
+SECRET_KEY = 'test'
+INSTALLED_APPS = [
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'test_app.apps.TestAppConfig',
+]
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        # Use a file-based database so data persists between migrations in separate processes.
+        'NAME': 'testdb.sqlite3',
+    }
+}
+USE_TZ = False
diff --git a/testdb.sqlite3 b/testdb.sqlite3
new file mode 100644
index 0000000000..73e99153fa
Binary files /dev/null and b/testdb.sqlite3 differ
