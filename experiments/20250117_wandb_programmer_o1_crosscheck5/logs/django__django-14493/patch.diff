diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py
index f957a667b2..ea3459da9c 100644
--- a/django/contrib/staticfiles/storage.py
+++ b/django/contrib/staticfiles/storage.py
@@ -224,61 +224,64 @@ class HashedFilesMixin:
     def post_process(self, paths, dry_run=False, **options):
         """
         Post process the given dictionary of files (called from collectstatic).
-
+    
         Processing is actually two separate operations:
-
+    
         1. renaming files to include a hash of their content for cache-busting,
            and copying those files to the target storage.
         2. adjusting files which contain references to other files so they
            refer to the cache-busting filenames.
-
+    
         If either of these are performed on a file, then that file is considered
         post-processed.
         """
         # don't even dare to process the files if we're in dry run mode
         if dry_run:
             return
-
+    
         # where to store the new paths
         hashed_files = {}
-
+    
         # build a list of adjustable files
         adjustable_paths = [
             path for path in paths
             if matches_patterns(path, self._patterns)
         ]
-
+    
         # Adjustable files to yield at end, keyed by the original path.
         processed_adjustable_paths = {}
-
-        # Do a single pass first. Post-process all files once, yielding not
-        # adjustable files and exceptions, and collecting adjustable files.
+    
+        # Do a single pass first. Post-process all files once, yielding non-adjustable
+        # files and exceptions, and collecting adjustable files.
         for name, hashed_name, processed, _ in self._post_process(paths, adjustable_paths, hashed_files):
             if name not in adjustable_paths or isinstance(processed, Exception):
                 yield name, hashed_name, processed
             else:
                 processed_adjustable_paths[name] = (name, hashed_name, processed)
-
+    
         paths = {path: paths[path] for path in adjustable_paths}
-
+    
+        # Initialize substitutions so itâ€™s defined even if the loop below never runs.
+        substitutions = False
         for i in range(self.max_post_process_passes):
             substitutions = False
             for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):
                 # Overwrite since hashed_name may be newer.
                 processed_adjustable_paths[name] = (name, hashed_name, processed)
                 substitutions = substitutions or subst
-
+    
             if not substitutions:
                 break
-
+    
         if substitutions:
             yield 'All', None, RuntimeError('Max post-process passes exceeded.')
-
+    
         # Store the processed paths
         self.hashed_files.update(hashed_files)
-
+    
         # Yield adjustable files with final, hashed name.
         yield from processed_adjustable_paths.values()
+    
 
     def _post_process(self, paths, adjustable_paths, hashed_files):
         # Sort the files by directory level
diff --git a/manage_0.py b/manage_0.py
new file mode 100644
index 0000000000..2d8300ce59
--- /dev/null
+++ b/manage_0.py
@@ -0,0 +1,8 @@
+#!/usr/bin/env python
+import os
+import sys
+
+if __name__ == "__main__":
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "test_settings_with_0")
+    from django.core.management import execute_from_command_line
+    execute_from_command_line(sys.argv)
diff --git a/test_max_post_process_passes_0.py b/test_max_post_process_passes_0.py
new file mode 100644
index 0000000000..ab659a4e8d
--- /dev/null
+++ b/test_max_post_process_passes_0.py
@@ -0,0 +1,17 @@
+import subprocess
+import sys
+import os
+
+def main():
+    print("Testing collectstatic with max_post_process_passes=0...")
+    cmd = ["python", "manage_0.py", "collectstatic", "--noinput"]
+    try:
+        subprocess.run(cmd, check=True)
+        print("Collectstatic succeeded. Bug is presumably fixed. Exiting with code 0.")
+        sys.exit(0)
+    except subprocess.CalledProcessError as e:
+        print("Collectstatic failed. Bug still present. Exiting with code 1.")
+        sys.exit(1)
+
+if __name__ == "__main__":
+    main()
diff --git a/test_settings_with_0.py b/test_settings_with_0.py
new file mode 100644
index 0000000000..6f402aebb0
--- /dev/null
+++ b/test_settings_with_0.py
@@ -0,0 +1,19 @@
+SECRET_KEY = "secretkey"
+ALLOWED_HOSTS = ["*"]
+DEBUG = True
+INSTALLED_APPS = [
+    "django.contrib.contenttypes",
+    "django.contrib.auth",
+    "django.contrib.staticfiles",
+]
+MIDDLEWARE = []
+ROOT_URLCONF = None
+STATIC_URL = "/static/"
+STATIC_ROOT = "/tmp/static"
+
+from django.contrib.staticfiles.storage import ManifestStaticFilesStorage
+
+class MyManifestStaticFilesStorage(ManifestStaticFilesStorage):
+    max_post_process_passes = 0
+
+STATICFILES_STORAGE = "test_settings_with_0.MyManifestStaticFilesStorage"
