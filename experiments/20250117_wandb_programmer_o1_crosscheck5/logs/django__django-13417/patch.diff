diff --git a/django/db/models/query.py b/django/db/models/query.py
index 85cd8311a7..31eb54970c 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -1219,15 +1219,18 @@ class QuerySet:
         """
         Return True if the QuerySet is ordered -- i.e. has an order_by()
         clause or a default ordering on the model (or is empty).
+        However, if the query is grouped (via an aggregate), default
+        ordering is not actually applied by Django, so ignore it.
         """
         if isinstance(self, EmptyQuerySet):
             return True
         if self.query.extra_order_by or self.query.order_by:
             return True
-        elif self.query.default_ordering and self.query.get_meta().ordering:
+        elif self.query.default_ordering and self.query.get_meta().ordering and not self.query.group_by:
             return True
         else:
             return False
+    
 
     @property
     def db(self):
diff --git a/test_ordered_property.py b/test_ordered_property.py
new file mode 100644
index 0000000000..4e5d66daed
--- /dev/null
+++ b/test_ordered_property.py
@@ -0,0 +1,53 @@
+import sys
+import os
+import django
+from django.conf import settings
+from django.db import models, connection
+
+BASE_DIR = os.path.dirname(os.path.abspath(__file__))
+
+settings.configure(
+    DEBUG=True,
+    INSTALLED_APPS=[],  # We'll avoid migrations by not listing an app
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    SECRET_KEY='test',
+)
+
+django.setup()
+
+# Define a model with Meta.ordering in a fake 'dummy' app_label
+class Foo(models.Model):
+    name = models.CharField(max_length=255)
+
+    class Meta:
+        app_label = 'dummy'
+        ordering = ['name']
+
+# Directly create the table for Foo, skipping migrations
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Foo)
+
+# Insert test data
+Foo.objects.create(name='Zed')
+Foo.objects.create(name='Alpha')
+
+# Now do a grouped query with annotate.
+from django.db.models import Count
+qs = Foo.objects.annotate(Count('pk')).all()
+
+print("Testing QuerySet.ordered on a GROUP BY query with model Meta ordering.")
+print(f"qs.query: {qs.query}")
+print(f"qs.ordered: {qs.ordered}")
+
+# We expect no ORDER BY in SQL, so .ordered should be False. On HEAD, it erroneously is True (bug).
+if qs.ordered:
+    print("Bug is present! QuerySet.ordered is True, but should be False.")
+    sys.exit(1)
+else:
+    print("Test PASSED (qs.ordered is False).")
+    sys.exit(0)
