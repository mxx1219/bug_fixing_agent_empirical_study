diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 5e7b23f9a0..a24d11b0de 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -582,18 +582,20 @@ class ModelAdmin(BaseModelAdmin):
 
     def get_inline_instances(self, request, obj=None):
         inline_instances = []
-        for inline_class in self.inlines:
+        for inline_class in self.get_inlines(request, obj):
             inline = inline_class(self.model, self.admin_site)
             if request:
-                if not (inline.has_view_or_change_permission(request, obj) or
-                        inline.has_add_permission(request, obj) or
-                        inline.has_delete_permission(request, obj)):
+                if not (
+                    inline.has_view_or_change_permission(request, obj)
+                    or inline.has_add_permission(request, obj)
+                    or inline.has_delete_permission(request, obj)
+                ):
                     continue
                 if not inline.has_add_permission(request, obj):
                     inline.max_num = 0
             inline_instances.append(inline)
-
         return inline_instances
+    
 
     def get_urls(self):
         from django.urls import path
@@ -1955,6 +1957,13 @@ class ModelAdmin(BaseModelAdmin):
             formsets.append(formset)
             inline_instances.append(inline)
         return formsets, inline_instances
+    def get_inlines(self, request, obj=None):
+        """
+        Return the list of inline ModelAdmin classes for use on the admin form.
+        By default, returns self.inlines.
+        """
+        return self.inlines
+    
 
 
 class InlineModelAdmin(BaseModelAdmin):
diff --git a/test_dynamic_inlines.py b/test_dynamic_inlines.py
new file mode 100644
index 0000000000..aedf4a3a15
--- /dev/null
+++ b/test_dynamic_inlines.py
@@ -0,0 +1,56 @@
+import sys
+from django.conf import settings
+
+# Minimal Django settings so we can import django.contrib.* code.
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            "django.contrib.admin",
+            "django.contrib.auth",
+            "django.contrib.contenttypes",
+        ],
+        DATABASES={"default": {"ENGINE": "django.db.backends.sqlite3", "NAME": ":memory:"}},
+        MIDDLEWARE=[],
+        SECRET_KEY="testsecretkey",
+    )
+
+import django
+django.setup()
+
+from django.contrib.admin import ModelAdmin, StackedInline
+from django.contrib.admin.sites import AdminSite
+from django.contrib.contenttypes.models import ContentType
+
+class FakeInlineA(StackedInline):
+    model = ContentType
+
+class FakeInlineB(StackedInline):
+    model = ContentType
+
+class MyAdmin(ModelAdmin):
+    # By default, set inlines to [FakeInlineA].
+    inlines = [FakeInlineA]
+
+    # If ModelAdmin properly calls get_inlines(),
+    # we should see [FakeInlineB] instead of [FakeInlineA].
+    def get_inlines(self, request, obj=None):
+        return [FakeInlineB]
+
+def main():
+    print("STEP: Creating MyAdmin and calling get_inline_instances() ...")
+    test_site = AdminSite()
+    admin = MyAdmin(ContentType, test_site)  # Provide a real model & site.
+    inline_instances = admin.get_inline_instances(request=None, obj=None)
+    print("STEP: Inspecting inline classes ...")
+    inline_classes = [type(i) for i in inline_instances]
+    print("RESULT: inline_classes = {}".format(inline_classes))
+    # If the new hook is called, inline_classes should contain FakeInlineB.
+    if any(cls == FakeInlineB for cls in inline_classes):
+        print("PASS: get_inlines is used by get_inline_instances.")
+        sys.exit(0)
+    else:
+        print("FAIL: get_inlines is not used by get_inline_instances.")
+        sys.exit(1)
+
+if __name__ == "__main__":
+    main()
