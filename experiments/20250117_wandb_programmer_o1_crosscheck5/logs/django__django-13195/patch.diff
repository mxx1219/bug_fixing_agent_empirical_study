diff --git a/django/http/response.py b/django/http/response.py
index e00bcacefb..9f07d2da26 100644
--- a/django/http/response.py
+++ b/django/http/response.py
@@ -213,11 +213,19 @@ class HttpResponseBase:
     def delete_cookie(self, key, path='/', domain=None):
         # Most browsers ignore the Set-Cookie header if the cookie name starts
         # with __Host- or __Secure- and the cookie doesn't use the secure flag.
+        from django.conf import settings
         secure = key.startswith(('__Secure-', '__Host-'))
         self.set_cookie(
-            key, max_age=0, path=path, domain=domain, secure=secure,
+            key,
+            max_age=0,
+            path=path,
             expires='Thu, 01 Jan 1970 00:00:00 GMT',
+            domain=domain if domain is not None else settings.SESSION_COOKIE_DOMAIN,
+            secure=settings.SESSION_COOKIE_SECURE or secure,
+            httponly=settings.SESSION_COOKIE_HTTPONLY or None,
+            samesite=settings.SESSION_COOKIE_SAMESITE,
         )
+    
 
     # Common methods used by subclasses
 
diff --git a/test_delete_cookie_samesite.py b/test_delete_cookie_samesite.py
new file mode 100644
index 0000000000..2feebac693
--- /dev/null
+++ b/test_delete_cookie_samesite.py
@@ -0,0 +1,48 @@
+import sys
+import os
+import django
+from django.conf import settings
+from django.http import HttpResponse
+
+def main():
+    print("Running test_delete_cookie_samesite.py (two-response version)")
+    if not settings.configured:
+        settings.configure(
+            SECRET_KEY="testsecret",
+            ALLOWED_HOSTS=["*"],
+            SESSION_COOKIE_SECURE=False,
+            SESSION_COOKIE_SAMESITE="None",
+        )
+    django.setup()
+
+    # 1) Make response1, set messages cookie with SameSite=None
+    response1 = HttpResponse()
+    response1.set_cookie("messages", "testvalue", samesite="None")
+    cookie_header_1 = response1.cookies["messages"].OutputString()
+    print("Response1 cookie header:", cookie_header_1)
+
+    # 2) Emulate the client storing this cookie, so that next response is "fresh"
+    # In a real scenario, the second response won't share the same 'cookies' dict
+    # We'll simply create a brand new HttpResponse
+    response2 = HttpResponse()
+    # 3) Now delete the cookie in this *fresh* response
+    response2.delete_cookie("messages")
+    if "messages" not in response2.cookies:
+        print("Fail: No 'messages' cookie was set at all when calling delete_cookie on a fresh response.")
+        sys.exit(1)
+
+    cookie_header_2 = response2.cookies["messages"].OutputString()
+    print("Response2 cookie header (after delete_cookie):", cookie_header_2)
+
+    # The problem is: HEAD's code does NOT preserve SameSite in delete_cookie
+    # We expect to see "SameSite=None" if it truly preserves it.
+    # On unpatched HEAD, we do NOT see "SameSite=None", so test fails.
+    if "SameSite=None" in cookie_header_2:
+        print("Test passed (SameSite=None preserved) - indicates a fixed version.")
+        sys.exit(0)
+    else:
+        print("Test FAIL (SameSite=None missing) - indicates HEAD is still broken.")
+        sys.exit(1)
+
+if __name__ == "__main__":
+    main()
