diff --git a/django/db/backends/mysql/schema.py b/django/db/backends/mysql/schema.py
index 562b209eef..f3b9e59d1e 100644
--- a/django/db/backends/mysql/schema.py
+++ b/django/db/backends/mysql/schema.py
@@ -166,8 +166,31 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):
         return new_type
 
     def _alter_column_type_sql(self, model, old_field, new_field, new_type):
+        # Preserve null status from the old field.
         new_type = self._set_field_new_type_null_status(old_field, new_type)
+    
+        # Attempt to detect if we need to apply a COLLATE clause:
+        # 1) If this field itself has db_collation,
+        # 2) If this field is a foreign key referencing a field with db_collation,
+        #    and the underlying column is a character-based field type.
+        #
+        # Only apply if the type is char-based or text-based, since MySQL only applies collations to text columns.
+        my_collation = getattr(new_field, 'db_collation', None)
+        referenced_collation = None
+        if hasattr(new_field, 'remote_field') and new_field.remote_field:
+            target_field = new_field.remote_field.model._meta.get_field(new_field.remote_field.field_name)
+            referenced_collation = getattr(target_field, 'db_collation', None)
+    
+        # If we already see 'collate' in new_type (case-insensitive), skip adding again.
+        lower_type = new_type.lower()
+        if ('char' in lower_type or 'text' in lower_type or 'enum' in lower_type) and 'collate' not in lower_type:
+            chosen_collation = my_collation or referenced_collation
+            if chosen_collation:
+                new_type += f' COLLATE {chosen_collation}'
+    
+        # Proceed with the normal alter column type flow.
         return super()._alter_column_type_sql(model, old_field, new_field, new_type)
+    
 
     def _rename_field_sql(self, table, old_field, new_field, new_type):
         new_type = self._set_field_new_type_null_status(old_field, new_type)
diff --git a/tests/test_dbcollation_fks.py b/tests/test_dbcollation_fks.py
new file mode 100644
index 0000000000..67fc78deb1
--- /dev/null
+++ b/tests/test_dbcollation_fks.py
@@ -0,0 +1,121 @@
+#!/usr/bin/env python3
+import sys
+import os
+import subprocess
+import tempfile
+import shutil
+
+def main():
+    print("Step 1: Setting up test environment.")
+    tmpdir = tempfile.mkdtemp(prefix="test_dbcollation_fks_")
+    print("Created temp dir:", tmpdir)
+
+    project_dir = os.path.join(tmpdir, "testproj")
+    app_dir = os.path.join(project_dir, "test_dbcollation_fks_app")
+    os.makedirs(app_dir)
+    print("Created project dir:", project_dir)
+    print("Created app dir:", app_dir)
+
+    # Create manage.py
+    with open(os.path.join(project_dir, "manage.py"), "w") as f:
+        f.write(
+            "#!/usr/bin/env python3\n"
+            "import sys\n"
+            "import os\n"
+            "if __name__ == '__main__':\n"
+            "    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'testproj.settings')\n"
+            "    from django.core.management import execute_from_command_line\n"
+            "    execute_from_command_line(sys.argv)\n"
+        )
+
+    # Mark __init__.py
+    with open(os.path.join(project_dir, "__init__.py"), "w") as f:
+        f.write("")
+    with open(os.path.join(app_dir, "__init__.py"), "w") as f:
+        f.write("")
+
+    # Create settings.py (with TEMPLATES)
+    with open(os.path.join(project_dir, "settings.py"), "w") as f:
+        f.write(
+            'SECRET_KEY = "fake-key"\n'
+            'INSTALLED_APPS = [\n'
+            '    "django.contrib.contenttypes",\n'
+            '    "django.contrib.auth",\n'
+            '    "test_dbcollation_fks_app",\n'
+            ']\n'
+            'DATABASES = {\n'
+            '    "default": {\n'
+            '        "ENGINE": "django.db.backends.mysql",\n'
+            '        "NAME": "test_db",\n'
+            '        "USER": "root",\n'
+            '        "HOST": "localhost",\n'
+            '        "PORT": "3306",\n'
+            '    }\n'
+            '}\n'
+            'TEMPLATES = [\n'
+            '    {\n'
+            '        "BACKEND": "django.template.backends.django.DjangoTemplates",\n'
+            '        "APP_DIRS": True,\n'
+            '        "OPTIONS": {},\n'
+            '    },\n'
+            ']\n'
+            'MIDDLEWARE = []\n'
+            'ROOT_URLCONF = "testproj.urls"\n'
+        )
+
+    # Create a dummy urls.py
+    with open(os.path.join(project_dir, "urls.py"), "w") as f:
+        f.write("urlpatterns = []\n")
+
+    # Create models.py
+    with open(os.path.join(app_dir, "models.py"), "w") as f:
+        f.write(
+            "from django.db import models\n\n"
+            "class MyAccount(models.Model):\n"
+            "    id = models.CharField(primary_key=True, db_collation='utf8_bin', max_length=22)\n"
+            "    name = models.CharField(max_length=100)\n\n"
+            "class MyAddress(models.Model):\n"
+            "    id = models.CharField(primary_key=True, db_collation='utf8_bin', max_length=22)\n"
+            "    account = models.ForeignKey(MyAccount, on_delete=models.CASCADE)\n"
+        )
+
+    manage_py = os.path.join(project_dir, "manage.py")
+
+    def run_cmd(cmd):
+        # Insert tmpdir into PYTHONPATH so that "testproj" is importable.
+        env = os.environ.copy()
+        existing_pythonpath = env.get("PYTHONPATH", "")
+        env["PYTHONPATH"] = tmpdir + ((":" + existing_pythonpath) if existing_pythonpath else "")
+        p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, env=env)
+        out, err = p.communicate()
+        return p.returncode, out, err
+
+    print("Step 2: Making migrations...")
+    ret, out, err = run_cmd([sys.executable, manage_py, "makemigrations", "test_dbcollation_fks_app", "--noinput"])
+    if ret != 0:
+        print("makemigrations failed!")
+        print("stdout:\n", out)
+        print("stderr:\n", err)
+        sys.exit(2)
+
+    print("Step 3: Sqlmigrate (inspect generated SQL).")
+    ret, out, err = run_cmd([sys.executable, manage_py, "sqlmigrate", "test_dbcollation_fks_app", "0001"])
+    if ret != 0:
+        print("sqlmigrate failed!")
+        print("stdout:\n", out)
+        print("stderr:\n", err)
+        sys.exit(2)
+
+    print("SQL from sqlmigrate:\n", out)
+
+    # For a correct fix, we expect to see something like:
+    # "MODIFY `account_id` varchar(22) NOT NULL COLLATE `utf8_bin`"
+    if "MODIFY `account_id` varchar(22) NOT NULL COLLATE `utf8_bin`" in out:
+        print("SUCCESS: Collation is applied to the referencing column. Exiting with 0.")
+        sys.exit(0)
+    else:
+        print("FAILURE: Collation not found in referencing column. Exiting with 1.")
+        sys.exit(1)
+
+if __name__ == "__main__":
+    main()
