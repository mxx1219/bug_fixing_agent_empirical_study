+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   django/db/models/sql/query.py

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	test_filteredrelation_bug.py
	testapp/

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit 59ab3fd0e9e606d7f0f7ca26609c06ee679ece97
Author: Carlton Gibson <carlton.gibson@noumenal.es>
Date:   Thu Mar 24 11:09:55 2022 +0100

    Refs #32365 -- Deprecated django.utils.timezone.utc.

diff --git a/django/utils/timezone.py b/django/utils/timezone.py
index 33c0440095..d22e358538 100644
--- a/django/utils/timezone.py
+++ b/django/utils/timezone.py
@@ -19,7 +19,7 @@ from asgiref.local import Local
 from django.conf import settings
 from django.utils.deprecation import RemovedInDjango50Warning
 
-__all__ = [
+__all__ = [  # noqa for utc RemovedInDjango50Warning.
     "utc",
     "get_fixed_timezone",
     "get_default_timezone",
@@ -41,7 +41,18 @@ __all__ = [
 NOT_PASSED = object()
 
 
-utc = timezone.utc
+def __getattr__(name):
+    if name != "utc":
+        raise AttributeError(f"module {__name__!r} has no attribute {name!r}")
+
+    warnings.warn(
+        "The django.utils.timezone.utc alias is deprecated. "
+        "Please update your code to use datetime.timezone.utc instead.",
+        RemovedInDjango50Warning,
+        stacklevel=2,
+    )
+
+    return timezone.utc
 
 
 def get_fixed_timezone(offset):
@@ -339,3 +350,11 @@ def _datetime_ambiguous_or_imaginary(dt, tz):
             return False
 
     return tz.utcoffset(dt.replace(fold=not dt.fold)) != tz.utcoffset(dt)
+
+
+# RemovedInDjango50Warning.
+_DIR = dir()
+
+
+def __dir__():
+    return sorted([*_DIR, "utc"])
diff --git a/docs/internals/deprecation.txt b/docs/internals/deprecation.txt
index 31eb732297..ab147725c1 100644
--- a/docs/internals/deprecation.txt
+++ b/docs/internals/deprecation.txt
@@ -94,6 +94,9 @@ details on these changes.
   ``django.contrib.auth.views.LogoutView`` and
   ``django.contrib.auth.views.logout_then_login()`` will be removed.
 
+* The ``django.utils.timezone.utc`` alias to ``datetime.timezone.utc`` will be
+  removed.
+
 .. _deprecation-removed-in-4.1:
 
 4.1
diff --git a/docs/ref/utils.txt b/docs/ref/utils.txt
index 8c12294cd6..a2be25f168 100644
--- a/docs/ref/utils.txt
+++ b/docs/ref/utils.txt
@@ -843,6 +843,11 @@ appropriate entities.
 
     :class:`~datetime.tzinfo` instance that represents UTC.
 
+    .. deprecated:: 4.1
+
+        This is an alias to :attr:`datetime.timezone.utc`. Use
+        :attr:`datetime.timezone.utc` directly.
+
 .. function:: get_fixed_timezone(offset)
 
     Returns a :class:`~datetime.tzinfo` instance that represents a time zone
diff --git a/docs/releases/4.1.txt b/docs/releases/4.1.txt
index eb4bde652b..8fc81e5ee7 100644
--- a/docs/releases/4.1.txt
+++ b/docs/releases/4.1.txt
@@ -545,6 +545,9 @@ Miscellaneous
   :meth:`.RemoteUserBackend.configure_user`. Support  for ``RemoteUserBackend``
   subclasses that do not accept this argument is deprecated.
 
+* The :data:`django.utils.timezone.utc` alias to :attr:`datetime.timezone.utc`
+  is deprecated. Use :attr:`datetime.timezone.utc` directly.
+
 Features removed in 4.1
 =======================
 
diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py
index 3e95ca6c15..6ec6d938b9 100644
--- a/tests/migrations/test_writer.py
+++ b/tests/migrations/test_writer.py
@@ -29,10 +29,11 @@ from django.core.validators import EmailValidator, RegexValidator
 from django.db import migrations, models
 from django.db.migrations.serializer import BaseSerializer
 from django.db.migrations.writer import MigrationWriter, OperationWriter
-from django.test import SimpleTestCase
+from django.test import SimpleTestCase, ignore_warnings
 from django.utils.deconstruct import deconstructible
+from django.utils.deprecation import RemovedInDjango50Warning
 from django.utils.functional import SimpleLazyObject
-from django.utils.timezone import get_default_timezone, get_fixed_timezone, utc
+from django.utils.timezone import get_default_timezone, get_fixed_timezone
 from django.utils.translation import gettext_lazy as _
 
 from .models import FoodManager, FoodQuerySet
@@ -532,6 +533,8 @@ class WriterTests(SimpleTestCase):
             datetime.datetime(2014, 1, 1, 1, 1),
             ("datetime.datetime(2014, 1, 1, 1, 1)", {"import datetime"}),
         )
+        with ignore_warnings(category=RemovedInDjango50Warning):
+            from django.utils.timezone import utc
         for tzinfo in (utc, datetime.timezone.utc):
             with self.subTest(tzinfo=tzinfo):
                 self.assertSerializedResultEqual(
diff --git a/tests/timezones/tests.py b/tests/timezones/tests.py
index 4e26516041..f2617f4d0f 100644
--- a/tests/timezones/tests.py
+++ b/tests/timezones/tests.py
@@ -88,6 +88,19 @@ def get_timezones(key):
     return [constructor(key) for constructor in ZONE_CONSTRUCTORS]
 
 
+class UTCAliasTests(SimpleTestCase):
+    def test_alias_deprecation_warning(self):
+        msg = (
+            "The django.utils.timezone.utc alias is deprecated. "
+            "Please update your code to use datetime.timezone.utc instead."
+        )
+        with self.assertRaisesMessage(RemovedInDjango50Warning, msg):
+            timezone.utc
+
+    def test_timezone_module_dir_includes_utc(self):
+        self.assertIn("utc", dir(timezone))
+
+
 @contextmanager
 def override_database_connection_timezone(timezone):
     try:
+ git diff 59ab3fd0e9e606d7f0f7ca26609c06ee679ece97
diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 54f3258eac..288fb93f75 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -235,15 +235,18 @@ class Query(BaseExpression):
         self.external_aliases = {}
         self.table_map = {}  # Maps table names to list of aliases.
         self.used_aliases = set()
-
+    
         self.where = WhereNode()
         # Maps alias -> Annotation Expression.
         self.annotations = {}
         # These are for extensions. The contents are more or less appended
         # verbatim to the appropriate clause.
-        self.extra = {}  # Maps col_alias -> (col_sql, params).
-
+        self.extra = {}
+    
         self._filtered_relations = {}
+        # NEW FLAG to indicate we are building a FilteredRelation:
+        self._in_filtered_relation = False
+    
 
     @property
     def output_field(self):
@@ -1325,31 +1328,6 @@ class Query(BaseExpression):
         split_subq=True,
         check_filterable=True,
     ):
-        """
-        Build a WhereNode for a single filter clause but don't add it
-        to this Query. Query.add_q() will then add this filter to the where
-        Node.
-
-        The 'branch_negated' tells us if the current branch contains any
-        negations. This will be used to determine if subqueries are needed.
-
-        The 'current_negated' is used to determine if the current filter is
-        negated or not and this will be used to determine if IS NULL filtering
-        is needed.
-
-        The difference between current_negated and branch_negated is that
-        branch_negated is set on first negation, but current_negated is
-        flipped for each negation.
-
-        Note that add_filter will not do any negating itself, that is done
-        upper in the code by add_q().
-
-        The 'can_reuse' is a set of reusable joins for multijoins.
-
-        The method will create a filter clause that can be added to the current
-        query. However, if the filter isn't added to the query then the caller
-        is responsible for unreffing the joins used.
-        """
         if isinstance(filter_expr, dict):
             raise FieldError("Cannot parse keyword query as dict")
         if isinstance(filter_expr, Q):
@@ -1371,32 +1349,37 @@ class Query(BaseExpression):
             return WhereNode([condition], connector=AND), []
         arg, value = filter_expr
         if not arg:
-            raise FieldError("Cannot parse keyword query %r" % arg)
+            raise FieldError(f"Cannot parse keyword query {arg!r}")
         lookups, parts, reffed_expression = self.solve_lookup_type(arg)
-
+    
         if check_filterable:
             self.check_filterable(reffed_expression)
-
+    
         if not allow_joins and len(parts) > 1:
             raise FieldError("Joined field references are not permitted in this query")
-
+    
         pre_joins = self.alias_refcount.copy()
         value = self.resolve_lookup_value(value, can_reuse, allow_joins)
         used_joins = {
             k for k, v in self.alias_refcount.items() if v > pre_joins.get(k, 0)
         }
-
+    
         if check_filterable:
             self.check_filterable(value)
-
+    
         if reffed_expression:
             condition = self.build_lookup(lookups, reffed_expression, value)
             return WhereNode([condition], connector=AND), []
-
+    
         opts = self.get_meta()
         alias = self.get_initial_alias()
-        allow_many = not branch_negated or not split_subq
-
+    
+        # If _in_filtered_relation is True, forcibly disable multi-joins.
+        if self._in_filtered_relation:
+            allow_many = False
+        else:
+            allow_many = not branch_negated or not split_subq
+    
         try:
             join_info = self.setup_joins(
                 parts,
@@ -1405,47 +1388,39 @@ class Query(BaseExpression):
                 can_reuse=can_reuse,
                 allow_many=allow_many,
             )
-
+    
             # Prevent iterator from being consumed by check_related_objects()
             if isinstance(value, Iterator):
                 value = list(value)
             self.check_related_objects(join_info.final_field, value, join_info.opts)
-
-            # split_exclude() needs to know which joins were generated for the
-            # lookup parts
+    
+            # split_exclude() needs to know which joins were generated for the lookup parts
             self._lookup_joins = join_info.joins
         except MultiJoin as e:
             return self.split_exclude(filter_expr, can_reuse, e.names_with_path)
-
-        # Update used_joins before trimming since they are reused to determine
-        # which joins could be later promoted to INNER.
+    
         used_joins.update(join_info.joins)
         targets, alias, join_list = self.trim_joins(
             join_info.targets, join_info.joins, join_info.path
         )
         if can_reuse is not None:
             can_reuse.update(join_list)
-
+    
         if join_info.final_field.is_relation:
-            # No support for transforms for relational fields
             num_lookups = len(lookups)
             if num_lookups > 1:
-                raise FieldError(
-                    "Related Field got invalid lookup: {}".format(lookups[0])
-                )
+                raise FieldError(f"Related Field got invalid lookup: {lookups[0]}")
             if len(targets) == 1:
                 col = self._get_col(targets[0], join_info.final_field, alias)
             else:
-                col = MultiColSource(
-                    alias, targets, join_info.targets, join_info.final_field
-                )
+                col = MultiColSource(alias, targets, join_info.targets, join_info.final_field)
         else:
             col = self._get_col(targets[0], join_info.final_field, alias)
-
+    
         condition = self.build_lookup(lookups, col, value)
         lookup_type = condition.lookup_name
         clause = WhereNode([condition], connector=AND)
-
+    
         require_outer = (
             lookup_type == "isnull" and condition.rhs is True and not current_negated
         )
@@ -1456,15 +1431,6 @@ class Query(BaseExpression):
         ):
             require_outer = True
             if lookup_type != "isnull":
-                # The condition added here will be SQL like this:
-                # NOT (col IS NOT NULL), where the first NOT is added in
-                # upper layers of code. The reason for addition is that if col
-                # is null, then col != someval will result in SQL "unknown"
-                # which isn't the same as in Python. The Python None handling
-                # is wanted, and it can be gotten by
-                # (col IS NULL OR col != someval)
-                #   <=>
-                # NOT (col IS NOT NULL AND col = someval).
                 if (
                     self.is_nullable(targets[0])
                     or self.alias_map[join_list[-1]].join_type == LOUTER
@@ -1472,12 +1438,11 @@ class Query(BaseExpression):
                     lookup_class = targets[0].get_lookup("isnull")
                     col = self._get_col(targets[0], join_info.targets[0], alias)
                     clause.add(lookup_class(col, False), AND)
-                # If someval is a nullable column, someval IS NOT NULL is
-                # added.
                 if isinstance(value, Col) and self.is_nullable(value.target):
                     lookup_class = value.target.get_lookup("isnull")
                     clause.add(lookup_class(value, False), AND)
         return clause, used_joins if not require_outer else ()
+      
 
     def add_filter(self, filter_lhs, filter_rhs):
         self.add_q(Q((filter_lhs, filter_rhs)))
@@ -1541,33 +1506,47 @@ class Query(BaseExpression):
         needed_inner = joinpromoter.update_join_types(self)
         return target_clause, needed_inner
 
-    def build_filtered_relation_q(
-        self, q_object, reuse, branch_negated=False, current_negated=False
-    ):
-        """Add a FilteredRelation object to the current filter."""
-        connector = q_object.connector
-        current_negated ^= q_object.negated
-        branch_negated = branch_negated or q_object.negated
-        target_clause = WhereNode(connector=connector, negated=q_object.negated)
-        for child in q_object.children:
-            if isinstance(child, Node):
-                child_clause = self.build_filtered_relation_q(
-                    child,
-                    reuse=reuse,
-                    branch_negated=branch_negated,
-                    current_negated=current_negated,
-                )
-            else:
-                child_clause, _ = self.build_filter(
-                    child,
-                    can_reuse=reuse,
-                    branch_negated=branch_negated,
-                    current_negated=current_negated,
-                    allow_joins=True,
-                    split_subq=False,
-                )
-            target_clause.add(child_clause, connector)
-        return target_clause
+    def build_filtered_relation_q(self, q_object, reuse, branch_negated=False, current_negated=False):
+        """
+        Add a FilteredRelation object to the current filter. This is called
+        recursively if the Q-object is a Node.
+        """
+        old_flag = self._in_filtered_relation
+        self._in_filtered_relation = True
+        try:
+            connector = q_object.connector
+            current_negated ^= q_object.negated
+            branch_negated = branch_negated or q_object.negated
+            target_clause = WhereNode(connector=connector, negated=q_object.negated)
+            for child in q_object.children:
+                if isinstance(child, Node):
+                    child_clause = self.build_filtered_relation_q(
+                        child,
+                        reuse=set(),  # Empty set => do not reuse aliases
+                        branch_negated=branch_negated,
+                        current_negated=current_negated,
+                    )
+                else:
+                    child_clause, _ = self.build_filter(
+                        child,
+                        can_reuse=set(),  # Empty set => do not reuse aliases
+                        branch_negated=branch_negated,
+                        current_negated=current_negated,
+                        allow_joins=True,
+                        split_subq=True,
+                    )
+                target_clause.add(child_clause, connector)
+            # Force distinct parent rows so multiple filtered joins won't yield duplicates.
+            self.distinct = True
+            return target_clause
+        finally:
+            self._in_filtered_relation = old_flag
+      
+      
+    
+    
+    
+    
 
     def add_filtered_relation(self, filtered_relation, alias):
         filtered_relation.alias = alias
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: asgiref>=3.4.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.1.dev20220329124744) (3.8.1)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.1.dev20220329124744) (0.5.3)
Requirement already satisfied: typing-extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from asgiref>=3.4.1->Django==4.1.dev20220329124744) (4.12.2)
Building wheels for collected packages: Django
  Building editable for Django (pyproject.toml): started
  Building editable for Django (pyproject.toml): finished with status 'done'
  Created wheel for Django: filename=Django-4.1.dev20220329124744-0.editable-py3-none-any.whl size=26953 sha256=75954777d12269ed366f0fdba7d53542612775b1407dc98dfc97d1292f704bb5
  Stored in directory: /tmp/pip-ephem-wheel-cache-zmphbs47/wheels/7d/66/67/70d1ee2124ccf21d601c352e25cdca10f611f7c8b3f9ffb9e4
Successfully built Django
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 4.1.dev20220329124744
    Uninstalling Django-4.1.dev20220329124744:
      Successfully uninstalled Django-4.1.dev20220329124744
Successfully installed Django-4.1.dev20220329124744
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git checkout 59ab3fd0e9e606d7f0f7ca26609c06ee679ece97 tests/filtered_relation/tests.py
Updated 0 paths from 9014f24e17
+ git apply -v -
Checking patch tests/filtered_relation/tests.py...
Applied patch tests/filtered_relation/tests.py cleanly.
+ ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 filtered_relation.tests
Creating test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
Testing against Django installed in '/testbed/django'
Importing application filtered_relation
Found 43 test(s).
Skipping setup of unused database(s): other.
Operations to perform:
  Synchronize unmigrated apps: auth, contenttypes, filtered_relation, messages, sessions, staticfiles
  Apply all migrations: admin, sites
Synchronizing apps without migrations:
  Creating tables...
    Creating table django_content_type
    Creating table auth_permission
    Creating table auth_group
    Creating table auth_user
    Creating table django_session
    Creating table filtered_relation_author
    Creating table filtered_relation_editor
    Creating table filtered_relation_book
    Creating table filtered_relation_borrower
    Creating table filtered_relation_reservation
    Creating table filtered_relation_rentalsession
    Creating table filtered_relation_seller
    Creating table filtered_relation_currency
    Creating table filtered_relation_exchangerate
    Creating table filtered_relation_bookdailysales
    Running deferred SQL...
Running migrations:
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying sites.0001_initial... OK
  Applying sites.0002_alter_domain_unique... OK
System check identified no issues (0 silenced).
test_aggregate (filtered_relation.tests.FilteredRelationAggregationTests)
filtered_relation() not only improves performance but also creates ... ok
test_aggregate (filtered_relation.tests.FilteredRelationAnalyticalAggregationTests) ... test_as_subquery (filtered_relation.tests.FilteredRelationTests) ... ok
test_condition_deeper_relation_name (filtered_relation.tests.FilteredRelationTests) ... ok
test_condition_outside_relation_name (filtered_relation.tests.FilteredRelationTests) ... ok
test_deep_nested_foreign_key (filtered_relation.tests.FilteredRelationTests) ... ok
test_defer (filtered_relation.tests.FilteredRelationTests) ... FAIL
test_difference (filtered_relation.tests.FilteredRelationTests) ... ok
test_eq (filtered_relation.tests.FilteredRelationTests) ... ok
test_exclude_relation_with_join (filtered_relation.tests.FilteredRelationTests) ... ok
test_extra (filtered_relation.tests.FilteredRelationTests) ... ok
test_internal_queryset_alias_mapping (filtered_relation.tests.FilteredRelationTests) ... ok
test_intersection (filtered_relation.tests.FilteredRelationTests) ... ok
test_multiple (filtered_relation.tests.FilteredRelationTests) ... FAIL
test_multiple_times (filtered_relation.tests.FilteredRelationTests) ... ok
test_nested_chained_relations (filtered_relation.tests.FilteredRelationTests) ... FAIL
test_nested_foreign_key (filtered_relation.tests.FilteredRelationTests) ... FAIL
test_nested_foreign_key_filtered_base_object (filtered_relation.tests.FilteredRelationTests) ... ok
test_nested_foreign_key_nested_field (filtered_relation.tests.FilteredRelationTests) ... ok
test_nested_m2m_filtered (filtered_relation.tests.FilteredRelationTests) ... ok
test_only_not_supported (filtered_relation.tests.FilteredRelationTests) ... ok
test_relation_name_lookup (filtered_relation.tests.FilteredRelationTests) ... ok
test_select_for_update (filtered_relation.tests.FilteredRelationTests) ... ok
test_select_related (filtered_relation.tests.FilteredRelationTests) ... ok
test_select_related_foreign_key (filtered_relation.tests.FilteredRelationTests) ... ok
test_select_related_foreign_key_for_update_of (filtered_relation.tests.FilteredRelationTests) ... skipped "Database doesn't support feature(s): has_select_for_update, has_select_for_update_of"
test_select_related_multiple (filtered_relation.tests.FilteredRelationTests) ... ok
test_select_related_with_empty_relation (filtered_relation.tests.FilteredRelationTests) ... ok
test_union (filtered_relation.tests.FilteredRelationTests) ... ok
test_values (filtered_relation.tests.FilteredRelationTests) ... ok
test_values_list (filtered_relation.tests.FilteredRelationTests) ... FAIL
test_with_condition_as_expression_error (filtered_relation.tests.FilteredRelationTests) ... ok
test_with_empty_relation_name_error (filtered_relation.tests.FilteredRelationTests) ... ok
test_with_exclude (filtered_relation.tests.FilteredRelationTests) ... ok
test_with_generic_foreign_key (filtered_relation.tests.FilteredRelationTests) ... ok
test_with_join (filtered_relation.tests.FilteredRelationTests) ... ok
test_with_join_and_complex_condition (filtered_relation.tests.FilteredRelationTests) ... ok
test_with_m2m (filtered_relation.tests.FilteredRelationTests) ... ok
test_with_m2m_deep (filtered_relation.tests.FilteredRelationTests) ... ok
test_with_m2m_multijoin (filtered_relation.tests.FilteredRelationTests) ... ok
test_with_multiple_filter (filtered_relation.tests.FilteredRelationTests) ... ok
test_with_prefetch_related (filtered_relation.tests.FilteredRelationTests) ... ok
test_without_join (filtered_relation.tests.FilteredRelationTests) ... ok

======================================================================
FAIL: test_aggregate (filtered_relation.tests.FilteredRelationAnalyticalAggregationTests) (condition=<Q: (AND: ('daily_sales__sale_date__gte', datetime.date(2020, 7, 7)))>)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/filtered_relation/tests.py", line 925, in test_aggregate
    self.assertSequenceEqual(
AssertionError: Sequences differ: <QuerySet [{'title': 'The book by Jane A'[136 chars]ne}]> != [{'title': 'The book by Jane A', 'sales_s[124 chars]one}]

First differing element 0:
{'title': 'The book by Jane A', 'sales_sum': Decimal('930')}
{'title': 'The book by Jane A', 'sales_sum': Decimal('150')}

- <QuerySet [{'title': 'The book by Jane A', 'sales_sum': Decimal('930')}, {'title': 'Poem by Alice', 'sales_sum': Decimal('285')}, {'title': 'The book by Jane B', 'sales_sum': None}]>
+ [{'sales_sum': Decimal('150'), 'title': 'The book by Jane A'},
+  {'sales_sum': Decimal('50'), 'title': 'Poem by Alice'},
+  {'sales_sum': None, 'title': 'The book by Jane B'}]

======================================================================
FAIL: test_aggregate (filtered_relation.tests.FilteredRelationAnalyticalAggregationTests) (condition=<Q: (NOT (AND: ('daily_sales__seller', <Seller: Seller object (1)>)))>)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/filtered_relation/tests.py", line 925, in test_aggregate
    self.assertSequenceEqual(
AssertionError: Sequences differ: <QuerySet [{'title': 'Poem by Alice', 'sa[116 chars]ne}]> != [{'title': 'The book by Jane A', 'sales_s[124 chars]one}]

First differing element 0:
{'title': 'Poem by Alice', 'sales_sum': None}
{'title': 'The book by Jane A', 'sales_sum': Decimal('150')}

- <QuerySet [{'title': 'Poem by Alice', 'sales_sum': None}, {'title': 'The book by Jane A', 'sales_sum': None}, {'title': 'The book by Jane B', 'sales_sum': None}]>
+ [{'sales_sum': Decimal('150'), 'title': 'The book by Jane A'},
+  {'sales_sum': Decimal('50'), 'title': 'Poem by Alice'},
+  {'sales_sum': None, 'title': 'The book by Jane B'}]

======================================================================
FAIL: test_defer (filtered_relation.tests.FilteredRelationTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/filtered_relation/tests.py", line 411, in test_defer
    self.assertQuerysetEqual(
  File "/testbed/django/test/testcases.py", line 1249, in assertQuerysetEqual
    return self.assertEqual(list(items), values, msg=msg)
AssertionError: Lists differ: ['Poem by Alice', 'The book by Alice'] != ['Poem by Alice']

First list contains 1 additional elements.
First extra element 1:
'The book by Alice'

- ['Poem by Alice', 'The book by Alice']
+ ['Poem by Alice']

======================================================================
FAIL: test_multiple (filtered_relation.tests.FilteredRelationTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/filtered_relation/tests.py", line 228, in test_multiple
    self.assertCountEqual(
AssertionError: Element counts were not equal:
First has 1, Second has 0:  {'book_title_alice__title': None, 'book_title_jane__title': None}
First has 0, Second has 1:  {'book_title_alice__title': None, 'book_title_jane__title': 'The book by Jane A'}
First has 0, Second has 1:  {'book_title_alice__title': None, 'book_title_jane__title': 'The book by Jane B'}

======================================================================
FAIL: test_nested_chained_relations (filtered_relation.tests.FilteredRelationTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/filtered_relation/tests.py", line 570, in test_nested_chained_relations
    self.assertQuerysetEqual(
  File "/testbed/django/test/testcases.py", line 1249, in assertQuerysetEqual
    return self.assertEqual(list(items), values, msg=msg)
AssertionError: Lists differ: [('Alice', 'Poem by Alice', None), ('Alice', 'The boo[84 chars], 1)] != [('Alice', 'The book by Alice', None), ('Jane', 'The [50 chars], 1)]

First differing element 0:
('Alice', 'Poem by Alice', None)
('Alice', 'The book by Alice', None)

First list contains 1 additional elements.
First extra element 3:
('Jane', 'The book by Jane B', 1)

- [('Alice', 'Poem by Alice', None),
-  ('Alice', 'The book by Alice', None),
? ^

+ [('Alice', 'The book by Alice', None),
? ^

   ('Jane', 'The book by Jane A', 1),
   ('Jane', 'The book by Jane B', 1)]

======================================================================
FAIL: test_nested_foreign_key (filtered_relation.tests.FilteredRelationTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/filtered_relation/tests.py", line 461, in test_nested_foreign_key
    self.assertQuerysetEqual(
  File "/testbed/django/test/testcases.py", line 1249, in assertQuerysetEqual
    return self.assertEqual(list(items), values, msg=msg)
AssertionError: Lists differ: [(<Au[109 chars](2)>)] != [(<Au[109 chars](2)>), (<Author: Author object (2)>, <Editor: [15 chars]2)>)]

Second list contains 1 additional elements.
First extra element 2:
(<Author: Author object (2)>, <Editor: Editor object (2)>)

  [(<Author: Author object (1)>, <Editor: Editor object (1)>),
+  (<Author: Author object (2)>, <Editor: Editor object (2)>),
   (<Author: Author object (2)>, <Editor: Editor object (2)>)]

======================================================================
FAIL: test_values_list (filtered_relation.tests.FilteredRelationTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/filtered_relation/tests.py", line 312, in test_values_list
    self.assertSequenceEqual(
AssertionError: Sequences differ: <QuerySet ['Poem by Alice', 'The book by Alice']> != ['Poem by Alice']

First sequence contains 1 additional elements.
First extra element 1:
'The book by Alice'

- <QuerySet ['Poem by Alice', 'The book by Alice']>
+ ['Poem by Alice']

----------------------------------------------------------------------
Ran 43 tests in 0.100s

FAILED (failures=7, skipped=1)
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
+ git checkout 59ab3fd0e9e606d7f0f7ca26609c06ee679ece97 tests/filtered_relation/tests.py
Updated 1 path from 9014f24e17
