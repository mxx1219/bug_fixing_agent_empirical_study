diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 54f3258eac..288fb93f75 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -235,15 +235,18 @@ class Query(BaseExpression):
         self.external_aliases = {}
         self.table_map = {}  # Maps table names to list of aliases.
         self.used_aliases = set()
-
+    
         self.where = WhereNode()
         # Maps alias -> Annotation Expression.
         self.annotations = {}
         # These are for extensions. The contents are more or less appended
         # verbatim to the appropriate clause.
-        self.extra = {}  # Maps col_alias -> (col_sql, params).
-
+        self.extra = {}
+    
         self._filtered_relations = {}
+        # NEW FLAG to indicate we are building a FilteredRelation:
+        self._in_filtered_relation = False
+    
 
     @property
     def output_field(self):
@@ -1325,31 +1328,6 @@ class Query(BaseExpression):
         split_subq=True,
         check_filterable=True,
     ):
-        """
-        Build a WhereNode for a single filter clause but don't add it
-        to this Query. Query.add_q() will then add this filter to the where
-        Node.
-
-        The 'branch_negated' tells us if the current branch contains any
-        negations. This will be used to determine if subqueries are needed.
-
-        The 'current_negated' is used to determine if the current filter is
-        negated or not and this will be used to determine if IS NULL filtering
-        is needed.
-
-        The difference between current_negated and branch_negated is that
-        branch_negated is set on first negation, but current_negated is
-        flipped for each negation.
-
-        Note that add_filter will not do any negating itself, that is done
-        upper in the code by add_q().
-
-        The 'can_reuse' is a set of reusable joins for multijoins.
-
-        The method will create a filter clause that can be added to the current
-        query. However, if the filter isn't added to the query then the caller
-        is responsible for unreffing the joins used.
-        """
         if isinstance(filter_expr, dict):
             raise FieldError("Cannot parse keyword query as dict")
         if isinstance(filter_expr, Q):
@@ -1371,32 +1349,37 @@ class Query(BaseExpression):
             return WhereNode([condition], connector=AND), []
         arg, value = filter_expr
         if not arg:
-            raise FieldError("Cannot parse keyword query %r" % arg)
+            raise FieldError(f"Cannot parse keyword query {arg!r}")
         lookups, parts, reffed_expression = self.solve_lookup_type(arg)
-
+    
         if check_filterable:
             self.check_filterable(reffed_expression)
-
+    
         if not allow_joins and len(parts) > 1:
             raise FieldError("Joined field references are not permitted in this query")
-
+    
         pre_joins = self.alias_refcount.copy()
         value = self.resolve_lookup_value(value, can_reuse, allow_joins)
         used_joins = {
             k for k, v in self.alias_refcount.items() if v > pre_joins.get(k, 0)
         }
-
+    
         if check_filterable:
             self.check_filterable(value)
-
+    
         if reffed_expression:
             condition = self.build_lookup(lookups, reffed_expression, value)
             return WhereNode([condition], connector=AND), []
-
+    
         opts = self.get_meta()
         alias = self.get_initial_alias()
-        allow_many = not branch_negated or not split_subq
-
+    
+        # If _in_filtered_relation is True, forcibly disable multi-joins.
+        if self._in_filtered_relation:
+            allow_many = False
+        else:
+            allow_many = not branch_negated or not split_subq
+    
         try:
             join_info = self.setup_joins(
                 parts,
@@ -1405,47 +1388,39 @@ class Query(BaseExpression):
                 can_reuse=can_reuse,
                 allow_many=allow_many,
             )
-
+    
             # Prevent iterator from being consumed by check_related_objects()
             if isinstance(value, Iterator):
                 value = list(value)
             self.check_related_objects(join_info.final_field, value, join_info.opts)
-
-            # split_exclude() needs to know which joins were generated for the
-            # lookup parts
+    
+            # split_exclude() needs to know which joins were generated for the lookup parts
             self._lookup_joins = join_info.joins
         except MultiJoin as e:
             return self.split_exclude(filter_expr, can_reuse, e.names_with_path)
-
-        # Update used_joins before trimming since they are reused to determine
-        # which joins could be later promoted to INNER.
+    
         used_joins.update(join_info.joins)
         targets, alias, join_list = self.trim_joins(
             join_info.targets, join_info.joins, join_info.path
         )
         if can_reuse is not None:
             can_reuse.update(join_list)
-
+    
         if join_info.final_field.is_relation:
-            # No support for transforms for relational fields
             num_lookups = len(lookups)
             if num_lookups > 1:
-                raise FieldError(
-                    "Related Field got invalid lookup: {}".format(lookups[0])
-                )
+                raise FieldError(f"Related Field got invalid lookup: {lookups[0]}")
             if len(targets) == 1:
                 col = self._get_col(targets[0], join_info.final_field, alias)
             else:
-                col = MultiColSource(
-                    alias, targets, join_info.targets, join_info.final_field
-                )
+                col = MultiColSource(alias, targets, join_info.targets, join_info.final_field)
         else:
             col = self._get_col(targets[0], join_info.final_field, alias)
-
+    
         condition = self.build_lookup(lookups, col, value)
         lookup_type = condition.lookup_name
         clause = WhereNode([condition], connector=AND)
-
+    
         require_outer = (
             lookup_type == "isnull" and condition.rhs is True and not current_negated
         )
@@ -1456,15 +1431,6 @@ class Query(BaseExpression):
         ):
             require_outer = True
             if lookup_type != "isnull":
-                # The condition added here will be SQL like this:
-                # NOT (col IS NOT NULL), where the first NOT is added in
-                # upper layers of code. The reason for addition is that if col
-                # is null, then col != someval will result in SQL "unknown"
-                # which isn't the same as in Python. The Python None handling
-                # is wanted, and it can be gotten by
-                # (col IS NULL OR col != someval)
-                #   <=>
-                # NOT (col IS NOT NULL AND col = someval).
                 if (
                     self.is_nullable(targets[0])
                     or self.alias_map[join_list[-1]].join_type == LOUTER
@@ -1472,12 +1438,11 @@ class Query(BaseExpression):
                     lookup_class = targets[0].get_lookup("isnull")
                     col = self._get_col(targets[0], join_info.targets[0], alias)
                     clause.add(lookup_class(col, False), AND)
-                # If someval is a nullable column, someval IS NOT NULL is
-                # added.
                 if isinstance(value, Col) and self.is_nullable(value.target):
                     lookup_class = value.target.get_lookup("isnull")
                     clause.add(lookup_class(value, False), AND)
         return clause, used_joins if not require_outer else ()
+      
 
     def add_filter(self, filter_lhs, filter_rhs):
         self.add_q(Q((filter_lhs, filter_rhs)))
@@ -1541,33 +1506,47 @@ class Query(BaseExpression):
         needed_inner = joinpromoter.update_join_types(self)
         return target_clause, needed_inner
 
-    def build_filtered_relation_q(
-        self, q_object, reuse, branch_negated=False, current_negated=False
-    ):
-        """Add a FilteredRelation object to the current filter."""
-        connector = q_object.connector
-        current_negated ^= q_object.negated
-        branch_negated = branch_negated or q_object.negated
-        target_clause = WhereNode(connector=connector, negated=q_object.negated)
-        for child in q_object.children:
-            if isinstance(child, Node):
-                child_clause = self.build_filtered_relation_q(
-                    child,
-                    reuse=reuse,
-                    branch_negated=branch_negated,
-                    current_negated=current_negated,
-                )
-            else:
-                child_clause, _ = self.build_filter(
-                    child,
-                    can_reuse=reuse,
-                    branch_negated=branch_negated,
-                    current_negated=current_negated,
-                    allow_joins=True,
-                    split_subq=False,
-                )
-            target_clause.add(child_clause, connector)
-        return target_clause
+    def build_filtered_relation_q(self, q_object, reuse, branch_negated=False, current_negated=False):
+        """
+        Add a FilteredRelation object to the current filter. This is called
+        recursively if the Q-object is a Node.
+        """
+        old_flag = self._in_filtered_relation
+        self._in_filtered_relation = True
+        try:
+            connector = q_object.connector
+            current_negated ^= q_object.negated
+            branch_negated = branch_negated or q_object.negated
+            target_clause = WhereNode(connector=connector, negated=q_object.negated)
+            for child in q_object.children:
+                if isinstance(child, Node):
+                    child_clause = self.build_filtered_relation_q(
+                        child,
+                        reuse=set(),  # Empty set => do not reuse aliases
+                        branch_negated=branch_negated,
+                        current_negated=current_negated,
+                    )
+                else:
+                    child_clause, _ = self.build_filter(
+                        child,
+                        can_reuse=set(),  # Empty set => do not reuse aliases
+                        branch_negated=branch_negated,
+                        current_negated=current_negated,
+                        allow_joins=True,
+                        split_subq=True,
+                    )
+                target_clause.add(child_clause, connector)
+            # Force distinct parent rows so multiple filtered joins won't yield duplicates.
+            self.distinct = True
+            return target_clause
+        finally:
+            self._in_filtered_relation = old_flag
+      
+      
+    
+    
+    
+    
 
     def add_filtered_relation(self, filtered_relation, alias):
         filtered_relation.alias = alias
diff --git a/test_filteredrelation_bug.py b/test_filteredrelation_bug.py
new file mode 100644
index 0000000000..7d385b6843
--- /dev/null
+++ b/test_filteredrelation_bug.py
@@ -0,0 +1,84 @@
+import sys
+import decimal
+
+import django
+from django.conf import settings
+from django.core.management import call_command
+from django.db.models import Q, F, FilteredRelation, Case, When
+from django.db import models, connection
+from django.db.models.functions import Coalesce
+
+def main():
+    print("Configuring Django...")
+    if not settings.configured:
+        settings.configure(
+            SECRET_KEY="xyz",
+            INSTALLED_APPS=[
+                "django.contrib.contenttypes",
+                "django.contrib.auth",
+                "testapp.apps.TestAppConfig",
+            ],
+            DATABASES={"default": {
+                "ENGINE": "django.db.backends.sqlite3",
+                "NAME": ":memory:",
+            }},
+            MIDDLEWARE=[],
+            DEFAULT_AUTO_FIELD="django.db.models.AutoField",
+        )
+    django.setup()
+
+    print("Making and applying migrations...")
+    call_command("makemigrations", "testapp", "--noinput")
+    call_command("migrate", "--run-syncdb", "--noinput")
+
+    from testapp.models import MyParent, MyChild
+
+    print("Creating test data...")
+    parent = MyParent.objects.create(zone="ZoneA")
+    # 'is_all' row priced at 100
+    MyChild.objects.create(parent=parent, is_all=True, price=decimal.Decimal("100.00"))
+    # 'zone match' row priced at 70
+    MyChild.objects.create(parent=parent, is_all=False, price=decimal.Decimal("70.00"))
+    # Expect that both of these match in two separate joins.
+
+    qs = MyParent.objects.alias(
+        relation_zone=FilteredRelation(
+            "nested",
+            condition=Q(nested__is_all=False, nested__parent__zone=F("zone"))
+        ),
+        relation_all=FilteredRelation(
+            "nested",
+            condition=Q(nested__is_all=True)
+        ),
+        price_zone=F("relation_zone__price"),
+    ).annotate(
+        price_final=Case(
+            When(price_zone__isnull=True, then=F("relation_all__price")),
+            default=F("price_zone")
+        )
+    )
+
+    print("Querying for parents with zone='ZoneA'...")
+    results = list(qs.filter(zone="ZoneA"))
+    print(f"Query returned {len(results)} row(s). Full results:")
+    for obj in results:
+        print(f"  MyParent id={obj.id}, zone={obj.zone}, price_final={obj.price_final}")
+
+    # We expect 2 results: one corresponding to the 'zone' match (price_final=70)
+    # and one corresponding to the 'all' match (price_final=100).
+
+    if len(results) != 2:
+        print("Expected exactly 2 rows because both FilteredRelations match. Bug if fewer or more.")
+        sys.exit(1)
+
+    # Format them to ensure trailing zeros
+    price_finals = sorted("{:.2f}".format(r.price_final) for r in results)
+    if price_finals != ["100.00", "70.00"]:
+        print(f"Expected price_final=['70.00','100.00'], but got {price_finals}. Bug if second FilteredRelation ignored.")
+        sys.exit(1)
+
+    print("All checks passed: we have two distinct joined rows, verifying both FilteredRelations are honored.")
+    sys.exit(0)
+
+if __name__ == "__main__":
+    main()
diff --git a/testapp/__init__.py b/testapp/__init__.py
new file mode 100644
index 0000000000..e07c12a1db
--- /dev/null
+++ b/testapp/__init__.py
@@ -0,0 +1 @@
+# Empty __init__.py so that "testapp" is recognized as a Python package.
diff --git a/testapp/apps.py b/testapp/apps.py
new file mode 100644
index 0000000000..ef6c957e4f
--- /dev/null
+++ b/testapp/apps.py
@@ -0,0 +1,4 @@
+from django.apps import AppConfig
+
+class TestAppConfig(AppConfig):
+    name = 'testapp'
diff --git a/testapp/migrations/0001_initial.py b/testapp/migrations/0001_initial.py
new file mode 100644
index 0000000000..4f30313fed
--- /dev/null
+++ b/testapp/migrations/0001_initial.py
@@ -0,0 +1,53 @@
+# Generated by Django 4.1.dev20220329124744 on 2025-01-13 02:46
+
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = []
+
+    operations = [
+        migrations.CreateModel(
+            name="MyParent",
+            fields=[
+                (
+                    "id",
+                    models.AutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                ("zone", models.CharField(max_length=100)),
+            ],
+        ),
+        migrations.CreateModel(
+            name="MyChild",
+            fields=[
+                (
+                    "id",
+                    models.AutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                ("is_all", models.BooleanField(default=False)),
+                ("price", models.DecimalField(decimal_places=2, max_digits=10)),
+                (
+                    "parent",
+                    models.ForeignKey(
+                        on_delete=django.db.models.deletion.CASCADE,
+                        related_name="nested",
+                        to="testapp.myparent",
+                    ),
+                ),
+            ],
+        ),
+    ]
diff --git a/testapp/migrations/__init__.py b/testapp/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testapp/models.py b/testapp/models.py
new file mode 100644
index 0000000000..99944cc0f3
--- /dev/null
+++ b/testapp/models.py
@@ -0,0 +1,9 @@
+from django.db import models
+
+class MyParent(models.Model):
+    zone = models.CharField(max_length=100)
+
+class MyChild(models.Model):
+    parent = models.ForeignKey(MyParent, related_name='nested', on_delete=models.CASCADE)
+    is_all = models.BooleanField(default=False)
+    price = models.DecimalField(max_digits=10, decimal_places=2)
