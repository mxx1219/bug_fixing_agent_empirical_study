diff --git a/django/db/models/query.py b/django/db/models/query.py
index d9c9b0db04..8f60db2b23 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -686,11 +686,25 @@ class QuerySet:
         """
         Return a dictionary mapping each of the given IDs to the object with
         that ID. If `id_list` isn't provided, evaluate the entire QuerySet.
+    
+        If field_name != 'pk', check if that field is unique or covered by a
+        single-field UniqueConstraint. If not, raise a ValueError.
         """
-        assert not self.query.is_sliced, \
+        assert not self.query.is_sliced, (
             "Cannot use 'limit' or 'offset' with in_bulk"
-        if field_name != 'pk' and not self.model._meta.get_field(field_name).unique:
-            raise ValueError("in_bulk()'s field_name must be a unique field but %r isn't." % field_name)
+        )
+        if field_name != 'pk':
+            field = self.model._meta.get_field(field_name)
+            if not field.unique:
+                from django.db.models import UniqueConstraint
+                # Check for a single-field UniqueConstraint on field_name
+                is_unique_by_constraint = any(
+                    isinstance(c, UniqueConstraint) and len(c.fields) == 1 and c.fields[0] == field_name
+                    for c in self.model._meta.constraints
+                )
+                if not is_unique_by_constraint:
+                    raise ValueError("in_bulk()'s field_name must be a unique field but %r isn't." % field_name)
+    
         if id_list is not None:
             if not id_list:
                 return {}
@@ -708,7 +722,9 @@ class QuerySet:
                 qs = self.filter(**{filter_key: id_list}).order_by()
         else:
             qs = self._chain()
+    
         return {getattr(obj, field_name): obj for obj in qs}
+    
 
     def delete(self):
         """Delete the records in the current QuerySet."""
diff --git a/test_in_bulk_unique_constraint.py b/test_in_bulk_unique_constraint.py
new file mode 100644
index 0000000000..0744affcb1
--- /dev/null
+++ b/test_in_bulk_unique_constraint.py
@@ -0,0 +1,60 @@
+import sys
+import django
+from django.conf import settings
+from django.db import models, connection
+
+print("Starting test for in_bulk with single-field UniqueConstraint...")
+
+if not settings.configured:
+    print("Django settings not configured. Configuring now...")
+    settings.configure(
+        INSTALLED_APPS=[],
+        DATABASES={
+            "default": {
+                "ENGINE": "django.db.backends.sqlite3",
+                "NAME": ":memory:"
+            }
+        },
+        SECRET_KEY="dummy",
+    )
+    django.setup()
+
+class FakeArticle(models.Model):
+    slug = models.CharField(max_length=255)
+
+    class Meta:
+        app_label = "test_in_bulk_unique_constraint"
+        db_table = "test_in_bulk_unique_constraint_article"
+        constraints = [
+            models.UniqueConstraint(
+                fields=["slug"],
+                name="test_in_bulk_unique_constraint_article_slug_unq"
+            )
+        ]
+
+try:
+    with connection.schema_editor() as editor:
+        print("Dropping table if it exists...")
+        editor.execute('DROP TABLE IF EXISTS "test_in_bulk_unique_constraint_article"')
+        print("Creating table...")
+        editor.create_model(FakeArticle)
+
+    print("Inserting sample data...")
+    FakeArticle.objects.create(slug="abc")
+    FakeArticle.objects.create(slug="def")
+
+    print("Calling in_bulk on 'slug'...")
+    try:
+        objs = FakeArticle.objects.in_bulk(field_name="slug")
+        print("Succeeded in_bulk call. Returned:", objs)
+        print("Test passed (no ValueError). Exiting with 0.")
+        sys.exit(0)
+    except ValueError as e:
+        print("Got ValueError:", e)
+        print("Test failed because in_bulk() raised ValueError. Exiting with 1.")
+        sys.exit(1)
+
+except Exception as ex:
+    print("Unexpected error:", ex)
+    print("Test failed unexpectedly. Exiting with 1.")
+    sys.exit(1)
