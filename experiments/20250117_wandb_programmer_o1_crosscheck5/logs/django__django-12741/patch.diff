diff --git a/django/core/management/commands/flush.py b/django/core/management/commands/flush.py
index e8ed3967f7..bc8021cf4e 100644
--- a/django/core/management/commands/flush.py
+++ b/django/core/management/commands/flush.py
@@ -60,7 +60,7 @@ Are you sure you want to do this?
 
         if confirm == 'yes':
             try:
-                connection.ops.execute_sql_flush(database, sql_list)
+                connection.ops.execute_sql_flush(sql_list)
             except Exception as exc:
                 raise CommandError(
                     "Database %s couldn't be flushed. Possible reasons:\n"
diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py
index 70ac07ae09..638e287ed3 100644
--- a/django/db/backends/base/operations.py
+++ b/django/db/backends/base/operations.py
@@ -400,12 +400,13 @@ class BaseDatabaseOperations:
         """
         raise NotImplementedError('subclasses of BaseDatabaseOperations must provide a sql_flush() method')
 
-    def execute_sql_flush(self, using, sql_list):
+    def execute_sql_flush(self, sql_list):
         """Execute a list of SQL statements to flush the database."""
-        with transaction.atomic(using=using, savepoint=self.connection.features.can_rollback_ddl):
+        with transaction.atomic(using=self.connection.alias, savepoint=self.connection.features.can_rollback_ddl):
             with self.connection.cursor() as cursor:
                 for sql in sql_list:
                     cursor.execute(sql)
+    
 
     def sequence_reset_by_name_sql(self, style, sequences):
         """
diff --git a/test_flush_signature.py b/test_flush_signature.py
new file mode 100644
index 0000000000..0733c7eaaf
--- /dev/null
+++ b/test_flush_signature.py
@@ -0,0 +1,21 @@
+#!/usr/bin/env python3
+
+import sys
+import inspect
+from django.db.backends.base.operations import BaseDatabaseOperations
+
+def main():
+    print("Test: Checking that BaseDatabaseOperations.execute_sql_flush() has exactly two parameters: self and sql_list.")
+    sig = inspect.signature(BaseDatabaseOperations.execute_sql_flush)
+    params = list(sig.parameters.keys())
+    print("Signature parameters found:", params)
+    expected = ["self", "sql_list"]
+    if params == expected:
+        print("SUCCESS: The signature is correct.")
+        sys.exit(0)
+    else:
+        print("FAIL: Expected %s, got %s" % (expected, params))
+        sys.exit(1)
+
+if __name__ == "__main__":
+    main()
diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py
index 0485fe8465..b0ffe958c8 100644
--- a/tests/backends/base/test_operations.py
+++ b/tests/backends/base/test_operations.py
@@ -172,7 +172,7 @@ class SqlFlushTests(TransactionTestCase):
             reset_sequences=True,
             allow_cascade=True,
         )
-        connection.ops.execute_sql_flush(connection.alias, sql_list)
+        connection.ops.execute_sql_flush(sql_list)
 
         with transaction.atomic():
             self.assertIs(Author.objects.exists(), False)
diff --git a/tests/backends/tests.py b/tests/backends/tests.py
index d6c2331378..40fc6de7fc 100644
--- a/tests/backends/tests.py
+++ b/tests/backends/tests.py
@@ -162,7 +162,7 @@ class LongNameTest(TransactionTestCase):
             VLM_m2m._meta.db_table,
         ]
         sql_list = connection.ops.sql_flush(no_style(), tables, reset_sequences=True)
-        connection.ops.execute_sql_flush(connection.alias, sql_list)
+        connection.ops.execute_sql_flush(sql_list)
 
 
 class SequenceResetTest(TestCase):
