diff --git a/django/db/backends/mysql/operations.py b/django/db/backends/mysql/operations.py
index 50f85e0621..faef9b8cb8 100644
--- a/django/db/backends/mysql/operations.py
+++ b/django/db/backends/mysql/operations.py
@@ -69,9 +69,25 @@ class DatabaseOperations(BaseDatabaseOperations):
             return "DATE(%s)" % (field_name)
 
     def _convert_field_to_tz(self, field_name, tzname):
-        if settings.USE_TZ:
-            field_name = "CONVERT_TZ(%s, 'UTC', '%s')" % (field_name, tzname)
-        return field_name
+        if not settings.USE_TZ:
+            return field_name
+    
+        # Default from_tz to the global TIME_ZONE, or 'UTC' if not set
+        from_tz = getattr(settings, 'TIME_ZONE', 'UTC')
+    
+        # If a real connection object is available, honor its TIME_ZONE setting
+        if self.connection is not None and hasattr(self.connection, 'settings_dict'):
+            db_tz = self.connection.settings_dict.get('TIME_ZONE')
+            if db_tz:
+                from_tz = db_tz
+    
+        # If DB tz == app tz, no CONVERT_TZ needed
+        if from_tz == tzname:
+            return field_name
+    
+        return "CONVERT_TZ(%s, '%s', '%s')" % (field_name, from_tz, tzname)
+    
+    
 
     def datetime_cast_date_sql(self, field_name, tzname):
         field_name = self._convert_field_to_tz(field_name, tzname)
diff --git a/test_tz_bug.py b/test_tz_bug.py
new file mode 100644
index 0000000000..8a46a7433b
--- /dev/null
+++ b/test_tz_bug.py
@@ -0,0 +1,29 @@
+import sys
+import django
+from django.conf import settings
+from django.db.backends.mysql.operations import DatabaseOperations
+
+def main():
+    print("Step 1: Configuring settings for test_tz_bug (no real DB).")
+    # We only need to confirm that the generated SQL references 'UTC'.
+    settings.configure(
+        USE_TZ=True,
+        TIME_ZONE='Europe/Paris',
+    )
+    django.setup()
+
+    print("Step 2: Instantiating MySQL DatabaseOperations and generating date cast SQL.")
+    ops = DatabaseOperations(None)
+    sql = ops.datetime_cast_date_sql('my_field', 'Europe/Paris')
+    print("Generated SQL:", sql)
+
+    print("Step 3: Check for 'UTC' in the SQL.")
+    if 'UTC' in sql:
+        print("FAIL: 'UTC' found in SQL => bug not fixed.")
+        sys.exit(1)
+    else:
+        print("PASS: 'UTC' not found => bug appears fixed.")
+        sys.exit(0)
+
+if __name__ == '__main__':
+    main()
