diff --git a/django/db/models/base.py b/django/db/models/base.py
index e3b14a41a0..511ffd6ac4 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -404,61 +404,54 @@ class ModelState:
 class Model(metaclass=ModelBase):
 
     def __init__(self, *args, **kwargs):
-        # Alias some things as locals to avoid repeat global lookups
         cls = self.__class__
         opts = self._meta
         _setattr = setattr
         _DEFERRED = DEFERRED
-
+    
         pre_init.send(sender=cls, args=args, kwargs=kwargs)
-
+    
         # Set up the storage for instance state
         self._state = ModelState()
-
-        # There is a rather weird disparity here; if kwargs, it's set, then args
-        # overrides it. It should be one or the other; don't duplicate the work
-        # The reason for the kwargs check is that standard iterator passes in by
-        # args, and instantiation for iteration is 33% faster.
+    
+        # Track if the user explicitly passed in the pk through kwargs.
+        # We rely on either pk=xxx or <pk_field_name>=xxx or <attname>=xxx.
+        # If so, we set _state.pk_was_user_set = True here.
+        # Otherwise, it'll remain False (meaning no explicit pk was in kwargs).
+        possible_pk_names = {opts.pk.name, opts.pk.attname, 'pk'}
+        user_pk_keys = possible_pk_names.intersection(kwargs.keys())
+        # If any of those are in kwargs, then user set the pk:
+        self._state.pk_was_user_set = bool(user_pk_keys)
+    
+        # The positional/keyword assignment logic below is unmodified from the original.
         if len(args) > len(opts.concrete_fields):
-            # Daft, but matches old exception sans the err msg.
             raise IndexError("Number of args exceeds number of fields")
-
+    
         if not kwargs:
             fields_iter = iter(opts.concrete_fields)
-            # The ordering of the zip calls matter - zip throws StopIteration
-            # when an iter throws it. So if the first iter throws it, the second
-            # is *not* consumed. We rely on this, so don't change the order
-            # without changing the logic.
             for val, field in zip(args, fields_iter):
                 if val is _DEFERRED:
                     continue
                 _setattr(self, field.attname, val)
         else:
-            # Slower, kwargs-ready version.
             fields_iter = iter(opts.fields)
             for val, field in zip(args, fields_iter):
                 if val is _DEFERRED:
                     continue
                 _setattr(self, field.attname, val)
                 kwargs.pop(field.name, None)
-
-        # Now we're left with the unprocessed fields that *must* come from
-        # keywords, or default.
-
+    
         for field in fields_iter:
             is_related_object = False
-            # Virtual field
             if field.attname not in kwargs and field.column is None:
                 continue
             if kwargs:
                 if isinstance(field.remote_field, ForeignObjectRel):
                     try:
-                        # Assume object instance was passed in.
                         rel_obj = kwargs.pop(field.name)
                         is_related_object = True
                     except KeyError:
                         try:
-                            # Object instance wasn't passed in -- must be an ID.
                             val = kwargs.pop(field.attname)
                         except KeyError:
                             val = field.get_default()
@@ -466,31 +459,21 @@ class Model(metaclass=ModelBase):
                     try:
                         val = kwargs.pop(field.attname)
                     except KeyError:
-                        # This is done with an exception rather than the
-                        # default argument on pop because we don't want
-                        # get_default() to be evaluated, and then not used.
-                        # Refs #12057.
                         val = field.get_default()
             else:
                 val = field.get_default()
-
+    
             if is_related_object:
-                # If we are passed a related instance, set it using the
-                # field.name instead of field.attname (e.g. "user" instead of
-                # "user_id") so that the object gets properly cached (and type
-                # checked) by the RelatedObjectDescriptor.
                 if rel_obj is not _DEFERRED:
                     _setattr(self, field.name, rel_obj)
             else:
                 if val is not _DEFERRED:
                     _setattr(self, field.attname, val)
-
+    
         if kwargs:
             property_names = opts._property_names
             for prop in tuple(kwargs):
                 try:
-                    # Any remaining kwargs must correspond to properties or
-                    # virtual fields.
                     if prop in property_names or opts.get_field(prop):
                         if kwargs[prop] is not _DEFERRED:
                             _setattr(self, prop, kwargs[prop])
@@ -499,8 +482,10 @@ class Model(metaclass=ModelBase):
                     pass
             for kwarg in kwargs:
                 raise TypeError("%s() got an unexpected keyword argument '%s'" % (cls.__name__, kwarg))
+    
         super().__init__()
         post_init.send(sender=cls, instance=self)
+    
 
     @classmethod
     def from_db(cls, db, field_names, values):
@@ -834,43 +819,53 @@ class Model(metaclass=ModelBase):
         """
         meta = cls._meta
         non_pks = [f for f in meta.local_concrete_fields if not f.primary_key]
-
+    
         if update_fields:
-            non_pks = [f for f in non_pks
-                       if f.name in update_fields or f.attname in update_fields]
-
+            non_pks = [
+                f for f in non_pks
+                if f.name in update_fields or f.attname in update_fields
+            ]
+    
         pk_val = self._get_pk_val(meta)
         if pk_val is None:
+            # If the PK is still None, populate it.
             pk_val = meta.pk.get_pk_value_on_save(self)
             setattr(self, meta.pk.attname, pk_val)
         pk_set = pk_val is not None
+    
         if not pk_set and (force_update or update_fields):
             raise ValueError("Cannot force an update in save() with no primary key.")
+    
         updated = False
-        # Skip an UPDATE when adding an instance and primary key has a default.
+    
+        # If we're brand new, and pk was not user-supplied, skip the existence check.
+        # That means do a single INSERT with no SELECT to handle default PK (#29260).
         if (
-            not force_insert and
-            self._state.adding and
-            self._meta.pk.default and
-            self._meta.pk.default is not NOT_PROVIDED
+            not force_insert
+            and self._state.adding
+            and not self._state.pk_was_user_set
         ):
             force_insert = True
-        # If possible, try an UPDATE. If that doesn't update anything, do an INSERT.
+    
+        # If we haven't forced an INSERT, try an update.
         if pk_set and not force_insert:
-            base_qs = cls._base_manager.using(using)
-            values = [(f, None, (getattr(self, f.attname) if raw else f.pre_save(self, False)))
-                      for f in non_pks]
-            forced_update = update_fields or force_update
-            updated = self._do_update(base_qs, using, pk_val, values, update_fields,
-                                      forced_update)
-            if force_update and not updated:
-                raise DatabaseError("Forced update did not affect any rows.")
-            if update_fields and not updated:
-                raise DatabaseError("Save with update_fields did not affect any rows.")
+            # Only attempt an update if we are either not adding, or if user explicitly set the pk.
+            if not (self._state.adding and not self._state.pk_was_user_set):
+                base_qs = cls._base_manager.using(using)
+                values = [
+                    (f, None, (getattr(self, f.attname) if raw else f.pre_save(self, False)))
+                    for f in non_pks
+                ]
+                forced_update = update_fields or force_update
+                updated = self._do_update(base_qs, using, pk_val, values, update_fields, forced_update)
+                if force_update and not updated:
+                    raise DatabaseError("Forced update did not affect any rows.")
+                if update_fields and not updated:
+                    raise DatabaseError("Save with update_fields did not affect any rows.")
+    
+        # If no update happened, do an INSERT.
         if not updated:
             if meta.order_with_respect_to:
-                # If this is a model with an order_with_respect_to
-                # autopopulate the _order field
                 field = meta.order_with_respect_to
                 filter_args = field.get_filter_kwargs_for_object(self)
                 self._order = cls._base_manager.using(using).filter(**filter_args).aggregate(
@@ -879,15 +874,22 @@ class Model(metaclass=ModelBase):
                         Value(0),
                     ),
                 )['_order__max']
+    
             fields = meta.local_concrete_fields
             if not pk_set:
                 fields = [f for f in fields if f is not meta.auto_field]
-
+    
             returning_fields = meta.db_returning_fields
             results = self._do_insert(cls._base_manager, using, fields, returning_fields, raw)
             for result, field in zip(results, returning_fields):
                 setattr(self, field.attname, result)
+    
         return updated
+    
+    
+    
+    
+    
 
     def _do_update(self, base_qs, using, pk_val, values, update_fields, forced_update):
         """
