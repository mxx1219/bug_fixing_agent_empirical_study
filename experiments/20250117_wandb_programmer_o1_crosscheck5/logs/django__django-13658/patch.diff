diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py
index 1ba093e51f..a1d0ba4c95 100644
--- a/django/core/management/__init__.py
+++ b/django/core/management/__init__.py
@@ -187,10 +187,15 @@ class ManagementUtility:
     """
     def __init__(self, argv=None):
         self.argv = argv or sys.argv[:]
-        self.prog_name = os.path.basename(self.argv[0])
-        if self.prog_name == '__main__.py':
+        # If argv[0] is None or argv is empty, fallback to 'python -m django'
+        if not self.argv or self.argv[0] is None:
             self.prog_name = 'python -m django'
+        else:
+            self.prog_name = os.path.basename(self.argv[0])
+            if self.prog_name == '__main__.py':
+                self.prog_name = 'python -m django'
         self.settings_exception = None
+    
 
     def main_help_text(self, commands_only=False):
         """Return the script's main help text, as a string."""
@@ -340,11 +345,18 @@ class ManagementUtility:
             subcommand = self.argv[1]
         except IndexError:
             subcommand = 'help'  # Display help if no arguments were given.
-
-        # Preprocess options to extract --settings and --pythonpath.
-        # These options could affect the commands that are available, so they
-        # must be processed early.
-        parser = CommandParser(usage='%(prog)s subcommand [options] [args]', add_help=False, allow_abbrev=False)
+    
+        # Preprocess options to extract --settings and --pythonpath
+        # These options could affect the commands that are available,
+        # so they must be processed early.
+        from django.core.management.base import handle_default_options, CommandError
+        from django.core.management.base import CommandParser
+        parser = CommandParser(
+            prog=self.prog_name,
+            usage='%(prog)s subcommand [options] [args]',
+            add_help=False,
+            allow_abbrev=False
+        )
         parser.add_argument('--settings')
         parser.add_argument('--pythonpath')
         parser.add_argument('args', nargs='*')  # catch-all
@@ -353,59 +365,64 @@ class ManagementUtility:
             handle_default_options(options)
         except CommandError:
             pass  # Ignore any option errors at this point.
-
+    
+        from django.conf import settings
+        from django.core.exceptions import ImproperlyConfigured
+        from django.apps import apps
+        import django
+    
         try:
             settings.INSTALLED_APPS
-        except ImproperlyConfigured as exc:
-            self.settings_exception = exc
-        except ImportError as exc:
+        except (ImproperlyConfigured, ImportError) as exc:
             self.settings_exception = exc
-
+    
         if settings.configured:
             # Start the auto-reloading dev server even if the code is broken.
             # The hardcoded condition is a code smell but we can't rely on a
             # flag on the command class because we haven't located it yet.
             if subcommand == 'runserver' and '--noreload' not in self.argv:
+                from django.utils import autoreload
                 try:
                     autoreload.check_errors(django.setup)()
                 except Exception:
                     # The exception will be raised later in the child process
                     # started by the autoreloader. Pretend it didn't happen by
                     # loading an empty list of applications.
+                    from collections import defaultdict
                     apps.all_models = defaultdict(dict)
                     apps.app_configs = {}
                     apps.apps_ready = apps.models_ready = apps.ready = True
-
+    
                     # Remove options not compatible with the built-in runserver
-                    # (e.g. options for the contrib.staticfiles' runserver).
-                    # Changes here require manually testing as described in
-                    # #27522.
                     _parser = self.fetch_command('runserver').create_parser('django', 'runserver')
                     _options, _args = _parser.parse_known_args(self.argv[2:])
                     for _arg in _args:
                         self.argv.remove(_arg)
-
-            # In all other cases, django.setup() is required to succeed.
             else:
                 django.setup()
-
+    
         self.autocomplete()
-
+    
         if subcommand == 'help':
             if '--commands' in args:
+                import sys
                 sys.stdout.write(self.main_help_text(commands_only=True) + '\n')
             elif not options.args:
+                import sys
                 sys.stdout.write(self.main_help_text() + '\n')
             else:
                 self.fetch_command(options.args[0]).print_help(self.prog_name, options.args[0])
         # Special-cases: We want 'django-admin --version' and
         # 'django-admin --help' to work, for backwards compatibility.
         elif subcommand == 'version' or self.argv[1:] == ['--version']:
+            import sys
             sys.stdout.write(django.get_version() + '\n')
         elif self.argv[1:] in (['--help'], ['-h']):
+            import sys
             sys.stdout.write(self.main_help_text() + '\n')
         else:
             self.fetch_command(subcommand).run_from_argv(self.argv)
+    
 
 
 def execute_from_command_line(argv=None):
diff --git a/test_prog_bug.py b/test_prog_bug.py
new file mode 100644
index 0000000000..e359777167
--- /dev/null
+++ b/test_prog_bug.py
@@ -0,0 +1,26 @@
+import sys
+from django.core.management import execute_from_command_line
+from io import StringIO
+import contextlib
+
+def main():
+    print("Test: Attempting to call execute_from_command_line with argv[0] = None.")
+    test_argv = [None, '--help']
+    output_buffer = StringIO()
+    with contextlib.redirect_stdout(output_buffer):
+        try:
+            execute_from_command_line(test_argv)
+        except SystemExit as e:
+            pass
+    output = output_buffer.getvalue()
+    print("Captured output:")
+    print(output)
+    if 'None help' in output:
+        print("Problem not fixed: usage references 'None help'!")
+        sys.exit(1)
+    else:
+        print("Looks fixed, usage references something other than 'None help'!")
+        sys.exit(0)
+
+if __name__ == '__main__':
+    main()
