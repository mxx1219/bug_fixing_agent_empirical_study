diff --git a/astropy/units/quantity.py b/astropy/units/quantity.py
index ded609cbe9..2c81971fbc 100644
--- a/astropy/units/quantity.py
+++ b/astropy/units/quantity.py
@@ -271,7 +271,7 @@ class Quantity(np.ndarray, metaclass=InheritDocstrings):
 
     def __new__(cls, value, unit=None, dtype=None, copy=True, order=None,
                 subok=False, ndmin=0):
-
+    
         if unit is not None:
             # convert unit first, to avoid multiple string->unit conversions
             unit = Unit(unit)
@@ -280,60 +280,59 @@ class Quantity(np.ndarray, metaclass=InheritDocstrings):
                 qcls = getattr(unit, '_quantity_class', cls)
                 if issubclass(qcls, cls):
                     cls = qcls
-
+    
         # optimize speed for Quantity with no dtype given, copy=False
         if isinstance(value, Quantity):
             if unit is not None and unit is not value.unit:
                 value = value.to(unit)
                 # the above already makes a copy (with float dtype)
                 copy = False
-
+    
             if type(value) is not cls and not (subok and
                                                isinstance(value, cls)):
                 value = value.view(cls)
-
+    
             if dtype is None:
                 if not copy:
                     return value
-
+    
                 if not (np.can_cast(np.float32, value.dtype) or
                         value.dtype.fields):
                     dtype = float
-
+    
             return np.array(value, dtype=dtype, copy=copy, order=order,
                             subok=True, ndmin=ndmin)
-
+    
         # Maybe str, or list/tuple of Quantity? If so, this may set value_unit.
         # To ensure array remains fast, we short-circuit it.
         value_unit = None
         if not isinstance(value, np.ndarray):
             if isinstance(value, str):
                 # The first part of the regex string matches any integer/float;
-                # the second parts adds possible trailing .+-, which will break
-                # the float function below and ensure things like 1.2.3deg
-                # will not work.
+                # the second parts adds possible trailing .+-,
+                # which will break the float function below
+                # and ensure things like 1.2.3deg will not work.
                 pattern = (r'\s*[+-]?'
                            r'((\d+\.?\d*)|(\.\d+)|([nN][aA][nN])|'
                            r'([iI][nN][fF]([iI][nN][iI][tT][yY]){0,1}))'
                            r'([eE][+-]?\d+)?'
                            r'[.+-]?')
-
+    
                 v = re.match(pattern, value)
                 unit_string = None
                 try:
                     value = float(v.group())
-
                 except Exception:
                     raise TypeError('Cannot parse "{0}" as a {1}. It does not '
                                     'start with a number.'
                                     .format(value, cls.__name__))
-
+    
                 unit_string = v.string[v.end():].strip()
                 if unit_string:
                     value_unit = Unit(unit_string)
                     if unit is None:
                         unit = value_unit  # signal no conversion needed below.
-
+    
             elif (isiterable(value) and len(value) > 0 and
                   all(isinstance(v, Quantity) for v in value)):
                 # Convert all quantities to the same unit.
@@ -341,7 +340,7 @@ class Quantity(np.ndarray, metaclass=InheritDocstrings):
                     unit = value[0].unit
                 value = [q.to_value(unit) for q in value]
                 value_unit = unit  # signal below that conversion has been done
-
+    
         if value_unit is None:
             # If the value has a `unit` attribute and if not None
             # (for Columns with uninitialized unit), treat it like a quantity.
@@ -359,15 +358,15 @@ class Quantity(np.ndarray, metaclass=InheritDocstrings):
                                     "not be parsed as an astropy Unit, raising "
                                     "the following exception:\n{1}"
                                     .format(value.unit, exc))
-
+    
                 if unit is None:
                     unit = value_unit
                 elif unit is not value_unit:
                     copy = False  # copy will be made in conversion at end
-
+    
         value = np.array(value, dtype=dtype, copy=copy, order=order,
                          subok=False, ndmin=ndmin)
-
+    
         # check that array contains numbers or long int objects
         if (value.dtype.kind in 'OSU' and
             not (value.dtype.kind == 'O' and
@@ -375,21 +374,20 @@ class Quantity(np.ndarray, metaclass=InheritDocstrings):
                             numbers.Number))):
             raise TypeError("The value must be a valid Python or "
                             "Numpy numeric type.")
-
-        # by default, cast any integer, boolean, etc., to float
-        if dtype is None and (not (np.can_cast(np.float32, value.dtype)
-                                   or value.dtype.fields)
-                              or value.dtype.kind == 'O'):
+    
+        # by default, cast any integer, boolean, etc. to float
+        if dtype is None and not value.dtype.fields and value.dtype.kind not in ('f','c'):
             value = value.astype(float)
-
+    
         value = value.view(cls)
         value._set_unit(value_unit)
         if unit is value_unit:
             return value
         else:
             # here we had non-Quantity input that had a "unit" attribute
-            # with a unit different from the desired one.  So, convert.
+            # with a unit different from the desired one. So, convert.
             return value.to(unit)
+    
 
     def __array_finalize__(self, obj):
         # If we're a new object or viewing an ndarray, nothing has to be done.
diff --git a/test_float16_upgrade.py b/test_float16_upgrade.py
new file mode 100644
index 0000000000..bc1d2e24a8
--- /dev/null
+++ b/test_float16_upgrade.py
@@ -0,0 +1,29 @@
+import sys
+import numpy as np
+import astropy.units as u
+
+def main():
+    print("Checking behavior of float16 vs float32 vs int32 in Quantity...")
+    test_values = [
+        (np.float16(1), np.float16, "float16 -> float16"),
+        (np.float32(1), np.float32, "float32 -> float32"),
+        (np.int32(1), np.float64, "int32 -> float64 (should cast to float64)"),
+    ]
+
+    all_good = True
+    for val, expected_dtype, label in test_values:
+        q = val * u.km
+        print(f"Test: {label}. Input dtype: {val.dtype if hasattr(val, 'dtype') else type(val)}, Output dtype: {q.dtype}")
+        if q.dtype != expected_dtype:
+            print(f"FAIL: expected {expected_dtype}, got {q.dtype}")
+            all_good = False
+    
+    if all_good:
+        print("All checks pass => float16 is preserved, problem is fixed.")
+        sys.exit(0)
+    else:
+        print("Test failed => float16 got promoted to float64 (or other mismatch).")
+        sys.exit(1)
+
+if __name__ == "__main__":
+    main()
