diff --git a/django/db/backends/postgresql/operations.py b/django/db/backends/postgresql/operations.py
index 8d19872bea..f1b1c91f08 100644
--- a/django/db/backends/postgresql/operations.py
+++ b/django/db/backends/postgresql/operations.py
@@ -44,11 +44,29 @@ class DatabaseOperations(BaseDatabaseOperations):
         return "DATE_TRUNC('%s', %s)" % (lookup_type, field_name)
 
     def _prepare_tzname_delta(self, tzname):
+        # Special case for "Etc/GMTÂ±X" style timezones, which are reversed vs the usual
+        # numeric offsets. Example: "Etc/GMT-10" actually means UTC+10, so we want
+        # AT TIME ZONE '-10' in the final SQL. We parse them carefully instead of
+        # flipping any sign found in the string.
+        if tzname.startswith("Etc/GMT") and len(tzname) > 7:
+            sign = tzname[7]
+            offset_str = tzname[8:]
+            if sign == '-':
+                # "Etc/GMT-10" => effectively +10 => produce '-10'
+                return f"-{offset_str}"
+            elif sign == '+':
+                # "Etc/GMT+3" => effectively -3 => produce '+3'
+                return f"+{offset_str}"
+            # Fall back to original if something unexpected
+            return tzname
+    
+        # For other strings like "+03:00" or "-08", preserve old flipping logic:
         if '+' in tzname:
             return tzname.replace('+', '-')
         elif '-' in tzname:
             return tzname.replace('-', '+')
         return tzname
+    
 
     def _convert_field_to_tz(self, field_name, tzname):
         if tzname and settings.USE_TZ:
diff --git a/test_etc_gmt_timezones.py b/test_etc_gmt_timezones.py
new file mode 100644
index 0000000000..2ca4ea6033
--- /dev/null
+++ b/test_etc_gmt_timezones.py
@@ -0,0 +1,40 @@
+import sys
+import os
+
+import django
+from django.conf import settings
+from django.db.backends.postgresql.operations import DatabaseOperations
+
+# Make sure USE_TZ is True so that tzname logic is exercised.
+if not settings.configured:
+    settings.configure(
+        USE_TZ=True,  # Critical: forces the code to use tz logic
+        SECRET_KEY="test",
+    )
+django.setup()
+
+def main():
+    ops = DatabaseOperations(None)
+    # Using datetime_trunc_sql directly triggers _convert_field_to_tz internally.
+    sql = ops.datetime_trunc_sql(
+        lookup_type="day",
+        field_name='"my_table"."start_at"',
+        tzname="Etc/GMT-10",
+    )
+    print("Generated SQL:", sql)
+
+    # Buggy code will flip '-10' to '+10' and produce e.g. AT TIME ZONE 'Etc/GMT+10'.
+    if "Etc/GMT+10" in sql:
+        print("ERROR: Found 'Etc/GMT+10' in the query string. Bug persists.")
+        sys.exit(1)
+
+    # Correct code should produce AT TIME ZONE '-10'
+    if "AT TIME ZONE '-10'" not in sql:
+        print("ERROR: Did not find AT TIME ZONE '-10' in the query. Something else is wrong.")
+        sys.exit(2)
+
+    print("SUCCESS: SQL used AT TIME ZONE '-10'. Bug is fixed.")
+    sys.exit(0)
+
+if __name__ == "__main__":
+    main()
