diff --git a/astropy/nddata/mixins/ndarithmetic.py b/astropy/nddata/mixins/ndarithmetic.py
index 4153dfccb2..860612b75c 100644
--- a/astropy/nddata/mixins/ndarithmetic.py
+++ b/astropy/nddata/mixins/ndarithmetic.py
@@ -485,26 +485,25 @@ class NDArithmeticMixin:
     def _arithmetic_mask(self, operation, operand, handle_mask, axis=None, **kwds):
         """
         Calculate the resulting mask.
-
-        This is implemented as the piecewise ``or`` operation if both have a
-        mask.
-
+    
+        This is implemented as the piecewise ``or`` operation if both have a mask.
+    
         Parameters
         ----------
         operation : callable
             see :meth:`NDArithmeticMixin._arithmetic` parameter description.
             By default, the ``operation`` will be ignored.
-
+    
         operand : `NDData`-like instance
             The second operand wrapped in an instance of the same class as
             self.
-
+    
         handle_mask : callable
             see :meth:`NDArithmeticMixin.add`
-
+    
         kwds :
             Additional parameters given to ``handle_mask``.
-
+    
         Returns
         -------
         result_mask : any type
@@ -514,17 +513,19 @@ class NDArithmeticMixin:
         """
         # If only one mask is present we need not bother about any type checks
         if (
-            self.mask is None and operand is not None and operand.mask is None
-        ) or handle_mask is None:
+            (self.mask is None and operand is not None and operand.mask is None)
+            or handle_mask is None
+        ):
             return None
         elif self.mask is None and operand is not None:
-            # Make a copy so there is no reference in the result.
             return deepcopy(operand.mask)
+        elif operand is not None and operand.mask is None:
+            return deepcopy(self.mask)
         elif operand is None:
             return deepcopy(self.mask)
         else:
-            # Now lets calculate the resulting mask (operation enforces copy)
             return handle_mask(self.mask, operand.mask, **kwds)
+    
 
     def _arithmetic_wcs(self, operation, operand, compare_wcs, **kwds):
         """
diff --git a/test_mask_propagation.py b/test_mask_propagation.py
new file mode 100644
index 0000000000..488b096feb
--- /dev/null
+++ b/test_mask_propagation.py
@@ -0,0 +1,48 @@
+import sys
+import numpy as np
+from astropy.nddata import NDDataRef
+
+print("Starting mask propagation test...")
+
+arr = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])
+mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])
+
+nref_nomask = NDDataRef(arr)
+nref_mask = NDDataRef(arr, mask=mask)
+
+try:
+    print("Test 1: mask * 1, with handle_mask = np.bitwise_or")
+    res1 = nref_mask.multiply(1., handle_mask=np.bitwise_or)
+    print("Resulting mask:", res1.mask)
+    if res1.mask is None:
+        print("FAIL: mask should not be None!")
+        sys.exit(1)
+    if not np.array_equal(res1.mask, mask):
+        print("FAIL: result mask does not match original. Original:")
+        print(mask)
+        print("Got:")
+        print(res1.mask)
+        sys.exit(1)
+    print("PASS: Test 1")
+
+    print("Test 2: mask * no_mask, handle_mask = np.bitwise_or")
+    # That originally triggers the TypeError
+    res2 = nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or)
+    print("Resulting mask:", res2.mask)
+    if res2.mask is None:
+        print("FAIL: mask should not be None!")
+        sys.exit(1)
+    if not np.array_equal(res2.mask, mask):
+        print("FAIL: result mask does not match original. Original:")
+        print(mask)
+        print("Got:")
+        print(res2.mask)
+        sys.exit(1)
+    print("PASS: Test 2")
+
+    print("All tests passed, code is fixed!")
+    sys.exit(0)
+
+except Exception as e:
+    print("FAIL: Caught exception, indicating bug is present:", e)
+    sys.exit(1)
