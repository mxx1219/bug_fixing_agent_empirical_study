diff --git a/fix_exclude_outerref_test.py b/fix_exclude_outerref_test.py
new file mode 100644
index 0000000000..5518720a4d
--- /dev/null
+++ b/fix_exclude_outerref_test.py
@@ -0,0 +1,102 @@
+#!/usr/bin/env python3
+import sys
+import traceback
+
+print("==== Reproduction test for OuterRef + exclude() bug ====")
+try:
+    print("[1/6] Importing Django settings and configuring if needed...")
+    from django.conf import settings
+    from django.core.management import call_command
+
+    if not settings.configured:
+        settings.configure(
+            SECRET_KEY="test",
+            INSTALLED_APPS=[
+                "django.contrib.contenttypes",
+                "django.contrib.auth",
+                "tests.queries",  # references tests/queries/models.py
+            ],
+            DATABASES={
+                "default": {
+                    "ENGINE": "django.db.backends.sqlite3",
+                    "NAME": ":memory:",
+                }
+            },
+            # Force creations via syncdb for tests.queries
+            MIGRATION_MODULES={
+                "tests.queries": None,
+            },
+        )
+
+    print("[2/6] Initializing Django...")
+    import django
+    django.setup()
+
+    print("[3/6] Migrating with --run-syncdb to create test model tables...")
+    call_command("migrate", run_syncdb=True, verbosity=0, interactive=False)
+
+    print("[4/6] Now importing models...")
+    from django.db.models import Exists, OuterRef
+    from tests.queries.models import (
+        Number, Item, Tag, NamedCategory, Author, Note, ExtraInfo
+    )
+
+    print("[5/6] Creating test data... (clearing old rows)")
+    Number.objects.all().delete()
+    NamedCategory.objects.all().delete()
+    Tag.objects.all().delete()
+    Item.objects.all().delete()
+    Author.objects.all().delete()
+    Note.objects.all().delete()
+    ExtraInfo.objects.all().delete()
+
+    # Category & tag
+    cat = NamedCategory.objects.create(name="catA")
+    tag1 = Tag.objects.create(name="tag1", category=cat)
+    # Number row
+    n1 = Number.objects.create(num=1, other_num=10)
+    # Create a note for the Item
+    note1 = Note.objects.create(note="my note", misc="misc val")
+    # ExtraInfo so that an Author can reference it
+    extra1 = ExtraInfo.objects.create(info="extra info", note=note1)
+    # Author
+    auth1 = Author.objects.create(name="auth1", num=123, extra=extra1)
+
+    # Create an Item referencing the Author and Note
+    item1 = Item.objects.create(
+        name="item1",
+        created="2023-01-01 12:00:00",
+        modified="2023-01-02 13:00:00",
+        creator=auth1,
+        note=note1
+    )
+    item1.tags.add(tag1)
+    print(
+        f"Test data created. Number pk={n1.pk}, Tag pk={tag1.pk}, "
+        f"Item pk={item1.pk}, Author pk={auth1.pk}, Note pk={note1.pk}"
+    )
+
+    print("[6/6] Attempting query with OuterRef('pk') in exclude() subquery...")
+    try:
+        qs = Number.objects.annotate(
+            foo=Exists(
+                Item.objects.exclude(tags__category_id=OuterRef('pk'))
+            )
+        ).filter(foo=True)
+        result = list(qs)  # Force evaluation
+        print("Query executed successfully. Result length =", len(result))
+        print("OuterRef + exclude() did NOT raise an error => bug is FIXED.")
+        sys.exit(0)
+    except ValueError as e:
+        if "only be used in a subquery" in str(e):
+            print("BUG REPRODUCED: Got ValueError -> OuterRef usage in exclude() is broken.")
+            sys.exit(1)
+        else:
+            print("Unexpected ValueError:", e)
+            traceback.print_exc()
+            sys.exit(1)
+
+except Exception as main_exc:
+    print("Unexpected exception, test fails:")
+    traceback.print_exc()
+    sys.exit(1)
