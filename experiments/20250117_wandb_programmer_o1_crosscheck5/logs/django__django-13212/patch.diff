diff --git a/django/core/validators.py b/django/core/validators.py
index 84b4f31ec7..3e681397cc 100644
--- a/django/core/validators.py
+++ b/django/core/validators.py
@@ -48,7 +48,7 @@ class RegexValidator:
         regex_matches = self.regex.search(str(value))
         invalid_input = regex_matches if self.inverse_match else not regex_matches
         if invalid_input:
-            raise ValidationError(self.message, code=self.code)
+            raise ValidationError(self.message, code=self.code, params={'value': value})
 
     def __eq__(self, other):
         return (
@@ -61,6 +61,7 @@ class RegexValidator:
         )
 
 
+
 @deconstructible
 class URLValidator(RegexValidator):
     ul = '\u00a1-\uffff'  # Unicode letters range (must not be a raw string).
@@ -89,7 +90,9 @@ class URLValidator(RegexValidator):
         r'(?:' + ipv4_re + '|' + ipv6_re + '|' + host_re + ')'
         r'(?::\d{2,5})?'  # port
         r'(?:[/?#][^\s]*)?'  # resource path
-        r'\Z', re.IGNORECASE)
+        r'\Z',
+        re.IGNORECASE
+    )
     message = _('Enter a valid URL.')
     schemes = ['http', 'https', 'ftp', 'ftps']
 
@@ -100,11 +103,12 @@ class URLValidator(RegexValidator):
 
     def __call__(self, value):
         if not isinstance(value, str):
-            raise ValidationError(self.message, code=self.code)
+            raise ValidationError(self.message, code=self.code, params={'value': value})
+
         # Check if the scheme is valid.
         scheme = value.split('://')[0].lower()
         if scheme not in self.schemes:
-            raise ValidationError(self.message, code=self.code)
+            raise ValidationError(self.message, code=self.code, params={'value': value})
 
         # Then check full URL
         try:
@@ -115,7 +119,7 @@ class URLValidator(RegexValidator):
                 try:
                     scheme, netloc, path, query, fragment = urlsplit(value)
                 except ValueError:  # for example, "Invalid IPv6 URL"
-                    raise ValidationError(self.message, code=self.code)
+                    raise ValidationError(self.message, code=self.code, params={'value': value})
                 try:
                     netloc = punycode(netloc)  # IDN -> ACE
                 except UnicodeError:  # invalid domain part
@@ -132,14 +136,13 @@ class URLValidator(RegexValidator):
                 try:
                     validate_ipv6_address(potential_ip)
                 except ValidationError:
-                    raise ValidationError(self.message, code=self.code)
+                    raise ValidationError(self.message, code=self.code, params={'value': value})
 
         # The maximum length of a full host name is 253 characters per RFC 1034
-        # section 3.1. It's defined to be 255 bytes or less, but this includes
-        # one byte for the length of the name and one byte for the trailing dot
-        # that's used to indicate absolute names in DNS.
+        # section 3.1. If it's longer, raise an error.
         if len(urlsplit(value).netloc) > 253:
-            raise ValidationError(self.message, code=self.code)
+            raise ValidationError(self.message, code=self.code, params={'value': value})
+
 
 
 integer_validator = RegexValidator(
@@ -158,15 +161,13 @@ class EmailValidator:
     message = _('Enter a valid email address.')
     code = 'invalid'
     user_regex = _lazy_re_compile(
-        r"(^[-!#$%&'*+/=?^_`{}|~0-9A-Z]+(\.[-!#$%&'*+/=?^_`{}|~0-9A-Z]+)*\Z"  # dot-atom
-        r'|^"([\001-\010\013\014\016-\037!#-\[\]-\177]|\\[\001-\011\013\014\016-\177])*"\Z)',  # quoted-string
+        r'(^[-!#$%&\'*+/=?^_`{}|~0-9A-Z]+(\.[-!#$%&\'*+/=?^_`{}|~0-9A-Z]+)*\Z'
+        r'|^"([\001-\010\013\014\016-\037!#-\[\]-\177]|\\[\001-\011\013\014\016-\177])*"\Z)',
         re.IGNORECASE)
     domain_regex = _lazy_re_compile(
-        # max length for domain name labels is 63 characters per RFC 1034
         r'((?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+)(?:[A-Z0-9-]{2,63}(?<!-))\Z',
         re.IGNORECASE)
     literal_regex = _lazy_re_compile(
-        # literal form, ipv4 or ipv6 address (SMTP 4.1.3)
         r'\[([A-f0-9:.]+)\]\Z',
         re.IGNORECASE)
     domain_allowlist = ['localhost']
@@ -208,16 +209,15 @@ class EmailValidator:
 
     def __call__(self, value):
         if not value or '@' not in value:
-            raise ValidationError(self.message, code=self.code)
+            raise ValidationError(self.message, code=self.code, params={'value': value})
 
         user_part, domain_part = value.rsplit('@', 1)
 
         if not self.user_regex.match(user_part):
-            raise ValidationError(self.message, code=self.code)
+            raise ValidationError(self.message, code=self.code, params={'value': value})
 
         if (domain_part not in self.domain_allowlist and
                 not self.validate_domain_part(domain_part)):
-            # Try for possible IDN domain-part
             try:
                 domain_part = punycode(domain_part)
             except UnicodeError:
@@ -225,7 +225,7 @@ class EmailValidator:
             else:
                 if self.validate_domain_part(domain_part):
                     return
-            raise ValidationError(self.message, code=self.code)
+            raise ValidationError(self.message, code=self.code, params={'value': value})
 
     def validate_domain_part(self, domain_part):
         if self.domain_regex.match(domain_part):
@@ -250,6 +250,7 @@ class EmailValidator:
         )
 
 
+
 validate_email = EmailValidator()
 
 slug_re = _lazy_re_compile(r'^[-a-zA-Z0-9_]+\Z')
@@ -272,12 +273,22 @@ def validate_ipv4_address(value):
     try:
         ipaddress.IPv4Address(value)
     except ValueError:
-        raise ValidationError(_('Enter a valid IPv4 address.'), code='invalid')
+        raise ValidationError(
+            _('Enter a valid IPv4 address.'),
+            code='invalid',
+            params={'value': value},
+        )
+  
 
 
 def validate_ipv6_address(value):
     if not is_valid_ipv6_address(value):
-        raise ValidationError(_('Enter a valid IPv6 address.'), code='invalid')
+        raise ValidationError(
+            _('Enter a valid IPv6 address.'),
+            code='invalid',
+            params={'value': value},
+        )
+  
 
 
 def validate_ipv46_address(value):
@@ -287,7 +298,12 @@ def validate_ipv46_address(value):
         try:
             validate_ipv6_address(value)
         except ValidationError:
-            raise ValidationError(_('Enter a valid IPv4 or IPv6 address.'), code='invalid')
+            raise ValidationError(
+                _('Enter a valid IPv4 or IPv6 address.'),
+                code='invalid',
+                params={'value': value},
+            )
+  
 
 
 ip_address_validator_map = {
@@ -438,42 +454,47 @@ class DecimalValidator:
     def __call__(self, value):
         digit_tuple, exponent = value.as_tuple()[1:]
         if exponent in {'F', 'n', 'N'}:
-            raise ValidationError(self.messages['invalid'])
+            raise ValidationError(
+                self.messages['invalid'],
+                code='invalid',
+                params={'value': value},
+            )
         if exponent >= 0:
             # A positive exponent adds that many trailing zeros.
             digits = len(digit_tuple) + exponent
             decimals = 0
         else:
-            # If the absolute value of the negative exponent is larger than the
-            # number of digits, then it's the same as the number of digits,
-            # because it'll consume all of the digits in digit_tuple and then
-            # add abs(exponent) - len(digit_tuple) leading zeros after the
-            # decimal point.
+            # If the absolute value of the negative exponent is larger than
+            # the number of digits, it consumes all digits then adds zeros.
             if abs(exponent) > len(digit_tuple):
                 digits = decimals = abs(exponent)
             else:
                 digits = len(digit_tuple)
                 decimals = abs(exponent)
+
         whole_digits = digits - decimals
 
         if self.max_digits is not None and digits > self.max_digits:
             raise ValidationError(
                 self.messages['max_digits'],
                 code='max_digits',
-                params={'max': self.max_digits},
+                params={'max': self.max_digits, 'value': value},
             )
         if self.decimal_places is not None and decimals > self.decimal_places:
             raise ValidationError(
                 self.messages['max_decimal_places'],
                 code='max_decimal_places',
-                params={'max': self.decimal_places},
+                params={'max': self.decimal_places, 'value': value},
             )
-        if (self.max_digits is not None and self.decimal_places is not None and
-                whole_digits > (self.max_digits - self.decimal_places)):
+        if (
+            self.max_digits is not None and
+            self.decimal_places is not None and
+            whole_digits > (self.max_digits - self.decimal_places)
+        ):
             raise ValidationError(
                 self.messages['max_whole_digits'],
                 code='max_whole_digits',
-                params={'max': (self.max_digits - self.decimal_places)},
+                params={'max': (self.max_digits - self.decimal_places), 'value': value},
             )
 
     def __eq__(self, other):
@@ -482,6 +503,7 @@ class DecimalValidator:
             self.max_digits == other.max_digits and
             self.decimal_places == other.decimal_places
         )
+  
 
 
 @deconstructible
@@ -494,7 +516,7 @@ class FileExtensionValidator:
 
     def __init__(self, allowed_extensions=None, message=None, code=None):
         if allowed_extensions is not None:
-            allowed_extensions = [allowed_extension.lower() for allowed_extension in allowed_extensions]
+            allowed_extensions = [ext.lower() for ext in allowed_extensions]
         self.allowed_extensions = allowed_extensions
         if message is not None:
             self.message = message
@@ -509,8 +531,9 @@ class FileExtensionValidator:
                 code=self.code,
                 params={
                     'extension': extension,
-                    'allowed_extensions': ', '.join(self.allowed_extensions)
-                }
+                    'allowed_extensions': ', '.join(self.allowed_extensions),
+                    'value': value,
+                },
             )
 
     def __eq__(self, other):
@@ -520,6 +543,7 @@ class FileExtensionValidator:
             self.message == other.message and
             self.code == other.code
         )
+  
 
 
 def get_available_image_extensions():
diff --git a/test_value_param.py b/test_value_param.py
new file mode 100644
index 0000000000..975cb0a37d
--- /dev/null
+++ b/test_value_param.py
@@ -0,0 +1,24 @@
+import sys
+from django.core.exceptions import ValidationError
+from django.core.validators import EmailValidator
+
+def main():
+    print("Running test_value_param.py")
+    test_value = "not_an_email"
+    print(f"Testing EmailValidator with value={test_value}")
+    try:
+        EmailValidator()(test_value)
+    except ValidationError as e:
+        # Check if 'value' is included in e.params
+        if e.params and e.params.get('value') == test_value:
+            print("Test passed: 'value' is included in ValidationError params.")
+            sys.exit(0)
+        else:
+            print("Test failed: 'value' is missing or incorrect in ValidationError params.")
+            sys.exit(1)
+    else:
+        print("Test failed: ValidationError was not raised for invalid email.")
+        sys.exit(1)
+
+if __name__ == "__main__":
+    main()
