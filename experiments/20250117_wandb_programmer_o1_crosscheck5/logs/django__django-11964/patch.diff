diff --git a/django/db/models/enums.py b/django/db/models/enums.py
index bbe362a6ab..d8ede84636 100644
--- a/django/db/models/enums.py
+++ b/django/db/models/enums.py
@@ -60,7 +60,9 @@ class ChoicesMeta(enum.EnumMeta):
 
 class Choices(enum.Enum, metaclass=ChoicesMeta):
     """Class for creating enumerated choices."""
-    pass
+    def __str__(self):
+        return str(self.value)
+
 
 
 class IntegerChoices(int, Choices):
diff --git a/script_test_enum_bug/__init__.py b/script_test_enum_bug/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/script_test_enum_bug/apps.py b/script_test_enum_bug/apps.py
new file mode 100644
index 0000000000..65b068d2c6
--- /dev/null
+++ b/script_test_enum_bug/apps.py
@@ -0,0 +1,4 @@
+from django.apps import AppConfig
+
+class ScriptTestEnumBugConfig(AppConfig):
+    name = 'script_test_enum_bug'
diff --git a/script_test_enum_bug/models.py b/script_test_enum_bug/models.py
new file mode 100644
index 0000000000..bab2c7f06c
--- /dev/null
+++ b/script_test_enum_bug/models.py
@@ -0,0 +1,12 @@
+from django.db import models
+from django.utils.translation import gettext_lazy as _
+
+class MyChoice(models.TextChoices):
+    FIRST_CHOICE = "first", _("The first choice")
+    SECOND_CHOICE = "second", _("The second choice")
+
+class MyObject(models.Model):
+    my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)
+
+    class Meta:
+        app_label = "script_test_enum_bug"
diff --git a/script_test_enum_bug/tests.py b/script_test_enum_bug/tests.py
new file mode 100644
index 0000000000..4373957e93
--- /dev/null
+++ b/script_test_enum_bug/tests.py
@@ -0,0 +1,16 @@
+import sys
+from django.test import TestCase
+from .models import MyObject, MyChoice
+
+class EnumBugTest(TestCase):
+    def test_created_object_is_str(self):
+        obj = MyObject(my_str_value=MyChoice.FIRST_CHOICE)
+        if str(obj.my_str_value) != "first":
+            print(f'FAIL: Unexpected str() of new object field: {str(obj.my_str_value)}')
+            sys.exit(1)
+        obj.save()
+        retrieved = MyObject.objects.get(pk=obj.pk)
+        if str(retrieved.my_str_value) != "first":
+            print(f'FAIL: Unexpected str() of retrieved object field: {str(retrieved.my_str_value)}')
+            sys.exit(1)
+        print("PASS: test_enum_bug completed successfully.")
diff --git a/scripts/__init__.py b/scripts/__init__.py
new file mode 100644
index 0000000000..8b13789179
--- /dev/null
+++ b/scripts/__init__.py
@@ -0,0 +1 @@
+
diff --git a/scripts/test_enum_bug.py b/scripts/test_enum_bug.py
new file mode 100644
index 0000000000..b684327ccf
--- /dev/null
+++ b/scripts/test_enum_bug.py
@@ -0,0 +1,33 @@
+import sys
+import os
+import django
+from django.conf import settings
+from django.test.utils import get_runner
+
+BASE_DIR = os.path.dirname(os.path.abspath(__file__))
+
+if not settings.configured:
+    settings.configure(
+        SECRET_KEY='test',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+            'script_test_enum_bug.apps.ScriptTestEnumBugConfig',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        MIDDLEWARE=[],
+        TEMPLATES=[],
+        MIGRATION_MODULES={'script_test_enum_bug': None},
+    )
+
+django.setup()
+
+if __name__ == '__main__':
+    test_runner = get_runner(settings)()
+    failures = test_runner.run_tests(['script_test_enum_bug'])
+    sys.exit(bool(failures))
