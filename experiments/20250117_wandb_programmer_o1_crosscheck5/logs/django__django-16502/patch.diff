diff --git a/django/core/servers/basehttp.py b/django/core/servers/basehttp.py
index fef5532e58..adb530e068 100644
--- a/django/core/servers/basehttp.py
+++ b/django/core/servers/basehttp.py
@@ -146,6 +146,14 @@ class ServerHandler(simple_server.ServerHandler):
     def close(self):
         self.get_stdin().read()
         super().close()
+    def write(self, data):
+        """
+        Override the default write method to strip response body on HEAD requests.
+        """
+        if self.environ.get("REQUEST_METHOD") == "HEAD":
+            return
+        super().write(data)
+    
 
 
 class WSGIRequestHandler(simple_server.WSGIRequestHandler):
diff --git a/test_head_project/db.sqlite3 b/test_head_project/db.sqlite3
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_head_project/manage.py b/test_head_project/manage.py
new file mode 100755
index 0000000000..8829a37ae4
--- /dev/null
+++ b/test_head_project/manage.py
@@ -0,0 +1,22 @@
+#!/usr/bin/env python
+"""Django's command-line utility for administrative tasks."""
+import os
+import sys
+
+
+def main():
+    """Run administrative tasks."""
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "test_head_project.settings")
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+
+if __name__ == "__main__":
+    main()
diff --git a/test_head_project/test_head_project/__init__.py b/test_head_project/test_head_project/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_head_project/test_head_project/asgi.py b/test_head_project/test_head_project/asgi.py
new file mode 100644
index 0000000000..aaf97bf41e
--- /dev/null
+++ b/test_head_project/test_head_project/asgi.py
@@ -0,0 +1,16 @@
+"""
+ASGI config for test_head_project project.
+
+It exposes the ASGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/asgi/
+"""
+
+import os
+
+from django.core.asgi import get_asgi_application
+
+os.environ.setdefault("DJANGO_SETTINGS_MODULE", "test_head_project.settings")
+
+application = get_asgi_application()
diff --git a/test_head_project/test_head_project/settings.py b/test_head_project/test_head_project/settings.py
new file mode 100644
index 0000000000..fbc1605541
--- /dev/null
+++ b/test_head_project/test_head_project/settings.py
@@ -0,0 +1,123 @@
+"""
+Django settings for test_head_project project.
+
+Generated by 'django-admin startproject' using Django 5.0.dev20230126185448.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/topics/settings/
+
+For the full list of settings and their values, see
+https://docs.djangoproject.com/en/dev/ref/settings/
+"""
+
+from pathlib import Path
+
+# Build paths inside the project like this: BASE_DIR / 'subdir'.
+BASE_DIR = Path(__file__).resolve().parent.parent
+
+
+# Quick-start development settings - unsuitable for production
+# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/
+
+# SECURITY WARNING: keep the secret key used in production secret!
+SECRET_KEY = "django-insecure-jlut_6&hk7&x83nqtvaizld7ulqt@@mu5$v@s1c9)-i4$3e)m*"
+
+# SECURITY WARNING: don't run with debug turned on in production!
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+
+# Application definition
+
+INSTALLED_APPS = [
+    "django.contrib.admin",
+    "django.contrib.auth",
+    "django.contrib.contenttypes",
+    "django.contrib.sessions",
+    "django.contrib.messages",
+    "django.contrib.staticfiles",
+]
+
+MIDDLEWARE = [
+    "django.middleware.security.SecurityMiddleware",
+    "django.contrib.sessions.middleware.SessionMiddleware",
+    "django.middleware.common.CommonMiddleware",
+    "django.middleware.csrf.CsrfViewMiddleware",
+    "django.contrib.auth.middleware.AuthenticationMiddleware",
+    "django.contrib.messages.middleware.MessageMiddleware",
+    "django.middleware.clickjacking.XFrameOptionsMiddleware",
+]
+
+ROOT_URLCONF = "test_head_project.urls"
+
+TEMPLATES = [
+    {
+        "BACKEND": "django.template.backends.django.DjangoTemplates",
+        "DIRS": [],
+        "APP_DIRS": True,
+        "OPTIONS": {
+            "context_processors": [
+                "django.template.context_processors.debug",
+                "django.template.context_processors.request",
+                "django.contrib.auth.context_processors.auth",
+                "django.contrib.messages.context_processors.messages",
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = "test_head_project.wsgi.application"
+
+
+# Database
+# https://docs.djangoproject.com/en/dev/ref/settings/#databases
+
+DATABASES = {
+    "default": {
+        "ENGINE": "django.db.backends.sqlite3",
+        "NAME": BASE_DIR / "db.sqlite3",
+    }
+}
+
+
+# Password validation
+# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
+    },
+    {
+        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
+    },
+    {
+        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
+    },
+    {
+        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
+    },
+]
+
+
+# Internationalization
+# https://docs.djangoproject.com/en/dev/topics/i18n/
+
+LANGUAGE_CODE = "en-us"
+
+TIME_ZONE = "UTC"
+
+USE_I18N = True
+
+USE_TZ = True
+
+
+# Static files (CSS, JavaScript, Images)
+# https://docs.djangoproject.com/en/dev/howto/static-files/
+
+STATIC_URL = "static/"
+
+# Default primary key field type
+# https://docs.djangoproject.com/en/dev/ref/settings/#default-auto-field
+
+DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
diff --git a/test_head_project/test_head_project/urls.py b/test_head_project/test_head_project/urls.py
new file mode 100644
index 0000000000..dbffd16f2a
--- /dev/null
+++ b/test_head_project/test_head_project/urls.py
@@ -0,0 +1,23 @@
+"""
+URL configuration for test_head_project project.
+
+The `urlpatterns` list routes URLs to views. For more information please see:
+    https://docs.djangoproject.com/en/dev/topics/http/urls/
+Examples:
+Function views
+    1. Add an import:  from my_app import views
+    2. Add a URL to urlpatterns:  path('', views.home, name='home')
+Class-based views
+    1. Add an import:  from other_app.views import Home
+    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
+Including another URLconf
+    1. Import the include() function: from django.urls import include, path
+    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
+"""
+
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path("admin/", admin.site.urls),
+]
diff --git a/test_head_project/test_head_project/wsgi.py b/test_head_project/test_head_project/wsgi.py
new file mode 100644
index 0000000000..4e6ae48c98
--- /dev/null
+++ b/test_head_project/test_head_project/wsgi.py
@@ -0,0 +1,16 @@
+"""
+WSGI config for test_head_project project.
+
+It exposes the WSGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/wsgi/
+"""
+
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault("DJANGO_SETTINGS_MODULE", "test_head_project.settings")
+
+application = get_wsgi_application()
diff --git a/test_head_request.py b/test_head_request.py
new file mode 100644
index 0000000000..a2bf603d41
--- /dev/null
+++ b/test_head_request.py
@@ -0,0 +1,60 @@
+import subprocess, time, sys, os, shutil
+
+def main():
+    print("Cleaning up any old test_head_project directory...")
+    if os.path.exists('test_head_project'):
+        shutil.rmtree('test_head_project')
+
+    print("Creating a new Django project to ensure the default welcome page is served...")
+    r = subprocess.run(["django-admin", "startproject", "test_head_project"], capture_output=True, text=True)
+    if r.returncode != 0:
+        print("Failed to create project:", r.stderr)
+        sys.exit(1)
+    print(r.stdout, r.stderr)
+
+    print("Running runserver on port 9999 using test_head_project.")
+    server = subprocess.Popen(
+        [
+            "python",
+            "manage.py",
+            "runserver",
+            "127.0.0.1:9999",
+            "--noreload",
+            "--nothreading"
+        ],
+        cwd="test_head_project",
+        stdout=subprocess.PIPE,
+        stderr=subprocess.PIPE,
+        text=True
+    )
+
+    # Give the server a moment to start up
+    time.sleep(3)
+
+    print("Performing HEAD request to http://127.0.0.1:9999/")
+    curl_cmd = ["curl", "-i", "-X", "HEAD", "http://127.0.0.1:9999/"]
+    result = subprocess.run(curl_cmd, capture_output=True, text=True)
+    output = result.stdout
+
+    print("HEAD request output:")
+    print(output)
+
+    # Attempt to parse the returned headers/body. If there's a blank line with content afterwards, we have a body.
+    lines = output.splitlines()
+    try:
+        blank_line_index = lines.index("")
+        if blank_line_index < (len(lines) - 1):
+            # There's more lines after the blank line => there's a response body
+            print("FAIL: HEAD request returned a body!")
+            server.terminate()
+            sys.exit(1)
+    except ValueError:
+        # No blank line found => presumably no body
+        pass
+
+    print("PASS: HEAD request did not return a body!")
+    server.terminate()
+    sys.exit(0)
+
+if __name__ == "__main__":
+    main()
