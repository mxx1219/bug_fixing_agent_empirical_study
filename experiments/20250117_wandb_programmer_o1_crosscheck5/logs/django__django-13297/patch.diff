diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py
index 8a105d4f35..014cb001bd 100644
--- a/django/db/backends/sqlite3/base.py
+++ b/django/db/backends/sqlite3/base.py
@@ -408,12 +408,45 @@ class SQLiteCursorWrapper(Database.Cursor):
     def execute(self, query, params=None):
         if params is None:
             return Database.Cursor.execute(self, query)
+        from django.utils.functional import SimpleLazyObject
+        # Unwrap any lazy objects
+        if isinstance(params, dict):
+            for k, v in list(params.items()):
+                if isinstance(v, SimpleLazyObject):
+                    params[k] = str(v)
+        else:
+            new_params = []
+            for p in params:
+                if isinstance(p, SimpleLazyObject):
+                    p = str(p)
+                new_params.append(p)
+            params = new_params
         query = self.convert_query(query)
         return Database.Cursor.execute(self, query, params)
+    
 
     def executemany(self, query, param_list):
+        from django.utils.functional import SimpleLazyObject
         query = self.convert_query(query)
-        return Database.Cursor.executemany(self, query, param_list)
+        new_param_list = []
+        for params in param_list:
+            if isinstance(params, dict):
+                np = {}
+                for k, v in list(params.items()):
+                    if isinstance(v, SimpleLazyObject):
+                        np[k] = str(v)
+                    else:
+                        np[k] = v
+                new_param_list.append(np)
+            else:
+                np = []
+                for p in params:
+                    if isinstance(p, SimpleLazyObject):
+                        p = str(p)
+                    np.append(p)
+                new_param_list.append(np)
+        return Database.Cursor.executemany(self, query, new_param_list)
+    
 
     def convert_query(self, query):
         return FORMAT_QMARK_REGEX.sub('?', query).replace('%%', '%')
diff --git a/django/db/backends/sqlite3/operations.py b/django/db/backends/sqlite3/operations.py
index 1f77b3109f..44840605e4 100644
--- a/django/db/backends/sqlite3/operations.py
+++ b/django/db/backends/sqlite3/operations.py
@@ -115,14 +115,15 @@ class DatabaseOperations(BaseDatabaseOperations):
         return "NULL"
 
     def _quote_params_for_last_executed_query(self, params):
-        """
-        Only for last_executed_query! Don't use this to execute SQL queries!
-        """
-        # This function is limited both by SQLITE_LIMIT_VARIABLE_NUMBER (the
-        # number of parameters, default = 999) and SQLITE_MAX_COLUMN (the
-        # number of return values, default = 2000). Since Python's sqlite3
-        # module doesn't expose the get_limit() C API, assume the default
-        # limits are in effect and split the work in batches if needed.
+        # Only for last_executed_query! Don't use this to execute SQL queries!
+        from django.utils.functional import SimpleLazyObject
+        resolved_params = []
+        for p in params:
+            if isinstance(p, SimpleLazyObject):
+                p = str(p)
+            resolved_params.append(p)
+        params = resolved_params
+    
         BATCH_SIZE = 999
         if len(params) > BATCH_SIZE:
             results = ()
@@ -130,16 +131,14 @@ class DatabaseOperations(BaseDatabaseOperations):
                 chunk = params[index:index + BATCH_SIZE]
                 results += self._quote_params_for_last_executed_query(chunk)
             return results
-
+    
         sql = 'SELECT ' + ', '.join(['QUOTE(?)'] * len(params))
-        # Bypass Django's wrappers and use the underlying sqlite3 connection
-        # to avoid logging this query - it would trigger infinite recursion.
         cursor = self.connection.connection.cursor()
-        # Native sqlite3 cursors cannot be used as context managers.
         try:
             return cursor.execute(sql, params).fetchone()
         finally:
             cursor.close()
+    
 
     def last_executed_query(self, cursor, sql, params):
         # Python substitutes parameters in Modules/_sqlite/cursor.c with:
diff --git a/test_templateview_simplelazy_bug.py b/test_templateview_simplelazy_bug.py
new file mode 100644
index 0000000000..af21df64a9
--- /dev/null
+++ b/test_templateview_simplelazy_bug.py
@@ -0,0 +1,103 @@
+import sys
+import os
+
+"""
+Simple reproduction script for the regression where a SimpleLazyObject is used
+for a slug kwarg in TemplateView, causing a SQLite parameter bind error.
+Exits non-zero if the bug is present, 0 if the bug is fixed.
+"""
+
+import django
+from django.conf import settings
+from django.db import connections
+from django.http import HttpRequest
+from django.urls import path
+from django.views.generic import TemplateView
+from django.shortcuts import get_object_or_404
+from django.db import models
+from django.apps import AppConfig
+
+# A simple app config for our inline test app.
+class InlineTestApp(AppConfig):
+    # The 'name' should match this file's module, i.e. '__main__' 
+    # so Django can import this script as a module. 
+    name = '__main__'
+
+# Minimal test settings
+if not settings.configured:
+    settings.configure(
+        SECRET_KEY="test-key",
+        DEBUG=True,
+        ALLOWED_HOSTS=["*"],
+        ROOT_URLCONF=__name__,
+        INSTALLED_APPS=[
+            "django.contrib.contenttypes",
+            "django.contrib.auth",
+            "__main__.InlineTestApp",  # Reference the AppConfig
+        ],
+        DATABASES={
+            "default": {
+                "ENGINE": "django.db.backends.sqlite3",
+                "NAME": ":memory:",
+            }
+        },
+        MIDDLEWARE=[],
+    )
+
+django.setup()
+
+# Minimal model
+class Account(models.Model):
+    slug = models.SlugField()
+
+    class Meta:
+        # The label must match the AppConfig label if we want to group them, 
+        # but it's not strictly necessary unless we want them to appear 
+        # nicely in migrations etc.
+        app_label = 'inline_test_app'
+
+# Minimal OfferView
+class OfferView(TemplateView):
+    template_name = "offers/offer.html"
+    def get_context_data(self, **kwargs):
+        offer_slug = kwargs.get("offer_slug", "")
+        # Use get_object_or_404 with slug=offer_slug.
+        # If the bug is present, this will cause a SQLite bind error 
+        # if offer_slug is a SimpleLazyObject.
+        try:
+            offer = get_object_or_404(Account, slug=offer_slug)
+        except Exception as ex:
+            print("Got exception:", ex)
+            raise
+        return {"offer": offer, "offer_slug": offer_slug}
+
+# Set up URLs
+urlpatterns = [
+    path("offers/<slug:offer_slug>/", OfferView.as_view(), name="offer_view"),
+]
+
+def main():
+    # Initialize the test DB schema
+    with connections["default"].schema_editor() as schema_editor:
+        schema_editor.create_model(Account)
+    # Add a test row
+    Account.objects.create(slug="testslug")
+
+    # Make a fake request
+    request = HttpRequest()
+    request.method = "GET"
+    # Access OfferView via its as_view call
+    response_callable = OfferView.as_view()
+    try:
+        # The slug is "testslug"; if the bug is present, we get 
+        # a DB error about binding param if it's a SimpleLazyObject
+        resp = response_callable(request, offer_slug="testslug")
+        print("No error. Test PASSED (meaning the fix is present).")
+        sys.exit(0)
+    except Exception as e:
+        print("Encountered the SQLite binding error (bug triggered). Error was:", e)
+        print("Test FAILED. The problem is still present.")
+        sys.exit(1)
+
+if __name__ == "__main__":
+    main()
