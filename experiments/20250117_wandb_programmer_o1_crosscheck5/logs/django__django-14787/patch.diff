diff --git a/django/utils/decorators.py b/django/utils/decorators.py
index 5c9a5d01c7..0704ab2a96 100644
--- a/django/utils/decorators.py
+++ b/django/utils/decorators.py
@@ -33,11 +33,10 @@ def _multi_decorate(decorators, method):
         decorators = [decorators]
 
     def _wrapper(self, *args, **kwargs):
-        # bound_method has the signature that 'decorator' expects i.e. no
-        # 'self' argument, but it's a closure over self so it can call
-        # 'func'. Also, wrap method.__get__() in a function because new
-        # attributes can't be set on bound method objects, only on functions.
-        bound_method = partial(method.__get__(self, type(self)))
+        @wraps(method)
+        def bound_method(*a, **k):
+            return method.__get__(self, type(self))(*a, **k)
+
         for dec in decorators:
             bound_method = dec(bound_method)
         return bound_method(*args, **kwargs)
@@ -50,6 +49,7 @@ def _multi_decorate(decorators, method):
     return _wrapper
 
 
+
 def method_decorator(decorator, name=''):
     """
     Convert a function decorator into a method decorator
diff --git a/test_method_decorator_preserve_wrapper_assignments.py b/test_method_decorator_preserve_wrapper_assignments.py
new file mode 100644
index 0000000000..2e60339a99
--- /dev/null
+++ b/test_method_decorator_preserve_wrapper_assignments.py
@@ -0,0 +1,42 @@
+#!/usr/bin/env python3
+import sys
+import logging
+from functools import wraps
+from django.utils.decorators import method_decorator
+
+logger = logging.getLogger(__name__)
+
+def logger_decorator(func):
+    @wraps(func)
+    def inner(*args, **kwargs):
+        try:
+            result = func(*args, **kwargs)
+        except Exception as e:
+            result = str(e)
+        finally:
+            logging.debug(f"{func.__name__} called with args: {args} and kwargs: {kwargs} resulting: {result}")
+        return result
+    return inner
+
+class Test:
+    @method_decorator(logger_decorator)
+    def hello_world(self):
+        return "hello"
+
+def main():
+    try:
+        # This should fail on HEAD if method_decorator incorrectly uses partial without preserving __name__.
+        result = Test().hello_world()
+        # If no AttributeError was raised, let's check if the name was preserved
+        actual_name = Test().hello_world.__name__
+        if actual_name != "hello_world":
+            print(f"ERROR: The name is not 'hello_world'. Found '{actual_name}'")
+            sys.exit(1)
+        print("SUCCESS: method_decorator preserved the wrapper assignments.")
+        sys.exit(0)
+    except AttributeError as e:
+        print(f"ERROR: {e}")
+        sys.exit(1)
+
+if __name__ == "__main__":
+    main()
