diff --git a/django/core/files/locks.py b/django/core/files/locks.py
index c46b00b905..696ec01797 100644
--- a/django/core/files/locks.py
+++ b/django/core/files/locks.py
@@ -107,9 +107,18 @@ else:
             return True
     else:
         def lock(f, flags):
-            ret = fcntl.flock(_fd(f), flags)
-            return ret == 0
+            import fcntl
+            try:
+                fcntl.flock(_fd(f), flags)
+                return True
+            except OSError:
+                return False
 
         def unlock(f):
-            ret = fcntl.flock(_fd(f), fcntl.LOCK_UN)
-            return ret == 0
+            import fcntl
+            try:
+                fcntl.flock(_fd(f), fcntl.LOCK_UN)
+                return True
+            except OSError:
+                return False
+
diff --git a/test_lock_bug.py b/test_lock_bug.py
new file mode 100644
index 0000000000..4b16e7dc0d
--- /dev/null
+++ b/test_lock_bug.py
@@ -0,0 +1,40 @@
+import sys, os
+
+def main():
+    print("Starting test_lock_bug")
+    from django.core.files.locks import lock, unlock, LOCK_EX, LOCK_NB
+    import tempfile
+
+    # Create a temporary file
+    with tempfile.NamedTemporaryFile('wb', delete=False) as tf:
+        tf.write(b"Testing lock bug\n")
+        tf.flush()
+
+        f = open(tf.name, 'rb')
+        print("File is:", tf.name)
+
+        try:
+            # Attempt to acquire a non-blocking exclusive lock
+            success = lock(f, LOCK_EX | LOCK_NB)
+            print("Acquired lock?", success)
+            if not success:
+                print("FAIL: Expected success for lock()")
+                sys.exit(2)
+
+            # Attempt to unlock
+            success = unlock(f)
+            print("Unlocked?", success)
+            if not success:
+                print("FAIL: Expected success for unlock()")
+                sys.exit(3)
+
+        finally:
+            print("Closing file and removing it")
+            f.close()
+            os.unlink(tf.name)
+
+    print("PASS: test_lock_bug passes")
+    sys.exit(0)
+
+if __name__ == '__main__':
+    main()
