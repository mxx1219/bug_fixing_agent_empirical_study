diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py
index b6af5f5491..dcf7e1d5e3 100644
--- a/django/utils/autoreload.py
+++ b/django/utils/autoreload.py
@@ -211,11 +211,6 @@ def sys_path_directories():
 
 
 def get_child_arguments():
-    """
-    Return the executable. This contains a workaround for Windows if the
-    executable is reported to not have the .exe extension which can cause bugs
-    on reloading.
-    """
     import __main__
     py_script = Path(sys.argv[0])
 
@@ -223,8 +218,12 @@ def get_child_arguments():
     # __spec__ is set when the server was started with the `-m` option,
     # see https://docs.python.org/3/reference/import.html#main-spec
     # __spec__ may not exist, e.g. when running in a Conda env.
-    if getattr(__main__, '__spec__', None) is not None and __main__.__spec__.parent:
-        args += ['-m', __main__.__spec__.parent]
+    if getattr(__main__, '__spec__', None) is not None and __main__.__spec__.name:
+        name = __main__.__spec__.name
+        # If the name ends with ".__main__", remove that suffix (e.g. django.__main__ -> django)
+        if name.endswith('.__main__'):
+            name = name[: -len('.__main__')]
+        args += ['-m', name]
         args += sys.argv[1:]
     elif not py_script.exists():
         # sys.argv[0] may not exist for several reasons on Windows.
@@ -243,6 +242,8 @@ def get_child_arguments():
     return args
 
 
+
+
 def trigger_reload(filename):
     logger.info('%s changed, reloading.', filename)
     sys.exit(3)
diff --git a/test_custom_module_autoreload.py b/test_custom_module_autoreload.py
new file mode 100644
index 0000000000..db3b8a1745
--- /dev/null
+++ b/test_custom_module_autoreload.py
@@ -0,0 +1,53 @@
+import sys
+import types
+
+def main():
+    print("Running test for custom module autoreload scenario.")
+    from django.utils.autoreload import get_child_arguments
+
+    # Save the original __spec__ and argv
+    old_spec = getattr(sys.modules["__main__"], "__spec__", None)
+    old_argv = sys.argv[:]
+    old_warnoptions = sys.warnoptions[:]
+
+    # Mock that we were invoked as python -m foo.bar.baz
+    mock_spec = types.SimpleNamespace(
+        name="foo.bar.baz",
+        parent="foo.bar",
+        origin="somewhere",
+        has_location=True,
+        loader=types.SimpleNamespace(archive=None),
+    )
+    sys.modules["__main__"].__spec__ = mock_spec
+    sys.argv = ["foo/bar/baz", "runserver"]
+    sys.warnoptions = ["default"]
+
+    try:
+        print("Mocked __spec__:", sys.modules["__main__"].__spec__)
+        print("Mocked argv:", sys.argv)
+        args = get_child_arguments()
+        print("Child arguments returned by get_child_arguments():", args)
+
+        # We expect something like:
+        # [
+        #   sys.executable,
+        #   '-Wdefault',  # or other -W options
+        #   '-m',
+        #   'foo.bar.baz',
+        #   'runserver'
+        # ]
+        if '-m' in args:
+            idx = args.index('-m')
+            if idx + 1 < len(args) and args[idx + 1] == "foo.bar.baz" and "runserver" in args:
+                print("Test passed! Full dotted path was preserved.")
+                sys.exit(0)
+        print("Test FAILED! The dotted path was not preserved.")
+        sys.exit(1)
+
+    finally:
+        sys.modules["__main__"].__spec__ = old_spec
+        sys.argv = old_argv
+        sys.warnoptions = old_warnoptions
+
+if __name__ == "__main__":
+    main()
