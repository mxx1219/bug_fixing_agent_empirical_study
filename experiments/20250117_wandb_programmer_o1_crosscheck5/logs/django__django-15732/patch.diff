diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py
index f2ca8c8df9..7530c5958f 100644
--- a/django/db/backends/base/schema.py
+++ b/django/db/backends/base/schema.py
@@ -518,22 +518,19 @@ class BaseDatabaseSchemaEditor:
             self.execute(sql)
 
     def alter_unique_together(self, model, old_unique_together, new_unique_together):
-        """
-        Deal with a model changing its unique_together. The input
-        unique_togethers must be doubly-nested, not the single-nested
-        ["foo", "bar"] format.
-        """
         olds = {tuple(fields) for fields in old_unique_together}
         news = {tuple(fields) for fields in new_unique_together}
         # Deleted uniques
         for fields in olds.difference(news):
+            # Add primary_key=False so that the PK's inherent uniqueness won't be counted.
             self._delete_composed_index(
-                model, fields, {"unique": True}, self.sql_delete_unique
+                model, fields, {"unique": True, "primary_key": False}, self.sql_delete_unique
             )
         # Created uniques
         for field_names in news.difference(olds):
             fields = [model._meta.get_field(field) for field in field_names]
             self.execute(self._create_unique_sql(model, fields))
+    
 
     def alter_index_together(self, model, old_index_together, new_index_together):
         """
diff --git a/scripts/test_drop_single_pk_unique.py b/scripts/test_drop_single_pk_unique.py
new file mode 100644
index 0000000000..fd13f98eec
--- /dev/null
+++ b/scripts/test_drop_single_pk_unique.py
@@ -0,0 +1,78 @@
+#!/usr/bin/env python3
+
+import sys
+import traceback
+from django.conf import settings
+from django.db import connection, models
+from django.core.management import call_command
+
+# Minimal Django setup.
+settings.configure(
+    SECRET_KEY="dummy",
+    INSTALLED_APPS=["django.contrib.contenttypes"],  # needed so we can define a model
+    DATABASES={
+        "default": {
+            "ENGINE": "django.db.backends.postgresql",
+            "NAME": "test_db",
+            "USER": "postgres",
+            "PASSWORD": "",
+            "HOST": "localhost",
+            "PORT": "5432",
+        }
+    },
+)
+
+import django
+django.setup()
+
+# Define a minimal model in a test-only app label.
+class Foo(models.Model):
+    id = models.AutoField(primary_key=True)
+
+    class Meta:
+        app_label = "testapp"  # not an actual app, just a label for the model
+
+def main():
+    print("STEP 1: Creating schema for the Foo model (with PK on 'id').")
+    try:
+        with connection.schema_editor() as editor:
+            editor.create_model(Foo)
+        print("  ...Created table for Foo.")
+    except Exception as e:
+        print("ERROR creating model table:", e)
+        sys.exit(1)
+
+    print("STEP 2: Adding a second unique constraint on the same 'id' column.")
+    # Add this extra unique constraint so that we have 2 constraints
+    # (PK and the newly added UNIQUE)
+    try:
+        # We'll use add_constraint with a UniqueConstraint
+        from django.db.models.constraints import UniqueConstraint
+        constraint = UniqueConstraint(fields=["id"], name="foo_id_extra_uniq")
+        with connection.schema_editor() as editor:
+            editor.add_constraint(Foo, constraint)
+        print("  ...Added second unique constraint 'foo_id_extra_uniq'.")
+    except Exception as e:
+        print("ERROR adding second unique constraint:", e)
+        sys.exit(1)
+
+    print("STEP 3: Attempting to remove this newly added unique constraint by simulating unique_together removal.")
+    # old_unique_together has {('id',)}, new is empty => we expect to drop exactly one unique constraint
+    # but if the bug is present, the code sees the PK constraint as well, leading to a ValueError
+    try:
+        with connection.schema_editor() as editor:
+            editor.alter_unique_together(
+                Foo,
+                old_unique_together={(("id",))},
+                new_unique_together=set(),
+            )
+        print("  ...Successfully removed the single-column unique constraint. BUG is FIXED.")
+        sys.exit(0)  # We only get here if the code works (no ValueError).
+    except Exception as e:
+        print("ERROR removing single-column unique constraint. Likely the BUG is present.")
+        print("Exception info:")
+        traceback.print_exc()
+        sys.exit(1)
+
+if __name__ == "__main__":
+    main()
