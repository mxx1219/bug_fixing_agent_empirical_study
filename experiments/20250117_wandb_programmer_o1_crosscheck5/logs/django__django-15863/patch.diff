diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index 7a5b28d159..89372ebe70 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -136,6 +136,10 @@ def floatformat(text, arg=-1):
     If the input float is infinity or NaN, display the string representation
     of that value.
     """
+    from decimal import ROUND_HALF_UP, Context, Decimal, InvalidOperation
+    from django.utils import formats
+    from django.utils.safestring import mark_safe
+
     force_grouping = False
     use_l10n = True
     if isinstance(arg, str):
@@ -150,9 +154,15 @@ def floatformat(text, arg=-1):
         elif last_char == "u":
             use_l10n = False
             arg = arg[:-1] or -1
+
     try:
-        input_val = repr(text)
-        d = Decimal(input_val)
+        # Bypass fallback if text is already a Decimal
+        if isinstance(text, Decimal):
+            input_val = str(text)
+            d = text
+        else:
+            input_val = repr(text)
+            d = Decimal(input_val)
     except InvalidOperation:
         try:
             d = Decimal(str(float(text)))
@@ -206,6 +216,7 @@ def floatformat(text, arg=-1):
     )
 
 
+
 @register.filter(is_safe=True)
 @stringfilter
 def iriencode(value):
diff --git a/test_floatformat_decimal.py b/test_floatformat_decimal.py
new file mode 100644
index 0000000000..7b21e35c42
--- /dev/null
+++ b/test_floatformat_decimal.py
@@ -0,0 +1,33 @@
+import sys
+from decimal import Decimal
+from django.conf import settings
+from django.template import Template, Context
+from django import setup
+
+def main():
+    print("Configuring settings with in-memory templates..")
+    TEMPLATES = [
+        {
+            'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        },
+    ]
+    settings.configure(TEMPLATES=TEMPLATES)
+    setup()
+    print("Creating template..")
+    t = Template('{{ value|floatformat:20 }}')
+    my_decimal = Decimal('42.12345678901234567890')
+    c = Context({'value': my_decimal})
+    print("Rendering template..")
+    result = t.render(c)
+    print("Result is:", result)
+    expected = '42.12345678901234567890'
+    print("Expected is:", expected)
+    if result.strip() == expected:
+        print("Test passed.")
+        sys.exit(0)
+    else:
+        print("Test failed.")
+        sys.exit(1)
+
+if __name__ == '__main__':
+    main()
