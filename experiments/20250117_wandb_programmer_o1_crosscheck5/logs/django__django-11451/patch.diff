diff --git a/django/contrib/auth/backends.py b/django/contrib/auth/backends.py
index f4b1722757..db849ffe45 100644
--- a/django/contrib/auth/backends.py
+++ b/django/contrib/auth/backends.py
@@ -39,6 +39,8 @@ class ModelBackend(BaseBackend):
     def authenticate(self, request, username=None, password=None, **kwargs):
         if username is None:
             username = kwargs.get(UserModel.USERNAME_FIELD)
+        if username is None or password is None:
+            return
         try:
             user = UserModel._default_manager.get_by_natural_key(username)
         except UserModel.DoesNotExist:
@@ -48,6 +50,7 @@ class ModelBackend(BaseBackend):
         else:
             if user.check_password(password) and self.user_can_authenticate(user):
                 return user
+    
 
     def user_can_authenticate(self, user):
         """
diff --git a/test_username_none.py b/test_username_none.py
new file mode 100644
index 0000000000..31caeff244
--- /dev/null
+++ b/test_username_none.py
@@ -0,0 +1,42 @@
+import sys
+import django
+from django.conf import settings
+from django.db import connection
+from django.core.management import call_command
+from django.test.utils import CaptureQueriesContext
+
+def main():
+    print("Starting test for username=None in ModelBackend.authenticate()")
+    if not settings.configured:
+        settings.configure(
+            DEBUG=True,
+            DATABASES={
+                'default': {
+                    'ENGINE': 'django.db.backends.sqlite3',
+                    'NAME': ':memory:',
+                }
+            },
+            INSTALLED_APPS=[
+                'django.contrib.auth',
+                'django.contrib.contenttypes',
+            ],
+            MIDDLEWARE_CLASSES=[],
+        )
+    django.setup()
+    call_command('migrate', interactive=False, verbosity=0)
+    from django.contrib.auth import authenticate
+
+    with CaptureQueriesContext(connection) as cqc:
+        authenticate(username=None, password=None)
+    if len(cqc.captured_queries) == 0:
+        print("No queries => Bug is fixed => test passes.")
+        sys.exit(0)
+    else:
+        print("Found queries => Bug is present => test fails.")
+        print("Captured queries:")
+        for q in cqc.captured_queries:
+            print(q)
+        sys.exit(1)
+
+if __name__ == "__main__":
+    main()
