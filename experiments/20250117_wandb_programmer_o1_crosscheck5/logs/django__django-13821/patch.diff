diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py
index ab4ea70492..c587f9f97e 100644
--- a/django/db/backends/sqlite3/base.py
+++ b/django/db/backends/sqlite3/base.py
@@ -64,8 +64,9 @@ def list_aggregate(function):
 
 
 def check_sqlite_version():
-    if Database.sqlite_version_info < (3, 8, 3):
-        raise ImproperlyConfigured('SQLite 3.8.3 or later is required (found %s).' % Database.sqlite_version)
+    if Database.sqlite_version_info < (3, 9, 0):
+        raise ImproperlyConfigured('SQLite 3.9.0 or later is required (found %s).' % Database.sqlite_version)
+
 
 
 check_sqlite_version()
diff --git a/test_drop_sqlite_3_9_0.py b/test_drop_sqlite_3_9_0.py
new file mode 100644
index 0000000000..205f4bb59b
--- /dev/null
+++ b/test_drop_sqlite_3_9_0.py
@@ -0,0 +1,55 @@
+import sys
+import traceback
+from django.db.backends.sqlite3.base import check_sqlite_version, Database
+from django.core.exceptions import ImproperlyConfigured
+
+def main():
+    print("Testing dropping support for SQLite < 3.9.0")
+    old_version_info = Database.sqlite_version_info
+    old_version = Database.sqlite_version
+    try:
+        # Test with a version below 3.9.0 => Expect ImproperlyConfigured to be raised
+        Database.sqlite_version_info = (3, 8, 5)
+        Database.sqlite_version = "3.8.5"
+        print("Set sqlite_version_info to (3,8,5)")
+        raised = False
+        try:
+            check_sqlite_version()
+        except ImproperlyConfigured as e:
+            raised = True
+            print("Got ImproperlyConfigured:", e)
+        if not raised:
+            print("Error! Did not raise ImproperlyConfigured for (3,8,5). Failing test.")
+            sys.exit(1)
+        else:
+            print("Correctly raised ImproperlyConfigured for (3,8,5).")
+
+        # Test with a version equal to or above 3.9.0 => Expect no exception
+        Database.sqlite_version_info = (3, 9, 0)
+        Database.sqlite_version = "3.9.0"
+        print("Set sqlite_version_info to (3,9,0)")
+        raised = False
+        try:
+            check_sqlite_version()
+        except ImproperlyConfigured as e:
+            raised = True
+            print("Got ImproperlyConfigured:", e)
+        if raised:
+            print("Error! check_sqlite_version raised for >= (3,9,0).")
+            sys.exit(1)
+        else:
+            print("Correctly did NOT raise ImproperlyConfigured for (3,9,0).")
+
+        print("All checks pass. Exiting with code 0.")
+        sys.exit(0)
+    except Exception as e:
+        print("Unexpected error during test!", e)
+        traceback.print_exc()
+        sys.exit(1)
+    finally:
+        # Restore original
+        Database.sqlite_version_info = old_version_info
+        Database.sqlite_version = old_version
+
+if __name__ == "__main__":
+    main()
