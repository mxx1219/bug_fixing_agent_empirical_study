diff --git a/django/forms/formsets.py b/django/forms/formsets.py
index a89c35599f..e9d77c1b35 100644
--- a/django/forms/formsets.py
+++ b/django/forms/formsets.py
@@ -333,12 +333,12 @@ class BaseFormSet:
         self._non_form_errors.
         """
         self._errors = []
-        self._non_form_errors = self.error_class()
+        self._non_form_errors = self.error_class(error_class='nonform')
         empty_forms_count = 0
-
+    
         if not self.is_bound:  # Stop further processing.
             return
-
+    
         if not self.management_form.is_valid():
             error = ValidationError(
                 self.error_messages['missing_management_form'],
@@ -351,7 +351,7 @@ class BaseFormSet:
                 code='missing_management_form',
             )
             self._non_form_errors.append(error)
-
+    
         for i, form in enumerate(self.forms):
             # Empty forms are unchanged forms beyond those with initial data.
             if not form.has_changed() and i >= self.initial_form_count():
@@ -380,7 +380,8 @@ class BaseFormSet:
             # Give self.clean() a chance to do cross-form validation.
             self.clean()
         except ValidationError as e:
-            self._non_form_errors = self.error_class(e.error_list)
+            self._non_form_errors = self.error_class(e.error_list, error_class='nonform')
+    
 
     def clean(self):
         """
diff --git a/test_formset_nonform.py b/test_formset_nonform.py
new file mode 100644
index 0000000000..a31d828b18
--- /dev/null
+++ b/test_formset_nonform.py
@@ -0,0 +1,54 @@
+import sys
+import django
+from django.conf import settings
+from django.forms import Form, CharField, BaseFormSet, ValidationError
+
+# Configure settings if not already configured.
+if not settings.configured:
+    settings.configure(
+        SECRET_KEY='fake-key',
+        USE_I18N=False,
+        USE_L10N=False,
+        USE_TZ=False,
+    )
+django.setup()
+
+class MyTestForm(Form):
+    name = CharField(required=True)
+
+class MyTestFormSet(BaseFormSet):
+    # Provide defaults normally assigned by formset_factory()
+    form = MyTestForm
+    extra = 1
+    can_order = False
+    can_delete = False
+    max_num = 1000
+    validate_max = False
+    min_num = 0
+    validate_min = False
+    absolute_max = 2000
+    can_delete_extra = True
+
+    def clean(self):
+        # Force a formset-level error
+        print("Inside MyTestFormSet.clean(). Raising ValidationError.")
+        raise ValidationError("Simulated formset-wide error.")
+
+def main():
+    print("STEP 1: Creating MyTestFormSet instance with data to make it bound...")
+    fs = MyTestFormSet(data={'form-TOTAL_FORMS': '1', 'form-INITIAL_FORMS': '0'})
+    print("STEP 2: Calling is_valid() to trigger validation and non-form errors...")
+    fs.is_valid()
+    print("STEP 3: Retrieving non_form_errors...")
+    errors_html = str(fs.non_form_errors())
+    print(f'Observed non_form_errors HTML: {errors_html}')
+    print("STEP 4: Checking if 'nonform' CSS class is present in the error HTML.")
+    if 'nonform' in errors_html:
+        print("PASS: 'nonform' class is present in formset non_form_errors.")
+        sys.exit(0)
+    else:
+        print("FAIL: 'nonform' class is NOT present in formset non_form_errors.")
+        sys.exit(1)
+
+if __name__ == "__main__":
+    main()
