diff --git a/astropy/units/decorators.py b/astropy/units/decorators.py
index 8bece5a850..b34046a907 100644
--- a/astropy/units/decorators.py
+++ b/astropy/units/decorators.py
@@ -153,79 +153,53 @@ class QuantityInput:
         self.decorator_kwargs = kwargs
 
     def __call__(self, wrapped_function):
-
-        # Extract the function signature for the function we are wrapping.
         wrapped_signature = inspect.signature(wrapped_function)
-
-        # Define a new function to return in place of the wrapped one
+    
         @wraps(wrapped_function)
         def wrapper(*func_args, **func_kwargs):
-            # Bind the arguments to our new function to the signature of the original.
             bound_args = wrapped_signature.bind(*func_args, **func_kwargs)
-
-            # Iterate through the parameters of the original signature
+    
             for param in wrapped_signature.parameters.values():
-                # We do not support variable arguments (*args, **kwargs)
-                if param.kind in (inspect.Parameter.VAR_KEYWORD,
-                                  inspect.Parameter.VAR_POSITIONAL):
+                if param.kind in (inspect.Parameter.VAR_KEYWORD, inspect.Parameter.VAR_POSITIONAL):
                     continue
-
-                # Catch the (never triggered) case where bind relied on a default value.
+    
                 if param.name not in bound_args.arguments and param.default is not param.empty:
                     bound_args.arguments[param.name] = param.default
-
-                # Get the value of this parameter (argument to new function)
+    
                 arg = bound_args.arguments[param.name]
-
-                # Get target unit or physical type, either from decorator kwargs
-                #   or annotations
                 if param.name in self.decorator_kwargs:
                     targets = self.decorator_kwargs[param.name]
                 else:
                     targets = param.annotation
-
-                # If the targets is empty, then no target units or physical
-                #   types were specified so we can continue to the next arg
+    
                 if targets is inspect.Parameter.empty:
                     continue
-
-                # If the argument value is None, and the default value is None,
-                #   pass through the None even if there is a target unit
+    
                 if arg is None and param.default is None:
                     continue
-
-                # Here, we check whether multiple target unit/physical type's
-                #   were specified in the decorator/annotation, or whether a
-                #   single string (unit or physical type) or a Unit object was
-                #   specified
+    
                 if isinstance(targets, str) or not isiterable(targets):
                     valid_targets = [targets]
-
-                # Check for None in the supplied list of allowed units and, if
-                #   present and the passed value is also None, ignore.
                 elif None in targets:
                     if arg is None:
                         continue
                     else:
                         valid_targets = [t for t in targets if t is not None]
-
                 else:
                     valid_targets = targets
-
-                # Now we loop over the allowed units/physical types and validate
-                #   the value of the argument:
-                _validate_arg_value(param.name, wrapped_function.__name__,
-                                    arg, valid_targets, self.equivalencies)
-
-            # Call the original function with any equivalencies in force.
+    
+                _validate_arg_value(param.name, wrapped_function.__name__, arg, valid_targets, self.equivalencies)
+    
             with add_enabled_equivalencies(self.equivalencies):
                 return_ = wrapped_function(*func_args, **func_kwargs)
-            if wrapped_signature.return_annotation is not inspect.Signature.empty:
+            if (wrapped_signature.return_annotation is not inspect.Signature.empty 
+                    and return_ is not None):
                 return return_.to(wrapped_signature.return_annotation)
             else:
                 return return_
-
+    
         return wrapper
+    
 
 
 quantity_input = QuantityInput.as_decorator
diff --git a/test_issue_poc.py b/test_issue_poc.py
new file mode 100644
index 0000000000..e860169790
--- /dev/null
+++ b/test_issue_poc.py
@@ -0,0 +1,20 @@
+import sys
+import astropy.units as u
+
+class PoC:
+    @u.quantity_input
+    def __init__(self, voltage: u.V) -> None:
+        pass
+
+def main():
+    print("Running test for issue with quantity_input on constructor with return None")
+    try:
+        _ = PoC(1.*u.V)
+        print("No error encountered. The fix is presumably in place!")
+        return 0
+    except Exception as e:
+        print("Encountered error: {}".format(e))
+        return 1
+
+if __name__ == "__main__":
+    sys.exit(main())
