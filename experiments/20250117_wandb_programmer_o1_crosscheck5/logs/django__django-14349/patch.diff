diff --git a/django/core/validators.py b/django/core/validators.py
index a385819510..86bb983093 100644
--- a/django/core/validators.py
+++ b/django/core/validators.py
@@ -101,11 +101,16 @@ class URLValidator(RegexValidator):
     def __call__(self, value):
         if not isinstance(value, str):
             raise ValidationError(self.message, code=self.code, params={'value': value})
+    
+        # Reject forbidden whitespace explicitly.
+        if any(char in value for char in "\r\n\t"):
+            raise ValidationError(self.message, code=self.code, params={'value': value})
+    
         # Check if the scheme is valid.
         scheme = value.split('://')[0].lower()
         if scheme not in self.schemes:
             raise ValidationError(self.message, code=self.code, params={'value': value})
-
+    
         # Then check full URL
         try:
             super().__call__(value)
@@ -133,13 +138,12 @@ class URLValidator(RegexValidator):
                     validate_ipv6_address(potential_ip)
                 except ValidationError:
                     raise ValidationError(self.message, code=self.code, params={'value': value})
-
+    
         # The maximum length of a full host name is 253 characters per RFC 1034
-        # section 3.1. It's defined to be 255 bytes or less, but this includes
-        # one byte for the length of the name and one byte for the trailing dot
-        # that's used to indicate absolute names in DNS.
         if len(urlsplit(value).hostname) > 253:
             raise ValidationError(self.message, code=self.code, params={'value': value})
+    
+    
 
 
 integer_validator = RegexValidator(
@@ -276,10 +280,16 @@ def validate_ipv4_address(value):
 
 
 def validate_ipv6_address(value):
-    if not is_valid_ipv6_address(value):
+    import ipaddress
+    from django.core.exceptions import ValidationError
+    from django.utils.translation import gettext_lazy as _
+    try:
+        ipaddress.IPv6Address(value)
+    except ValueError:
         raise ValidationError(_('Enter a valid IPv6 address.'), code='invalid', params={'value': value})
 
 
+
 def validate_ipv46_address(value):
     try:
         validate_ipv4_address(value)
diff --git a/repro_urlvalidator_newline.py b/repro_urlvalidator_newline.py
new file mode 100644
index 0000000000..bc763141dc
--- /dev/null
+++ b/repro_urlvalidator_newline.py
@@ -0,0 +1,24 @@
+import sys
+
+def main():
+    from django.core.validators import URLValidator
+    from django.core.exceptions import ValidationError
+
+    validator = URLValidator()
+    failing_input = [
+        "http://www.djangoproject.com/\n",
+        "http://[::ffff:192.9.5.5]\n",
+    ]
+    for value in failing_input:
+        try:
+            validator(value)
+            print("ERROR: No ValidationError was raised for value that contains an actual newline:", repr(value))
+            sys.exit(1)
+        except ValidationError:
+            print("PASS: ValidationError raised for newline:", repr(value))
+
+    print("All checks pass for newline scenario. The fix is presumably in place.")
+    sys.exit(0)
+
+if __name__ == "__main__":
+    main()
