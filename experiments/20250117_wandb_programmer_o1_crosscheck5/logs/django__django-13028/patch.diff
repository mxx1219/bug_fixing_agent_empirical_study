diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index ce18098fd2..2178dee5d0 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1123,15 +1123,19 @@ class Query(BaseExpression):
                     self.check_query_object_type(v, opts, field)
 
     def check_filterable(self, expression):
-        """Raise an error if expression cannot be used in a WHERE clause."""
+        # If this is a model instance (has _meta) rather than a Django expression,
+        # skip the filterable check entirely to avoid clashing with user fields named 'filterable'.
+        if hasattr(expression, '_meta'):
+            return
         if not getattr(expression, 'filterable', True):
             raise NotSupportedError(
-                expression.__class__.__name__ + ' is disallowed in the filter '
-                'clause.'
+                expression.__class__.__name__ + ' is disallowed in the filter clause.'
             )
         if hasattr(expression, 'get_source_expressions'):
             for expr in expression.get_source_expressions():
                 self.check_filterable(expr)
+    
+    
 
     def build_lookup(self, lookups, lhs, rhs):
         """
diff --git a/test_filterable_bug.py b/test_filterable_bug.py
new file mode 100644
index 0000000000..920f44f724
--- /dev/null
+++ b/test_filterable_bug.py
@@ -0,0 +1,68 @@
+import sys
+import traceback
+import django
+from django.conf import settings
+from django.db import models
+
+def main():
+    print("Setting up test environment.")
+    settings.configure(
+        DEBUG=True,
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'testapp',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        TIME_ZONE='UTC',
+        USE_TZ=True,
+        SECRET_KEY='secret',
+        MIDDLEWARE_CLASSES=(),
+    )
+    django.setup()
+
+    from django.db import connection, transaction
+
+    class ProductMetadataType(models.Model):
+        filterable = models.BooleanField(default=False)  # Field that triggers the bug
+        label = models.CharField(max_length=255, blank=True)
+
+        class Meta:
+            app_label = 'testapp'
+
+    class ProductMetadata(models.Model):
+        metadata_type = models.ForeignKey(ProductMetadataType, on_delete=models.CASCADE)
+        value = models.TextField()
+
+        class Meta:
+            app_label = 'testapp'
+
+    # Create DB tables for the test models
+    with connection.schema_editor() as editor:
+        editor.create_model(ProductMetadataType)
+        editor.create_model(ProductMetadata)
+
+    # Reproduce the bug
+    try:
+        with transaction.atomic():
+            t = ProductMetadataType.objects.create(filterable=False, label='testing')
+            pm = ProductMetadata.objects.create(metadata_type=t, value='Dark Vador')
+
+            print("Filtering on ProductMetadata with metadata_type:", t.id)
+            results = ProductMetadata.objects.filter(value='Dark Vador', metadata_type=t)
+            print("Filter worked; retrieved", results.count(), "items.")
+
+    except Exception as e:
+        traceback.print_exc()
+        print("Bug reproduced: NotSupportedError or unexpected exception encountered.")
+        sys.exit(1)
+
+    print("No error, so the bug is fixed (or never triggered).")
+    sys.exit(0)
+
+if __name__ == "__main__":
+    main()
diff --git a/testapp/__init__.py b/testapp/__init__.py
new file mode 100644
index 0000000000..2f55ccceb8
--- /dev/null
+++ b/testapp/__init__.py
@@ -0,0 +1 @@
+# empty init so that testapp is a recognized Python package
\ No newline at end of file
