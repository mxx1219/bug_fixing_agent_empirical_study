diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 4648daf395..b3ce0647be 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1077,11 +1077,17 @@ class Query(BaseExpression):
         elif isinstance(value, (list, tuple)):
             # The items of the iterable may be expressions and therefore need
             # to be resolved independently.
-            return type(value)(
+            items = (
                 self.resolve_lookup_value(sub_value, can_reuse, allow_joins)
                 for sub_value in value
             )
+            # If this is a namedtuple, expand args. Otherwise, pass them as one iterable.
+            if hasattr(value, '_fields'):
+                return type(value)(*items)
+            else:
+                return type(value)(items)
         return value
+    
 
     def solve_lookup_type(self, lookup):
         """
diff --git a/test_namedtuple_range.py b/test_namedtuple_range.py
new file mode 100644
index 0000000000..1a9479cc26
--- /dev/null
+++ b/test_namedtuple_range.py
@@ -0,0 +1,46 @@
+import sys
+import django
+import os
+from django.conf import settings
+from django.db import models, connection
+from collections import namedtuple
+
+# Minimal project setup
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[],
+        DATABASES={"default": {"ENGINE": "django.db.backends.sqlite3", "NAME": ":memory:"}},
+        SECRET_KEY="testkey",
+    )
+
+django.setup()
+
+class RangeModel(models.Model):
+    value = models.IntegerField()
+    class Meta:
+        app_label = "namedtuple_range_app"
+
+# Create table directly with schema_editor (no migrations).
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(RangeModel)
+
+# Insert sample data.
+RangeModel.objects.create(value=5)
+RangeModel.objects.create(value=10)
+
+MyRange = namedtuple("MyRange", ["start", "end"])
+test_tuple = MyRange(start=5, end=10)
+
+try:
+    # This filter triggers the namedtuple range bug on Django <= 3.0
+    qs = RangeModel.objects.filter(value__range=test_tuple)
+    print("Filter succeeded with namedtuple range argument!")
+    sys.exit(0)
+except TypeError as e:
+    print("TEST FAILED. Got TypeError for namedtuple range, indicating the bug is present.")
+    print(f"Error details: {e}")
+    sys.exit(1)
+except Exception as e:
+    print("TEST FAILED. An unexpected exception occurred.")
+    print(f"Exception details: {e}")
+    sys.exit(1)
