diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index 7264929da8..f0a8c348eb 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -674,47 +674,39 @@ class SQLCompiler:
 
     def get_default_columns(self, start_alias=None, opts=None, from_parent=None):
         """
-        Compute the default columns for selecting every field in the base
-        model. Will sometimes be called to pull in related models (e.g. via
-        select_related), in which case "opts" and "start_alias" will be given
-        to provide a starting point for the traversal.
-
-        Return a list of strings, quoted appropriately for use in SQL
-        directly, as well as a set of aliases used in the select statement (if
-        'as_pairs' is True, return a list of (alias, col_name) pairs instead
-        of strings as the first component and None as the second component).
+        Compute the default columns for selecting every field in the base model.
+        If self.query.subquery is True, only the primary key column is returned,
+        to ensure that subqueries used in an "IN" lookup only produce one column.
+        Otherwise, it returns all concrete columns, as before.
         """
-        result = []
         if opts is None:
             opts = self.query.get_meta()
-        only_load = self.deferred_to_columns()
+        # If the query is used as a subquery, return only the primary key column.
+        if self.query.subquery:
+            alias = start_alias or self.query.get_initial_alias()
+            pk_field = opts.pk
+            return [pk_field.get_col(alias)]
+    
+        result = []
         start_alias = start_alias or self.query.get_initial_alias()
-        # The 'seen_models' is used to optimize checking the needed parent
-        # alias for a given field. This also includes None -> start_alias to
-        # be used by local fields.
+        only_load = self.deferred_to_columns()
+        # The 'seen_models' is used to optimize checking the needed parent alias for a given field.
         seen_models = {None: start_alias}
-
         for field in opts.concrete_fields:
             model = field.model._meta.concrete_model
-            # A proxy model will have a different model and concrete_model. We
-            # will assign None if the field belongs to this model.
             if model == opts.model:
                 model = None
             if from_parent and model is not None and issubclass(
                     from_parent._meta.concrete_model, model._meta.concrete_model):
                 # Avoid loading data for already loaded parents.
-                # We end up here in the case select_related() resolution
-                # proceeds from parent model to child model. In that case the
-                # parent model data is already present in the SELECT clause,
-                # and we want to avoid reloading the same data again.
                 continue
             if field.model in only_load and field.attname not in only_load[field.model]:
                 continue
-            alias = self.query.join_parent_model(opts, model, start_alias,
-                                                 seen_models)
+            alias = self.query.join_parent_model(opts, model, start_alias, seen_models)
             column = field.get_col(alias)
             result.append(column)
         return result
+    
 
     def get_distinct(self):
         """
diff --git a/test_bug_or_subselect.py b/test_bug_or_subselect.py
new file mode 100644
index 0000000000..de553370a2
--- /dev/null
+++ b/test_bug_or_subselect.py
@@ -0,0 +1,71 @@
+import sys
+import django
+from django.conf import settings
+from django.db import connection, models, ProgrammingError
+from django.db.models import Count, Q
+
+# Minimal settings (in-memory sqlite, single module)
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=["__main__"],
+        DATABASES={
+            "default": {
+                "ENGINE": "django.db.backends.sqlite3",
+                "NAME": ":memory:",
+            }
+        },
+        MIDDLEWARE=[],
+    )
+
+django.setup()
+
+class PropertyGroup(models.Model):
+    name = models.CharField(max_length=50, default="N/A")
+    class Meta:
+        app_label = "__main__"
+
+class Agent(models.Model):
+    # ManyToMany through table
+    property_groups = models.ManyToManyField(PropertyGroup, through="AgentPropertyGroup")
+    class Meta:
+        app_label = "__main__"
+
+class AgentPropertyGroup(models.Model):
+    management_agent = models.ForeignKey(Agent, on_delete=models.CASCADE, related_name="agentpropertygroup_set")
+    property_group = models.ForeignKey(PropertyGroup, on_delete=models.CASCADE, related_name="agentpropertygroup_set")
+    class Meta:
+        app_label = "__main__"
+
+def main():
+    # Create our tables directly, bypassing migrations
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(PropertyGroup)
+        schema_editor.create_model(Agent)
+        schema_editor.create_model(AgentPropertyGroup)
+
+    # Insert minimal data
+    agent = Agent.objects.create()
+    property_group = PropertyGroup.objects.create()
+    AgentPropertyGroup.objects.create(management_agent=agent, property_group=property_group)
+
+    # property_groups = all property groups
+    property_groups = PropertyGroup.objects.all()
+
+    # Query that potentially triggers the subquery multiple-column bug in Django 3.2
+    qs = Agent.objects.annotate(property_groups_count=Count("property_groups"))
+    try:
+        results = qs.filter(
+            Q(property_groups__in=property_groups)  # M2M "in" lookup
+            | Q(property_groups_count=0)
+        ).distinct()
+        # Force evaluation
+        list(results)
+    except ProgrammingError as e:
+        print("BUG TRIGGERED:", e)
+        sys.exit(1)
+
+    print("No error encountered => bug appears fixed.")
+    sys.exit(0)
+
+if __name__ == "__main__":
+    main()
