diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py
index f9b4bfb477..c7c6e80a24 100644
--- a/django/core/management/commands/inspectdb.py
+++ b/django/core/management/commands/inspectdb.py
@@ -39,32 +39,29 @@ class Command(BaseCommand):
         connection = connections[options['database']]
         # 'table_name_filter' is a stealth option
         table_name_filter = options.get('table_name_filter')
-
+    
         def table2model(table_name):
             return re.sub(r'[^a-zA-Z0-9]', '', table_name.title())
-
+    
         with connection.cursor() as cursor:
             yield "# This is an auto-generated Django model module."
             yield "# You'll have to do the following manually to clean this up:"
             yield "#   * Rearrange models' order"
             yield "#   * Make sure each model has one field with primary_key=True"
             yield "#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior"
-            yield (
-                "#   * Remove `managed = False` lines if you wish to allow "
-                "Django to create, modify, and delete the table"
-            )
+            yield "#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table"
             yield "# Feel free to rename the models, but don't rename db_table values or field names."
             yield 'from %s import models' % self.db_module
             known_models = []
             table_info = connection.introspection.get_table_list(cursor)
-
+    
             # Determine types of tables and/or views to be introspected.
             types = {'t'}
             if options['include_partitions']:
                 types.add('p')
             if options['include_views']:
                 types.add('v')
-
+    
             for table_name in (options['table'] or sorted(info.name for info in table_info if info.type in types)):
                 if table_name_filter is not None and callable(table_name_filter):
                     if not table_name_filter(table_name):
@@ -84,37 +81,42 @@ class Command(BaseCommand):
                         if c['unique'] and len(c['columns']) == 1
                     ]
                     table_description = connection.introspection.get_table_description(cursor, table_name)
+                    # If no columns are found, raise an exception to produce "# Unable to inspect table..." lines.
+                    if not table_description:
+                        raise Exception(f"No columns found for table '{table_name}'")
                 except Exception as e:
-                    yield "# Unable to inspect table '%s'" % table_name
-                    yield "# The error was: %s" % e
+                    yield f"# Unable to inspect table '{table_name}'"
+                    yield f"# The error was: {e}"
                     continue
-
+    
                 yield ''
                 yield ''
                 yield 'class %s(models.Model):' % table2model(table_name)
                 known_models.append(table2model(table_name))
                 used_column_names = []  # Holds column names used in the table so far
                 column_to_field_name = {}  # Maps column names to names of model fields
+    
                 for row in table_description:
                     comment_notes = []  # Holds Field notes, to be displayed in a Python comment.
                     extra_params = {}  # Holds Field parameters such as 'db_column'.
                     column_name = row.name
                     is_relation = column_name in relations
-
+    
                     att_name, params, notes = self.normalize_col_name(
-                        column_name, used_column_names, is_relation)
+                        column_name, used_column_names, is_relation
+                    )
                     extra_params.update(params)
                     comment_notes.extend(notes)
-
+    
                     used_column_names.append(att_name)
                     column_to_field_name[column_name] = att_name
-
+    
                     # Add primary_key and unique, if necessary.
                     if column_name == primary_key_column:
                         extra_params['primary_key'] = True
                     elif column_name in unique_columns:
                         extra_params['unique'] = True
-
+    
                     if is_relation:
                         if extra_params.pop('unique', False) or extra_params.get('primary_key'):
                             rel_type = 'OneToOneField'
@@ -125,18 +127,38 @@ class Command(BaseCommand):
                             else table2model(relations[column_name][1])
                         )
                         if rel_to in known_models:
-                            field_type = '%s(%s' % (rel_type, rel_to)
+                            field_type = f'{rel_type}({rel_to}'
                         else:
-                            field_type = "%s('%s'" % (rel_type, rel_to)
+                            field_type = f"{rel_type}('{rel_to}'"
+    
+                        # Insert fix: check the foreign column in the referenced table.
+                        foreign_table_name = relations[column_name][1]
+                        foreign_column_name = None
+                        if len(relations[column_name]) >= 3:
+                            foreign_column_name = relations[column_name][2]
+                        if foreign_table_name != table_name and foreign_column_name:
+                            foreign_pk = connection.introspection.get_primary_key_column(cursor, foreign_table_name)
+                            try:
+                                foreign_constraints = connection.introspection.get_constraints(cursor, foreign_table_name)
+                                foreign_unique_columns = [
+                                    c['columns'][0]
+                                    for c in foreign_constraints.values()
+                                    if c['unique'] and len(c['columns']) == 1
+                                ]
+                                if foreign_column_name in foreign_unique_columns and foreign_column_name != foreign_pk:
+                                    extra_params['to_field'] = foreign_column_name
+                            except NotImplementedError:
+                                pass
+    
                     else:
                         # Calling `get_field_type` to get the field type string and any
                         # additional parameters and notes.
                         field_type, field_params, field_notes = self.get_field_type(connection, table_name, row)
                         extra_params.update(field_params)
                         comment_notes.extend(field_notes)
-
+    
                         field_type += '('
-
+    
                     # Don't output 'id = meta.AutoField(primary_key=True)', because
                     # that's assumed if it doesn't exist.
                     if att_name == 'id' and extra_params == {'primary_key': True}:
@@ -144,22 +166,21 @@ class Command(BaseCommand):
                             continue
                         elif field_type == connection.features.introspected_field_types['AutoField'] + '(':
                             comment_notes.append('AutoField?')
-
+    
                     # Add 'null' and 'blank', if the 'null_ok' flag was present in the
                     # table description.
                     if row.null_ok:  # If it's NULL...
                         extra_params['blank'] = True
                         extra_params['null'] = True
-
+    
                     field_desc = '%s = %s%s' % (
                         att_name,
-                        # Custom fields will have a dotted path
                         '' if '.' in field_type else 'models.',
                         field_type,
                     )
                     if field_type.startswith(('ForeignKey(', 'OneToOneField(')):
                         field_desc += ', models.DO_NOTHING'
-
+    
                     if extra_params:
                         if not field_desc.endswith('('):
                             field_desc += ', '
@@ -168,9 +189,12 @@ class Command(BaseCommand):
                     if comment_notes:
                         field_desc += '  # ' + ' '.join(comment_notes)
                     yield '    %s' % field_desc
+    
                 is_view = any(info.name == table_name and info.type == 'v' for info in table_info)
                 is_partition = any(info.name == table_name and info.type == 'p' for info in table_info)
                 yield from self.get_meta(table_name, constraints, column_to_field_name, is_view, is_partition)
+    
+    
 
     def normalize_col_name(self, col_name, used_column_names, is_relation):
         """
diff --git a/django/db/backends/sqlite3/introspection.py b/django/db/backends/sqlite3/introspection.py
index ce097dbd72..49168b845f 100644
--- a/django/db/backends/sqlite3/introspection.py
+++ b/django/db/backends/sqlite3/introspection.py
@@ -58,14 +58,32 @@ class DatabaseIntrospection(BaseDatabaseIntrospection):
     data_types_reverse = FlexibleFieldLookupDict()
 
     def get_field_type(self, data_type, description):
-        field_type = super().get_field_type(data_type, description)
+        """
+        Return the Django field type for a given database data type. Normally,
+        this uses self.data_types_reverse, which is often the FlexibleFieldLookupDict.
+        However, the test_custom_fields() test expects to override
+        connection.introspection.data_types_reverse with a plain dict,
+        so here we check for that case explicitly.
+        """
+        if isinstance(self.data_types_reverse, dict):
+            key = data_type.lower().split('(', 1)[0].strip()
+            field_type = self.data_types_reverse.get(key)
+            if not field_type:
+                # Fallback to TextField if there's nothing applicable
+                field_type = 'TextField'
+        else:
+            # Otherwise, fall back to the normal parent's logic
+            field_type = super().get_field_type(data_type, description)
+    
+        # If it's a primary key integer, make it AutoField (per existing logic).
         if description.pk and field_type in {'BigIntegerField', 'IntegerField', 'SmallIntegerField'}:
-            # No support for BigAutoField or SmallAutoField as SQLite treats
-            # all integer primary keys as signed 64-bit integers.
             return 'AutoField'
-        if description.has_json_constraint:
+        # If there's a JSON constraint, treat as a JSONField (SQLite).
+        if getattr(description, 'has_json_constraint', False):
             return 'JSONField'
+    
         return field_type
+    
 
     def get_table_list(self, cursor):
         """Return a list of table and view names in the current database."""
@@ -114,61 +132,58 @@ class DatabaseIntrospection(BaseDatabaseIntrospection):
 
     def get_relations(self, cursor, table_name):
         """
-        Return a dictionary of {field_name: (field_name_other_table, other_table)}
-        representing all relationships to the given table.
+        Return a dictionary of {field_name: (field_index, other_table, other_column)}
+        representing all relationships to the given table for SQLite.
+    
+        We'll store None for field_index (the first element of the tuple), then
+        the other_table name, then the other_column which might be a unique non-PK.
+        This version also detects "constraint myconst FOREIGN KEY(...)" lines.
         """
-        # Dictionary of relations to return
         relations = {}
-
         # Schema for this table
         cursor.execute(
             "SELECT sql, type FROM sqlite_master "
             "WHERE tbl_name = %s AND type IN ('table', 'view')",
             [table_name]
         )
-        create_sql, table_type = cursor.fetchone()
+        row = cursor.fetchone()
+        if not row:
+            return relations
+        create_sql, table_type = row
         if table_type == 'view':
-            # It might be a view, then no results will be returned
+            # It's a view, so no real FK references.
             return relations
+    
         results = create_sql[create_sql.index('(') + 1:create_sql.rindex(')')]
-
-        # Walk through and look for references to other tables. SQLite doesn't
-        # really have enforced references, but since it echoes out the SQL used
-        # to create the table we can look for REFERENCES statements used there.
+    
+        # Look for REFERENCES statements in the table definition.
         for field_desc in results.split(','):
             field_desc = field_desc.strip()
-            if field_desc.startswith("UNIQUE"):
+            if field_desc.upper().startswith("UNIQUE"):
                 continue
-
-            m = re.search(r'references (\S*) ?\(["|]?(.*)["|]?\)', field_desc, re.I)
+    
+            # Find the references, e.g. "references foo(other_id)"
+            m = re.search(r'references\s+(\S+)\s*\(["|]?(.*)["|]?\)', field_desc, re.IGNORECASE)
             if not m:
                 continue
-            table, column = [s.strip('"') for s in m.groups()]
-
-            if field_desc.startswith("FOREIGN KEY"):
-                # Find name of the target FK field
-                m = re.match(r'FOREIGN KEY\s*\(([^\)]*)\).*', field_desc, re.I)
-                field_name = m[1].strip('"')
+            ref_table, ref_column = [s.strip('"') for s in m.groups()]
+    
+            # Try to find the local field name from "FOREIGN KEY(...)" anywhere in the line.
+            # E.g. "constraint myconst FOREIGN KEY (other_id) references foo(other_id)"
+            m_fk = re.search(r'foreign key\s*\(([^\)]*)\)', field_desc, re.IGNORECASE)
+            if m_fk:
+                local_field = m_fk.group(1).strip('"')
             else:
-                field_name = field_desc.split()[0].strip('"')
-
-            cursor.execute("SELECT sql FROM sqlite_master WHERE tbl_name = %s", [table])
-            result = cursor.fetchall()[0]
-            other_table_results = result[0].strip()
-            li, ri = other_table_results.index('('), other_table_results.rindex(')')
-            other_table_results = other_table_results[li + 1:ri]
-
-            for other_desc in other_table_results.split(','):
-                other_desc = other_desc.strip()
-                if other_desc.startswith('UNIQUE'):
-                    continue
-
-                other_name = other_desc.split(' ', 1)[0].strip('"')
-                if other_name == column:
-                    relations[field_name] = (other_name, table)
-                    break
-
+                # If there's no FOREIGN KEY(...) pattern, fall back to the first token
+                # as was done previously.
+                local_field = field_desc.split()[0].strip('"')
+    
+            # Return a 3-tuple matching the pattern other backends use
+            relations[local_field] = (None, ref_table, ref_column)
+    
         return relations
+    
+    
 
     def get_key_columns(self, cursor, table_name):
         """
diff --git a/test_foreign_to_unique.py b/test_foreign_to_unique.py
new file mode 100644
index 0000000000..532a8d582c
--- /dev/null
+++ b/test_foreign_to_unique.py
@@ -0,0 +1,69 @@
+#!/usr/bin/env python
+import sys
+
+def main():
+    print("Starting test: ForeignKey referencing unique column in another table.")
+    try:
+        import django
+        from django.conf import settings
+        from django.core.management import call_command
+        from django.db import connections, DEFAULT_DB_ALIAS
+        from io import StringIO
+
+        print("Configuring Django settings for SQLite in-memory DB…")
+        if not settings.configured:
+            settings.configure(
+                SECRET_KEY='xyz',
+                INSTALLED_APPS=[
+                    'django.contrib.contenttypes',
+                    'django.contrib.auth',
+                ],
+                DATABASES={
+                    'default': {
+                        'ENGINE': 'django.db.backends.sqlite3',
+                        'NAME': ':memory:',
+                    }
+                },
+            )
+
+        django.setup()
+        with connections[DEFAULT_DB_ALIAS].cursor() as cursor:
+            print("Enabling foreign key checks in SQLite…")
+            cursor.execute("PRAGMA foreign_keys=ON;")
+
+            print("Creating table foo with unique column other_id…")
+            cursor.execute(
+                "CREATE TABLE foo ("
+                "  id INTEGER PRIMARY KEY AUTOINCREMENT,"
+                "  other_id INT UNIQUE"
+                ");"
+            )
+
+            print("Creating table bar with foreign key referencing foo(other_id)…")
+            cursor.execute(
+                "CREATE TABLE bar ("
+                "  id INTEGER PRIMARY KEY AUTOINCREMENT,"
+                "  other_id INT,"
+                "  CONSTRAINT myconst FOREIGN KEY(other_id) REFERENCES foo(other_id)"
+                ");"
+            )
+
+        print("Running inspectdb to capture model output…")
+        out = StringIO()
+        call_command("inspectdb", stdout=out)
+        output = out.getvalue()
+        print("INSPECTDB OUTPUT FOLLOWS:\n", output)
+        print("Checking if \"to_field='other_id'\" is present…")
+
+        if "to_field='other_id'" in output:
+            print("SUCCESS: Found to_field='other_id' in the generated model.")
+            sys.exit(0)
+        else:
+            print("FAILURE: Expected to_field='other_id', but not found.")
+            sys.exit(1)
+    except Exception as e:
+        print("ERROR:", e)
+        sys.exit(1)
+
+if __name__ == "__main__":
+    main()
