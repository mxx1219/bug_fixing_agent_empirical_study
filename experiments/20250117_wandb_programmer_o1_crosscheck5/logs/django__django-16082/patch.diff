diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 5e3c7cab82..d41bf56a47 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -498,8 +498,6 @@ class Expression(BaseExpression, Combinable):
 #
 # The current approach for NULL is based on lowest common denominator behavior
 # i.e. if one of the supported databases is raising an error (rather than
-# return NULL) for `val <op> NULL`, then Django raises FieldError.
-NoneType = type(None)
 
 _connector_combinations = [
     # Numeric operations - operands of same type.
@@ -513,8 +511,6 @@ _connector_combinations = [
             Combinable.ADD,
             Combinable.SUB,
             Combinable.MUL,
-            # Behavior for DIV with integer arguments follows Postgres/SQLite,
-            # not MySQL/Oracle.
             Combinable.DIV,
             Combinable.MOD,
             Combinable.POW,
@@ -533,6 +529,7 @@ _connector_combinations = [
             Combinable.SUB,
             Combinable.MUL,
             Combinable.DIV,
+            Combinable.MOD,
         )
     },
     # Bitwise operators.
@@ -551,8 +548,8 @@ _connector_combinations = [
     # Numeric with NULL.
     {
         connector: [
-            (field_type, NoneType, field_type),
-            (NoneType, field_type, field_type),
+            (field_type, type(None), field_type),
+            (type(None), field_type, field_type),
         ]
         for connector in (
             Combinable.ADD,
@@ -564,39 +561,33 @@ _connector_combinations = [
         )
         for field_type in (fields.IntegerField, fields.DecimalField, fields.FloatField)
     },
-    # Date/DateTimeField/DurationField/TimeField.
+    # Date/DateTimeField/DurationField/TimeField for ADD.
     {
         Combinable.ADD: [
-            # Date/DateTimeField.
             (fields.DateField, fields.DurationField, fields.DateTimeField),
             (fields.DateTimeField, fields.DurationField, fields.DateTimeField),
             (fields.DurationField, fields.DateField, fields.DateTimeField),
             (fields.DurationField, fields.DateTimeField, fields.DateTimeField),
-            # DurationField.
             (fields.DurationField, fields.DurationField, fields.DurationField),
-            # TimeField.
             (fields.TimeField, fields.DurationField, fields.TimeField),
             (fields.DurationField, fields.TimeField, fields.TimeField),
         ],
     },
+    # Date/DateTimeField/DurationField/TimeField for SUB.
     {
         Combinable.SUB: [
-            # Date/DateTimeField.
             (fields.DateField, fields.DurationField, fields.DateTimeField),
             (fields.DateTimeField, fields.DurationField, fields.DateTimeField),
             (fields.DateField, fields.DateField, fields.DurationField),
             (fields.DateField, fields.DateTimeField, fields.DurationField),
             (fields.DateTimeField, fields.DateField, fields.DurationField),
             (fields.DateTimeField, fields.DateTimeField, fields.DurationField),
-            # DurationField.
             (fields.DurationField, fields.DurationField, fields.DurationField),
-            # TimeField.
             (fields.TimeField, fields.DurationField, fields.TimeField),
             (fields.TimeField, fields.TimeField, fields.DurationField),
         ],
     },
 ]
-
 _connector_combinators = defaultdict(list)
 
 
diff --git a/expressions_newblock.py b/expressions_newblock.py
new file mode 100644
index 0000000000..8d1f49a34e
--- /dev/null
+++ b/expressions_newblock.py
@@ -0,0 +1,89 @@
+_connector_combinations = [
+    # Numeric operations - operands of same type.
+    {
+        connector: [
+            (fields.IntegerField, fields.IntegerField, fields.IntegerField),
+            (fields.FloatField, fields.FloatField, fields.FloatField),
+            (fields.DecimalField, fields.DecimalField, fields.DecimalField),
+        ]
+        for connector in (
+            Combinable.ADD,
+            Combinable.SUB,
+            Combinable.MUL,
+            Combinable.DIV,
+            Combinable.MOD,
+            Combinable.POW,
+        )
+    },
+    # Numeric operations - operands of different type.
+    {
+        connector: [
+            (fields.IntegerField, fields.DecimalField, fields.DecimalField),
+            (fields.DecimalField, fields.IntegerField, fields.DecimalField),
+            (fields.IntegerField, fields.FloatField, fields.FloatField),
+            (fields.FloatField, fields.IntegerField, fields.FloatField),
+        ]
+        for connector in (
+            Combinable.ADD,
+            Combinable.SUB,
+            Combinable.MUL,
+            Combinable.DIV,
+            Combinable.MOD,
+        )
+    },
+    # Bitwise operators.
+    {
+        connector: [
+            (fields.IntegerField, fields.IntegerField, fields.IntegerField),
+        ]
+        for connector in (
+            Combinable.BITAND,
+            Combinable.BITOR,
+            Combinable.BITLEFTSHIFT,
+            Combinable.BITRIGHTSHIFT,
+            Combinable.BITXOR,
+        )
+    },
+    # Numeric with NULL.
+    {
+        connector: [
+            (field_type, type(None), field_type),
+            (type(None), field_type, field_type),
+        ]
+        for connector in (
+            Combinable.ADD,
+            Combinable.SUB,
+            Combinable.MUL,
+            Combinable.DIV,
+            Combinable.MOD,
+            Combinable.POW,
+        )
+        for field_type in (fields.IntegerField, fields.DecimalField, fields.FloatField)
+    },
+    # Date/DateTimeField/DurationField/TimeField for ADD.
+    {
+        Combinable.ADD: [
+            (fields.DateField, fields.DurationField, fields.DateTimeField),
+            (fields.DateTimeField, fields.DurationField, fields.DateTimeField),
+            (fields.DurationField, fields.DateField, fields.DateTimeField),
+            (fields.DurationField, fields.DateTimeField, fields.DateTimeField),
+            (fields.DurationField, fields.DurationField, fields.DurationField),
+            (fields.TimeField, fields.DurationField, fields.TimeField),
+            (fields.DurationField, fields.TimeField, fields.TimeField),
+        ],
+    },
+    # Date/DateTimeField/DurationField/TimeField for SUB.
+    {
+        Combinable.SUB: [
+            (fields.DateField, fields.DurationField, fields.DateTimeField),
+            (fields.DateTimeField, fields.DurationField, fields.DateTimeField),
+            (fields.DateField, fields.DateField, fields.DurationField),
+            (fields.DateField, fields.DateTimeField, fields.DurationField),
+            (fields.DateTimeField, fields.DateField, fields.DurationField),
+            (fields.DateTimeField, fields.DateTimeField, fields.DurationField),
+            (fields.DurationField, fields.DurationField, fields.DurationField),
+            (fields.TimeField, fields.DurationField, fields.TimeField),
+            (fields.TimeField, fields.TimeField, fields.DurationField),
+        ],
+    },
+]
diff --git a/replace.sed b/replace.sed
new file mode 100644
index 0000000000..2b484ae14d
--- /dev/null
+++ b/replace.sed
@@ -0,0 +1 @@
+504,598d
diff --git a/test_mod_decimal.py b/test_mod_decimal.py
new file mode 100644
index 0000000000..f750f2d14e
--- /dev/null
+++ b/test_mod_decimal.py
@@ -0,0 +1,61 @@
+import sys
+import decimal
+
+def main():
+    import os
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "test_mod_decimal_settings")
+
+    print("Step 1: Configuring and setting up Django...")
+    from django.conf import settings
+    settings.configure(
+        DATABASES={
+            "default": {
+                "ENGINE": "django.db.backends.sqlite3",
+                "NAME": ":memory:",
+            }
+        },
+        INSTALLED_APPS=["__main__"],
+        SECRET_KEY="fake-key",
+    )
+
+    import django
+    django.setup()
+
+    from django.db import models, connection
+    from django.db.models import F
+
+    print("Step 2: Defining test model...")
+
+    class M(models.Model):
+        decimal_col = models.DecimalField(max_digits=10, decimal_places=2)
+        integer_col = models.IntegerField()
+
+    print("Step 3: Creating the table via schema_editor...")
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(M)
+
+    print("Step 4: Creating test data...")
+    M.objects.create(decimal_col=decimal.Decimal('10.00'), integer_col=3)
+
+    print("Step 5: Running query with MOD operator...")
+    try:
+        obj = M.objects.annotate(
+            remainder=(F("decimal_col") % F("integer_col"))
+        ).first()
+
+        expected_value = decimal.Decimal("1.00")
+        result = obj.remainder
+        print(f"Got remainder={result!r} (type={type(result)}) expected={expected_value!r}")
+
+        if isinstance(result, decimal.Decimal) and result == expected_value:
+            print("Test passed: remainder is a Decimal and matches expected value.")
+            sys.exit(0)
+        else:
+            print("Test failed: remainder is not correct.")
+            sys.exit(1)
+    except Exception as e:
+        print("Test raised an exception:", e)
+        sys.exit(1)
+
+if __name__ == "__main__":
+    main()
