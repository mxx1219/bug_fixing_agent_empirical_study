diff --git a/django/http/response.py b/django/http/response.py
index 6a84e193ba..fbfbca9261 100644
--- a/django/http/response.py
+++ b/django/http/response.py
@@ -222,19 +222,14 @@ class HttpResponseBase:
 
     def make_bytes(self, value):
         """Turn a value into a bytestring encoded in the output charset."""
-        # Per PEP 3333, this response body must be bytes. To avoid returning
-        # an instance of a subclass, this function returns `bytes(value)`.
-        # This doesn't make a copy when `value` already contains bytes.
-
-        # Handle string types -- we can't rely on force_bytes here because:
-        # - Python attempts str conversion first
-        # - when self._charset != 'utf-8' it re-encodes the content
-        if isinstance(value, bytes):
+        # If it's already a bytes-like object (including memoryview), convert directly.
+        if isinstance(value, (bytes, memoryview)):
             return bytes(value)
         if isinstance(value, str):
             return bytes(value.encode(self.charset))
-        # Handle non-string types.
+        # Handle everything else by converting to string then encoding.
         return str(value).encode(self.charset)
+    
 
     # These methods partially implement the file-like object interface.
     # See https://docs.python.org/library/io.html#io.IOBase
diff --git a/scripts/test_memoryview_httpresponse.py b/scripts/test_memoryview_httpresponse.py
new file mode 100644
index 0000000000..35cd42ecc8
--- /dev/null
+++ b/scripts/test_memoryview_httpresponse.py
@@ -0,0 +1,37 @@
+#!/usr/bin/env python3
+
+import sys
+from django.conf import settings
+
+def main():
+    try:
+        settings.configure(DEFAULT_CHARSET='utf-8')
+    except RuntimeError:
+        # If settings are already configured, ignore
+        pass
+
+    import django
+    django.setup()
+
+    from django.http import HttpResponse
+
+    test_content = b'MyContent'
+    print("1) Creating memoryview of b'MyContent'...")
+    memview_content = memoryview(test_content)
+    print("2) Creating HttpResponse with memoryview content...")
+    response = HttpResponse(memview_content)
+    print("3) Reading response.content...")
+    actual = response.content
+    print(f'   actual = {actual!r}')
+    expected = test_content
+    print(f'   expected = {expected!r}')
+
+    if actual == expected:
+        print('Test PASSED: Memoryview handled correctly.')
+        sys.exit(0)
+    else:
+        print('Test FAILED: Memoryview was not handled correctly.')
+        sys.exit(1)
+
+if __name__ == '__main__':
+    main()
