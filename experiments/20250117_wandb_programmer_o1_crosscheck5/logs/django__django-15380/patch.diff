diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py
index bf9c2acd26..b46ba9f6b8 100644
--- a/django/db/migrations/autodetector.py
+++ b/django/db/migrations/autodetector.py
@@ -819,12 +819,12 @@ class MigrationAutodetector:
             )
 
     def generate_renamed_fields(self):
-        """Work out renamed fields."""
         self.renamed_fields = {}
         for app_label, model_name, field_name in sorted(self.new_field_keys - self.old_field_keys):
             old_model_name = self.renamed_models.get((app_label, model_name), model_name)
             old_model_state = self.from_state.models[app_label, old_model_name]
-            new_model_state = self.to_state.models[app_label, old_model_name]
+            # FIX: Use 'model_name' instead of 'old_model_name' to get the new model state.
+            new_model_state = self.to_state.models[app_label, model_name]
             field = new_model_state.get_field(field_name)
             # Scan to see if this is actually a rename!
             field_dec = self.deep_deconstruct(field)
@@ -870,6 +870,7 @@ class MigrationAutodetector:
                             self.old_field_keys.add((app_label, model_name, field_name))
                             self.renamed_fields[app_label, model_name, field_name] = rem_field_name
                             break
+    
 
     def generate_added_fields(self):
         """Make AddField operations."""
diff --git a/scripts/test_rename_model_and_field.py b/scripts/test_rename_model_and_field.py
new file mode 100644
index 0000000000..a5606f5aad
--- /dev/null
+++ b/scripts/test_rename_model_and_field.py
@@ -0,0 +1,91 @@
+#!/usr/bin/env python3
+
+import sys
+import subprocess
+import os
+import shutil
+
+def run(cmd):
+    print(f"Running: {cmd}")
+    r = subprocess.run(cmd, shell=True, capture_output=True, text=True)
+    print(f"Return code: {r.returncode}")
+    print("stdout:")
+    print(r.stdout)
+    print("stderr:")
+    print(r.stderr)
+    return r
+
+def main():
+    print("Creating test environment for rename model and field bug reproduction.")
+    test_folder = "renamefieldbug"
+    if os.path.exists(test_folder):
+        shutil.rmtree(test_folder)
+    os.mkdir(test_folder)
+    os.chdir(test_folder)
+
+    print("Initializing Django project...")
+    r = run("django-admin startproject renamebug .")
+    if r.returncode != 0:
+        print("Failed to create Django project. Exiting with error.")
+        sys.exit(1)
+
+    print("Creating test_one app with an initial model MyModel...")
+    r = run("python manage.py startapp test_one")
+    if r.returncode != 0:
+        print("Failed to create test_one app. Exiting with error.")
+        sys.exit(1)
+
+    # Insert 'test_one' into INSTALLED_APPS so Django detects the app.
+    settings_file = os.path.join("renamebug", "settings.py")
+    with open(settings_file, "r") as f:
+        settings_contents = f.read()
+    new_settings_contents = settings_contents.replace(
+        "INSTALLED_APPS = [",
+        "INSTALLED_APPS = [\n    'test_one',"
+    )
+    with open(settings_file, "w") as f:
+        f.write(new_settings_contents)
+
+    models_py = '''from django.db import models
+
+class MyModel(models.Model):
+    old_field = models.CharField(max_length=100)
+'''
+    with open("test_one/models.py", "w") as f:
+        f.write(models_py)
+
+    print("Performing initial makemigrations...")
+    r1 = run("python manage.py makemigrations")
+    if r1.returncode != 0:
+        print("Initial makemigrations failed. Exiting with error.")
+        sys.exit(1)
+
+    print("Renaming MyModel to MyModel2 and old_field to new_field...")
+    models_renamed = '''from django.db import models
+
+class MyModel2(models.Model):
+    new_field = models.CharField(max_length=100)
+'''
+    with open("test_one/models.py", "w") as f:
+        f.write(models_renamed)
+
+    print("Performing second makemigrations with rename. Expecting potential KeyError if bug is present.")
+    # Provide two lines of 'y' to answer both rename prompts.
+    r2 = run("echo 'y\ny' | python manage.py makemigrations")
+
+    # If there's a KeyError in stderr or a non-zero return code, the bug is reproduced.
+    error_found = ("KeyError:" in r2.stderr) or (r2.returncode != 0)
+
+    os.chdir("..")
+    # Cleanup to avoid clutter
+    shutil.rmtree(test_folder)
+
+    if error_found:
+        print("KeyError or non-zero exit code detected => bug triggered => exit 1.")
+        sys.exit(1)
+    else:
+        print("No KeyError and zero exit code => bug not triggered => exit 0.")
+        sys.exit(0)
+
+if __name__ == "__main__":
+    main()
