diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py
index 8c4eae7906..3253494a84 100644
--- a/django/db/models/aggregates.py
+++ b/django/db/models/aggregates.py
@@ -48,24 +48,64 @@ class Aggregate(Func):
         return super().set_source_expressions(exprs)
 
     def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False):
-        # Aggregates are not allowed in UPDATE queries, so ignore for_save
-        c = super().resolve_expression(query, allow_joins, reuse, summarize)
+        """
+        Resolve this aggregate and also ensure that default is resolved if it's an
+        expression or wrapped in a Value(...) if it's a Python literal.
+        Only force summarize=True if the default contains aggregates; this allows
+        F() expressions to resolve into columns. Also, if this is a DurationField
+        aggregator and the default is a python timedelta, convert it to microseconds
+        so SQLite can handle it.
+        """
+        from django.core.exceptions import FieldError
+        from django.db.models.expressions import Expression, Value
+        import datetime
+        from django.db.models import IntegerField
+    
+        # First, resolve 'self' as an Aggregate.
+        c = super(Aggregate, self).resolve_expression(query, allow_joins, reuse, summarize)
         c.filter = c.filter and c.filter.resolve_expression(query, allow_joins, reuse, summarize)
+    
+        # Ensure no nested aggregates in the main expression if not summarizing.
         if not summarize:
-            # Call Aggregate.get_source_expressions() to avoid
-            # returning self.filter and including that in this loop.
             expressions = super(Aggregate, c).get_source_expressions()
             for index, expr in enumerate(expressions):
                 if expr.contains_aggregate:
                     before_resolved = self.get_source_expressions()[index]
                     name = before_resolved.name if hasattr(before_resolved, 'name') else repr(before_resolved)
-                    raise FieldError("Cannot compute %s('%s'): '%s' is an aggregate" % (c.name, name, name))
-        if (default := c.default) is None:
-            return c
-        if hasattr(default, 'resolve_expression'):
-            default = default.resolve_expression(query, allow_joins, reuse, summarize)
-        c.default = None  # Reset the default argument before wrapping.
-        return Coalesce(c, default, output_field=c._output_field_or_none)
+                    raise FieldError(
+                        f"Cannot compute {c.name}('{name}'): '{name}' is an aggregate"
+                    )
+    
+        # Now handle the default if present.
+        if c.default is not None:
+            # If default is not an expression, wrap it in Value(...).
+            if not isinstance(c.default, Expression):
+                default_field = c._output_field_or_none
+                if default_field is None:
+                    from django.db.models import CharField
+                    default_field = CharField()
+                c.default = Value(c.default, output_field=default_field)
+    
+            # If default is itself an aggregate or has a filter, we must keep summarize=True.
+            if c.default.contains_aggregate or getattr(c.default, 'filter', None):
+                c.default = c.default.resolve_expression(query, allow_joins, reuse, summarize=True, for_save=for_save)
+            else:
+                c.default = c.default.resolve_expression(query, allow_joins, reuse, summarize=False, for_save=for_save)
+    
+            # If aggregator output_field is a DurationField, and default is a python timedelta,
+            # convert it to microseconds so SQLite can store/bind it.
+            if c._output_field_or_none and getattr(c._output_field_or_none, 'get_internal_type', None):
+                if c._output_field_or_none.get_internal_type() == 'DurationField':
+                    if isinstance(getattr(c.default, 'value', None), datetime.timedelta):
+                        td = c.default.value
+                        total_micros = td.days * 86400_000000 + td.seconds * 1000000 + td.microseconds
+                        c.default = Value(total_micros, output_field=IntegerField())
+    
+        return c
+    
+    
+    
+    
 
     @property
     def default_alias(self):
@@ -78,24 +118,45 @@ class Aggregate(Func):
         return []
 
     def as_sql(self, compiler, connection, **extra_context):
+        # Ensure 'distinct' is included if needed.
         extra_context['distinct'] = 'DISTINCT ' if self.distinct else ''
+        sql = None
+        params = None
+    
+        # Handle filter logic. We want to funnel the final result
+        # through a single return so we can apply default= wrapping at the end.
         if self.filter:
             if connection.features.supports_aggregate_filter_clause:
                 filter_sql, filter_params = self.filter.as_sql(compiler, connection)
                 template = self.filter_template % extra_context.get('template', self.template)
-                sql, params = super().as_sql(
+                sql, base_params = super(Aggregate, self).as_sql(
                     compiler, connection, template=template, filter=filter_sql,
                     **extra_context
                 )
-                return sql, (*params, *filter_params)
+                params = (*base_params, *filter_params)
             else:
                 copy = self.copy()
                 copy.filter = None
                 source_expressions = copy.get_source_expressions()
                 condition = When(self.filter, then=source_expressions[0])
                 copy.set_source_expressions([Case(condition)] + source_expressions[1:])
-                return super(Aggregate, copy).as_sql(compiler, connection, **extra_context)
-        return super().as_sql(compiler, connection, **extra_context)
+                sql, params = super(Aggregate, copy).as_sql(compiler, connection, **extra_context)
+        else:
+            sql, params = super(Aggregate, self).as_sql(compiler, connection, **extra_context)
+    
+        # If there's a default, wrap the final aggregator in COALESCE(..., default)
+        if self.default is not None:
+            default_expr = self.default
+            if hasattr(default_expr, 'as_sql'):
+                default_sql, default_params = default_expr.as_sql(compiler, connection)
+                sql = f'COALESCE({sql}, {default_sql})'
+                params = (*params, *default_params)
+            else:
+                sql = f'COALESCE({sql}, %s)'
+                params = (*params, default_expr)
+    
+        return sql, params
+    
 
     def _get_repr_options(self):
         options = super()._get_repr_options()
diff --git a/test_aggregate_default_bug.py b/test_aggregate_default_bug.py
new file mode 100644
index 0000000000..b4a1d24cd2
--- /dev/null
+++ b/test_aggregate_default_bug.py
@@ -0,0 +1,62 @@
+import sys
+import django
+from django.conf import settings
+from django.db import connections, DEFAULT_DB_ALIAS
+from django.db import models
+from django.db.utils import OperationalError
+from django.db.models import Sum, F
+from django.db.models.functions import Coalesce
+from django.db.models import Case, When
+
+# Configure a minimal Django in-memory environment.
+settings.configure(
+    SECRET_KEY="test",
+    INSTALLED_APPS=["__main__"],  # We define our model in __main__
+    DATABASES={
+        "default": {
+            "ENGINE": "django.db.backends.sqlite3",
+            "NAME": ":memory:",
+        }
+    },
+)
+django.setup()
+
+class Book(models.Model):
+    class Meta:
+        app_label = "__main__"
+        # A small note to avoid a migrations conflict.
+
+# Actually create the table for this model in the test DB.
+with connections[DEFAULT_DB_ALIAS].schema_editor() as editor:
+    editor.create_model(Book)
+
+# Insert a few records so we can check the sums.
+for _ in range(3):
+    Book.objects.create()
+
+try:
+    # 1) Aggregator test with no default. Should produce sum of IDs (1+2+3 = 6) in typical usage.
+    sum_no_default = Book.objects.annotate(idx=F("id")).aggregate(Sum("id"))
+    print("SumNoDefault:", sum_no_default)
+    if sum_no_default["id__sum"] != 6:
+        print("Expected 6 but received:", sum_no_default["id__sum"])
+        sys.exit(1)
+
+    # 2) Aggregator test with default=0. This triggers the known bug on HEAD (near FROM syntax error).
+    sum_with_default = Book.objects.annotate(idx=F("id")).aggregate(Sum("id", default=0))
+    print("SumWithDefault:", sum_with_default)
+    if sum_with_default["id__sum"] != 6:
+        print("Expected 6 but received:", sum_with_default["id__sum"])
+        sys.exit(1)
+
+except OperationalError as e:
+    # If the bug is present on HEAD, we get near "FROM" syntax error.
+    print("OperationalError occurred:", e)
+    sys.exit(1)
+except Exception as e:
+    # Any other error should fail the test as well.
+    print("Unexpected exception occurred:", e)
+    sys.exit(1)
+
+# If we got here, the aggregator with default=0 worked as expected.
+sys.exit(0)
