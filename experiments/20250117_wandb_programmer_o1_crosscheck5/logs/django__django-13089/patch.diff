diff --git a/django/core/cache/backends/db.py b/django/core/cache/backends/db.py
index 33c79c5a14..4332b2a04e 100644
--- a/django/core/cache/backends/db.py
+++ b/django/core/cache/backends/db.py
@@ -258,18 +258,29 @@ class DatabaseCache(BaseDatabaseCache):
         else:
             connection = connections[db]
             table = connection.ops.quote_name(self._table)
-            cursor.execute("DELETE FROM %s WHERE expires < %%s" % table,
-                           [connection.ops.adapt_datetimefield_value(now)])
+            # Remove expired entries first
+            cursor.execute(
+                "DELETE FROM %s WHERE expires < %%s" % table,
+                [connection.ops.adapt_datetimefield_value(now)]
+            )
             cursor.execute("SELECT COUNT(*) FROM %s" % table)
             num = cursor.fetchone()[0]
             if num > self._max_entries:
                 cull_num = num // self._cull_frequency
                 cursor.execute(
                     connection.ops.cache_key_culling_sql() % table,
-                    [cull_num])
-                cursor.execute("DELETE FROM %s "
-                               "WHERE cache_key < %%s" % table,
-                               [cursor.fetchone()[0]])
+                    [cull_num]
+                )
+                row = cursor.fetchone()
+                if row is None:
+                    # No row was returned; safely skip
+                    return
+                # Now delete rows with cache_key < row[0]
+                cursor.execute(
+                    "DELETE FROM %s WHERE cache_key < %%s" % table,
+                    [row[0]]
+                )
+    
 
     def clear(self):
         db = router.db_for_write(self.cache_model_class)
diff --git a/test_bug_cull.py b/test_bug_cull.py
new file mode 100644
index 0000000000..68b74fd666
--- /dev/null
+++ b/test_bug_cull.py
@@ -0,0 +1,43 @@
+import sys
+import django
+from django.conf import settings
+from django.db import connection
+from django.core.cache.backends.db import DatabaseCache
+
+def main():
+    print("Configuring settings...")
+    settings.configure(
+        INSTALLED_APPS=["django.contrib.contenttypes"],
+        DATABASES={
+            "default": {
+                "ENGINE": "django.db.backends.sqlite3",
+                "NAME": ":memory:",
+            },
+        },
+        USE_TZ=False,
+        SECRET_KEY="test_secret_key",
+    )
+    django.setup()
+
+    print("Creating table 'testcachetable'...")
+    with connection.cursor() as c:
+        c.execute("CREATE TABLE testcachetable (cache_key varchar(255) primary key, value text, expires datetime)")
+
+    print("Initializing DatabaseCache with MAX_ENTRIES=2, CULL_FREQUENCY=1")
+    db_cache = DatabaseCache("testcachetable", params={"MAX_ENTRIES":2, "CULL_FREQUENCY":1})
+
+    print("Storing multiple items so cull_num > total entries, forcing cursor.fetchone() to return None on HEAD...")
+    try:
+        for i in range(10):
+            k = f"key{i}"
+            db_cache.set(k, f"value{i}")
+            print(f"Set item {k}")
+        print("SUCCESS: No exception thrown. Possibly the bug is fixed.")
+        sys.exit(0)
+    except Exception as e:
+        print("FAILURE: Encountered an exception, indicating the bug persists.")
+        print("Exception:", e)
+        sys.exit(1)
+
+if __name__ == "__main__":
+    main()
