diff --git a/django/db/models/base.py b/django/db/models/base.py
index 4038859cfa..8d30d2e3ad 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -115,7 +115,6 @@ class ModelBase(type):
                         "app_label and isn't in an application in "
                         "INSTALLED_APPS." % (module, name)
                     )
-
             else:
                 app_label = app_config.label
 
@@ -194,13 +193,10 @@ class ModelBase(type):
         # Collect the parent links for multi-table inheritance.
         parent_links = {}
         for base in reversed([new_class] + parents):
-            # Conceptually equivalent to `if base is Model`.
             if not hasattr(base, '_meta'):
                 continue
-            # Skip concrete parent classes.
             if base != new_class and not base._meta.abstract:
                 continue
-            # Locate OneToOneField instances.
             for field in base._meta.local_fields:
                 if isinstance(field, OneToOneField) and field.remote_field.parent_link:
                     related = resolve_relation(new_class, field.remote_field.model)
@@ -211,8 +207,6 @@ class ModelBase(type):
         # Do the appropriate setup for any model parents.
         for base in new_class.mro():
             if base not in parents or not hasattr(base, '_meta'):
-                # Things without _meta aren't functional models, so they're
-                # uninteresting parents.
                 inherited_attributes.update(base.__dict__)
                 continue
 
@@ -244,7 +238,8 @@ class ModelBase(type):
                         base,
                         on_delete=CASCADE,
                         name=attr_name,
-                        auto_created=True,
+                        # Fix: match auto_created with the parent's PK
+                        auto_created=base._meta.pk.auto_created,
                         parent_link=True,
                     )
 
@@ -276,8 +271,6 @@ class ModelBase(type):
                             field.name not in inherited_attributes):
                         new_field = copy.deepcopy(field)
                         new_class.add_to_class(field.name, new_field)
-                        # Replace parent links defined on this base by the new
-                        # field. It will be appropriately resolved if required.
                         if field.one_to_one:
                             for parent, parent_link in base_parents.items():
                                 if field == parent_link:
@@ -310,9 +303,6 @@ class ModelBase(type):
         new_class._meta.indexes = [copy.deepcopy(idx) for idx in new_class._meta.indexes]
 
         if abstract:
-            # Abstract base models can't be instantiated and don't appear in
-            # the list of models for an app. We do the final setup for them a
-            # little differently from normal models.
             attr_meta.abstract = False
             new_class.Meta = attr_meta
             return new_class
@@ -382,6 +372,7 @@ class ModelBase(type):
         return cls._meta.default_manager
 
 
+
 class ModelStateFieldsCacheDescriptor:
     def __get__(self, instance, cls=None):
         if instance is None:
diff --git a/test_inherited_pk_warning.py b/test_inherited_pk_warning.py
new file mode 100644
index 0000000000..a951de4e3c
--- /dev/null
+++ b/test_inherited_pk_warning.py
@@ -0,0 +1,38 @@
+def main():
+    import sys
+    print("Testing inherited pk scenario without overriding DEFAULT_AUTO_FIELD...")
+    import django
+    from django.conf import settings
+    from django.core import checks
+    from django.db import models
+
+    if not settings.configured:
+        # Note: no DEFAULT_AUTO_FIELD override
+        settings.configure(
+            INSTALLED_APPS=['__main__'],
+            DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+            SECRET_KEY='dummy',
+        )
+
+    django.setup()
+
+    class Parent(models.Model):
+        custom_id = models.CharField(max_length=100, primary_key=True)
+        class Meta:
+            app_label = '__main__'
+
+    class Child(Parent):
+        class Meta:
+            app_label = '__main__'
+
+    errors = checks.run_checks()
+    found_w042 = any(e.id == 'models.W042' for e in errors)
+    if found_w042:
+        print("Found W042 for child inherited pk, failing with code 1.")
+        sys.exit(1)
+    else:
+        print("No W042 found. Passing.")
+        sys.exit(0)
+
+if __name__ == '__main__':
+    main()
