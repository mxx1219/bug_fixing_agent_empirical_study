diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
index af0508f94e..254fe9b884 100644
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -604,12 +604,12 @@ class URLResolver:
     def _reverse_with_prefix(self, lookup_view, _prefix, *args, **kwargs):
         if args and kwargs:
             raise ValueError("Don't mix *args and **kwargs in call to reverse()!")
-
+    
         if not self._populated:
             self._populate()
-
+    
         possibilities = self.reverse_dict.getlist(lookup_view)
-
+    
         for possibility, pattern, defaults, converters in possibilities:
             for result, params in possibility:
                 if args:
@@ -617,11 +617,16 @@ class URLResolver:
                         continue
                     candidate_subs = dict(zip(params, args))
                 else:
-                    if set(kwargs).symmetric_difference(params).difference(defaults):
+                    # Fix: remove None-valued items so optional groups are considered absent
+                    cleaned_kwargs = {k: v for k, v in kwargs.items() if v is not None}
+    
+                    if set(cleaned_kwargs).symmetric_difference(params).difference(defaults):
                         continue
-                    if any(kwargs.get(k, v) != v for k, v in defaults.items()):
+                    if any(cleaned_kwargs.get(k, v) != v for k, v in defaults.items()):
                         continue
-                    candidate_subs = kwargs
+    
+                    candidate_subs = cleaned_kwargs
+    
                 # Convert the candidate subs to text using Converter.to_url().
                 text_candidate_subs = {}
                 for k, v in candidate_subs.items():
@@ -629,26 +634,19 @@ class URLResolver:
                         text_candidate_subs[k] = converters[k].to_url(v)
                     else:
                         text_candidate_subs[k] = str(v)
-                # WSGI provides decoded URLs, without %xx escapes, and the URL
-                # resolver operates on such URLs. First substitute arguments
-                # without quoting to build a decoded URL and look for a match.
-                # Then, if we have a match, redo the substitution with quoted
-                # arguments in order to return a properly encoded URL.
+    
                 candidate_pat = _prefix.replace('%', '%%') + result
                 if re.search('^%s%s' % (re.escape(_prefix), pattern), candidate_pat % text_candidate_subs):
-                    # safe characters from `pchar` definition of RFC 3986
                     url = quote(candidate_pat % text_candidate_subs, safe=RFC3986_SUBDELIMS + '/~:@')
-                    # Don't allow construction of scheme relative urls.
                     return escape_leading_slashes(url)
-        # lookup_view can be URL name or callable, but callables are not
-        # friendly in error messages.
+    
         m = getattr(lookup_view, '__module__', None)
         n = getattr(lookup_view, '__name__', None)
         if m is not None and n is not None:
             lookup_view_s = "%s.%s" % (m, n)
         else:
             lookup_view_s = lookup_view
-
+    
         patterns = [pattern for (_, pattern, _, _) in possibilities]
         if patterns:
             if args:
@@ -658,12 +656,13 @@ class URLResolver:
             else:
                 arg_msg = "no arguments"
             msg = (
-                "Reverse for '%s' with %s not found. %d pattern(s) tried: %s" %
-                (lookup_view_s, arg_msg, len(patterns), patterns)
+                "Reverse for '%s' with %s not found. %d pattern(s) tried: %s"
+                % (lookup_view_s, arg_msg, len(patterns), patterns)
             )
         else:
             msg = (
-                "Reverse for '%(view)s' not found. '%(view)s' is not "
-                "a valid view function or pattern name." % {'view': lookup_view_s}
+                "Reverse for '%(view)s' not found. '%(view)s' is not a valid view function or pattern name."
+                % {'view': lookup_view_s}
             )
         raise NoReverseMatch(msg)
+    
diff --git a/test_optional_group_bug.py b/test_optional_group_bug.py
new file mode 100644
index 0000000000..198d6b3bd5
--- /dev/null
+++ b/test_optional_group_bug.py
@@ -0,0 +1,68 @@
+#!/usr/bin/env python
+import sys
+import traceback
+
+import django
+from django.conf import settings
+
+# Minimal Django configuration for our standalone script:
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='TestKeyForOptionalBugScript',
+        ROOT_URLCONF=__name__,
+        USE_I18N=True,
+        ALLOWED_HOSTS=["*"],
+        MIDDLEWARE=[],
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        LANGUAGE_CODE='en',
+        LANGUAGES=[
+            ('en', 'English'),
+            ('nl', 'Dutch'),
+        ],
+    )
+
+django.setup()
+
+from django.conf.urls.i18n import i18n_patterns
+from django.urls import clear_url_caches, re_path, translate_url
+from django.http import HttpResponse
+from django.utils.translation import override
+
+# A dummy view to confirm capturing an optional 'slug' param:
+def dummy_view(request, slug=None):
+    return HttpResponse(f"Slug: {slug}")
+
+# Use i18n_patterns so /en/test/ and /nl/test/ map to the same view with an optional slug.
+urlpatterns = i18n_patterns(
+    re_path(r'^test(?:/(?P<slug>[^/]+))?/$', dummy_view, name='optional_slug'),
+)
+
+# Clear caches so that the newly defined urlpatterns are picked up
+clear_url_caches()
+
+def test_optional_named_group():
+    """
+    Attempt to translate /en/test/ -> /nl/test/.
+    If the reversing logic is broken for optional parameters, it will fail or produce the wrong URL.
+    """
+    try:
+        original_url = "/en/test/"
+        expected_translated = "/nl/test/"
+        with override('en'):
+            got = translate_url(original_url, 'nl')
+        print(f"Original: {original_url}, Translated: {got}, Expected: {expected_translated}")
+        if got != expected_translated:
+            print("FAIL: The optional group translation is incorrect.")
+            sys.exit(1)
+        print("PASS: Optional group translation is correct.")
+    except Exception:
+        traceback.print_exc()
+        sys.exit(1)
+
+if __name__ == '__main__':
+    test_optional_named_group()
+    sys.exit(0)
