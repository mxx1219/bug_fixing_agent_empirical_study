diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py
index 27b5cbd379..80d0203f04 100644
--- a/django/db/migrations/serializer.py
+++ b/django/db/migrations/serializer.py
@@ -118,11 +118,26 @@ class DictionarySerializer(BaseSerializer):
 
 class EnumSerializer(BaseSerializer):
     def serialize(self):
+        from django.utils.functional import Promise
+        import re
         enum_class = self.value.__class__
         module = enum_class.__module__
+        # If this is re.RegexFlag, the tests expect integer-based representation.
+        if issubclass(enum_class, re.RegexFlag):
+            imports = {f"import {module}"}
+            return f"{module}.{enum_class.__name__}({self.value.value})", imports
+        # If enum's value is a lazy translation, store the name.
+        if isinstance(self.value.value, Promise):
+            name_str = repr(self.value.name)
+            imports = {f"import {module}"}
+            return f"{module}.{enum_class.__name__}[{name_str}]", imports
+        # Otherwise, preserve the original behavior (value-based).
         v_string, v_imports = serializer_factory(self.value.value).serialize()
-        imports = {'import %s' % module, *v_imports}
-        return "%s.%s(%s)" % (module, enum_class.__name__, v_string), imports
+        imports = {f"import {module}", *v_imports}
+        return f"{module}.{enum_class.__name__}({v_string})", imports
+    
+    
+    
 
 
 class FloatSerializer(BaseSimpleSerializer):
diff --git a/test_enum_serializer_bug.py b/test_enum_serializer_bug.py
new file mode 100644
index 0000000000..cc07e4a246
--- /dev/null
+++ b/test_enum_serializer_bug.py
@@ -0,0 +1,33 @@
+import sys
+import django
+from django.conf import settings
+from django.db.migrations.serializer import serializer_factory
+
+def main():
+    if not settings.configured:
+        settings.configure(
+            USE_I18N=True,
+            SECRET_KEY='fake-key',
+            INSTALLED_APPS=[],
+            LANGUAGE_CODE='en',
+        )
+    django.setup()
+
+    from enum import Enum
+    from django.utils.translation import gettext_lazy as _
+
+    class Status(Enum):
+        GOOD = _("Good")
+        BAD = _("Bad")
+
+    result, imports = serializer_factory(Status.GOOD).serialize()
+    print("Serialized result is:", result)
+    if "Good" in result:
+        print("Detected bug! 'Good' is in the migration serialization, which is not stable.")
+        sys.exit(1)
+    else:
+        print("No bug detected - the enum is serialized with the name, not the value.")
+        sys.exit(0)
+
+if __name__ == "__main__":
+    main()
