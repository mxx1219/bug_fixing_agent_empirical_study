diff --git a/django/core/management/commands/runserver.py b/django/core/management/commands/runserver.py
index 3c39f57e4d..4fa94d514b 100644
--- a/django/core/management/commands/runserver.py
+++ b/django/core/management/commands/runserver.py
@@ -80,7 +80,7 @@ class Command(BaseCommand):
     def handle(self, *args, **options):
         if not settings.DEBUG and not settings.ALLOWED_HOSTS:
             raise CommandError("You must set settings.ALLOWED_HOSTS if DEBUG is False.")
-
+    
         self.use_ipv6 = options["use_ipv6"]
         if self.use_ipv6 and not socket.has_ipv6:
             raise CommandError("Your Python does not support IPv6.")
@@ -108,7 +108,13 @@ class Command(BaseCommand):
         if not self.addr:
             self.addr = self.default_addr_ipv6 if self.use_ipv6 else self.default_addr
             self._raw_ipv6 = self.use_ipv6
+    
+        # If the user specified a single "0" for the address, treat it as "0.0.0.0"
+        if self.addr == '0' and not self._raw_ipv6:
+            self.addr = '0.0.0.0'
+    
         self.run(**options)
+    
 
     def run(self, **options):
         """Run the server, using the autoreloader if needed."""
diff --git a/test_scripts/__init__.py b/test_scripts/__init__.py
new file mode 100644
index 0000000000..8b13789179
--- /dev/null
+++ b/test_scripts/__init__.py
@@ -0,0 +1 @@
+
diff --git a/test_scripts/manual_test_runserver_0.py b/test_scripts/manual_test_runserver_0.py
new file mode 100644
index 0000000000..775e27c48a
--- /dev/null
+++ b/test_scripts/manual_test_runserver_0.py
@@ -0,0 +1,39 @@
+import sys
+import os
+import django
+from django.core.management.commands.runserver import Command as RunserverCommand
+from django.core.management import call_command
+
+"""
+This script checks that runserver "0:8000" normalizes "0" to "0.0.0.0" in the Command object.
+We don't need to let runserver actually do anything beyond argument parsing.
+
+Steps:
+1. Set DJANGO_SETTINGS_MODULE to a minimal config and django.setup().
+2. Instantiate RunserverCommand and override both check_migrations() and run() so nothing truly runs.
+3. call_command(cmd, "0:8000") so handle() parses the address into cmd.addr.
+4. Check whether cmd.addr == "0.0.0.0". Exit 0 if so, else 1.
+"""
+
+def main():
+    os.environ["DJANGO_SETTINGS_MODULE"] = "test_scripts.testbed_settings"
+    django.setup()
+
+    cmd = RunserverCommand()
+    # Prevent migrations from running.
+    cmd.check_migrations = lambda: None
+    # Prevent the actual inner_run logic.
+    cmd.run = lambda *args, **kwargs: None
+
+    # This should parse arguments and set cmd.addr without spinning up a server.
+    call_command(cmd, "0:8000", use_reloader=False, skip_checks=True)
+
+    if cmd.addr == "0.0.0.0":
+        print('TEST PASS: "0" was normalized to "0.0.0.0".')
+        sys.exit(0)
+    else:
+        print(f'TEST FAIL: cmd.addr is "{cmd.addr}", expected "0.0.0.0".')
+        sys.exit(1)
+
+if __name__ == "__main__":
+    main()
diff --git a/test_scripts/testbed_settings.py b/test_scripts/testbed_settings.py
new file mode 100644
index 0000000000..c3629968b1
--- /dev/null
+++ b/test_scripts/testbed_settings.py
@@ -0,0 +1,17 @@
+import os
+
+SECRET_KEY = "fake-key-for-testing"
+DEBUG = True
+ALLOWED_HOSTS = []
+ROOT_URLCONF = ""
+DATABASES = {
+    "default": {
+        "ENGINE": "django.db.backends.sqlite3",
+        "NAME": ":memory:",
+    }
+}
+INSTALLED_APPS = [
+    "django.contrib.auth",
+    "django.contrib.contenttypes",
+]
+MIDDLEWARE = []
