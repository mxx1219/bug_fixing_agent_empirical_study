diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 64be087bf1..4ea6abd7e8 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -253,7 +253,7 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):
         Get a form Field for a ForeignKey.
         """
         db = kwargs.get("using")
-
+    
         if "widget" not in kwargs:
             if db_field.name in self.get_autocomplete_fields(request):
                 kwargs["widget"] = AutocompleteSelect(
@@ -269,14 +269,17 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):
                         "class": get_ul_class(self.radio_fields[db_field.name]),
                     }
                 )
-                kwargs["empty_label"] = _("None") if db_field.blank else None
-
+                kwargs["empty_label"] = (
+                    kwargs.get("empty_label") or _("None")
+                ) if db_field.blank else None
+    
         if "queryset" not in kwargs:
             queryset = self.get_field_queryset(db, db_field, request)
             if queryset is not None:
                 kwargs["queryset"] = queryset
-
+    
         return db_field.formfield(**kwargs)
+    
 
     def formfield_for_manytomany(self, db_field, request, **kwargs):
         """
diff --git a/test_radio_fields_empty_label.py b/test_radio_fields_empty_label.py
new file mode 100644
index 0000000000..d6f41682d6
--- /dev/null
+++ b/test_radio_fields_empty_label.py
@@ -0,0 +1,59 @@
+import sys
+import django
+from django.conf import settings
+
+def main():
+    # Configure Django settings before importing and defining models.
+    settings.configure(
+        INSTALLED_APPS=[
+            "django.contrib.contenttypes",
+            "django.contrib.auth",
+            "django.contrib.admin",
+        ],
+        DATABASES={"default":{"ENGINE":"django.db.backends.sqlite3","NAME":":memory:"}},
+        MIDDLEWARE=[],
+        SECRET_KEY="test",
+        DEFAULT_AUTO_FIELD="django.db.models.AutoField",
+    )
+    django.setup()
+
+    from django.test import TestCase
+    from django.db import models
+    from django.contrib.admin import ModelAdmin, AdminSite
+
+    class Foo(models.Model):
+        class Meta:
+            app_label = "admin"
+
+    class Bar(models.Model):
+        foo = models.ForeignKey(Foo, blank=True, null=True, on_delete=models.CASCADE)
+        class Meta:
+            app_label = "admin"
+
+    class BarAdmin(ModelAdmin):
+        radio_fields = {"foo": True}
+        def formfield_for_foreignkey(self, db_field, request, **kwargs):
+            if db_field.name == "foo":
+                kwargs["empty_label"] = "I WANT TO SET MY OWN EMPTY LABEL"
+            return super().formfield_for_foreignkey(db_field, request, **kwargs)
+
+    class TestEmptyLabel(TestCase):
+        def test_empty_label(self):
+            admin = BarAdmin(Bar, AdminSite())
+            db_field = Bar._meta.get_field("foo")
+            formfield = admin.formfield_for_foreignkey(db_field, None)
+            label = getattr(formfield, "empty_label", None)
+            print("Actual empty_label:", label)
+            if label == "I WANT TO SET MY OWN EMPTY LABEL":
+                print("Test passed: the custom empty_label was NOT overwritten.")
+            else:
+                print("Test failed: custom empty_label was overwritten or missing.")
+                sys.exit(1)
+
+    import unittest
+    suite = unittest.TestLoader().loadTestsFromTestCase(TestEmptyLabel)
+    result = unittest.TextTestRunner(verbosity=2).run(suite)
+    sys.exit(0 if result.wasSuccessful() else 1)
+
+if __name__ == "__main__":
+    main()
