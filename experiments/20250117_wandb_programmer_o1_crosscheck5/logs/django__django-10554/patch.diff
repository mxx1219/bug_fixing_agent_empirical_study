diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index a791908caf..6b6faf0e80 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -255,7 +255,7 @@ class SQLCompiler:
         """
         Return a list of 2-tuples of form (expr, (sql, params, is_ref)) for the
         ORDER BY clause.
-
+    
         The order_by clause can alter the select clause (for example it
         can add aliases to clauses that do not yet have one, or it can
         add totally new select clauses).
@@ -275,7 +275,7 @@ class SQLCompiler:
             asc, desc = ORDER_DIR['ASC']
         else:
             asc, desc = ORDER_DIR['DESC']
-
+    
         order_by = []
         for field in ordering:
             if hasattr(field, 'resolve_expression'):
@@ -292,10 +292,10 @@ class SQLCompiler:
             if field == '?':  # random
                 order_by.append((OrderBy(Random()), False))
                 continue
-
+    
             col, order = get_order_dir(field, asc)
             descending = order == 'DESC'
-
+    
             if col in self.query.annotation_select:
                 # Reference to expression in SELECT clause
                 order_by.append((
@@ -311,7 +311,7 @@ class SQLCompiler:
                     expr = Cast(expr, expr.output_field)
                 order_by.append((OrderBy(expr, descending=descending), False))
                 continue
-
+    
             if '.' in field:
                 # This came in through an extra(order_by=...) addition. Pass it
                 # on verbatim.
@@ -322,7 +322,7 @@ class SQLCompiler:
                         descending=descending
                     ), False))
                 continue
-
+    
             if not self.query.extra or col not in self.query.extra:
                 # 'col' is of the form 'field' or 'field1__field2' or
                 # '-field1__field2__field', etc.
@@ -339,7 +339,7 @@ class SQLCompiler:
                         True))
         result = []
         seen = set()
-
+    
         for expr, is_ref in order_by:
             resolved = expr.resolve_expression(self.query, allow_joins=True, reuse=None)
             if self.query.combinator:
@@ -347,28 +347,36 @@ class SQLCompiler:
                 # Relabel order by columns to raw numbers if this is a combined
                 # query; necessary since the columns can't be referenced by the
                 # fully qualified name and the simple column names may collide.
+                found_in_select = False
                 for idx, (sel_expr, _, col_alias) in enumerate(self.select):
                     if is_ref and col_alias == src.refs:
                         src = src.source
                     elif col_alias:
+                        # If there's a col_alias that doesn't match, keep searching
                         continue
                     if src == sel_expr:
                         resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])
+                        found_in_select = True
                         break
-                else:
+                if not found_in_select:
+                    # Revert to Django's original behavior:
                     raise DatabaseError('ORDER BY term does not match any column in the result set.')
+    
             sql, params = self.compile(resolved)
             # Don't add the same column twice, but the order direction is
             # not taken into account so we strip it. When this entire method
             # is refactored into expressions, then we can check each part as we
             # generate it.
-            without_ordering = self.ordering_parts.search(sql).group(1)
+            m = self.ordering_parts.search(sql)
+            without_ordering = m.group(1) if m else sql
             params_hash = make_hashable(params)
             if (without_ordering, params_hash) in seen:
                 continue
             seen.add((without_ordering, params_hash))
             result.append((resolved, (sql, params, is_ref)))
         return result
+    
+    
 
     def get_extra_select(self, order_by, select):
         extra_select = []
diff --git a/test_union_bug.py b/test_union_bug.py
new file mode 100644
index 0000000000..f7ad5e237d
--- /dev/null
+++ b/test_union_bug.py
@@ -0,0 +1,79 @@
+import sys
+import django
+from django.conf import settings
+from django.db import models, connections, DEFAULT_DB_ALIAS, ProgrammingError, DatabaseError
+from django.db import connection
+
+# Minimal Django settings (in-memory SQLite)
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=['__main__'],  # Dynamically install this module as an app
+    SECRET_KEY='testsecretkey',
+)
+
+django.setup()
+
+class Dimension(models.Model):
+    name = models.CharField(max_length=100, null=True, blank=True)
+    order_field = models.IntegerField()
+
+def main():
+    # Patch flags so that ORDER BY and parentheses in compound subqueries are allowed in SQLite
+    orig_slicing = connection.features.supports_slicing_ordering_in_compound
+    orig_parentheses = connection.features.supports_parentheses_in_compound
+    connection.features.supports_slicing_ordering_in_compound = True
+    connection.features.supports_parentheses_in_compound = True
+
+    try:
+        # Create DB tables
+        with connections[DEFAULT_DB_ALIAS].schema_editor() as schema_editor:
+            schema_editor.create_model(Dimension)
+
+        # Insert rows
+        Dimension.objects.create(pk=10, order_field=2, name='boeksoort')
+        Dimension.objects.create(pk=11, order_field=1, name='grootboek')
+        Dimension.objects.create(pk=16, order_field=3, name='kenteken')
+        Dimension.objects.create(pk=17, order_field=4, name='activa')
+
+        # Attempt to reproduce the UNION scenario with an order_by in one subquery.
+        # On real Postgres, this used to fail with "ORDER BY position ... not in select list".
+        # On SQLite, we can see other errors, so we patch both feature flags to replicate the bug path.
+        qs = (
+            Dimension.objects.filter(pk__in=[10, 11])
+            .union(
+                Dimension.objects.filter(pk__in=[16, 17]).order_by('order_field')
+            )
+        )
+        # Reorder the entire union:
+        qs2 = qs.order_by().values_list('pk', flat=True)
+        print("Reordered union queryset PKs:", list(qs2))
+
+        # Force a second evaluation
+        print("Re-evaluated union queryset:", list(qs))
+        # If we get here, no error => the bug is NOT present
+        print("No error encountered. The bug is NOT present.")
+        sys.exit(0)
+
+    except ProgrammingError as e:
+        print("ProgrammingError encountered, meaning the bug is present.")
+        print("Error details:", e)
+        sys.exit(1)
+    except DatabaseError as e:
+        print("DatabaseError encountered, meaning the bug is present.")
+        print("Error details:", e)
+        sys.exit(1)
+    except Exception as e:
+        print("Unexpected exception encountered:", e)
+        sys.exit(2)
+    finally:
+        # Restore old flags
+        connection.features.supports_slicing_ordering_in_compound = orig_slicing
+        connection.features.supports_parentheses_in_compound = orig_parentheses
+
+if __name__ == "__main__":
+    main()
