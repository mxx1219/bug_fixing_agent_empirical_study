diff --git a/astropy/coordinates/sky_coordinate.py b/astropy/coordinates/sky_coordinate.py
index ab475f7d0d..f8541330dd 100644
--- a/astropy/coordinates/sky_coordinate.py
+++ b/astropy/coordinates/sky_coordinate.py
@@ -870,34 +870,53 @@ class SkyCoord(ShapedLikeNDArray):
         """
         Overrides getattr to return coordinates that this can be transformed
         to, based on the alias attr in the primary transform graph.
+    
+        If normal Python lookup fails to find attr (including descriptors like
+        properties), we fall back to SkyCoord's custom logic. However, if the
+        attribute is actually defined (e.g. as a property) but raises an error,
+        we re-raise that original error rather than swallowing it.
         """
+        try:
+            return super().__getattribute__(attr)
+        except AttributeError as e:
+            # Distinguish between "attribute truly doesn't exist"
+            # vs. "attribute code exists but raised an error."
+            # If attr is defined in the class's MRO, or in self.__dict__,
+            # it's presumably a descriptor/field that was found but raised.
+            if any(attr in c.__dict__ for c in self.__class__.__mro__):
+                raise
+            if attr in self.__dict__:
+                raise
+    
+        # Fallback logic for truly-missing attributes
         if "_sky_coord_frame" in self.__dict__:
             if self._is_name(attr):
                 return self  # Should this be a deepcopy of self?
-
-            # Anything in the set of all possible frame_attr_names is handled
-            # here. If the attr is relevant for the current frame then delegate
-            # to self.frame otherwise get it from self._<attr>.
+    
+            from .baseframe import frame_transform_graph
+    
+            # If the attr is relevant for the current frame then delegate to self.frame
+            # Otherwise get it from self._<attr>.
             if attr in frame_transform_graph.frame_attributes:
                 if attr in self.frame.frame_attributes:
                     return getattr(self.frame, attr)
                 else:
                     return getattr(self, "_" + attr, None)
-
+    
             # Some attributes might not fall in the above category but still
             # are available through self._sky_coord_frame.
             if not attr.startswith("_") and hasattr(self._sky_coord_frame, attr):
                 return getattr(self._sky_coord_frame, attr)
-
+    
             # Try to interpret as a new frame for transforming.
             frame_cls = frame_transform_graph.lookup_name(attr)
             if frame_cls is not None and self.frame.is_transformable_to(frame_cls):
                 return self.transform_to(attr)
-
+    
         # Fail
-        raise AttributeError(
-            f"'{self.__class__.__name__}' object has no attribute '{attr}'"
-        )
+        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{attr}'")
+    
+    
 
     def __setattr__(self, attr, val):
         # This is to make anything available through __getattr__ immutable
diff --git a/test_subclass_skycoord_issue.py b/test_subclass_skycoord_issue.py
new file mode 100644
index 0000000000..298e7b127b
--- /dev/null
+++ b/test_subclass_skycoord_issue.py
@@ -0,0 +1,30 @@
+#!/usr/bin/env python
+
+import sys
+import astropy.coordinates as coord
+
+class custom_coord(coord.SkyCoord):
+    @property
+    def prop(self):
+        # This intentionally uses a non-existent attribute
+        return self.random_attr
+
+def main():
+    print("Running test_subclass_skycoord_issue")
+    try:
+        c = custom_coord('00h42m30s', '+41d12m00s', frame='icrs')
+        print("Accessing c.prop ...")
+        c.prop
+        print("ERROR: c.prop did NOT raise an AttributeError as expected!")
+        sys.exit(1)
+    except AttributeError as e:
+        print("Caught AttributeError:", e)
+        if "random_attr" in str(e):
+            print("SUCCESS: Error message references random_attr. Test passes.")
+            sys.exit(0)
+        else:
+            print("FAILURE: Error message does NOT reference random_attr.")
+            sys.exit(1)
+
+if __name__ == "__main__":
+    main()
