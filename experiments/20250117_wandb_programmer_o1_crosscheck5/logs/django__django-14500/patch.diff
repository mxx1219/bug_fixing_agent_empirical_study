diff --git a/django/db/migrations/executor.py b/django/db/migrations/executor.py
index 57042a8690..7a92efa54e 100644
--- a/django/db/migrations/executor.py
+++ b/django/db/migrations/executor.py
@@ -250,16 +250,20 @@ class MigrationExecutor:
         if not fake:
             with self.connection.schema_editor(atomic=migration.atomic) as schema_editor:
                 state = migration.unapply(state, schema_editor)
-        # For replacement migrations, record individual statuses
+        # For replacement migrations, record individual statuses, and also
+        # mark the squashed migration itself as unapplied.
         if migration.replaces:
             for app_label, name in migration.replaces:
                 self.recorder.record_unapplied(app_label, name)
+            # Also unapply the migration itself:
+            self.recorder.record_unapplied(migration.app_label, migration.name)
         else:
             self.recorder.record_unapplied(migration.app_label, migration.name)
         # Report progress
         if self.progress_callback:
             self.progress_callback("unapply_success", migration, fake)
         return state
+    
 
     def check_replacements(self):
         """
diff --git a/test_squash_unapply.py b/test_squash_unapply.py
new file mode 100644
index 0000000000..f75d1a87d7
--- /dev/null
+++ b/test_squash_unapply.py
@@ -0,0 +1,52 @@
+#!/usr/bin/env python3
+import sys
+import django
+from django.conf import settings
+from django.db import connection
+from django.db.migrations.recorder import MigrationRecorder
+from django.db.migrations.migration import Migration
+from django.db.migrations.state import ProjectState
+from django.db.migrations.executor import MigrationExecutor
+
+def main():
+    print("test_squash_unapply.py: Setting up minimal Django environment with an in-memory DB.")
+    settings.configure(
+        INSTALLED_APPS=["django.contrib.contenttypes"],
+        DATABASES={
+            "default": {
+                "ENGINE": "django.db.backends.sqlite3",
+                "NAME": ":memory:"
+            }
+        },
+    )
+    django.setup()
+
+    recorder = MigrationRecorder(connection)
+    print("Ensuring django_migrations schema exists")
+    recorder.ensure_schema()
+
+    print("Defining a squashed migration that replaces ('testapp','0001_initial').")
+    s_migration = Migration("0001_squashed","testapp")
+    s_migration.replaces = [("testapp","0001_initial")]
+
+    print("Recording both the replaced migration and the squashed migration as applied.")
+    recorder.record_applied("testapp","0001_initial")
+    recorder.record_applied("testapp","0001_squashed")
+
+    print("Now starting unapply of the squashed migration, with 'fake=True' to skip schema changes.")
+    executor = MigrationExecutor(connection)
+    state = ProjectState()
+    executor.unapply_migration(state, s_migration, fake=True)
+
+    applied = recorder.applied_migrations()
+    print("After unapply, applied migrations =", applied)
+
+    if ("testapp","0001_squashed") in applied:
+        print("BUG STILL PRESENT: squashed migration is still marked as applied!")
+        sys.exit(1)
+    else:
+        print("BUG FIXED: squashed migration is no longer applied!")
+        sys.exit(0)
+
+if __name__ == "__main__":
+    main()
