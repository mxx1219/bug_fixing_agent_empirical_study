diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 5f07a4208a..6a63a368dd 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -1910,17 +1910,16 @@ class ModelAdmin(BaseModelAdmin):
             return queryset
         return queryset.filter(pk__in=object_pks)
 
-    @csrf_protect_m
     def changelist_view(self, request, extra_context=None):
         """
         The 'change list' admin view for this model.
         """
         from django.contrib.admin.views.main import ERROR_FLAG
-
+    
         app_label = self.opts.app_label
         if not self.has_view_or_change_permission(request):
             raise PermissionDenied
-
+    
         try:
             cl = self.get_changelist_instance(request)
         except IncorrectLookupParameters:
@@ -1938,14 +1937,14 @@ class ModelAdmin(BaseModelAdmin):
                     },
                 )
             return HttpResponseRedirect(request.path + "?" + ERROR_FLAG + "=1")
-
+    
         # If the request was POSTed, this might be a bulk action or a bulk
         # edit. Try to look up an action or confirmation first, but if this
         # isn't an action the POST will fall through to the bulk edit check,
         # below.
         action_failed = False
         selected = request.POST.getlist(helpers.ACTION_CHECKBOX_NAME)
-
+    
         actions = self.get_actions(request)
         # Actions with no confirmation
         if (
@@ -1955,9 +1954,7 @@ class ModelAdmin(BaseModelAdmin):
             and "_save" not in request.POST
         ):
             if selected:
-                response = self.response_action(
-                    request, queryset=cl.get_queryset(request)
-                )
+                response = self.response_action(request, queryset=cl.get_queryset(request))
                 if response:
                     return response
                 else:
@@ -1969,7 +1966,7 @@ class ModelAdmin(BaseModelAdmin):
                 )
                 self.message_user(request, msg, messages.WARNING)
                 action_failed = True
-
+    
         # Actions with confirmation
         if (
             actions
@@ -1979,25 +1976,23 @@ class ModelAdmin(BaseModelAdmin):
             and "_save" not in request.POST
         ):
             if selected:
-                response = self.response_action(
-                    request, queryset=cl.get_queryset(request)
-                )
+                response = self.response_action(request, queryset=cl.get_queryset(request))
                 if response:
                     return response
                 else:
                     action_failed = True
-
+    
         if action_failed:
             # Redirect back to the changelist page to avoid resubmitting the
             # form if the user refreshes the browser or uses the "No, take
             # me back" button on the action confirmation page.
             return HttpResponseRedirect(request.get_full_path())
-
+    
         # If we're allowing changelist editing, we need to construct a formset
         # for the changelist given all the fields to be edited. Then we'll
         # use the formset to validate/process POSTed data.
         formset = cl.formset = None
-
+    
         # Handle POSTed bulk-edit data.
         if request.method == "POST" and cl.list_editable and "_save" in request.POST:
             if not self.has_change_permission(request):
@@ -2010,40 +2005,42 @@ class ModelAdmin(BaseModelAdmin):
                 request.POST, request.FILES, queryset=modified_objects
             )
             if formset.is_valid():
-                changecount = 0
-                for form in formset.forms:
-                    if form.has_changed():
-                        obj = self.save_form(request, form, change=True)
-                        self.save_model(request, obj, form, change=True)
-                        self.save_related(request, form, formsets=[], change=True)
-                        change_msg = self.construct_change_message(request, form, None)
-                        self.log_change(request, obj, change_msg)
-                        changecount += 1
-
-                if changecount:
-                    msg = ngettext(
-                        "%(count)s %(name)s was changed successfully.",
-                        "%(count)s %(name)s were changed successfully.",
-                        changecount,
-                    ) % {
-                        "count": changecount,
-                        "name": model_ngettext(self.opts, changecount),
-                    }
-                    self.message_user(request, msg, messages.SUCCESS)
-
+                from django.db import transaction, router
+                with transaction.atomic(using=router.db_for_write(self.model)):
+                    changecount = 0
+                    for form in formset.forms:
+                        if form.has_changed():
+                            obj = self.save_form(request, form, change=True)
+                            self.save_model(request, obj, form, change=True)
+                            self.save_related(request, form, formsets=[], change=True)
+                            change_msg = self.construct_change_message(request, form, None)
+                            self.log_change(request, obj, change_msg)
+                            changecount += 1
+    
+                    if changecount:
+                        msg = ngettext(
+                            "%(count)s %(name)s was changed successfully.",
+                            "%(count)s %(name)s were changed successfully.",
+                            changecount,
+                        ) % {
+                            "count": changecount,
+                            "name": model_ngettext(self.opts, changecount),
+                        }
+                        self.message_user(request, msg, messages.SUCCESS)
+    
                 return HttpResponseRedirect(request.get_full_path())
-
+    
         # Handle GET -- construct a formset for display.
         elif cl.list_editable and self.has_change_permission(request):
             FormSet = self.get_changelist_formset(request)
             formset = cl.formset = FormSet(queryset=cl.result_list)
-
+    
         # Build the list of media to be used by the formset.
         if formset:
             media = self.media + formset.media
         else:
             media = self.media
-
+    
         # Build the action form and populate it with available actions.
         if actions:
             action_form = self.action_form(auto_id=None)
@@ -2051,11 +2048,11 @@ class ModelAdmin(BaseModelAdmin):
             media += action_form.media
         else:
             action_form = None
-
+    
         selection_note_all = ngettext(
             "%(total_count)s selected", "All %(total_count)s selected", cl.result_count
         )
-
+    
         context = {
             **self.admin_site.each_context(request),
             "module_name": str(self.opts.verbose_name_plural),
@@ -2076,9 +2073,9 @@ class ModelAdmin(BaseModelAdmin):
             "preserved_filters": self.get_preserved_filters(request),
             **(extra_context or {}),
         }
-
+    
         request.current_app = self.admin_site.name
-
+    
         return TemplateResponse(
             request,
             self.change_list_template
@@ -2089,6 +2086,7 @@ class ModelAdmin(BaseModelAdmin):
             ],
             context,
         )
+    
 
     def get_deleted_objects(self, objs, request):
         """
diff --git a/migrations/0001_initial.py b/migrations/0001_initial.py
new file mode 100644
index 0000000000..6cd94addd2
--- /dev/null
+++ b/migrations/0001_initial.py
@@ -0,0 +1,29 @@
+# Generated by Django 4.2.dev20221006100400 on 2025-01-13 05:22
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = []
+
+    operations = [
+        migrations.CreateModel(
+            name="AtomicTestModel",
+            fields=[
+                (
+                    "id",
+                    models.AutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                ("name", models.CharField(max_length=100, unique=True)),
+                ("value", models.IntegerField()),
+            ],
+        ),
+    ]
diff --git a/migrations/__init__.py b/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_changelist_atomic.py b/test_changelist_atomic.py
new file mode 100644
index 0000000000..c94af924ff
--- /dev/null
+++ b/test_changelist_atomic.py
@@ -0,0 +1,133 @@
+import sys
+
+from django.conf import settings
+
+settings.configure(
+    SECRET_KEY='test',
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+        'django.contrib.sessions',
+        'django.contrib.admin',
+        'django.contrib.messages',
+    ],
+    MIDDLEWARE=[
+        'django.contrib.sessions.middleware.SessionMiddleware',
+        'django.contrib.auth.middleware.AuthenticationMiddleware',
+        'django.contrib.messages.middleware.MessageMiddleware',
+    ],
+    ROOT_URLCONF=__name__,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        },
+    },
+    TEMPLATES=[{
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    }],
+    PASSWORD_HASHERS=['django.contrib.auth.hashers.MD5PasswordHasher'],
+    USE_I18N=False,
+    USE_L10N=False,
+    USE_TZ=False,
+)
+
+import django
+django.setup()
+
+from django.urls import path
+from django.db import models, connection
+from django.contrib import admin
+from django.contrib.admin import AdminSite
+from django.contrib.auth.models import User
+from django.test import Client
+from django.core.management import call_command
+
+class AtomicTestModel(models.Model):
+    name = models.CharField(max_length=100, unique=True)
+    value = models.IntegerField()
+    class Meta:
+        app_label = 'contenttypes'
+    def __str__(self):
+        return f"{self.name} [{self.value}]"
+
+class AtomicTestModelAdmin(admin.ModelAdmin):
+    list_display = ("name", "value")
+    list_editable = ("value",)
+
+class MyTestAdminSite(AdminSite):
+    site_header = "My Test Admin"
+
+my_admin_site = MyTestAdminSite(name="my_test_admin")
+my_admin_site.register(AtomicTestModel, AtomicTestModelAdmin)
+
+urlpatterns = [
+    path("testadmin/", my_admin_site.urls),
+]
+
+def main():
+    print("Starting test_changelist_atomic.py...")
+
+    call_command("migrate", interactive=False, verbosity=0)
+
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(AtomicTestModel)
+
+    User.objects.create_superuser("admin", "admin@example.com", "password")
+
+    AtomicTestModel.objects.create(id=1, name="original1", value=0)
+    AtomicTestModel.objects.create(id=2, name="original2", value=0)
+
+    client = Client()
+    if not client.login(username="admin", password="password"):
+        print("ERROR: Could not log in as admin.")
+        sys.exit(2)
+
+    changelist_url = "/testadmin/contenttypes/atomictestmodel/"
+    print(f"Requesting GET {changelist_url}")
+    get_resp = client.get(changelist_url)
+    if get_resp.status_code != 200:
+        print(f"ERROR: Expected 200 from GET, got {get_resp.status_code}")
+        sys.exit(2)
+
+    print("Submitting POST that will cause a unique constraint failure on the second object...")
+
+    post_data = {
+        "action": "",
+        "index": "0",
+        "form-TOTAL_FORMS": "2",
+        "form-INITIAL_FORMS": "2",
+        "form-MIN_NUM_FORMS": "0",
+        "form-MAX_NUM_FORMS": "1000",
+        "_save": "Save",
+        "form-0-id": "1",
+        "form-0-name": "duplicate",
+        "form-0-value": "111",
+        "form-1-id": "2",
+        "form-1-name": "duplicate",
+        "form-1-value": "222",
+    }
+    post_resp = client.post(changelist_url, post_data)
+    print(f"POST returned status code {post_resp.status_code}")
+
+    obj1 = AtomicTestModel.objects.get(pk=1)
+    obj2 = AtomicTestModel.objects.get(pk=2)
+
+    print(f"After POST, obj1=(id=1, name={obj1.name}, value={obj1.value}), obj2=(id=2, name={obj2.name}, value={obj2.value})")
+
+    if obj1.name == "duplicate":
+        print("FAIL: Partial update detected (obj1 changed despite error on obj2).")
+        sys.exit(1)
+    else:
+        print("PASS: No partial update. Changes were rolled back on error.")
+        sys.exit(0)
+
+if __name__ == "__main__":
+    main()
