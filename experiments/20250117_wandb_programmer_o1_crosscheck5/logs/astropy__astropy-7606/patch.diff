diff --git a/astropy/units/core.py b/astropy/units/core.py
index e9bd986d33..3eff58c5dd 100644
--- a/astropy/units/core.py
+++ b/astropy/units/core.py
@@ -724,21 +724,26 @@ class UnitBase(metaclass=InheritDocstrings):
     def __eq__(self, other):
         if self is other:
             return True
-
+    
+        # Fix: if other is None, just return False
+        if other is None:
+            return False
+    
         try:
             other = Unit(other, parse_strict='silent')
         except (ValueError, UnitsError, TypeError):
             return False
-
-        # Other is Unit-like, but the test below requires it is a UnitBase
-        # instance; if it is not, give up (so that other can try).
+    
+        # Other is Unit-like, but the test below requires it is a UnitBase instance;
+        # if it is not, give up (so that other can try).
         if not isinstance(other, UnitBase):
             return NotImplemented
-
+    
         try:
             return is_effectively_unity(self._to(other))
         except UnitsError:
             return False
+    
 
     def __ne__(self, other):
         return not (self == other)
@@ -1710,8 +1715,12 @@ class UnrecognizedUnit(IrreducibleUnit):
         _unrecognized_operator
 
     def __eq__(self, other):
+        # Fix: if other is None, return False
+        if other is None:
+            return False
         other = Unit(other, parse_strict='silent')
         return isinstance(other, UnrecognizedUnit) and self.name == other.name
+    
 
     def __ne__(self, other):
         return not (self == other)
diff --git a/test_none_comparison.py b/test_none_comparison.py
new file mode 100644
index 0000000000..75952c78a9
--- /dev/null
+++ b/test_none_comparison.py
@@ -0,0 +1,27 @@
+#!/usr/bin/env python
+
+import sys
+import traceback
+import astropy.units as u
+
+def main():
+    print("Creating an UnrecognizedUnit with parse_strict='silent'..")
+    x = u.Unit("asdf", parse_strict='silent')
+    print("Comparing it to None.. Expect result == False, no exceptions..")
+    try:
+        result = (x == None)
+    except Exception as e:
+        print("Test FAIL: raised exception:", repr(e))
+        traceback.print_exc()
+        sys.exit(1)
+    else:
+        print("Result of x == None:", result)
+        if result is False:
+            print("Test PASS: result was False, which is expected.")
+            sys.exit(0)
+        else:
+            print("Test FAIL: comparison returned something else than False:", result)
+            sys.exit(1)
+
+if __name__ == '__main__':
+    main()
