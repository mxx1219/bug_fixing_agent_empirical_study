diff --git a/django/contrib/messages/storage/base.py b/django/contrib/messages/storage/base.py
index 01422066a6..8632c00cdc 100644
--- a/django/contrib/messages/storage/base.py
+++ b/django/contrib/messages/storage/base.py
@@ -38,7 +38,10 @@ class Message:
 
     @property
     def level_tag(self):
-        return LEVEL_TAGS.get(self.level, '')
+        from django.contrib.messages import utils
+        level_tags = utils.get_level_tags()
+        return level_tags.get(self.level, '')
+    
 
 
 class BaseStorage:
diff --git a/tests_override_settings_message_tags.py b/tests_override_settings_message_tags.py
new file mode 100644
index 0000000000..41e645a892
--- /dev/null
+++ b/tests_override_settings_message_tags.py
@@ -0,0 +1,61 @@
+#!/usr/bin/env python
+
+import sys
+import django
+from django.conf import settings
+
+# Minimal Django settings configuration
+if not settings.configured:
+    settings.configure(
+        SECRET_KEY='test',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+            'django.contrib.messages',
+            'django.contrib.sessions',
+        ],
+        MIDDLEWARE=[
+            'django.contrib.sessions.middleware.SessionMiddleware',
+            'django.contrib.messages.middleware.MessageMiddleware',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        USE_TZ=True,
+        # We won't define MESSAGE_TAGS here, to replicate the normal scenario
+        # where it's not specifically set in the default config.
+    )
+
+django.setup()
+
+print("Step 1: Importing Django settings and Message class...")
+
+from django.test import override_settings
+from django.contrib.messages.storage.base import Message
+
+MY_MESSAGE_LEVEL = 999
+MY_LEVEL_TAG = "my_custom_tag"
+TEST_TAGS = {MY_MESSAGE_LEVEL: MY_LEVEL_TAG}
+
+print(f"Step 2: Before override_settings, MESSAGE_TAGS is: {getattr(settings, 'MESSAGE_TAGS', 'not set')}")
+
+@override_settings(MESSAGE_TAGS=TEST_TAGS)
+def test_message_tags():
+    print(f"Step 3: Inside override_settings, MESSAGE_TAGS is: {settings.MESSAGE_TAGS}")
+    msg = Message(MY_MESSAGE_LEVEL, "Test message")
+    actual_tag = msg.level_tag
+    print(f"Step 4: Created Message with level {MY_MESSAGE_LEVEL}, level_tag: '{actual_tag}'")
+    return actual_tag
+
+final_tag = test_message_tags()
+print(f"Step 5: final_tag is '{final_tag}', expected '{MY_LEVEL_TAG}'")
+
+if final_tag == MY_LEVEL_TAG:
+    print("SUCCESS: The override message tag is recognized (Bug is fixed).")
+    sys.exit(0)
+else:
+    print("FAILURE: The override message tag is not recognized (Bug still present).")
+    sys.exit(1)
