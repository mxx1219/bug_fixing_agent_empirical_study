diff --git a/bug_test_messageid.py b/bug_test_messageid.py
new file mode 100644
index 0000000000..cc4d10cfa2
--- /dev/null
+++ b/bug_test_messageid.py
@@ -0,0 +1,49 @@
+import sys
+from unittest.mock import patch
+
+# Configure Django
+try:
+    from django.conf import settings
+    from django.core.mail import EmailMessage
+    from django.core.mail.message import DNS_NAME
+    import django
+    if not settings.configured:
+        settings.configure(
+            DEBUG=True,
+            SECRET_KEY='testsecretkey',
+            EMAIL_USE_LOCALTIME=False,
+            DEFAULT_CHARSET='utf-8',
+            DEFAULT_FROM_EMAIL='from@example.com',
+            # Minimal required installed apps so Django doesn't complain
+            INSTALLED_APPS=[],
+        )
+    django.setup()
+    print("Django configured successfully.")
+except Exception as e:
+    print("Failed to configure Django:", e)
+    sys.exit(1)
+
+def main():
+    print("Testing non-ASCII domain in Message-ID with iso-8859-1 encoding.")
+    with patch("django.core.mail.message.DNS_NAME", "漢字"):
+        email = EmailMessage("Subject", "", "from@example.com", ["to@example.com"])
+        email.encoding = "iso-8859-1"
+        try:
+            message = email.message()
+        except Exception as exc:
+            print("Failed with exception:", exc)
+            sys.exit(1)
+
+        msgid = message["Message-ID"]
+        print("Constructed Message-ID:", msgid)
+
+        # Punycode for 漢字 is xn--p8s937b
+        if "xn--p8s937b" in msgid:
+            print("PASS: puny-coded domain found in Message-ID")
+            sys.exit(0)
+        else:
+            print("FAIL: puny-coded domain NOT found in Message-ID")
+            sys.exit(1)
+
+if __name__ == "__main__":
+    main()
diff --git a/django/core/mail/message.py b/django/core/mail/message.py
index e393b4cf5c..4dbbc792b8 100644
--- a/django/core/mail/message.py
+++ b/django/core/mail/message.py
@@ -245,23 +245,23 @@ class EmailMessage:
         self._set_list_header_if_not_empty(msg, 'To', self.to)
         self._set_list_header_if_not_empty(msg, 'Cc', self.cc)
         self._set_list_header_if_not_empty(msg, 'Reply-To', self.reply_to)
-
-        # Email header names are case-insensitive (RFC 2045), so we have to
-        # accommodate that when doing comparisons.
+    
         header_names = [key.lower() for key in self.extra_headers]
         if 'date' not in header_names:
-            # formatdate() uses stdlib methods to format the date, which use
-            # the stdlib/OS concept of a timezone, however, Django sets the
-            # TZ environment variable based on the TIME_ZONE setting which
-            # will get picked up by formatdate().
             msg['Date'] = formatdate(localtime=settings.EMAIL_USE_LOCALTIME)
         if 'message-id' not in header_names:
-            # Use cached DNS_NAME for performance
-            msg['Message-ID'] = make_msgid(domain=DNS_NAME)
+            domain_str = str(DNS_NAME)
+            try:
+                domain_str.encode('ascii')
+            except UnicodeEncodeError:
+                domain_str = domain_str.encode('idna').decode('ascii')
+            msg['Message-ID'] = make_msgid(domain=domain_str)
         for name, value in self.extra_headers.items():
-            if name.lower() != 'from':  # From is already handled
+            if name.lower() != 'from':
                 msg[name] = value
         return msg
+    
+    
 
     def recipients(self):
         """
