diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 0f53d9c30b..49f8744060 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -2524,7 +2524,8 @@ class AutoFieldMeta(type):
         return isinstance(instance, self._subclasses) or super().__instancecheck__(instance)
 
     def __subclasscheck__(self, subclass):
-        return subclass in self._subclasses or super().__subclasscheck__(subclass)
+        return issubclass(subclass, self._subclasses) or super().__subclasscheck__(subclass)
+    
 
 
 class AutoField(AutoFieldMixin, IntegerField, metaclass=AutoFieldMeta):
diff --git a/test_mybigautofield_bug.py b/test_mybigautofield_bug.py
new file mode 100644
index 0000000000..3144f0b332
--- /dev/null
+++ b/test_mybigautofield_bug.py
@@ -0,0 +1,55 @@
+import sys
+import django
+from django.conf import settings
+from django.db import models
+
+# Minimal script to reproduce the AutoField subclass issue.
+# Exits 1 when the issue triggers a crash with "must subclass AutoField",
+# 0 when no crash occurs, and 2 for an unexpected error.
+
+class MyBigAutoField(models.BigAutoField):
+    pass
+
+def run_test():
+    print("Configuring Django settings with a second-level subclass of BigAutoField set as DEFAULT_AUTO_FIELD.")
+    settings.configure(
+        INSTALLED_APPS = ["__main__"],  # the current module is the installed app
+        SECRET_KEY = "test_key",
+        DEFAULT_AUTO_FIELD = "__main__.MyBigAutoField",
+        DATABASES = {
+            "default": {
+                "ENGINE": "django.db.backends.sqlite3",
+                "NAME": ":memory:",
+            }
+        },
+    )
+
+    print("Calling django.setup() ...")
+    try:
+        django.setup()
+    except Exception as e:
+        print("Unexpected error during setup:", e)
+        sys.exit(2)
+
+    print("Defining MyModel after setup()...")
+    class MyModel(models.Model):
+        pass
+
+    print("Forcing Django to handle MyModel's PK by querying it...")
+    try:
+        # Accessing objects will force the default PK creation
+        MyModel.objects.all()
+    except ValueError as e:
+        print("Caught ValueError:", e)
+        if "must subclass AutoField" in str(e):
+            print("Test reproduced the crash. Exiting with code 1.")
+            sys.exit(1)
+        else:
+            print("Unexpected ValueError. Exiting with code 2.")
+            sys.exit(2)
+
+    print("No error encountered. Exiting success (0).")
+    sys.exit(0)
+
+if __name__ == "__main__":
+    run_test()
