diff --git a/astropy/timeseries/core.py b/astropy/timeseries/core.py
index c279f35f87..85749734a0 100644
--- a/astropy/timeseries/core.py
+++ b/astropy/timeseries/core.py
@@ -55,34 +55,51 @@ class BaseTimeSeries(QTable):
     _required_columns_relax = False
 
     def _check_required_columns(self):
-
         if not self._required_columns_enabled:
             return
-
+    
         if self._required_columns is not None:
-
             if self._required_columns_relax:
                 required_columns = self._required_columns[:len(self.colnames)]
             else:
                 required_columns = self._required_columns
-
+    
             plural = 's' if len(required_columns) > 1 else ''
-
+    
+            # If we require columns but have none, raise the old "expected but none" message
             if not self._required_columns_relax and len(self.colnames) == 0:
-
-                raise ValueError("{} object is invalid - expected '{}' "
-                                 "as the first column{} but time series has no columns"
-                                 .format(self.__class__.__name__, required_columns[0], plural))
-
-            elif self.colnames[:len(required_columns)] != required_columns:
-
-                raise ValueError("{} object is invalid - expected '{}' "
-                                 "as the first column{} but found '{}'"
-                                 .format(self.__class__.__name__, required_columns[0], plural, self.colnames[0]))
-
-            if (self._required_columns_relax
-                    and self._required_columns == self.colnames[:len(self._required_columns)]):
+                raise ValueError(
+                    "{} object is invalid - expected '{}' as the first column{} but time series has no columns".format(
+                        self.__class__.__name__, required_columns[0], plural
+                    )
+                )
+    
+            # If we do have columns, check if the first column is correct. If not, raise mismatch.
+            if len(self.colnames) > 0 and self.colnames[0] != required_columns[0]:
+                raise ValueError(
+                    "{} object is invalid - expected '{}' as the first column{} but found '{}'".format(
+                        self.__class__.__name__, required_columns[0], plural, self.colnames[0]
+                    )
+                )
+    
+            # Now check if any required columns are entirely missing.
+            missing_cols = [col for col in required_columns if col not in self.colnames]
+            if missing_cols:
+                raise ValueError(
+                    "{} object is invalid - missing required column(s): {}. Columns present: {}".format(
+                        self.__class__.__name__, missing_cols, list(self.colnames)
+                    )
+                )
+    
+            # If we were relaxing checks and now all required columns are present, revert to strict checking.
+            if (
+                self._required_columns_relax
+                and self._required_columns == self.colnames[:len(self._required_columns)]
+            ):
                 self._required_columns_relax = False
+      
+      
+    
 
     @contextmanager
     def _delay_required_column_checks(self):
diff --git a/test_required_columns_message.py b/test_required_columns_message.py
new file mode 100644
index 0000000000..ff5557afd5
--- /dev/null
+++ b/test_required_columns_message.py
@@ -0,0 +1,28 @@
+import sys
+import numpy as np
+from astropy.time import Time
+from astropy.timeseries import TimeSeries
+
+print("Starting test_required_columns_message.py test...")
+
+time = Time(np.arange(100000, 100003), format='jd')
+ts = TimeSeries(time=time, data={"flux": [99.9, 99.8, 99.7]})
+ts._required_columns = ["time", "flux"]
+
+try:
+    print("Attempting to remove required column 'flux'...")
+    ts.remove_column("flux")
+except ValueError as e:
+    msg = str(e)
+    print("Caught ValueError:", msg)
+    # The new, correct message should say "missing required column(s): ['flux']"
+    if "missing required column(s): ['flux']" in msg:
+        print("Test PASSED (correctly caught missing column).")
+        sys.exit(0)
+    else:
+        print("Test FAILED (message did not mention the missing column).")
+        sys.exit(1)
+
+# If no error is raised, that, too, is a failure
+print("Test FAILED (no ValueError was raised).")
+sys.exit(1)
