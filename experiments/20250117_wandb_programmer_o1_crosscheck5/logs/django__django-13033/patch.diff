diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index abbb1e37cb..3bd467858f 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -712,29 +712,24 @@ class SQLCompiler:
                     params.append(p)
         return result, params
 
-    def find_ordering_name(self, name, opts, alias=None, default_order='ASC',
-                           already_seen=None):
-        """
-        Return the table alias (the name might be ambiguous, the alias will
-        not be) and column name for ordering by the given 'name' parameter.
-        The 'name' is of the form 'field1__field2__...__fieldN'.
-        """
+    def find_ordering_name(self, name, opts, alias=None, default_order='ASC', already_seen=None):
         name, order = get_order_dir(name, default_order)
-        descending = order == 'DESC'
+        descending = (order == 'DESC')
         pieces = name.split(LOOKUP_SEP)
         field, targets, alias, joins, path, opts, transform_function = self._setup_joins(pieces, opts, alias)
-
+    
         # If we get to this point and the field is a relation to another model,
-        # append the default ordering for that model unless it is the pk
-        # shortcut or the attribute name of the field that is specified.
-        if field.is_relation and opts.ordering and getattr(field, 'attname', None) != name and name != 'pk':
-            # Firstly, avoid infinite loops.
+        # append the default ordering for that model unless it is the pk or
+        # the actual column attname (meaning the user wants the raw column).
+        last_piece = pieces[-1]
+        if field.is_relation and opts.ordering and last_piece != getattr(field, 'attname', None) and name != 'pk':
+            # Avoid infinite loops.
             already_seen = already_seen or set()
             join_tuple = tuple(getattr(self.query.alias_map[j], 'join_cols', None) for j in joins)
             if join_tuple in already_seen:
                 raise FieldError('Infinite loop caused by ordering.')
             already_seen.add(join_tuple)
-
+    
             results = []
             for item in opts.ordering:
                 if hasattr(item, 'resolve_expression') and not isinstance(item, OrderBy):
@@ -742,11 +737,16 @@ class SQLCompiler:
                 if isinstance(item, OrderBy):
                     results.append((item, False))
                     continue
-                results.extend(self.find_ordering_name(item, opts, alias,
-                                                       order, already_seen))
+                results.extend(self.find_ordering_name(item, opts, alias, order, already_seen))
             return results
+    
+        # Otherwise, just order by this column (or columns).
         targets, alias, _ = self.query.trim_joins(targets, joins, path)
-        return [(OrderBy(transform_function(t, alias), descending=descending), False) for t in targets]
+        return [
+            (OrderBy(transform_function(t, alias), descending=descending), False)
+            for t in targets
+        ]
+    
 
     def _setup_joins(self, pieces, opts, alias):
         """
diff --git a/test_self_ref_bug.py b/test_self_ref_bug.py
new file mode 100644
index 0000000000..5dab723f94
--- /dev/null
+++ b/test_self_ref_bug.py
@@ -0,0 +1,75 @@
+#!/usr/bin/env python3
+
+import sys
+import django
+from django.conf import settings
+from django.db import models, connection
+
+def setup_django():
+    if not settings.configured:
+        settings.configure(
+            DEBUG=True,
+            USE_TZ=False,
+            SECRET_KEY="testkey",
+            DATABASES={
+                "default": {
+                    "ENGINE": "django.db.backends.sqlite3",
+                    "NAME": ":memory:",  # Use in-memory DB to avoid leftover tables
+                }
+            },
+            INSTALLED_APPS=["django.contrib.contenttypes"],  # minimal needed
+        )
+    django.setup()
+
+def main():
+    print("Setting up Django environment...")
+    setup_django()
+
+    print("Defining ephemeral models post-setup...")
+
+    class OneModel(models.Model):
+        class Meta:
+            app_label = "test_app"
+            ordering = ("-id",)
+        id = models.BigAutoField(primary_key=True)
+        root = models.ForeignKey("OneModel", on_delete=models.CASCADE, null=True)
+        oneval = models.BigIntegerField(null=True)
+
+    class TwoModel(models.Model):
+        class Meta:
+            app_label = "test_app"
+        id = models.BigAutoField(primary_key=True)
+        record = models.ForeignKey(OneModel, on_delete=models.CASCADE)
+        twoval = models.BigIntegerField(null=True)
+
+    print("Creating tables using schema_editor...")
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(OneModel)
+        schema_editor.create_model(TwoModel)
+
+    print("Creating test data...")
+    root1 = OneModel.objects.create(oneval=1)
+    root2 = OneModel.objects.create(oneval=2)
+    child1 = OneModel.objects.create(oneval=3, root=root1)
+    child2 = OneModel.objects.create(oneval=3, root=root2)
+    TwoModel.objects.create(twoval=10, record=root1)
+    TwoModel.objects.create(twoval=20, record=child1)
+    TwoModel.objects.create(twoval=30, record=root2)
+    TwoModel.objects.create(twoval=40, record=child2)
+
+    print("Running the test query that exhibits unexpected DESC ordering from self-ref FK:")
+    qs = TwoModel.objects.filter(record__oneval__in=[1,2,3]).order_by("record__root_id")
+    actual_sql = str(qs.query)
+    print("Compiled SQL:\n", actual_sql)
+
+    # If the bug is present, we'll see T3."id" DESC or T3.id DESC in the final ordering.
+    if "T3.\"id\" DESC" in actual_sql or "T3.id DESC" in actual_sql:
+        print("FAIL: Found unexpected DESC for T3.id in SQL!")
+        print("Test script is failing (or still pathing incorrectly).")
+        sys.exit(1)
+    else:
+        print("PASS: Did not find the unexpected DESC ordering for T3.id. Possibly fixed.")
+        sys.exit(0)
+
+if __name__ == "__main__":
+    main()
diff --git a/test_self_ref_bug_db.sqlite3 b/test_self_ref_bug_db.sqlite3
new file mode 100644
index 0000000000..825d6935e9
Binary files /dev/null and b/test_self_ref_bug_db.sqlite3 differ
