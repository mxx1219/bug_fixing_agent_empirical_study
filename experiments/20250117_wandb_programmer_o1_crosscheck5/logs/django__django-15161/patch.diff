diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 8642e1f151..5c3a3b9615 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -651,6 +651,7 @@ class OuterRef(F):
         return self
 
 
+@deconstructible(path='django.db.models.Func')
 class Func(SQLiteNumericMixin, Expression):
     """An SQL function call."""
     function = None
@@ -731,6 +732,8 @@ class Func(SQLiteNumericMixin, Expression):
         return copy
 
 
+
+@deconstructible(path='django.db.models.Value')
 class Value(SQLiteNumericMixin, Expression):
     """Represent a wrapped value as a node within an expression."""
     # Provide a default value for `for_save` in order to allow unresolved
@@ -807,6 +810,7 @@ class Value(SQLiteNumericMixin, Expression):
         return self.value
 
 
+
 class RawSQL(Expression):
     def __init__(self, sql, params, output_field=None):
         if output_field is None:
@@ -953,6 +957,7 @@ class OrderByList(Func):
         return super().as_sql(*args, **kwargs)
 
 
+@deconstructible(path='django.db.models.ExpressionWrapper')
 class ExpressionWrapper(SQLiteNumericMixin, Expression):
     """
     An expression that can wrap another expression so that it can provide
@@ -985,6 +990,7 @@ class ExpressionWrapper(SQLiteNumericMixin, Expression):
         return "{}({})".format(self.__class__.__name__, self.expression)
 
 
+
 class When(Expression):
     template = 'WHEN %(condition)s THEN %(result)s'
     # This isn't a complete conditional expression, must be used in Case().
@@ -1052,14 +1058,15 @@ class When(Expression):
         return cols
 
 
+@deconstructible(path='django.db.models.Case')
 class Case(SQLiteNumericMixin, Expression):
     """
     An SQL searched CASE expression:
 
         CASE
-            WHEN n > 0
+            WHEN n &gt; 0
                 THEN 'positive'
-            WHEN n < 0
+            WHEN n &lt; 0
                 THEN 'negative'
             ELSE 'zero'
         END
@@ -1133,6 +1140,8 @@ class Case(SQLiteNumericMixin, Expression):
         return super().get_group_by_cols(alias)
 
 
+
+@deconstructible(path='django.db.models.Subquery')
 class Subquery(BaseExpression, Combinable):
     """
     An explicit subquery. It may contain OuterRef() references to the outer
@@ -1190,6 +1199,7 @@ class Subquery(BaseExpression, Combinable):
         return self.query.get_group_by_cols()
 
 
+
 class Exists(Subquery):
     template = 'EXISTS(%(subquery)s)'
     output_field = fields.BooleanField()
diff --git a/test_use_simplified_paths.py b/test_use_simplified_paths.py
new file mode 100644
index 0000000000..a310105a25
--- /dev/null
+++ b/test_use_simplified_paths.py
@@ -0,0 +1,34 @@
+import sys
+from django.db import models
+from django.db.models import Value, Func, Case, ExpressionWrapper
+
+def check_class_deconstruction(klass, instance, expected_path):
+    path, args, kwargs = instance.deconstruct()
+    print(f"Checking {klass.__name__}: path={path}, expected={expected_path}")
+    if path != expected_path:
+        print("FAIL: Incorrect path!")
+        sys.exit(1)
+    else:
+        print("OK")
+
+def main():
+    # We'll test these classes that, ideally, should produce the simplified path.
+    tests = [
+        (Value, Value(1), "django.db.models.Value"),
+        (Func, Func(Value(1)), "django.db.models.Func"),
+        (Case, Case(), "django.db.models.Case"),
+        (
+            ExpressionWrapper,
+            ExpressionWrapper(Value(1), output_field=models.IntegerField()),
+            "django.db.models.ExpressionWrapper",
+        ),
+    ]
+
+    for klass, instance, expected_path in tests:
+        check_class_deconstruction(klass, instance, expected_path)
+
+    print("All checks passed.")
+    sys.exit(0)
+
+if __name__ == "__main__":
+    main()
