diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index 850734709d..955ec1fa38 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -272,7 +272,7 @@ class SQLCompiler:
         """
         Return a list of 2-tuples of form (expr, (sql, params, is_ref)) for the
         ORDER BY clause.
-
+    
         The order_by clause can alter the select clause (for example it
         can add aliases to clauses that do not yet have one, or it can
         add totally new select clauses).
@@ -284,7 +284,11 @@ class SQLCompiler:
         elif self.query.order_by:
             ordering = self.query.order_by
         elif self.query.get_meta().ordering:
-            ordering = self.query.get_meta().ordering
+            # If the query is aggregating, skip meta ordering.
+            if self.query.annotation_select or self.query.group_by is not None:
+                ordering = []
+            else:
+                ordering = self.query.get_meta().ordering
             self._meta_ordering = ordering
         else:
             ordering = []
@@ -292,7 +296,7 @@ class SQLCompiler:
             asc, desc = ORDER_DIR['ASC']
         else:
             asc, desc = ORDER_DIR['DESC']
-
+    
         order_by = []
         for field in ordering:
             if hasattr(field, 'resolve_expression'):
@@ -309,10 +313,10 @@ class SQLCompiler:
             if field == '?':  # random
                 order_by.append((OrderBy(Random()), False))
                 continue
-
+    
             col, order = get_order_dir(field, asc)
             descending = order == 'DESC'
-
+    
             if col in self.query.annotation_select:
                 # Reference to expression in SELECT clause
                 order_by.append((
@@ -333,7 +337,7 @@ class SQLCompiler:
                         expr = Cast(expr, expr.output_field)
                 order_by.append((OrderBy(expr, descending=descending), False))
                 continue
-
+    
             if '.' in field:
                 # This came in through an extra(order_by=...) addition. Pass it
                 # on verbatim.
@@ -344,7 +348,7 @@ class SQLCompiler:
                         descending=descending
                     ), False))
                 continue
-
+    
             if not self.query.extra or col not in self.query.extra:
                 # 'col' is of the form 'field' or 'field1__field2' or
                 # '-field1__field2__field', etc.
@@ -361,7 +365,7 @@ class SQLCompiler:
                         True))
         result = []
         seen = set()
-
+    
         for expr, is_ref in order_by:
             resolved = expr.resolve_expression(self.query, allow_joins=True, reuse=None)
             if self.query.combinator and self.select:
@@ -403,6 +407,7 @@ class SQLCompiler:
             seen.add((without_ordering, params_hash))
             result.append((resolved, (sql, params, is_ref)))
         return result
+    
 
     def get_extra_select(self, order_by, select):
         extra_select = []
diff --git a/repro_test_script.py b/repro_test_script.py
new file mode 100644
index 0000000000..581d7a98f9
--- /dev/null
+++ b/repro_test_script.py
@@ -0,0 +1,10 @@
+#!/usr/bin/env python
+import subprocess
+import sys
+
+print("Reproduction test script for Meta.ordering GROUP BY bug.")
+cmd = ["python", "tests/runtests.py", "test_bug"]
+print(f"Running command: {cmd}")
+result = subprocess.run(cmd)
+print(f"Test return code: {result.returncode}")
+sys.exit(result.returncode)
diff --git a/tests/test_bug/__init__.py b/tests/test_bug/__init__.py
new file mode 100644
index 0000000000..659fedd0cb
--- /dev/null
+++ b/tests/test_bug/__init__.py
@@ -0,0 +1 @@
+# Make test_bug a test app submodule.
\ No newline at end of file
diff --git a/tests/test_bug/models.py b/tests/test_bug/models.py
new file mode 100644
index 0000000000..81d103183d
--- /dev/null
+++ b/tests/test_bug/models.py
@@ -0,0 +1,9 @@
+from django.db import models
+
+class TestModel(models.Model):
+    name = models.CharField(max_length=50)
+    val = models.IntegerField()
+
+    class Meta:
+        ordering = ['name']
+        app_label = 'test_bug'
diff --git a/tests/test_bug/test_ordering_groupby.py b/tests/test_bug/test_ordering_groupby.py
new file mode 100644
index 0000000000..faf54fb864
--- /dev/null
+++ b/tests/test_bug/test_ordering_groupby.py
@@ -0,0 +1,27 @@
+from django.test import TestCase
+from django.db.models import Sum
+from .models import TestModel
+
+class TestDefaultOrderingGroupBy(TestCase):
+    @classmethod
+    def setUpTestData(cls):
+        # Insert 2 rows that share the same val, but different name.
+        # If the query incorrectly groups on 'name' due to Meta.ordering,
+        # we get 2 groups instead of 1.
+        cls.m1 = TestModel.objects.create(name='a', val=1)
+        cls.m2 = TestModel.objects.create(name='b', val=1)
+
+    def test_meta_ordering_not_in_groupby(self):
+        # Aggregation by 'val'. With correct behavior, we'll get a single row whose 'cnt' is 2.
+        # If 'name' is erroneously added to GROUP BY, there will be 2 rows.
+        qs = TestModel.objects.values('val').annotate(cnt=Sum('val'))
+        self.assertEqual(
+            len(qs),
+            1,
+            f"Expected exactly one group by val. Got: {qs}"
+        )
+        self.assertEqual(
+            qs[0]['cnt'],
+            2,
+            f"Expected cnt=2, got {qs[0]['cnt']} from {qs[0]}"
+        )
