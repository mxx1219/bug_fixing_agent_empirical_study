diff --git a/django/apps/registry.py b/django/apps/registry.py
index 0683f3ad3c..1e6457b0fb 100644
--- a/django/apps/registry.py
+++ b/django/apps/registry.py
@@ -370,18 +370,20 @@ class Apps:
     def clear_cache(self):
         """
         Clear all internal caches, for methods that alter the app registry.
-
+    
         This is mostly used in tests.
         """
         # Call expire cache on each model. This will purge
         # the relation tree and the fields cache.
         self.get_models.cache_clear()
+        self.get_swappable_settings_name.cache_clear()
         if self.ready:
             # Circumvent self.get_models() to prevent that the cache is refilled.
             # This particularly prevents that an empty value is cached while cloning.
             for app_config in self.app_configs.values():
                 for model in app_config.get_models(include_auto_created=True):
                     model._meta._expire_cache()
+    
 
     def lazy_model_operation(self, function, *model_keys):
         """
diff --git a/test_swappable_settings_name_cache.py b/test_swappable_settings_name_cache.py
new file mode 100644
index 0000000000..25cfd6a121
--- /dev/null
+++ b/test_swappable_settings_name_cache.py
@@ -0,0 +1,50 @@
+import sys
+import traceback
+import django
+from django.conf import settings
+from django.apps import apps
+
+def test_main():
+    print("Configuring settings and initializing Django...")
+
+    if not settings.configured:
+        # Minimal settings required to load Django's auth and contenttypes apps
+        settings.configure(
+            INSTALLED_APPS=["django.contrib.auth", "django.contrib.contenttypes"],
+            SECRET_KEY="dummy"
+        )
+
+    django.setup()
+    print("Django setup complete. Models are now loaded.")
+
+    # Clear first to start from a known point.
+    apps.get_swappable_settings_name.cache_clear()
+
+    print("Call get_swappable_settings_name() twice to fill the cache so we have a cache hit.")
+    apps.get_swappable_settings_name("auth.User")
+    apps.get_swappable_settings_name("auth.User")
+    info_before = apps.get_swappable_settings_name.cache_info()
+    print("info_before:", info_before)
+
+    print("Now calling apps.clear_cache(), which should clear get_swappable_settings_name cache if fixed.")
+    apps.clear_cache()
+
+    apps.get_swappable_settings_name("auth.User")
+    info_after = apps.get_swappable_settings_name.cache_info()
+    print("info_after:", info_after)
+
+    # If the cache was not cleared, hits will be >= 2
+    if info_after.hits >= 2:
+        print("FAIL: cache was not cleared. hits >= 2")
+        sys.exit(1)
+    else:
+        print("PASS: cache was cleared. hits < 2")
+        sys.exit(0)
+
+if __name__ == "__main__":
+    try:
+        test_main()
+    except Exception:
+        print("FAIL: unexpected exception")
+        traceback.print_exc()
+        sys.exit(1)
