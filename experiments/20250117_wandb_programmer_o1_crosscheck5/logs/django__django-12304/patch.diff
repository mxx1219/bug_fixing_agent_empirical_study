diff --git a/django/db/models/enums.py b/django/db/models/enums.py
index f48143ddaf..960aac694c 100644
--- a/django/db/models/enums.py
+++ b/django/db/models/enums.py
@@ -7,7 +7,6 @@ __all__ = ['Choices', 'IntegerChoices', 'TextChoices']
 
 class ChoicesMeta(enum.EnumMeta):
     """A metaclass for creating a enum choices."""
-
     def __new__(metacls, classname, bases, classdict):
         labels = []
         for key in classdict._member_names:
@@ -31,6 +30,10 @@ class ChoicesMeta(enum.EnumMeta):
         # that is passed in as "self" as the value to use when looking up the
         # label in the choices.
         cls.label = property(lambda self: cls._value2label_map_.get(self.value))
+
+        # New fix: set do_not_call_in_templates = True at the class level
+        cls.do_not_call_in_templates = True
+
         return enum.unique(cls)
 
     def __contains__(cls, member):
@@ -58,6 +61,7 @@ class ChoicesMeta(enum.EnumMeta):
         return [value for value, _ in cls.choices]
 
 
+
 class Choices(enum.Enum, metaclass=ChoicesMeta):
     """Class for creating enumerated choices."""
 
@@ -69,6 +73,8 @@ class Choices(enum.Enum, metaclass=ChoicesMeta):
         return str(self.value)
 
 
+
+
 class IntegerChoices(int, Choices):
     """Class for creating enumerated integer choices."""
     pass
diff --git a/test_enum_templaterender.py b/test_enum_templaterender.py
new file mode 100644
index 0000000000..db509356ec
--- /dev/null
+++ b/test_enum_templaterender.py
@@ -0,0 +1,66 @@
+import sys
+import django
+from django.conf import settings
+
+def main():
+    if not settings.configured:
+        settings.configure(
+            INSTALLED_APPS=[],
+            TEMPLATES=[
+                {
+                    "BACKEND": "django.template.backends.django.DjangoTemplates",
+                }
+            ],
+            DATABASES={
+                "default": {
+                    "ENGINE": "django.db.backends.sqlite3",
+                    "NAME": ":memory:",
+                }
+            },
+        )
+    django.setup()
+
+    from django.template import Template, Context
+    from django.db.models import TextChoices
+
+    class YearInSchool(TextChoices):
+        FRESHMAN = "FR", "Freshman"
+        SOPHOMORE = "SO", "Sophomore"
+
+    template_string = """
+    {% if year_in_school == YearInSchool.FRESHMAN %}
+    This Works
+    {% else %}
+    This Does Not Work
+    {% endif %}
+
+    Class value: {{ YearInSchool }}
+    """
+
+    print("==> Creating Template with content:")
+    print(template_string)
+
+    t = Template(template_string)
+    context_data = {
+        "year_in_school": YearInSchool.FRESHMAN,
+        "YearInSchool": YearInSchool
+    }
+    print("==> Rendering Template with context:", context_data)
+
+    try:
+        rendered = t.render(Context(context_data))
+        print("==> Rendered output:", repr(rendered))
+    except Exception as e:
+        print(f"==> Rendering failed with exception: {e}")
+        sys.exit(1)
+
+    # Check whether "This Works" appears
+    if "This Works" in rendered:
+        print("==> Test passed.")
+        sys.exit(0)
+    else:
+        print("==> Test failed.")
+        sys.exit(1)
+
+if __name__ == "__main__":
+    main()
