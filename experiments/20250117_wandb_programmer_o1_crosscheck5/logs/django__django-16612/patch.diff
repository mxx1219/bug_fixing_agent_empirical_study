diff --git a/django/contrib/admin/sites.py b/django/contrib/admin/sites.py
index 61be31d890..d34c1b0f3b 100644
--- a/django/contrib/admin/sites.py
+++ b/django/contrib/admin/sites.py
@@ -453,8 +453,13 @@ class AdminSite:
                 pass
             else:
                 if getattr(match.func, "should_append_slash", True):
-                    return HttpResponsePermanentRedirect("%s/" % request.path)
+                    new_url = f"{request.path}/"
+                    query_string = request.META.get("QUERY_STRING", "")
+                    if query_string:
+                        new_url += f"?{query_string}"
+                    return HttpResponsePermanentRedirect(new_url)
         raise Http404
+    
 
     def _build_app_dict(self, request, label=None):
         """
diff --git a/test_catch_all_view_querystring.py b/test_catch_all_view_querystring.py
new file mode 100644
index 0000000000..50b12b38ae
--- /dev/null
+++ b/test_catch_all_view_querystring.py
@@ -0,0 +1,83 @@
+#!/usr/bin/env python
+import sys
+import django
+from django.conf import settings
+
+def main():
+    print("[INFO] Starting test for AdminSite.catch_all_view() query string handling...")
+
+    test_settings = {
+        "SECRET_KEY": "test",
+        "INSTALLED_APPS": [
+            "django.contrib.admin",
+            "django.contrib.auth",
+            "django.contrib.contenttypes",
+            "django.contrib.sessions",
+        ],
+        "MIDDLEWARE": [
+            "django.contrib.sessions.middleware.SessionMiddleware",
+            "django.contrib.auth.middleware.AuthenticationMiddleware",
+            "django.contrib.messages.middleware.MessageMiddleware",
+        ],
+        "ROOT_URLCONF": "test_urls",  # Use local test URLs
+        "DATABASES": {
+            "default": {
+                "ENGINE": "django.db.backends.sqlite3",
+                "NAME": ":memory:",
+            }
+        },
+        "APPEND_SLASH": True,
+        "USE_TZ": False,
+    }
+
+    # Configure Django with minimal settings
+    if not settings.configured:
+        settings.configure(**test_settings)
+    django.setup()
+
+    from django.core.management import call_command
+    # Migrate so the auth_user table exists
+    call_command("migrate", run_syncdb=True, interactive=False, verbosity=0)
+
+    from django.contrib.auth.models import User
+    from django.test import Client
+
+    # Create a staff user
+    staff_user = User.objects.create_user(
+        username="staffuser",
+        password="secret",
+        is_staff=True,
+        is_active=True
+    )
+
+    client = Client()
+    logged_in = client.login(username="staffuser", password="secret")
+    if not logged_in:
+        print("[ERROR] Could not log in as staff user.")
+        sys.exit(1)
+
+    # Use an actual admin route needing a slash: /admin/auth/user
+    url = "/admin/auth/user?id=123"
+    print(f"[INFO] Requesting URL: {url}")
+    response = client.get(url)
+    print(f"[INFO] Response status code: {response.status_code}")
+
+    if response.status_code not in (301, 302):
+        print("[ERROR] Expected a redirect, but got status:", response.status_code)
+        sys.exit(1)
+
+    redirected_url = response.url
+    if redirected_url is None:
+        print("[ERROR] No redirect location found, query string lost entirely.")
+        sys.exit(1)
+
+    print(f"[INFO] Redirected to: {redirected_url}")
+    if "?id=123" not in redirected_url:
+        print("[ERROR] Query string was dropped. Current redirect:", redirected_url)
+        sys.exit(1)
+
+    print("[SUCCESS] Query string was preserved in the redirect.")
+    sys.exit(0)
+
+if __name__ == "__main__":
+    main()
diff --git a/test_urls.py b/test_urls.py
new file mode 100644
index 0000000000..dfc73621fa
--- /dev/null
+++ b/test_urls.py
@@ -0,0 +1,6 @@
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path('admin/', admin.site.urls),
+]
