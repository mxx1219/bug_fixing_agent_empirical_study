diff --git a/asgi_test_helpers.py b/asgi_test_helpers.py
new file mode 100644
index 0000000000..1fd0594978
--- /dev/null
+++ b/asgi_test_helpers.py
@@ -0,0 +1,25 @@
+import sys
+from django.core.exceptions import MiddlewareNotUsed
+
+class RaiseMNUMiddleware:
+    sync_capable = True
+    async_capable = False
+
+    def __init__(self, get_response):
+        # Always raise MiddlewareNotUsed to ensure the chain gets “poisoned” if not fixed.
+        raise MiddlewareNotUsed("Raising for test.")
+
+    def __call__(self, request):
+        return self.get_response(request)
+
+class FullyAsyncMiddleware:
+    sync_capable = False
+    async_capable = True
+
+    def __init__(self, get_response):
+        self.get_response = get_response
+
+    async def __call__(self, request):
+        response = await self.get_response(request)
+        return response
+  
\ No newline at end of file
diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py
index 8e8c3da06a..e11c28604d 100644
--- a/django/core/handlers/base.py
+++ b/django/core/handlers/base.py
@@ -26,16 +26,17 @@ class BaseHandler:
     def load_middleware(self, is_async=False):
         """
         Populate middleware lists from settings.MIDDLEWARE.
-
+    
         Must be called after the environment is fixed (see __call__ in subclasses).
         """
         self._view_middleware = []
         self._template_response_middleware = []
         self._exception_middleware = []
-
+    
         get_response = self._get_response_async if is_async else self._get_response
         handler = convert_exception_to_response(get_response)
         handler_is_async = is_async
+    
         for middleware_path in reversed(settings.MIDDLEWARE):
             middleware = import_string(middleware_path)
             middleware_can_sync = getattr(middleware, 'sync_capable', True)
@@ -49,26 +50,32 @@ class BaseHandler:
                 middleware_is_async = False
             else:
                 middleware_is_async = middleware_can_async
+    
+            # Adapt handler in a temporary variable so we can revert on MiddlewareNotUsed.
+            old_handler = handler
+            old_handler_is_async = handler_is_async
             try:
-                # Adapt handler, if needed.
                 handler = self.adapt_method_mode(
                     middleware_is_async, handler, handler_is_async,
                     debug=settings.DEBUG, name='middleware %s' % middleware_path,
                 )
                 mw_instance = middleware(handler)
             except MiddlewareNotUsed as exc:
+                # Revert the handler if not used.
+                handler = old_handler
+                handler_is_async = old_handler_is_async
                 if settings.DEBUG:
                     if str(exc):
                         logger.debug('MiddlewareNotUsed(%r): %s', middleware_path, exc)
                     else:
                         logger.debug('MiddlewareNotUsed: %r', middleware_path)
                 continue
-
+    
             if mw_instance is None:
                 raise ImproperlyConfigured(
                     'Middleware factory %s returned None.' % middleware_path
                 )
-
+    
             if hasattr(mw_instance, 'process_view'):
                 self._view_middleware.insert(
                     0,
@@ -79,20 +86,20 @@ class BaseHandler:
                     self.adapt_method_mode(is_async, mw_instance.process_template_response),
                 )
             if hasattr(mw_instance, 'process_exception'):
-                # The exception-handling stack is still always synchronous for
-                # now, so adapt that way.
+                # The exception-handling stack is still always synchronous for now.
                 self._exception_middleware.append(
                     self.adapt_method_mode(False, mw_instance.process_exception),
                 )
-
+    
             handler = convert_exception_to_response(mw_instance)
             handler_is_async = middleware_is_async
-
+    
         # Adapt the top of the stack, if needed.
         handler = self.adapt_method_mode(is_async, handler, handler_is_async)
         # We only assign to this when initialization is complete as it is used
         # as a flag for initialization being complete.
         self._middleware_chain = handler
+    
 
     def adapt_method_mode(
         self, is_async, method, method_is_async=None, debug=False, name=None,
diff --git a/test_asgi_middleware_notused.py b/test_asgi_middleware_notused.py
new file mode 100644
index 0000000000..707bc8441f
--- /dev/null
+++ b/test_asgi_middleware_notused.py
@@ -0,0 +1,79 @@
+import os
+import sys
+import asyncio
+import traceback
+
+# Custom middlewares
+class DummyMiddleware:
+    sync_capable = True
+    async_capable = False
+    def __init__(self, get_response):
+        self.get_response = get_response
+        print("Instantiating DummyMiddleware")
+
+    def __call__(self, request):
+        print("DummyMiddleware called")
+        return self.get_response(request)
+
+class NotUsedMiddleware:
+    def __init__(self, get_response):
+        import django.core.exceptions
+        print("Raising MiddlewareNotUsed from NotUsedMiddleware")
+        raise django.core.exceptions.MiddlewareNotUsed("I'm not used")
+
+class AsyncFinalMiddleware:
+    sync_capable = False
+    async_capable = True
+    def __init__(self, get_response):
+        self.get_response = get_response
+        print("Instantiating AsyncFinalMiddleware")
+
+    async def __call__(self, request):
+        print("AsyncFinalMiddleware called")
+        response = await self.get_response(request)
+        return response
+
+async def run_test():
+    os.environ['DJANGO_SETTINGS_MODULE'] = 'test_asgi_middleware_notused_settings'
+    from django.core.asgi import get_asgi_application
+    try:
+        app = get_asgi_application()
+        scope = {
+            'type': 'http',
+            'method': 'GET',
+            'path': '/admin/',
+            'headers': [],
+        }
+        received_body = []
+
+        async def send(message):
+            if message['type'] == 'http.response.body':
+                received_body.append(message.get('body', b''))
+
+        async def receive():
+            return {'type': 'http.request', 'body': b'', 'more_body': False}
+
+        # Invoke the ASGI app
+        await app(scope, receive, send)
+        body_str = b''.join(received_body).decode(errors='replace')
+        if "object HttpResponse can't be used in 'await'" in body_str:
+            print("Bug present: found TypeError in body!")
+            sys.exit(1)
+        else:
+            print("No TypeError in response body.")
+            sys.exit(0)
+
+    except Exception as e:
+        if "object HttpResponse can't be used in 'await'" in str(e):
+            print("Bug present: TypeError raised!")
+            traceback.print_exc()
+            sys.exit(1)
+        else:
+            traceback.print_exc()
+            print("No bug: didn't see the TypeError.")
+            sys.exit(0)
+
+if __name__ == "__main__":
+    loop = asyncio.get_event_loop()
+    loop.run_until_complete(run_test())
+    loop.close()
diff --git a/test_asgi_middleware_notused_settings.py b/test_asgi_middleware_notused_settings.py
new file mode 100644
index 0000000000..fc33ca5c02
--- /dev/null
+++ b/test_asgi_middleware_notused_settings.py
@@ -0,0 +1,28 @@
+DEBUG = True
+SECRET_KEY = 'abcd'
+ROOT_URLCONF = 'test_asgi_middleware_notused_urls'
+ALLOWED_HOSTS = ['*']
+SESSION_FILE_PATH = '/invalid/do/not/exist'
+SESSION_ENGINE = 'django.contrib.sessions.backends.file'
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+]
+
+MIDDLEWARE = [
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'test_asgi_middleware_notused.NotUsedMiddleware',
+    'test_asgi_middleware_notused.DummyMiddleware',
+    'test_asgi_middleware_notused.AsyncFinalMiddleware',
+]
diff --git a/test_asgi_middleware_notused_urls.py b/test_asgi_middleware_notused_urls.py
new file mode 100644
index 0000000000..be3842dfff
--- /dev/null
+++ b/test_asgi_middleware_notused_urls.py
@@ -0,0 +1,8 @@
+from django.contrib import admin
+from django.urls import path
+
+admin.autodiscover()
+
+urlpatterns = [
+    path('admin/', admin.site.urls),
+]
diff --git a/test_asgi_middleware_raise_mnu.py b/test_asgi_middleware_raise_mnu.py
new file mode 100644
index 0000000000..9fe9193d70
--- /dev/null
+++ b/test_asgi_middleware_raise_mnu.py
@@ -0,0 +1,43 @@
+import os, sys, asyncio, traceback
+import django
+from asgiref.testing import ApplicationCommunicator
+
+os.environ["DJANGO_SETTINGS_MODULE"] = "test_asgi_middleware_raise_mnu_settings"
+django.setup()
+
+from django.core.asgi import get_asgi_application
+
+application = get_asgi_application()
+
+async def main():
+    try:
+        communicator = ApplicationCommunicator(application, {
+            "type": "http",
+            "method": "GET",
+            "path": "/trigger",
+            "headers": []
+        })
+        await communicator.send_input({"type": "http.request", "body": b"", "more_body": False})
+        # The next call will raise the TypeError on HEAD if the bug is present.
+        start = await communicator.receive_output(timeout=2)
+    except TypeError as e:
+        # This is precisely the bug symptom: "object HttpResponse can't be used in 'await' expression"
+        print("Encountered TypeError indicating the bug is present:", e)
+        sys.exit(1)
+    except Exception as e:
+        # Some other error or traceback
+        traceback.print_exc()
+        sys.exit(2)
+    else:
+        # If we did NOT crash, the fix is presumably working.
+        if start["type"] == "http.response.start":
+            print("Received http.response.start, status:", start["status"])
+            sys.exit(0)
+        else:
+            print("Received unexpected response type:", start["type"])
+            sys.exit(3)
+
+if __name__ == "__main__":
+    loop = asyncio.get_event_loop()
+    loop.run_until_complete(main())
+  
\ No newline at end of file
diff --git a/test_asgi_middleware_raise_mnu_settings.py b/test_asgi_middleware_raise_mnu_settings.py
new file mode 100644
index 0000000000..f1ab56a302
--- /dev/null
+++ b/test_asgi_middleware_raise_mnu_settings.py
@@ -0,0 +1,24 @@
+SECRET_KEY = "not_very_secret"
+DEBUG = True
+ROOT_URLCONF = "test_asgi_middleware_notused_urls"
+ALLOWED_HOSTS = ["*"]
+
+INSTALLED_APPS = [
+    "django.contrib.contenttypes",
+    "django.contrib.auth",
+    "django.contrib.admin",
+    "django.contrib.sessions",
+]
+
+MIDDLEWARE = [
+    "asgi_test_helpers.RaiseMNUMiddleware",
+    "asgi_test_helpers.FullyAsyncMiddleware",
+]
+
+DATABASES = {
+    "default": {
+        "ENGINE": "django.db.backends.sqlite3",
+        "NAME": ":memory:",
+    }
+}
+  
\ No newline at end of file
