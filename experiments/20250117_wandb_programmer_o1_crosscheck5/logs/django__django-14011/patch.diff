diff --git a/django/test/testcases.py b/django/test/testcases.py
index 92f566b7b0..6b25009de9 100644
--- a/django/test/testcases.py
+++ b/django/test/testcases.py
@@ -1514,11 +1514,14 @@ class LiveServerThread(threading.Thread):
             connections.close_all()
 
     def _create_server(self):
-        return self.server_class(
+        server = self.server_class(
             (self.host, self.port),
             QuietWSGIRequestHandler,
             allow_reuse_address=False,
         )
+        server.daemon_threads = False
+        return server
+    
 
     def terminate(self):
         if hasattr(self, 'httpd'):
diff --git a/scripts/test_liveservertestcase_dbconnections.py b/scripts/test_liveservertestcase_dbconnections.py
new file mode 100644
index 0000000000..9149cbc693
--- /dev/null
+++ b/scripts/test_liveservertestcase_dbconnections.py
@@ -0,0 +1,88 @@
+import os
+import sys
+import time
+import threading
+import unittest
+
+import django
+from django.conf import settings
+from django.http import HttpResponse
+from django.test import LiveServerTestCase, Client
+from django.urls import path
+from django.db import connection
+
+DB_PATH = '/tmp/django_test_race.db'
+if os.path.exists(DB_PATH):
+    os.remove(DB_PATH)
+
+if not settings.configured:
+    settings.configure(
+        SECRET_KEY='test-secret-key',
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': DB_PATH,
+            }
+        },
+        ALLOWED_HOSTS=['testserver', 'localhost'],
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+            'django.contrib.sessions',
+            'django.contrib.messages',
+            'django.contrib.admin',
+        ],
+        MIDDLEWARE=[
+            'django.contrib.sessions.middleware.SessionMiddleware',
+            'django.contrib.auth.middleware.AuthenticationMiddleware',
+        ],
+        ROOT_URLCONF=__name__,
+    )
+
+django.setup()
+
+def slow_view(request):
+    # Force a DB write so that each request definitely holds a DB connection
+    with connection.cursor() as cursor:
+        cursor.execute("CREATE TABLE IF NOT EXISTS race_test_table (id INTEGER PRIMARY KEY, data TEXT)")
+        cursor.execute("INSERT INTO race_test_table (data) VALUES ('some data')")
+
+    # Sleep to give lots of time for the test teardown to race with open connections.
+    time.sleep(10)
+    return HttpResponse("Slow response done.")
+
+urlpatterns = [
+    path('sleep/', slow_view, name='slow_view'),
+]
+
+class RaceConditionTest(LiveServerTestCase):
+    def test_race_condition(self):
+        num_threads = 50
+        client = Client()
+        threads = []
+        for i in range(num_threads):
+            thread = threading.Thread(
+                target=lambda: client.get(self.live_server_url + '/sleep/')
+            )
+            thread.start()
+            threads.append(thread)
+        # Wait only a brief time so teardown occurs while requests are ongoing.
+        time.sleep(0.1)
+
+def run_once():
+    suite = unittest.defaultTestLoader.loadTestsFromTestCase(RaceConditionTest)
+    runner = unittest.TextTestRunner(verbosity=2)
+    result = runner.run(suite)
+    return len(result.errors) + len(result.failures)
+
+if __name__ == '__main__':
+    # Increase attempts to 10
+    num_runs = 10
+    for iteration in range(1, num_runs + 1):
+        print(f'===== Test Run {iteration} of {num_runs} =====')
+        failures = run_once()
+        if failures > 0:
+            sys.exit(failures)
+    # If we made it through all runs without errors, exit 0
+    sys.exit(0)
