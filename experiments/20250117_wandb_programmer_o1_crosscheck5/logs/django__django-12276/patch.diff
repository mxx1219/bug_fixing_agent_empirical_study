diff --git a/django/forms/widgets.py b/django/forms/widgets.py
index 338d54d72f..3efc5086a4 100644
--- a/django/forms/widgets.py
+++ b/django/forms/widgets.py
@@ -387,6 +387,10 @@ class FileInput(Input):
     def value_omitted_from_data(self, data, files, name):
         return name not in files
 
+    def use_required_attribute(self, initial):
+        return super().use_required_attribute(initial) and not initial
+
+
 
 FILE_INPUT_CONTRADICTION = object()
 
@@ -440,20 +444,13 @@ class ClearableFileInput(FileInput):
     def value_from_datadict(self, data, files, name):
         upload = super().value_from_datadict(data, files, name)
         if not self.is_required and CheckboxInput().value_from_datadict(
-                data, files, self.clear_checkbox_name(name)):
-
+            data, files, self.clear_checkbox_name(name)
+        ):
             if upload:
-                # If the user contradicts themselves (uploads a new file AND
-                # checks the "clear" checkbox), we return a unique marker
-                # object that FileField will turn into a ValidationError.
                 return FILE_INPUT_CONTRADICTION
-            # False signals to clear any existing value, as opposed to just None
             return False
         return upload
 
-    def use_required_attribute(self, initial):
-        return super().use_required_attribute(initial) and not initial
-
     def value_omitted_from_data(self, data, files, name):
         return (
             super().value_omitted_from_data(data, files, name) and
@@ -461,6 +458,7 @@ class ClearableFileInput(FileInput):
         )
 
 
+
 class Textarea(Widget):
     template_name = 'django/forms/widgets/textarea.html'
 
diff --git a/test_fileinput_required.py b/test_fileinput_required.py
new file mode 100644
index 0000000000..0747d19a0a
--- /dev/null
+++ b/test_fileinput_required.py
@@ -0,0 +1,36 @@
+import sys
+
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='secret!',
+        LANGUAGE_CODE='en-us',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+    )
+
+import django
+django.setup()
+
+print("Check if FileInput is incorrectly including 'required' attribute when there's an initial file...")
+
+from django import forms
+from django.forms.widgets import FileInput
+
+class TestForm(forms.Form):
+    file_field = forms.FileField(required=True, widget=FileInput)
+
+form = TestForm(initial={'file_field': 'somefile.jpg'})
+rendered = str(form['file_field'])
+
+print("Rendered HTML:", rendered)
+
+if 'required' in rendered.lower():
+    print("FAIL: The widget has a 'required' attribute despite having an initial file.")
+    sys.exit(1)
+else:
+    print("PASS: The widget does not have a 'required' attribute when an initial file is present.")
+    sys.exit(0)
