diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py
index b3cfc6723c..f14bac7119 100644
--- a/django/contrib/auth/forms.py
+++ b/django/contrib/auth/forms.py
@@ -163,12 +163,12 @@ class UserChangeForm(forms.ModelForm):
         super().__init__(*args, **kwargs)
         password = self.fields.get("password")
         if password:
-            password.help_text = password.help_text.format("../password/")
+            # Fix: incorporate self.instance.pk
+            password.help_text = password.help_text.format(f"../../{self.instance.pk}/password/")
         user_permissions = self.fields.get("user_permissions")
         if user_permissions:
-            user_permissions.queryset = user_permissions.queryset.select_related(
-                "content_type"
-            )
+            user_permissions.queryset = user_permissions.queryset.select_related("content_type")
+    
 
 
 class AuthenticationForm(forms.Form):
diff --git a/test_to_field_admin.py b/test_to_field_admin.py
new file mode 100644
index 0000000000..1d82aecea8
--- /dev/null
+++ b/test_to_field_admin.py
@@ -0,0 +1,90 @@
+#!/usr/bin/env python
+import sys
+import os
+import django
+from django.conf import settings
+from django.test.utils import setup_test_environment, setup_databases, teardown_databases
+from django.test import Client
+from django.contrib.auth import get_user_model
+from django.core.management import call_command
+
+def main():
+    print("STEP: Configuring Django settings for test environment.")
+    if not settings.configured:
+        settings.configure(
+            SECRET_KEY='test',
+            DEBUG=True,
+            ALLOWED_HOSTS=['*'],
+            INSTALLED_APPS=[
+                'django.contrib.contenttypes',
+                'django.contrib.auth',
+                'django.contrib.admin',
+                'django.contrib.sessions',
+            ],
+            MIDDLEWARE=[
+                'django.contrib.sessions.middleware.SessionMiddleware',
+                'django.contrib.auth.middleware.AuthenticationMiddleware',
+            ],
+            # Point to our custom file that includes admin routes.
+            ROOT_URLCONF='test_to_field_admin_urls',
+            DATABASES={
+                'default': {
+                    'ENGINE': 'django.db.backends.sqlite3',
+                    'NAME': ':memory:',
+                }
+            },
+            TEMPLATES=[
+                {
+                    'BACKEND': 'django.template.backends.django.DjangoTemplates',
+                    'DIRS': [],
+                    'APP_DIRS': True,
+                    'OPTIONS': {},
+                },
+            ],
+            PASSWORD_HASHERS=[
+                'django.contrib.auth.hashers.MD5PasswordHasher',
+            ],
+        )
+
+    print("STEP: Performing django.setup()...")
+    django.setup()
+
+    print("STEP: Setting up test environment and in-memory database.")
+    setup_test_environment()
+    db_cfg = setup_databases(verbosity=0, interactive=False, keepdb=False)
+
+    print("STEP: Running migrate to ensure tables exist.")
+    call_command('migrate', run_syncdb=True, verbosity=0)
+
+    print("STEP: Creating superuser and normal user.")
+    User = get_user_model()
+    User.objects.create_superuser(username='admin', password='admin', email='admin@example.com')
+    test_user = User.objects.create_user(username='testuser', password='testpass')
+
+    print("STEP: Logging into the admin site with superuser credentials.")
+    c = Client()
+    logged_in = c.login(username='admin', password='admin')
+    if not logged_in:
+        print("ERROR: Could not log in as admin!")
+        teardown_databases(db_cfg, verbosity=0)
+        sys.exit(1)
+
+    print("STEP: Requesting the user change page with ?_to_field=uuid.")
+    url = f'/admin/auth/user/{test_user.pk}/change/?_to_field=uuid'
+    response = c.get(url)
+    html = response.content.decode()
+    print(f'Got HTTP status code: {response.status_code}')
+
+    # If the bug is present, we'll see '../password/' in the form HTML.
+    print("STEP: Searching HTML for '../password/'.")
+    if "../password/" in html:
+        print("FAILURE: Found '../password/' link, so the bug is still present.")
+        teardown_databases(db_cfg, verbosity=0)
+        sys.exit(1)
+    else:
+        print("SUCCESS: Did not find '../password/' link, so the fix might be present.")
+        teardown_databases(db_cfg, verbosity=0)
+        sys.exit(0)
+
+if __name__ == '__main__':
+    main()
diff --git a/test_to_field_admin_urls.py b/test_to_field_admin_urls.py
new file mode 100644
index 0000000000..be3842dfff
--- /dev/null
+++ b/test_to_field_admin_urls.py
@@ -0,0 +1,8 @@
+from django.contrib import admin
+from django.urls import path
+
+admin.autodiscover()
+
+urlpatterns = [
+    path('admin/', admin.site.urls),
+]
