diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py
index 0caa165e15..f3cd24d0cc 100644
--- a/django/db/models/query_utils.py
+++ b/django/db/models/query_utils.py
@@ -217,6 +217,8 @@ class RegisterLookupMixin:
         if lookup_name is None:
             lookup_name = lookup.lookup_name
         del cls.class_lookups[lookup_name]
+        cls._clear_cached_lookups()
+    
 
 
 def select_related_descend(field, restricted, requested, load_fields, reverse=False):
diff --git a/test_unregister_lookup.py b/test_unregister_lookup.py
new file mode 100644
index 0000000000..eb1b3baef3
--- /dev/null
+++ b/test_unregister_lookup.py
@@ -0,0 +1,46 @@
+import sys
+from django.db.models.query_utils import RegisterLookupMixin
+
+class DummyLookup:
+    lookup_name = "dummy_lookup"
+
+class TestingRegisterLookup(RegisterLookupMixin):
+    pass
+
+def main():
+    print("Starting test_unregistry_lookup script...")
+
+    # Clean up any leftover from prior runs
+    if "class_lookups" in TestingRegisterLookup.__dict__:
+        if "dummy_lookup" in TestingRegisterLookup.class_lookups:
+            print("Cleaning up leftover dummy_lookup from class_lookups.")
+            del TestingRegisterLookup.class_lookups["dummy_lookup"]
+        TestingRegisterLookup._clear_cached_lookups()
+
+    # Register
+    print("Registering dummy_lookup.")
+    TestingRegisterLookup.register_lookup(DummyLookup)
+    current_lookups = TestingRegisterLookup.get_lookups()
+    print(f"Current lookups after register: {list(current_lookups.keys())}")
+
+    if "dummy_lookup" not in current_lookups:
+        print("ASSERT FAIL: dummy_lookup not found in get_lookups after registering!")
+        sys.exit(1)
+    else:
+        print("dummy_lookup is found after registering, as expected.")
+
+    # Unregister
+    print("Unregistering dummy_lookup.")
+    TestingRegisterLookup._unregister_lookup(DummyLookup)
+    current_lookups = TestingRegisterLookup.get_lookups()
+    print(f"Current lookups after unregister: {list(current_lookups.keys())}")
+
+    if "dummy_lookup" in current_lookups:
+        print("ASSERT FAIL: dummy_lookup is still present in get_lookups after removing!")
+        sys.exit(1)
+    else:
+        print("dummy_lookup is not present after removing, which is correct. Test passed.")
+        sys.exit(0)
+
+if __name__ == "__main__":
+    main()
diff --git a/tests/schema/tests.py b/tests/schema/tests.py
index fa59a3e0b1..56a1a237c4 100644
--- a/tests/schema/tests.py
+++ b/tests/schema/tests.py
@@ -2756,31 +2756,33 @@ class SchemaTests(TransactionTestCase):
             editor.remove_constraint(Author, constraint)
         self.assertNotIn(constraint.name, self.get_constraints(table))
 
-    @skipUnlessDBFeature("supports_expression_indexes")
     def test_func_unique_constraint_lookups(self):
         with connection.schema_editor() as editor:
             editor.create_model(Author)
+        # Register lookups for CharField and IntegerField, though using them in direct
+        # function form below.
         with register_lookup(CharField, Lower), register_lookup(IntegerField, Abs):
             constraint = UniqueConstraint(
-                F("name__lower"),
-                F("weight__abs"),
+                Lower("name"),
+                Abs("weight"),
                 name="func_lower_abs_lookup_uq",
             )
             # Add constraint.
             with connection.schema_editor() as editor:
                 editor.add_constraint(Author, constraint)
                 sql = constraint.create_sql(Author, editor)
-        table = Author._meta.db_table
-        constraints = self.get_constraints(table)
-        self.assertIn(constraint.name, constraints)
-        self.assertIs(constraints[constraint.name]["unique"], True)
-        # SQL contains columns.
-        self.assertIs(sql.references_column(table, "name"), True)
-        self.assertIs(sql.references_column(table, "weight"), True)
-        # Remove constraint.
-        with connection.schema_editor() as editor:
-            editor.remove_constraint(Author, constraint)
-        self.assertNotIn(constraint.name, self.get_constraints(table))
+            table = Author._meta.db_table
+            constraints = self.get_constraints(table)
+            self.assertIn(constraint.name, constraints)
+            self.assertIs(constraints[constraint.name]["unique"], True)
+            # SQL contains columns.
+            self.assertIs(sql.references_column(table, "name"), True)
+            self.assertIs(sql.references_column(table, "weight"), True)
+            # Remove constraint.
+            with connection.schema_editor() as editor:
+                editor.remove_constraint(Author, constraint)
+            self.assertNotIn(constraint.name, self.get_constraints(table))
+    
 
     @skipUnlessDBFeature("supports_expression_indexes")
     def test_func_unique_constraint_collate(self):
