diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
index 6ea18dd22f..ac723f7def 100644
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -321,10 +321,30 @@ class LocalePrefixPattern:
             return '%s/' % language_code
 
     def match(self, path):
-        language_prefix = self.language_prefix
-        if path.startswith(language_prefix):
-            return path[len(language_prefix):], (), {}
+        from django.conf import settings
+        # Strip leading slashes to find the first segment
+        stripped = path.lstrip('/')
+        idx = stripped.find('/')
+        if idx == -1:
+            prefix_segment = stripped
+            remainder = ''
+        else:
+            prefix_segment = stripped[:idx]
+            remainder = stripped[idx+1:]
+    
+        valid_lang_codes = [c for (c, n) in settings.LANGUAGES]
+        # If the first segment is a recognized lang code, match and strip it off.
+        if prefix_segment in valid_lang_codes:
+            return remainder, (), {}
+    
+        # If there's no segment and prefix_default_language=False, treat that as no language prefix.
+        if prefix_segment == '' and not self.prefix_default_language:
+            # Return the entire stripped path so that it routes normally without a language prefix.
+            return stripped, (), {}
+    
+        # Otherwise, no match.
         return None
+    
 
     def check(self):
         return []
diff --git a/scripts/test_en_latn_script_region.py b/scripts/test_en_latn_script_region.py
new file mode 100644
index 0000000000..5d399f62b5
--- /dev/null
+++ b/scripts/test_en_latn_script_region.py
@@ -0,0 +1,53 @@
+#!/usr/bin/env python
+import sys
+
+import django
+from django.conf import settings
+from django.test import SimpleTestCase, override_settings
+from django.test.runner import DiscoverRunner
+from django.urls import path
+from django.conf.urls.i18n import i18n_patterns
+from django.http import HttpResponse
+
+# Ensure Django is set up (in case DJANGO_SETTINGS_MODULE isn't set).
+if not settings.configured:
+    settings.configure()
+
+django.setup()
+
+def test_view(request):
+    return HttpResponse("U!")
+
+@override_settings(
+    LANGUAGE_CODE='en-us',
+    LANGUAGES=[
+        ('en-us', 'English'),
+        ('en-latn-us', 'Latin English'),
+        ('en-Latn-US', 'BCP 47 case format'),
+    ],
+    MIDDLEWARE=[
+        'django.middleware.common.CommonMiddleware',
+        'django.middleware.locale.LocaleMiddleware',
+    ],
+    ROOT_URLCONF=__name__,
+    USE_I18N=True,
+)
+class TestScriptRegionCase(SimpleTestCase):
+    def test_en_us(self):
+        response = self.client.get('/en-us/')
+        self.assertEqual(response.status_code, 200, f'Response code: {response.status_code}')
+
+    def test_en_latn_us_lowercase(self):
+        response = self.client.get('/en-latn-us/')
+        self.assertEqual(response.status_code, 200, f'Response code: {response.status_code}')
+
+    def test_en_Latn_US_case(self):
+        response = self.client.get('/en-Latn-US/')
+        self.assertEqual(response.status_code, 200, f'Response code: {response.status_code}')
+
+urlpatterns = i18n_patterns(path('', test_view))
+
+if __name__ == '__main__':
+    test_runner = DiscoverRunner(verbosity=2, interactive=False)
+    failures = test_runner.run_tests(['__main__'])
+    sys.exit(bool(failures))
