diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py
index c957ffa564..b3d0858e42 100644
--- a/django/db/models/query_utils.py
+++ b/django/db/models/query_utils.py
@@ -40,23 +40,28 @@ class Q(tree.Node):
         super().__init__(children=[*args, *sorted(kwargs.items())], connector=_connector, negated=_negated)
 
     def _combine(self, other, conn):
+        # Accept Q or any conditional expression.
         if not isinstance(other, Q):
-            raise TypeError(other)
-
-        # If the other Q() is empty, ignore it and just use `self`.
+            if getattr(other, 'conditional', False):
+                other = Q(other)
+            else:
+                raise TypeError(other)
+    
+        # If the other Q() is empty, ignore it and just use self.
         if not other:
             _, args, kwargs = self.deconstruct()
             return type(self)(*args, **kwargs)
-        # Or if this Q is empty, ignore it and just use `other`.
+        # Or if this Q is empty, ignore it and just use other.
         elif not self:
             _, args, kwargs = other.deconstruct()
             return type(other)(*args, **kwargs)
-
+    
         obj = type(self)()
         obj.connector = conn
         obj.add(self, conn)
         obj.add(other, conn)
         return obj
+    
 
     def __or__(self, other):
         return self._combine(other, self.OR)
@@ -87,7 +92,12 @@ class Q(tree.Node):
         args, kwargs = (), {}
         if len(self.children) == 1 and not isinstance(self.children[0], Q):
             child = self.children[0]
-            kwargs = {child[0]: child[1]}
+            # If 'child' is a 2-tuple, treat it as a (key, value) filter.
+            if isinstance(child, tuple) and len(child) == 2:
+                kwargs = {child[0]: child[1]}
+            else:
+                # Otherwise, treat it as a single positional argument.
+                args = (child,)
         else:
             args = tuple(self.children)
             if self.connector != self.default:
@@ -95,6 +105,7 @@ class Q(tree.Node):
         if self.negated:
             kwargs['_negated'] = True
         return path, args, kwargs
+    
 
 
 class DeferredAttribute:
diff --git a/test_q_exists_bug.py b/test_q_exists_bug.py
new file mode 100644
index 0000000000..7b194404af
--- /dev/null
+++ b/test_q_exists_bug.py
@@ -0,0 +1,69 @@
+import sys
+import traceback
+import django
+from django.conf import settings
+from django.db import connection, models
+from django.db.models import Q, Exists, OuterRef
+
+"""
+This script reproduces the Q & Exists TypeError bug.
+
+On HEAD (unfixed):
+- Q() & Exists(...) raises TypeError
+- So the script should exit with status 1.
+
+After the fix:
+- Q() & Exists(...) should succeed
+- The script should exit with status 0.
+"""
+
+# Minimal setup
+settings.configure(
+    SECRET_KEY="test",
+    DEBUG=True,
+    INSTALLED_APPS=[
+        "django.contrib.contenttypes",
+        "__main__",  # so we can define models here
+    ],
+    DATABASES={
+        "default": {
+            "ENGINE": "django.db.backends.sqlite3",
+            "NAME": ":memory:"
+        }
+    },
+)
+django.setup()
+
+class Product(models.Model):
+    name = models.CharField(max_length=50)
+
+# Migrate
+with connection.schema_editor() as editor:
+    editor.create_model(Product)
+
+def main():
+    try:
+        # Create a dummy query
+        Product.objects.create(name="Thing")
+        subquery = Product.objects.filter(name="Thing")
+        expr = Exists(subquery)
+        
+        # The known problematic operation:
+        # This line must NOT raise TypeError after the fix.
+        combined = Q() & expr
+
+        # If we succeed here, that means the fix worked.
+        print("SUCCESS: Q() & Exists(...) did not raise TypeError.")
+        sys.exit(0)
+        
+    except TypeError as e:
+        print("FAIL: Q() & Exists(...) caused TypeError.")
+        traceback.print_exc()
+        sys.exit(1)
+    except Exception as ex:
+        print("An unexpected exception occurred:", ex)
+        traceback.print_exc()
+        sys.exit(1)
+
+if __name__ == "__main__":
+    main()
