diff --git a/django/db/models/fields/reverse_related.py b/django/db/models/fields/reverse_related.py
index ccc2223a5f..40a992148c 100644
--- a/django/db/models/fields/reverse_related.py
+++ b/django/db/models/fields/reverse_related.py
@@ -308,11 +308,13 @@ class ManyToManyRel(ForeignObjectRel):
 
     @property
     def identity(self):
+        # Through fields must also be hashable, same as limit_choices_to.
         return super().identity + (
             self.through,
-            self.through_fields,
+            make_hashable(self.through_fields),
             self.db_constraint,
         )
+    
 
     def get_related_field(self):
         """
diff --git a/test_m2m_through_fields_bug.py b/test_m2m_through_fields_bug.py
new file mode 100644
index 0000000000..33445d02e3
--- /dev/null
+++ b/test_m2m_through_fields_bug.py
@@ -0,0 +1,70 @@
+import sys
+import traceback
+import django
+from django.conf import settings
+from django.core.management import call_command
+from django.db import models
+
+def main():
+    print("Configuring Django settings in-memory...")
+    if not settings.configured:
+        settings.configure(
+            INSTALLED_APPS=[
+                'django.contrib.auth',
+                'django.contrib.contenttypes',
+                '__main__',  # So models defined here can be discovered
+            ],
+            DATABASES={
+                'default': {
+                    'ENGINE': 'django.db.backends.sqlite3',
+                    'NAME': ':memory:',
+                },
+            },
+            SECRET_KEY='dummysecretkey',
+        )
+
+    print("Calling django.setup()...")
+    django.setup()
+
+    print("Defining test models...")
+
+    class Parent(models.Model):
+        name = models.CharField(max_length=256)
+
+    class ProxyParent(Parent):
+        class Meta:
+            proxy = True
+
+    class Child(models.Model):
+        parent = models.ForeignKey(Parent, on_delete=models.CASCADE)
+        many_to_many_field = models.ManyToManyField(
+            to=Parent,
+            through='ManyToManyModel',
+            through_fields=['child', 'parent'],
+            related_name='something'
+        )
+
+    class ManyToManyModel(models.Model):
+        parent = models.ForeignKey(Parent, on_delete=models.CASCADE, related_name='+')
+        child = models.ForeignKey(Child, on_delete=models.CASCADE, related_name='+')
+        second_child = models.ForeignKey(Child, on_delete=models.CASCADE, null=True, default=None)
+
+    print("Running manage.py check...")
+    try:
+        call_command('check')
+    except Exception as e:
+        tb_str = traceback.format_exc()
+        print("================= ERROR traceback =================")
+        print(tb_str)
+        if "unhashable type: 'list'" in tb_str:
+            print("Detected 'unhashable type: list' => Bug present. Exiting with code 1.")
+            sys.exit(1)
+        else:
+            print("Unexpected error => cannot confirm bug fix status. Exiting with code 2.")
+            sys.exit(2)
+
+    print("No error => Bug is presumably fixed. Exiting with code 0.")
+    sys.exit(0)
+
+if __name__ == '__main__':
+    main()
