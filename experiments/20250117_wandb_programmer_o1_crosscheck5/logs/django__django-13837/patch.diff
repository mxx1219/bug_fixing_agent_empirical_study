diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py
index b8efb9f881..edaf1ae2a5 100644
--- a/django/utils/autoreload.py
+++ b/django/utils/autoreload.py
@@ -216,36 +216,41 @@ def get_child_arguments():
     executable is reported to not have the .exe extension which can cause bugs
     on reloading.
     """
-    import django.__main__
-    django_main_path = Path(django.__main__.__file__)
-    py_script = Path(sys.argv[0])
-
-    args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]
-    if py_script == django_main_path:
-        # The server was started with `python -m django runserver`.
-        args += ['-m', 'django']
+    import sys
+    import __main__
+    from pathlib import Path
+
+    # Generate base args with Python executable and any -W options
+    args = [sys.executable] + [f"-W{o}" for o in sys.warnoptions]
+
+    # If Python was launched via "python -m some_pkg", use __main__.__spec__.
+    main_spec = getattr(__main__, "__spec__", None)
+    if main_spec is not None and main_spec.parent:
+        # The server was started with "python -m {parent_name}".
+        args += ["-m", main_spec.parent]
+        # Add remaining arguments (excluding the script name).
         args += sys.argv[1:]
-    elif not py_script.exists():
-        # sys.argv[0] may not exist for several reasons on Windows.
-        # It may exist with a .exe extension or have a -script.py suffix.
-        exe_entrypoint = py_script.with_suffix('.exe')
+        return args
+
+    # Fallback for other cases, including "python manage.py ..."
+    py_script = Path(sys.argv[0])
+    if not py_script.exists():
+        # Possibly Windows, where sys.argv[0] doesn't match an actual file.
+        exe_entrypoint = py_script.with_suffix(".exe")
         if exe_entrypoint.exists():
-            # Should be executed directly, ignoring sys.executable.
-            # TODO: Remove str() when dropping support for PY37.
-            # args parameter accepts path-like on Windows from Python 3.8.
+            # Execute the .exe directly, ignoring sys.executable
             return [str(exe_entrypoint), *sys.argv[1:]]
-        script_entrypoint = py_script.with_name('%s-script.py' % py_script.name)
+        script_entrypoint = py_script.with_name(f"{py_script.name}-script.py")
         if script_entrypoint.exists():
-            # Should be executed as usual.
-            # TODO: Remove str() when dropping support for PY37.
-            # args parameter accepts path-like on Windows from Python 3.8.
             return [*args, str(script_entrypoint), *sys.argv[1:]]
-        raise RuntimeError('Script %s does not exist.' % py_script)
+        raise RuntimeError(f"Script {py_script} does not exist.")
     else:
+        # Otherwise, default to simply re-running sys.argv
         args += sys.argv
     return args
 
 
+
 def trigger_reload(filename):
     logger.info('%s changed, reloading.', filename)
     sys.exit(3)
diff --git a/scripts/test_autoreload_pkg_parent.py b/scripts/test_autoreload_pkg_parent.py
new file mode 100644
index 0000000000..a68b28cf1a
--- /dev/null
+++ b/scripts/test_autoreload_pkg_parent.py
@@ -0,0 +1,38 @@
+import sys
+import types
+
+def main():
+    print("Setting up test environment to simulate 'python -m some_pkg runserver'...")
+
+    original_argv = sys.argv[:]
+    original_main_spec = getattr(sys.modules["__main__"], "__spec__", None)
+
+    # Simulate __main__.__spec__ as if started with "-m some_pkg".
+    sys.modules["__main__"].__spec__ = types.SimpleNamespace(parent="some_pkg")
+    sys.argv = ["/usr/bin/python", "runserver"]
+
+    print("sys.argv set to:", sys.argv)
+    print("__main__.__spec__.parent set to:", sys.modules["__main__"].__spec__.parent)
+
+    from django.utils.autoreload import get_child_arguments
+    child_args = get_child_arguments()
+    print("Result from get_child_arguments():", child_args)
+
+    # Restore
+    sys.argv = original_argv
+    if original_main_spec is None:
+        del sys.modules["__main__"].__dict__["__spec__"]
+    else:
+        sys.modules["__main__"].__spec__ = original_main_spec
+
+    # Decide pass/fail
+    # For a correct implementation, we want "child_args" to contain: "-m", "some_pkg"
+    if "-m" in child_args and "some_pkg" in child_args:
+        print("Test PASS - the reloader preserves '-m some_pkg'")
+        sys.exit(0)
+    else:
+        print("Test FAIL - the reloader does NOT preserve '-m some_pkg'")
+        sys.exit(1)
+
+if __name__ == "__main__":
+    main()
