diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py
index 2eeaf98c0d..0204f6941c 100644
--- a/django/db/backends/sqlite3/base.py
+++ b/django/db/backends/sqlite3/base.py
@@ -322,34 +322,26 @@ class DatabaseWrapper(BaseDatabaseWrapper):
         checks were off.
         """
         if self.features.supports_pragma_foreign_key_check:
+            from itertools import chain
             with self.cursor() as cursor:
                 if table_names is None:
-                    violations = cursor.execute('PRAGMA foreign_key_check').fetchall()
+                    violations = cursor.execute("PRAGMA foreign_key_check").fetchall()
                 else:
                     violations = chain.from_iterable(
-                        cursor.execute('PRAGMA foreign_key_check(%s)' % table_name).fetchall()
+                        cursor.execute(f'PRAGMA foreign_key_check("{table_name}")').fetchall()
                         for table_name in table_names
                     )
                 # See https://www.sqlite.org/pragma.html#pragma_foreign_key_check
                 for table_name, rowid, referenced_table_name, foreign_key_index in violations:
-                    foreign_key = cursor.execute(
-                        'PRAGMA foreign_key_list(%s)' % table_name
-                    ).fetchall()[foreign_key_index]
+                    foreign_key = cursor.execute(f'PRAGMA foreign_key_list("{table_name}")').fetchall()[foreign_key_index]
                     column_name, referenced_column_name = foreign_key[3:5]
                     primary_key_column_name = self.introspection.get_primary_key_column(cursor, table_name)
-                    primary_key_value, bad_value = cursor.execute(
-                        'SELECT %s, %s FROM %s WHERE rowid = %%s' % (
-                            primary_key_column_name, column_name, table_name
-                        ),
-                        (rowid,),
-                    ).fetchone()
+                    query = f'SELECT {primary_key_column_name}, {column_name} FROM {table_name} WHERE rowid = ?'
+                    primary_key_value, bad_value = cursor.execute(query, (rowid,)).fetchone()
                     raise IntegrityError(
-                        "The row in table '%s' with primary key '%s' has an "
-                        "invalid foreign key: %s.%s contains a value '%s' that "
-                        "does not have a corresponding value in %s.%s." % (
-                            table_name, primary_key_value, table_name, column_name,
-                            bad_value, referenced_table_name, referenced_column_name
-                        )
+                        f"The row in table '{table_name}' with primary key '{primary_key_value}' has an "
+                        f"invalid foreign key: {table_name}.{column_name} contains a value '{bad_value}' that "
+                        f"does not have a corresponding value in {referenced_table_name}.{referenced_column_name}."
                     )
         else:
             with self.cursor() as cursor:
@@ -362,27 +354,20 @@ class DatabaseWrapper(BaseDatabaseWrapper):
                     key_columns = self.introspection.get_key_columns(cursor, table_name)
                     for column_name, referenced_table_name, referenced_column_name in key_columns:
                         cursor.execute(
+                            f"""
+                            SELECT REFERRING.`{primary_key_column_name}`, REFERRING.`{column_name}` FROM `{table_name}` as REFERRING
+                            LEFT JOIN `{referenced_table_name}` as REFERRED
+                            ON (REFERRING.`{column_name}` = REFERRED.`{referenced_column_name}`)
+                            WHERE REFERRING.`{column_name}` IS NOT NULL AND REFERRED.`{referenced_column_name}` IS NULL
                             """
-                            SELECT REFERRING.`%s`, REFERRING.`%s` FROM `%s` as REFERRING
-                            LEFT JOIN `%s` as REFERRED
-                            ON (REFERRING.`%s` = REFERRED.`%s`)
-                            WHERE REFERRING.`%s` IS NOT NULL AND REFERRED.`%s` IS NULL
-                            """
-                            % (
-                                primary_key_column_name, column_name, table_name,
-                                referenced_table_name, column_name, referenced_column_name,
-                                column_name, referenced_column_name,
-                            )
                         )
                         for bad_row in cursor.fetchall():
                             raise IntegrityError(
-                                "The row in table '%s' with primary key '%s' has an "
-                                "invalid foreign key: %s.%s contains a value '%s' that "
-                                "does not have a corresponding value in %s.%s." % (
-                                    table_name, bad_row[0], table_name, column_name,
-                                    bad_row[1], referenced_table_name, referenced_column_name,
-                                )
+                                f"The row in table '{table_name}' with primary key '{bad_row[0]}' has an "
+                                f"invalid foreign key: {table_name}.{column_name} contains a value '{bad_row[1]}' that "
+                                f"does not have a corresponding value in {referenced_table_name}.{referenced_column_name}."
                             )
+    
 
     def is_usable(self):
         return True
diff --git a/test_reserved_word.py b/test_reserved_word.py
new file mode 100644
index 0000000000..d3e7c5a233
--- /dev/null
+++ b/test_reserved_word.py
@@ -0,0 +1,35 @@
+import sys
+import django
+from django.conf import settings
+from django.db import connections, DEFAULT_DB_ALIAS
+
+def main():
+    # Configure a minimal Django environment using an in-memory SQLite database.
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[],
+    )
+    django.setup()
+
+    # Create a table named "order".
+    conn = connections[DEFAULT_DB_ALIAS]
+    with conn.cursor() as cursor:
+        cursor.execute('CREATE TABLE "order" (id INTEGER PRIMARY KEY, name TEXT)')
+
+    # Invoke check_constraints() with ["order"] which triggers the bug if not fixed.
+    try:
+        conn.check_constraints(table_names=["order"])
+        print("No error was raised. The fix is presumably in place.")
+        sys.exit(0)
+    except Exception as e:
+        print("Error was raised! The fix is presumably not in place.")
+        print("Error:", e)
+        sys.exit(1)
+
+if __name__ == '__main__':
+    main()
