diff --git a/django/http/response.py b/django/http/response.py
index f62dec8ce9..0aa375cc4c 100644
--- a/django/http/response.py
+++ b/django/http/response.py
@@ -575,8 +575,9 @@ class FileResponse(StreamingHttpResponse):
     def set_headers(self, filelike):
         """
         Set some common response headers (Content-Length, Content-Type, and
-        Content-Disposition) based on the `filelike` response content.
+        Content-Disposition) based on the filelike response content.
         """
+        import mimetypes
         filename = getattr(filelike, "name", "")
         filename = filename if isinstance(filename, str) else ""
         seekable = hasattr(filelike, "seek") and (
@@ -601,28 +602,34 @@ class FileResponse(StreamingHttpResponse):
                 iter(lambda: len(filelike.read(self.block_size)), 0)
             )
             filelike.seek(-int(self.headers["Content-Length"]), io.SEEK_END)
-
+    
         filename = os.path.basename(self.filename or filename)
         if self._no_explicit_content_type:
             if filename:
+                # Register .Z and .br so guess_type() sees them properly.
+                mimetypes.add_type("application/x-compress", ".Z", strict=False)
+                mimetypes.add_type("application/x-brotli", ".br", strict=False)
+    
                 content_type, encoding = mimetypes.guess_type(filename)
-                # Encoding isn't set to prevent browsers from automatically
-                # uncompressing files.
-                content_type = {
+                # If guess_type detects a compression encoding (e.g. compress, br),
+                # override the content_type to reflect the actual compressed type
+                # instead of a text-based main extension.
+                encoding_map = {
                     "bzip2": "application/x-bzip",
                     "gzip": "application/gzip",
                     "xz": "application/x-xz",
-                }.get(encoding, content_type)
-                self.headers["Content-Type"] = (
-                    content_type or "application/octet-stream"
-                )
+                    "compress": "application/x-compress",
+                    "br": "application/x-brotli",
+                }
+                content_type = encoding_map.get(encoding, content_type)
+                self.headers["Content-Type"] = content_type or "application/octet-stream"
             else:
                 self.headers["Content-Type"] = "application/octet-stream"
-
-        if content_disposition := content_disposition_header(
-            self.as_attachment, filename
-        ):
+    
+        if content_disposition := content_disposition_header(self.as_attachment, filename):
             self.headers["Content-Disposition"] = content_disposition
+    
+    
 
 
 class HttpResponseRedirectBase(HttpResponse):
diff --git a/test.html.Z b/test.html.Z
new file mode 100644
index 0000000000..2a4f4f1bbe
--- /dev/null
+++ b/test.html.Z
@@ -0,0 +1 @@
+This is .Z data
\ No newline at end of file
diff --git a/test.html.br b/test.html.br
new file mode 100644
index 0000000000..1a45328c72
--- /dev/null
+++ b/test.html.br
@@ -0,0 +1 @@
+This is .br data
\ No newline at end of file
diff --git a/test_mime_problem.py b/test_mime_problem.py
new file mode 100644
index 0000000000..ba1298f132
--- /dev/null
+++ b/test_mime_problem.py
@@ -0,0 +1,50 @@
+import sys
+import os
+
+import django
+from django.conf import settings
+
+# Configure settings if not already configured.
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY="test",
+        DEFAULT_CHARSET="utf-8",
+    )
+
+django.setup()
+
+from django.http import FileResponse
+
+def main():
+    print("Creating sample files .Z / .br for testing...")
+
+    with open("test.html.Z", "wb") as fz:
+        fz.write(b"This is .Z data")
+
+    with open("test.html.br", "wb") as fbr:
+        fbr.write(b"This is .br data")
+
+    # Test .Z
+    print("Testing FileResponse for test.html.Z...")
+    responseZ = FileResponse(open("test.html.Z", "rb"))
+    content_type_z = responseZ.get("Content-Type", None)
+    print(f"Content-Type for .Z = {content_type_z}")
+    if content_type_z == "text/html":
+        print("FAIL: .Z incorrectly recognized as text/html.")
+        sys.exit(1)
+
+    # Test .br
+    print("Testing FileResponse for test.html.br...")
+    responseBR = FileResponse(open("test.html.br", "rb"))
+    content_type_br = responseBR.get("Content-Type", None)
+    print(f"Content-Type for .br = {content_type_br}")
+    if content_type_br == "text/html":
+        print("FAIL: .br incorrectly recognized as text/html.")
+        sys.exit(1)
+
+    print("PASS: .Z and .br are not reported as text/html. Test completed successfully.")
+    sys.exit(0)
+
+if __name__ == "__main__":
+    main()
