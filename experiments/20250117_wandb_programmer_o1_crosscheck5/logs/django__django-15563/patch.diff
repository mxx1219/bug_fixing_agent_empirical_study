diff --git a/django/db/models/query.py b/django/db/models/query.py
index 5c78c6e315..0739778541 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -979,22 +979,120 @@ class QuerySet:
     _raw_delete.alters_data = True
 
     def update(self, **kwargs):
-        """
-        Update all elements in the current QuerySet, setting all the given
-        fields to the appropriate values.
-        """
+        from django.db import transaction, connection
+        from django.db.models.sql.constants import CURSOR, NO_RESULTS
+        import copy
+    
+        # Disallow combined queries because Django doesn't support update() on them.
         self._not_support_combined_queries("update")
+    
+        # Disallow slicing because Django doesn't allow update() on sliced queries.
         if self.query.is_sliced:
             raise TypeError("Cannot update a query once a slice has been taken.")
+    
         self._for_write = True
-        query = self.query.chain(sql.UpdateQuery)
-        query.add_update_values(kwargs)
-        # Clear any annotations so that they won't be present in subqueries.
-        query.annotations = {}
+    
+        # Build the UpdateQuery for the child's table.
+        child_query = self.query.chain(sql.UpdateQuery)
+        child_query.add_update_values(kwargs)
+        child_query.annotations = {}
+    
+        # Extract the parent's updates (for fields that live on a parent table),
+        # then clear them so the child query won't run them incorrectly.
+        parent_updates = child_query.related_updates.copy()
+        child_query.related_updates = {}
+    
+        # Phase 1: Update the child's table only.
         with transaction.mark_for_rollback_on_error(using=self.db):
-            rows = query.get_compiler(self.db).execute_sql(CURSOR)
+            rows = child_query.get_compiler(self.db).execute_sql(CURSOR)
+        if rows is None:
+            rows = 0
+    
+        # Phase 2: Apply the parent updates manually with the correct pointer-based filter.
+        if not parent_updates:
+            # If there were no parent fields, we're done.
+            self._result_cache = None
+            return rows
+    
+        child_meta = self.model._meta
+    
+        # For each parent model that truly is a parent, update it properly.
+        for parent_model, update_list in parent_updates.items():
+            # If parent_model is the same as the child's model, skip it to avoid recursion.
+            if parent_model is child_meta.concrete_model:
+                continue
+    
+            # Create a new UpdateQuery just for the parent model.
+            new_parent_query = sql.UpdateQuery(parent_model)
+            new_parent_query.values = update_list
+            new_parent_query.related_ids = None
+            new_parent_query.related_updates = {}
+            new_parent_query.clear_where()
+    
+            # Filter out any fields that do not physically belong to this parent model.
+            filtered_values = [
+                (field_obj, parent_model, val)
+                for (field_obj, _m, val) in update_list
+                if field_obj.model._meta.concrete_model == parent_model
+            ]
+            new_parent_query.values = filtered_values
+            if not filtered_values:
+                continue  # Nothing to update for this parent.
+    
+            # Locate the pointer field from the child to this parent, e.g. "otherbase_ptr_id".
+            link_field = child_meta.parents.get(parent_model)
+            if not link_field:
+                continue  # If there's no pointer, we can't do a parent update.
+    
+            child_pointer_field = link_field.attname
+            parent_pk_name = parent_model._meta.pk.name
+    
+            # Gather all parent PKs from the child's table using raw SQL to avoid recursion.
+            sql_query = (
+                f"SELECT DISTINCT {child_pointer_field} "
+                f"FROM {child_meta.db_table} "
+                f"WHERE {child_pointer_field} IS NOT NULL"
+            )
+            with connection.cursor() as cursor:
+                cursor.execute(sql_query)
+                rows_fetched = cursor.fetchall()
+                parent_ids = [row[0] for row in rows_fetched if row[0] is not None]
+    
+            if not parent_ids:
+                continue  # No parent rows to update.
+    
+            # Do one bulk update for all parent IDs at once.
+            with transaction.mark_for_rollback_on_error(using=self.db):
+                new_parent_query.clear_where()
+                new_parent_query.add_filter(f"{parent_pk_name}__in", parent_ids)
+                new_parent_query.add_update_fields(filtered_values)
+                compiler = new_parent_query.get_compiler(self.db)
+                compiler.execute_sql(NO_RESULTS)
+    
         self._result_cache = None
         return rows
+    
+    
+    
+    
+    
+    
+    
+    
+    
+    
+    
+    
+    
+    
+    
+    
+    
+    
+    
+    
+    
+    
 
     update.alters_data = True
 
diff --git a/test_multi_inheritance_update.py b/test_multi_inheritance_update.py
new file mode 100644
index 0000000000..4eb382ea7b
--- /dev/null
+++ b/test_multi_inheritance_update.py
@@ -0,0 +1,87 @@
+import sys
+import os
+import django
+from django.conf import settings
+from django.db import models, connection
+from django.apps import apps, AppConfig
+
+def main():
+    print("Configuring Django settings for in-memory test...")
+    if not settings.configured:
+        settings.configure(
+            INSTALLED_APPS=["__main__"],  # We'll define our models in __main__
+            DATABASES={
+                "default": {
+                    "ENGINE": "django.db.backends.sqlite3",
+                    "NAME": ":memory:",
+                }
+            },
+            SECRET_KEY="testkey",
+        )
+
+    print("Initializing Django...")
+    django.setup()
+
+    print("Defining test models...")
+
+    class Base(models.Model):
+        base_id = models.AutoField(primary_key=True)
+        field_base = models.IntegerField()
+
+        class Meta:
+            app_label = "__main__"
+
+    class OtherBase(models.Model):
+        otherbase_id = models.AutoField(primary_key=True)
+        field_otherbase = models.IntegerField()
+
+        class Meta:
+            app_label = "__main__"
+
+    class Child(Base, OtherBase):
+        class Meta:
+            app_label = "__main__"
+
+    print("Creating tables in memory...")
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(Base)
+        schema_editor.create_model(OtherBase)
+        schema_editor.create_model(Child)
+
+    print("Populating test data...")
+    # 1) Create two OtherBase objects with distinct values
+    ob1 = OtherBase.objects.create(field_otherbase=100)
+    ob2 = OtherBase.objects.create(field_otherbase=101)
+
+    # 2) Create two Child objects
+    c1 = Child.objects.create(field_base=0, field_otherbase=0)
+    c2 = Child.objects.create(field_base=1, field_otherbase=1)
+
+    print("Before update:")
+    print("  OtherBase:", list(OtherBase.objects.values()))
+    print("  Child:", list(Child.objects.values()))
+
+    # 3) Attempt to update Child field_otherbase to 55
+    Child.objects.update(field_otherbase=55)
+
+    print("After update:")
+    ob_vals = list(OtherBase.objects.order_by('otherbase_id').values('otherbase_id','field_otherbase'))
+    c_vals = list(Child.objects.order_by('base_id').values('base_id','otherbase_id','field_otherbase'))
+
+    print("  OtherBase:", ob_vals)
+    print("  Child:", c_vals)
+
+    # Check if Child got updated or if OtherBase got corrupted
+    child_ok = all(row["field_otherbase"] == 55 for row in c_vals)
+    # The original OtherBase rows should stay at 100, 101
+    otherbase_ok = (ob_vals[0]["field_otherbase"] == 100) and (ob_vals[1]["field_otherbase"] == 101)
+
+    if child_ok and otherbase_ok:
+        print("Test PASSED: multi-inheritance field updated on Child, not overwritten in OtherBase.")
+        sys.exit(0)
+    else:
+        print("Test FAILED: bug present. Child update incorrectly affected or did not affect the right rows.")
+        sys.exit(1)
+
+if __name__ == "__main__":
+    main()
