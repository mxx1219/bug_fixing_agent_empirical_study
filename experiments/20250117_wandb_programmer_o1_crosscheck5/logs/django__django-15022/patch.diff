diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 66f3396a6b..169ab955c5 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -995,19 +995,26 @@ class ModelAdmin(BaseModelAdmin):
         """
         Return a tuple containing a queryset to implement the search
         and a boolean indicating if the results may contain duplicates.
-        """
-        # Apply keyword searches.
+    
+        This version runs a separate subquery for each search "bit" (word).
+        That way multiple bits can match different related rows, while the final
+        query uses pk__in and thus doesn't produce repeated joins.
+        """
+        from django.utils.text import smart_split, unescape_string_literal
+        from django.db import models
+        from django.db.models.constants import LOOKUP_SEP
+        from django.contrib.admin.utils import lookup_spawns_duplicates
+    
         def construct_search(field_name):
             if field_name.startswith('^'):
-                return "%s__istartswith" % field_name[1:]
+                return '%s__istartswith' % field_name[1:]
             elif field_name.startswith('='):
-                return "%s__iexact" % field_name[1:]
+                return '%s__iexact' % field_name[1:]
             elif field_name.startswith('@'):
-                return "%s__search" % field_name[1:]
-            # Use field_name if it includes a lookup.
+                return '%s__search' % field_name[1:]
+            # Check if field_name includes a lookup, or fallback to icontains.
             opts = queryset.model._meta
             lookup_fields = field_name.split(LOOKUP_SEP)
-            # Go through the fields, following all relations.
             prev_field = None
             for path_part in lookup_fields:
                 if path_part == 'pk':
@@ -1015,35 +1022,44 @@ class ModelAdmin(BaseModelAdmin):
                 try:
                     field = opts.get_field(path_part)
                 except FieldDoesNotExist:
-                    # Use valid query lookups.
+                    # Possibly a valid query lookup (e.g. __iexact).
                     if prev_field and prev_field.get_lookup(path_part):
                         return field_name
                 else:
                     prev_field = field
                     if hasattr(field, 'path_infos'):
-                        # Update opts to follow the relation.
                         opts = field.path_infos[-1].to_opts
-            # Otherwise, use the field with icontains.
-            return "%s__icontains" % field_name
-
-        may_have_duplicates = False
+            return '%s__icontains' % field_name
+    
         search_fields = self.get_search_fields(request)
+        may_have_duplicates = False
         if search_fields and search_term:
-            orm_lookups = [construct_search(str(search_field))
-                           for search_field in search_fields]
-            for bit in smart_split(search_term):
-                if bit.startswith(('"', "'")) and bit[0] == bit[-1]:
-                    bit = unescape_string_literal(bit)
-                or_queries = models.Q(
-                    *((orm_lookup, bit) for orm_lookup in orm_lookups),
-                    _connector=models.Q.OR,
-                )
-                queryset = queryset.filter(or_queries)
+            # Precompute the lookup strings from search_fields.
+            orm_lookups = [construct_search(str(sf)) for sf in search_fields]
+            # If any search_field spawns duplicates, set may_have_duplicates.
             may_have_duplicates |= any(
-                lookup_spawns_duplicates(self.opts, search_spec)
-                for search_spec in orm_lookups
+                lookup_spawns_duplicates(self.opts, lookup_spec)
+                for lookup_spec in orm_lookups
             )
+    
+            bits = smart_split(search_term)
+            original_model = queryset.model
+            for bit in bits:
+                if bit.startswith(('"', "'")) and bit[0] == bit[-1]:
+                    bit = unescape_string_literal(bit)
+                # Build an OR across all fields for this bit.
+                or_queries = models.Q()
+                for lookup in orm_lookups:
+                    or_queries |= models.Q(**{lookup: bit})
+                # Run a subquery returning PKs that match this bit.
+                matching_pks = original_model._default_manager.filter(or_queries).values_list('pk', flat=True)
+                # Intersect with our main QuerySet by PK.
+                queryset = queryset.filter(pk__in=matching_pks)
         return queryset, may_have_duplicates
+    
+    
+      
+    
 
     def get_preserved_filters(self, request):
         """
diff --git a/test_app/__init__.py b/test_app/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_app/apps.py b/test_app/apps.py
new file mode 100644
index 0000000000..b00435505e
--- /dev/null
+++ b/test_app/apps.py
@@ -0,0 +1,4 @@
+from django.apps import AppConfig
+
+class TestAppConfig(AppConfig):
+    name = "test_app"
diff --git a/test_app/models.py b/test_app/models.py
new file mode 100644
index 0000000000..73ac19a7e0
--- /dev/null
+++ b/test_app/models.py
@@ -0,0 +1,17 @@
+from django.db import models
+
+class Client(models.Model):
+    name = models.CharField(max_length=256)
+    name2 = models.CharField(max_length=256, blank=True, null=True)
+    contact_person = models.CharField(max_length=256, blank=True, null=True)
+
+    class Meta:
+        app_label = "test_app"
+
+class ClientOffice(models.Model):
+    name = models.CharField(max_length=256)
+    name2 = models.CharField(max_length=256, blank=True, null=True)
+    client = models.ForeignKey(Client, on_delete=models.CASCADE)
+
+    class Meta:
+        app_label = "test_app"
diff --git a/test_app/urls.py b/test_app/urls.py
new file mode 100644
index 0000000000..e39cb2c054
--- /dev/null
+++ b/test_app/urls.py
@@ -0,0 +1,3 @@
+from django.urls import path
+
+urlpatterns = []
diff --git a/test_unnecessary_joins.py b/test_unnecessary_joins.py
new file mode 100644
index 0000000000..40965feff7
--- /dev/null
+++ b/test_unnecessary_joins.py
@@ -0,0 +1,94 @@
+import sys
+from django.conf import settings
+import django
+from django.test import TestCase
+from django.test.runner import DiscoverRunner
+from django.contrib.admin import ModelAdmin
+
+# 1) Configure settings first (no imports from test_app yet).
+if not settings.configured:
+    settings.configure(
+        SECRET_KEY="test",
+        DEBUG=True,
+        ALLOWED_HOSTS=["*"],
+        INSTALLED_APPS=[
+            "django.contrib.contenttypes",
+            "django.contrib.auth",
+            "django.contrib.admin",
+            "django.contrib.sessions",
+            "django.contrib.messages",
+            "test_app",
+        ],
+        MIDDLEWARE=[
+            "django.contrib.sessions.middleware.SessionMiddleware",
+            "django.contrib.auth.middleware.AuthenticationMiddleware",
+            "django.contrib.messages.middleware.MessageMiddleware",
+        ],
+        DATABASES={
+            "default": {
+                "ENGINE": "django.db.backends.sqlite3",
+                "NAME": ":memory:"
+            }
+        },
+        ROOT_URLCONF="test_app.urls",
+        TEMPLATES=[
+            {
+                "BACKEND": "django.template.backends.django.DjangoTemplates",
+                "APP_DIRS": True,
+                "DIRS": [],
+                "OPTIONS": {
+                    "context_processors": [
+                        "django.template.context_processors.debug",
+                        "django.template.context_processors.request",
+                        "django.contrib.auth.context_processors.auth",
+                        "django.contrib.messages.context_processors.messages",
+                    ]
+                },
+            }
+        ],
+        DEFAULT_AUTO_FIELD="django.db.models.AutoField",
+    )
+
+# 2) Now set up Django.
+django.setup()
+
+# 3) Only now import from test_app.
+from test_app.models import Client, ClientOffice
+
+class ClientAdmin(ModelAdmin):
+    search_fields = ("name", "name2", "contact_person", "clientoffice__name", "clientoffice__name2")
+
+class UnnecessaryJoinsTest(TestCase):
+    @classmethod
+    def setUpTestData(cls):
+        c = Client.objects.create(name="Alpha", name2="Beta", contact_person="Charlie")
+        ClientOffice.objects.create(name="OfficeOne", name2="LocationX", client=c)
+        ClientOffice.objects.create(name="OfficeTwo", name2="LocationY", client=c)
+
+    def test_unnecessary_joins(self):
+        """
+        Attempt a multi-word admin search and check the resulting SQL for duplicate joins.
+        """
+        admin_obj = ClientAdmin(Client, None)
+        qs = Client.objects.all()
+        search_term = "Alpha Beta Gamma"
+        filtered_qs, _ = admin_obj.get_search_results(None, qs, search_term)
+        final_sql = str(filtered_qs.query)
+        print("Final SQL:", final_sql)
+
+        # If there's more than one 'JOIN "test_app_clientoffice"', that indicates the bug.
+        join_count = final_sql.count('JOIN "test_app_clientoffice"')
+        if join_count > 1:
+            print("Duplicate JOINs found, bug is present.")
+            sys.exit(1)
+
+        print("No duplicate JOINs found, bug is absent (or fixed).")
+
+def run_tests():
+    test_runner = DiscoverRunner(verbosity=2)
+    failures = test_runner.run_tests(["__main__"])
+    if failures:
+        sys.exit(1)
+
+if __name__ == "__main__":
+    run_tests()
