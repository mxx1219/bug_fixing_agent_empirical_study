diff --git a/django/contrib/admin/filters.py b/django/contrib/admin/filters.py
index d65e01d5e2..996540c9cf 100644
--- a/django/contrib/admin/filters.py
+++ b/django/contrib/admin/filters.py
@@ -194,11 +194,25 @@ class RelatedFieldListFilter(FieldListFilter):
         return [self.lookup_kwarg, self.lookup_kwarg_isnull]
 
     def field_choices(self, field, request, model_admin):
-        ordering = ()
         related_admin = model_admin.admin_site._registry.get(field.remote_field.model)
         if related_admin is not None:
-            ordering = related_admin.get_ordering(request)
+            admin_ordering = related_admin.get_ordering(request)
+        else:
+            admin_ordering = None
+    
+        # Fallback to Meta.ordering if admin_ordering is None or an empty tuple.
+        if admin_ordering:
+            ordering = admin_ordering
+        else:
+            meta_ordering = field.remote_field.model._meta.ordering
+            if meta_ordering:
+                ordering = meta_ordering
+            else:
+                ordering = ()
+    
         return field.get_choices(include_blank=False, ordering=ordering)
+    
+    
 
     def choices(self, changelist):
         yield {
@@ -418,5 +432,22 @@ FieldListFilter.register(lambda f: True, AllValuesFieldListFilter)
 
 class RelatedOnlyFieldListFilter(RelatedFieldListFilter):
     def field_choices(self, field, request, model_admin):
+        related_admin = model_admin.admin_site._registry.get(field.remote_field.model)
+        if related_admin is not None:
+            admin_ordering = related_admin.get_ordering(request)
+        else:
+            admin_ordering = None
+    
+        if admin_ordering:
+            ordering = admin_ordering
+        else:
+            meta_ordering = field.remote_field.model._meta.ordering
+            if meta_ordering:
+                ordering = meta_ordering
+            else:
+                ordering = ()
+    
         pk_qs = model_admin.get_queryset(request).distinct().values_list('%s__pk' % self.field_path, flat=True)
-        return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs})
+        return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs}, ordering=ordering)
+    
+    
diff --git a/test_admin_related_filter_ordering.py b/test_admin_related_filter_ordering.py
new file mode 100644
index 0000000000..9fec59f199
--- /dev/null
+++ b/test_admin_related_filter_ordering.py
@@ -0,0 +1,134 @@
+import sys
+import os
+
+def main():
+    print("STEP 1: Configuring Django settings for in-memory test...")
+    import django
+    from django.conf import settings
+
+    # Minimal Django settings for an in-memory test.
+    settings.configure(
+        SECRET_KEY="testsecret",
+        INSTALLED_APPS=[
+            "django.contrib.auth",
+            "django.contrib.contenttypes",
+            "django.contrib.admin",
+            "django.contrib.sessions",
+            "django.contrib.messages",
+            "testapp_for_related_filter",
+        ],
+        DATABASES={
+            "default": {
+                "ENGINE": "django.db.backends.sqlite3",
+                "NAME": ":memory:",
+            }
+        },
+        MIDDLEWARE=[],
+        ROOT_URLCONF=None,
+        TEMPLATES=[],
+        DEFAULT_AUTO_FIELD="django.db.models.AutoField",
+    )
+
+    print("STEP 2: Setting up Django...")
+    django.setup()
+
+    from django.db import models
+    from django.core.management import call_command
+    from django.contrib import admin
+    from django.contrib.admin.filters import RelatedFieldListFilter, RelatedOnlyFieldListFilter
+
+    print("STEP 3: Defining models...")
+
+    class Artist(models.Model):
+        name = models.CharField(max_length=100)
+
+        class Meta:
+            ordering = ["name"]
+            app_label = "testapp_for_related_filter"
+
+        # Make the string representation match the test's expectation:
+        def __str__(self):
+            return self.name
+
+    class Album(models.Model):
+        title = models.CharField(max_length=100)
+        artist = models.ForeignKey(Artist, on_delete=models.CASCADE)
+        class Meta:
+            app_label = "testapp_for_related_filter"
+
+    print("STEP 4: Creating a custom ModelAdmin with list_filter...")
+    class AlbumAdmin(admin.ModelAdmin):
+        # No 'ordering' here. We want to see if we fall back to Artist's Meta.ordering.
+        list_filter = ("artist",)
+
+    print("STEP 5: Registering models on a custom AdminSite...")
+    admin_site = admin.AdminSite()
+    admin_site.register(Album, AlbumAdmin)
+
+    print("STEP 6: Making migrations and migrating for our test app...")
+    try:
+        call_command("makemigrations", "testapp_for_related_filter", "--noinput", verbosity=0)
+        call_command("migrate", "testapp_for_related_filter", "--noinput", verbosity=0, interactive=False)
+    except SystemExit as e:
+        print("Migration command failed with:", e)
+        sys.exit(1)
+
+    print("STEP 7: Adding test data with out-of-order creation sequence.")
+    Artist.objects.create(name="zzz")
+    Artist.objects.create(name="aaa")
+    Artist.objects.create(name="mmm")
+
+    Album.objects.create(title="Album1", artist=Artist.objects.get(name="zzz"))
+    Album.objects.create(title="Album2", artist=Artist.objects.get(name="aaa"))
+    Album.objects.create(title="Album3", artist=Artist.objects.get(name="mmm"))
+
+    print("STEP 8: Checking RelatedFieldListFilter ordering...")
+    from django.contrib.admin import options
+
+    request = None
+    params = {}
+    model_admin = AlbumAdmin(Album, admin_site)
+    artist_field = Album._meta.get_field("artist")
+
+    rflf = RelatedFieldListFilter(
+        field=artist_field,
+        request=request,
+        params=params,
+        model=Album,
+        model_admin=model_admin,
+        field_path="artist",
+    )
+
+    rflf_choices = rflf.lookup_choices
+    rflf_labels = [label for (pk, label) in rflf_choices]
+    print(f"RelatedFieldListFilter labels: {rflf_labels}")
+
+    desired_labels = ["aaa", "mmm", "zzz"]
+    if rflf_labels != desired_labels:
+        print("FAIL: RelatedFieldListFilter does not respect related model's Meta.ordering.")
+        print(f"Expected {desired_labels}, got {rflf_labels}")
+        sys.exit(1)
+
+    print("STEP 9: Checking RelatedOnlyFieldListFilter ordering...")
+    roflf = RelatedOnlyFieldListFilter(
+        field=artist_field,
+        request=request,
+        params=params,
+        model=Album,
+        model_admin=model_admin,
+        field_path="artist",
+    )
+    roflf_choices = roflf.lookup_choices
+    roflf_labels = [label for (pk, label) in roflf_choices]
+    print(f"RelatedOnlyFieldListFilter labels: {roflf_labels}")
+
+    if roflf_labels != desired_labels:
+        print("FAIL: RelatedOnlyFieldListFilter does not respect related model's Meta.ordering.")
+        print(f"Expected {desired_labels}, got {roflf_labels}")
+        sys.exit(1)
+
+    print("PASS: Both list filters respect the related model's Meta.ordering.")
+    sys.exit(0)
+
+if __name__ == "__main__":
+    main()
diff --git a/testapp_for_related_filter/__init__.py b/testapp_for_related_filter/__init__.py
new file mode 100644
index 0000000000..8b13789179
--- /dev/null
+++ b/testapp_for_related_filter/__init__.py
@@ -0,0 +1 @@
+
diff --git a/testapp_for_related_filter/migrations/0001_initial.py b/testapp_for_related_filter/migrations/0001_initial.py
new file mode 100644
index 0000000000..297cfff581
--- /dev/null
+++ b/testapp_for_related_filter/migrations/0001_initial.py
@@ -0,0 +1,33 @@
+# Generated by Django 3.0.dev20190814132535 on 2025-01-13 02:43
+
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Artist',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=100)),
+            ],
+            options={
+                'ordering': ['name'],
+            },
+        ),
+        migrations.CreateModel(
+            name='Album',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('title', models.CharField(max_length=100)),
+                ('artist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='testapp_for_related_filter.Artist')),
+            ],
+        ),
+    ]
diff --git a/testapp_for_related_filter/migrations/__init__.py b/testapp_for_related_filter/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
