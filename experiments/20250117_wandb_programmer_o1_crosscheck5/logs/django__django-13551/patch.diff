diff --git a/django/contrib/auth/tokens.py b/django/contrib/auth/tokens.py
index 93e2d71af2..8463ab4a59 100644
--- a/django/contrib/auth/tokens.py
+++ b/django/contrib/auth/tokens.py
@@ -78,23 +78,14 @@ class PasswordResetTokenGenerator:
 
     def _make_hash_value(self, user, timestamp):
         """
-        Hash the user's primary key and some user state that's sure to change
-        after a password reset to produce a token that invalidated when it's
-        used:
-        1. The password field will change upon a password reset (even if the
-           same password is chosen, due to password salting).
-        2. The last_login field will usually be updated very shortly after
-           a password reset.
-        Failing those things, settings.PASSWORD_RESET_TIMEOUT eventually
-        invalidates the token.
-
-        Running this data through salted_hmac() prevents password cracking
-        attempts using the reset token, provided the secret isn't compromised.
+        Hash the user's primary key, password, last_login, timestamp, and email
+        so that changes in any of these invalidate previously created tokens.
         """
-        # Truncate microseconds so that tokens are consistent even if the
-        # database doesn't support microseconds.
+        # Truncate microseconds so that tokens are consistent even if DB doesn't support microseconds.
         login_timestamp = '' if user.last_login is None else user.last_login.replace(microsecond=0, tzinfo=None)
-        return str(user.pk) + user.password + str(login_timestamp) + str(timestamp)
+        email_part = getattr(user, 'email', '') or ''
+        return str(user.pk) + user.password + str(login_timestamp) + str(timestamp) + email_part
+    
 
     def _num_seconds(self, dt):
         return int((dt - datetime(2001, 1, 1)).total_seconds())
diff --git a/test_email_password_reset_bug.py b/test_email_password_reset_bug.py
new file mode 100644
index 0000000000..7c2eb2b926
--- /dev/null
+++ b/test_email_password_reset_bug.py
@@ -0,0 +1,59 @@
+#!/usr/bin/env python3
+import sys
+import datetime
+import django
+from django.conf import settings
+
+# Configure minimal settings if not configured
+if not settings.configured:
+    settings.configure(
+        SECRET_KEY="test_secret_key",
+        PASSWORD_RESET_TIMEOUT=3600,  # 1h
+        DEFAULT_HASHING_ALGORITHM="sha256",
+        INSTALLED_APPS=[],  # no DB, just enough to let tokens load
+    )
+
+django.setup()
+
+from django.contrib.auth.tokens import default_token_generator
+
+class MockUser:
+    def __init__(self, pk, password, email, last_login):
+        self.pk = pk
+        self.password = password
+        self.email = email
+        self.last_login = last_login
+
+def main():
+    print("Test: Changing user email should invalidate old password reset tokens.")
+
+    # Step 1: Create a user with some email
+    user = MockUser(
+        pk=1,
+        password="hashed_password_123",
+        email="foo@example.com",
+        last_login=datetime.datetime(2023, 1, 1, 12, 0, 0),
+    )
+    print(f"Initial user email: {user.email}")
+
+    # Step 2: Generate a password reset token for this user
+    token = default_token_generator.make_token(user)
+    print(f"Generated token: {token}")
+
+    # Step 3: Change the user's email
+    user.email = "bar@example.com"
+    print(f"Changed user email: {user.email}")
+
+    # Step 4: Check if the old token is still considered valid
+    is_still_valid = default_token_generator.check_token(user, token)
+    print(f"check_token returned: {is_still_valid}")
+
+    if is_still_valid:
+        print("Bug present. The old token is still valid after changing email.")
+        sys.exit(1)
+    else:
+        print("No bug present. The token has been invalidated as expected.")
+        sys.exit(0)
+
+if __name__ == "__main__":
+    main()
