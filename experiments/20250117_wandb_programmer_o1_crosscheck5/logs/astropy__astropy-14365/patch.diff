diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py
index 83a4f004aa..05dc43c109 100644
--- a/astropy/io/ascii/qdp.py
+++ b/astropy/io/ascii/qdp.py
@@ -18,7 +18,8 @@ from . import basic, core
 
 
 def _line_type(line, delimiter=None):
-    """Interpret a QDP file line.
+    """
+    Interpret a QDP file line.
 
     Parameters
     ----------
@@ -29,46 +30,23 @@ def _line_type(line, delimiter=None):
     -------
     type : str
         Line type: "comment", "command", or "data"
-
-    Examples
-    --------
-    >>> _line_type("READ SERR 3")
-    'command'
-    >>> _line_type(" \\n    !some gibberish")
-    'comment'
-    >>> _line_type("   ")
-    'comment'
-    >>> _line_type(" 21345.45")
-    'data,1'
-    >>> _line_type(" 21345.45 1.53e-3 1e-3 .04 NO nan")
-    'data,6'
-    >>> _line_type(" 21345.45,1.53e-3,1e-3,.04,NO,nan", delimiter=',')
-    'data,6'
-    >>> _line_type(" 21345.45 ! a comment to disturb")
-    'data,1'
-    >>> _line_type("NO NO NO NO NO")
-    'new'
-    >>> _line_type("NO,NO,NO,NO,NO", delimiter=',')
-    'new'
-    >>> _line_type("N O N NOON OON O")
-    Traceback (most recent call last):
-        ...
-    ValueError: Unrecognized QDP line...
-    >>> _line_type(" some non-comment gibberish")
-    Traceback (most recent call last):
-        ...
-    ValueError: Unrecognized QDP line...
     """
+    import re
+
     _decimal_re = r"[+-]?(\d+(\.\d*)?|\.\d+)([eE][+-]?\d+)?"
     _command_re = r"READ [TS]ERR(\s+[0-9]+)+"
 
     sep = delimiter
     if delimiter is None:
         sep = r"\s+"
+
     _new_re = rf"NO({sep}NO)+"
-    _data_re = rf"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)"
-    _type_re = rf"^\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\s*(\!(?P<comment>.*))?\s*$"
-    _line_type_re = re.compile(_type_re)
+    # Fix the data pattern: first column, then zero-or-more columns prefixed by sep
+    _data_re = rf"({_decimal_re}|NO|[-+]?nan)(?:{sep}({_decimal_re}|NO|[-+]?nan))*"
+
+    _type_re = rf"^\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?)\s*(\!(?P<comment>.*))?\s*$"
+    _line_type_re = re.compile(_type_re, re.IGNORECASE)
+
     line = line.strip()
     if not line:
         return "comment"
@@ -76,6 +54,7 @@ def _line_type(line, delimiter=None):
 
     if match is None:
         raise ValueError(f"Unrecognized QDP line: {line}")
+
     for type_, val in match.groupdict().items():
         if val is None:
             continue
@@ -85,6 +64,8 @@ def _line_type(line, delimiter=None):
             return type_
 
 
+
+
 def _get_type_from_list_of_lines(lines, delimiter=None):
     """Read through the list of QDP file lines and label each line by type.
 
diff --git a/qdp_lowercase_test.py b/qdp_lowercase_test.py
new file mode 100644
index 0000000000..342c29c065
--- /dev/null
+++ b/qdp_lowercase_test.py
@@ -0,0 +1,47 @@
+#!/usr/bin/env python3
+
+import sys
+import traceback
+from astropy.table import Table
+
+def main():
+    """
+    Test script for ASCII QDP files with lowercase 'read serr' commands.
+    Exits 0 if fixed, non-zero if it fails.
+    """
+
+    print("Creating a test QDP file with lowercase 'read serr 1 2'.")
+    qdp_filename = "test_lowercase.qdp"
+    with open(qdp_filename, "w") as f:
+        f.write("read serr 1 2\n")
+        f.write("1 0.5 1 0.5\n")
+
+    print("Attempting to read the QDP file using astropy.table.Table...")
+    try:
+        tbl = Table.read(qdp_filename, format="ascii.qdp")
+        print("Read succeeded. Columns:", tbl.colnames)
+        print("Row data:", list(tbl[0]))
+
+        # We expect columns: 'col1', 'col1_err', 'col2', 'col2_err'
+        expected_cols = ["col1", "col1_err", "col2", "col2_err"]
+        if tbl.colnames != expected_cols:
+            print("ERROR: Column names do not match expected:\n", tbl.colnames, "\nvs\n", expected_cols)
+            sys.exit(1)
+
+        # We expect data [1, 0.5, 1, 0.5]
+        expected_row = [1.0, 0.5, 1.0, 0.5]
+        row_values = list(tbl[0])
+        if any(abs(a - b) > 1e-12 for a, b in zip(row_values, expected_row)):
+            print("ERROR: Row values do not match. Got:", row_values, "Expected:", expected_row)
+            sys.exit(1)
+
+        print("Success! The table matches expectations.")
+        sys.exit(0)
+
+    except Exception as e:
+        print("ERROR: Exception encountered while reading QDP file.")
+        traceback.print_exc()
+        sys.exit(1)
+
+if __name__ == "__main__":
+    main()
diff --git a/test_lowercase.qdp b/test_lowercase.qdp
new file mode 100644
index 0000000000..b5750561d5
--- /dev/null
+++ b/test_lowercase.qdp
@@ -0,0 +1,2 @@
+read serr 1 2
+1 0.5 1 0.5
