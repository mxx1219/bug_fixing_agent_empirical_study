diff --git a/django/db/migrations/writer.py b/django/db/migrations/writer.py
index a59f0c8dcb..4066e87bf6 100644
--- a/django/db/migrations/writer.py
+++ b/django/db/migrations/writer.py
@@ -132,9 +132,9 @@ class MigrationWriter:
             "replaces_str": "",
             "initial_str": "",
         }
-
+    
         imports = set()
-
+    
         # Deconstruct operations
         operations = []
         for operation in self.migration.operations:
@@ -142,20 +142,19 @@ class MigrationWriter:
             imports.update(operation_imports)
             operations.append(operation_string)
         items["operations"] = "\n".join(operations) + "\n" if operations else ""
-
+    
         # Format dependencies and write out swappable dependencies right
         dependencies = []
         for dependency in self.migration.dependencies:
             if dependency[0] == "__setting__":
                 dependencies.append(
-                    "        migrations.swappable_dependency(settings.%s),"
-                    % dependency[1]
+                    "        migrations.swappable_dependency(settings.%s)," % dependency[1]
                 )
                 imports.add("from django.conf import settings")
             else:
                 dependencies.append("        %s," % self.serialize(dependency)[0])
         items["dependencies"] = "\n".join(dependencies) + "\n" if dependencies else ""
-
+    
         # Format imports nicely, swapping imports of functions from migration files
         # for comments
         migration_imports = set()
@@ -164,7 +163,7 @@ class MigrationWriter:
                 migration_imports.add(line.split("import")[1].strip())
                 imports.remove(line)
                 self.needs_manual_porting = True
-
+    
         # django.db.migrations is always used, but models import may not be.
         # If models import exists, merge it with migrations import.
         if "from django.db import models" in imports:
@@ -172,24 +171,28 @@ class MigrationWriter:
             imports.add("from django.db import migrations, models")
         else:
             imports.add("from django.db import migrations")
-
-        # Sort imports by the package / module to be imported (the part after
-        # "from" in "from ... import ..." or after "import" in "import ...").
-        sorted_imports = sorted(imports, key=lambda i: i.split()[1])
+    
+        # Sort imports so that all "import x" lines appear before "from x"
+        # lines. Within each block, sort by module name.
+        sorted_imports = sorted(
+            imports,
+            key=lambda i: (0 if i.startswith("import ") else 1, i.split()[1])
+        )
         items["imports"] = "\n".join(sorted_imports) + "\n" if imports else ""
         if migration_imports:
             items["imports"] += (
-                "\n\n# Functions from the following migrations need manual "
-                "copying.\n# Move them and any dependencies into this file, "
-                "then update the\n# RunPython operations to refer to the local "
-                "versions:\n# %s"
+                "\n\n# Functions from the following migrations need manual copying.\n"
+                "# Move them and any dependencies into this file, then update the\n"
+                "# RunPython operations to refer to the local versions:\n# %s"
             ) % "\n# ".join(sorted(migration_imports))
+    
         # If there's a replaces, make a string for it
         if self.migration.replaces:
             items["replaces_str"] = (
                 "\n    replaces = %s\n" % self.serialize(self.migration.replaces)[0]
             )
-        # Hinting that goes into comment
+    
+        # If there's an initial, make a string for it
         if self.include_header:
             items["migration_header"] = MIGRATION_HEADER_TEMPLATE % {
                 "version": get_version(),
@@ -197,11 +200,12 @@ class MigrationWriter:
             }
         else:
             items["migration_header"] = ""
-
+    
         if self.migration.initial:
             items["initial_str"] = "\n    initial = True\n"
-
+    
         return MIGRATION_TEMPLATE % items
+    
 
     @property
     def basedir(self):
diff --git a/test_import_ordering.py b/test_import_ordering.py
new file mode 100644
index 0000000000..67cb84f70b
--- /dev/null
+++ b/test_import_ordering.py
@@ -0,0 +1,82 @@
+#!/usr/bin/env python3
+
+import sys
+import re
+import datetime
+import time
+
+from django.conf import settings
+import django
+from django.db import migrations, models
+from django.db.migrations.migration import Migration
+from django.db.migrations.writer import MigrationWriter
+
+"""
+This script checks whether imports in newly generated migrations
+end up in the correct order (all 'import' lines come before any
+'from x import' lines).
+If any 'import' line occurs after 'from x import' lines, it exits non-zero.
+Otherwise, it exits zero.
+"""
+
+if not settings.configured:
+    # Minimal Django config
+    settings.configure(
+        SECRET_KEY='test',
+        USE_TZ=False,
+        INSTALLED_APPS=[],
+    )
+django.setup()
+
+def main():
+    print("Starting test_import_ordering.py ...")
+
+    # Create a migration that references datetime and time in a model field default.
+    # This forces the MigrationWriter to insert "import datetime" and "import time" lines.
+    operation = migrations.CreateModel(
+        name='MyModel',
+        fields=[
+            ('id', models.AutoField(primary_key=True)),
+            ('my_datetime', models.DateTimeField(default=datetime.datetime.now)),
+            ('my_timestr', models.CharField(default=time.ctime, max_length=200)),
+        ],
+    )
+
+    migration = Migration("auto_import_ordering_test", "test_app")
+    migration.operations = [operation]
+
+    # Write the migration to a string
+    writer = MigrationWriter(migration)
+    migration_str = writer.as_string()
+
+    # Print for debugging
+    print("Generated migration:")
+    print("=====================")
+    print(migration_str)
+    print("=====================")
+
+    # Extract imports
+    import_lines = []
+    for line in migration_str.splitlines():
+        line_stripped = line.strip()
+        if line_stripped.startswith("import ") or line_stripped.startswith("from "):
+            import_lines.append(line_stripped)
+
+    # If there's any "import " that appears after "from ", it's an error.
+    found_from = False
+    retcode = 0
+    for line in import_lines:
+        if line.startswith("from "):
+            found_from = True
+        elif line.startswith("import "):
+            if found_from:
+                print("ERROR: Found an 'import' line after a 'from' line!")
+                retcode = 1
+
+    if retcode == 0:
+        print("Success: No 'import' lines found after 'from' lines.")
+
+    sys.exit(retcode)
+
+if __name__ == "__main__":
+    main()
