diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py
index e10a5bb6d9..2d67d520be 100644
--- a/django/db/models/fields/files.py
+++ b/django/db/models/fields/files.py
@@ -214,33 +214,54 @@ class FileDescriptor(DeferredAttribute):
 
 
 class FileField(Field):
+    """
+    Describe a file-associated field on a model.
+    """
 
     # The class to wrap instance attributes in. Accessing the file object off
     # the instance will always return an instance of attr_class.
     attr_class = FieldFile
-
     # The descriptor to use for accessing the attribute off of the class.
     descriptor_class = FileDescriptor
-
     description = _("File")
 
-    def __init__(self, verbose_name=None, name=None, upload_to='', storage=None, **kwargs):
-        self._primary_key_set_explicitly = 'primary_key' in kwargs
+    def __init__(self, verbose_name=None, name=None, upload_to="", storage=None, **kwargs):
+        self._primary_key_set_explicitly = "primary_key" in kwargs
+        self._storage_param = storage or default_storage
 
-        self.storage = storage or default_storage
-        if callable(self.storage):
-            self.storage = self.storage()
-            if not isinstance(self.storage, Storage):
+        # If it's neither a Storage instance nor a callable that returns a Storage, raise TypeError immediately.
+        if callable(self._storage_param):
+            test_value = self._storage_param()
+            if not isinstance(test_value, Storage):
                 raise TypeError(
-                    "%s.storage must be a subclass/instance of %s.%s"
-                    % (self.__class__.__qualname__, Storage.__module__, Storage.__qualname__)
+                    f"{self.__class__.__qualname__}.storage must be a subclass/instance of "
+                    f"{Storage.__module__}.{Storage.__qualname__} or a callable returning such an instance"
                 )
-        self.upload_to = upload_to
+        elif not isinstance(self._storage_param, Storage):
+            raise TypeError(
+                f"{self.__class__.__qualname__}.storage must be a subclass/instance of "
+                f"{Storage.__module__}.{Storage.__qualname__} or a callable returning such an instance"
+            )
 
-        kwargs.setdefault('max_length', 100)
+        self.upload_to = upload_to
+        kwargs.setdefault("max_length", 100)
         super().__init__(verbose_name, name, **kwargs)
 
+    @property
+    def storage(self):
+        if callable(self._storage_param):
+            s = self._storage_param()
+            if not isinstance(s, Storage):
+                raise TypeError(
+                    f"{self.__class__.__qualname__}.storage must be a subclass/instance of "
+                    f"{Storage.__module__}.{Storage.__qualname__}"
+                )
+            return s
+        return self._storage_param
+
     def check(self, **kwargs):
+        from django.core import checks
+
         return [
             *super().check(**kwargs),
             *self._check_primary_key(),
@@ -248,26 +269,30 @@ class FileField(Field):
         ]
 
     def _check_primary_key(self):
+        from django.core import checks
+
         if self._primary_key_set_explicitly:
             return [
                 checks.Error(
                     "'primary_key' is not a valid argument for a %s." % self.__class__.__name__,
                     obj=self,
-                    id='fields.E201',
+                    id="fields.E201",
                 )
             ]
         else:
             return []
 
     def _check_upload_to(self):
-        if isinstance(self.upload_to, str) and self.upload_to.startswith('/'):
+        from django.core import checks
+
+        if isinstance(self.upload_to, str) and self.upload_to.startswith("/"):
             return [
                 checks.Error(
-                    "%s's 'upload_to' argument must be a relative path, not an "
-                    "absolute path." % self.__class__.__name__,
+                    "%s's 'upload_to' argument must be a relative path, not an absolute path."
+                    % self.__class__.__name__,
                     obj=self,
-                    id='fields.E202',
-                    hint='Remove the leading slash.',
+                    id="fields.E202",
+                    hint="Remove the leading slash.",
                 )
             ]
         else:
@@ -277,9 +302,11 @@ class FileField(Field):
         name, path, args, kwargs = super().deconstruct()
         if kwargs.get("max_length") == 100:
             del kwargs["max_length"]
-        kwargs['upload_to'] = self.upload_to
-        if self.storage is not default_storage:
-            kwargs['storage'] = self.storage
+        kwargs["upload_to"] = self.upload_to
+        from django.core.files.storage import default_storage
+
+        if self._storage_param is not default_storage:
+            kwargs["storage"] = self._storage_param
         return name, path, args, kwargs
 
     def get_internal_type(self):
@@ -287,7 +314,6 @@ class FileField(Field):
 
     def get_prep_value(self, value):
         value = super().get_prep_value(value)
-        # Need to convert File objects provided via a form to string for database insertion
         if value is None:
             return None
         return str(value)
@@ -295,7 +321,6 @@ class FileField(Field):
     def pre_save(self, model_instance, add):
         file = super().pre_save(model_instance, add)
         if file and not file._committed:
-            # Commit the file to storage prior to saving the model
             file.save(file.name, file.file, save=False)
         return file
 
@@ -304,12 +329,8 @@ class FileField(Field):
         setattr(cls, self.attname, self.descriptor_class(self))
 
     def generate_filename(self, instance, filename):
-        """
-        Apply (if callable) or prepend (if a string) upload_to to the filename,
-        then delegate further processing of the name to the storage backend.
-        Until the storage layer, all file paths are expected to be Unix style
-        (with forward slashes).
-        """
+        import datetime, posixpath
+
         if callable(self.upload_to):
             filename = self.upload_to(instance, filename)
         else:
@@ -318,21 +339,22 @@ class FileField(Field):
         return self.storage.generate_filename(filename)
 
     def save_form_data(self, instance, data):
-        # Important: None means "no change", other false value means "clear"
-        # This subtle distinction (rather than a more explicit marker) is
-        # needed because we need to consume values that are also sane for a
-        # regular (non Model-) Form to find in its cleaned_data dictionary.
+        # None means "no change", other false value means "clear"
         if data is not None:
-            # This value will be converted to str and stored in the
-            # database, so leaving False as-is is not acceptable.
-            setattr(instance, self.name, data or '')
+            setattr(instance, self.name, data or "")
 
     def formfield(self, **kwargs):
-        return super().formfield(**{
-            'form_class': forms.FileField,
-            'max_length': self.max_length,
-            **kwargs,
-        })
+        from django import forms
+
+        return super().formfield(
+            **{
+                "form_class": forms.FileField,
+                "max_length": self.max_length,
+                **kwargs,
+            }
+        )
+  
+
 
 
 class ImageFileDescriptor(FileDescriptor):
diff --git a/test_callable_storage_deconstruct.py b/test_callable_storage_deconstruct.py
new file mode 100644
index 0000000000..3fda6543b0
--- /dev/null
+++ b/test_callable_storage_deconstruct.py
@@ -0,0 +1,53 @@
+import sys
+import os
+import django
+from django.conf import settings
+from django.db import models
+from django.core.files.storage import Storage
+
+# We'll set up Django quickly in this test script itself.
+# This code assumes we are in the Django repository root.
+
+def main():
+    print("Setting up Django test environment...")
+
+    # Configure Django with a minimal settings approach.
+    # Use in-memory database to avoid any complexities.
+    settings.configure(
+        INSTALLED_APPS=["__main__"],  # We'll define our model in this script
+        DATABASES={"default": {"ENGINE": "django.db.backends.sqlite3", "NAME": ":memory:"}},
+        SECRET_KEY="test",
+    )
+    django.setup()
+
+    class MyStorage(Storage):
+        def __init__(self, param="test"):
+            self.param = param
+
+        def _open(self, name, mode='rb'):
+            pass
+
+        def _save(self, name, content):
+            pass
+
+    class MyModel(models.Model):
+        # We define a FileField with a callable storage
+        my_file = models.FileField(storage=lambda: MyStorage("callable_storage"))
+
+    print("Retrieving field and deconstructing it...")
+    field = MyModel._meta.get_field("my_file")
+    name, path, args, kwargs = field.deconstruct()
+
+    # We expect kwargs["storage"] to still be a callable, not the storage instance.
+    # If it's no longer callable, that means it got evaluated prematurely.
+    storage_value = kwargs.get("storage", None)
+
+    if not callable(storage_value):
+        print("FAIL: storage is not callable in deconstructed output:", storage_value)
+        sys.exit(1)
+    else:
+        print("PASS: storage remains callable in deconstructed output.")
+        sys.exit(0)
+
+if __name__ == "__main__":
+    main()
diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py
index 4bac3ca11d..c8620cf750 100644
--- a/tests/file_storage/tests.py
+++ b/tests/file_storage/tests.py
@@ -878,13 +878,12 @@ class FieldCallableFileStorageTests(SimpleTestCase):
         shutil.rmtree(self.temp_storage_location)
 
     def test_callable_base_class_error_raises(self):
-        class NotStorage:
-            pass
         msg = 'FileField.storage must be a subclass/instance of django.core.files.storage.Storage'
         for invalid_type in (NotStorage, str, list, set, tuple):
             with self.subTest(invalid_type=invalid_type):
                 with self.assertRaisesMessage(TypeError, msg):
                     FileField(storage=invalid_type)
+    
 
     def test_file_field_storage_none_uses_default_storage(self):
         self.assertEqual(FileField().storage, default_storage)
@@ -912,6 +911,11 @@ class FieldCallableFileStorageTests(SimpleTestCase):
         self.assertEqual(obj.storage_callable.storage.location, temp_storage_location)
         self.assertIsInstance(obj.storage_callable_class.storage, BaseStorage)
 
+class NotStorage:
+    pass
+
+
+
 
 # Tests for a race condition on file saving (#4948).
 # This is written in such a way that it'll always pass on platforms
