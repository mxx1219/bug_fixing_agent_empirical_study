diff --git a/bugapp/__init__.py b/bugapp/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/bugapp/admin.py b/bugapp/admin.py
new file mode 100644
index 0000000000..ad79d66eef
--- /dev/null
+++ b/bugapp/admin.py
@@ -0,0 +1,11 @@
+from django.contrib import admin
+from .models import Thing, SubThing
+
+class SubThingInline(admin.StackedInline):
+    model = SubThing
+
+@admin.register(Thing)
+class ThingAdmin(admin.ModelAdmin):
+    list_display = ("name",)
+    ordering = ("pkid",)
+    inlines = (SubThingInline,)
diff --git a/bugapp/apps.py b/bugapp/apps.py
new file mode 100644
index 0000000000..23dc1445ac
--- /dev/null
+++ b/bugapp/apps.py
@@ -0,0 +1,4 @@
+from django.apps import AppConfig
+
+class BugAppConfig(AppConfig):
+    name = "bugapp"
diff --git a/bugapp/migrations/0001_initial.py b/bugapp/migrations/0001_initial.py
new file mode 100644
index 0000000000..aa8d342ff2
--- /dev/null
+++ b/bugapp/migrations/0001_initial.py
@@ -0,0 +1,55 @@
+# Generated by Django 5.0.dev20230707060601 on 2025-01-13 03:17
+
+import django.db.models.deletion
+import uuid
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = []
+
+    operations = [
+        migrations.CreateModel(
+            name="Thing",
+            fields=[
+                (
+                    "pkid",
+                    models.BigAutoField(
+                        editable=False, primary_key=True, serialize=False
+                    ),
+                ),
+                (
+                    "id",
+                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
+                ),
+                ("name", models.CharField(max_length=191)),
+            ],
+        ),
+        migrations.CreateModel(
+            name="SubThing",
+            fields=[
+                (
+                    "id",
+                    models.AutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                ("name", models.CharField(max_length=191)),
+                (
+                    "thing",
+                    models.ForeignKey(
+                        on_delete=django.db.models.deletion.CASCADE,
+                        related_name="subthings",
+                        to="bugapp.thing",
+                        to_field="id",
+                    ),
+                ),
+            ],
+        ),
+    ]
diff --git a/bugapp/migrations/__init__.py b/bugapp/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/bugapp/models.py b/bugapp/models.py
new file mode 100644
index 0000000000..9ddbf03c63
--- /dev/null
+++ b/bugapp/models.py
@@ -0,0 +1,21 @@
+import uuid
+from django.db import models
+
+class UUIDModel(models.Model):
+    pkid = models.BigAutoField(primary_key=True, editable=False)
+    id = models.UUIDField(default=uuid.uuid4, editable=False, unique=True)
+
+    class Meta:
+        abstract = True
+
+class Thing(UUIDModel):
+    name = models.CharField(max_length=191)
+
+class SubThing(models.Model):
+    name = models.CharField(max_length=191)
+    thing = models.ForeignKey(
+        Thing,
+        to_field="id",
+        on_delete=models.CASCADE,
+        related_name="subthings",
+    )
diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index f9760664dd..5837a4351c 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -1256,7 +1256,17 @@ class ModelAdmin(BaseModelAdmin):
         """
         Given a model instance save it to the database.
         """
+        from django.db.models import NOT_PROVIDED
+    
+        # Apply defaults for non-editable fields that Django wouldn't otherwise populate.
+        for field in obj._meta.concrete_fields:
+            if not field.editable and field.default is not NOT_PROVIDED:
+                # If the field is None, set it to the field's default
+                if getattr(obj, field.attname) is None:
+                    setattr(obj, field.attname, field.get_default())
+    
         obj.save()
+    
 
     def delete_model(self, request, obj):
         """
diff --git a/test_uuid_inlines.py b/test_uuid_inlines.py
new file mode 100644
index 0000000000..9a4b4c2543
--- /dev/null
+++ b/test_uuid_inlines.py
@@ -0,0 +1,103 @@
+#!/usr/bin/env python
+import sys
+
+print("STEP 1: Configure Django settings so we can makemigrations + migrate for bugapp...")
+
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        SECRET_KEY="secret",
+        DEBUG=True,
+        DATABASES={
+            "default": {
+                "ENGINE": "django.db.backends.sqlite3",
+                "NAME": ":memory:",
+            }
+        },
+        INSTALLED_APPS=[
+            "django.contrib.admin",
+            "django.contrib.auth",
+            "django.contrib.contenttypes",
+            "django.contrib.messages",
+            "django.contrib.sessions",
+            "bugapp.apps.BugAppConfig",  # our real package
+        ],
+        MIDDLEWARE=[
+            "django.contrib.sessions.middleware.SessionMiddleware",
+            "django.contrib.auth.middleware.AuthenticationMiddleware",
+            "django.contrib.messages.middleware.MessageMiddleware",
+        ],
+        ROOT_URLCONF="__main__",  # We'll define urlpatterns in this script
+        TEMPLATES=[{
+            "BACKEND": "django.template.backends.django.DjangoTemplates",
+            "APP_DIRS": True,
+            "OPTIONS": {},
+        }],
+        USE_TZ=False,
+    )
+
+print("STEP 2: Now import Django and run setup.")
+import django
+django.setup()
+
+print("STEP 3: Admin site: define a minimal URL pattern to expose the Django admin.")
+from django.contrib import admin as django_admin
+from django.urls import path
+
+urlpatterns = [
+    path("admin/", django_admin.site.urls),
+]
+
+print("STEP 4: Make migrations/migrate for bugapp, create a superuser, and do the test.")
+from django.core.management import call_command
+try:
+    call_command("makemigrations", "bugapp", verbosity=1)
+    call_command("migrate", verbosity=1)
+except Exception as e:
+    print("Migration exception:", e)
+    sys.exit(1)
+
+from django.contrib.auth.models import User
+User.objects.create_superuser("admin", "admin@example.com", "password")
+
+from django.test import Client
+client = Client()
+if not client.login(username="admin", password="password"):
+    print("ERROR: Could not log in. Exiting.")
+    sys.exit(1)
+
+print("STEP 5: Attempt the bug scenario: creating a new Thing plus subthings in one POST.")
+add_url = "/admin/bugapp/thing/add/"
+post_data = {
+    "name": "Thing with subthing",
+    "subthings-0-name": "a subthing name",
+    "subthings-TOTAL_FORMS": "1",
+    "subthings-INITIAL_FORMS": "0",
+    "subthings-MIN_NUM_FORMS": "0",
+    "subthings-MAX_NUM_FORMS": "1000",
+}
+
+try:
+    response = client.post(add_url, post_data, follow=True)
+    status = response.status_code
+    print(f"Post response status = {status}")
+    # If final status is something not OK or redirect, it's suspicious.
+    if status not in (200, 302):
+        print("BUG TRIGGERED: Non-OK/302 status indicates an error.")
+        sys.exit(1)
+
+    # Just check the final response content for a traceback or errors.
+    final_html = response.content.decode(errors='ignore')
+    if "Traceback" in final_html:
+        print("BUG TRIGGERED: Found a traceback in final response content.")
+        sys.exit(1)
+    if "errorlist" in final_html:
+        print("BUG TRIGGERED: Found an Admin form error list (likely a validation error).")
+        sys.exit(1)
+
+    print("SUCCESS: No error triggered. The bug must be fixed or otherwise not reproducible.")
+    sys.exit(0)
+except Exception as e:
+    print("BUG TRIGGERED: Exception occurred:", e)
+    sys.exit(1)
