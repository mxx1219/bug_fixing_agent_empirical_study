diff --git a/django/contrib/admindocs/utils.py b/django/contrib/admindocs/utils.py
index 1ce4594501..70833a0d70 100644
--- a/django/contrib/admindocs/utils.py
+++ b/django/contrib/admindocs/utils.py
@@ -152,39 +152,66 @@ unnamed_group_matcher = re.compile(r'\(')
 
 def replace_named_groups(pattern):
     r"""
-    Find named groups in `pattern` and replace them with the group name. E.g.,
-    1. ^(?P<a>\w+)/b/(\w+)$ ==> ^<a>/b/(\w+)$
-    2. ^(?P<a>\w+)/b/(?P<c>\w+)/$ ==> ^<a>/b/<c>/$
+    Find named groups in `pattern` and replace them with "<groupname>". E.g.,
+    '^entries/(?P<pk>[^/.]+)/relationships/(?P<related_field>\w+)$' =>
+    '/entries/<pk>/relationships/<related_field>'
+
+    This revised version stops if it encounters a new "(?P<" at the
+    same unmatched level, ensuring separate groups don't get lumped
+    into one.
     """
-    named_group_indices = [
-        (m.start(0), m.end(0), m.group(1))
-        for m in named_group_matcher.finditer(pattern)
-    ]
-    # Tuples of (named capture group pattern, group name).
-    group_pattern_and_name = []
-    # Loop over the groups and their start and end indices.
-    for start, end, group_name in named_group_indices:
-        # Handle nested parentheses, e.g. '^(?P<a>(x|y))/b'.
-        unmatched_open_brackets, prev_char = 1, None
-        for idx, val in enumerate(pattern[end:]):
-            # If brackets are balanced, the end of the string for the current
-            # named capture group pattern has been reached.
-            if unmatched_open_brackets == 0:
-                group_pattern_and_name.append((pattern[start:end + idx], group_name))
+    import re
+
+    named_group_matcher = re.compile(r'\(\?P<(\w+)>')
+    group_ranges = []
+
+    for m in named_group_matcher.finditer(pattern):
+        group_name = m.group(1)
+        start = m.start(0)
+        end_of_intro = m.end(0)  # position just after "(?P<group>"
+
+        unmatched = 1  # We've seen 1 open parenthesis already for this group
+        prev_char = None
+        i = 0
+        text = pattern[end_of_intro:]
+        actual_end = None
+
+        while i < len(text):
+            ch = text[i]
+            # If at unmatched == 1, seeing a new "(?P<" means a second named group starts.
+            if unmatched == 1 and text[i:i+4] == '(?P<':
+                # End the current group right before this new group.
+                actual_end = end_of_intro + i
                 break
 
-            # Check for unescaped `(` and `)`. They mark the start and end of a
-            # nested group.
-            if val == '(' and prev_char != '\\':
-                unmatched_open_brackets += 1
-            elif val == ')' and prev_char != '\\':
-                unmatched_open_brackets -= 1
-            prev_char = val
+            if ch == '(' and prev_char != '\\':
+                unmatched += 1
+            elif ch == ')' and prev_char != '\\':
+                unmatched -= 1
+
+            if unmatched == 0:
+                # Found the matching closing paren
+                actual_end = end_of_intro + i + 1
+                break
+            prev_char = ch
+            i += 1
+
+        if actual_end is not None:
+            group_ranges.append((start, actual_end, group_name))
+
+    # Build the final pattern in a single pass.
+    new_parts = []
+    prev_end = 0
+    for s, e, gn in group_ranges:
+        new_parts.append(pattern[prev_end:s])
+        new_parts.append(f'<{gn}>')
+        prev_end = e
+    new_parts.append(pattern[prev_end:])
+    return ''.join(new_parts)
+
+
+
 
-    # Replace the string for named capture groups with their group names.
-    for group_pattern, group_name in group_pattern_and_name:
-        pattern = pattern.replace(group_pattern, group_name)
-    return pattern
 
 
 def replace_unnamed_groups(pattern):
@@ -235,3 +262,13 @@ def replace_unnamed_groups(pattern):
         return ''.join(final_pattern)
     else:
         return pattern
+
+def simplify_regex(pattern):
+    pattern = replace_named_groups(pattern)
+    pattern = replace_unnamed_groups(pattern)
+    pattern = pattern.replace('^', '').replace('$', '').replace('?', '')
+    if not pattern.startswith('/'):
+        pattern = '/' + pattern
+    return pattern
+
+
