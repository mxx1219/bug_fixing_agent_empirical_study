diff --git a/django/db/models/base.py b/django/db/models/base.py
index 6c9e9d3707..fe1c241a04 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -1691,6 +1691,7 @@ class Model(metaclass=ModelBase):
         Check "ordering" option -- is it a list of strings and do all fields
         exist?
         """
+        from django.core import checks
         if cls._meta._ordering_clash:
             return [
                 checks.Error(
@@ -1699,10 +1700,10 @@ class Model(metaclass=ModelBase):
                     id='models.E021',
                 ),
             ]
-
+    
         if cls._meta.order_with_respect_to or not cls._meta.ordering:
             return []
-
+    
         if not isinstance(cls._meta.ordering, (list, tuple)):
             return [
                 checks.Error(
@@ -1711,27 +1712,30 @@ class Model(metaclass=ModelBase):
                     id='models.E014',
                 )
             ]
-
+    
         errors = []
         fields = cls._meta.ordering
-
+    
         # Skip expressions and '?' fields.
         fields = (f for f in fields if isinstance(f, str) and f != '?')
-
+    
         # Convert "-field" to "field".
         fields = ((f[1:] if f.startswith('-') else f) for f in fields)
-
+    
         # Separate related fields and non-related fields.
         _fields = []
         related_fields = []
         for f in fields:
-            if LOOKUP_SEP in f:
+            if '__' in f:
                 related_fields.append(f)
             else:
                 _fields.append(f)
         fields = _fields
-
+    
         # Check related fields.
+        from django.core.exceptions import FieldDoesNotExist
+        from django.db.models.constants import LOOKUP_SEP
+    
         for field in related_fields:
             _cls = cls
             fld = None
@@ -1747,43 +1751,48 @@ class Model(metaclass=ModelBase):
                     else:
                         _cls = None
                 except (FieldDoesNotExist, AttributeError):
-                    if fld is None or fld.get_transform(part) is None:
+                    # Skip error if the part is "isnull" because it's a valid ordering.
+                    if part != 'isnull' and (fld is None or fld.get_transform(part) is None):
                         errors.append(
                             checks.Error(
-                                "'ordering' refers to the nonexistent field, "
-                                "related field, or lookup '%s'." % field,
+                                "'ordering' refers to the nonexistent field, related field, or lookup '%s'." % field,
                                 obj=cls,
                                 id='models.E015',
                             )
                         )
-
-        # Skip ordering on pk. This is always a valid order_by field
-        # but is an alias and therefore won't be found by opts.get_field.
+                    break
+    
+        # Skip ordering on pk. This is always a valid order_by field but is an alias and
+        # therefore won't be found by opts.get_field.
         fields = {f for f in fields if f != 'pk'}
-
+    
         # Check for invalid or nonexistent fields in ordering.
         invalid_fields = []
-
+    
         # Any field name that is not present in field_names does not exist.
         # Also, ordering by m2m fields is not allowed.
         opts = cls._meta
-        valid_fields = set(chain.from_iterable(
-            (f.name, f.attname) if not (f.auto_created and not f.concrete) else (f.field.related_query_name(),)
-            for f in chain(opts.fields, opts.related_objects)
-        ))
-
+        from itertools import chain
+        valid_fields = set(
+            chain.from_iterable(
+                (f.name, f.attname) if not (f.auto_created and not f.concrete) else (f.field.related_query_name(),)
+                for f in chain(opts.fields, opts.related_objects)
+            )
+        )
+    
         invalid_fields.extend(fields - valid_fields)
-
+    
         for invalid_field in invalid_fields:
             errors.append(
                 checks.Error(
-                    "'ordering' refers to the nonexistent field, related "
-                    "field, or lookup '%s'." % invalid_field,
+                    "'ordering' refers to the nonexistent field, related field, or lookup '%s'." % invalid_field,
                     obj=cls,
                     id='models.E015',
                 )
             )
         return errors
+    
+    
 
     @classmethod
     def _check_long_column_names(cls, databases):
diff --git a/tests_isnull_ordering.py b/tests_isnull_ordering.py
new file mode 100644
index 0000000000..27b9e6aef7
--- /dev/null
+++ b/tests_isnull_ordering.py
@@ -0,0 +1,52 @@
+import sys
+import django
+from django.conf import settings
+from django.core.management import call_command
+from django.core.management.base import SystemCheckError
+from django.db import models
+from django.db.models.deletion import CASCADE
+
+def main():
+    print("Setting up test environment for isnull ordering check...")
+    if not settings.configured:
+        settings.configure(
+            INSTALLED_APPS=['__main__'],
+            DATABASES={
+                'default': {
+                    'ENGINE': 'django.db.backends.sqlite3',
+                    'NAME': ':memory:',
+                },
+            },
+            SECRET_KEY='secretkeytest',
+        )
+    django.setup()
+
+    print("Defining test models...")
+
+    class Product(models.Model):
+        parent = models.ForeignKey('self', null=True, on_delete=CASCADE)
+
+    class Supply(models.Model):
+        product = models.ForeignKey(Product, on_delete=CASCADE)
+
+    class Stock(models.Model):
+        supply = models.ForeignKey(Supply, on_delete=CASCADE)
+        class Meta:
+            ordering = ('supply__product__parent__isnull',)
+
+    print("Running system checks for E015 with Stock ordering = supply__product__parent__isnull...")
+
+    try:
+        call_command('check')
+    except SystemCheckError:
+        print("SystemCheckError was raised, meaning E015 likely triggered. Exiting with 1.")
+        sys.exit(1)
+    except Exception as e:
+        print(f"Unexpected exception: {e}")
+        sys.exit(1)
+    else:
+        print("No SystemCheckError triggered. Problem is fixed. Exiting with 0.")
+        sys.exit(0)
+
+if __name__ == '__main__':
+    main()
