diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index c1a76584f0..cdd5ad2c84 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -852,7 +852,6 @@ class ExpressionWrapper(Expression):
     An expression that can wrap another expression so that it can provide
     extra context to the inner expression, such as the output_field.
     """
-
     def __init__(self, expression, output_field):
         super().__init__(output_field=output_field)
         self.expression = expression
@@ -869,6 +868,16 @@ class ExpressionWrapper(Expression):
     def __repr__(self):
         return "{}({})".format(self.__class__.__name__, self.expression)
 
+    def get_group_by_cols(self, alias=None):
+        # If the expression does not contain aggregates and does not reference
+        # any columns, skip grouping by it (i.e. it is purely constant).
+        if not self.contains_aggregate:
+            if not self.contains_column_references:
+                return []
+            return self.expression.get_group_by_cols(alias=alias)
+        return super().get_group_by_cols(alias=alias)
+
+
 
 class When(Expression):
     template = 'WHEN %(condition)s THEN %(result)s'
diff --git a/test_expr_wrapper_constant.py b/test_expr_wrapper_constant.py
new file mode 100644
index 0000000000..4750d5584a
--- /dev/null
+++ b/test_expr_wrapper_constant.py
@@ -0,0 +1,65 @@
+import sys
+import re
+import django
+from django.conf import settings
+from django.db import models, connection
+from django.db.models import Value, IntegerField, ExpressionWrapper, Sum
+
+DATABASE_NAME = ":memory:"
+
+def main():
+    print("Configuring settings...")
+    if not settings.configured:
+        settings.configure(
+            DEBUG=True,
+            SECRET_KEY="test",
+            INSTALLED_APPS=["__main__"],
+            DATABASES={
+                "default": {
+                    "ENGINE": "django.db.backends.sqlite3",
+                    "NAME": DATABASE_NAME,
+                }
+            },
+        )
+    django.setup()
+
+    class TestModel(models.Model):
+        column_a = models.IntegerField()
+        column_b = models.IntegerField()
+
+        class Meta:
+            app_label = "__main__"
+            # No migrations exist, so we just create it directly.
+
+    print("Creating table with schema editor...")
+    with connection.schema_editor() as editor:
+        editor.create_model(TestModel)
+
+    print("Inserting sample data...")
+    for i in range(1, 4):
+        TestModel.objects.create(column_a=i, column_b=i*10)
+    print("Data created.")
+
+    print("Building query with ExpressionWrapper...")
+    qs = (
+        TestModel.objects
+        .annotate(expr_res=ExpressionWrapper(Value(3), output_field=IntegerField()))
+        .values("expr_res", "column_a")
+        .annotate(total_sum=Sum("column_b"))
+    )
+    compiled_sql = str(qs.query)
+    print("Compiled SQL:", compiled_sql)
+
+    # Check if the GROUP BY segment includes the literal 3.
+    # We'll do a quick regex search for "GROUP BY ... 3" or "GROUP BY ...3," or similar.
+    # This ensures we don't fail just because "3" appears in the SELECT list.
+    group_by_expr = re.search(r'GROUP BY (.*)', compiled_sql, flags=re.IGNORECASE)
+    if group_by_expr and '3' in group_by_expr.group(1):
+        print("ERROR: Found GROUP BY literal constant => failing.")
+        sys.exit(1)
+    else:
+        print("SUCCESS: 3 not present in GROUP BY => passing.")
+        sys.exit(0)
+
+if __name__ == "__main__":
+    main()
