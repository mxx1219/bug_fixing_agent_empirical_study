diff --git a/django/template/autoreload.py b/django/template/autoreload.py
index 84c8554165..faca5779cf 100644
--- a/django/template/autoreload.py
+++ b/django/template/autoreload.py
@@ -10,26 +10,36 @@ from django.utils.autoreload import autoreload_started, file_changed, is_django_
 def get_template_directories():
     # Iterate through each template backend and find
     # any template_loader that has a 'get_dirs' method.
-    # Collect the directories, filtering out Django templates.
+    # Collect the directories, filtering out Django templates
+    # and ignoring empty entries.
+    from pathlib import Path
+    from django.template import engines
+    from django.template.backends.django import DjangoTemplates
+    from django.utils._os import to_path
+    from django.utils.autoreload import is_django_path
+
     cwd = Path.cwd()
     items = set()
     for backend in engines.all():
         if not isinstance(backend, DjangoTemplates):
             continue
 
-        items.update(cwd / to_path(dir) for dir in backend.engine.dirs)
+        # Skip empty strings in backend.engine.dirs
+        items.update(cwd / to_path(d) for d in backend.engine.dirs if d)
 
         for loader in backend.engine.template_loaders:
             if not hasattr(loader, "get_dirs"):
                 continue
+            # Skip empty directories
             items.update(
                 cwd / to_path(directory)
                 for directory in loader.get_dirs()
-                if not is_django_path(directory)
+                if directory and not is_django_path(directory)
             )
     return items
 
 
+
 def reset_loaders():
     for backend in engines.all():
         if not isinstance(backend, DjangoTemplates):
diff --git a/scripts/test_autoreload_empty_string.py b/scripts/test_autoreload_empty_string.py
new file mode 100644
index 0000000000..2ed095f7a5
--- /dev/null
+++ b/scripts/test_autoreload_empty_string.py
@@ -0,0 +1,50 @@
+import sys
+from pathlib import Path
+from django.conf import settings
+import django
+
+def main():
+    print("Testing Django autoreload behavior with an empty string in TEMPLATES['DIRS'].")
+
+    # Configure Django with minimal settings
+    if not settings.configured:
+        settings.configure(
+            DEBUG=True,
+            SECRET_KEY='test_key',
+            INSTALLED_APPS=[],
+            TEMPLATES=[
+                {
+                    'BACKEND': 'django.template.backends.django.DjangoTemplates',
+                    'DIRS': [""],  # Introduce the empty string bug
+                    'APP_DIRS': True,
+                }
+            ]
+        )
+
+    django.setup()
+
+    try:
+        from django.template.autoreload import get_template_directories
+    except ImportError as e:
+        print(f"Could not import necessary modules: {e}")
+        sys.exit(2)
+
+    project_root = Path.cwd()
+    print(f"Project root is: {project_root}")
+
+    # Collect template directories
+    directories = get_template_directories()
+    print("Collected template directories:")
+    for d in directories:
+        print(f"  {d}")
+
+    # Check if project root is in directories
+    if project_root in directories:
+        print("Bug present: empty string in TEMPLATES['DIRS'] caused project root to appear in get_template_directories.")
+        sys.exit(1)
+    else:
+        print("Bug NOT present: empty string did NOT cause project root in get_template_directories.")
+        sys.exit(0)
+
+if __name__ == '__main__':
+    main()
