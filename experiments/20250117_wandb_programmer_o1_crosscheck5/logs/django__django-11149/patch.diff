diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 880a2cc17b..91498c86dd 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -2026,8 +2026,7 @@ class InlineModelAdmin(BaseModelAdmin):
             # Take the custom ModelForm's Meta.exclude into account only if the
             # InlineModelAdmin doesn't define its own.
             exclude.extend(self.form._meta.exclude)
-        # If exclude is an empty list we use None, since that's the actual
-        # default.
+        # If exclude is an empty list we use None, since that's the actual default.
         exclude = exclude or None
         can_delete = self.can_delete and self.has_delete_permission(request, obj)
         defaults = {
@@ -2111,31 +2110,43 @@ class InlineModelAdmin(BaseModelAdmin):
             queryset = queryset.none()
         return queryset
 
-    def has_add_permission(self, request, obj):
+    def has_add_permission(self, request, obj=None):
+        """
+        Return True if the given request has permission to add an object.
+        For auto-created ManyToMany through models, require 'change' permission
+        on the parent model instead of just 'view' permission.
+        """
         if self.opts.auto_created:
-            # We're checking the rights to an auto-created intermediate model,
-            # which doesn't have its own individual permissions. The user needs
-            # to have the view permission for the related model in order to
-            # be able to do anything with the intermediate model.
-            return self.has_view_permission(request, obj)
+            from django.contrib.auth import get_permission_codename
+            parent_opts = self.parent_model._meta
+            codename = get_permission_codename('change', parent_opts)
+            return request.user.has_perm('%s.%s' % (parent_opts.app_label, codename))
         return super().has_add_permission(request)
 
     def has_change_permission(self, request, obj=None):
+        """
+        Return True if the given request has permission to change the object.
+        For auto-created ManyToMany through models, require 'change' permission
+        on the parent model rather than merely 'view'.
+        """
         if self.opts.auto_created:
-            # We're checking the rights to an auto-created intermediate model,
-            # which doesn't have its own individual permissions. The user needs
-            # to have the view permission for the related model in order to
-            # be able to do anything with the intermediate model.
-            return self.has_view_permission(request, obj)
-        return super().has_change_permission(request)
+            from django.contrib.auth import get_permission_codename
+            parent_opts = self.parent_model._meta
+            codename = get_permission_codename('change', parent_opts)
+            return request.user.has_perm('%s.%s' % (parent_opts.app_label, codename))
+        return super().has_change_permission(request, obj)
 
     def has_delete_permission(self, request, obj=None):
+        """
+        Return True if the given request has permission to delete the object.
+        For auto-created ManyToMany through models, require 'change' permission
+        on the parent model instead of 'view' to remove M2M rows.
+        """
         if self.opts.auto_created:
-            # We're checking the rights to an auto-created intermediate model,
-            # which doesn't have its own individual permissions. The user needs
-            # to have the view permission for the related model in order to
-            # be able to do anything with the intermediate model.
-            return self.has_view_permission(request, obj)
+            from django.contrib.auth import get_permission_codename
+            parent_opts = self.parent_model._meta
+            codename = get_permission_codename('change', parent_opts)
+            return request.user.has_perm('%s.%s' % (parent_opts.app_label, codename))
         return super().has_delete_permission(request, obj)
 
     def has_view_permission(self, request, obj=None):
@@ -2151,7 +2162,8 @@ class InlineModelAdmin(BaseModelAdmin):
                 request.user.has_perm('%s.%s' % (opts.app_label, get_permission_codename('view', opts))) or
                 request.user.has_perm('%s.%s' % (opts.app_label, get_permission_codename('change', opts)))
             )
-        return super().has_view_permission(request)
+        return super().has_view_permission(request, obj)
+
 
 
 class StackedInline(InlineModelAdmin):
diff --git a/fake_urls.py b/fake_urls.py
new file mode 100644
index 0000000000..637600f58a
--- /dev/null
+++ b/fake_urls.py
@@ -0,0 +1 @@
+urlpatterns = []
diff --git a/test_m2m_inline_app/__init__.py b/test_m2m_inline_app/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_m2m_inline_app/admin.py b/test_m2m_inline_app/admin.py
new file mode 100644
index 0000000000..077089c6b7
--- /dev/null
+++ b/test_m2m_inline_app/admin.py
@@ -0,0 +1,14 @@
+from django.contrib import admin
+from .models import Photo, Report
+
+class ReportPhotoInlineModelAdmin(admin.TabularInline):
+    model = Report.photos.through
+    extra = 1
+
+@admin.register(Report)
+class ReportAdmin(admin.ModelAdmin):
+    inlines = [ReportPhotoInlineModelAdmin]
+
+@admin.register(Photo)
+class PhotoAdmin(admin.ModelAdmin):
+    pass
diff --git a/test_m2m_inline_app/models.py b/test_m2m_inline_app/models.py
new file mode 100644
index 0000000000..b59200c3c5
--- /dev/null
+++ b/test_m2m_inline_app/models.py
@@ -0,0 +1,8 @@
+from django.db import models
+
+class Photo(models.Model):
+    title = models.CharField(max_length=50, blank=True)
+
+class Report(models.Model):
+    title = models.CharField(max_length=50, blank=True)
+    photos = models.ManyToManyField(Photo)
diff --git a/test_m2m_inline_permission.py b/test_m2m_inline_permission.py
new file mode 100644
index 0000000000..78df189298
--- /dev/null
+++ b/test_m2m_inline_permission.py
@@ -0,0 +1,131 @@
+import sys
+import os
+
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY="testsecretkey",
+        ROOT_URLCONF=__name__,
+        ALLOWED_HOSTS=["*"],
+        INSTALLED_APPS=[
+            "django.contrib.contenttypes",
+            "django.contrib.auth",
+            "django.contrib.sessions",
+            "django.contrib.admin",
+            "django.contrib.messages",
+            "django.contrib.staticfiles",
+            "test_m2m_inline_app",
+        ],
+        MIDDLEWARE=[
+            "django.contrib.sessions.middleware.SessionMiddleware",
+            "django.contrib.auth.middleware.AuthenticationMiddleware",
+            "django.contrib.messages.middleware.MessageMiddleware",
+        ],
+        TEMPLATES=[
+            {
+                "BACKEND": "django.template.backends.django.DjangoTemplates",
+                "DIRS": [],
+                "APP_DIRS": True,
+                "OPTIONS": {
+                    "context_processors": [
+                        "django.template.context_processors.debug",
+                        "django.template.context_processors.request",
+                        "django.contrib.auth.context_processors.auth",
+                        "django.contrib.messages.context_processors.messages",
+                    ],
+                },
+            },
+        ],
+        DATABASES={
+            "default": {
+                "ENGINE": "django.db.backends.sqlite3",
+                "NAME": ":memory:",
+            }
+        },
+        STATIC_URL="/static/",
+        USE_I18N=False,
+        USE_L10N=False,
+        SILENCED_SYSTEM_CHECKS=["urls.W002"],
+        BASE_DIR=os.path.dirname(os.path.abspath(__file__)),
+        MIGRATION_MODULES={
+            "test_m2m_inline_app": None,
+        },
+    )
+
+import django
+django.setup()
+
+from django.urls import path, reverse
+from django.test import TransactionTestCase, Client
+from django.core.management import call_command
+from django.contrib import admin
+from django.contrib.auth import get_user_model
+from django.contrib.auth.models import Permission
+
+from test_m2m_inline_app.models import Report, Photo
+
+urlpatterns = [
+    path("admin/", admin.site.urls),
+]
+
+class M2MInlinePermissionTest(TransactionTestCase):
+    reset_sequences = True
+
+    @classmethod
+    def setUpClass(cls):
+        super().setUpClass()
+        call_command("migrate", run_syncdb=True, verbosity=0, interactive=False)
+
+    def setUp(self):
+        self.report = Report.objects.create(title="My Report")
+        self.photo = Photo.objects.create(title="My Photo")
+
+        user_model = get_user_model()
+        self.user = user_model.objects.create_user(
+            username="view_user", password="test123", is_staff=True
+        )
+        view_report_perm = Permission.objects.get(codename="view_report")
+        self.user.user_permissions.add(view_report_perm)
+
+        self.client = Client()
+        login_ok = self.client.login(username="view_user", password="test123")
+        self.assertTrue(login_ok, "Could not log in with test user!")
+
+    def test_inline_cannot_be_modified_by_view_only(self):
+        """
+        Attempt to add an M2M row via the TabularInline in the admin.
+        - On HEAD (old permission logic), user can incorrectly add => test FAILS.
+        - After fix, user is disallowed => test PASSES.
+        """
+        change_url = reverse("admin:test_m2m_inline_app_report_change", args=[self.report.pk])
+        response = self.client.get(change_url)
+        self.assertIn(response.status_code, (200, 302), f"Could not GET the change page. status={response.status_code}")
+
+        form_data = {
+            "title": self.report.title,
+            "report_photos_through_set-TOTAL_FORMS": "1",
+            "report_photos_through_set-INITIAL_FORMS": "0",
+            "report_photos_through_set-MIN_NUM_FORMS": "0",
+            "report_photos_through_set-MAX_NUM_FORMS": "1000",
+            "report_photos_through_set-0-id": "",
+            "report_photos_through_set-0-report": str(self.report.pk),
+            "report_photos_through_set-0-photo": str(self.photo.pk),
+        }
+        self.client.post(change_url, form_data, follow=True)
+
+        count_query = Report.photos.through.objects.filter(report=self.report, photo=self.photo).count()
+        self.assertEqual(
+            count_query, 
+            0,
+            "User with only view_report permission was able to add M2M row! (BUG on HEAD)"
+        )
+
+def main():
+    import unittest
+    suite = unittest.TestLoader().loadTestsFromTestCase(M2MInlinePermissionTest)
+    result = unittest.TextTestRunner(verbosity=2).run(suite)
+    sys.exit(0 if result.wasSuccessful() else 1)
+
+if __name__ == "__main__":
+    main()
diff --git a/test_m2m_permission.py b/test_m2m_permission.py
new file mode 100644
index 0000000000..d188fd1d6d
--- /dev/null
+++ b/test_m2m_permission.py
@@ -0,0 +1,152 @@
+#!/usr/bin/env python
+import sys
+import os
+import unittest
+
+def main():
+    print("Starting test_m2m_permission.py...")
+
+    # Insert this script's directory into sys.path so we can import fake_urls
+    script_dir = os.path.dirname(os.path.abspath(__file__))
+    if script_dir not in sys.path:
+        sys.path.insert(0, script_dir)
+
+    from django.conf import settings
+
+    TEST_SETTINGS = {
+        'INSTALLED_APPS': [
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+            'django.contrib.sessions',
+            'django.contrib.admin',
+            'django.contrib.messages',
+        ],
+        'DATABASES': {
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        'MIDDLEWARE': [
+            'django.contrib.sessions.middleware.SessionMiddleware',
+            'django.contrib.auth.middleware.AuthenticationMiddleware',
+            'django.contrib.messages.middleware.MessageMiddleware',
+        ],
+        'TEMPLATES': [
+            {
+                'BACKEND': 'django.template.backends.django.DjangoTemplates',
+                'APP_DIRS': True,
+                'OPTIONS': {
+                    'context_processors': [
+                        'django.template.context_processors.debug',
+                        'django.template.context_processors.request',
+                        'django.contrib.auth.context_processors.auth',
+                        'django.contrib.messages.context_processors.messages',
+                    ]
+                },
+            }
+        ],
+        'ROOT_URLCONF': 'fake_urls',
+        'SECRET_KEY': 'test',
+        'USE_I18N': False,
+        'USE_L10N': False,
+        'USE_TZ': False,
+        'TIME_ZONE': 'UTC',
+        'DEFAULT_AUTO_FIELD': 'django.db.models.AutoField',
+        'SILENCED_SYSTEM_CHECKS': ['urls.E007'],
+    }
+
+    if not settings.configured:
+        settings.configure(**TEST_SETTINGS)
+
+    import django
+    django.setup()
+
+    # Migrate built-in apps so auth, admin, etc. tables exist.
+    from django.core.management import call_command
+    call_command('migrate', interactive=False, verbosity=0)
+
+    from django.db import models, connection
+    from django.test import TestCase
+    from django.test.runner import DiscoverRunner
+    from django.contrib.auth.models import User, Permission
+    from django.contrib.contenttypes.models import ContentType
+
+    # Define ephemeral models
+    class Photo(models.Model):
+        class Meta:
+            app_label = 'testm2mpermission'
+
+    class Report(models.Model):
+        class Meta:
+            app_label = 'testm2mpermission'
+            # Ensure Django knows we want the 'view' permission
+            default_permissions = ('add', 'change', 'delete', 'view')
+
+        photos = models.ManyToManyField(Photo)
+
+    photo_table = Photo._meta.db_table
+    report_table = Report._meta.db_table
+    m2m_table = Report.photos.through._meta.db_table  # The actual M2M table name.
+
+    # Drop ephemeral tables if they exist, then create them anew
+    with connection.cursor() as c:
+        c.execute(f'DROP TABLE IF EXISTS "{m2m_table}"')
+        c.execute(f'DROP TABLE IF EXISTS "{photo_table}"')
+        c.execute(f'DROP TABLE IF EXISTS "{report_table}"')
+
+    with connection.schema_editor() as schema:
+        schema.create_model(Photo)
+        schema.create_model(Report)
+        # The M2M table is implicitly created for the "photos" field on Report.
+        # By this point, 'm2m_table' should exist again.
+
+    class M2MViewPermissionTest(TestCase):
+        @classmethod
+        def setUpTestData(cls):
+            cls.photo = Photo.objects.create()
+            cls.report = Report.objects.create()
+            cls.user = User.objects.create_user(username='viewuser', password='pass')
+
+            # Manually ensure 'view_report' permission exists
+            content_type = ContentType.objects.get_for_model(Report)
+            perm_view, _ = Permission.objects.get_or_create(
+                codename='view_report',
+                content_type=content_type,
+                defaults={'name': 'Can view report'},
+            )
+            cls.user.user_permissions.add(perm_view)
+
+        def test_m2m_cannot_be_modified_by_view_only(self):
+            self.client.logout()
+            logged_in = self.client.login(username='viewuser', password='pass')
+            self.assertTrue(logged_in, "Test user could not log in")
+
+            def get_m2m_count():
+                with connection.cursor() as cur:
+                    cur.execute(
+                        f'SELECT COUNT(*) FROM "{m2m_table}" WHERE report_id=%s AND photo_id=%s',
+                        [self.report.id, self.photo.id],
+                    )
+                    return cur.fetchone()[0]
+
+            initial_count = get_m2m_count()
+            try:
+                self.report.photos.add(self.photo)  # Bug: user only has "view" but can still add
+                new_count = get_m2m_count()
+                if new_count > initial_count:
+                    self.fail("User with only view permission was able to add M2M relation!")
+            except Exception:
+                # If code raises PermissionDenied or similar, it means the bug is fixed
+                pass
+
+    # Run tests
+    test_runner = DiscoverRunner(verbosity=2, interactive=False)
+    suite = unittest.TestLoader().loadTestsFromTestCase(M2MViewPermissionTest)
+    result = test_runner.run_suite(suite)
+
+    failures = len(result.failures) + len(result.errors)
+    sys.exit(bool(failures))
+
+if __name__ == '__main__':
+    main()
