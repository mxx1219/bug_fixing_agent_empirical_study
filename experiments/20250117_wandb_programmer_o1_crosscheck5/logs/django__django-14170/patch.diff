diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py
index 916478d075..933cae5efa 100644
--- a/django/db/models/lookups.py
+++ b/django/db/models/lookups.py
@@ -547,11 +547,9 @@ class YearLookup(Lookup):
         return bounds
 
     def as_sql(self, compiler, connection):
-        # Avoid the extract operation if the rhs is a direct value to allow
-        # indexes to be used.
-        if self.rhs_is_direct_value():
-            # Skip the extract part by directly using the originating field,
-            # that is self.lhs.lhs.
+        # Only do the direct BETWEEN approach for the actual "year" lookup,
+        # not for "iso_year."
+        if self.rhs_is_direct_value() and getattr(self.lhs, 'lookup_name', None) == 'year':
             lhs_sql, params = self.process_lhs(compiler, connection, self.lhs.lhs)
             rhs_sql, _ = self.process_rhs(compiler, connection)
             rhs_sql = self.get_direct_rhs_sql(connection, rhs_sql)
@@ -559,6 +557,7 @@ class YearLookup(Lookup):
             params.extend(self.get_bound_params(start, finish))
             return '%s %s' % (lhs_sql, rhs_sql), params
         return super().as_sql(compiler, connection)
+    
 
     def get_direct_rhs_sql(self, connection, rhs):
         return connection.operators[self.lookup_name] % rhs
diff --git a/test_iso_year_lookup.py b/test_iso_year_lookup.py
new file mode 100644
index 0000000000..56853564e0
--- /dev/null
+++ b/test_iso_year_lookup.py
@@ -0,0 +1,70 @@
+import sys
+import datetime
+import traceback
+
+def main():
+    print("Starting iso_year lookup test script...")
+
+    try:
+        import django
+        from django.conf import settings
+        from django.db import models, connection
+        from django.test.utils import setup_test_environment, teardown_test_environment
+        from django.db.models.functions import ExtractIsoYear
+
+        print("Configuring Django if not already configured...")
+        if not settings.configured:
+            settings.configure(
+                DEBUG=True,
+                DATABASES={
+                    'default': {
+                        'ENGINE': 'django.db.backends.sqlite3',
+                        'NAME': ':memory:',
+                    }
+                },
+                INSTALLED_APPS=['__main__'],
+                TIME_ZONE='UTC',
+                USE_TZ=True,
+            )
+
+        django.setup()
+        setup_test_environment()
+
+        class TModel(models.Model):
+            dt = models.DateTimeField()
+
+            class Meta:
+                app_label = '__main__'
+
+        with connection.schema_editor() as schema_editor:
+            schema_editor.create_model(TModel)
+
+        print("Populating database with test data ...")
+        # For ISO year 2020, it started on Monday, Dec 30, 2019, and it ends on Sunday, Jan 3, 2021.
+        # January 4, 2021 (a Monday) is the start of ISO year 2021.
+        TModel.objects.create(dt=datetime.datetime(2019, 12, 30, 12, 0, 0))
+        TModel.objects.create(dt=datetime.datetime(2020, 1, 1, 12, 0, 0))
+        # This next date is definitely in ISO year 2021
+        TModel.objects.create(dt=datetime.datetime(2021, 1, 4, 12, 0, 0))
+
+        print("Querying dt__iso_year=2020 ...")
+        results = list(TModel.objects.filter(dt__iso_year=2020))
+        total = len(results)
+        print(f"Returned {total} items for iso_year=2020.")
+        for r in results:
+            print(f"  dt={r.dt}")
+
+        # We now expect exactly 2 results (the first two).
+        if total == 2:
+            print("Success: iso_year=2020 returned 2 results - presumably correct.")
+            sys.exit(0)
+        else:
+            print("Failure: iso_year=2020 returned", total, "results - bug likely persists.")
+            sys.exit(1)
+
+    except Exception:
+        traceback.print_exc()
+        sys.exit(1)
+
+if __name__ == "__main__":
+    main()
diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py
index 258600127f..02175a2e54 100644
--- a/tests/db_functions/datetime/test_extract_trunc.py
+++ b/tests/db_functions/datetime/test_extract_trunc.py
@@ -95,6 +95,12 @@ class DateFunctionTests(TestCase):
         Extract year uses a BETWEEN filter to compare the year to allow indexes
         to be used.
         """
+        from django.conf import settings
+        from django.db.models.functions import ExtractYear
+        from django.db.models import F
+        from datetime import datetime
+        from django.utils import timezone
+    
         start_datetime = datetime(2015, 6, 15, 14, 10)
         end_datetime = datetime(2016, 6, 15, 14, 10)
         if settings.USE_TZ:
@@ -102,9 +108,10 @@ class DateFunctionTests(TestCase):
             end_datetime = timezone.make_aware(end_datetime, is_dst=False)
         self.create_model(start_datetime, end_datetime)
         self.create_model(end_datetime, start_datetime)
-
-        for lookup in ('year', 'iso_year'):
-            with self.subTest(lookup):
+    
+        # Only test 'year' here. 'iso_year' is tested separately.
+        for lookup in ('year',):
+            with self.subTest(lookup=lookup):
                 qs = DTModel.objects.filter(**{'start_datetime__%s__exact' % lookup: 2015})
                 self.assertEqual(qs.count(), 1)
                 query_string = str(qs.query).lower()
@@ -130,8 +137,15 @@ class DateFunctionTests(TestCase):
                 query_string = str(qs.query).lower()
                 self.assertEqual(query_string.count(' between '), 0)
                 self.assertEqual(query_string.count('extract'), 3)
+    
 
     def test_extract_year_greaterthan_lookup(self):
+        from django.conf import settings
+        from django.db.models.functions import ExtractYear
+        from django.db.models import F
+        from datetime import datetime
+        from django.utils import timezone
+    
         start_datetime = datetime(2015, 6, 15, 14, 10)
         end_datetime = datetime(2016, 6, 15, 14, 10)
         if settings.USE_TZ:
@@ -139,9 +153,10 @@ class DateFunctionTests(TestCase):
             end_datetime = timezone.make_aware(end_datetime, is_dst=False)
         self.create_model(start_datetime, end_datetime)
         self.create_model(end_datetime, start_datetime)
-
-        for lookup in ('year', 'iso_year'):
-            with self.subTest(lookup):
+    
+        # Only test 'year' here. 'iso_year' is tested in test_extract_iso_year_func.
+        for lookup in ('year',):
+            with self.subTest(lookup=lookup):
                 qs = DTModel.objects.filter(**{'start_datetime__%s__gt' % lookup: 2015})
                 self.assertEqual(qs.count(), 1)
                 self.assertEqual(str(qs.query).lower().count('extract'), 0)
@@ -153,8 +168,15 @@ class DateFunctionTests(TestCase):
                 ).filter(**{'end_datetime__%s__gte' % lookup: F('start_year')})
                 self.assertEqual(qs.count(), 1)
                 self.assertGreaterEqual(str(qs.query).lower().count('extract'), 2)
+    
 
     def test_extract_year_lessthan_lookup(self):
+        from django.conf import settings
+        from django.db.models.functions import ExtractYear
+        from django.db.models import F
+        from datetime import datetime
+        from django.utils import timezone
+    
         start_datetime = datetime(2015, 6, 15, 14, 10)
         end_datetime = datetime(2016, 6, 15, 14, 10)
         if settings.USE_TZ:
@@ -162,9 +184,10 @@ class DateFunctionTests(TestCase):
             end_datetime = timezone.make_aware(end_datetime, is_dst=False)
         self.create_model(start_datetime, end_datetime)
         self.create_model(end_datetime, start_datetime)
-
-        for lookup in ('year', 'iso_year'):
-            with self.subTest(lookup):
+    
+        # Only test 'year' here. 'iso_year' is tested in test_extract_iso_year_func.
+        for lookup in ('year',):
+            with self.subTest(lookup=lookup):
                 qs = DTModel.objects.filter(**{'start_datetime__%s__lt' % lookup: 2016})
                 self.assertEqual(qs.count(), 1)
                 self.assertEqual(str(qs.query).count('extract'), 0)
@@ -176,6 +199,7 @@ class DateFunctionTests(TestCase):
                 ).filter(**{'start_datetime__%s__lte' % lookup: F('end_year')})
                 self.assertEqual(qs.count(), 1)
                 self.assertGreaterEqual(str(qs.query).lower().count('extract'), 2)
+    
 
     def test_extract_func(self):
         start_datetime = datetime(2015, 6, 15, 14, 30, 50, 321)
