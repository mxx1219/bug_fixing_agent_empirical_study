diff --git a/django/forms/fields.py b/django/forms/fields.py
index 65d6a9ec82..855dd7528e 100644
--- a/django/forms/fields.py
+++ b/django/forms/fields.py
@@ -1012,23 +1012,34 @@ class MultiValueField(Field):
         """
         Validate every value in the given list. A value is validated against
         the corresponding Field in self.fields.
-
+    
         For example, if this MultiValueField was instantiated with
         fields=(DateField(), TimeField()), clean() would call
         DateField.clean(value[0]) and TimeField.clean(value[1]).
         """
         clean_data = []
         errors = []
+        # Decompress the value if disabled, so it's always a list-like
         if self.disabled and not isinstance(value, list):
             value = self.widget.decompress(value)
-        if not value or isinstance(value, (list, tuple)):
-            if not value or not [v for v in value if v not in self.empty_values]:
-                if self.required:
-                    raise ValidationError(self.error_messages['required'], code='required')
-                else:
-                    return self.compress([])
-        else:
+    
+        # Ensure value is a list or tuple.
+        if not isinstance(value, (list, tuple)):
             raise ValidationError(self.error_messages['invalid'], code='invalid')
+    
+        # Check if the entire field is empty (all empty sub-values).
+        is_all_empty = not value or not any(v not in self.empty_values for v in value)
+    
+        # If all subfields are empty:
+        if is_all_empty:
+            # If the MultiValueField itself is required, raise the usual "required" error.
+            if self.required:
+                raise ValidationError(self.error_messages['required'], code='required')
+            # Otherwise, if no subfield is individually required, short-circuit as valid.
+            elif not any(f.required for f in self.fields):
+                return self.compress([])
+    
+        # Otherwise, proceed per subfield.
         for i, field in enumerate(self.fields):
             try:
                 field_value = value[i]
@@ -1036,31 +1047,27 @@ class MultiValueField(Field):
                 field_value = None
             if field_value in self.empty_values:
                 if self.require_all_fields:
-                    # Raise a 'required' error if the MultiValueField is
-                    # required and any field is empty.
+                    # Raise a 'required' error if the MultiValueField is required and any field is empty.
                     if self.required:
                         raise ValidationError(self.error_messages['required'], code='required')
                 elif field.required:
-                    # Otherwise, add an 'incomplete' error to the list of
-                    # collected errors and skip field cleaning, if a required
-                    # field is empty.
+                    # Add an 'incomplete' error if a required subfield is empty.
                     if field.error_messages['incomplete'] not in errors:
                         errors.append(field.error_messages['incomplete'])
                     continue
             try:
                 clean_data.append(field.clean(field_value))
             except ValidationError as e:
-                # Collect all validation errors in a single list, which we'll
-                # raise at the end of clean(), rather than raising a single
-                # exception for the first error we encounter. Skip duplicates.
+                # Collect all validation errors in a single list
                 errors.extend(m for m in e.error_list if m not in errors)
         if errors:
             raise ValidationError(errors)
-
+    
         out = self.compress(clean_data)
         self.validate(out)
         self.run_validators(out)
         return out
+    
 
     def compress(self, data_list):
         """
diff --git a/test_multi_value_field_fix.py b/test_multi_value_field_fix.py
new file mode 100644
index 0000000000..55dc18a18e
--- /dev/null
+++ b/test_multi_value_field_fix.py
@@ -0,0 +1,63 @@
+#!/usr/bin/env python
+
+import sys
+import django
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY="test-key",
+        ALLOWED_HOSTS=["*"],
+    )
+django.setup()
+
+from django import forms
+
+class MF(forms.MultiValueField):
+    def __init__(self):
+        fields = [
+            forms.CharField(required=False),
+            forms.CharField(required=True),
+        ]
+        widgets = [
+            fields[0].widget,
+            fields[1].widget,
+        ]
+        super().__init__(
+            fields=fields,
+            widget=forms.MultiWidget(widgets=widgets),
+            require_all_fields=False,
+            required=False,
+        )
+
+    def compress(self, data_list):
+        return data_list
+
+class F(forms.Form):
+    mf = MF()
+
+print("Test script for MultiValueField bug...")
+
+# Test 1: Both subfields empty
+form1 = F({'mf_0': '', 'mf_1': ''})
+is_valid1 = form1.is_valid()
+print("Scenario 1: Both empty => is_valid =", is_valid1)
+if is_valid1:
+    print("ERROR: Expected is_valid() to be False but got True.")
+    sys.exit(1)
+else:
+    print("OK: Received is_valid() == False as expected.")
+
+# Test 2: One subfield is empty, other non-empty
+form2 = F({'mf_0': 'xxx', 'mf_1': ''})
+is_valid2 = form2.is_valid()
+print("Scenario 2: First subfield non-empty, second empty => is_valid =", is_valid2)
+if is_valid2:
+    print("ERROR: Expected is_valid() to be False but got True.")
+    sys.exit(1)
+else:
+    print("OK: Received is_valid() == False as expected.")
+
+print("All checks passed for the expected bug behavior. If you are seeing this test pass on HEAD, that means HEAD is already fixed or you do NOT exhibit the bug.")
+sys.exit(0)
