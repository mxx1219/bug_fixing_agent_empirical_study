diff --git a/django/template/library.py b/django/template/library.py
index 20bc86dac8..20fbb567d7 100644
--- a/django/template/library.py
+++ b/django/template/library.py
@@ -242,41 +242,43 @@ def parse_bits(parser, bits, params, varargs, varkw, defaults,
     keyword arguments.
     """
     if takes_context:
-        if params[0] == 'context':
+        if params and params[0] == 'context':
             params = params[1:]
         else:
             raise TemplateSyntaxError(
                 "'%s' is decorated with takes_context=True so it must "
-                "have a first argument of 'context'" % name)
+                "have a first argument of 'context'" % name
+            )
     args = []
     kwargs = {}
     unhandled_params = list(params)
-    unhandled_kwargs = [
-        kwarg for kwarg in kwonly
-        if not kwonly_defaults or kwarg not in kwonly_defaults
-    ]
+    # Always include kwonly args, remove defaulted ones later if not supplied
+    unhandled_kwargs = list(kwonly)
+
     for bit in bits:
         # First we try to extract a potential kwarg from the bit
         kwarg = token_kwargs([bit], parser)
         if kwarg:
             # The kwarg was successfully extracted
             param, value = kwarg.popitem()
-            if param not in params and param not in unhandled_kwargs and varkw is None:
-                # An unexpected keyword argument was supplied
-                raise TemplateSyntaxError(
-                    "'%s' received unexpected keyword argument '%s'" %
-                    (name, param))
-            elif param in kwargs:
+            # Check "already supplied" first
+            if param in kwargs:
                 # The keyword argument has already been supplied once
                 raise TemplateSyntaxError(
-                    "'%s' received multiple values for keyword argument '%s'" %
-                    (name, param))
+                    "'%s' received multiple values for keyword argument '%s'"
+                    % (name, param)
+                )
+            elif param not in params and param not in unhandled_kwargs and varkw is None:
+                # An unexpected keyword argument was supplied
+                raise TemplateSyntaxError(
+                    "'%s' received unexpected keyword argument '%s'"
+                    % (name, param)
+                )
             else:
                 # All good, record the keyword argument
                 kwargs[str(param)] = value
                 if param in unhandled_params:
-                    # If using the keyword syntax for a positional arg, then
-                    # consume it.
+                    # If using the keyword syntax for a positional arg, then consume it.
                     unhandled_params.remove(param)
                 elif param in unhandled_kwargs:
                     # Same for keyword-only arguments
@@ -285,7 +287,8 @@ def parse_bits(parser, bits, params, varargs, varkw, defaults,
             if kwargs:
                 raise TemplateSyntaxError(
                     "'%s' received some positional argument(s) after some "
-                    "keyword argument(s)" % name)
+                    "keyword argument(s)" % name
+                )
             else:
                 # Record the positional argument
                 args.append(parser.compile_filter(bit))
@@ -295,20 +298,30 @@ def parse_bits(parser, bits, params, varargs, varkw, defaults,
                 except IndexError:
                     if varargs is None:
                         raise TemplateSyntaxError(
-                            "'%s' received too many positional arguments" %
-                            name)
+                            "'%s' received too many positional arguments" % name
+                        )
     if defaults is not None:
-        # Consider the last n params handled, where n is the
-        # number of defaults.
+        # Consider the last n params handled, where n is the number of defaults.
         unhandled_params = unhandled_params[:-len(defaults)]
+    # Remove any kwonly arguments that have defaults
+    if kwonly_defaults:
+        for k in kwonly_defaults:
+            if k in unhandled_kwargs:
+                unhandled_kwargs.remove(k)
     if unhandled_params or unhandled_kwargs:
-        # Some positional arguments were not supplied
+        # Some arguments were not supplied
         raise TemplateSyntaxError(
-            "'%s' did not receive value(s) for the argument(s): %s" %
-            (name, ", ".join("'%s'" % p for p in unhandled_params + unhandled_kwargs)))
+            "'%s' did not receive value(s) for the argument(s): %s"
+            % (
+                name,
+                ", ".join("'%s'" % p for p in unhandled_params + unhandled_kwargs),
+            )
+        )
     return args, kwargs
 
 
+
+
 def import_library(name):
     """
     Load a Library object from a template tag module.
diff --git a/test_kwonly.py b/test_kwonly.py
new file mode 100644
index 0000000000..f04925cb1a
--- /dev/null
+++ b/test_kwonly.py
@@ -0,0 +1,51 @@
+import sys
+from django.template import Template, Context, Engine
+from django.template.exceptions import TemplateSyntaxError
+from django.template.library import Library
+
+def main():
+    print("Running kwonly argument test...")
+    register = Library()
+
+    @register.simple_tag
+    def hello(*, greeting='hello'):
+        return f"{greeting} world"
+
+    engine = Engine(debug=True)
+    # Instead of register_library() (which doesn't exist), manually insert our library:
+    engine.template_libraries["testlib"] = register
+
+    # Test 1: Provide greeting='hi' (should render "hi world" if fixed, otherwise error)
+    print("Test 1: Single greeting kwarg")
+    try:
+        template = engine.from_string("{% load testlib %}{% hello greeting='hi' %}")
+        output = template.render(Context({}))
+        print(f"Template output: '{output}'")
+        if output.strip() == "hi world":
+            print("Test 1 PASSED: got 'hi world'")
+        else:
+            print("Test 1 FAILED: expected 'hi world' but got something else.")
+            sys.exit(1)
+    except TemplateSyntaxError as e:
+        print(f"Test 1 FAILED: got TemplateSyntaxError: {e}")
+        sys.exit(1)
+
+    # Test 2: Provide greeting twice, expect 'received multiple values' error message
+    print("Test 2: Repeated greeting kwarg")
+    try:
+        _ = engine.from_string("{% load testlib %}{% hello greeting='hi' greeting='hello' %}")
+        print("Test 2 FAILED: repeated greeting did not raise any error.")
+        sys.exit(1)
+    except TemplateSyntaxError as e:
+        print(f"Caught TemplateSyntaxError: '{e}'")
+        # Must contain 'received multiple values for keyword argument'
+        if "received multiple values for keyword argument 'greeting'" in str(e):
+            print("Test 2 PASSED: correct error message.")
+        else:
+            print("Test 2 FAILED: wrong error message.")
+            sys.exit(1)
+
+    sys.exit(0)
+
+if __name__ == "__main__":
+    main()
