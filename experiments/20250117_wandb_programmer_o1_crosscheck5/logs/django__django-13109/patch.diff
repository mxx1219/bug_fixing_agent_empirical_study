diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py
index d517d7269b..64aa393635 100644
--- a/django/db/models/fields/related.py
+++ b/django/db/models/fields/related.py
@@ -912,9 +912,9 @@ class ForeignKey(ForeignObject):
         super().validate(value, model_instance)
         if value is None:
             return
-
+    
         using = router.db_for_read(self.remote_field.model, instance=model_instance)
-        qs = self.remote_field.model._default_manager.using(using).filter(
+        qs = self.remote_field.model._base_manager.using(using).filter(
             **{self.remote_field.field_name: value}
         )
         qs = qs.complex_filter(self.get_limit_choices_to())
@@ -923,10 +923,13 @@ class ForeignKey(ForeignObject):
                 self.error_messages['invalid'],
                 code='invalid',
                 params={
-                    'model': self.remote_field.model._meta.verbose_name, 'pk': value,
-                    'field': self.remote_field.field_name, 'value': value,
+                    'model': self.remote_field.model._meta.verbose_name,
+                    'pk': value,
+                    'field': self.remote_field.field_name,
+                    'value': value,
                 },  # 'pk' is included for backwards compatibility
             )
+    
 
     def resolve_related_fields(self):
         related_fields = super().resolve_related_fields()
diff --git a/test_foreignkey_base_manager.py b/test_foreignkey_base_manager.py
new file mode 100644
index 0000000000..7a248d7819
--- /dev/null
+++ b/test_foreignkey_base_manager.py
@@ -0,0 +1,89 @@
+import sys
+import traceback
+import django
+from django.conf import settings
+from django.db import models, connection
+from django import forms
+
+def main():
+    print("Step 1: Configure Django settings in-memory.")
+    if not settings.configured:
+        settings.configure(
+            INSTALLED_APPS=[
+                "django.contrib.auth",
+                "django.contrib.contenttypes",
+                # We'll just register our main module as an app:
+                "__main__",
+            ],
+            DATABASES={
+                "default": {
+                    "ENGINE": "django.db.backends.sqlite3",
+                    "NAME": ":memory:",
+                }
+            },
+            SECRET_KEY="test_secret_key",
+        )
+
+    print("Step 2: Setup Django.")
+    django.setup()
+
+    print("Step 3: Define our models and form.")
+    class ArticleManager(models.Manager):
+        def get_queryset(self):
+            qs = super().get_queryset()
+            return qs.filter(archived=False)
+
+    class Article(models.Model):
+        title = models.CharField(max_length=100)
+        archived = models.BooleanField(default=False)
+        objects = ArticleManager()
+
+        class Meta:
+            app_label = "__main__"
+
+    class FavoriteArticle(models.Model):
+        article = models.ForeignKey(Article, on_delete=models.CASCADE)
+
+        class Meta:
+            app_label = "__main__"
+
+    class FavoriteArticleForm(forms.ModelForm):
+        class Meta:
+            model = FavoriteArticle
+            fields = "__all__"
+
+        def __init__(self, *args, **kwargs):
+            super().__init__(*args, **kwargs)
+            # Use base_manager to include archived objects
+            self.fields["article"].queryset = Article._base_manager.all()
+
+    print("Step 4: Create the in-memory tables.")
+    with connection.schema_editor() as se:
+        se.create_model(Article)
+        se.create_model(FavoriteArticle)
+
+    print("Step 5: Create an archived article.")
+    archived_article = Article.objects.create(title="Archived Article", archived=True)
+    print(f"Created archived article with pk={archived_article.pk}, archived={archived_article.archived}")
+
+    print("Step 6: Bind a form to data referencing the archived article.")
+    form_data = {"article": archived_article.pk}
+    form = FavoriteArticleForm(data=form_data)
+
+    print("Step 7: Validate the form and check if it is valid.")
+    if form.is_valid():
+        print("Form is VALID. (This would indicate the bug is fixed.)")
+        print("Exiting with code 0.")
+        sys.exit(0)
+    else:
+        print("Form is INVALID. (Demonstrates the bug on unpatched code.)")
+        print("Errors:", form.errors)
+        print("Exiting with code 1.")
+        sys.exit(1)
+
+if __name__ == "__main__":
+    try:
+        main()
+    except Exception:
+        traceback.print_exc()
+        sys.exit(1)
