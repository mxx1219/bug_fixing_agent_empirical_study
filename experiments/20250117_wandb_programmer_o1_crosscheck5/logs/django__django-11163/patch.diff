diff --git a/django/forms/models.py b/django/forms/models.py
index d157c291ef..cb122917d1 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -78,12 +78,13 @@ def model_to_dict(instance, fields=None, exclude=None):
     named from the returned dict, even if they are listed in the ``fields``
     argument.
     """
+    from itertools import chain
     opts = instance._meta
     data = {}
     for f in chain(opts.concrete_fields, opts.private_fields, opts.many_to_many):
         if not getattr(f, 'editable', False):
             continue
-        if fields and f.name not in fields:
+        if fields is not None and f.name not in fields:
             continue
         if exclude and f.name in exclude:
             continue
@@ -91,6 +92,7 @@ def model_to_dict(instance, fields=None, exclude=None):
     return data
 
 
+
 def apply_limit_choices_to_to_formfield(formfield):
     """Apply limit_choices_to to the formfield's queryset if needed."""
     if hasattr(formfield, 'queryset') and hasattr(formfield, 'get_limit_choices_to'):
diff --git a/test_model_to_dict_bug.py b/test_model_to_dict_bug.py
new file mode 100644
index 0000000000..21cca167a8
--- /dev/null
+++ b/test_model_to_dict_bug.py
@@ -0,0 +1,45 @@
+import sys
+import django
+from django.conf import settings
+from django.db import models
+
+def main():
+    print("Starting test script for model_to_dict with empty fields list bug")
+
+    if not settings.configured:
+        settings.configure(
+            INSTALLED_APPS=[
+                "django.contrib.contenttypes",
+            ],
+            DATABASES={
+                "default": {
+                    "ENGINE": "django.db.backends.sqlite3",
+                    "NAME": ":memory:",
+                }
+            },
+            SECRET_KEY="testkey",
+            MIGRATION_MODULES={"test_model_to_dict_bug": None},
+        )
+    django.setup()
+
+    class MyModel(models.Model):
+        name = models.CharField(max_length=100)
+        class Meta:
+            app_label = "test_model_to_dict_bug"
+            managed = True
+
+    from django.forms.models import model_to_dict
+
+    instance = MyModel(name="TestName")
+    data = model_to_dict(instance, fields=[])
+
+    print(f"model_to_dict with fields=[] returned: {data}")
+    if data == {}:
+        print("Bug is fixed or absent. Exiting with code 0.")
+        sys.exit(0)
+    else:
+        print("Bug is present (dict is not empty). Exiting with code 1.")
+        sys.exit(1)
+
+if __name__ == "__main__":
+    main()
