diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index caa03665ea..34f82189d5 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -1765,15 +1765,24 @@ class IntegerField(Field):
         return validators_
 
     def get_prep_value(self, value):
+        from django.utils.functional import SimpleLazyObject
         value = super().get_prep_value(value)
+        # If it's a SimpleLazyObject, unwrap first.
+        if isinstance(value, SimpleLazyObject):
+            # Accessing _wrapped triggers setup if it's not set yet.
+            value = value._wrapped
+        # If the unwrapped value is a model instance, use its pk.
+        if hasattr(value, 'pk'):
+            value = value.pk
         if value is None:
             return None
         try:
             return int(value)
         except (TypeError, ValueError) as e:
             raise e.__class__(
-                "Field '%s' expected a number but got %r." % (self.name, value),
+                f"Field '{self.name}' expected a number but got {value!r}.",
             ) from e
+    
 
     def get_internal_type(self):
         return "IntegerField"
diff --git a/mytestapp/__init__.py b/mytestapp/__init__.py
new file mode 100644
index 0000000000..1af402b47c
--- /dev/null
+++ b/mytestapp/__init__.py
@@ -0,0 +1 @@
+# Empty __init__.py to make this directory a Python package
diff --git a/mytestapp/models.py b/mytestapp/models.py
new file mode 100644
index 0000000000..91fa4416de
--- /dev/null
+++ b/mytestapp/models.py
@@ -0,0 +1,16 @@
+from django.db import models
+from django.contrib.auth.models import User
+
+class A(models.Model):
+    class Meta:
+        app_label = 'mytestapp'
+
+class B(models.Model):
+    a = models.ForeignKey(A, on_delete=models.CASCADE)
+    class Meta:
+        app_label = 'mytestapp'
+
+class C(models.Model):
+    owner = models.ForeignKey(User, on_delete=models.CASCADE)
+    class Meta:
+        app_label = 'mytestapp'
diff --git a/mytestapp/tests.py b/mytestapp/tests.py
new file mode 100644
index 0000000000..a7854072a4
--- /dev/null
+++ b/mytestapp/tests.py
@@ -0,0 +1,17 @@
+from django.test import TestCase
+from django.db.models import Subquery, OuterRef
+from django.utils.functional import SimpleLazyObject
+from django.contrib.auth.models import User
+
+from .models import A, B, C
+
+class LazySubqueryTest(TestCase):
+    def test_subquery_with_simplelazyobject(self):
+        user = SimpleLazyObject(lambda: User.objects.create_user(username="test_user", password="pass"))
+        A.objects.create()  # create at least one A
+        owner_user_subq = B.objects.filter(a=OuterRef("pk")).annotate(
+            owner_user=Subquery(C.objects.values("owner"))
+        ).values("owner_user")
+        qs = A.objects.annotate(owner_user=Subquery(owner_user_subq))
+        # This triggered TypeError on HEAD, but should pass with our fix
+        list(qs.filter(owner_user=user))
diff --git a/test_simplelazy_subquery.py b/test_simplelazy_subquery.py
new file mode 100644
index 0000000000..92d1cda369
--- /dev/null
+++ b/test_simplelazy_subquery.py
@@ -0,0 +1,36 @@
+#!/usr/bin/env python
+import sys
+import django
+from django.conf import settings
+
+SETTINGS_DICT = {
+    "INSTALLED_APPS": [
+        "django.contrib.auth",
+        "django.contrib.contenttypes",
+        "mytestapp",
+    ],
+    "DATABASES": {
+        "default": {
+            "ENGINE": "django.db.backends.sqlite3",
+            "NAME": ":memory:",
+        }
+    },
+    # Skip migrations for mytestapp
+    "MIGRATION_MODULES": {"mytestapp": None},
+    "USE_TZ": False,
+    "SECRET_KEY": "test",
+}
+
+if not settings.configured:
+    settings.configure(**SETTINGS_DICT)
+django.setup()
+
+def run_tests():
+    from django.test.runner import DiscoverRunner
+    runner = DiscoverRunner(verbosity=2, interactive=False)
+    failures = runner.run_tests(["mytestapp"])
+    return failures
+
+if __name__ == "__main__":
+    failures = run_tests()
+    sys.exit(bool(failures))
