diff --git a/django/forms/widgets.py b/django/forms/widgets.py
index 6fe220bea7..0137495280 100644
--- a/django/forms/widgets.py
+++ b/django/forms/widgets.py
@@ -521,11 +521,12 @@ class CheckboxInput(Input):
         return str(value)
 
     def get_context(self, name, value, attrs):
+        # Make a local copy so we don't permanently mutate the original attrs
+        final_attrs = attrs.copy() if attrs else {}
         if self.check_test(value):
-            if attrs is None:
-                attrs = {}
-            attrs['checked'] = True
-        return super().get_context(name, value, attrs)
+            final_attrs['checked'] = True
+        return super().get_context(name, value, final_attrs)
+    
 
     def value_from_datadict(self, data, files, name):
         if name not in data:
diff --git a/test_checkbox_persistent_attrs.py b/test_checkbox_persistent_attrs.py
new file mode 100644
index 0000000000..bf38db3b7f
--- /dev/null
+++ b/test_checkbox_persistent_attrs.py
@@ -0,0 +1,27 @@
+import sys
+from django.forms.widgets import CheckboxInput
+
+def main():
+    # Simulates multiple uses of one CheckboxInput with a shared attrs dict.
+    check = CheckboxInput()
+    values = [True, False, True, False]
+    results = []
+    global_attrs = {}  # The same attrs passed each time - triggers the bug
+    for i, val in enumerate(values):
+        context = check.get_context("mybool_%d" % i, val, global_attrs)
+        is_checked = "checked" in context["widget"]["attrs"]
+        results.append(is_checked)
+
+    print("results are:", results)
+    # If bug is present, once it sees a True, all subsequent results become True.
+    # Expected correct behavior is [True, False, True, False].
+    expected = [True, False, True, False]
+    if results == expected:
+        print("Test passed!")
+        sys.exit(0)
+    else:
+        print("Test failed - expected", expected, "got", results)
+        sys.exit(1)
+
+if __name__ == "__main__":
+    main()
