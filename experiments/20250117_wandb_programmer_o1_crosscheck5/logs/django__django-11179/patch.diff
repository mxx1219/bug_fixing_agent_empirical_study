diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py
index 92fe4affb9..5353d10ade 100644
--- a/django/db/models/deletion.py
+++ b/django/db/models/deletion.py
@@ -263,22 +263,23 @@ class Collector:
         # sort instance collections
         for model, instances in self.data.items():
             self.data[model] = sorted(instances, key=attrgetter("pk"))
-
+    
         # if possible, bring the models in an order suitable for databases that
         # don't support transactions or cannot defer constraint checks until the
         # end of a transaction.
         self.sort()
         # number of objects deleted for each model label
         deleted_counter = Counter()
-
+    
         # Optimize for the case with a single obj and no dependencies
         if len(self.data) == 1 and len(instances) == 1:
             instance = list(instances)[0]
             if self.can_fast_delete(instance):
                 with transaction.mark_for_rollback_on_error():
                     count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)
+                setattr(instance, model._meta.pk.attname, None)
                 return count, {model._meta.label: count}
-
+    
         with transaction.atomic(using=self.using, savepoint=False):
             # send pre_delete signals
             for model, obj in self.instances_with_model():
@@ -286,36 +287,36 @@ class Collector:
                     signals.pre_delete.send(
                         sender=model, instance=obj, using=self.using
                     )
-
+    
             # fast deletes
             for qs in self.fast_deletes:
                 count = qs._raw_delete(using=self.using)
                 deleted_counter[qs.model._meta.label] += count
-
+    
             # update fields
             for model, instances_for_fieldvalues in self.field_updates.items():
                 for (field, value), instances in instances_for_fieldvalues.items():
                     query = sql.UpdateQuery(model)
                     query.update_batch([obj.pk for obj in instances],
                                        {field.name: value}, self.using)
-
+    
             # reverse instance collections
             for instances in self.data.values():
                 instances.reverse()
-
+    
             # delete instances
             for model, instances in self.data.items():
                 query = sql.DeleteQuery(model)
                 pk_list = [obj.pk for obj in instances]
                 count = query.delete_batch(pk_list, self.using)
                 deleted_counter[model._meta.label] += count
-
+    
                 if not model._meta.auto_created:
                     for obj in instances:
                         signals.post_delete.send(
                             sender=model, instance=obj, using=self.using
                         )
-
+    
         # update collected instances
         for instances_for_fieldvalues in self.field_updates.values():
             for (field, value), instances in instances_for_fieldvalues.items():
@@ -325,3 +326,4 @@ class Collector:
             for instance in instances:
                 setattr(instance, model._meta.pk.attname, None)
         return sum(deleted_counter.values()), dict(deleted_counter)
+    
diff --git a/test_pk_delete.py b/test_pk_delete.py
new file mode 100644
index 0000000000..d3d1ba17cd
--- /dev/null
+++ b/test_pk_delete.py
@@ -0,0 +1,47 @@
+import sys
+import django
+import traceback
+from django.conf import settings
+from django.db import models, connection
+
+print("Starting test script to verify if PK is cleared after delete with no dependencies.")
+try:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:'
+            }
+        },
+        INSTALLED_APPS=[],
+        SECRET_KEY='test_secret_key'
+    )
+    django.setup()
+
+    class MyTestModel(models.Model):
+        name = models.CharField(max_length=100)
+
+        class Meta:
+            app_label = '__main__'  # no dependencies
+
+    # Create table.
+    with connection.schema_editor() as editor:
+        editor.create_model(MyTestModel)
+
+    # Create a model instance and delete it.
+    obj = MyTestModel.objects.create(name='TestObj')
+    print(f"Created object with PK={obj.pk}")
+
+    obj.delete()
+    print(f"Object PK after delete: {obj.pk}")
+    if obj.pk is not None:
+        print("FAIL: PK is not cleared after .delete()")
+        sys.exit(1)
+    else:
+        print("PASS: PK is None after .delete()")
+        sys.exit(0)
+
+except Exception as e:
+    print("ERROR during test execution!")
+    traceback.print_exc()
+    sys.exit(2)
