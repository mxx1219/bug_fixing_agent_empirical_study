diff --git a/django/db/backends/sqlite3/operations.py b/django/db/backends/sqlite3/operations.py
index bb84d52071..459b37152e 100644
--- a/django/db/backends/sqlite3/operations.py
+++ b/django/db/backends/sqlite3/operations.py
@@ -413,17 +413,17 @@ class DatabaseOperations(BaseDatabaseOperations):
         return "RETURNING %s" % ", ".join(columns), ()
 
     def on_conflict_suffix_sql(self, fields, on_conflict, update_fields, unique_fields):
+        from django.db.models.constants import OnConflict
         if (
             on_conflict == OnConflict.UPDATE
             and self.connection.features.supports_update_conflicts_with_target
         ):
+            # update_fields and unique_fields are Field objects, so use f.column
             return "ON CONFLICT(%s) DO UPDATE SET %s" % (
-                ", ".join(map(self.quote_name, unique_fields)),
+                ", ".join(self.quote_name(f.column) for f in unique_fields),
                 ", ".join(
-                    [
-                        f"{field} = EXCLUDED.{field}"
-                        for field in map(self.quote_name, update_fields)
-                    ]
+                    f"{self.quote_name(f.column)} = EXCLUDED.{self.quote_name(f.column)}"
+                    for f in update_fields
                 ),
             )
         return super().on_conflict_suffix_sql(
@@ -432,3 +432,4 @@ class DatabaseOperations(BaseDatabaseOperations):
             update_fields,
             unique_fields,
         )
+    
diff --git a/django/db/models/query.py b/django/db/models/query.py
index be8580f2c4..de3817f757 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -689,16 +689,15 @@ class QuerySet(AltersData):
         self, ignore_conflicts, update_conflicts, update_fields, unique_fields
     ):
         if ignore_conflicts and update_conflicts:
-            raise ValueError(
-                "ignore_conflicts and update_conflicts are mutually exclusive."
-            )
+            raise ValueError("ignore_conflicts and update_conflicts are mutually exclusive.")
         db_features = connections[self.db].features
         if ignore_conflicts:
             if not db_features.supports_ignore_conflicts:
                 raise NotSupportedError(
                     "This database backend does not support ignoring conflicts."
                 )
-            return OnConflict.IGNORE
+            # Return the triple. Just pass update_fields and unique_fields unmodified here.
+            return (OnConflict.IGNORE, update_fields, unique_fields)
         elif update_conflicts:
             if not db_features.supports_update_conflicts:
                 raise NotSupportedError(
@@ -712,36 +711,32 @@ class QuerySet(AltersData):
             if unique_fields and not db_features.supports_update_conflicts_with_target:
                 raise NotSupportedError(
                     "This database backend does not support updating "
-                    "conflicts with specifying unique fields that can trigger "
-                    "the upsert."
+                    "conflicts with specifying unique fields that can "
+                    "trigger the upsert."
                 )
             if not unique_fields and db_features.supports_update_conflicts_with_target:
                 raise ValueError(
                     "Unique fields that can trigger the upsert must be provided."
                 )
-            # Updating primary keys and non-concrete fields is forbidden.
+            # Convert update_fields and unique_fields into Field objects.
             update_fields = [self.model._meta.get_field(name) for name in update_fields]
             if any(not f.concrete or f.many_to_many for f in update_fields):
                 raise ValueError(
-                    "bulk_create() can only be used with concrete fields in "
-                    "update_fields."
+                    "bulk_create() can only be used with concrete fields in update_fields."
                 )
             if any(f.primary_key for f in update_fields):
                 raise ValueError(
-                    "bulk_create() cannot be used with primary keys in "
-                    "update_fields."
+                    "bulk_create() cannot be used with primary keys in update_fields."
                 )
             if unique_fields:
-                unique_fields = [
-                    self.model._meta.get_field(name) for name in unique_fields
-                ]
+                unique_fields = [self.model._meta.get_field(name) for name in unique_fields]
                 if any(not f.concrete or f.many_to_many for f in unique_fields):
                     raise ValueError(
-                        "bulk_create() can only be used with concrete fields "
-                        "in unique_fields."
+                        "bulk_create() can only be used with concrete fields in unique_fields."
                     )
-            return OnConflict.UPDATE
-        return None
+            return (OnConflict.UPDATE, update_fields, unique_fields)
+        return (None, update_fields, unique_fields)
+    
 
     def bulk_create(
         self,
@@ -759,21 +754,9 @@ class QuerySet(AltersData):
         autoincrement field (except if features.can_return_rows_from_bulk_insert=True).
         Multi-table models are not supported.
         """
-        # When you bulk insert you don't get the primary keys back (if it's an
-        # autoincrement, except if can_return_rows_from_bulk_insert=True), so
-        # you can't insert into the child tables which references this. There
-        # are two workarounds:
-        # 1) This could be implemented if you didn't have an autoincrement pk
-        # 2) You could do it by doing O(n) normal inserts into the parent
-        #    tables to get the primary keys back and then doing a single bulk
-        #    insert into the childmost table.
-        # We currently set the primary keys on the objects when using
-        # PostgreSQL via the RETURNING ID clause. It should be possible for
-        # Oracle as well, but the semantics for extracting the primary keys is
-        # trickier so it's not done yet.
         if batch_size is not None and batch_size <= 0:
             raise ValueError("Batch size must be a positive integer.")
-        # Check that the parents share the same concrete model with the our
+        # Check that the parents share the same concrete model with our
         # model to detect the inheritance pattern ConcreteGrandParent ->
         # MultiTableParent -> ProxyChild. Simply checking self.model._meta.proxy
         # would not identify that case as involving multiple tables.
@@ -788,7 +771,7 @@ class QuerySet(AltersData):
             unique_fields = [
                 opts.pk.name if name == "pk" else name for name in unique_fields
             ]
-        on_conflict = self._check_bulk_create_options(
+        on_conflict, update_fields, unique_fields = self._check_bulk_create_options(
             ignore_conflicts,
             update_conflicts,
             update_fields,
@@ -813,6 +796,7 @@ class QuerySet(AltersData):
                     for result, field in zip(results, opts.db_returning_fields):
                         if field != opts.pk:
                             setattr(obj_with_pk, field.attname, result)
+                # Restore the loop that sets _state.adding = False for each obj.
                 for obj_with_pk in objs_with_pk:
                     obj_with_pk._state.adding = False
                     obj_with_pk._state.db = self.db
@@ -837,8 +821,9 @@ class QuerySet(AltersData):
                         setattr(obj_without_pk, field.attname, result)
                     obj_without_pk._state.adding = False
                     obj_without_pk._state.db = self.db
-
         return objs
+    
+    
 
     async def abulk_create(
         self,
diff --git a/test_mixed_case_bulk_create.py b/test_mixed_case_bulk_create.py
new file mode 100644
index 0000000000..ec8806f647
--- /dev/null
+++ b/test_mixed_case_bulk_create.py
@@ -0,0 +1,96 @@
+#!/usr/bin/env python
+import sys
+import traceback
+
+import django
+from django.conf import settings
+from django.db import models, connection
+
+def main():
+    print("Configuring Django settings...")
+    from django.conf import settings
+    import django
+    from django.db import models, connection, transaction
+    import sys
+    import traceback
+    from django.db.utils import IntegrityError
+
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            "default": {
+                "ENGINE": "django.db.backends.sqlite3",
+                "NAME": ":memory:",
+            }
+        },
+        INSTALLED_APPS=["__main__"],
+        SECRET_KEY="testsecret",
+    )
+    django.setup()
+
+    print("Defining test model with mismatched db_column and attribute name...")
+
+    class MixedCaseModel(models.Model):
+        # Note that pkid has a db_column 'PKID' that differs by case.
+        pkid = models.IntegerField(db_column="PKID", primary_key=True)
+        name = models.CharField(db_column="NameCase", max_length=30)
+
+        class Meta:
+            app_label = "__main__"
+
+    print("Creating schema for test model via schema_editor()...")
+    try:
+        with connection.schema_editor() as editor:
+            editor.create_model(MixedCaseModel)
+    except Exception as e:
+        print("ERROR creating schema:", e)
+        sys.exit(2)
+
+    print("Clearing queries for a fresh look at generated SQL...")
+    if hasattr(connection, "queries_log"):
+        connection.queries_log.clear()  # For Django 4.2+ or if it exists
+    else:
+        # fallback clearing approach
+        if hasattr(connection, "queries"):
+            connection.queries.clear()
+
+    print("Attempting bulk_create() with update_conflicts=True...")
+    instances = [MixedCaseModel(pkid=1, name="foo")]
+    try:
+        MixedCaseModel.objects.bulk_create(
+            instances,
+            update_conflicts=True,
+            update_fields=["name"],
+            unique_fields=["pkid"],
+        )
+    except Exception as e:
+        print("Exception encountered during bulk_create (bug manifestation):")
+        traceback.print_exc()
+        print("Exiting with error code 1 for bug presence.")
+        sys.exit(1)
+
+    # If we get here, bulk_create didn't explode. Check the SQL to see if
+    # it incorrectly refers to "pkid" vs "PKID" in the ON CONFLICT clause.
+    last_query = ""
+    # Attempt to retrieve the last executed query from either queries_log or queries
+    if hasattr(connection, "queries_log") and connection.queries_log:
+        # queries_log are dict entries for Django 4.2+
+        last_query = connection.queries_log[-1]["sql"]
+    elif hasattr(connection, "queries") and connection.queries:
+        # queries are dict entries in older Django
+        last_query = connection.queries[-1]["sql"]
+
+    # We'll do a case-insensitive check for the incorrect "pkid"
+    if '"pkid"' in last_query.lower():
+        print("BUG STILL PRESENT: Found 'pkid' in ON CONFLICT clause!")
+        print("Generated SQL was:", last_query)
+        sys.exit(1)
+    else:
+        print("No bug found in final SQL. Possibly the fix is present!")
+        print("Generated SQL was:", last_query)
+        print("Exiting 0 indicating success/fix.")
+        sys.exit(0)
+
+
+if __name__ == "__main__":
+    main()
