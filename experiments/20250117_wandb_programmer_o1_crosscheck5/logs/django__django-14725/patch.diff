diff --git a/django/forms/models.py b/django/forms/models.py
index 7effb202e3..02a5bf971a 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -565,18 +565,26 @@ def modelform_factory(model, form=ModelForm, fields=None, exclude=None,
 
 class BaseModelFormSet(BaseFormSet):
     """
-    A ``FormSet`` for editing a queryset and/or adding new objects to it.
+    A FormSet for editing a queryset and/or adding new objects to it.
     """
     model = None
 
     # Set of fields that must be unique among forms of this set.
     unique_fields = set()
 
+    # New attribute: can_create
+    can_create = True
+
     def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,
-                 queryset=None, *, initial=None, **kwargs):
+                 queryset=None, *, initial=None, can_create=None, **kwargs):
+        # Record the queryset, as normal.
         self.queryset = queryset
         self.initial_extra = initial
-        super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})
+        # Call super() with the rest of the kwargs.
+        super().__init__(data=data, files=files, auto_id=auto_id, prefix=prefix, **kwargs)
+        # If can_create was passed explicitly, override the class-level default.
+        if can_create is not None:
+            self.can_create = can_create
 
     def initial_form_count(self):
         """Return the number of forms that are required in this FormSet."""
@@ -645,9 +653,7 @@ class BaseModelFormSet(BaseFormSet):
             if not qs.ordered:
                 qs = qs.order_by(self.model._meta.pk.name)
 
-            # Removed queryset limiting here. As per discussion re: #13023
-            # on django-dev, max_num should not prevent existing
-            # related objects/inlines from being displayed.
+            # Removed queryset limiting here. As per #13023
             self._queryset = qs
         return self._queryset
 
@@ -722,12 +728,13 @@ class BaseModelFormSet(BaseFormSet):
                             [self.get_form_error()],
                             renderer=self.renderer,
                         )
-                        # remove the data from the cleaned_data dict since it was invalid
+                        # remove the data from the cleaned_data dict
                         for field in unique_check:
                             if field in form.cleaned_data:
                                 del form.cleaned_data[field]
                     # mark the data as seen
                     seen_data.add(row_data)
+
         # iterate over each of the date checks now
         for date_check in all_date_checks:
             seen_data = set()
@@ -740,21 +747,16 @@ class BaseModelFormSet(BaseFormSet):
                     if lookup == 'date':
                         date = form.cleaned_data[unique_for]
                         date_data = (date.year, date.month, date.day)
-                    # otherwise it's just the attribute on the date/datetime
-                    # object
                     else:
                         date_data = (getattr(form.cleaned_data[unique_for], lookup),)
                     data = (form.cleaned_data[field],) + date_data
                     # if we've already seen it then we have a uniqueness failure
                     if data in seen_data:
-                        # poke error messages into the right places and mark
-                        # the form as invalid
                         errors.append(self.get_date_error_message(date_check))
                         form._errors[NON_FIELD_ERRORS] = self.error_class(
                             [self.get_form_error()],
                             renderer=self.renderer,
                         )
-                        # remove the data from the cleaned_data dict since it was invalid
                         del form.cleaned_data[field]
                     # mark the data as seen
                     seen_data.add(data)
@@ -796,9 +798,8 @@ class BaseModelFormSet(BaseFormSet):
         for form in self.initial_forms:
             obj = form.instance
             # If the pk is None, it means either:
-            # 1. The object is an unexpected empty model, created by invalid
-            #    POST data such as an object outside the formset's queryset.
-            # 2. The object was already deleted from the database.
+            # 1. The object is an unexpected empty model.
+            # 2. The object was already deleted from the DB.
             if obj.pk is None:
                 continue
             if form in forms_to_delete:
@@ -812,12 +813,14 @@ class BaseModelFormSet(BaseFormSet):
         return saved_instances
 
     def save_new_objects(self, commit=True):
+        # If can_create=False, disallow creation of new objects:
+        if not self.can_create:
+            return []
         self.new_objects = []
         for form in self.extra_forms:
             if not form.has_changed():
                 continue
-            # If someone has marked an add form for deletion, don't save the
-            # object.
+            # If someone has marked an add form for deletion, don't save
             if self.can_delete and self._should_delete_form(form):
                 continue
             self.new_objects.append(self.save_new(form, commit=commit))
@@ -829,11 +832,6 @@ class BaseModelFormSet(BaseFormSet):
         """Add a hidden field for the object's primary key."""
         from django.db.models import AutoField, ForeignKey, OneToOneField
         self._pk_field = pk = self.model._meta.pk
-        # If a pk isn't editable, then it won't be on the form, so we need to
-        # add it here so we can tell which object is which when we get the
-        # data back. Generally, pk.editable should be false, but for some
-        # reason, auto_created pk fields and AutoField's editable attribute is
-        # True, so check for that as well.
 
         def pk_is_not_editable(pk):
             return (
@@ -842,11 +840,11 @@ class BaseModelFormSet(BaseFormSet):
                     pk_is_not_editable(pk.remote_field.model._meta.pk)
                 )
             )
+
+        # If PK isn't editable, we add it as hidden so we know which object is which.
         if pk_is_not_editable(pk) or pk.name not in form.fields:
             if form.is_bound:
-                # If we're adding the related instance, ignore its primary key
-                # as it could be an auto-generated default which isn't actually
-                # in the database.
+                # If we're adding the related instance, ignore pk if it's an auto-generated default.
                 pk_value = None if form.instance._state.adding else form.instance.pk
             else:
                 try:
@@ -856,10 +854,12 @@ class BaseModelFormSet(BaseFormSet):
                         pk_value = None
                 except IndexError:
                     pk_value = None
+
             if isinstance(pk, (ForeignKey, OneToOneField)):
                 qs = pk.remote_field.model._default_manager.get_queryset()
             else:
                 qs = self.model._default_manager.get_queryset()
+
             qs = qs.using(form.instance._state.db)
             if form._meta.widgets:
                 widget = form._meta.widgets.get(self._pk_field.name, HiddenInput)
@@ -869,14 +869,34 @@ class BaseModelFormSet(BaseFormSet):
         super().add_fields(form, index)
 
 
-def modelformset_factory(model, form=ModelForm, formfield_callback=None,
-                         formset=BaseModelFormSet, extra=1, can_delete=False,
-                         can_order=False, max_num=None, fields=None, exclude=None,
-                         widgets=None, validate_max=False, localized_fields=None,
-                         labels=None, help_texts=None, error_messages=None,
-                         min_num=None, validate_min=False, field_classes=None,
-                         absolute_max=None, can_delete_extra=True, renderer=None):
-    """Return a FormSet class for the given Django model class."""
+
+def modelformset_factory(
+    model,
+    form=ModelForm,
+    formfield_callback=None,
+    formset=BaseModelFormSet,
+    extra=1,
+    can_delete=False,
+    can_order=False,
+    max_num=None,
+    fields=None,
+    exclude=None,
+    widgets=None,
+    validate_max=False,
+    localized_fields=None,
+    labels=None,
+    help_texts=None,
+    error_messages=None,
+    min_num=None,
+    validate_min=False,
+    field_classes=None,
+    absolute_max=None,
+    can_delete_extra=True,
+    renderer=None,
+    can_create=True,
+):
+    "Return a FormSet class for the given Django model class with a new can_create param."
+
     meta = getattr(form, 'Meta', None)
     if (getattr(meta, 'fields', fields) is None and
             getattr(meta, 'exclude', exclude) is None):
@@ -885,20 +905,43 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,
             "'exclude' explicitly is prohibited."
         )
 
-    form = modelform_factory(model, form=form, fields=fields, exclude=exclude,
-                             formfield_callback=formfield_callback,
-                             widgets=widgets, localized_fields=localized_fields,
-                             labels=labels, help_texts=help_texts,
-                             error_messages=error_messages, field_classes=field_classes)
-    FormSet = formset_factory(form, formset, extra=extra, min_num=min_num, max_num=max_num,
-                              can_order=can_order, can_delete=can_delete,
-                              validate_min=validate_min, validate_max=validate_max,
-                              absolute_max=absolute_max, can_delete_extra=can_delete_extra,
-                              renderer=renderer)
+    # Build the child form by calling modelform_factory
+    form = modelform_factory(
+        model,
+        form=form,
+        fields=fields,
+        exclude=exclude,
+        formfield_callback=formfield_callback,
+        widgets=widgets,
+        localized_fields=localized_fields,
+        labels=labels,
+        help_texts=help_texts,
+        error_messages=error_messages,
+        field_classes=field_classes,
+    )
+
+    # Now produce the actual FormSet class using formset_factory
+    FormSet = formset_factory(
+        form,
+        formset=formset,
+        extra=extra,
+        min_num=min_num,
+        max_num=max_num,
+        can_order=can_order,
+        can_delete=can_delete,
+        validate_min=validate_min,
+        validate_max=validate_max,
+        absolute_max=absolute_max,
+        can_delete_extra=can_delete_extra,
+        renderer=renderer,
+    )
+    # Attach the model and our new can_create param
     FormSet.model = model
+    FormSet.can_create = can_create
     return FormSet
 
 
+
 # InlineFormSets #############################################################
 
 class BaseInlineFormSet(BaseModelFormSet):
diff --git a/test_disallow_creation.py b/test_disallow_creation.py
new file mode 100644
index 0000000000..5dfdb44313
--- /dev/null
+++ b/test_disallow_creation.py
@@ -0,0 +1,57 @@
+import sys
+import django
+from django.conf import settings
+
+# Configure Django before defining any models.
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=["django.contrib.contenttypes", "django.contrib.auth", __name__],
+        DATABASES={"default": {"ENGINE": "django.db.backends.sqlite3", "NAME": ":memory:"}},
+        MIDDLEWARE=[],
+    )
+django.setup()
+
+from django.db import models, connection
+from django.forms.models import modelformset_factory
+
+def main():
+    print("Creating in-memory table for DummyModel.")
+    class DummyModel(models.Model):
+        name = models.CharField(max_length=100, blank=True)
+
+        class Meta:
+            app_label = __name__
+
+    with connection.schema_editor() as editor:
+        editor.create_model(DummyModel)
+
+    print("Constructing a ModelFormSet with can_create=False.")
+    FormSetClass = modelformset_factory(DummyModel, fields=["name"], extra=1, can_create=False)
+
+    print("Posting data that attempts to create a new DummyModel object.")
+    post_data = {
+        "form-TOTAL_FORMS": "1",
+        "form-INITIAL_FORMS": "0",
+        "form-0-name": "Hello",
+    }
+    formset = FormSetClass(data=post_data)
+
+    print("formset.is_valid() =>", formset.is_valid())
+    if not formset.is_valid():
+        print("Formset is invalid -- presumably creation disallowed or invalid data. Pass.")
+        sys.exit(0)
+
+    print("Saving formset...")
+    formset.save()
+    count = DummyModel.objects.count()
+    print("DummyModel.objects.count() =>", count)
+
+    if count > 0:
+        print("FAIL: A new object was created, despite can_create=False.")
+        sys.exit(1)
+    else:
+        print("PASS: No new object was created.")
+        sys.exit(0)
+
+if __name__ == "__main__":
+    main()
