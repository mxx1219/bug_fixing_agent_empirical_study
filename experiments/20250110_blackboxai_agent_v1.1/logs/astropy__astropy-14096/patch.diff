diff --git a/.gitignore b/.gitignore
index 1efe03bb1f..cdf2c2b141 100644
--- a/.gitignore
+++ b/.gitignore
@@ -86,3 +86,4 @@ v
 
 .tmp
 pip-wheel-metadata
+.aider/
diff --git a/astropy/coordinates/sky_coordinate.py b/astropy/coordinates/sky_coordinate.py
index ab475f7d0d..6b70644ce1 100644
--- a/astropy/coordinates/sky_coordinate.py
+++ b/astropy/coordinates/sky_coordinate.py
@@ -871,33 +871,35 @@ class SkyCoord(ShapedLikeNDArray):
         Overrides getattr to return coordinates that this can be transformed
         to, based on the alias attr in the primary transform graph.
         """
-        if "_sky_coord_frame" in self.__dict__:
-            if self._is_name(attr):
-                return self  # Should this be a deepcopy of self?
-
-            # Anything in the set of all possible frame_attr_names is handled
-            # here. If the attr is relevant for the current frame then delegate
-            # to self.frame otherwise get it from self._<attr>.
-            if attr in frame_transform_graph.frame_attributes:
-                if attr in self.frame.frame_attributes:
-                    return getattr(self.frame, attr)
-                else:
-                    return getattr(self, "_" + attr, None)
-
-            # Some attributes might not fall in the above category but still
-            # are available through self._sky_coord_frame.
-            if not attr.startswith("_") and hasattr(self._sky_coord_frame, attr):
-                return getattr(self._sky_coord_frame, attr)
-
-            # Try to interpret as a new frame for transforming.
-            frame_cls = frame_transform_graph.lookup_name(attr)
-            if frame_cls is not None and self.frame.is_transformable_to(frame_cls):
-                return self.transform_to(attr)
-
-        # Fail
-        raise AttributeError(
-            f"'{self.__class__.__name__}' object has no attribute '{attr}'"
-        )
+        # First try to get the attribute normally to allow properties to work
+        try:
+            return super().__getattribute__(attr)
+        except AttributeError as orig_exc:
+            if "_sky_coord_frame" in self.__dict__:
+                if self._is_name(attr):
+                    return self  # Should this be a deepcopy of self?
+
+                # Anything in the set of all possible frame_attr_names is handled
+                # here. If the attr is relevant for the current frame then delegate
+                # to self.frame otherwise get it from self._<attr>.
+                if attr in frame_transform_graph.frame_attributes:
+                    if attr in self.frame.frame_attributes:
+                        return getattr(self.frame, attr)
+                    else:
+                        return getattr(self, "_" + attr, None)
+
+                # Some attributes might not fall in the above category but still
+                # are available through self._sky_coord_frame.
+                if not attr.startswith("_") and hasattr(self._sky_coord_frame, attr):
+                    return getattr(self._sky_coord_frame, attr)
+
+                # Try to interpret as a new frame for transforming.
+                frame_cls = frame_transform_graph.lookup_name(attr)
+                if frame_cls is not None and self.frame.is_transformable_to(frame_cls):
+                    return self.transform_to(attr)
+
+            # If we get here, re-raise the original AttributeError
+            raise orig_exc
 
     def __setattr__(self, attr, val):
         # This is to make anything available through __getattr__ immutable
