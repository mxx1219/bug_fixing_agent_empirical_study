diff --git a/.gitignore b/.gitignore
index 238fb3a200..521baaa795 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,4 @@ tests/coverage_html/
 tests/.coverage
 build/
 tests/report/
+.aider/
diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py
index 2e283a3193..e1268b54ed 100644
--- a/django/db/backends/base/operations.py
+++ b/django/db/backends/base/operations.py
@@ -579,8 +579,26 @@ class BaseDatabaseOperations:
         return []
 
     def convert_durationfield_value(self, value, expression, connection):
-        if value is not None:
-            return datetime.timedelta(0, 0, value)
+        if value is None:
+            return value
+        if isinstance(value, datetime.timedelta):
+            return value
+        # Handle both integer and string/decimal microseconds values
+        try:
+            # For integer values
+            if isinstance(value, int):
+                return datetime.timedelta(microseconds=value)
+            # For string/decimal values
+            if isinstance(value, str):
+                try:
+                    microseconds = int(decimal.Decimal(value))
+                    return datetime.timedelta(microseconds=microseconds)
+                except (decimal.InvalidOperation, ValueError):
+                    raise ValueError("Duration values must be expressed in microseconds as integers or decimals.")
+            raise TypeError(f"Unsupported duration value type: {type(value)}")
+        except Exception as e:
+            print(f"Debug - Value: {value!r}, Type: {type(value)}")
+            raise
 
     def check_expression_support(self, expression):
         """
diff --git a/django/db/backends/mysql/operations.py b/django/db/backends/mysql/operations.py
index af8cfd86b5..25cda8ef5b 100644
--- a/django/db/backends/mysql/operations.py
+++ b/django/db/backends/mysql/operations.py
@@ -1,6 +1,8 @@
+import datetime
 import uuid
 
 from django.conf import settings
+from django.db import DatabaseError
 from django.db.backends.base.operations import BaseDatabaseOperations
 from django.utils import timezone
 from django.utils.duration import duration_microseconds
@@ -288,6 +290,25 @@ class DatabaseOperations(BaseDatabaseOperations):
             return 'FLOOR(%(lhs)s / POW(2, %(rhs)s))' % {'lhs': lhs, 'rhs': rhs}
         return super().combine_expression(connector, sub_expressions)
 
+    def combine_duration_expression(self, connector, sub_expressions):
+        if connector not in ['+', '-']:
+            raise DatabaseError('Invalid connector for timedelta: %s.' % connector)
+        # Each duration operand should be in microseconds
+        sql = []
+        for expr in sub_expressions:
+            if hasattr(expr, 'as_sql'):
+                # This is an F() expression, already in microseconds in DB
+                sql.append("CAST(%s AS SIGNED)" % expr)
+            else:
+                # This is a timedelta value, convert to microseconds
+                if isinstance(expr, datetime.timedelta):
+                    from django.utils.duration import duration_microseconds
+                    sql.append(str(duration_microseconds(expr)))
+                else:
+                    sql.append(str(expr))
+        # Cast the entire expression to ensure proper handling
+        return "CAST((%s) AS SIGNED)" % (" %s " % connector).join(sql)
+
     def get_db_converters(self, expression):
         converters = super().get_db_converters(expression)
         internal_type = expression.output_field.get_internal_type()
@@ -298,6 +319,8 @@ class DatabaseOperations(BaseDatabaseOperations):
                 converters.append(self.convert_datetimefield_value)
         elif internal_type == 'UUIDField':
             converters.append(self.convert_uuidfield_value)
+        elif internal_type == 'DurationField':
+            converters.append(self.convert_durationfield_value)
         return converters
 
     def convert_booleanfield_value(self, value, expression, connection):
diff --git a/django/db/backends/sqlite3/operations.py b/django/db/backends/sqlite3/operations.py
index 9510b5edd9..e13e4d47a3 100644
--- a/django/db/backends/sqlite3/operations.py
+++ b/django/db/backends/sqlite3/operations.py
@@ -275,6 +275,8 @@ class DatabaseOperations(BaseDatabaseOperations):
             converters.append(self.convert_uuidfield_value)
         elif internal_type in ('NullBooleanField', 'BooleanField'):
             converters.append(self.convert_booleanfield_value)
+        elif internal_type == 'DurationField':
+            converters.append(self.convert_durationfield_value)
         return converters
 
     def convert_datetimefield_value(self, value, expression, connection):
@@ -339,10 +341,21 @@ class DatabaseOperations(BaseDatabaseOperations):
     def combine_duration_expression(self, connector, sub_expressions):
         if connector not in ['+', '-']:
             raise DatabaseError('Invalid connector for timedelta: %s.' % connector)
-        fn_params = ["'%s'" % connector] + sub_expressions
-        if len(fn_params) > 3:
-            raise ValueError('Too many params for timedelta operations.')
-        return "django_format_dtdelta(%s)" % ', '.join(fn_params)
+        # Each duration operand should be in microseconds
+        sql = []
+        for expr in sub_expressions:
+            if hasattr(expr, 'as_sql'):
+                # This is an F() expression, already in microseconds in DB
+                sql.append("CAST(%s AS INTEGER)" % expr)
+            else:
+                # This is a timedelta value, convert to microseconds
+                if isinstance(expr, datetime.timedelta):
+                    from django.utils.duration import duration_microseconds
+                    sql.append(str(duration_microseconds(expr)))
+                else:
+                    sql.append(str(expr))
+        # Combine the expressions with the connector
+        return (" %s " % connector).join(sql)
 
     def integer_field_range(self, internal_type):
         # SQLite doesn't enforce any integer constraints
