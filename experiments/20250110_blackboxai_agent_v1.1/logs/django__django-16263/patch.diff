diff --git a/.gitignore b/.gitignore
index 238fb3a200..521baaa795 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,4 @@ tests/coverage_html/
 tests/.coverage
 build/
 tests/report/
+.aider/
diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 9735ce10c8..4b53ae1a22 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -548,10 +548,53 @@ class Query(BaseExpression):
     def get_count(self, using):
         """
         Perform a COUNT() query using the current filter constraints.
-        """
-        obj = self.clone()
+        Strip out unused annotations unless they are used in filters or ordering.
+        """
+        # Create a new clean query
+        obj = self.chain()
+        obj.clear_select_clause()
+        
+        # Check if annotations are used in filters
+        has_annotation_filters = False
+        def check_node(node):
+            nonlocal has_annotation_filters
+            if hasattr(node, 'refs') and node.refs in self.annotations:
+                has_annotation_filters = True
+            for child in getattr(node, 'children', ()):
+                check_node(child)
+        check_node(self.where)
+        
+        # Check if annotations are used in ordering
+        has_annotation_ordering = any(
+            (isinstance(expr, str) and expr.lstrip('-') in self.annotations) or
+            (hasattr(expr, 'refs') and expr.refs in self.annotations)
+            for expr in self.order_by
+        )
+        
+        # Only copy over annotations if they're used in filters or ordering
+        if has_annotation_filters or has_annotation_ordering:
+            obj.annotations = self.annotations.copy()
+            if self.annotation_select_mask is not None:
+                obj.set_annotation_mask(self.annotation_select_mask)
+        else:
+            obj.annotations = {}
+            obj.annotation_select_mask = None
+            obj._annotation_select_cache = None
+            obj.group_by = None
+            obj.select = ()
+            obj.default_cols = False
+            # Clear any existing joins that might have been copied
+            obj.alias_map = {k: v for k, v in obj.alias_map.items() 
+                           if not isinstance(v, Join)}
+            obj.alias_refcount = {k: v for k, v in obj.alias_refcount.items()
+                                if k in obj.alias_map}
+            
+        # Add the count annotation
         obj.add_annotation(Count("*"), alias="__count", is_summary=True)
-        return obj.get_aggregation(using, ["__count"])["__count"]
+        
+        # Get the count
+        result = obj.get_aggregation(using, ["__count"])
+        return result["__count"]
 
     def has_filters(self):
         return self.where
