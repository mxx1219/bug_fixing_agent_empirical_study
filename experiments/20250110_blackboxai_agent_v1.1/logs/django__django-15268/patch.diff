diff --git a/.gitignore b/.gitignore
index 238fb3a200..521baaa795 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,4 @@ tests/coverage_html/
 tests/.coverage
 build/
 tests/report/
+.aider/
diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index c120f5d32d..895b1e3bf5 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -528,6 +528,27 @@ class AlterTogetherOptionOperation(ModelOptionOperation):
     def migration_name_fragment(self):
         return 'alter_%s_%s' % (self.name_lower, self.option_name)
 
+    def reduce(self, operation, app_label):
+        if isinstance(operation, AlterTogetherOptionOperation):  # Allow any AlterTogetherOptionOperation
+            if self.name_lower == operation.name_lower:    # Same model
+                if isinstance(operation, self.__class__):  # Same type (unique/index)
+                    # If this operation clears constraints and next sets them, or
+                    # if both operations set constraints, use the latter's value
+                    if (self.option_value == set() and operation.option_value) or (
+                        self.option_value is not None and operation.option_value is not None
+                    ):
+                        return [operation]
+                    # If both clear constraints, use either one
+                    elif self.option_value == set() and operation.option_value == set():
+                        return [self]
+                else:
+                    # Different types (one unique, one index) - let them pass through
+                    # but mark that we can optimize through this operation
+                    return True
+        # Let other operations pass through
+        return super().reduce(operation, app_label)
+
+
 
 class AlterUniqueTogether(AlterTogetherOptionOperation):
     """
