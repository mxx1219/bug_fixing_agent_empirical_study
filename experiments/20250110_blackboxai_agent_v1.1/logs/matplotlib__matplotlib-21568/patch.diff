diff --git a/.gitignore b/.gitignore
index 7d0e549e01..ec3b38b71a 100644
--- a/.gitignore
+++ b/.gitignore
@@ -110,3 +110,4 @@ lib/matplotlib/backends/web_backend/node_modules/
 lib/matplotlib/backends/web_backend/package-lock.json
 
 LICENSE/LICENSE_QHULL
+.aider/
diff --git a/lib/matplotlib/dates.py b/lib/matplotlib/dates.py
index 0766156d64..9bfb035817 100644
--- a/lib/matplotlib/dates.py
+++ b/lib/matplotlib/dates.py
@@ -1297,6 +1297,7 @@ class AutoDateLocator(DateLocator):
         self._freqs = [YEARLY, MONTHLY, DAILY, HOURLY, MINUTELY,
                        SECONDLY, MICROSECONDLY]
         self.minticks = minticks
+        self._usetex = mpl.rcParams['text.usetex']
 
         self.maxticks = {YEARLY: 11, MONTHLY: 12, DAILY: 11, HOURLY: 12,
                          MINUTELY: 11, SECONDLY: 11, MICROSECONDLY: 8}
@@ -1313,7 +1314,7 @@ class AutoDateLocator(DateLocator):
             YEARLY:   [1, 2, 4, 5, 10, 20, 40, 50, 100, 200, 400, 500,
                        1000, 2000, 4000, 5000, 10000],
             MONTHLY:  [1, 2, 3, 4, 6],
-            DAILY:    [1, 2, 3, 7, 14, 21],
+            DAILY:    [1, 2, 3, 7, 14],  # Use 3.3 behavior for daily ticks
             HOURLY:   [1, 2, 3, 4, 6, 12],
             MINUTELY: [1, 5, 10, 15, 30],
             SECONDLY: [1, 5, 10, 15, 30],
@@ -1321,7 +1322,8 @@ class AutoDateLocator(DateLocator):
                             5000, 10000, 20000, 50000, 100000, 200000, 500000,
                             1000000],
                             }
-        if interval_multiples:
+        if interval_multiples and not self._usetex:
+            # Only apply the 3.4 behavior when not using tex
             # Swap "3" for "4" in the DAILY list; If we use 3 we get bad
             # tick loc for months w/ 31 days: 1, 4, ..., 28, 31, 1
             # If we use 4 then we get: 1, 5, ... 25, 29, 1
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..5dec213243
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,16 @@
+
+import matplotlib
+import matplotlib.pyplot as plt
+import numpy as np
+import pandas as pd
+
+np.random.seed(1)
+matplotlib.rcParams["text.usetex"] = True
+
+dates = pd.date_range("2020-01-01 00:00:00", end="2020-01-01 00:10:00", periods=100)
+dates = dates.to_numpy()  # Convert dates to numpy array
+data = np.random.rand(100)
+
+fig, ax = plt.subplots(constrained_layout=True)
+ax.plot(dates, data)
+plt.savefig("test_3.4.png")
diff --git a/test_10min_notex.png b/test_10min_notex.png
new file mode 100644
index 0000000000..1912c008a5
Binary files /dev/null and b/test_10min_notex.png differ
diff --git a/test_10min_tex.png b/test_10min_tex.png
new file mode 100644
index 0000000000..a8c2a3fd4d
Binary files /dev/null and b/test_10min_tex.png differ
diff --git a/test_12hour_notex.png b/test_12hour_notex.png
new file mode 100644
index 0000000000..c47b9ce27a
Binary files /dev/null and b/test_12hour_notex.png differ
diff --git a/test_1hour_notex.png b/test_1hour_notex.png
new file mode 100644
index 0000000000..4955c4ee70
Binary files /dev/null and b/test_1hour_notex.png differ
diff --git a/test_1hour_tex.png b/test_1hour_tex.png
new file mode 100644
index 0000000000..f58213b936
Binary files /dev/null and b/test_1hour_tex.png differ
diff --git a/test_3.4.png b/test_3.4.png
new file mode 100644
index 0000000000..a8c2a3fd4d
Binary files /dev/null and b/test_3.4.png differ
diff --git a/test_day.png b/test_day.png
new file mode 100644
index 0000000000..c8181cec07
Binary files /dev/null and b/test_day.png differ
diff --git a/test_hour.png b/test_hour.png
new file mode 100644
index 0000000000..f58213b936
Binary files /dev/null and b/test_hour.png differ
diff --git a/test_intervals.py b/test_intervals.py
new file mode 100644
index 0000000000..f3598d37b2
--- /dev/null
+++ b/test_intervals.py
@@ -0,0 +1,58 @@
+
+import matplotlib
+import matplotlib.pyplot as plt
+import numpy as np
+import pandas as pd
+from matplotlib.dates import num2date
+
+def test_plot(start, end, periods, filename, use_tex=False):
+    np.random.seed(1)
+    matplotlib.rcParams["text.usetex"] = use_tex
+    
+    dates = pd.date_range(start, end=end, periods=periods)
+    dates = dates.to_numpy()
+    data = np.random.rand(periods)
+    
+    fig, ax = plt.subplots(constrained_layout=True)
+    ax.plot(dates, data)
+    
+    # Get the tick positions and convert to datetime for better readability
+    tick_positions = ax.get_xticks()
+    tick_times = [num2date(pos).strftime('%Y-%m-%d %H:%M:%S') for pos in tick_positions]
+    
+    # Print tick information for verification
+    print(f"\nTest for {filename}:")
+    print(f"Number of ticks: {len(tick_positions)}")
+    print("Tick times:")
+    for i, time in enumerate(tick_times):
+        print(f"  {i+1}. {time}")
+    
+    plt.savefig(filename)
+    plt.close()
+    return tick_positions, tick_times
+
+# Test cases with different time ranges
+test_cases = [
+    ("2020-01-01 00:00:00", "2020-01-01 00:10:00", 100, "10min"),  # 10 minute range
+    ("2020-01-01 00:00:00", "2020-01-01 01:00:00", 60, "1hour"),   # 1 hour range
+    ("2020-01-01 00:00:00", "2020-01-01 12:00:00", 48, "12hour"),  # 12 hour range
+    ("2020-01-01", "2020-01-02", 48, "1day"),                      # 1 day range
+]
+
+for start, end, periods, label in test_cases:
+    print(f"\n=== Testing {label} range ===")
+    print("Without tex:")
+    pos1, times1 = test_plot(start, end, periods, f"test_{label}_notex.png", use_tex=False)
+    print("\nWith tex:")
+    pos2, times2 = test_plot(start, end, periods, f"test_{label}_tex.png", use_tex=True)
+    
+    # Compare intervals
+    print(f"\nInterval comparison for {label}:")
+    if len(pos1) == len(pos2):
+        print(f"Same number of ticks: {len(pos1)}")
+        if np.allclose(pos1, pos2):
+            print("Identical tick positions")
+        else:
+            print("Different tick positions despite same count")
+    else:
+        print(f"Different number of ticks: {len(pos1)} vs {len(pos2)}")
diff --git a/test_notex.png b/test_notex.png
new file mode 100644
index 0000000000..1912c008a5
Binary files /dev/null and b/test_notex.png differ
diff --git a/test_ranges.py b/test_ranges.py
new file mode 100644
index 0000000000..362b42b2c8
--- /dev/null
+++ b/test_ranges.py
@@ -0,0 +1,27 @@
+
+import matplotlib
+import matplotlib.pyplot as plt
+import numpy as np
+import pandas as pd
+
+def test_plot(start, end, periods, filename):
+    np.random.seed(1)
+    matplotlib.rcParams["text.usetex"] = True
+    
+    dates = pd.date_range(start, end=end, periods=periods)
+    dates = dates.to_numpy()
+    data = np.random.rand(periods)
+    
+    fig, ax = plt.subplots(constrained_layout=True)
+    ax.plot(dates, data)
+    plt.savefig(filename)
+    plt.close()
+
+# Test 1: Hour range
+test_plot("2020-01-01 00:00:00", "2020-01-01 01:00:00", 60, "test_hour.png")
+
+# Test 2: Day range
+test_plot("2020-01-01", "2020-01-02", 48, "test_day.png")
+
+# Test 3: Month range
+test_plot("2020-01-01", "2020-02-01", 32, "test_month.png")
diff --git a/test_tex.png b/test_tex.png
new file mode 100644
index 0000000000..a8c2a3fd4d
Binary files /dev/null and b/test_tex.png differ
diff --git a/test_ticks.py b/test_ticks.py
new file mode 100644
index 0000000000..8d9ca7f337
--- /dev/null
+++ b/test_ticks.py
@@ -0,0 +1,40 @@
+
+import matplotlib
+import matplotlib.pyplot as plt
+import numpy as np
+import pandas as pd
+
+def test_plot(start, end, periods, filename, use_tex=False):
+    np.random.seed(1)
+    matplotlib.rcParams["text.usetex"] = use_tex
+    
+    dates = pd.date_range(start, end=end, periods=periods)
+    dates = dates.to_numpy()
+    data = np.random.rand(periods)
+    
+    fig, ax = plt.subplots(constrained_layout=True)
+    ax.plot(dates, data)
+    
+    # Get the tick positions to verify spacing
+    tick_positions = ax.get_xticks()
+    tick_labels = ax.get_xticklabels()
+    
+    # Print tick information for verification
+    print(f"\nTest for {filename}:")
+    print(f"Number of ticks: {len(tick_positions)}")
+    print(f"Tick positions: {tick_positions}")
+    
+    plt.savefig(filename)
+    plt.close()
+    return tick_positions
+
+# Test both with and without tex
+print("Testing without tex:")
+pos1 = test_plot("2020-01-01 00:00:00", "2020-01-01 00:10:00", 100, "test_notex.png", use_tex=False)
+
+print("\nTesting with tex:")
+pos2 = test_plot("2020-01-01 00:00:00", "2020-01-01 00:10:00", 100, "test_tex.png", use_tex=True)
+
+# Compare tick positions
+print("\nComparing tick positions:")
+print(f"Difference in number of ticks: {len(pos1) - len(pos2)}")
