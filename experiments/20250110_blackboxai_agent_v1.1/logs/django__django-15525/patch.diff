diff --git a/.gitignore b/.gitignore
index 238fb3a200..521baaa795 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,4 @@ tests/coverage_html/
 tests/.coverage
 build/
 tests/report/
+.aider/
diff --git a/django/core/serializers/base.py b/django/core/serializers/base.py
index da85cb4b92..54e767a0bc 100644
--- a/django/core/serializers/base.py
+++ b/django/core/serializers/base.py
@@ -331,19 +331,29 @@ def build_instance(Model, data, db):
     """
     default_manager = Model._meta.default_manager
     pk = data.get(Model._meta.pk.attname)
+    
+    # Set the database on the instance's state
+    instance = Model(**data)
+    instance._state.db = db
+    
     if (
         pk is None
         and hasattr(default_manager, "get_by_natural_key")
         and hasattr(Model, "natural_key")
     ):
-        natural_key = Model(**data).natural_key()
         try:
-            data[Model._meta.pk.attname] = Model._meta.pk.to_python(
-                default_manager.db_manager(db).get_by_natural_key(*natural_key).pk
-            )
+            # Get the natural key using the instance with proper db set
+            natural_key = instance.natural_key()
+            # Look up the object in the specified database
+            obj = default_manager.db_manager(db).get_by_natural_key(*natural_key)
+            data[Model._meta.pk.attname] = Model._meta.pk.to_python(obj.pk)
         except Model.DoesNotExist:
             pass
-    return Model(**data)
+    
+    # Create a new instance with updated data
+    instance = Model(**data)
+    instance._state.db = db
+    return instance
 
 
 def deserialize_m2m_values(field, field_value, using, handle_forward_references):
@@ -382,27 +392,37 @@ def deserialize_m2m_values(field, field_value, using, handle_forward_references)
 
 
 def deserialize_fk_value(field, field_value, using, handle_forward_references):
+    print(f"deserialize_fk_value called with field: {field.name}, value: {field_value}, using: {using}")
     if field_value is None:
         return None
     model = field.remote_field.model
     default_manager = model._default_manager
-    field_name = field.remote_field.field_name
-    if (
-        hasattr(default_manager, "get_by_natural_key")
-        and hasattr(field_value, "__iter__")
-        and not isinstance(field_value, str)
-    ):
+    
+    # Handle natural key lookups
+    if (hasattr(default_manager, "get_by_natural_key") and 
+        hasattr(field_value, "__iter__") and 
+        not isinstance(field_value, str)):
         try:
-            obj = default_manager.db_manager(using).get_by_natural_key(*field_value)
+            print(f"Attempting natural key lookup with value: {field_value}")
+            # Ensure we use the correct database for natural key lookup
+            manager = default_manager.db_manager(using)
+            # Force the manager to use the correct database for related lookups
+            manager._db = using
+            # Get the object using natural key and return its primary key
+            obj = manager.get_by_natural_key(*field_value)
+            print(f"Found object: {obj}")
+            value = obj.pk
+            print(f"Object PK: {value}")
+            # If this is a natural foreign key to an object that has a FK/O2O as
+            # the foreign key, use the FK value
+            if model._meta.pk.remote_field:
+                value = getattr(obj, model._meta.pk.name)
+                print(f"Using FK value: {value}")
+            return value
         except ObjectDoesNotExist:
             if handle_forward_references:
                 return DEFER_FIELD
-            else:
-                raise
-        value = getattr(obj, field_name)
-        # If this is a natural foreign key to an object that has a FK/O2O as
-        # the foreign key, use the FK value.
-        if model._meta.pk.remote_field:
-            value = value.pk
-        return value
-    return model._meta.get_field(field_name).to_python(field_value)
+            raise
+    
+    # Handle regular foreign key values
+    return model._meta.pk.to_python(field_value)
diff --git a/django/core/serializers/python.py b/django/core/serializers/python.py
index a3918bf9d2..334b6b3876 100644
--- a/django/core/serializers/python.py
+++ b/django/core/serializers/python.py
@@ -96,6 +96,7 @@ def Deserializer(
     """
     handle_forward_references = options.pop("handle_forward_references", False)
     field_names_cache = {}  # Model: <list of field_names>
+    use_natural_foreign_keys = options.pop('use_natural_foreign_keys', False)
 
     for d in object_list:
         # Look up the model and starting build a dict of data for it.
@@ -151,9 +152,25 @@ def Deserializer(
                 field.remote_field, models.ManyToOneRel
             ):
                 try:
-                    value = base.deserialize_fk_value(
-                        field, field_value, using, handle_forward_references
-                    )
+                    print(f"Processing FK field: {field.name}, value: {field_value}")
+                    print(f"use_natural_foreign_keys: {use_natural_foreign_keys}")
+                    print(f"has natural_key: {hasattr(field.remote_field.model, 'natural_key')}")
+                    print(f"is iterable: {hasattr(field_value, '__iter__')}")
+                    print(f"not string: {not isinstance(field_value, str)}")
+                    
+                    if (use_natural_foreign_keys and 
+                        hasattr(field.remote_field.model, 'natural_key') and
+                        hasattr(field_value, '__iter__') and
+                        not isinstance(field_value, str)):
+                        print("Using natural key deserialization")
+                        value = base.deserialize_fk_value(
+                            field, field_value, using, handle_forward_references
+                        )
+                        print(f"Natural key deserialization result: {value}")
+                    else:
+                        print("Using regular FK deserialization")
+                        value = field.remote_field.model._meta.pk.to_python(field_value)
+                        print(f"Regular FK deserialization result: {value}")
                 except Exception as e:
                     raise base.DeserializationError.WithData(
                         e, d["model"], d.get("pk"), field_value
