diff --git a/.gitignore b/.gitignore
index 1efe03bb1f..cdf2c2b141 100644
--- a/.gitignore
+++ b/.gitignore
@@ -86,3 +86,4 @@ v
 
 .tmp
 pip-wheel-metadata
+.aider/
diff --git a/astropy/coordinates/builtin_frames/itrs_observed_transforms.py b/astropy/coordinates/builtin_frames/itrs_observed_transforms.py
new file mode 100644
index 0000000000..e113a9cafa
--- /dev/null
+++ b/astropy/coordinates/builtin_frames/itrs_observed_transforms.py
@@ -0,0 +1,181 @@
+# Licensed under a 3-clause BSD style license - see LICENSE.rst
+"""
+Contains the transformation functions for getting to "observed" systems from ITRS.
+"""
+import numpy as np
+from astropy import units as u
+from astropy.time import Time
+from astropy.coordinates.baseframe import frame_transform_graph
+from astropy.coordinates.transformations import FunctionTransformWithFiniteDifference
+from astropy.coordinates.representation import CartesianRepresentation
+from astropy.coordinates.matrix_utilities import rotation_matrix, matrix_transpose
+
+from .itrs import ITRS
+from .altaz import AltAz
+from .hadec import HADec
+from .utils import PIOVER2
+
+def itrs_to_observed_mat(observed_frame, obstime=None):
+    """Form the rotation matrix to transform from ITRS to observed frame.
+    
+    Parameters
+    ----------
+    observed_frame : `~astropy.coordinates.AltAz` or `~astropy.coordinates.HADec`
+        The target frame for the transformation.
+    obstime : Time, optional
+        The time at which to compute the transformation matrix.
+        
+    Returns
+    -------
+    matrix : `~numpy.ndarray`
+        A 3x3 rotation matrix for transforming ITRS vectors to the observed frame.
+    """
+    # Get the observer's location at the reference time
+    location = observed_frame.location
+    if obstime is not None:
+        location = location.get_itrs(obstime).earth_location
+    lon, lat, height = location.to_geodetic('WGS84')
+    elong = lon.to_value(u.radian)
+    elat = lat.to_value(u.radian)
+
+    if isinstance(observed_frame, AltAz):
+        # form ITRS to AltAz matrix
+        # First rotate to align with local meridian
+        rot_z = rotation_matrix(elong, 'z', unit=u.radian)
+        # Then rotate to align with local horizon
+        rot_y = rotation_matrix(PIOVER2 - elat, 'y', unit=u.radian)
+        # AltAz frame is left handed
+        minus_x = np.eye(3)
+        minus_x[0][0] = -1.0
+        mat = minus_x @ rot_y @ rot_z
+    else:
+        # form ITRS to HADec matrix
+        # First rotate to align with local meridian
+        rot_z = rotation_matrix(elong, 'z', unit=u.radian)
+        # HADec frame is left handed
+        minus_y = np.eye(3)
+        minus_y[1][1] = -1.0
+        mat = minus_y @ rot_z
+    return mat
+
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ITRS, AltAz)
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ITRS, HADec)
+def itrs_to_observed(itrs_coo, observed_frame):
+    """Transform from ITRS to an observed frame (AltAz or HADec).
+    
+    This transformation stays entirely within the ITRS system and treats ITRS
+    positions as time-invariant. The transformation is purely geometric.
+    
+    Parameters
+    ----------
+    itrs_coo : ITRS
+        The ITRS coordinates to transform
+    observed_frame : AltAz or HADec
+        The target observed frame
+        
+    Returns
+    -------
+    observed_frame
+        The transformed coordinates in the target frame
+    
+    Notes
+    -----
+    This transformation treats ITRS coordinates as fixed in the Earth frame.
+    The transformation is purely geometric and uses the ITRS coordinate's
+    time as the reference epoch for all calculations.
+    """
+    # Always use the ITRS coordinate's time
+    # This ensures time invariance of ITRS positions
+    obstime = itrs_coo.obstime
+    
+    # Get observer's ITRS position at the ITRS time
+    observer_itrs = observed_frame.location.get_itrs(obstime)
+    
+    # Calculate topocentric position in ITRS
+    topocentric_itrs = itrs_coo.cartesian - observer_itrs.cartesian
+    
+    # Get observer's location in geodetic coordinates
+    lon, lat, height = observer_itrs.earth_location.to_geodetic('WGS84')
+    
+    # Create rotation matrices for local position
+    # First rotate to align with local meridian
+    rot_z = rotation_matrix(lon.radian, 'z', unit=u.radian)
+    # Then rotate to align with local horizon
+    rot_y = rotation_matrix(PIOVER2 - lat.radian, 'y', unit=u.radian)
+    
+    # Apply rotations to get to local frame
+    local_repr = topocentric_itrs.transform(rot_y @ rot_z)
+    
+    # Convert to appropriate handedness
+    if isinstance(observed_frame, AltAz):
+        # AltAz is left-handed
+        local_repr = CartesianRepresentation(-local_repr.x, local_repr.y, local_repr.z)
+    else:  # HADec
+        # HADec is left-handed
+        local_repr = CartesianRepresentation(local_repr.x, -local_repr.y, local_repr.z)
+    
+    # Return new frame with the ITRS time to maintain time invariance
+    return observed_frame.realize_frame(local_repr, obstime=obstime)
+
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, AltAz, ITRS)
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, HADec, ITRS)
+def observed_to_itrs(observed_coo, itrs_frame):
+    """Transform from an observed frame (AltAz or HADec) to ITRS.
+    
+    This transformation stays entirely within the ITRS system and treats ITRS
+    positions as time-invariant. The transformation is purely geometric.
+    
+    Parameters
+    ----------
+    observed_coo : AltAz or HADec
+        The observed frame coordinates to transform
+    itrs_frame : ITRS
+        The target ITRS frame
+        
+    Returns
+    -------
+    ITRS
+        The transformed coordinates in ITRS
+    
+    Notes
+    -----
+    This transformation treats ITRS coordinates as fixed in the Earth frame.
+    The transformation is purely geometric and uses the target ITRS frame's
+    time as the reference epoch for all calculations.
+    """
+    # Always use the target ITRS frame's time
+    # If not provided, use the observed frame's time
+    obstime = itrs_frame.obstime if itrs_frame.obstime is not None else observed_coo.obstime
+    
+    # Get observer's ITRS position at the reference time
+    observer_itrs = observed_coo.location.get_itrs(obstime)
+    
+    # Get observer's location in geodetic coordinates
+    lon, lat, height = observer_itrs.earth_location.to_geodetic('WGS84')
+    
+    # Create rotation matrices for the local position (inverse of forward transform)
+    # First rotate to align with local horizon (inverse)
+    rot_y = rotation_matrix(-(PIOVER2 - lat.radian), 'y', unit=u.radian)
+    # Then rotate to align with local meridian (inverse)
+    rot_z = rotation_matrix(-lon.radian, 'z', unit=u.radian)
+    
+    # Convert from observed frame representation to local frame
+    local_repr = observed_coo.cartesian
+    if isinstance(observed_coo, AltAz):
+        # Convert from left-handed AltAz
+        local_repr = CartesianRepresentation(-local_repr.x, local_repr.y, local_repr.z)
+    else:  # HADec
+        # Convert from left-handed HADec
+        local_repr = CartesianRepresentation(local_repr.x, -local_repr.y, local_repr.z)
+    
+    # Apply inverse rotations to get back to ITRS
+    topocentric_itrs = local_repr.transform(rot_z @ rot_y)
+    
+    # Add observer's position to get geocentric ITRS
+    rep = topocentric_itrs + observer_itrs.cartesian
+    
+    return itrs_frame.realize_frame(rep)
+
+# Create loopback transformations
+frame_transform_graph._add_merged_transform(AltAz, ITRS, AltAz)
+frame_transform_graph._add_merged_transform(HADec, ITRS, HADec)
