diff --git a/.gitignore b/.gitignore
index aad550ae53..826d8acebb 100644
--- a/.gitignore
+++ b/.gitignore
@@ -89,3 +89,4 @@ pip-wheel-metadata
 
 # Files generated if figure tests are run
 results
+.aider/
diff --git a/astropy/units/format/cds.py b/astropy/units/format/cds.py
index 307e987ed6..50ba041f69 100644
--- a/astropy/units/format/cds.py
+++ b/astropy/units/format/cds.py
@@ -153,9 +153,10 @@ class CDS(Base):
                  | factor
             """
             from astropy.units import dex
-            from astropy.units.core import Unit
+            from astropy.units.core import Unit, CompositeUnit
 
             if len(p) == 3:
+                # Simply multiply the factor with the unit
                 p[0] = Unit(p[1] * p[2])
             elif len(p) == 4:
                 p[0] = dex(p[2])
@@ -182,12 +183,40 @@ class CDS(Base):
         def p_division_of_units(p):
             """
             division_of_units : DIVISION unit_expression
-                              | unit_expression DIVISION combined_units
+                              | unit_expression DIVISION division_product
             """
+            from astropy.units.core import Unit, CompositeUnit
             if len(p) == 3:
                 p[0] = p[2] ** -1
             else:
-                p[0] = p[1] / p[3]
+                # For sequential divisions like 'J/m/s'
+                if isinstance(p[3], dict):
+                    # If p[3] has accumulated denominators, use them in order
+                    numerator = p[1]
+                    denominators = p[3]['denominators']
+                    # Create a composite unit with proper ordering
+                    denom = denominators[0]
+                    for d in denominators[1:]:
+                        denom = denom * d
+                    p[0] = numerator / denom
+                else:
+                    p[0] = p[1] / p[3]
+
+        def p_division_product(p):
+            """
+            division_product : unit_expression
+                           | unit_expression DIVISION division_product
+            """
+            if len(p) == 2:
+                p[0] = p[1]
+            else:
+                # For sequential divisions, track denominators in order
+                if isinstance(p[3], dict):
+                    # If p[3] already has denominators, extend them
+                    denominators = [p[1]] + p[3]['denominators']
+                else:
+                    denominators = [p[1], p[3]]
+                p[0] = {'denominators': denominators}
 
         def p_unit_expression(p):
             """
