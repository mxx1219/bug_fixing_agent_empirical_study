diff --git a/.gitignore b/.gitignore
index 238fb3a200..521baaa795 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,4 @@ tests/coverage_html/
 tests/.coverage
 build/
 tests/report/
+.aider/
diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index aaf35ee37c..567cb78daf 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -761,7 +761,14 @@ class Query(BaseExpression):
 
         # Create a new alias for this table.
         if alias_list:
-            alias = '%s%d' % (self.alias_prefix, len(self.alias_map) + 1)
+            # Find the next available alias number that doesn't conflict
+            counter = len(self.alias_map) + 1
+            while True:
+                alias = '%s%d' % (self.alias_prefix, counter)
+                # Check if this alias is already in use or planned for use
+                if alias not in self.alias_map and alias not in self.alias_refcount:
+                    break
+                counter += 1
             alias_list.append(alias)
         else:
             # The first occurrence of a table uses the table name directly.
@@ -845,8 +852,31 @@ class Query(BaseExpression):
         Change the aliases in change_map (which maps old-alias -> new-alias),
         relabelling any references to them in select columns and the where
         clause.
-        """
-        assert set(change_map).isdisjoint(change_map.values())
+
+        The change_map dictionary maps old_alias -> new_alias. An alias can't
+        be used as both an old alias and a new alias as this could cause
+        incorrect results from double renaming.
+        """
+        # If there's a conflict, generate new non-conflicting aliases
+        if not set(change_map).isdisjoint(change_map.values()):
+            new_change_map = {}
+            used_aliases = set(self.alias_map) | set(change_map.values())
+            
+            # Find new unique aliases for each conflicting one
+            for old_alias, new_alias in change_map.items():
+                if new_alias in change_map:  # This is a conflicting alias
+                    counter = len(self.alias_map) + 1
+                    while True:
+                        candidate = f"{self.alias_prefix}{counter}"
+                        if candidate not in used_aliases:
+                            new_change_map[old_alias] = candidate
+                            used_aliases.add(candidate)
+                            break
+                        counter += 1
+                else:
+                    new_change_map[old_alias] = new_alias
+            
+            change_map = new_change_map
 
         # 1. Update references in "select" (normal columns plus aliases),
         # "group by" and "where".
