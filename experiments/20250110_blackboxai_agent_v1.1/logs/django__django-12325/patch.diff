diff --git a/.gitignore b/.gitignore
index 238fb3a200..521baaa795 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,4 @@ tests/coverage_html/
 tests/.coverage
 build/
 tests/report/
+.aider/
diff --git a/django/db/models/base.py b/django/db/models/base.py
index 8ea6c05ef9..2b889ec284 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -8,8 +8,8 @@ from django.apps import apps
 from django.conf import settings
 from django.core import checks
 from django.core.exceptions import (
-    NON_FIELD_ERRORS, FieldDoesNotExist, FieldError, MultipleObjectsReturned,
-    ObjectDoesNotExist, ValidationError,
+    NON_FIELD_ERRORS, FieldDoesNotExist, FieldError, ImproperlyConfigured,
+    MultipleObjectsReturned, ObjectDoesNotExist, ValidationError,
 )
 from django.db import (
     DEFAULT_DB_ALIAS, DJANGO_VERSION_PICKLE_KEY, DatabaseError, connection,
@@ -201,10 +201,27 @@ class ModelBase(type):
             if base != new_class and not base._meta.abstract:
                 continue
             # Locate OneToOneField instances.
+            # First pass: collect and validate fields with parent_link=True
+            parent_link_count = {}
             for field in base._meta.local_fields:
-                if isinstance(field, OneToOneField):
+                if isinstance(field, OneToOneField) and field.remote_field.parent_link:
                     related = resolve_relation(new_class, field.remote_field.model)
-                    parent_links[make_model_tuple(related)] = field
+                    related_tuple = make_model_tuple(related)
+                    if related_tuple in parent_link_count:
+                        raise ImproperlyConfigured(
+                            "Multiple parent_link=True fields to the same model '%s.%s' are not allowed." % 
+                            (related._meta.app_label, related._meta.model_name)
+                        )
+                    parent_link_count[related_tuple] = field
+                    parent_links[related_tuple] = field
+            
+            # Second pass: collect remaining OneToOneFields only if no parent_link exists
+            for field in base._meta.local_fields:
+                if isinstance(field, OneToOneField) and not field.remote_field.parent_link:
+                    related = resolve_relation(new_class, field.remote_field.model)
+                    related_tuple = make_model_tuple(related)
+                    if related_tuple not in parent_links:
+                        parent_links[related_tuple] = field
 
         # Track fields inherited from base models.
         inherited_attributes = set()
