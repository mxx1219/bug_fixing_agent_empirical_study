diff --git a/.gitignore b/.gitignore
index 238fb3a200..521baaa795 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,4 @@ tests/coverage_html/
 tests/.coverage
 build/
 tests/report/
+.aider/
diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py
index 3a462f1c4c..db60194f01 100644
--- a/django/db/models/deletion.py
+++ b/django/db/models/deletion.py
@@ -231,10 +231,30 @@ class Collector:
     def related_objects(self, related, objs):
         """
         Get a QuerySet of objects related to `objs` via the relation `related`.
+        Only fetches the primary key and foreign key fields needed for deletion.
         """
+        # Get the required fields: primary key and foreign key
+        fields = [related.related_model._meta.pk.name, related.field.name]
+        
+        # Add fields that are part of unique constraints if they exist
+        # First check unique_together which is available in all Django versions
+        unique_together = getattr(related.related_model._meta, 'unique_together', [])
+        if unique_together:
+            for constraint in unique_together:
+                fields.extend(constraint)
+                
+        # Then check unique_constraints if available (Django 2.2+)
+        unique_constraints = getattr(related.related_model._meta, 'unique_constraints', [])
+        if unique_constraints:
+            for constraint in unique_constraints:
+                fields.extend(constraint.fields)
+        
+        # Make fields unique while preserving order
+        fields = list(dict.fromkeys(fields))
+        
         return related.related_model._base_manager.using(self.using).filter(
             **{"%s__in" % related.field.name: objs}
-        )
+        ).only(*fields)
 
     def instances_with_model(self):
         for model, instances in self.data.items():
