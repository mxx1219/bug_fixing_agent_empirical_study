diff --git a/.gitignore b/.gitignore
index 238fb3a200..521baaa795 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,4 @@ tests/coverage_html/
 tests/.coverage
 build/
 tests/report/
+.aider/
diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py
index b5453160a5..1a19521618 100644
--- a/django/contrib/sessions/backends/base.py
+++ b/django/contrib/sessions/backends/base.py
@@ -107,17 +107,38 @@ class SessionBase:
         return salted_hmac(key_salt, value).hexdigest()
 
     def encode(self, session_dict):
-        "Return the given session dictionary serialized and encoded as a string."
+        """Return the given session dictionary serialized and encoded as a string."""
+        # During transition period, always use legacy format when sha1 is configured
+        if getattr(settings, 'DEFAULT_HASHING_ALGORITHM', None) == 'sha1':
+            serialized = self.serializer().dumps(session_dict)
+            hash = self._hash(serialized)
+            return base64.b64encode(hash.encode() + b":" + serialized).decode('ascii')
+        
+        # Otherwise use the new format
         return signing.dumps(
             session_dict, salt=self.key_salt, serializer=self.serializer,
             compress=True,
         )
 
     def decode(self, session_data):
+        """Decode the session data string."""
+        # During transition period, always try legacy format first when sha1 is configured
+        if getattr(settings, 'DEFAULT_HASHING_ALGORITHM', None) == 'sha1':
+            try:
+                return self._legacy_decode(session_data)
+            except Exception:
+                # Only if legacy decode fails, try the new format with sha1
+                original_algorithm = settings.DEFAULT_HASHING_ALGORITHM
+                try:
+                    # Temporarily set algorithm to sha256 for decoding new format
+                    settings.DEFAULT_HASHING_ALGORITHM = 'sha256'
+                    return signing.loads(session_data, salt=self.key_salt, serializer=self.serializer)
+                finally:
+                    settings.DEFAULT_HASHING_ALGORITHM = original_algorithm
+        
+        # For non-sha1 cases, try new format first then fallback to legacy
         try:
             return signing.loads(session_data, salt=self.key_salt, serializer=self.serializer)
-        # RemovedInDjango40Warning: when the deprecation ends, handle here
-        # exceptions similar to what _legacy_decode() does now.
         except Exception:
             return self._legacy_decode(session_data)
