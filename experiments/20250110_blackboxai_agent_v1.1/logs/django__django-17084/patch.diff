diff --git a/.gitignore b/.gitignore
index 6a67c6eb28..cd0195a6d7 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,4 @@ tests/coverage_html/
 tests/.coverage*
 build/
 tests/report/
+.aider/
diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 13a6809dd8..297fcdc443 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -403,6 +403,7 @@ class Query(BaseExpression):
         # Store annotation mask prior to temporarily adding aggregations for
         # resolving purpose to facilitate their subsequent removal.
         refs_subquery = False
+        refs_window = False
         replacements = {}
         annotation_select_mask = self.annotation_select_mask
         for alias, aggregate_expr in aggregate_exprs.items():
@@ -419,6 +420,11 @@ class Query(BaseExpression):
                 getattr(self.annotations[ref], "subquery", False)
                 for ref in aggregate.get_refs()
             )
+            # Check if any referenced annotation contains a window function
+            refs_window |= any(
+                getattr(self.annotations[ref], "contains_over_clause", False)
+                for ref in aggregate.get_refs()
+            )
             aggregate = aggregate.replace_expressions(replacements)
             self.annotations[alias] = aggregate
             replacements[Ref(alias, aggregate)] = aggregate
@@ -446,11 +452,19 @@ class Query(BaseExpression):
         # those operations must be done in a subquery so that the query
         # aggregates on the limit and/or distinct results instead of applying
         # the distinct and limit after the aggregation.
+        #
+        # If the query contains window functions and we're aggregating over them,
+        # we need to use a subquery to compute the window functions first.
+        refs_window = any(
+            getattr(annotation, "contains_over_clause", False)
+            for annotation in self.annotations.values()
+        )
         if (
             isinstance(self.group_by, tuple)
             or self.is_sliced
             or has_existing_aggregation
             or refs_subquery
+            or refs_window  # Force subquery if aggregating over window functions
             or qualify
             or self.distinct
             or self.combinator
