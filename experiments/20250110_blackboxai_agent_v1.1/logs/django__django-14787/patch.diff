diff --git a/.gitignore b/.gitignore
index 238fb3a200..521baaa795 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,4 @@ tests/coverage_html/
 tests/.coverage
 build/
 tests/report/
+.aider/
diff --git a/django/utils/decorators.py b/django/utils/decorators.py
index 5c9a5d01c7..1d8c8275f7 100644
--- a/django/utils/decorators.py
+++ b/django/utils/decorators.py
@@ -32,12 +32,31 @@ def _multi_decorate(decorators, method):
     else:
         decorators = [decorators]
 
-    def _wrapper(self, *args, **kwargs):
-        # bound_method has the signature that 'decorator' expects i.e. no
-        # 'self' argument, but it's a closure over self so it can call
-        # 'func'. Also, wrap method.__get__() in a function because new
-        # attributes can't be set on bound method objects, only on functions.
-        bound_method = partial(method.__get__(self, type(self)))
+    # Get the original function from static/class method if present
+    original_method = method
+    if isinstance(method, (staticmethod, classmethod)):
+        original_method = method.__get__(None, type)
+
+    def _wrapper(*args, **kwargs):
+        if isinstance(method, classmethod):
+            # For classmethods, first arg is cls
+            cls = args[0]
+            bound_method = original_method.__get__(None, cls)
+            # Don't include cls in args as it's already bound
+            args = args[1:]
+        elif isinstance(method, staticmethod):
+            # For staticmethods
+            bound_method = original_method
+        else:
+            # For instance methods, first arg is self
+            self, *args = args
+            bound_method = method.__get__(self, type(self))
+
+        # Create partial and preserve attributes
+        partial_bound = partial(bound_method)
+        update_wrapper(partial_bound, bound_method)
+        bound_method = partial_bound
+        
         for dec in decorators:
             bound_method = dec(bound_method)
         return bound_method(*args, **kwargs)
@@ -47,6 +66,12 @@ def _multi_decorate(decorators, method):
         _update_method_wrapper(_wrapper, dec)
     # Preserve any existing attributes of 'method', including the name.
     update_wrapper(_wrapper, method)
+    
+    # Re-wrap as static/class method if needed
+    if isinstance(method, staticmethod):
+        return staticmethod(_wrapper)
+    elif isinstance(method, classmethod):
+        return classmethod(_wrapper)
     return _wrapper
