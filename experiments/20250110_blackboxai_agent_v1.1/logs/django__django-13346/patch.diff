diff --git a/.gitignore b/.gitignore
index 238fb3a200..521baaa795 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,4 @@ tests/coverage_html/
 tests/.coverage
 build/
 tests/report/
+.aider/
diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py
index fafc1beee8..74b150ec77 100644
--- a/django/db/models/fields/json.py
+++ b/django/db/models/fields/json.py
@@ -479,6 +479,47 @@ class KeyTransformGte(KeyTransformNumericLookupMixin, lookups.GreaterThanOrEqual
     pass
 
 
+class KeyTransformIn(lookups.In):
+    def get_prep_lookup(self):
+        if hasattr(self.rhs, 'resolve_expression'):
+            return self.rhs
+        prepared_values = []
+        for rhs_value in self.rhs:
+            if hasattr(self.lhs.output_field, 'get_prep_value'):
+                rhs_value = self.lhs.output_field.get_prep_value(rhs_value)
+            prepared_values.append(rhs_value)
+        return prepared_values
+
+    def process_rhs(self, compiler, connection):
+        rhs, rhs_params = super().process_rhs(compiler, connection)
+        if rhs_params and not connection.features.has_native_json_field:
+            # For numeric values, convert them to strings to match JSON_EXTRACT behavior
+            rhs_params = [str(val) if isinstance(val, (int, float)) else json.dumps(val) for val in rhs_params]
+        return rhs, rhs_params
+
+    def as_sql(self, compiler, connection):
+        if hasattr(self.lhs, 'key_name'):
+            lhs_sql, lhs_params = compiler.compile(self.lhs.lhs)
+            rhs, rhs_params = self.process_rhs(compiler, connection)
+            key_name = self.lhs.key_name
+            
+            # Handle database-specific JSON extraction for both LHS and RHS
+            if connection.vendor == 'sqlite':
+                lhs = f"JSON_EXTRACT({lhs_sql}, '$.\"{key_name}\"')"
+                rhs_sql = ', '.join(f"JSON_EXTRACT(%s, '$')" for _ in rhs_params)
+            elif connection.vendor == 'mysql':
+                lhs = f"JSON_EXTRACT({lhs_sql}, '$.\"{key_name}\"')"
+                rhs_sql = ', '.join(f"JSON_EXTRACT(%s, '$')" for _ in rhs_params)
+            elif connection.vendor == 'oracle':
+                lhs = f"JSON_VALUE({lhs_sql}, '$.{key_name}')"
+                rhs_sql = ', '.join('TO_CHAR(%s)' for _ in rhs_params)
+            
+            params = tuple(lhs_params) + tuple(rhs_params)
+            return f"{lhs} IN ({rhs_sql})", params
+            
+        return super().as_sql(compiler, connection)
+
+
 KeyTransform.register_lookup(KeyTransformExact)
 KeyTransform.register_lookup(KeyTransformIExact)
 KeyTransform.register_lookup(KeyTransformIsNull)
@@ -494,6 +535,7 @@ KeyTransform.register_lookup(KeyTransformLt)
 KeyTransform.register_lookup(KeyTransformLte)
 KeyTransform.register_lookup(KeyTransformGt)
 KeyTransform.register_lookup(KeyTransformGte)
+KeyTransform.register_lookup(KeyTransformIn)
 
 
 class KeyTransformFactory:
