diff --git a/.gitignore b/.gitignore
index 238fb3a200..521baaa795 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,4 @@ tests/coverage_html/
 tests/.coverage
 build/
 tests/report/
+.aider/
diff --git a/django/contrib/contenttypes/fields.py b/django/contrib/contenttypes/fields.py
index ed98ecb48c..f6decb041a 100644
--- a/django/contrib/contenttypes/fields.py
+++ b/django/contrib/contenttypes/fields.py
@@ -1,8 +1,9 @@
+import uuid
 from collections import defaultdict
 
 from django.contrib.contenttypes.models import ContentType
 from django.core import checks
-from django.core.exceptions import FieldDoesNotExist, ObjectDoesNotExist
+from django.core.exceptions import FieldDoesNotExist, ObjectDoesNotExist, ValidationError
 from django.db import DEFAULT_DB_ALIAS, models, router, transaction
 from django.db.models import DO_NOTHING
 from django.db.models.base import ModelBase, make_foreign_order_accessors
@@ -191,7 +192,23 @@ class GenericForeignKey(FieldCacheMixin):
         for ct_id, fkeys in fk_dict.items():
             instance = instance_dict[ct_id]
             ct = self.get_content_type(id=ct_id, using=instance._state.db)
-            ret_val.extend(ct.get_all_objects_for_this_type(pk__in=fkeys))
+            model = ct.model_class()
+            
+            # For UUID fields, convert valid UUIDs and filter out invalid ones
+            if isinstance(model._meta.pk, models.UUIDField):
+                valid_fkeys = set()
+                for fk in fkeys:
+                    try:
+                        if isinstance(fk, str):
+                            valid_fkeys.add(uuid.UUID(fk))
+                        else:
+                            valid_fkeys.add(fk)
+                    except ValueError:
+                        continue
+                fkeys = valid_fkeys
+            
+            if fkeys:  # Only query if we have valid keys
+                ret_val.extend(ct.get_all_objects_for_this_type(pk__in=fkeys))
 
         # For doing the join in Python, we have to match both the FK val and the
         # content type, so we use a callable that returns a (fk, class) pair.
@@ -201,9 +218,21 @@ class GenericForeignKey(FieldCacheMixin):
                 return None
             else:
                 model = self.get_content_type(id=ct_id,
-                                              using=obj._state.db).model_class()
-                return (model._meta.pk.get_prep_value(getattr(obj, self.fk_field)),
-                        model)
+                                          using=obj._state.db).model_class()
+                fk_val = getattr(obj, self.fk_field)
+                # Handle UUID fields by attempting to convert string to UUID first
+                if isinstance(model._meta.pk, models.UUIDField) and isinstance(fk_val, str):
+                    import uuid
+                    try:
+                        fk_val = uuid.UUID(fk_val)
+                    except ValueError:
+                        # If UUID is invalid, return None to indicate no match
+                        return None
+                try:
+                    return (model._meta.pk.get_prep_value(fk_val), model)
+                except (ValueError, TypeError):
+                    # If value preparation fails, return None to indicate no match
+                    return None
 
         return (
             ret_val,
@@ -237,8 +266,15 @@ class GenericForeignKey(FieldCacheMixin):
         if ct_id is not None:
             ct = self.get_content_type(id=ct_id, using=instance._state.db)
             try:
+                # For UUID fields, try to convert string to UUID first
+                model = ct.model_class()
+                if isinstance(model._meta.pk, models.UUIDField) and isinstance(pk_val, str):
+                    try:
+                        pk_val = uuid.UUID(pk_val)
+                    except ValueError:
+                        pass
                 rel_obj = ct.get_object_for_this_type(pk=pk_val)
-            except ObjectDoesNotExist:
+            except (ObjectDoesNotExist, ValidationError):
                 pass
         self.set_cached_value(instance, rel_obj)
         return rel_obj
