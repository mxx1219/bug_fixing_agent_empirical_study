diff --git a/.gitignore b/.gitignore
index 238fb3a200..521baaa795 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,4 @@ tests/coverage_html/
 tests/.coverage
 build/
 tests/report/
+.aider/
diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index d17232e4ec..ca77c7f0d5 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -915,16 +915,15 @@ class RenameIndex(IndexOperation):
 
     def state_forwards(self, app_label, state):
         if self.old_fields:
-            state.add_index(
-                app_label,
-                self.model_name_lower,
-                models.Index(fields=self.old_fields, name=self.new_name),
-            )
-            state.remove_model_options(
-                app_label,
-                self.model_name_lower,
-                AlterIndexTogether.option_name,
-                self.old_fields,
+            # Remove any existing index with the same fields
+            model_state = state.models[app_label, self.model_name_lower]
+            model_state.options['indexes'] = [
+                idx for idx in model_state.options.get('indexes', [])
+                if not (isinstance(idx, models.Index) and idx.fields == self.old_fields)
+            ]
+            # Add the new index
+            model_state.options.setdefault('indexes', []).append(
+                models.Index(fields=self.old_fields, name=self.new_name)
             )
         else:
             state.rename_index(
@@ -937,52 +936,121 @@ class RenameIndex(IndexOperation):
             return
 
         if self.old_fields:
+            # Get the current index name
             from_model = from_state.apps.get_model(app_label, self.model_name)
             columns = [
                 from_model._meta.get_field(field).column for field in self.old_fields
             ]
-            matching_index_name = schema_editor._constraint_names(
+            old_index_name = schema_editor._constraint_names(
                 from_model, column_names=columns, index=True
             )
-            if len(matching_index_name) != 1:
+            if len(old_index_name) != 1:
                 raise ValueError(
                     "Found wrong number (%s) of indexes for %s(%s)."
                     % (
-                        len(matching_index_name),
+                        len(old_index_name),
                         from_model._meta.db_table,
                         ", ".join(columns),
                     )
                 )
-            old_index = models.Index(
-                fields=self.old_fields,
-                name=matching_index_name[0],
-            )
+            old_index = models.Index(fields=self.old_fields, name=old_index_name[0])
+            new_index = models.Index(fields=self.old_fields, name=self.new_name)
+            schema_editor.rename_index(model, old_index, new_index)
         else:
             from_model_state = from_state.models[app_label, self.model_name_lower]
             old_index = from_model_state.get_index_by_name(self.old_name)
-
-        to_model_state = to_state.models[app_label, self.model_name_lower]
-        new_index = to_model_state.get_index_by_name(self.new_name)
-        schema_editor.rename_index(model, old_index, new_index)
+            to_model_state = to_state.models[app_label, self.model_name_lower]
+            new_index = to_model_state.get_index_by_name(self.new_name)
+            schema_editor.rename_index(model, old_index, new_index)
 
     def database_backwards(self, app_label, schema_editor, from_state, to_state):
-        if self.old_fields:
-            # Backward operation with unnamed index is a no-op.
+        model = from_state.apps.get_model(app_label, self.model_name)
+        if not self.allow_migrate_model(schema_editor.connection.alias, model):
             return
 
-        self.new_name_lower, self.old_name_lower = (
-            self.old_name_lower,
-            self.new_name_lower,
+        # Drop the current index
+        schema_editor.execute(
+            schema_editor.sql_delete_index % {
+                "table": schema_editor.quote_name(model._meta.db_table),
+                "name": schema_editor.quote_name(self.new_name),
+            }
         )
-        self.new_name, self.old_name = self.old_name, self.new_name
 
-        self.database_forwards(app_label, schema_editor, from_state, to_state)
+        if self.old_fields:
+            # Get the current index name from from_state
+            from_model = from_state.apps.get_model(app_label, self.model_name)
+            columns = [
+                from_model._meta.get_field(field).column for field in self.old_fields
+            ]
+            # Get the original auto-generated name from to_state
+            to_model = to_state.apps.get_model(app_label, self.model_name)
+            original_name = schema_editor._constraint_names(
+                to_model, column_names=columns, index=True
+            )[0]
+
+            # Drop any existing index with the original name
+            with schema_editor.connection.cursor() as cursor:
+                cursor.execute(
+                    """
+                    SELECT 1 FROM pg_indexes 
+                    WHERE tablename = %s AND indexname = %s
+                    """,
+                    [model._meta.db_table, original_name]
+                )
+                if cursor.fetchone():
+                    schema_editor.execute(
+                        schema_editor.sql_delete_index % {
+                            "table": schema_editor.quote_name(model._meta.db_table),
+                            "name": schema_editor.quote_name(original_name),
+                        }
+                    )
 
-        self.new_name_lower, self.old_name_lower = (
-            self.old_name_lower,
-            self.new_name_lower,
-        )
-        self.new_name, self.old_name = self.old_name, self.new_name
+            # Create a new index with the original name
+            fields = [model._meta.get_field(field_name) for field_name in self.old_fields]
+            sql = schema_editor._create_index_sql(
+                model,
+                fields=fields,
+                name=original_name,
+                using='',
+                db_tablespace=None,
+                col_suffixes=(),
+                opclasses=(),
+            )
+            schema_editor.execute(sql)
+        else:
+            # For named indexes, get the index definition from the state
+            to_model_state = to_state.models[app_label, self.model_name_lower]
+            old_index = to_model_state.get_index_by_name(self.old_name)
+
+            # Drop any existing index with the old name
+            with schema_editor.connection.cursor() as cursor:
+                cursor.execute(
+                    """
+                    SELECT 1 FROM pg_indexes 
+                    WHERE tablename = %s AND indexname = %s
+                    """,
+                    [model._meta.db_table, self.old_name]
+                )
+                if cursor.fetchone():
+                    schema_editor.execute(
+                        schema_editor.sql_delete_index % {
+                            "table": schema_editor.quote_name(model._meta.db_table),
+                            "name": schema_editor.quote_name(self.old_name),
+                        }
+                    )
+
+            # Create a new index with the old name
+            fields = [model._meta.get_field(field_name) for field_name in old_index.fields]
+            sql = schema_editor._create_index_sql(
+                model,
+                fields=fields,
+                name=self.old_name,
+                using='',
+                db_tablespace=None,
+                col_suffixes=(),
+                opclasses=(),
+            )
+            schema_editor.execute(sql)
 
     def describe(self):
         if self.old_name:
