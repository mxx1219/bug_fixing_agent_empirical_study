diff --git a/.gitignore b/.gitignore
index 1efe03bb1f..cdf2c2b141 100644
--- a/.gitignore
+++ b/.gitignore
@@ -86,3 +86,4 @@ v
 
 .tmp
 pip-wheel-metadata
+.aider/
diff --git a/astropy/wcs/wcsapi/wrappers/sliced_wcs.py b/astropy/wcs/wcsapi/wrappers/sliced_wcs.py
index d7605b078c..6bcdecef90 100644
--- a/astropy/wcs/wcsapi/wrappers/sliced_wcs.py
+++ b/astropy/wcs/wcsapi/wrappers/sliced_wcs.py
@@ -243,15 +243,51 @@ class SlicedLowLevelWCS(BaseWCSWrapper):
         return world_arrays
 
     def world_to_pixel_values(self, *world_arrays):
-        world_arrays = tuple(map(np.asanyarray, world_arrays))
+        # Convert inputs to arrays and determine common shape
+        world_arrays = [np.asanyarray(w) for w in world_arrays]
+        if world_arrays:
+            shapes = [w.shape for w in world_arrays]
+            if not all(s == shapes[0] for s in shapes):
+                world_arrays = np.broadcast_arrays(*world_arrays)
+            common_shape = world_arrays[0].shape
+        else:
+            common_shape = ()
+
+        # Create new world arrays including dropped dimensions
         world_arrays_new = []
-        iworld_curr = -1
+        world_idx = 0
+        
         for iworld in range(self._wcs.world_n_dim):
             if iworld in self._world_keep:
-                iworld_curr += 1
-                world_arrays_new.append(world_arrays[iworld_curr])
+                # For dimensions we're keeping, use the input values
+                world_arrays_new.append(world_arrays[world_idx])
+                world_idx += 1
             else:
-                world_arrays_new.append(1.)
+                # For dropped dimensions, use the slice value or reference value
+                slice_val = None
+                
+                # Check if this world axis is correlated with any sliced pixel axis
+                for ipix, slice_obj in enumerate(self._slices_pixel):
+                    if isinstance(slice_obj, int) and self._wcs.axis_correlation_matrix[iworld, ipix]:
+                        # Convert the integer slice to world coordinates
+                        temp_pixels = [0] * self._wcs.pixel_n_dim
+                        temp_pixels[ipix] = slice_obj
+                        world_vals = self._wcs.pixel_to_world_values(*temp_pixels)
+                        slice_val = world_vals[iworld]
+                        break
+                
+                if slice_val is None:
+                    # If no integer slice found, use the reference value
+                    try:
+                        slice_val = self._wcs.wcs.crval[iworld]
+                    except (AttributeError, IndexError):
+                        slice_val = 0.0
+                
+                # Broadcast the slice_val to match the shape of input arrays
+                if common_shape:
+                    slice_val = np.broadcast_to(slice_val, common_shape)
+                
+                world_arrays_new.append(slice_val)
 
         world_arrays_new = np.broadcast_arrays(*world_arrays_new)
         pixel_arrays = list(self._wcs.world_to_pixel_values(*world_arrays_new))
