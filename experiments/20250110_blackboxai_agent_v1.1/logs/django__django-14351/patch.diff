diff --git a/.gitignore b/.gitignore
index 238fb3a200..521baaa795 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,4 @@ tests/coverage_html/
 tests/.coverage
 build/
 tests/report/
+.aider/
diff --git a/django/db/models/fields/related_lookups.py b/django/db/models/fields/related_lookups.py
index d745ecd5f9..0ea41b7df7 100644
--- a/django/db/models/fields/related_lookups.py
+++ b/django/db/models/fields/related_lookups.py
@@ -86,18 +86,13 @@ class RelatedIn(In):
                     AND)
             return root_constraint.as_sql(compiler, connection)
         else:
-            if (not getattr(self.rhs, 'has_select_fields', True) and
-                    not getattr(self.lhs.field.target_field, 'primary_key', False)):
-                self.rhs.clear_select_clause()
-                if (getattr(self.lhs.output_field, 'primary_key', False) and
-                        self.lhs.output_field.model == self.rhs.model):
-                    # A case like Restaurant.objects.filter(place__in=restaurant_qs),
-                    # where place is a OneToOneField and the primary key of
-                    # Restaurant.
-                    target_field = self.lhs.field.name
-                else:
-                    target_field = self.lhs.field.target_field.name
-                self.rhs.add_fields([target_field], True)
+            if hasattr(self.rhs, 'query'):
+                # Always ensure subquery only selects the target field
+                self.rhs.query.clear_select_clause()
+                target_field = self.lhs.field.target_field.name
+                self.rhs.query.add_fields([target_field])
+                # Prevent recursive processing of filters
+                self.rhs.query._filtered = True
             return super().as_sql(compiler, connection)
 
 
diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py
index 5089737034..d594e9a7dd 100644
--- a/django/db/models/lookups.py
+++ b/django/db/models/lookups.py
@@ -401,9 +401,10 @@ class In(FieldGetDbPrepValueIterableMixin, BuiltinLookup):
             placeholder = '(' + ', '.join(sqls) + ')'
             return (placeholder, sqls_params)
         else:
-            if not getattr(self.rhs, 'has_select_fields', True):
-                self.rhs.clear_select_clause()
-                self.rhs.add_fields(['pk'])
+            # Always ensure subquery only selects the ID field
+            if hasattr(self.rhs, 'query'):
+                self.rhs.query.clear_select_clause()
+                self.rhs.query.add_fields([self.rhs.query.model._meta.pk.name])
             return super().process_rhs(compiler, connection)
 
     def get_rhs_op(self, connection, rhs):
diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py
index 188b640850..13ebbc2f9f 100644
--- a/django/db/models/query_utils.py
+++ b/django/db/models/query_utils.py
@@ -69,6 +69,16 @@ class Q(tree.Node):
         return obj
 
     def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False):
+        # Handle subqueries in OR conditions
+        if self.connector == self.OR:
+            for child in self.children:
+                if isinstance(child, tuple) and len(child) == 2:
+                    lookup, value = child
+                    if '__in' in lookup and hasattr(value, 'query'):
+                        # Force subquery to only select ID
+                        value.query.clear_select_clause()
+                        value.query.add_fields([value.query.model._meta.pk.name])
+
         # We must promote any new joins to left outer joins so that when Q is
         # used as an expression, rows aren't filtered due to joins.
         clause, joins = query._add_q(
diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index 7264929da8..683ebf067e 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -12,6 +12,8 @@ from django.db.models.query_utils import Q, select_related_descend
 from django.db.models.sql.constants import (
     CURSOR, GET_ITERATOR_CHUNK_SIZE, MULTI, NO_RESULTS, ORDER_DIR, SINGLE,
 )
+from django.db import models
+from django.db.models.sql.where import WhereNode, OR, AND
 from django.db.models.sql.query import Query, get_order_dir
 from django.db.transaction import TransactionManagementError
 from django.utils.functional import cached_property
@@ -68,6 +70,12 @@ class SQLCompiler:
         to describe in other words than "if it passes the test suite,
         then it is correct".
         """
+        # If this is a subquery in an OR condition, ensure we only select the ID
+        if (self.query.subquery and 
+            hasattr(self.query, 'where') and 
+            any(child.connector == OR for child in self.query.where.children)):
+            self.query.clear_select_clause()
+            self.query.add_fields([self.query.model._meta.pk.name])
         # Some examples:
         #     SomeModel.objects.annotate(Count('somecol'))
         #     GROUP BY: all fields of the model
@@ -452,6 +460,22 @@ class SQLCompiler:
         if vendor_impl:
             sql, params = vendor_impl(self, self.connection)
         else:
+            # Special handling for __in lookups in OR conditions
+            if isinstance(node, WhereNode):
+                # Check both current node and parent node for OR conditions
+                is_or_condition = node.connector == OR
+                has_or_parent = (hasattr(node, 'parent_node') and 
+                               getattr(node.parent_node, 'connector', None) == OR)
+                
+                if is_or_condition or has_or_parent:
+                    for child in node.children:
+                        if (hasattr(child, 'lookup_name') and 
+                            child.lookup_name == 'in' and 
+                            hasattr(child.rhs, 'query')):
+                            # Force the subquery to only select the ID
+                            subquery = child.rhs.query
+                            subquery.clear_select_clause()
+                            subquery.add_fields([subquery.model._meta.pk.name])
             sql, params = node.as_sql(self, self.connection)
         return sql, params
 
@@ -674,10 +698,7 @@ class SQLCompiler:
 
     def get_default_columns(self, start_alias=None, opts=None, from_parent=None):
         """
-        Compute the default columns for selecting every field in the base
-        model. Will sometimes be called to pull in related models (e.g. via
-        select_related), in which case "opts" and "start_alias" will be given
-        to provide a starting point for the traversal.
+        Compute the default columns for selecting every field in the base model.
 
         Return a list of strings, quoted appropriately for use in SQL
         directly, as well as a set of aliases used in the select statement (if
@@ -694,6 +715,21 @@ class SQLCompiler:
         # be used by local fields.
         seen_models = {None: start_alias}
 
+        # For subqueries in OR conditions with __in lookups, we only need the ID field
+        if self.query.subquery and getattr(self.query, 'where', None):
+            has_or_in = False
+            for child in self.query.where.children:
+                if getattr(child, 'connector', None) == 'OR':
+                    for subchild in child.children:
+                        if (hasattr(subchild, 'lookup_name') and subchild.lookup_name == 'in') or                            (hasattr(subchild, 'lhs') and hasattr(subchild.lhs, 'field') and                             isinstance(subchild.lhs.field, models.ForeignKey)):
+                            has_or_in = True
+                            break
+            if has_or_in:
+                # Only return the primary key field for __in subqueries in OR conditions
+                pk = opts.pk
+                alias = self.query.join_parent_model(opts, None, start_alias, seen_models)
+                return [pk.get_col(alias)]
+
         for field in opts.concrete_fields:
             model = field.model._meta.concrete_model
             # A proxy model will have a different model and concrete_model. We
diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 6629a1fd51..cca37df3a2 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -278,6 +278,11 @@ class Query(BaseExpression):
             raise ValueError("Need either using or connection")
         if using:
             connection = connections[using]
+        # Handle subqueries in OR conditions
+        if (self.subquery and hasattr(self, 'where') and 
+            any(child.connector == OR for child in self.where.children)):
+            self.clear_select_clause()
+            self.add_fields([self.model._meta.pk.name])
         return connection.ops.compiler(self.compiler)(self, connection, using)
 
     def get_meta(self):
@@ -308,6 +313,12 @@ class Query(BaseExpression):
             obj.annotation_select_mask = None
         else:
             obj.annotation_select_mask = self.annotation_select_mask.copy()
+            
+        # If this is a subquery in an OR condition, ensure we only select the ID
+        if (obj.subquery and hasattr(obj, 'where') and 
+            any(child.connector == OR for child in obj.where.children)):
+            obj.clear_select_clause()
+            obj.add_fields([obj.model._meta.pk.name])
         obj.combined_queries = tuple(query.clone() for query in self.combined_queries)
         # _annotation_select_cache cannot be copied, as doing so breaks the
         # (necessary) state in which both annotations and
@@ -1035,6 +1046,13 @@ class Query(BaseExpression):
         # Subqueries need to use a different set of aliases than the outer query.
         clone.bump_prefix(query)
         clone.subquery = True
+
+        # If this is a subquery in an OR condition, ensure we only select the ID
+        if (hasattr(query, 'where') and 
+            any(child.connector == OR for child in query.where.children)):
+            clone.clear_select_clause()
+            clone.add_fields([clone.model._meta.pk.name])
+
         # It's safe to drop ordering if the queryset isn't using slicing,
         # distinct(*fields) or select_for_update().
         if (self.low_mark == 0 and self.high_mark is None and
@@ -1069,10 +1087,12 @@ class Query(BaseExpression):
         return sql, params
 
     def resolve_lookup_value(self, value, can_reuse, allow_joins):
+        """
+        Prepare value for database query. If value is a query, prepare it as a
+        subquery.
+        """
         if hasattr(value, 'resolve_expression'):
-            value = value.resolve_expression(
-                self, reuse=can_reuse, allow_joins=allow_joins,
-            )
+            value = value.resolve_expression(self, allow_joins=allow_joins, reuse=can_reuse)
         elif isinstance(value, (list, tuple)):
             # The items of the iterable may be expressions and therefore need
             # to be resolved independently.
@@ -1084,6 +1104,30 @@ class Query(BaseExpression):
             if hasattr(type_, '_make'):  # namedtuple
                 return type_(*values)
             return type_(values)
+        if hasattr(value, 'get_compiler'):
+            if isinstance(value.output_field, Field):
+                # For instance, value could be a boolean expression.
+                return value
+            if isinstance(value, Query):
+                query = value
+            else:
+                value = value._chain() if hasattr(value, '_chain') else value
+                query = value.query
+            query.bump_prefix(self)
+            # If this is part of an OR condition, ensure we only select the ID
+            if hasattr(self, 'where') and any(child.connector == OR for child in self.where.children):
+                query.clear_select_clause()
+                query.add_fields([query.model._meta.pk.name])
+            else:
+                value = value.values('pk')
+            query.external_aliases = {t for t in self.external_aliases if t in query.tables}
+        if hasattr(value, 'values_list'):
+            # Limit the results, so that the filters don't produce
+            # super-huge in clauses.
+            value = value.values_list('pk', flat=True)
+            if hasattr(value, 'query'):
+                value.query.bump_prefix(self)
+                value.query.external_aliases = {t for t in self.external_aliases if t in value.query.tables}
         return value
 
     def solve_lookup_type(self, lookup):
@@ -1242,6 +1286,14 @@ class Query(BaseExpression):
         query. However, if the filter isn't added to the query then the caller
         is responsible for unreffing the joins used.
         """
+        # If this is part of an OR condition, ensure subqueries only select ID
+        if (hasattr(self, 'where') and 
+            any(child.connector == OR for child in self.where.children) and
+            isinstance(filter_expr, (list, tuple)) and len(filter_expr) == 2):
+            _, value = filter_expr
+            if hasattr(value, 'query'):
+                value.query.clear_select_clause()
+                value.query.add_fields([value.query.model._meta.pk.name])
         if isinstance(filter_expr, dict):
             raise FieldError("Cannot parse keyword query as dict")
         if isinstance(filter_expr, Q):
@@ -1278,6 +1330,13 @@ class Query(BaseExpression):
         value = self.resolve_lookup_value(value, can_reuse, allow_joins)
         used_joins = {k for k, v in self.alias_refcount.items() if v > pre_joins.get(k, 0)}
 
+        # Handle subqueries in OR conditions with __in lookups
+        if (hasattr(value, 'query') and lookups and lookups[0] == 'in' and 
+            hasattr(self, 'where') and 
+            any(child.connector == OR for child in self.where.children)):
+            value.query.clear_select_clause()
+            value.query.add_fields([value.query.model._meta.pk.name])
+
         if check_filterable:
             self.check_filterable(value)
 
@@ -1365,17 +1424,43 @@ class Query(BaseExpression):
         A preprocessor for the internal _add_q(). Responsible for doing final
         join promotion.
         """
-        # For join promotion this case is doing an AND for the added q_object
-        # and existing conditions. So, any existing inner join forces the join
-        # type to remain inner. Existing outer joins can however be demoted.
-        # (Consider case where rel_a is LOUTER and rel_a__col=1 is added - if
-        # rel_a doesn't produce any rows, then the whole condition must fail.
-        # So, demotion is OK.
+        # For join promotion this case is doing an AND for the current branch, so
+        # could use add_filter if there is no negation.
         existing_inner = {a for a in self.alias_map if self.alias_map[a].join_type == INNER}
-        clause, _ = self._add_q(q_object, self.used_aliases)
-        if clause:
-            self.where.add(clause, AND)
-        self.demote_joins(existing_inner)
+
+        # Prevent infinite recursion
+        if not hasattr(self, '_processing_q'):
+            self._processing_q = True
+            try:
+                if not q_object.negated and q_object.connector == AND:
+                    for child in q_object.children:
+                        if isinstance(child, Node):
+                            self.add_q(child)
+                        else:
+                            self.add_filter(child)
+                    return
+
+                # Handle subqueries in OR conditions
+                if not q_object.negated and q_object.connector == OR:
+                    for child in q_object.children:
+                        if isinstance(child, tuple) and len(child) == 2:
+                            lookup, value = child
+                            if '__in' in lookup and hasattr(value, 'query'):
+                                # Force subquery to only select ID
+                                value.query.clear_select_clause()
+                                value.query.add_fields([value.query.model._meta.pk.name])
+
+                clause, _ = self._add_q(q_object, self.used_aliases)
+                if clause:
+                    self.where.add(clause, AND)
+                self.demote_joins(existing_inner)
+            finally:
+                del self._processing_q
+        else:
+            # If we're already processing a Q object, just do the basic operation
+            clause, _ = self._add_q(q_object, self.used_aliases)
+            if clause:
+                self.where.add(clause, AND)
 
     def build_where(self, filter_expr):
         return self.build_filter(filter_expr, allow_joins=False)[0]
diff --git a/django/db/models/sql/where.py b/django/db/models/sql/where.py
index 795eff8395..682a7d3743 100644
--- a/django/db/models/sql/where.py
+++ b/django/db/models/sql/where.py
@@ -78,6 +78,15 @@ class WhereNode(tree.Node):
 
         for child in self.children:
             try:
+                # Special handling for __in lookups in OR conditions
+                if (self.connector == OR and 
+                    hasattr(child, 'lookup_name') and 
+                    child.lookup_name == 'in' and 
+                    hasattr(child.rhs, 'query')):
+                    # Force the subquery to only select the ID
+                    subquery = child.rhs.query
+                    subquery.clear_select_clause()
+                    subquery.add_fields([subquery.model._meta.pk.name])
                 sql, params = compiler.compile(child)
             except EmptyResultSet:
                 empty_needed -= 1
@@ -243,6 +252,13 @@ class SubqueryConstraint:
 
     def as_sql(self, compiler, connection):
         query = self.query_object
-        query.set_values(self.targets)
+        # If this is part of an OR condition, ensure we only select the ID
+        if (hasattr(compiler.query, 'where') and 
+            any(child.connector == OR for child in compiler.query.where.children)):
+            query.clear_select_clause()
+            query.add_fields([query.model._meta.pk.name])
+            self.columns = [(self.columns[0][0], self.columns[0][1])]
+        else:
+            query.set_values(self.targets)
         query_compiler = query.get_compiler(connection=connection)
         return query_compiler.as_subquery_condition(self.alias, self.columns, compiler)
