diff --git a/.gitignore b/.gitignore
index aad550ae53..826d8acebb 100644
--- a/.gitignore
+++ b/.gitignore
@@ -89,3 +89,4 @@ pip-wheel-metadata
 
 # Files generated if figure tests are run
 results
+.aider/
diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py
index abdeba8efb..4f74aa36a5 100644
--- a/astropy/io/ascii/rst.py
+++ b/astropy/io/ascii/rst.py
@@ -50,6 +50,13 @@ class RST(FixedWidth):
     or for ones which define column spans through the use of an additional
     line of dashes in the header.
 
+    Parameters
+    ----------
+    header_rows : list of str, optional
+        List specifying which header lines to include. For example, ["name", "unit"]
+        to include both column names and units in the header.
+
+
     """
 
     _format_name = "rst"
@@ -57,10 +64,82 @@ class RST(FixedWidth):
     data_class = SimpleRSTData
     header_class = SimpleRSTHeader
 
-    def __init__(self):
-        super().__init__(delimiter_pad=None, bookend=False)
+    def __init__(self, **kwargs):
+        super().__init__(delimiter_pad=None, bookend=False, **kwargs)
 
     def write(self, lines):
+        # Call parent's write method to get initial formatting
         lines = super().write(lines)
-        lines = [lines[1]] + lines + [lines[1]]
-        return lines
+        
+        if not hasattr(self, 'header_rows') or not self.header_rows:
+            # Original behavior for tables without header_rows
+            separator = lines[1]
+            return [separator] + lines + [separator]
+        
+        # For tables with header_rows
+        header_count = len(self.header_rows)
+        
+        # Get the original separator line which defines the column structure
+        separator = lines[1]
+        
+        # Find column positions and widths from the separator
+        col_bounds = []
+        start = 0
+        while start < len(separator):
+            # Skip spaces
+            while start < len(separator) and separator[start] == ' ':
+                start += 1
+            if start < len(separator):
+                # Find end of equals signs
+                end = start
+                while end < len(separator) and separator[end] == '=':
+                    end += 1
+                col_bounds.append((start, end))
+                start = end
+        
+        # Create result with proper RST format
+        result = []
+        
+        # Process header rows
+        header_lines = []
+        for i in range(header_count):
+            # Get the header columns
+            header_cols = lines[i].split()
+            
+            # Create a line template from separator
+            line = list(' ' * len(separator))
+            
+            # Place each column in the correct position
+            for (start, end), col in zip(col_bounds, header_cols):
+                width = end - start
+                # Calculate padding for centering
+                pad = (width - len(col)) // 2
+                # Place the column text
+                line[start + pad:start + pad + len(col)] = col
+            
+            # Add the formatted header line
+            header_lines.append(''.join(line))
+        
+        # Add headers with proper RST format
+        result.append(separator)  # Top separator
+        # Add header rows vertically stacked
+        for i, header_line in enumerate(header_lines):
+            result.append(header_line)
+        result.append(separator)  # Bottom separator
+        
+        # Add data rows (preserve original formatting)
+        for line in lines[header_count:-1]:
+            # Ensure data rows are properly aligned
+            data_cols = line.split()
+            data_line = list(' ' * len(separator))
+            for (start, end), col in zip(col_bounds, data_cols):
+                width = end - start
+                # Right-align data
+                pad = width - len(col)
+                data_line[start + pad:start + pad + len(col)] = col
+            result.append(''.join(data_line))
+        
+        # Add final separator
+        result.append(separator)
+        
+        return result
