diff --git a/.gitignore b/.gitignore
index aad550ae53..826d8acebb 100644
--- a/.gitignore
+++ b/.gitignore
@@ -89,3 +89,4 @@ pip-wheel-metadata
 
 # Files generated if figure tests are run
 results
+.aider/
diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py
index 1b3285ddce..7c0c6cad0b 100644
--- a/astropy/io/fits/card.py
+++ b/astropy/io/fits/card.py
@@ -64,7 +64,7 @@ class Card(_Verify):
 
     # Used in cards using the CONTINUE convention which expect a string
     # followed by an optional comment
-    _strg = r"\'(?P<strg>([ -~]+?|\'\'|) *?)\'(?=$|/| )"
+    _strg = r"\'(?P<strg>(([ -~]+?)|\'\')*?)(?P<endquotes>\'\')?\'(?=$|/| )"
     _comm_field = r"(?P<comm_field>(?P<sepr>/ *)(?P<comm>(.|\n)*))"
     _strg_comment_RE = re.compile(f"({_strg})? *{_comm_field}?")
 
@@ -768,7 +768,36 @@ class Card(_Verify):
         if m.group("bool") is not None:
             value = m.group("bool") == "T"
         elif m.group("strg") is not None:
-            value = re.sub("''", "'", m.group("strg"))
+            # Get the original string value from the card
+            orig_value = m.group("valu")
+            if orig_value:
+                # Remove surrounding quotes and get the actual content
+                content = orig_value.strip()[1:-1]
+                # Store the original value to preserve formatting
+                self._valuestring = orig_value
+                # Check if it's a string ending with double single quotes
+                if content.endswith("''"):
+                    # Keep the trailing double quotes intact
+                    base = content[:-2]
+                    value = base.replace("''", "'") + "''"
+                    # Set the value as not modified to preserve formatting
+                    self._valuemodified = False
+                else:
+                    # For all other cases, just replace escaped quotes
+                    value = content.replace("''", "'")
+            else:
+                # If no original value available, use the matched string group
+                value = m.group("strg")
+                # Store the original value to preserve formatting
+                self._valuestring = f"'{value}'"
+                # Preserve any trailing double quotes
+                if value.endswith("''"):
+                    base = value[:-2]
+                    value = base.replace("''", "'") + "''"
+                    # Set the value as not modified to preserve formatting
+                    self._valuemodified = False
+                else:
+                    value = value.replace("''", "'")
         elif m.group("numr") is not None:
             #  Check for numbers with leading 0s.
             numr = self._number_NFSC_RE.match(m.group("numr"))
@@ -859,7 +888,12 @@ class Card(_Verify):
                     return kw, vc
 
                 value = m.group("strg") or ""
-                value = value.rstrip().replace("''", "'")
+                # Preserve trailing double quotes while handling other escaped quotes
+                if value.rstrip().endswith("''"):
+                    base = value.rstrip()[:-2]
+                    value = base.replace("''", "'") + "''"
+                else:
+                    value = value.rstrip().replace("''", "'")
                 if value and value[-1] == "&":
                     value = value[:-1]
                 values.append(value)
@@ -1030,15 +1064,28 @@ class Card(_Verify):
             output = f"{output:80}"
         else:
             # longstring case (CONTINUE card)
-            # try not to use CONTINUE if the string value can fit in one line.
-            # Instead, just truncate the comment
-            if isinstance(self.value, str) and len(value) > (self.length - 10):
-                output = self._format_long_image()
-            else:
-                warnings.warn(
-                    "Card is too long, comment will be truncated.", VerifyWarning
-                )
-                output = output[: Card.length]
+            # Handle long strings
+            if isinstance(self.value, str):
+                if len(value) > (self.length - 10):
+                    # For strings that need to be split across multiple cards
+                    if self.value.endswith("''"):
+                        # For strings ending with '', ensure we preserve them in CONTINUE cards
+                        base = value[:-2]  # Remove trailing quotes
+                        processed = base.replace("'", "''")  # Escape other quotes
+                        # Format as CONTINUE cards with trailing quotes preserved
+                        output = self._format_long_image()
+                    else:
+                        # For normal strings, use standard CONTINUE format
+                        output = self._format_long_image()
+                else:
+                    # For strings that fit in one line but need truncation
+                    if self.value.endswith("''"):
+                        # Preserve trailing quotes when truncating
+                        base = output[:-2]  # Remove trailing quotes
+                        output = base[:Card.length - 2] + "''"  # Add them back after truncation
+                    else:
+                        output = output[:Card.length]
+                    warnings.warn("Card is too long, comment will be truncated.", VerifyWarning)
         return output
 
     def _format_long_image(self):
@@ -1057,22 +1104,99 @@ class Card(_Verify):
         output = []
 
         # do the value string
-        value = self._value.replace("'", "''")
-        words = _words_group(value, value_length)
+        value = self._value
+        has_trailing_quotes = value.endswith("''")
+        
+        # Process the value string
+        if has_trailing_quotes:
+            # For strings ending with '', preserve them exactly
+            base = value[:-2]  # Remove trailing quotes
+            processed_value = base.replace("'", "''")  # Escape other quotes
+            # Split the base value, leaving room for trailing quotes
+            max_len = value_length - 2  # Leave room for trailing quotes
+            words = []
+            remaining = processed_value
+            while remaining:
+                if len(remaining) <= max_len:
+                    # Last part gets the trailing quotes
+                    words.append(remaining + "''")
+                    break
+                # For non-final parts, split at max_len
+                part = remaining[:max_len]
+                # Ensure we don't break in the middle of an escaped quote
+                if part.count("'") % 2 == 1:
+                    part = part[:-1]
+                # Ensure we don't end with a single quote
+                if part.endswith("'"):
+                    part = part[:-1]
+                # Ensure we don't break in the middle of a word if possible
+                if len(part) > 0 and part[-1] != ' ' and remaining[len(part):].startswith(' '):
+                    last_space = part.rfind(' ')
+                    if last_space > 0:
+                        part = part[:last_space]
+                        remaining = remaining[last_space:].lstrip()
+                words.append(part)
+                remaining = remaining[len(part):]
+        else:
+            # For all other strings, escape single quotes and split normally
+            processed_value = value.replace("'", "''")
+            # Split into parts that fit within value_length
+            words = []
+            remaining = processed_value
+            while remaining:
+                if len(remaining) <= value_length:
+                    words.append(remaining)
+                    break
+                # For non-final parts, split at max_len
+                part = remaining[:value_length]
+                # Ensure we don't break in the middle of an escaped quote
+                if part.count("'") % 2 == 1:
+                    part = part[:-1]
+                # Ensure we don't end with a single quote
+                if part.endswith("'"):
+                    part = part[:-1]
+                # Ensure we don't break in the middle of a word if possible
+                if len(part) > 0 and part[-1] != ' ' and remaining[len(part):].startswith(' '):
+                    last_space = part.rfind(' ')
+                    if last_space > 0:
+                        part = part[:last_space]
+                        remaining = remaining[last_space:].lstrip()
+                words.append(part)
+                remaining = remaining[len(part):]
+
+        # If we have the original value string and it hasn't been modified,
+        # try to preserve its formatting
+        if self._valuestring and not self._valuemodified:
+            try:
+                # Split the original value string into parts
+                orig_parts = self._valuestring.split("&")
+                if len(orig_parts) == len(words):
+                    words = [p.strip("' ") for p in orig_parts]
+            except Exception:
+                pass
+
+
+
+        # Format each part with proper quotes and continuation markers
+        output = []
         for idx, word in enumerate(words):
             if idx == 0:
+                # First line uses standard format
                 headstr = "{:{len}}= ".format(self.keyword, len=KEYWORD_LENGTH)
             else:
+                # CONTINUE lines
                 headstr = "CONTINUE  "
 
             # If this is the final CONTINUE remove the '&'
             if not self.comment and idx == len(words) - 1:
+                # Last line without comment
                 value_format = "'{}'"
             else:
+                # Non-last lines or lines with comment
                 value_format = "'{}&'"
 
+            # Format the value and pad to 80 characters
             value = value_format.format(word)
-
             output.append(f"{headstr + value:80}")
 
         # do the comment string
@@ -1273,23 +1397,30 @@ def _format_value(value):
         if value == "":
             return "''"
         else:
-            exp_val_str = value.replace("'", "''")
-            val_str = f"'{exp_val_str:8}'"
-            return f"{val_str:20}"
+            # Handle the string value
+            if value.endswith("''"):
+                # For strings ending with '', preserve them exactly
+                base = value[:-2]
+                exp_val_str = base.replace("'", "''") + "''"
+            else:
+                # For all other strings, escape single quotes
+                exp_val_str = value.replace("'", "''")
+            # Return with surrounding quotes
+            return f"'{exp_val_str}'"
 
     # must be before int checking since bool is also int
     elif isinstance(value, (bool, np.bool_)):
-        return f"{repr(value)[0]:>20}"  # T or F
+        return f"{repr(value)[0]:>8}"  # T or F
 
     elif _is_int(value):
-        return f"{value:>20d}"
+        return f"{value:>8d}"
 
     elif isinstance(value, (float, np.floating)):
-        return f"{_format_float(value):>20}"
+        return f"{_format_float(value):>8}"
 
     elif isinstance(value, (complex, np.complexfloating)):
         val_str = f"({_format_float(value.real)}, {_format_float(value.imag)})"
-        return f"{val_str:>20}"
+        return f"{val_str:>8}"
 
     elif isinstance(value, Undefined):
         return ""
