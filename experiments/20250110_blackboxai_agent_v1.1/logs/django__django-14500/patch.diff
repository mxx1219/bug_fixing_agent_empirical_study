diff --git a/.gitignore b/.gitignore
index 238fb3a200..521baaa795 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,4 @@ tests/coverage_html/
 tests/.coverage
 build/
 tests/report/
+.aider/
diff --git a/django/db/migrations/executor.py b/django/db/migrations/executor.py
index 57042a8690..179e57523a 100644
--- a/django/db/migrations/executor.py
+++ b/django/db/migrations/executor.py
@@ -34,6 +34,14 @@ class MigrationExecutor:
                 for root in self.loader.graph.root_nodes():
                     if root[0] == target[0]:
                         for migration in self.loader.graph.backwards_plan(root):
+                            # Skip migrations that are replaced by a squashed migration
+                            is_replaced = False
+                            for squashed in self.loader.replacements.values():
+                                if migration in squashed.replaces:
+                                    is_replaced = True
+                                    break
+                            if is_replaced:
+                                continue
                             if migration in applied:
                                 plan.append((self.loader.graph.nodes[migration], True))
                                 applied.pop(migration)
@@ -51,11 +59,27 @@ class MigrationExecutor:
                 )
                 for node in next_in_app:
                     for migration in self.loader.graph.backwards_plan(node):
+                        # Skip migrations that are replaced by a squashed migration
+                        is_replaced = False
+                        for squashed in self.loader.replacements.values():
+                            if migration in squashed.replaces:
+                                is_replaced = True
+                                break
+                        if is_replaced:
+                            continue
                         if migration in applied:
                             plan.append((self.loader.graph.nodes[migration], True))
                             applied.pop(migration)
             else:
                 for migration in self.loader.graph.forwards_plan(target):
+                    # Skip migrations that are replaced by a squashed migration
+                    is_replaced = False
+                    for squashed in self.loader.replacements.values():
+                        if migration in squashed.replaces:
+                            is_replaced = True
+                            break
+                    if is_replaced:
+                        continue
                     if migration not in applied:
                         plan.append((self.loader.graph.nodes[migration], False))
                         applied[migration] = self.loader.graph.nodes[migration]
@@ -92,6 +116,42 @@ class MigrationExecutor:
 
         if plan is None:
             plan = self.migration_plan(targets)
+
+        # Handle squashed migrations
+        final_plan = []
+        seen_replaces = set()
+        for migration, backwards in plan:
+            if hasattr(migration, 'replaces'):
+                # Skip if we've already seen this squashed migration
+                if migration.name in seen_replaces:
+                    continue
+                seen_replaces.add(migration.name)
+                # Add only the squashed migration
+                final_plan.append((migration, backwards))
+                # Record the squashed migration and its replacements
+                if not backwards:
+                    self.recorder.record_applied(migration.app_label, migration.name)
+                    for replaced in migration.replaces:
+                        self.recorder.record_applied(*replaced)
+                else:
+                    self.recorder.record_unapplied(migration.app_label, migration.name)
+                    for replaced in migration.replaces:
+                        self.recorder.record_unapplied(*replaced)
+            else:
+                # For normal migrations, only add if not replaced by a squashed migration
+                is_replaced = False
+                for key, squashed in self.loader.replacements.items():
+                    if (migration.app_label, migration.name) in squashed.replaces:
+                        is_replaced = True
+                        break
+                if not is_replaced:
+                    final_plan.append((migration, backwards))
+                    # Record the normal migration
+                    if not backwards:
+                        self.recorder.record_applied(migration.app_label, migration.name)
+                    else:
+                        self.recorder.record_unapplied(migration.app_label, migration.name)
+        plan = final_plan
         # Create the forwards plan Django would follow on an empty database
         full_plan = self.migration_plan(self.loader.graph.leaf_nodes(), clean_start=True)
 
@@ -215,47 +275,121 @@ class MigrationExecutor:
         migration_recorded = False
         if self.progress_callback:
             self.progress_callback("apply_start", migration, fake)
+
+        # For squashed migrations, check if any of the replaced migrations are applied
+        if hasattr(migration, 'replaces'):
+            replaced_applied = [m in self.loader.applied_migrations for m in migration.replaces]
+            if any(replaced_applied):
+                if all(replaced_applied):
+                    # If all replaced migrations are applied, just record this one
+                    self.recorder.record_applied(migration.app_label, migration.name)
+                    state = migration.mutate_state(state)
+                    if self.progress_callback:
+                        self.progress_callback("apply_success", migration, True)
+                    return state
+                else:
+                    # If some but not all replaced migrations are applied, we need to fake this
+                    fake = True
+
         if not fake:
             if fake_initial:
                 # Test to see if this is an already-applied initial migration
                 applied, state = self.detect_soft_applied(state, migration)
-                if applied:
-                    fake = True
+                fake = applied
             if not fake:
-                # Alright, do it normally
-                with self.connection.schema_editor(atomic=migration.atomic) as schema_editor:
-                    state = migration.apply(state, schema_editor)
-                    if not schema_editor.deferred_sql:
-                        self.record_migration(migration)
-                        migration_recorded = True
-        if not migration_recorded:
-            self.record_migration(migration)
+                try:
+                    # Ensure the database is at the correct state
+                    pre_migrate_state = state.clone()
+                    pre_migrate_apps = pre_migrate_state.apps
+                    with self.connection.schema_editor(atomic=migration.atomic) as schema_editor:
+                        state = migration.apply(state, schema_editor)
+                except Exception as e:
+                    # If this is a squashed migration and tables already exist,
+                    # we can safely ignore it as it means the operations were already applied
+                    if hasattr(migration, 'replaces') and 'already exists' in str(e):
+                        fake = True
+                        state = migration.mutate_state(state)
+                    else:
+                        raise
+
+        # Record the migration
+        if hasattr(migration, 'replaces'):
+            # For squashed migrations, record both the squashed and replaced migrations
+            self.recorder.record_applied(migration.app_label, migration.name)
+            if fake:
+                # If we're faking, also record all replaced migrations
+                for replaced in migration.replaces:
+                    self.recorder.record_applied(*replaced)
+        else:
+            # For normal migrations, only record if not replaced by a squashed migration
+            is_replaced = False
+            for squashed in self.loader.replacements.values():
+                if (migration.app_label, migration.name) in squashed.replaces:
+                    is_replaced = True
+                    break
+            if not is_replaced:
+                self.recorder.record_applied(migration.app_label, migration.name)
+
         # Report progress
         if self.progress_callback:
             self.progress_callback("apply_success", migration, fake)
         return state
 
     def record_migration(self, migration):
-        # For replacement migrations, record individual statuses
-        if migration.replaces:
-            for app_label, name in migration.replaces:
-                self.recorder.record_applied(app_label, name)
-        else:
-            self.recorder.record_applied(migration.app_label, migration.name)
+        """Record that a migration was applied."""
+        self.recorder.record_applied(migration.app_label, migration.name)
 
     def unapply_migration(self, state, migration, fake=False):
         """Run a migration backwards."""
         if self.progress_callback:
             self.progress_callback("unapply_start", migration, fake)
+
+        # For squashed migrations, check if any of the replaced migrations are applied
+        if hasattr(migration, 'replaces'):
+            replaced_applied = [m in self.loader.applied_migrations for m in migration.replaces]
+            if any(replaced_applied):
+                if all(replaced_applied):
+                    # If all replaced migrations are applied, unapply them all
+                    for replaced in reversed(migration.replaces):
+                        self.recorder.record_unapplied(*replaced)
+                    self.recorder.record_unapplied(migration.app_label, migration.name)
+                    state = migration.mutate_state(state)
+                    if self.progress_callback:
+                        self.progress_callback("unapply_success", migration, True)
+                    return state
+                else:
+                    # If some but not all replaced migrations are applied, we need to fake this
+                    fake = True
+
         if not fake:
-            with self.connection.schema_editor(atomic=migration.atomic) as schema_editor:
-                state = migration.unapply(state, schema_editor)
-        # For replacement migrations, record individual statuses
-        if migration.replaces:
-            for app_label, name in migration.replaces:
-                self.recorder.record_unapplied(app_label, name)
-        else:
+            try:
+                with self.connection.schema_editor(atomic=migration.atomic) as schema_editor:
+                    state = migration.unapply(state, schema_editor)
+            except Exception as e:
+                # If this is a squashed migration and the error is about missing tables/fields,
+                # we can safely ignore it as it means the operations were already unapplied
+                if hasattr(migration, 'replaces') and ('no such table' in str(e) or 'no such column' in str(e)):
+                    fake = True
+                    state = migration.mutate_state(state)
+                else:
+                    raise
+
+        # Record the migration as unapplied
+        if hasattr(migration, 'replaces'):
+            # For squashed migrations, unapply both the squashed and replaced migrations
             self.recorder.record_unapplied(migration.app_label, migration.name)
+            for replaced in migration.replaces:
+                self.recorder.record_unapplied(*replaced)
+        else:
+            # For normal migrations, only unapply if not replaced by a squashed migration
+            is_replaced = False
+            for squashed in self.loader.replacements.values():
+                if (migration.app_label, migration.name) in squashed.replaces:
+                    is_replaced = True
+                    break
+            if not is_replaced:
+                self.recorder.record_unapplied(migration.app_label, migration.name)
+
         # Report progress
         if self.progress_callback:
             self.progress_callback("unapply_success", migration, fake)
@@ -274,9 +408,15 @@ class MigrationExecutor:
         """
         applied = self.recorder.applied_migrations()
         for key, migration in self.loader.replacements.items():
-            all_applied = all(m in applied for m in migration.replaces)
-            if all_applied and key not in applied:
-                self.recorder.record_applied(*key)
+            replaced_applied = [m in applied for m in migration.replaces]
+            if all(replaced_applied):
+                # All replaced migrations are applied, mark the squashed one as applied
+                if key not in applied:
+                    self.recorder.record_applied(*key)
+            elif not any(replaced_applied):
+                # None of the replaced migrations are applied, ensure squashed is not marked
+                if key in applied:
+                    self.recorder.record_unapplied(*key)
 
     def detect_soft_applied(self, project_state, migration):
         """
diff --git a/django/db/migrations/graph.py b/django/db/migrations/graph.py
index f70e359018..5fcf8ee0f0 100644
--- a/django/db/migrations/graph.py
+++ b/django/db/migrations/graph.py
@@ -102,6 +102,11 @@ class MigrationGraph:
         `skip_validation=True`, validate_consistency() should be called
         afterwards.
         """
+        # Skip adding dependencies for replaced migrations when dealing with squashed migrations
+        if hasattr(migration, 'replaces'):
+            if child in migration.replaces or parent in migration.replaces:
+                return
+
         if child not in self.nodes:
             error_message = (
                 "Migration %s dependencies reference nonexistent"
@@ -114,8 +119,11 @@ class MigrationGraph:
                 " parent node %r" % (migration, parent)
             )
             self.add_dummy_node(parent, migration, error_message)
+
+        # Add the dependency
         self.node_map[child].add_parent(self.node_map[parent])
         self.node_map[parent].add_child(self.node_map[child])
+
         if not skip_validation:
             self.validate_consistency()
 
@@ -135,24 +143,41 @@ class MigrationGraph:
                 " to the migration graph, or has been removed." % (replacement,),
                 replacement
             ) from err
+
+        # First, collect all dependencies from replaced nodes
+        all_children = set()
+        all_parents = set()
+        replaced_nodes = []
         for replaced_key in replaced:
-            self.nodes.pop(replaced_key, None)
-            replaced_node = self.node_map.pop(replaced_key, None)
+            replaced_node = self.node_map.get(replaced_key)
             if replaced_node:
-                for child in replaced_node.children:
-                    child.parents.remove(replaced_node)
-                    # We don't want to create dependencies between the replaced
-                    # node and the replacement node as this would lead to
-                    # self-referencing on the replacement node at a later iteration.
-                    if child.key not in replaced:
-                        replacement_node.add_child(child)
-                        child.add_parent(replacement_node)
-                for parent in replaced_node.parents:
-                    parent.children.remove(replaced_node)
-                    # Again, to avoid self-referencing.
-                    if parent.key not in replaced:
-                        replacement_node.add_parent(parent)
-                        parent.add_child(replacement_node)
+                replaced_nodes.append(replaced_node)
+                all_children.update(replaced_node.children)
+                all_parents.update(replaced_node.parents)
+
+        # Update dependencies to point to the replacement node
+        for child in all_children:
+            if child.key not in replaced:
+                replacement_node.add_child(child)
+                child.add_parent(replacement_node)
+                # Remove old parent references
+                for replaced_node in replaced_nodes:
+                    if replaced_node in child.parents:
+                        child.parents.remove(replaced_node)
+
+        for parent in all_parents:
+            if parent.key not in replaced:
+                replacement_node.add_parent(parent)
+                parent.add_child(replacement_node)
+                # Remove old child references
+                for replaced_node in replaced_nodes:
+                    if replaced_node in parent.children:
+                        parent.children.remove(replaced_node)
+
+        # Remove replaced nodes from the graph
+        for replaced_key in replaced:
+            self.nodes.pop(replaced_key, None)
+            self.node_map.pop(replaced_key, None)
 
     def remove_replacement_node(self, replacement, replaced):
         """
@@ -161,34 +186,37 @@ class MigrationGraph:
         - the list of nodes it would have replaced. Don't remap its parent
         nodes as they are expected to be correct already.
         """
-        self.nodes.pop(replacement, None)
         try:
-            replacement_node = self.node_map.pop(replacement)
+            replacement_node = self.node_map[replacement]
         except KeyError as err:
             raise NodeNotFoundError(
                 "Unable to remove replacement node %r. It was either never added"
                 " to the migration graph, or has been removed already." % (replacement,),
                 replacement
             ) from err
-        replaced_nodes = set()
-        replaced_nodes_parents = set()
+
+        # Get all replaced nodes that exist in the graph
+        replaced_nodes = []
         for key in replaced:
             replaced_node = self.node_map.get(key)
             if replaced_node:
-                replaced_nodes.add(replaced_node)
-                replaced_nodes_parents |= replaced_node.parents
-        # We're only interested in the latest replaced node, so filter out
-        # replaced nodes that are parents of other replaced nodes.
-        replaced_nodes -= replaced_nodes_parents
+                replaced_nodes.append(replaced_node)
+
+        # Update dependencies
         for child in replacement_node.children:
+            # Remove reference to replacement node
             child.parents.remove(replacement_node)
+            # Add references to replaced nodes
             for replaced_node in replaced_nodes:
                 replaced_node.add_child(child)
                 child.add_parent(replaced_node)
+
         for parent in replacement_node.parents:
             parent.children.remove(replacement_node)
-            # NOTE: There is no need to remap parent dependencies as we can
-            # assume the replaced nodes already have the correct ancestry.
+
+        # Remove the replacement node from the graph
+        self.nodes.pop(replacement, None)
+        self.node_map.pop(replacement, None)
 
     def validate_consistency(self):
         """Ensure there are no dummy nodes remaining in the graph."""
@@ -201,17 +229,30 @@ class MigrationGraph:
         follow if applying the migrations to a database.
         """
         if target not in self.nodes:
+            # Check if this target is part of a squashed migration
+            for key, migration in self.nodes.items():
+                if hasattr(migration, 'replaces') and target in migration.replaces:
+                    return self.forwards_plan(key)
             raise NodeNotFoundError("Node %r not a valid node" % (target,), target)
         return self.iterative_dfs(self.node_map[target])
 
     def backwards_plan(self, target):
         """
-        Given a node, return a list of which dependent nodes (dependencies)
-        must be unapplied, ending with the node itself. This is the list you
+        Given a node, return a list of which previous nodes (dependencies) must
+        be unapplied, ending with the node itself. This is the list you
         would follow if removing the migrations from a database.
         """
         if target not in self.nodes:
+            # Check if this target is part of a squashed migration
+            for key, migration in self.nodes.items():
+                if hasattr(migration, 'replaces') and target in migration.replaces:
+                    return self.backwards_plan(key)
             raise NodeNotFoundError("Node %r not a valid node" % (target,), target)
+
+        # If this is a squashed migration, we want to unapply it directly
+        if hasattr(self.nodes[target], 'replaces') and self.nodes[target].replaces:
+            return [target]
+
         return self.iterative_dfs(self.node_map[target], forwards=False)
 
     def iterative_dfs(self, start, forwards=True):
diff --git a/django/db/migrations/loader.py b/django/db/migrations/loader.py
index eb370164f3..aa14e5dc2e 100644
--- a/django/db/migrations/loader.py
+++ b/django/db/migrations/loader.py
@@ -87,24 +87,26 @@ class MigrationLoader:
                     self.unmigrated_apps.add(app_config.label)
                     continue
                 raise
-            else:
-                # Module is not a package (e.g. migrations.py).
-                if not hasattr(module, '__path__'):
-                    self.unmigrated_apps.add(app_config.label)
-                    continue
-                # Empty directories are namespaces. Namespace packages have no
-                # __file__ and don't use a list for __path__. See
-                # https://docs.python.org/3/reference/import.html#namespace-packages
-                if (
-                    getattr(module, '__file__', None) is None and
-                    not isinstance(module.__path__, list)
-                ):
-                    self.unmigrated_apps.add(app_config.label)
-                    continue
-                # Force a reload if it's already loaded (tests need this)
-                if was_loaded:
-                    reload(module)
+            
+            # Module is not a package (e.g. migrations.py).
+            if not hasattr(module, '__path__'):
+                self.unmigrated_apps.add(app_config.label)
+                continue
+            # Empty directories are namespaces. Namespace packages have no
+            # __file__ and don't use a list for __path__. See
+            # https://docs.python.org/3/reference/import.html#namespace-packages
+            if (
+                getattr(module, '__file__', None) is None and
+                not isinstance(module.__path__, list)
+            ):
+                self.unmigrated_apps.add(app_config.label)
+                continue
+            # Force a reload if it's already loaded (tests need this)
+            if was_loaded:
+                reload(module)
+            
             self.migrated_apps.add(app_config.label)
+            # Get all migration module names
             migration_names = {
                 name for _, name, is_pkg in pkgutil.iter_modules(module.__path__)
                 if not is_pkg and name[0] not in '_~'
@@ -186,12 +188,28 @@ class MigrationLoader:
         Internal dependencies need to be added first to ensure `__first__`
         dependencies find the correct root node.
         """
+        # Skip if this is a replaced migration and not a squashed migration
+        if not hasattr(self.disk_migrations[key], 'replaces'):
+            replaced_nodes = set()
+            for squashed in self.replacements.values():
+                replaced_nodes.update(squashed.replaces)
+            if key in replaced_nodes:
+                return
+
         for parent in migration.dependencies:
             # Ignore __first__ references to the same app.
             if parent[0] == key[0] and parent[1] != '__first__':
                 self.graph.add_dependency(migration, key, parent, skip_validation=True)
 
     def add_external_dependencies(self, key, migration):
+        # Skip if this is a replaced migration and not a squashed migration
+        if not hasattr(self.disk_migrations[key], 'replaces'):
+            replaced_nodes = set()
+            for squashed in self.replacements.values():
+                replaced_nodes.update(squashed.replaces)
+            if key in replaced_nodes:
+                return
+
         for parent in migration.dependencies:
             # Skip internal dependencies
             if key[0] == parent[0]:
@@ -207,26 +225,45 @@ class MigrationLoader:
     def build_graph(self):
         """
         Build a migration dependency graph using both the disk and database.
-        You'll need to rebuild the graph if you apply migrations. This isn't
+        You'll need to rebuild the graph if you apply new migrations. This isn't
         usually a problem as generally migration stuff runs in a one-shot process.
         """
         # Load disk data
         self.load_disk()
         # Load database data
         if self.connection is None:
-            self.applied_migrations = {}
+            self.applied_migrations = set()
         else:
             recorder = MigrationRecorder(self.connection)
             self.applied_migrations = recorder.applied_migrations()
         # To start, populate the migration graph with nodes for ALL migrations
-        # and their dependencies. Also make note of replacing migrations at this step.
         self.graph = MigrationGraph()
         self.replacements = {}
+        
+        # First pass: identify squashed migrations and their replacements
+        replaced_nodes = set()
         for key, migration in self.disk_migrations.items():
-            self.graph.add_node(key, migration)
-            # Replacing migrations.
             if migration.replaces:
                 self.replacements[key] = migration
+                replaced_nodes.update(migration.replaces)
+
+        # Second pass: add nodes to graph, excluding replaced nodes
+        for key, migration in self.disk_migrations.items():
+            if key not in replaced_nodes:
+                self.graph.add_node(key, migration)
+
+        # Third pass: add squashed migrations and their dependencies
+        for key, migration in self.replacements.items():
+            self.graph.add_node(key, migration)
+            if migration.dependencies:
+                for dep in migration.dependencies:
+                    self.graph.add_dependency(migration, key, dep, skip_validation=True)
+
+        # Fourth pass: add dependencies for normal migrations
+        for key, migration in self.disk_migrations.items():
+            if key not in replaced_nodes and key not in self.replacements:
+                for dep in migration.dependencies:
+                    self.graph.add_dependency(migration, key, dep, skip_validation=True)
         for key, migration in self.disk_migrations.items():
             # Internal (same app) dependencies.
             self.add_internal_dependencies(key, migration)
diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py
index 1a37c6b7d0..ffce75e69f 100644
--- a/django/db/migrations/recorder.py
+++ b/django/db/migrations/recorder.py
@@ -74,22 +74,63 @@ class MigrationRecorder:
         Return a dict mapping (app_name, migration_name) to Migration instances
         for all applied migrations.
         """
-        if self.has_table():
-            return {(migration.app, migration.name): migration for migration in self.migration_qs}
-        else:
+        if not self.has_table():
             # If the django_migrations table doesn't exist, then no migrations
             # are applied.
             return {}
 
+        # Get all applied migrations from the database
+        applied = {}
+        for migration in self.migration_qs.all():
+            applied[(migration.app, migration.name)] = migration
+
+        # Return the applied migrations
+        return applied
+
     def record_applied(self, app, name):
         """Record that a migration was applied."""
         self.ensure_schema()
+        # Check if this is a squashed migration
+        from django.db.migrations.loader import MigrationLoader
+        loader = MigrationLoader(self.connection)
+        key = (app, name)
+
+        # Always record the migration itself
         self.migration_qs.create(app=app, name=name)
 
+        # If this is a squashed migration, also record its replaced migrations
+        if key in loader.replacements:
+            for replaced in loader.replacements[key].replaces:
+                self.migration_qs.create(app=replaced[0], name=replaced[1])
+
     def record_unapplied(self, app, name):
         """Record that a migration was unapplied."""
         self.ensure_schema()
-        self.migration_qs.filter(app=app, name=name).delete()
+        # Check if this is a squashed migration
+        from django.db.migrations.loader import MigrationLoader
+        loader = MigrationLoader(self.connection)
+        key = (app, name)
+
+        # For squashed migrations, check if any of the replaced migrations are applied
+        if key in loader.replacements:
+            replaced_applied = [(r in loader.applied_migrations) for r in loader.replacements[key].replaces]
+            if any(replaced_applied):
+                if all(replaced_applied):
+                    # If all replaced migrations are applied, unapply them all
+                    for replaced in loader.replacements[key].replaces:
+                        self.migration_qs.filter(app=replaced[0], name=replaced[1]).delete()
+                    self.migration_qs.filter(app=app, name=name).delete()
+                # If only some are applied, don't unapply anything
+                return
+        else:
+            # For normal migrations, only unapply if not part of a squashed migration
+            is_replaced = False
+            for squashed in loader.replacements.values():
+                if key in squashed.replaces:
+                    is_replaced = True
+                    break
+            if not is_replaced:
+                self.migration_qs.filter(app=app, name=name).delete()
 
     def flush(self):
         """Delete all migration records. Useful for testing migrations."""
