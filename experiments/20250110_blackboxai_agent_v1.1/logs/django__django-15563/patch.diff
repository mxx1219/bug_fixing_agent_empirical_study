diff --git a/.gitignore b/.gitignore
index 238fb3a200..521baaa795 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,4 @@ tests/coverage_html/
 tests/.coverage
 build/
 tests/report/
+.aider/
diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index 59a5d6abbb..64d60a0f8f 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -1802,6 +1802,10 @@ class SQLUpdateCompiler(SQLCompiler):
         non-empty query that is executed. Row counts for any subsequent,
         related queries are not available.
         """
+        from django.db.models.sql.where import WhereNode
+        from django.db.models import F, OuterRef, Subquery
+        from django.db.models.query_utils import Q
+
         cursor = super().execute_sql(result_type)
         try:
             rows = cursor.rowcount if cursor else 0
@@ -1809,7 +1813,46 @@ class SQLUpdateCompiler(SQLCompiler):
         finally:
             if cursor:
                 cursor.close()
+
+        # Handle related updates with proper parent links
         for query in self.query.get_related_updates():
+            # If there's a parent link specified in the values, use it for filtering
+            parent_links = [(field, link) for field, link, _ in query.values if link]
+            if parent_links:
+                # Clear existing values and rebuild with correct parent link filters
+                where_node = query.where
+                query.where = WhereNode()
+                for _, parent_link in parent_links:
+                    # Get the correct parent link field and value
+                    child_model = self.query.model
+                    parent_model = query.model
+                    # Find the link from child to this specific parent
+                    parent_link_field = None
+                    for field in child_model._meta.fields:
+                         if (field.__class__.__name__ == 'OneToOneField' and 
+                             field.remote_field.model == parent_model):
+                            parent_link_field = field
+                            break
+                    
+                    if parent_link_field:
+                        # Get the parent link from the stored information
+                        parent_link = getattr(self.query, 'parent_updates', {}).get(parent_model)
+                        if parent_link:
+                            # Get the IDs of Child objects that should be updated
+                            child_qs = self.query.model._default_manager.all()
+                            if self.query.where:
+                                child_qs.query.where = self.query.where
+                            
+                            # Get the parent pointer IDs using the correct field name
+                            child_ids = list(child_qs.values_list(parent_link.attname, flat=True))
+                            
+                            # Update only the parent records that correspond to these Child instances
+                            query.where = WhereNode()
+                            query.add_q(Q(pk__in=child_ids))
+                if where_node:
+                    from django.db.models.sql.where import AND
+                    query.where.add(where_node, AND)
+
             aux_rows = query.get_compiler(self.using).execute_sql(result_type)
             if is_empty and aux_rows:
                 rows = aux_rows
diff --git a/django/db/models/sql/subqueries.py b/django/db/models/sql/subqueries.py
index 04063f73bc..8e6146e1be 100644
--- a/django/db/models/sql/subqueries.py
+++ b/django/db/models/sql/subqueries.py
@@ -119,7 +119,21 @@ class UpdateQuery(Query):
 
         Update are coalesced so that only one update query per ancestor is run.
         """
-        self.related_updates.setdefault(model, []).append((field, None, value))
+        # For multi-table inheritance, we need to handle updates differently
+        parent_link = None
+        for parent, parent_field in self.model._meta.parents.items():
+            if parent == model:
+                parent_link = parent_field
+                break
+
+        # Store both the field to update and the link to the parent
+        self.related_updates.setdefault(model, []).append((field, parent_link, value))
+
+        # Store the parent link field for filtering
+        if parent_link and not hasattr(self, 'parent_updates'):
+            self.parent_updates = {}
+        if parent_link:
+            self.parent_updates[model] = parent_link
 
     def get_related_updates(self):
         """
@@ -133,8 +147,27 @@ class UpdateQuery(Query):
         for model, values in self.related_updates.items():
             query = UpdateQuery(model)
             query.values = values
-            if self.related_ids is not None:
-                query.add_filter("pk__in", self.related_ids)
+            
+            # Get the parent link field for this model
+            parent_link = None
+            for field in self.model._meta.fields:
+                if (field.__class__.__name__ == 'OneToOneField' and 
+                    field.remote_field.model == model):
+                    parent_link = field
+                    break
+            
+            if parent_link:
+                # Get the IDs of Child objects that should be updated
+                child_qs = self.model._default_manager.all()
+                if self.where:
+                    child_qs.query.where = self.where
+                
+                # Get the parent pointer IDs
+                child_ids = list(child_qs.values_list(parent_link.attname, flat=True))
+                
+                # Add filter to update only those records in parent table
+                query.add_filter("pk__in", child_ids)
+            
             result.append(query)
         return result
