diff --git a/.gitignore b/.gitignore
index 238fb3a200..521baaa795 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,4 @@ tests/coverage_html/
 tests/.coverage
 build/
 tests/report/
+.aider/
diff --git a/django/db/models/base.py b/django/db/models/base.py
index 0d50dad0c9..2cb10aa982 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -539,6 +539,15 @@ class Model(metaclass=ModelBase):
         new = cls(*values)
         new._state.adding = False
         new._state.db = db
+
+        # Ensure fields that were loaded are properly set in __dict__
+        # and fields that weren't loaded are properly marked as deferred
+        for field, value in zip(cls._meta.concrete_fields, values):
+            if field.attname in field_names:
+                new.__dict__[field.attname] = value
+            else:
+                new.__dict__.pop(field.attname, None)
+
         return new
 
     def __repr__(self):
@@ -671,12 +680,20 @@ class Model(metaclass=ModelBase):
             db_instance_qs = db_instance_qs.only(*fields)
 
         db_instance = db_instance_qs.get()
-        non_loaded_fields = db_instance.get_deferred_fields()
+
+        # Update fields in __dict__ to maintain deferred state
         for field in self._meta.concrete_fields:
-            if field.attname in non_loaded_fields:
-                # This field wasn't refreshed - skip ahead.
-                continue
-            setattr(self, field.attname, getattr(db_instance, field.attname))
+            if fields is not None and field.attname not in fields:
+                # If specific fields were requested and this isn't one of them,
+                # remove it from __dict__ to mark it as deferred
+                self.__dict__.pop(field.attname, None)
+            elif field.attname in db_instance.__dict__:
+                # If the field was loaded from the database, update it
+                self.__dict__[field.attname] = db_instance.__dict__[field.attname]
+            else:
+                # If the field wasn't loaded, remove it from __dict__
+                self.__dict__.pop(field.attname, None)
+
             # Clear cached foreign keys.
             if field.is_relation and field.is_cached(self):
                 field.delete_cached_value(self)
diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py
index d5aa968400..74a6fb1c01 100644
--- a/django/db/models/fields/related_descriptors.py
+++ b/django/db/models/fields/related_descriptors.py
@@ -122,12 +122,30 @@ class ForwardManyToOneDescriptor:
             queryset = self.get_queryset()
         queryset._add_hints(instance=instances[0])
 
+        # Initialize fields_cache if it doesn't exist
+        for instance in instances:
+            if not hasattr(instance._state, 'fields_cache'):
+                instance._state.fields_cache = {}
+
         rel_obj_attr = self.field.get_foreign_related_value
         instance_attr = self.field.get_local_related_value
         instances_dict = {instance_attr(inst): inst for inst in instances}
         related_field = self.field.foreign_related_fields[0]
         remote_field = self.field.remote_field
 
+        # Get the fields that were selected in the queryset
+        if queryset is not None:
+            deferred_fields, defer = queryset.query.deferred_loading
+            if defer:
+                # If deferring, get all fields except the deferred ones
+                selected_fields = {f.attname for f in queryset.model._meta.concrete_fields
+                                 if f.attname not in deferred_fields}
+            else:
+                # If only loading specific fields, get just those
+                selected_fields = deferred_fields
+
+
+
         # FIXME: This will need to be revisited when we introduce support for
         # composite fields. In the meantime we take this practical approach to
         # solve a regression on 1.6 when the reverse manager in hidden
@@ -145,6 +163,11 @@ class ForwardManyToOneDescriptor:
         if not remote_field.multiple:
             for rel_obj in queryset:
                 instance = instances_dict[rel_obj_attr(rel_obj)]
+                # Update the deferred fields state for the cached object
+                if hasattr(queryset, 'query') and hasattr(queryset.query, 'deferred_loading'):
+                    for field in rel_obj._meta.concrete_fields:
+                        if field.attname not in selected_fields:
+                            rel_obj.__dict__.pop(field.attname, None)
                 remote_field.set_cached_value(rel_obj, instance)
         return queryset, rel_obj_attr, instance_attr, True, self.field.get_cache_name(), False
 
@@ -171,6 +194,14 @@ class ForwardManyToOneDescriptor:
         # by the reverse accessor (ReverseOneToOneDescriptor).
         try:
             rel_obj = self.field.get_cached_value(instance)
+            # If we have a cached object, ensure its deferred fields state is correct
+            if rel_obj is not None:
+                # Get the fields that were loaded in the prefetch query
+                loaded_fields = {f.attname for f in rel_obj._meta.concrete_fields if f.attname in rel_obj.__dict__}
+                # Remove any fields that shouldn't be in __dict__
+                for field in rel_obj._meta.concrete_fields:
+                    if field.attname not in loaded_fields:
+                        rel_obj.__dict__.pop(field.attname, None)
         except KeyError:
             has_value = None not in self.field.get_local_related_value(instance)
             ancestor_link = instance._meta.get_ancestor_link(self.field.model) if has_value else None
@@ -377,6 +408,11 @@ class ReverseOneToOneDescriptor:
         # we must manage the reverse relation cache manually.
         for rel_obj in queryset:
             instance = instances_dict[rel_obj_attr(rel_obj)]
+            # Copy all loaded fields to the instance's __dict__ to prevent deferred loading
+            for field in rel_obj._meta.concrete_fields:
+                if field.attname in rel_obj.__dict__:
+                    # If the field was loaded in the prefetch query, ensure it's not marked as deferred
+                    setattr(rel_obj, field.attname, rel_obj.__dict__[field.attname])
             self.related.field.set_cached_value(rel_obj, instance)
         return queryset, rel_obj_attr, instance_attr, True, self.related.get_cache_name(), False
 
@@ -415,6 +451,11 @@ class ReverseOneToOneDescriptor:
                     # the current instance to avoid an extra SQL query if it's
                     # accessed later on.
                     self.related.field.set_cached_value(rel_obj, instance)
+                    # Copy all loaded fields to the instance's __dict__ to prevent deferred loading
+                    for field in rel_obj._meta.concrete_fields:
+                        if field.attname in rel_obj.__dict__:
+                            # If the field was loaded in the prefetch query, ensure it's not marked as deferred
+                            setattr(rel_obj, field.attname, rel_obj.__dict__[field.attname])
             self.related.set_cached_value(instance, rel_obj)
 
         if rel_obj is None:
diff --git a/django/db/models/query.py b/django/db/models/query.py
index fb6639793a..9b5f79eebe 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -66,7 +66,23 @@ class ModelIterable(BaseIterable):
             ])) for field, related_objs in queryset._known_related_objects.items()
         ]
         for row in compiler.results_iter(results):
+            # Create the model instance with the loaded fields
             obj = model_cls.from_db(db, init_list, row[model_fields_start:model_fields_end])
+
+            # Ensure fields that weren't loaded are properly marked as deferred
+            for field in model_cls._meta.concrete_fields:
+                if field.attname not in init_list:
+                    obj.__dict__.pop(field.attname, None)
+
+            # Initialize fields_cache if it doesn't exist
+            if not hasattr(obj._state, 'fields_cache'):
+                obj._state.fields_cache = {}
+
+            # Store loaded fields in fields_cache
+            for field_name in init_list:
+                if hasattr(obj, field_name):
+                    obj._state.fields_cache[field_name] = getattr(obj, field_name)
+
             for rel_populator in related_populators:
                 rel_populator.populate(row, obj)
             if annotation_col_map:
@@ -1509,6 +1525,14 @@ class RawQuerySet:
     def _fetch_all(self):
         if self._result_cache is None:
             self._result_cache = list(self.iterator())
+            # After fetching, ensure all loaded fields are in __dict__
+            if self._result_cache:
+                loaded_fields = self.query.get_loaded_field_names()
+                if loaded_fields:
+                    for obj in self._result_cache:
+                        for field_name in loaded_fields:
+                            if hasattr(obj, field_name):
+                                obj.__dict__[field_name] = getattr(obj, field_name)
         if self._prefetch_related_lookups and not self._prefetch_done:
             self._prefetch_related_objects()
 
@@ -1653,7 +1677,14 @@ class Prefetch:
 
     def get_current_queryset(self, level):
         if self.get_current_prefetch_to(level) == self.prefetch_to:
-            return self.queryset
+            if self.queryset is not None:
+                # Clone the queryset to avoid modifying the original
+                qs = self.queryset._chain()
+                # Ensure we preserve the deferred fields state
+                if hasattr(self.queryset, 'query') and hasattr(self.queryset.query, 'deferred_loading'):
+                    qs.query.deferred_loading = self.queryset.query.deferred_loading
+                return qs
+            return None
         return None
 
     def __eq__(self, other):
@@ -1690,6 +1721,11 @@ def prefetch_related_objects(model_instances, *related_lookups):
     # ensure we don't do duplicate work.
     done_queries = {}    # dictionary of things like 'foo__bar': [results]
 
+    # Initialize prefetch cache if it doesn't exist
+    for instance in model_instances:
+        if not hasattr(instance, '_prefetched_objects_cache'):
+            instance._prefetched_objects_cache = {}
+
     auto_lookups = set()  # we add to this as we go through.
     followed_descriptors = set()  # recursion protection
 
@@ -1889,8 +1925,40 @@ def prefetch_one_level(instances, prefetcher, lookup, level):
     # The 'values to be matched' must be hashable as they will be used
     # in a dictionary.
 
+    # Get the prefetch queryset and related information
     rel_qs, rel_obj_attr, instance_attr, single, cache_name, is_descriptor = (
         prefetcher.get_prefetch_queryset(instances, lookup.get_current_queryset(level)))
+
+    # Initialize fields_cache if it doesn't exist
+    for instance in instances:
+        if not hasattr(instance._state, 'fields_cache'):
+            instance._state.fields_cache = {}
+
+    # Get the fields that were selected in the prefetch query
+    if lookup.queryset is not None:
+        deferred_fields, defer = lookup.queryset.query.deferred_loading
+        if defer:
+            # If deferring, get all fields except the deferred ones
+            selected_fields = {f.attname for f in lookup.queryset.model._meta.concrete_fields
+                             if f.attname not in deferred_fields}
+        else:
+            # If only loading specific fields, get just those
+            selected_fields = deferred_fields
+    else:
+        selected_fields = {f.attname for f in rel_qs.model._meta.concrete_fields}
+
+    # Get the fields that were selected in the prefetch query
+    if lookup.queryset is not None:
+        deferred_fields, defer = lookup.queryset.query.deferred_loading
+        if defer:
+            # If deferring, get all fields except the deferred ones
+            selected_fields = {f.attname for f in lookup.queryset.model._meta.concrete_fields
+                             if f.attname not in deferred_fields}
+        else:
+            # If only loading specific fields, get just those
+            selected_fields = deferred_fields
+    else:
+        selected_fields = {f.attname for f in rel_qs.model._meta.concrete_fields}
     # We have to handle the possibility that the QuerySet we just got back
     # contains some prefetch_related lookups. We don't want to trigger the
     # prefetch_related functionality by evaluating the query. Rather, we need
@@ -1909,6 +1977,8 @@ def prefetch_one_level(instances, prefetcher, lookup, level):
 
     all_related_objects = list(rel_qs)
 
+
+
     rel_obj_cache = {}
     for rel_obj in all_related_objects:
         rel_attr_val = rel_obj_attr(rel_obj)
@@ -1944,11 +2014,34 @@ def prefetch_one_level(instances, prefetcher, lookup, level):
                 # cache_name points to a field name in obj.
                 # This field is a descriptor for a related object.
                 setattr(obj, cache_name, val)
+                # Update the deferred fields state for the cached object
+                if val is not None:
+                    # First, ensure all fields are properly initialized
+                    for field in val._meta.concrete_fields:
+                        if field.attname not in val.__dict__ and field.attname in selected_fields:
+                            val.__dict__[field.attname] = getattr(val, field.attname)
+                        elif field.attname not in selected_fields:
+                            val.__dict__.pop(field.attname, None)
+                    # Store loaded fields in fields_cache
+                    if not hasattr(val._state, 'fields_cache'):
+                        val._state.fields_cache = {}
+                    for field_name in selected_fields:
+                        if field_name in val.__dict__:
+                            val._state.fields_cache[field_name] = val.__dict__[field_name]
+                    # Then, ensure all selected fields are in __dict__
+                    for field_name in selected_fields:
+                        if hasattr(val, field_name):
+                            val.__dict__[field_name] = getattr(val, field_name)
             else:
                 # No to_attr has been given for this prefetch operation and the
                 # cache_name does not point to a descriptor. Store the value of
                 # the field in the object's field cache.
                 obj._state.fields_cache[cache_name] = val
+                if val is not None:
+                    # Copy all selected fields to the instance's __dict__
+                    for field_name in selected_fields:
+                        if hasattr(val, field_name):
+                            val.__dict__[field_name] = getattr(val, field_name)
         else:
             if as_attr:
                 setattr(obj, to_attr, vals)
@@ -1958,6 +2051,22 @@ def prefetch_one_level(instances, prefetcher, lookup, level):
                     qs = manager._apply_rel_filters(lookup.queryset)
                 else:
                     qs = manager.get_queryset()
+                # Update the deferred fields state for each object in vals
+                for val in vals:
+                    if val is not None:
+                        # First, ensure all fields are properly initialized
+                        for field in val._meta.concrete_fields:
+                            if field.attname not in val.__dict__ and field.attname in selected_fields:
+                                val.__dict__[field.attname] = getattr(val, field.attname)
+                            elif field.attname not in selected_fields:
+                                val.__dict__.pop(field.attname, None)
+                        # Store loaded fields in fields_cache
+                        if not hasattr(val._state, 'fields_cache'):
+                            val._state.fields_cache = {}
+                        for field_name in selected_fields:
+                            if field_name in val.__dict__:
+                                val._state.fields_cache[field_name] = val.__dict__[field_name]
+
                 qs._result_cache = vals
                 # We don't want the individual qs doing prefetch_related now,
                 # since we have merged this into the current work.
diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py
index 188b640850..0cffd0b11e 100644
--- a/django/db/models/query_utils.py
+++ b/django/db/models/query_utils.py
@@ -108,12 +108,25 @@ class DeferredAttribute:
             return self
         data = instance.__dict__
         field_name = self.field.attname
+
         if field_name not in data:
             # Let's see if the field is part of the parent chain. If so we
             # might be able to reuse the already loaded value. Refs #18343.
             val = self._check_parent_chain(instance)
             if val is None:
-                instance.refresh_from_db(fields=[field_name])
+                # Check if this field is actually deferred
+                if field_name in instance.get_deferred_fields():
+                    instance.refresh_from_db(fields=[field_name])
+                else:
+                    # Field is not deferred, try to get it from cache
+                    if hasattr(instance, '_state') and hasattr(instance._state, 'fields_cache'):
+                        val = instance._state.fields_cache.get(field_name)
+                        if val is not None:
+                            data[field_name] = val
+                        else:
+                            instance.refresh_from_db(fields=[field_name])
+                    else:
+                        instance.refresh_from_db(fields=[field_name])
             else:
                 data[field_name] = val
         return data[field_name]
