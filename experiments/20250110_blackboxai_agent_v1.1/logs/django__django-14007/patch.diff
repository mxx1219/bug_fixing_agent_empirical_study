diff --git a/.gitignore b/.gitignore
index 238fb3a200..521baaa795 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,4 @@ tests/coverage_html/
 tests/.coverage
 build/
 tests/report/
+.aider/
diff --git a/django/db/models/base.py b/django/db/models/base.py
index 55b1691166..afaae4cc1a 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -872,6 +872,8 @@ class Model(metaclass=ModelBase):
             results = self._do_insert(cls._base_manager, using, fields, returning_fields, raw)
             if results:
                 for value, field in zip(results[0], returning_fields):
+                    if hasattr(field, 'from_db_value'):
+                        value = field.from_db_value(value, None, connections[using])
                     setattr(self, field.attname, value)
         return updated
 
diff --git a/django/db/models/query.py b/django/db/models/query.py
index 387deca527..1c46e142e8 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -504,8 +504,11 @@ class QuerySet:
                 )
                 for obj_with_pk, results in zip(objs_with_pk, returned_columns):
                     for result, field in zip(results, opts.db_returning_fields):
-                        if field != opts.pk:
-                            setattr(obj_with_pk, field.attname, result)
+                        if hasattr(field, 'from_db_value'):
+                            result = field.from_db_value(result, None, connection)
+                        setattr(obj_with_pk, field.attname, result)
+                        if field.primary_key:
+                            obj_with_pk.pk = result
                 for obj_with_pk in objs_with_pk:
                     obj_with_pk._state.adding = False
                     obj_with_pk._state.db = self.db
@@ -516,11 +519,28 @@ class QuerySet:
                 )
                 if connection.features.can_return_rows_from_bulk_insert and not ignore_conflicts:
                     assert len(returned_columns) == len(objs_without_pk)
-                for obj_without_pk, results in zip(objs_without_pk, returned_columns):
-                    for result, field in zip(results, opts.db_returning_fields):
-                        setattr(obj_without_pk, field.attname, result)
-                    obj_without_pk._state.adding = False
-                    obj_without_pk._state.db = self.db
+                if not connection.features.can_return_rows_from_bulk_insert:
+                    # For databases that don't support returning bulk insert values,
+                    # we need to fetch the inserted IDs separately
+                    inserted_ids = self.filter(pk__isnull=False).order_by('-pk')[:len(objs_without_pk)].values_list('pk', flat=True)
+                    inserted_ids = list(reversed(inserted_ids))
+                    for obj_without_pk, pk in zip(objs_without_pk, inserted_ids):
+                        if hasattr(opts.pk, 'from_db_value') and not hasattr(pk, 'value'):
+                            pk = opts.pk.from_db_value(pk, None, connection)
+                        setattr(obj_without_pk, opts.pk.attname, pk)
+                        obj_without_pk.pk = pk
+                        obj_without_pk._state.adding = False
+                        obj_without_pk._state.db = self.db
+                else:
+                    for obj_without_pk, results in zip(objs_without_pk, returned_columns):
+                        for result, field in zip(results, opts.db_returning_fields):
+                            if hasattr(field, 'from_db_value'):
+                                result = field.from_db_value(result, None, connection)
+                            setattr(obj_without_pk, field.attname, result)
+                            if field.primary_key:
+                                obj_without_pk.pk = result
+                        obj_without_pk._state.adding = False
+                        obj_without_pk._state.db = self.db
 
         return objs
