diff --git a/.gitignore b/.gitignore
index 238fb3a200..521baaa795 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,4 @@ tests/coverage_html/
 tests/.coverage
 build/
 tests/report/
+.aider/
diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 28374272f4..4b9cb8b108 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -516,16 +516,29 @@ class Field(RegisterLookupMixin):
     def __eq__(self, other):
         # Needed for @total_ordering
         if isinstance(other, Field):
+            # Fields from different models should never be equal
+            if hasattr(self, 'model') and hasattr(other, 'model'):
+                if self.model != other.model:
+                    return False
             return self.creation_counter == other.creation_counter
         return NotImplemented
 
     def __lt__(self, other):
         # This is needed because bisect does not take a comparison function.
         if isinstance(other, Field):
-            return self.creation_counter < other.creation_counter
+            # First compare by creation counter
+            if self.creation_counter != other.creation_counter:
+                return self.creation_counter < other.creation_counter
+            # If creation counters are equal, compare by model to ensure stable ordering
+            if hasattr(self, 'model') and hasattr(other, 'model'):
+                return id(self.model) < id(other.model)
+            return id(self) < id(other)
         return NotImplemented
 
     def __hash__(self):
+        # Include model in hash if available
+        if hasattr(self, 'model'):
+            return hash((self.model, self.creation_counter))
         return hash(self.creation_counter)
 
     def __deepcopy__(self, memodict):
