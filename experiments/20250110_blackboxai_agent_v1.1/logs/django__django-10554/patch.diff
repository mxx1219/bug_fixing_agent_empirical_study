diff --git a/.gitignore b/.gitignore
index 238fb3a200..521baaa795 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,4 @@ tests/coverage_html/
 tests/.coverage
 build/
 tests/report/
+.aider/
diff --git a/django/db/models/query.py b/django/db/models/query.py
index 1544beb613..c58f344666 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -803,6 +803,17 @@ class QuerySet:
         if flat and len(fields) > 1:
             raise TypeError("'flat' is not valid when values_list is called with more than one field.")
 
+        # If we have ordering and this is a combined query, ensure order fields are included
+        if self.query.combinator and self.query.order_by:
+            order_fields = []
+            for field in self.query.order_by:
+                if isinstance(field, str):
+                    if field.startswith('-'):
+                        field = field[1:]
+                    if '.' not in field:
+                        order_fields.append(field)
+            fields = tuple(set(fields + tuple(order_fields)))
+
         field_names = {f for f in fields if not hasattr(f, 'resolve_expression')}
         _fields = []
         expressions = {}
@@ -931,6 +942,21 @@ class QuerySet:
         # Clear limits and ordering so they can be reapplied
         clone.query.clear_ordering(True)
         clone.query.clear_limits()
+        
+        # Ensure order_by fields are included in the SELECT list for all queries
+        order_fields = []
+        if self.query.order_by:
+            for field in self.query.order_by:
+                if isinstance(field, str) and not field.startswith('-'):
+                    order_fields.append(field)
+                elif isinstance(field, str):
+                    order_fields.append(field[1:])
+        
+        if order_fields:
+            self.query.add_fields(order_fields)
+            for other_q in other_qs:
+                other_q.query.add_fields(order_fields)
+        
         clone.query.combined_queries = (self.query,) + tuple(qs.query for qs in other_qs)
         clone.query.combinator = combinator
         clone.query.combinator_all = all
diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index a791908caf..97b8cbbabc 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -5,7 +5,7 @@ from itertools import chain
 
 from django.core.exceptions import EmptyResultSet, FieldError
 from django.db.models.constants import LOOKUP_SEP
-from django.db.models.expressions import OrderBy, Random, RawSQL, Ref, Value
+from django.db.models.expressions import Col, OrderBy, Random, RawSQL, Ref, Value
 from django.db.models.functions import Cast
 from django.db.models.query_utils import QueryWrapper, select_related_descend
 from django.db.models.sql.constants import (
@@ -344,19 +344,31 @@ class SQLCompiler:
             resolved = expr.resolve_expression(self.query, allow_joins=True, reuse=None)
             if self.query.combinator:
                 src = resolved.get_source_expressions()[0]
-                # Relabel order by columns to raw numbers if this is a combined
-                # query; necessary since the columns can't be referenced by the
-                # fully qualified name and the simple column names may collide.
+                # For combined queries, ensure the order field is in the SELECT list
+                found = False
                 for idx, (sel_expr, _, col_alias) in enumerate(self.select):
                     if is_ref and col_alias == src.refs:
                         src = src.source
-                    elif col_alias:
-                        continue
-                    if src == sel_expr:
+                        found = True
                         resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])
                         break
-                else:
-                    raise DatabaseError('ORDER BY term does not match any column in the result set.')
+                    elif isinstance(sel_expr, Col) and isinstance(src, Col):
+                        if (sel_expr.target == src.target and 
+                            sel_expr.output_field == src.output_field):
+                            found = True
+                            resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])
+                            break
+                if not found:
+                    # If ordering by a column not in SELECT, add it to all subqueries
+                    if isinstance(src, Col):
+                        self.select.append((src, None))
+                        # Reference the newly added column
+                        resolved.set_source_expressions([RawSQL('%d' % len(self.select), ())])
+                        # Add the same column to all combined queries
+                        for query in self.query.combined_queries:
+                            if not any(isinstance(expr, Col) and expr.target == src.target 
+                                     for expr, _ in query.select):
+                                query.select = query.select + ((src, None),)
             sql, params = self.compile(resolved)
             # Don't add the same column twice, but the order direction is
             # not taken into account so we strip it. When this entire method
