diff --git a/.gitignore b/.gitignore
index a334bf2874..b052ddac06 100644
--- a/.gitignore
+++ b/.gitignore
@@ -109,3 +109,4 @@ lib/matplotlib/backends/web_backend/node_modules/
 lib/matplotlib/backends/web_backend/package-lock.json
 
 LICENSE/LICENSE_QHULL
+.aider/
diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py
index 802fd3c997..1755eed012 100644
--- a/lib/matplotlib/axes/_base.py
+++ b/lib/matplotlib/axes/_base.py
@@ -1191,6 +1191,12 @@ class _AxesBase(martist.Artist):
 
         xaxis_visible = self.xaxis.get_visible()
         yaxis_visible = self.yaxis.get_visible()
+        
+        # Store label visibilities
+        x_label_visible = self.xaxis.label.get_visible()
+        y_label_visible = self.yaxis.label.get_visible()
+        x_ticklabels_visible = self.xaxis.get_major_ticks()[0].label1.get_visible() if self.xaxis.get_major_ticks() else True
+        y_ticklabels_visible = self.yaxis.get_major_ticks()[0].label1.get_visible() if self.yaxis.get_major_ticks() else True
 
         self.xaxis.clear()
         self.yaxis.clear()
@@ -1224,6 +1230,20 @@ class _AxesBase(martist.Artist):
         if mpl.rcParams['ytick.minor.visible']:
             self.yaxis.set_minor_locator(mticker.AutoMinorLocator())
 
+        # Restore visibility states
+        self.xaxis.set_visible(xaxis_visible)
+        self.yaxis.set_visible(yaxis_visible)
+        self.xaxis.label.set_visible(x_label_visible)
+        self.yaxis.label.set_visible(y_label_visible)
+        
+        # Restore tick label visibility
+        if self.xaxis.get_major_ticks():
+            for tick in self.xaxis.get_major_ticks():
+                tick.label1.set_visible(x_ticklabels_visible)
+        if self.yaxis.get_major_ticks():
+            for tick in self.yaxis.get_major_ticks():
+                tick.label1.set_visible(y_ticklabels_visible)
+
         if self._sharex is None:
             self._autoscaleXon = True
         if self._sharey is None:
diff --git a/reproduce_bug.png b/reproduce_bug.png
new file mode 100644
index 0000000000..920f320f4e
Binary files /dev/null and b/reproduce_bug.png differ
diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 0000000000..2639308649
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,14 @@
+
+import numpy as np
+import matplotlib.pyplot as plt
+
+fig, axes = plt.subplots(2, 2, sharex=True, sharey=True)
+
+x = np.arange(0.0, 2*np.pi, 0.01)
+y = np.sin(x)
+
+for ax in axes.flatten():
+    ax.clear()
+    ax.plot(x, y)
+
+plt.savefig('reproduce_bug.png')
diff --git a/test1_shared_axes.png b/test1_shared_axes.png
new file mode 100644
index 0000000000..920f320f4e
Binary files /dev/null and b/test1_shared_axes.png differ
diff --git a/test2_mixed_sharing.png b/test2_mixed_sharing.png
new file mode 100644
index 0000000000..f6c990d501
Binary files /dev/null and b/test2_mixed_sharing.png differ
diff --git a/test3_no_sharing.png b/test3_no_sharing.png
new file mode 100644
index 0000000000..df3d5ab8eb
Binary files /dev/null and b/test3_no_sharing.png differ
diff --git a/test4_multiple_clear.png b/test4_multiple_clear.png
new file mode 100644
index 0000000000..7d48b3f63b
Binary files /dev/null and b/test4_multiple_clear.png differ
diff --git a/test_cases.py b/test_cases.py
new file mode 100644
index 0000000000..92e08fcd33
--- /dev/null
+++ b/test_cases.py
@@ -0,0 +1,26 @@
+
+import numpy as np
+import matplotlib.pyplot as plt
+
+# Test Case 1: Basic shared axes
+fig1, axes1 = plt.subplots(2, 2, sharex=True, sharey=True)
+x = np.arange(0.0, 2*np.pi, 0.01)
+y = np.sin(x)
+for ax in axes1.flatten():
+    ax.clear()
+    ax.plot(x, y)
+plt.savefig('test1_shared_axes.png')
+
+# Test Case 2: Mixed sharing (only x shared)
+fig2, axes2 = plt.subplots(2, 2, sharex=True, sharey=False)
+for ax in axes2.flatten():
+    ax.clear()
+    ax.plot(x, y)
+plt.savefig('test2_mixed_sharing.png')
+
+# Test Case 3: No sharing
+fig3, axes3 = plt.subplots(2, 2, sharex=False, sharey=False)
+for ax in axes3.flatten():
+    ax.clear()
+    ax.plot(x, y)
+plt.savefig('test3_no_sharing.png')
diff --git a/test_multiple_clear.py b/test_multiple_clear.py
new file mode 100644
index 0000000000..13350c4b7d
--- /dev/null
+++ b/test_multiple_clear.py
@@ -0,0 +1,20 @@
+
+import numpy as np
+import matplotlib.pyplot as plt
+
+# Test Case 4: Multiple clear() calls
+fig4, axes4 = plt.subplots(2, 2, sharex=True, sharey=True)
+x = np.arange(0.0, 2*np.pi, 0.01)
+y = np.sin(x)
+
+# First clear and plot
+for ax in axes4.flatten():
+    ax.clear()
+    ax.plot(x, y)
+
+# Second clear and plot
+for ax in axes4.flatten():
+    ax.clear()
+    ax.plot(x, 2*y)
+
+plt.savefig('test4_multiple_clear.png')
