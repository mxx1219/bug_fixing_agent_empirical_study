diff --git a/.gitignore b/.gitignore
index 238fb3a200..521baaa795 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,4 @@ tests/coverage_html/
 tests/.coverage
 build/
 tests/report/
+.aider/
diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py
index fdca700c9d..1fea9f2f02 100644
--- a/django/db/models/fields/json.py
+++ b/django/db/models/fields/json.py
@@ -130,12 +130,30 @@ def compile_json_path(key_transforms, include_root=True):
     path = ["$"] if include_root else []
     for key_transform in key_transforms:
         try:
-            num = int(key_transform)
-        except ValueError:  # non-integer
+            if isinstance(key_transform, tuple):
+                # Unpack the key and is_index flag
+                key_name, is_index = key_transform
+                if is_index:
+                    # Array index
+                    path.append("[%s]" % key_name)
+                else:
+                    # Object key
+                    path.append(".")
+                    path.append(json.dumps(str(key_name)))
+            elif isinstance(key_transform, KeyTransform):
+                # Handle KeyTransform objects (backward compatibility)
+                if key_transform.is_index:
+                    path.append("[%s]" % key_transform.key_name)
+                else:
+                    path.append(".")
+                    path.append(json.dumps(str(key_transform.key_name)))
+            else:
+                # Direct value (has_key lookups)
+                path.append(".")
+                path.append(json.dumps(str(key_transform)))
+        except (ValueError, TypeError, AttributeError):
             path.append(".")
-            path.append(json.dumps(key_transform))
-        else:
-            path.append("[%s]" % num)
+            path.append(json.dumps(str(key_transform)))
     return "".join(path)
 
 
@@ -305,20 +323,22 @@ class KeyTransform(Transform):
     postgres_operator = "->"
     postgres_nested_operator = "#>"
 
-    def __init__(self, key_name, *args, **kwargs):
+    def __init__(self, key_name, is_index=None, *args, **kwargs):
         super().__init__(*args, **kwargs)
-        self.key_name = str(key_name)
+        self.key_name = key_name
+        # Use provided is_index or detect from type
+        self.is_index = is_index if is_index is not None else isinstance(key_name, int)
 
     def preprocess_lhs(self, compiler, connection):
-        key_transforms = [self.key_name]
+        key_transforms = [(self.key_name, self.is_index)]
         previous = self.lhs
         while isinstance(previous, KeyTransform):
-            key_transforms.insert(0, previous.key_name)
+            key_transforms.insert(0, (previous.key_name, previous.is_index))
             previous = previous.lhs
         lhs, params = compiler.compile(previous)
         if connection.vendor == "oracle":
             # Escape string-formatting.
-            key_transforms = [key.replace("%", "%%") for key in key_transforms]
+            key_transforms = [(str(key).replace("%", "%%"), is_idx) for key, is_idx in key_transforms]
         return lhs, params, key_transforms
 
     def as_mysql(self, compiler, connection):
@@ -563,7 +583,13 @@ KeyTransform.register_lookup(KeyTransformGte)
 
 class KeyTransformFactory:
     def __init__(self, key_name):
-        self.key_name = key_name
+        # Try to convert numeric keys to integers for array access
+        try:
+            self.key_name = int(key_name)
+            self.is_index = True
+        except (ValueError, TypeError):
+            self.key_name = key_name
+            self.is_index = False
 
     def __call__(self, *args, **kwargs):
-        return KeyTransform(self.key_name, *args, **kwargs)
+        return KeyTransform(self.key_name, self.is_index, *args, **kwargs)
