diff --git a/.gitignore b/.gitignore
index 238fb3a200..521baaa795 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,4 @@ tests/coverage_html/
 tests/.coverage
 build/
 tests/report/
+.aider/
diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py
index bf9c2acd26..cc03e2d85b 100644
--- a/django/db/migrations/autodetector.py
+++ b/django/db/migrations/autodetector.py
@@ -822,9 +822,17 @@ class MigrationAutodetector:
         """Work out renamed fields."""
         self.renamed_fields = {}
         for app_label, model_name, field_name in sorted(self.new_field_keys - self.old_field_keys):
+            # Get the old model name if the model was renamed
             old_model_name = self.renamed_models.get((app_label, model_name), model_name)
             old_model_state = self.from_state.models[app_label, old_model_name]
-            new_model_state = self.to_state.models[app_label, old_model_name]
+            
+            # Look up the model in to_state using the new model name if it was renamed
+            new_model_name = model_name
+            for (old_app_label, old_model), new_model in self.renamed_models.items():
+                if (old_app_label, new_model) == (app_label, model_name):
+                    new_model_name = old_model
+                    break
+            new_model_state = self.to_state.models[app_label, new_model_name]
             field = new_model_state.get_field(field_name)
             # Scan to see if this is actually a rename!
             field_dec = self.deep_deconstruct(field)
