diff --git a/.gitignore b/.gitignore
index 238fb3a200..521baaa795 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,4 @@ tests/coverage_html/
 tests/.coverage
 build/
 tests/report/
+.aider/
diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index d913658291..948d5c7608 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -63,6 +63,21 @@ class Combinable:
             )
             other = Value(other, output_field=output_field)
 
+        # Handle datetime subtraction specially
+        if connector == self.SUB:
+            try:
+                lhs_type = (other if reversed else self).output_field.get_internal_type()
+                rhs_type = (self if reversed else other).output_field.get_internal_type()
+                if lhs_type == rhs_type and lhs_type in {'DateField', 'DateTimeField', 'TimeField'}:
+                    return CombinedExpression(
+                        other if reversed else self,
+                        connector,
+                        self if reversed else other,
+                        output_field=fields.DurationField()
+                    )
+            except (AttributeError, FieldError):
+                pass
+
         if reversed:
             return CombinedExpression(other, connector, self)
         return CombinedExpression(self, connector, other)
@@ -298,18 +313,30 @@ class BaseExpression:
         If all sources are None, then an error is raised higher up the stack in
         the output_field property.
         """
-        sources_iter = (source for source in self.get_source_fields() if source is not None)
-        for output_field in sources_iter:
-            for source in sources_iter:
-                if not isinstance(output_field, source.__class__):
-                    raise FieldError(
-                        'Expression contains mixed types: %s, %s. You must '
-                        'set output_field.' % (
-                            output_field.__class__.__name__,
-                            source.__class__.__name__,
-                        )
-                    )
-            return output_field
+        # Check if output_field is already set (using __dict__ to avoid recursion)
+        if '_output_field' in self.__dict__:
+            return self.__dict__['_output_field']
+
+        sources = [s for s in self.get_source_fields() if s is not None]
+        if not sources:
+            return None
+
+        # Special case: datetime subtraction should result in DurationField
+        if (hasattr(self, 'connector') and 
+            self.connector == self.SUB and 
+            len(sources) == 2 and
+            all(s.get_internal_type() in {'DateField', 'DateTimeField', 'TimeField'} 
+                for s in sources)):
+            return fields.DurationField()
+
+        # If all sources have the same type, use that type
+        if all(isinstance(sources[0], s.__class__) for s in sources[1:]):
+            return sources[0]
+
+        raise FieldError(
+            'Expression contains mixed types: %s. You must set output_field.' % 
+            ', '.join(s.__class__.__name__ for s in sources)
+        )
 
     @staticmethod
     def _convert_value_noop(value, expression, connection):
@@ -459,7 +486,10 @@ class CombinedExpression(SQLiteNumericMixin, Expression):
             return DurationExpression(self.lhs, self.connector, self.rhs).as_sql(compiler, connection)
         datetime_fields = {'DateField', 'DateTimeField', 'TimeField'}
         if self.connector == self.SUB and lhs_type in datetime_fields and lhs_type == rhs_type:
-            return TemporalSubtraction(self.lhs, self.rhs).as_sql(compiler, connection)
+            # Create a TemporalSubtraction and copy its output_field to this expression
+            temporal = TemporalSubtraction(self.lhs, self.rhs)
+            self._output_field = temporal.output_field
+            return temporal.as_sql(compiler, connection)
         expressions = []
         expression_params = []
         sql, params = compiler.compile(self.lhs)
@@ -510,10 +540,11 @@ class DurationExpression(CombinedExpression):
 
 
 class TemporalSubtraction(CombinedExpression):
-    output_field = fields.DurationField()
-
     def __init__(self, lhs, rhs):
-        super().__init__(lhs, self.SUB, rhs)
+        super().__init__(lhs, self.SUB, rhs, output_field=fields.DurationField())
+
+    def _resolve_output_field(self):
+        return fields.DurationField()
 
     def as_sql(self, compiler, connection):
         connection.ops.check_expression_support(self)
