diff --git a/.gitignore b/.gitignore
index 238fb3a200..521baaa795 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,4 @@ tests/coverage_html/
 tests/.coverage
 build/
 tests/report/
+.aider/
diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
index 9b00e24509..73f355bcaa 100644
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -31,6 +31,16 @@ from .utils import get_callable
 
 class ResolverMatch:
     def __init__(self, func, args, kwargs, url_name=None, app_names=None, namespaces=None, route=None, tried=None):
+        # Handle functools.partial
+        if isinstance(func, functools.partial):
+            self.is_partial = True
+            self.partial_args = func.args
+            self.partial_keywords = func.keywords or {}
+            self.orig_func = func.func  # Store the underlying function
+        else:
+            self.is_partial = False
+            self.orig_func = func
+
         self.func = func
         self.args = args
         self.kwargs = kwargs
@@ -45,12 +55,14 @@ class ResolverMatch:
         self.namespaces = [x for x in namespaces if x] if namespaces else []
         self.namespace = ':'.join(self.namespaces)
 
-        if not hasattr(func, '__name__'):
+        # Get the underlying function path
+        view_func = self.orig_func if self.is_partial else func
+        if not hasattr(view_func, '__name__'):
             # A class-based view
-            self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__
+            self._func_path = view_func.__class__.__module__ + '.' + view_func.__class__.__name__
         else:
             # A function-based view
-            self._func_path = func.__module__ + '.' + func.__name__
+            self._func_path = view_func.__module__ + '.' + view_func.__name__
 
         view_path = url_name or self._func_path
         self.view_name = ':'.join(self.namespaces + [view_path])
@@ -59,8 +71,12 @@ class ResolverMatch:
         return (self.func, self.args, self.kwargs)[index]
 
     def __repr__(self):
+        if self.is_partial:
+            func_repr = f"{self._func_path}[partial: args={self.partial_args}, kwargs={self.partial_keywords}]"
+        else:
+            func_repr = self._func_path
         return "ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)" % (
-            self._func_path, self.args, self.kwargs, self.url_name,
+            func_repr, self.args, self.kwargs, self.url_name,
             self.app_names, self.namespaces, self.route,
         )
