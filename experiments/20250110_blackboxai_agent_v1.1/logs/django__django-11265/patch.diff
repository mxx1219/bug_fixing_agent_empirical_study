diff --git a/.gitignore b/.gitignore
index 238fb3a200..521baaa795 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,4 @@ tests/coverage_html/
 tests/.coverage
 build/
 tests/report/
+.aider/
diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index d69c24419b..1efb89eede 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -29,7 +29,7 @@ from django.db.models.fields import Field
 from django.db.models.fields.related_lookups import MultiColSource
 from django.db.models.lookups import Lookup
 from django.db.models.query_utils import (
-    Q, check_rel_lookup_compatibility, refs_expression,
+    Q, FilteredRelation, check_rel_lookup_compatibility, refs_expression,
 )
 from django.db.models.sql.constants import (
     INNER, LOUTER, ORDER_DIR, ORDER_PATTERN, SINGLE,
@@ -1661,11 +1661,46 @@ class Query(BaseExpression):
         saner null handling, and is easier for the backend's optimizer to
         handle.
         """
+        # First handle any filtered relations in the original query
+        filtered_relation = None
+        for name, annotation in self.annotations.items():
+            if isinstance(annotation, FilteredRelation) and name in filter_expr[0]:
+                filtered_relation = annotation
+                break
+
+        if filtered_relation:
+            # Set up the base relation in the original query first
+            field_list = filtered_relation.relation_name.split(LOOKUP_SEP)
+            join_info = self.setup_joins(field_list, self.get_meta(), self.get_initial_alias())
+            
+            # Now clone the query to preserve the setup
+            query = self.clone()
+            
+            # Make sure the filtered relation's condition is applied
+            query.where.add(filtered_relation.condition, AND)
+            
+            # Copy the annotation
+            query.annotations[filtered_relation.alias] = filtered_relation
+            query.annotation_select[filtered_relation.alias] = filtered_relation
+            
+            # Update the filter expression if needed
+            if filter_expr[0].startswith(filtered_relation.alias):
+                new_path = filtered_relation.relation_name + filter_expr[0][len(filtered_relation.alias):]
+                filter_expr = (new_path, filter_expr[1])
+        else:
+            # No filtered relation, just clone
+            query = self.clone()
+
+        # Handle F() expressions
+        filter_lhs, filter_rhs = filter_expr
+        if isinstance(filter_rhs, F):
+            filter_expr = (filter_lhs, OuterRef(filter_rhs.name))
+
         filter_lhs, filter_rhs = filter_expr
         if isinstance(filter_rhs, F):
             filter_expr = (filter_lhs, OuterRef(filter_rhs.name))
-        # Generate the inner query.
-        query = Query(self.model)
+        
+        # Add the filter and clear ordering
         query.add_filter(filter_expr)
         query.clear_ordering(True)
         # Try to have as simple as possible subquery -> trim leading joins from
