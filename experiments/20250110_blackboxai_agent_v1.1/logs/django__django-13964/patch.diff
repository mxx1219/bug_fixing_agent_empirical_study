diff --git a/.gitignore b/.gitignore
index 238fb3a200..521baaa795 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,4 @@ tests/coverage_html/
 tests/.coverage
 build/
 tests/report/
+.aider/
diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py
index 872a4c98dc..6fc30afc2d 100644
--- a/django/db/models/fields/related_descriptors.py
+++ b/django/db/models/fields/related_descriptors.py
@@ -253,12 +253,32 @@ class ForwardManyToOneDescriptor:
 
         # Set the values of the related field.
         else:
+            # Store the initial PK value to detect changes after save
+            initial_pk = {rh_field.attname: getattr(value, rh_field.attname) for _, rh_field in self.field.related_fields}
+            
+            # Set initial values
             for lh_field, rh_field in self.field.related_fields:
-                setattr(instance, lh_field.attname, getattr(value, rh_field.attname))
-
-        # Set the related instance cache used by __get__ to avoid an SQL query
-        # when accessing the attribute we just set.
-        self.field.set_cached_value(instance, value)
+                current_pk = getattr(value, rh_field.attname)
+                setattr(instance, lh_field.attname, current_pk)
+                
+            # If the related object is unsaved or has empty PK, we need to update the 
+            # foreign key after it's saved and has a real PK
+            if not value._state.adding and all(v for v in initial_pk.values()):
+                # Object already has PK, proceed normally
+                self.field.set_cached_value(instance, value)
+            else:
+                # Object is unsaved or has empty PK, set up a post-save hook
+                def update_fk(sender, **kwargs):
+                    if kwargs['instance'] is value:
+                        # Update the foreign key with the new PK
+                        for lh_field, rh_field in self.field.related_fields:
+                            new_pk = getattr(value, rh_field.attname)
+                            if new_pk != initial_pk[rh_field.attname]:
+                                setattr(instance, lh_field.attname, new_pk)
+                        signals.post_save.disconnect(update_fk, sender=value.__class__)
+                
+                signals.post_save.connect(update_fk, sender=value.__class__, weak=False)
+                self.field.set_cached_value(instance, value)
 
         # If this is a one-to-one relation, set the reverse accessor cache on
         # the related object to the current instance to avoid an extra SQL
