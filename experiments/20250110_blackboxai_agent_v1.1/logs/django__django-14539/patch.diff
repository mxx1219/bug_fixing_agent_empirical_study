diff --git a/.gitignore b/.gitignore
index 238fb3a200..521baaa795 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,4 @@ tests/coverage_html/
 tests/.coverage
 build/
 tests/report/
+.aider/
diff --git a/django/utils/html.py b/django/utils/html.py
index 3bc02b8dd3..fd472d57ee 100644
--- a/django/utils/html.py
+++ b/django/utils/html.py
@@ -200,10 +200,9 @@ def strip_spaces_between_tags(value):
 def smart_urlquote(url):
     """Quote a URL if it isn't already quoted."""
     def unquote_quote(segment):
+        """Quote a URL segment, unescaping it first in case it's already quoted."""
         segment = unquote(segment)
-        # Tilde is part of RFC3986 Unreserved Characters
-        # https://tools.ietf.org/html/rfc3986#section-2.3
-        # See also https://bugs.python.org/issue16285
+        # Use standard safe chars from RFC3986
         return quote(segment, safe=RFC3986_SUBDELIMS + RFC3986_GENDELIMS + '~')
 
     # Handle IDN before quoting.
@@ -219,12 +218,32 @@ def smart_urlquote(url):
         return unquote_quote(url)
 
     if query:
-        # Separately unquoting key/value, so as to not mix querystring separators
-        # included in query values. See #22267.
-        query_parts = [(unquote(q[0]), unquote(q[1]))
-                       for q in parse_qsl(query, keep_blank_values=True)]
-        # urlencode will take care of quoting
-        query = urlencode(query_parts)
+        # Handle query parameters
+        try:
+            # Split on & and handle each parameter separately
+            parts = []
+            for param in query.split('&'):
+                if not param:
+                    continue
+                # Split into key=value or just key
+                param_parts = param.split('=', 1)
+                if len(param_parts) == 2:
+                    key, value = param_parts
+                    # First unescape HTML entities and percent-encoded chars
+                    key = html.unescape(unquote(key))
+                    value = html.unescape(unquote(value))
+                    # Then encode with proper percent-encoding
+                    key = quote(key.encode('utf-8'), safe='')
+                    value = quote(value.encode('utf-8'), safe='')
+                    parts.append(f"{key}={value}")
+                else:
+                    # Handle params without values
+                    param = html.unescape(unquote(param_parts[0]))
+                    parts.append(quote(param.encode('utf-8'), safe=''))
+            query = '&'.join(parts)
+        except Exception:
+            # If parsing fails, quote the whole query string
+            query = quote(query, safe='=&')
 
     path = unquote_quote(path)
     fragment = unquote_quote(fragment)
@@ -278,13 +297,16 @@ def urlize(text, trim_url_limit=None, nofollow=False, autoescape=False):
                     trail = closing + trail
                     trimmed_something = True
             # Trim trailing punctuation (after trimming wrapping punctuation,
-            # as encoded entities contain ';'). Unescape entities to avoid
-            # breaking them by removing ';'.
+            # as encoded entities contain ';'). 
+            # First find any trailing punctuation that's not part of an HTML entity
             middle_unescaped = html.unescape(middle)
             stripped = middle_unescaped.rstrip(TRAILING_PUNCTUATION_CHARS)
             if middle_unescaped != stripped:
-                trail = middle[len(stripped):] + trail
-                middle = middle[:len(stripped) - len(middle_unescaped)]
+                # Count how many chars were stripped
+                stripped_chars = len(middle_unescaped) - len(stripped)
+                # Remove exactly that many chars from the end of original string
+                trail = middle[-stripped_chars:] + trail
+                middle = middle[:-stripped_chars]
                 trimmed_something = True
         return lead, middle, trail
 
@@ -331,11 +353,12 @@ def urlize(text, trim_url_limit=None, nofollow=False, autoescape=False):
 
             # Make link.
             if url:
+                # Use the original middle text for display to preserve entities
                 trimmed = trim_url(middle)
                 if autoescape and not safe_input:
                     lead, trail = escape(lead), escape(trail)
-                    trimmed = escape(trimmed)
-                middle = '<a href="%s"%s>%s</a>' % (escape(url), nofollow_attr, trimmed)
+                    # Don't escape trimmed as it already contains proper entities
+                middle = '<a href="%s">%s</a>' % (escape(url), trimmed)
                 words[i] = mark_safe('%s%s%s' % (lead, middle, trail))
             else:
                 if safe_input:
