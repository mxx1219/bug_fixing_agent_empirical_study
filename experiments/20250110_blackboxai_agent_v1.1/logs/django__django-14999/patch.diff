diff --git a/.gitignore b/.gitignore
index 238fb3a200..521baaa795 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,4 @@ tests/coverage_html/
 tests/.coverage
 build/
 tests/report/
+.aider/
diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index 982816be3a..0cdaa27964 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -320,12 +320,16 @@ class RenameModel(ModelOperation):
         new_model = to_state.apps.get_model(app_label, self.new_name)
         if self.allow_migrate_model(schema_editor.connection.alias, new_model):
             old_model = from_state.apps.get_model(app_label, self.old_name)
-            # Move the main table
-            schema_editor.alter_db_table(
-                new_model,
-                old_model._meta.db_table,
-                new_model._meta.db_table,
-            )
+            old_model_meta = old_model._meta
+            # Calculate default table name (app_label_modelname)
+            default_tablename = f"{app_label}_{old_model_meta.model_name}"
+            # Only rename if db_table wasn't explicitly set
+            if not old_model_meta.db_table or old_model_meta.db_table == default_tablename:
+                schema_editor.alter_db_table(
+                    new_model,
+                    old_model._meta.db_table,
+                    new_model._meta.db_table,
+                )
             # Alter the fields pointing to us
             for related_object in old_model._meta.related_objects:
                 if related_object.related_model == old_model:
@@ -354,13 +358,13 @@ class RenameModel(ModelOperation):
                 # Rename the M2M table that's based on this model's name.
                 old_m2m_model = old_field.remote_field.through
                 new_m2m_model = new_field.remote_field.through
-                schema_editor.alter_db_table(
-                    new_m2m_model,
-                    old_m2m_model._meta.db_table,
-                    new_m2m_model._meta.db_table,
-                )
-                # Rename the column in the M2M table that's based on this
-                # model's name.
+                if not old_m2m_model._meta.db_table or old_m2m_model._meta.db_table == default_tablename:
+                    schema_editor.alter_db_table(
+                        new_m2m_model,
+                        old_m2m_model._meta.db_table,
+                        new_m2m_model._meta.db_table,
+                    )
+                # Rename the column in the M2M table that's based on this model's name.
                 schema_editor.alter_field(
                     new_m2m_model,
                     old_m2m_model._meta.get_field(old_model._meta.model_name),
@@ -368,19 +372,7 @@ class RenameModel(ModelOperation):
                 )
 
     def database_backwards(self, app_label, schema_editor, from_state, to_state):
-        self.new_name_lower, self.old_name_lower = self.old_name_lower, self.new_name_lower
-        self.new_name, self.old_name = self.old_name, self.new_name
-
-        self.database_forwards(app_label, schema_editor, from_state, to_state)
-
-        self.new_name_lower, self.old_name_lower = self.old_name_lower, self.new_name_lower
-        self.new_name, self.old_name = self.old_name, self.new_name
-
-    def references_model(self, name, app_label):
-        return (
-            name.lower() == self.old_name_lower or
-            name.lower() == self.new_name_lower
-        )
+        return self.database_forwards(app_label, schema_editor, from_state, to_state)
 
     def describe(self):
         return "Rename model %s to %s" % (self.old_name, self.new_name)
@@ -389,30 +381,14 @@ class RenameModel(ModelOperation):
     def migration_name_fragment(self):
         return 'rename_%s_%s' % (self.old_name_lower, self.new_name_lower)
 
-    def reduce(self, operation, app_label):
-        if (isinstance(operation, RenameModel) and
-                self.new_name_lower == operation.old_name_lower):
-            return [
-                RenameModel(
-                    self.old_name,
-                    operation.new_name,
-                ),
-            ]
-        # Skip `ModelOperation.reduce` as we want to run `references_model`
-        # against self.new_name.
-        return (
-            super(ModelOperation, self).reduce(operation, app_label) or
-            not operation.references_model(self.new_name, app_label)
-        )
-
 
 class ModelOptionOperation(ModelOperation):
+    """Base class for model operations that do not affect other models."""
     def reduce(self, operation, app_label):
         if isinstance(operation, (self.__class__, DeleteModel)) and self.name_lower == operation.name_lower:
             return [operation]
         return super().reduce(operation, app_label)
 
-
 class AlterModelTable(ModelOptionOperation):
     """Rename a model's table."""
 
@@ -443,14 +419,6 @@ class AlterModelTable(ModelOptionOperation):
                 old_model._meta.db_table,
                 new_model._meta.db_table,
             )
-            # Rename M2M fields whose name is based on this model's db_table
-            for (old_field, new_field) in zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many):
-                if new_field.remote_field.through._meta.auto_created:
-                    schema_editor.alter_db_table(
-                        new_field.remote_field.through,
-                        old_field.remote_field.through._meta.db_table,
-                        new_field.remote_field.through._meta.db_table,
-                    )
 
     def database_backwards(self, app_label, schema_editor, from_state, to_state):
         return self.database_forwards(app_label, schema_editor, from_state, to_state)
@@ -465,7 +433,6 @@ class AlterModelTable(ModelOptionOperation):
     def migration_name_fragment(self):
         return 'alter_%s_table' % self.name_lower
 
-
 class AlterTogetherOptionOperation(ModelOptionOperation):
     option_name = None
