diff --git a/.gitignore b/.gitignore
index 6a67c6eb28..cd0195a6d7 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,4 @@ tests/coverage_html/
 tests/.coverage*
 build/
 tests/report/
+.aider/
diff --git a/django/contrib/auth/base_user.py b/django/contrib/auth/base_user.py
index 5ee30bf59c..886455fac5 100644
--- a/django/contrib/auth/base_user.py
+++ b/django/contrib/auth/base_user.py
@@ -5,6 +5,7 @@ not in INSTALLED_APPS.
 import unicodedata
 import warnings
 
+from django.conf import settings
 from django.contrib.auth import password_validation
 from django.contrib.auth.hashers import (
     check_password,
@@ -12,7 +13,7 @@ from django.contrib.auth.hashers import (
     make_password,
 )
 from django.db import models
-from django.utils.crypto import get_random_string, salted_hmac
+from django.utils.crypto import constant_time_compare, get_random_string, salted_hmac
 from django.utils.deprecation import RemovedInDjango51Warning
 from django.utils.translation import gettext_lazy as _
 
@@ -142,6 +143,29 @@ class AbstractBaseUser(models.Model):
             algorithm="sha256",
         ).hexdigest()
 
+    def verify_session_hash(self, stored_hash):
+        """
+        Verify a session hash against current and fallback keys.
+        Returns True if the hash is valid using either the current SECRET_KEY
+        or any key in SECRET_KEY_FALLBACKS.
+        """
+        key_salt = "django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash"
+        current_key = settings.SECRET_KEY
+        fallback_keys = getattr(settings, 'SECRET_KEY_FALLBACKS', [])
+        
+        # Try all keys
+        for key in [current_key] + list(fallback_keys):
+            test_hmac = salted_hmac(
+                key_salt,
+                self.password,
+                secret=key,
+                algorithm="sha256",
+            ).hexdigest()
+            if constant_time_compare(test_hmac, stored_hash):
+                return True
+        
+        return False
+
     @classmethod
     def get_email_field_name(cls):
         try:
diff --git a/django/contrib/sessions/middleware.py b/django/contrib/sessions/middleware.py
index 9c934f9ddd..912aec5e48 100644
--- a/django/contrib/sessions/middleware.py
+++ b/django/contrib/sessions/middleware.py
@@ -5,6 +5,7 @@ from django.conf import settings
 from django.contrib.sessions.backends.base import UpdateError
 from django.contrib.sessions.exceptions import SessionInterrupted
 from django.utils.cache import patch_vary_headers
+from django.utils.crypto import constant_time_compare
 from django.utils.deprecation import MiddlewareMixin
 from django.utils.http import http_date
 
@@ -18,6 +19,17 @@ class SessionMiddleware(MiddlewareMixin):
     def process_request(self, request):
         session_key = request.COOKIES.get(settings.SESSION_COOKIE_NAME)
         request.session = self.SessionStore(session_key)
+        
+        # If user is authenticated, verify session hash with fallback keys
+        if hasattr(request, 'user') and request.user.is_authenticated:
+            session_auth_hash = request.session.get('_auth_user_hash')
+            if session_auth_hash:
+                expected_hash = request.user.get_session_auth_hash()
+                if not constant_time_compare(session_auth_hash, expected_hash):
+                    # Try verifying with fallback keys
+                    if not request.user.verify_session_hash(session_auth_hash):
+                        # Session hash failed verification
+                        request.session.flush()
 
     def process_response(self, request, response):
         """
diff --git a/django/utils/crypto.py b/django/utils/crypto.py
index 1c0e7001c6..2f581d0c7d 100644
--- a/django/utils/crypto.py
+++ b/django/utils/crypto.py
@@ -34,13 +34,8 @@ def salted_hmac(key_salt, value, secret=None, *, algorithm="sha1"):
         raise InvalidAlgorithm(
             "%r is not an algorithm accepted by the hashlib module." % algorithm
         ) from e
-    # We need to generate a derived key from our base key.  We can do this by
-    # passing the key_salt and our base key through a pseudo-random function.
+
     key = hasher(key_salt + secret).digest()
-    # If len(key_salt + secret) > block size of the hash algorithm, the above
-    # line is redundant and could be replaced by key = key_salt + secret, since
-    # the hmac module does the same thing for keys longer than the block size.
-    # However, we need to ensure that we *always* do this.
     return hmac.new(key, msg=force_bytes(value), digestmod=hasher)
