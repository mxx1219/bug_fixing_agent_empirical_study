diff --git a/.gitignore b/.gitignore
index 238fb3a200..521baaa795 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,4 @@ tests/coverage_html/
 tests/.coverage
 build/
 tests/report/
+.aider/
diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index d610dc86f0..e0ba58bb4f 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -2,6 +2,7 @@ import collections.abc
 import copy
 import datetime
 import decimal
+import enum
 import operator
 import uuid
 import warnings
@@ -578,6 +579,8 @@ class Field(RegisterLookupMixin):
         django.core.exceptions.ValidationError if the data can't be converted.
         Return the converted value. Subclasses should override this.
         """
+        if isinstance(value, enum.Enum):
+            return value.value
         return value
 
     @cached_property
@@ -792,6 +795,8 @@ class Field(RegisterLookupMixin):
         """Perform preliminary non-db specific value checks and conversions."""
         if isinstance(value, Promise):
             value = value._proxy____cast()
+        if isinstance(value, enum.Enum):
+            value = value.value
         return value
 
     def get_db_prep_value(self, value, connection, prepared=False):
@@ -1010,6 +1015,8 @@ class CharField(Field):
     def to_python(self, value):
         if isinstance(value, str) or value is None:
             return value
+        if isinstance(value, enum.Enum):
+            return value.value
         return str(value)
 
     def get_prep_value(self, value):
diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py
index 189fb4fa44..5620e41d84 100644
--- a/django/db/models/query_utils.py
+++ b/django/db/models/query_utils.py
@@ -6,6 +6,7 @@ large and/or so that they can be used by other modules without getting into
 circular import difficulties.
 """
 import copy
+import enum
 import functools
 import inspect
 from collections import namedtuple
@@ -122,7 +123,6 @@ class DeferredAttribute:
     def __get__(self, instance, cls=None):
         """
         Retrieve and caches the value from the datastore on the first lookup.
-        Return the cached value.
         """
         if instance is None:
             return self
@@ -136,7 +136,19 @@ class DeferredAttribute:
                 instance.refresh_from_db(fields=[field_name])
                 val = getattr(instance, field_name)
             data[field_name] = val
-        return data[field_name]
+        val = data[field_name]
+        if isinstance(val, enum.Enum):
+            val = val.value
+        return val
+
+    def __set__(self, instance, value):
+        """
+        Deferred loading attributes can be set normally (which means there will
+        never be a database lookup involved.
+        """
+        if isinstance(value, enum.Enum):
+            value = value.value
+        instance.__dict__[self.field.attname] = value
 
     def _check_parent_chain(self, instance):
         """
@@ -144,10 +156,13 @@ class DeferredAttribute:
         loaded in the instance. This can be done if the to-be fetched
         field is a primary key field.
         """
-        opts = instance._meta
-        link_field = opts.get_ancestor_link(self.field.model)
-        if self.field.primary_key and self.field != link_field:
-            return getattr(instance, link_field.attname)
+        if self.field.primary_key and self.field.remote_field:
+            parent_link = instance._meta.get_ancestor_link(self.field.model)
+            if parent_link:
+                try:
+                    return instance.__dict__[parent_link.attname]
+                except KeyError:
+                    pass
         return None
