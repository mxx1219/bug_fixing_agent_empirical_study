diff --git a/.gitignore b/.gitignore
index 238fb3a200..521baaa795 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,4 @@ tests/coverage_html/
 tests/.coverage
 build/
 tests/report/
+.aider/
diff --git a/django/core/handlers/asgi.py b/django/core/handlers/asgi.py
index 7fbabe4510..f90c33675c 100644
--- a/django/core/handlers/asgi.py
+++ b/django/core/handlers/asgi.py
@@ -1,3 +1,4 @@
+import asyncio
 import logging
 import sys
 import tempfile
@@ -159,6 +160,12 @@ class ASGIHandler(base.BaseHandler):
             return
         # Get the response, using the async mode of BaseHandler.
         response = await self.get_response_async(request)
+        # Ensure we have a concrete response before proceeding
+        while asyncio.iscoroutine(response):
+            response = await response
+        # Handle any awaitable response
+        if hasattr(response, '__await__'):
+            response = await response.__await__()
         response._handler_class = self.__class__
         # Increase chunk size on file responses (ASGI servers handles low-level
         # chunking).
diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py
index 169df6b3cf..c4a7f9f56b 100644
--- a/django/core/handlers/base.py
+++ b/django/core/handlers/base.py
@@ -3,7 +3,7 @@ import logging
 import types
 
 from asgiref.sync import async_to_sync, sync_to_async
-
+from django.http import HttpResponse
 from django.conf import settings
 from django.core.exceptions import ImproperlyConfigured, MiddlewareNotUsed
 from django.core.signals import request_finished
@@ -50,6 +50,15 @@ class BaseHandler:
             else:
                 middleware_is_async = middleware_can_async
             try:
+                # For async handlers, ensure proper coroutine handling
+                if is_async:
+                    original_handler = handler
+                    async def async_wrapped_handler(request):
+                        response = await original_handler(request)
+                        if asyncio.iscoroutine(response):
+                            response = await response
+                        return response
+                    handler = async_wrapped_handler
                 # Adapt handler, if needed.
                 handler = self.adapt_method_mode(
                     middleware_is_async, handler, handler_is_async,
@@ -85,9 +94,27 @@ class BaseHandler:
                     self.adapt_method_mode(False, mw_instance.process_exception),
                 )
 
+            # Convert the middleware instance to a handler
             handler = convert_exception_to_response(mw_instance)
             handler_is_async = middleware_is_async
 
+            # For async handlers, ensure proper coroutine handling at the top level
+            if is_async and handler_is_async:
+                original_handler = handler
+                async def async_handler(request):
+                    response = await original_handler(request)
+                    # Only await once to avoid recursion
+                    if asyncio.iscoroutine(response):
+                        response = await response
+                    # Ensure it's an HttpResponse
+                    if not isinstance(response, HttpResponse):
+                        raise ValueError(
+                            "View didn't return an HttpResponse object. "
+                            "It returned %s instead." % type(response).__name__
+                        )
+                    return response
+                handler = async_handler
+
         # Adapt the top of the stack, if needed.
         handler = self.adapt_method_mode(is_async, handler, handler_is_async)
         # We only assign to this when initialization is complete as it is used
@@ -115,6 +142,7 @@ class BaseHandler:
                 if debug:
                     logger.debug('Synchronous %s adapted.', name)
                 return sync_to_async(method, thread_sensitive=True)
+            return method
         elif method_is_async:
             if debug:
                 logger.debug('Asynchronous %s adapted.', name)
@@ -228,7 +256,20 @@ class BaseHandler:
             if not asyncio.iscoroutinefunction(wrapped_callback):
                 wrapped_callback = sync_to_async(wrapped_callback, thread_sensitive=True)
             try:
+                # Get the response from the view
                 response = await wrapped_callback(request, *callback_args, **callback_kwargs)
+                # Ensure we have a concrete response, not a coroutine
+                if asyncio.iscoroutine(response):
+                    response = await response
+                # Ensure the response is not an awaitable
+                if hasattr(response, '__await__'):
+                    response = await response.__await__()
+                # Ensure the response is a proper HttpResponse
+                if not isinstance(response, HttpResponse):
+                    raise ValueError(
+                        "The view %s didn't return an HttpResponse object. "
+                        "It returned %s instead." % (wrapped_callback.__name__, type(response).__name__)
+                    )
             except Exception as e:
                 response = await sync_to_async(
                     self.process_exception_by_middleware,
@@ -293,7 +334,7 @@ class BaseHandler:
         """
         Raise an error if the view returned None or an uncalled coroutine.
         """
-        if not(response is None or asyncio.iscoroutine(response)):
+        if response is not None and not (asyncio.iscoroutine(response) or hasattr(response, '__await__')):
             return
         if not name:
             if isinstance(callback, types.FunctionType):  # FBV
diff --git a/django/core/handlers/exception.py b/django/core/handlers/exception.py
index 98fb46083a..f4e4557aec 100644
--- a/django/core/handlers/exception.py
+++ b/django/core/handlers/exception.py
@@ -4,6 +4,7 @@ import sys
 from functools import wraps
 
 from asgiref.sync import sync_to_async
+from django.http import HttpResponse
 
 from django.conf import settings
 from django.core import signals
@@ -35,7 +36,17 @@ def convert_exception_to_response(get_response):
         @wraps(get_response)
         async def inner(request):
             try:
+                # Get the response and ensure it's concrete
                 response = await get_response(request)
+                # Only await once to avoid recursion
+                if asyncio.iscoroutine(response):
+                    response = await response
+                # Ensure it's an HttpResponse
+                if not isinstance(response, HttpResponse):
+                    raise ValueError(
+                        "View didn't return an HttpResponse object. "
+                        "It returned %s instead." % type(response).__name__
+                    )
             except Exception as exc:
                 response = await sync_to_async(response_for_exception)(request, exc)
             return response
diff --git a/django/utils/deprecation.py b/django/utils/deprecation.py
index b2c681b33c..ce69fb8c9b 100644
--- a/django/utils/deprecation.py
+++ b/django/utils/deprecation.py
@@ -126,16 +126,25 @@ class MiddlewareMixin:
         """
         response = None
         if hasattr(self, 'process_request'):
-            response = await sync_to_async(
-                self.process_request,
-                thread_sensitive=True,
-            )(request)
-        response = response or await self.get_response(request)
+            if asyncio.iscoroutinefunction(self.process_request):
+                response = await self.process_request(request)
+            else:
+                response = await sync_to_async(
+                    self.process_request,
+                    thread_sensitive=True,
+                )(request)
+        
+        if response is None:
+            response = await self.get_response(request)
+        
         if hasattr(self, 'process_response'):
-            response = await sync_to_async(
-                self.process_response,
-                thread_sensitive=True,
-            )(request, response)
+            if asyncio.iscoroutinefunction(self.process_response):
+                response = await self.process_response(request, response)
+            else:
+                response = await sync_to_async(
+                    self.process_response,
+                    thread_sensitive=True,
+                )(request, response)
         return response
 
     def _get_response_none_deprecation(self, get_response):
