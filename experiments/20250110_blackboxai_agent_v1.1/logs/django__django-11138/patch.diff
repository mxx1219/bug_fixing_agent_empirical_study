diff --git a/.gitignore b/.gitignore
index 238fb3a200..521baaa795 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,4 @@ tests/coverage_html/
 tests/.coverage
 build/
 tests/report/
+.aider/
diff --git a/django/db/backends/mysql/operations.py b/django/db/backends/mysql/operations.py
index 50f85e0621..e7f9c2fc4c 100644
--- a/django/db/backends/mysql/operations.py
+++ b/django/db/backends/mysql/operations.py
@@ -70,7 +70,9 @@ class DatabaseOperations(BaseDatabaseOperations):
 
     def _convert_field_to_tz(self, field_name, tzname):
         if settings.USE_TZ:
-            field_name = "CONVERT_TZ(%s, 'UTC', '%s')" % (field_name, tzname)
+            db_timezone = self.connection.settings_dict.get('TIME_ZONE', 'UTC')
+            if db_timezone != tzname:
+                field_name = "CONVERT_TZ(%s, '%s', '%s')" % (field_name, db_timezone, tzname)
         return field_name
 
     def datetime_cast_date_sql(self, field_name, tzname):
diff --git a/django/db/backends/sqlite3/operations.py b/django/db/backends/sqlite3/operations.py
index c4b02e5c60..b4b1bc144e 100644
--- a/django/db/backends/sqlite3/operations.py
+++ b/django/db/backends/sqlite3/operations.py
@@ -257,8 +257,12 @@ class DatabaseOperations(BaseDatabaseOperations):
         if value is not None:
             if not isinstance(value, datetime.datetime):
                 value = parse_datetime(value)
-            if settings.USE_TZ and not timezone.is_aware(value):
-                value = timezone.make_aware(value, self.connection.timezone)
+            if settings.USE_TZ:
+                db_timezone = self.connection.settings_dict.get('TIME_ZONE')
+                if not timezone.is_aware(value):
+                    # If DB timezone is set, use it, otherwise use UTC
+                    tz = timezone.pytz.timezone(db_timezone) if db_timezone else timezone.utc
+                    value = timezone.make_aware(value, tz)
         return value
 
     def convert_datefield_value(self, value, expression, connection):
