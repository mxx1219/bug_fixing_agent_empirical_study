

TASK:


[Bug]: Unable to pickle figure with draggable legend
### Bug summary

I am unable to pickle figure with draggable legend. Same error comes for draggable annotations.





### Code for reproduction

```python
import matplotlib.pyplot as plt
import pickle

fig = plt.figure()
ax = fig.add_subplot(111)

time=[0,1,2,3,4]
speed=[40,43,45,47,48]

ax.plot(time,speed,label="speed")

leg=ax.legend()
leg.set_draggable(True) #pickling works after removing this line 

pickle.dumps(fig)
plt.show()
```


### Actual outcome

`TypeError: cannot pickle 'FigureCanvasQTAgg' object`

### Expected outcome

Pickling successful

### Additional information

_No response_

### Operating system

Windows 10

### Matplotlib Version

3.7.0

### Matplotlib Backend

_No response_

### Python version

3.10

### Jupyter version

_No response_

### Installation

pip



============================================================



ACTION:

THOUGHT: I'll help you implement the necessary changes following the steps you outlined.

1. First, let's explore the repository structure:
CODE:
get_repo_structure("/workspace/matplotlib__matplotlib__3.7")

============================================================



OBSERVATION:

/workspace/matplotlib__matplotlib__3.7:
CITATION.bib
CODE_OF_CONDUCT.md
INSTALL.rst
LICENSE
README.md
SECURITY.md
__pycache__
azure-pipelines.yml
build
ci
doc
environment.yml
extern
galleries
lib
mplsetup.cfg.template
pyproject.toml
pytest.ini
requirements
setup.cfg
setup.py
setupext.py
src
tmp
tools
tox.ini

/workspace/matplotlib__matplotlib__3.7/LICENSE:
LICENSE
LICENSE_AMSFONTS
LICENSE_BAKOMA
LICENSE_CARLOGO
LICENSE_COLORBREWER
LICENSE_COURIERTEN
LICENSE_JSXTOOLS_RESIZE_OBSERVER
LICENSE_QHULL
LICENSE_QT4_EDITOR
LICENSE_SOLARIZED
LICENSE_STIX
LICENSE_YORICK

/workspace/matplotlib__matplotlib__3.7/__pycache__:
setupext.cpython-311.pyc

/workspace/matplotlib__matplotlib__3.7/build:
freetype-2.6.1
qhull-2020.2

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1:
CMakeLists.txt
ChangeLog
ChangeLog.20
ChangeLog.21
ChangeLog.22
ChangeLog.23
ChangeLog.24
Jamfile
Jamrules
Makefile
README
README.git
autogen.sh
builds
config.mk
configure
devel
docs
include
modules.cfg
objs
src
version.sed
vms_make.com

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/builds:
FindHarfBuzz.cmake
amiga
ansi
atari
beos
cmake
compiler
detect.mk
dos
exports.mk
freetype.mk
link_dos.mk
link_std.mk
mac
modules.mk
newline
os2
symbian
toplevel.mk
unix
vms
wince
windows

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/builds/amiga:
README
include
makefile
makefile.os4
smakefile
src

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/builds/amiga/include:
config

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/builds/amiga/include/config:
ftconfig.h
ftmodule.h

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/builds/amiga/src:
base

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/builds/amiga/src/base:
ftdebug.c
ftsystem.c

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/builds/ansi:
ansi-def.mk
ansi.mk

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/builds/atari:
ATARI.H
FNames.SIC
FREETYPE.PRJ
README.TXT
deflinejoiner.awk
gen-purec-patch.sh

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/builds/beos:
beos-def.mk
beos.mk
detect.mk

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/builds/cmake:
iOS.cmake

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/builds/compiler:
ansi-cc.mk
bcc-dev.mk
bcc.mk
emx.mk
gcc-dev.mk
gcc.mk
intelc.mk
unix-lcc.mk
visualage.mk
visualc.mk
watcom.mk
win-lcc.mk

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/builds/dos:
detect.mk
dos-def.mk
dos-emx.mk
dos-gcc.mk
dos-wat.mk

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/builds/mac:
FreeType.m68k_cfm.make.txt
FreeType.m68k_far.make.txt
FreeType.ppc_carbon.make.txt
FreeType.ppc_classic.make.txt
README
ascii2mpw.py
freetype-Info.plist
ftlib.prj.xml
ftmac.c

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/builds/os2:
detect.mk
os2-def.mk
os2-dev.mk
os2-gcc.mk

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/builds/symbian:
bld.inf
freetype.mmp

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/builds/unix:
aclocal.m4
config.guess
config.log
config.status
config.sub
configure
configure.ac
configure.raw
detect.mk
freetype-config
freetype-config.in
freetype2.in
freetype2.m4
freetype2.pc
ft-munmap.m4
ftconfig.h
ftconfig.in
ftsystem.c
install-sh
install.mk
libtool
ltmain.sh
pkg.m4
unix-cc.in
unix-cc.mk
unix-def.in
unix-def.mk
unix-dev.mk
unix-lcc.mk
unix.mk
unixddef.mk

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/builds/vms:
ftconfig.h
ftsystem.c

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/builds/wince:
ftdebug.c
vc2005-ce
vc2008-ce

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/builds/wince/vc2005-ce:
freetype.sln
freetype.vcproj
index.html

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/builds/wince/vc2008-ce:
freetype.sln
freetype.vcproj
index.html

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/builds/windows:
detect.mk
ftdebug.c
vc2005
vc2008
vc2010
visualc
visualce
w32-bcc.mk
w32-bccd.mk
w32-dev.mk
w32-gcc.mk
w32-icc.mk
w32-intl.mk
w32-lcc.mk
w32-mingw32.mk
w32-vcc.mk
w32-wat.mk
win32-def.mk

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/builds/windows/vc2005:
freetype.sln
freetype.vcproj
index.html

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/builds/windows/vc2008:
freetype.sln
freetype.vcproj
index.html

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/builds/windows/vc2010:
freetype.sln
freetype.user.props
freetype.vcxproj
freetype.vcxproj.filters
index.html

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/builds/windows/visualc:
freetype.dsp
freetype.dsw
freetype.sln
freetype.vcproj
index.html

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/builds/windows/visualce:
freetype.dsp
freetype.dsw
freetype.vcproj
index.html

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/devel:
ft2build.h
ftoption.h

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/docs:
CHANGES
CMAKE
CUSTOMIZE
DEBUG
FTL.TXT
GPLv2.TXT
INSTALL
INSTALL.ANY
INSTALL.CROSS
INSTALL.GNU
INSTALL.MAC
INSTALL.UNIX
INSTALL.VMS
LICENSE.TXT
MAKEPP
PROBLEMS
TODO
VERSION.DLL
formats.txt
freetype-config.1
raster.txt
reference
release

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/docs/reference:
README
ft2-auto_hinter.html
ft2-base_interface.html
ft2-basic_types.html
ft2-bdf_fonts.html
ft2-bitmap_handling.html
ft2-bzip2.html
ft2-cache_subsystem.html
ft2-cff_driver.html
ft2-cid_fonts.html
ft2-computations.html
ft2-error_code_values.html
ft2-error_enumerations.html
ft2-font_formats.html
ft2-gasp_table.html
ft2-glyph_management.html
ft2-glyph_stroker.html
ft2-glyph_variants.html
ft2-gx_validation.html
ft2-gzip.html
ft2-header_file_macros.html
ft2-header_inclusion.html
ft2-incremental.html
ft2-index.html
ft2-lcd_filtering.html
ft2-list_processing.html
ft2-lzw.html
ft2-mac_specific.html
ft2-module_management.html
ft2-multiple_masters.html
ft2-ot_validation.html
ft2-outline_processing.html
ft2-pfr_fonts.html
ft2-quick_advance.html
ft2-raster.html
ft2-sfnt_names.html
ft2-sizes_management.html
ft2-system_interface.html
ft2-toc.html
ft2-truetype_engine.html
ft2-truetype_tables.html
ft2-tt_driver.html
ft2-type1_tables.html
ft2-user_allocation.html
ft2-version.html
ft2-winfnt_fonts.html

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/include:
freetype
ft2build.h

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/include/freetype:
config
freetype.h
ftadvanc.h
ftautoh.h
ftbbox.h
ftbdf.h
ftbitmap.h
ftbzip2.h
ftcache.h
ftcffdrv.h
ftchapters.h
ftcid.h
fterrdef.h
fterrors.h
ftfntfmt.h
ftgasp.h
ftglyph.h
ftgxval.h
ftgzip.h
ftimage.h
ftincrem.h
ftlcdfil.h
ftlist.h
ftlzw.h
ftmac.h
ftmm.h
ftmodapi.h
ftmoderr.h
ftotval.h
ftoutln.h
ftpfr.h
ftrender.h
ftsizes.h
ftsnames.h
ftstroke.h
ftsynth.h
ftsystem.h
fttrigon.h
ftttdrv.h
fttypes.h
ftwinfnt.h
internal
t1tables.h
ttnameid.h
tttables.h
tttags.h
ttunpat.h

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/include/freetype/config:
ftconfig.h
ftheader.h
ftmodule.h
ftoption.h
ftstdlib.h

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/include/freetype/internal:
autohint.h
ftcalc.h
ftdebug.h
ftdriver.h
ftgloadr.h
ftmemory.h
ftobjs.h
ftpic.h
ftrfork.h
ftserv.h
ftstream.h
fttrace.h
ftvalid.h
internal.h
psaux.h
pshints.h
services
sfnt.h
t1types.h
tttypes.h

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/include/freetype/internal/services:
svbdf.h
svcid.h
svfntfmt.h
svgldict.h
svgxval.h
svkern.h
svmm.h
svotval.h
svpfr.h
svpostnm.h
svprop.h
svpscmap.h
svpsinfo.h
svsfnt.h
svttcmap.h
svtteng.h
svttglyf.h
svwinfnt.h

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/objs:
README
apinames
autofit.lo
autofit.o
bdf.lo
bdf.o
cff.lo
cff.o
ftbase.lo
ftbase.o
ftbbox.lo
ftbbox.o
ftbdf.lo
ftbdf.o
ftbitmap.lo
ftbitmap.o
ftbzip2.lo
ftbzip2.o
ftcache.lo
ftcache.o
ftcid.lo
ftcid.o
ftdebug.lo
ftdebug.o
ftexport.sym
ftfntfmt.lo
ftfntfmt.o
ftfstype.lo
ftfstype.o
ftgasp.lo
ftgasp.o
ftglyph.lo
ftglyph.o
ftgxval.lo
ftgxval.o
ftgzip.lo
ftgzip.o
ftinit.lo
ftinit.o
ftlcdfil.lo
ftlcdfil.o
ftlzw.lo
ftlzw.o
ftmm.lo
ftmm.o
ftmodule.h
ftotval.lo
ftotval.o
ftpatent.lo
ftpatent.o
ftpfr.lo
ftpfr.o
ftstroke.lo
ftstroke.o
ftsynth.lo
ftsynth.o
ftsystem.lo
ftsystem.o
fttype1.lo
fttype1.o
ftwinfnt.lo
ftwinfnt.o
libfreetype.la
pcf.lo
pcf.o
pfr.lo
pfr.o
psaux.lo
psaux.o
pshinter.lo
pshinter.o
psnames.lo
psnames.o
raster.lo
raster.o
sfnt.lo
sfnt.o
smooth.lo
smooth.o
truetype.lo
truetype.o
type1.lo
type1.o
type1cid.lo
type1cid.o
type42.lo
type42.o
winfnt.lo
winfnt.o

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/src:
Jamfile
autofit
base
bdf
bzip2
cache
cff
cid
gxvalid
gzip
lzw
otvalid
pcf
pfr
psaux
pshinter
psnames
raster
sfnt
smooth
tools
truetype
type1
type42
winfonts

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/src/autofit:
Jamfile
afangles.c
afangles.h
afblue.c
afblue.cin
afblue.dat
afblue.h
afblue.hin
afcjk.c
afcjk.h
afcover.h
afdummy.c
afdummy.h
aferrors.h
afglobal.c
afglobal.h
afhints.c
afhints.h
afindic.c
afindic.h
aflatin.c
aflatin.h
aflatin2.c
aflatin2.h
afloader.c
afloader.h
afmodule.c
afmodule.h
afpic.c
afpic.h
afranges.c
afranges.h
afscript.h
afstyles.h
aftypes.h
afwarp.c
afwarp.h
afwrtsys.h
autofit.c
hbshim.c
hbshim.h
module.mk
rules.mk

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/src/base:
Jamfile
basepic.c
basepic.h
ftadvanc.c
ftapi.c
ftbase.c
ftbase.h
ftbbox.c
ftbdf.c
ftbitmap.c
ftcalc.c
ftcid.c
ftdbgmem.c
ftdebug.c
ftfntfmt.c
ftfstype.c
ftgasp.c
ftgloadr.c
ftglyph.c
ftgxval.c
ftinit.c
ftlcdfil.c
ftmac.c
ftmm.c
ftobjs.c
ftotval.c
ftoutln.c
ftpatent.c
ftpfr.c
ftpic.c
ftrfork.c
ftsnames.c
ftstream.c
ftstroke.c
ftsynth.c
ftsystem.c
fttrigon.c
fttype1.c
ftutil.c
ftwinfnt.c
md5.c
md5.h
rules.mk

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/src/bdf:
Jamfile
README
bdf.c
bdf.h
bdfdrivr.c
bdfdrivr.h
bdferror.h
bdflib.c
module.mk
rules.mk

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/src/bzip2:
Jamfile
ftbzip2.c
rules.mk

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/src/cache:
Jamfile
ftcache.c
ftcbasic.c
ftccache.c
ftccache.h
ftccback.h
ftccmap.c
ftcerror.h
ftcglyph.c
ftcglyph.h
ftcimage.c
ftcimage.h
ftcmanag.c
ftcmanag.h
ftcmru.c
ftcmru.h
ftcsbits.c
ftcsbits.h
rules.mk

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/src/cff:
Jamfile
cf2arrst.c
cf2arrst.h
cf2blues.c
cf2blues.h
cf2error.c
cf2error.h
cf2fixed.h
cf2font.c
cf2font.h
cf2ft.c
cf2ft.h
cf2glue.h
cf2hints.c
cf2hints.h
cf2intrp.c
cf2intrp.h
cf2read.c
cf2read.h
cf2stack.c
cf2stack.h
cf2types.h
cff.c
cffcmap.c
cffcmap.h
cffdrivr.c
cffdrivr.h
cfferrs.h
cffgload.c
cffgload.h
cffload.c
cffload.h
cffobjs.c
cffobjs.h
cffparse.c
cffparse.h
cffpic.c
cffpic.h
cfftoken.h
cfftypes.h
module.mk
rules.mk

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/src/cid:
Jamfile
ciderrs.h
cidgload.c
cidgload.h
cidload.c
cidload.h
cidobjs.c
cidobjs.h
cidparse.c
cidparse.h
cidriver.c
cidriver.h
cidtoken.h
module.mk
rules.mk
type1cid.c

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/src/gxvalid:
Jamfile
README
gxvalid.c
gxvalid.h
gxvbsln.c
gxvcommn.c
gxvcommn.h
gxverror.h
gxvfeat.c
gxvfeat.h
gxvfgen.c
gxvjust.c
gxvkern.c
gxvlcar.c
gxvmod.c
gxvmod.h
gxvmort.c
gxvmort.h
gxvmort0.c
gxvmort1.c
gxvmort2.c
gxvmort4.c
gxvmort5.c
gxvmorx.c
gxvmorx.h
gxvmorx0.c
gxvmorx1.c
gxvmorx2.c
gxvmorx4.c
gxvmorx5.c
gxvopbd.c
gxvprop.c
gxvtrak.c
module.mk
rules.mk

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/src/gzip:
Jamfile
adler32.c
ftgzip.c
infblock.c
infblock.h
infcodes.c
infcodes.h
inffixed.h
inflate.c
inftrees.c
inftrees.h
infutil.c
infutil.h
rules.mk
zconf.h
zlib.h
zutil.c
zutil.h

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/src/lzw:
Jamfile
ftlzw.c
ftzopen.c
ftzopen.h
rules.mk

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/src/otvalid:
Jamfile
module.mk
otvalid.c
otvalid.h
otvbase.c
otvcommn.c
otvcommn.h
otverror.h
otvgdef.c
otvgpos.c
otvgpos.h
otvgsub.c
otvjstf.c
otvmath.c
otvmod.c
otvmod.h
rules.mk

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/src/pcf:
Jamfile
README
module.mk
pcf.c
pcf.h
pcfdrivr.c
pcfdrivr.h
pcferror.h
pcfread.c
pcfread.h
pcfutil.c
pcfutil.h
rules.mk

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/src/pfr:
Jamfile
module.mk
pfr.c
pfrcmap.c
pfrcmap.h
pfrdrivr.c
pfrdrivr.h
pfrerror.h
pfrgload.c
pfrgload.h
pfrload.c
pfrload.h
pfrobjs.c
pfrobjs.h
pfrsbit.c
pfrsbit.h
pfrtypes.h
rules.mk

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/src/psaux:
Jamfile
afmparse.c
afmparse.h
module.mk
psaux.c
psauxerr.h
psauxmod.c
psauxmod.h
psconv.c
psconv.h
psobjs.c
psobjs.h
rules.mk
t1cmap.c
t1cmap.h
t1decode.c
t1decode.h

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/src/pshinter:
Jamfile
module.mk
pshalgo.c
pshalgo.h
pshglob.c
pshglob.h
pshinter.c
pshmod.c
pshmod.h
pshnterr.h
pshpic.c
pshpic.h
pshrec.c
pshrec.h
rules.mk

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/src/psnames:
Jamfile
module.mk
psmodule.c
psmodule.h
psnamerr.h
psnames.c
pspic.c
pspic.h
pstables.h
rules.mk

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/src/raster:
Jamfile
ftmisc.h
ftraster.c
ftraster.h
ftrend1.c
ftrend1.h
module.mk
raster.c
rasterrs.h
rastpic.c
rastpic.h
rules.mk

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/src/sfnt:
Jamfile
module.mk
pngshim.c
pngshim.h
rules.mk
sfdriver.c
sfdriver.h
sferrors.h
sfnt.c
sfntpic.c
sfntpic.h
sfobjs.c
sfobjs.h
ttbdf.c
ttbdf.h
ttcmap.c
ttcmap.h
ttcmapc.h
ttkern.c
ttkern.h
ttload.c
ttload.h
ttmtx.c
ttmtx.h
ttpost.c
ttpost.h
ttsbit.c
ttsbit.h

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/src/smooth:
Jamfile
ftgrays.c
ftgrays.h
ftsmerrs.h
ftsmooth.c
ftsmooth.h
ftspic.c
ftspic.h
module.mk
rules.mk
smooth.c

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/src/tools:
Jamfile
afblue.pl
apinames.c
chktrcmp.py
cordic.py
docmaker
ftrandom
glnames.py
no-copyright
test_afm.c
test_bbox.c
test_trig.c
update-copyright
update-copyright-year

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/src/tools/docmaker:
content.py
docbeauty.py
docmaker.py
formatter.py
sources.py
tohtml.py
utils.py

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/src/tools/ftrandom:
Makefile
README
ftrandom.c

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/src/truetype:
Jamfile
module.mk
rules.mk
truetype.c
ttdriver.c
ttdriver.h
tterrors.h
ttgload.c
ttgload.h
ttgxvar.c
ttgxvar.h
ttinterp.c
ttinterp.h
ttobjs.c
ttobjs.h
ttpic.c
ttpic.h
ttpload.c
ttpload.h
ttsubpix.c
ttsubpix.h

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/src/type1:
Jamfile
module.mk
rules.mk
t1afm.c
t1afm.h
t1driver.c
t1driver.h
t1errors.h
t1gload.c
t1gload.h
t1load.c
t1load.h
t1objs.c
t1objs.h
t1parse.c
t1parse.h
t1tokens.h
type1.c

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/src/type42:
Jamfile
module.mk
rules.mk
t42drivr.c
t42drivr.h
t42error.h
t42objs.c
t42objs.h
t42parse.c
t42parse.h
t42types.h
type42.c

/workspace/matplotlib__matplotlib__3.7/build/freetype-2.6.1/src/winfonts:
Jamfile
fnterrs.h
module.mk
rules.mk
winfnt.c
winfnt.h

/workspace/matplotlib__matplotlib__3.7/build/qhull-2020.2:
Announce.txt
CMakeLists.txt
COPYING.txt
File_id.diz
Makefile
QHULL-GO.lnk
README.txt
REGISTER.txt
build
eg
html
index.htm
qhull-2020-src-8.0.2-tgz.md5sum
src

/workspace/matplotlib__matplotlib__3.7/build/qhull-2020.2/build:
CMakeModules
config.cmake.in
libqhull-32.vcxproj
libqhull-64.vcxproj
libqhull.vcproj
qconvex-32.vcxproj
qconvex-64.vcxproj
qconvex.vcproj
qdelaunay-32.vcxproj
qdelaunay-64.vcxproj
qdelaunay.vcproj
qhalf-32.vcxproj
qhalf-64.vcxproj
qhalf.vcproj
qhull-32.sln
qhull-32.vcxproj
qhull-64.sln
qhull-64.vcxproj
qhull.pc.in
qhull.sln
qhull.vcproj
qhull_p-32.vcxproj
qhull_p-64.vcxproj
qhull_p.vcproj
qhull_r-32.vcxproj
qhull_r-64.vcxproj
qhull_r.vcproj
qhullcpp-32.vcxproj
qhullcpp-64.vcxproj
qhullcpp.vcproj
qhullstatic-32.vcxproj
qhullstatic-64.vcxproj
qhullstatic.vcproj
qhullstatic_r-32.vcxproj
qhullstatic_r-64.vcxproj
qhullstatic_r.vcproj
qvoronoi-32.vcxproj
qvoronoi-64.vcxproj
qvoronoi.vcproj
rbox-32.vcxproj
rbox-64.vcxproj
rbox.vcproj
testqset-32.vcxproj
testqset-64.vcxproj
testqset.vcproj
testqset_r-32.vcxproj
testqset_r-64.vcxproj
testqset_r.vcproj
user_eg-32.vcxproj
user_eg-64.vcxproj
user_eg.vcproj
user_eg2-32.vcxproj
user_eg2-64.vcxproj
user_eg2.vcproj
user_eg3-32.vcxproj
user_eg3-64.vcxproj
user_eg3.vcproj

/workspace/matplotlib__matplotlib__3.7/build/qhull-2020.2/build/CMakeModules:
CheckLFS.cmake

/workspace/matplotlib__matplotlib__3.7/build/qhull-2020.2/eg:
Qhull-go.bat
make-qhull_qh.sh
make-vcproj.sh
q_benchmark
q_benchmark-ok.txt
q_eg
q_egtest
q_test
q_test-ok.txt
q_test.bat
qhull-zip.sh
qhulltest-ok.txt
qtest.sh

/workspace/matplotlib__matplotlib__3.7/build/qhull-2020.2/html:
index.htm
normal_voronoi_knauss_oesterle.jpg
qconvex.htm
qdelau_f.htm
qdelaun.htm
qh--4d.gif
qh--cone.gif
qh--dt.gif
qh--geom.gif
qh--half.gif
qh--rand.gif
qh-code.htm
qh-eg.htm
qh-faq.htm
qh-get.htm
qh-impre.htm
qh-optc.htm
qh-optf.htm
qh-optg.htm
qh-opto.htm
qh-optp.htm
qh-optq.htm
qh-optt.htm
qh-quick.htm
qh_findbestfacet-drielsma.pdf
qhalf.htm
qhull-cpp.xml
qhull.htm
qhull.man
qhull.txt
qvoron_f.htm
qvoronoi.htm
rbox.htm
rbox.man
rbox.txt

/workspace/matplotlib__matplotlib__3.7/build/qhull-2020.2/src:
Changes.txt
libqhull
libqhull_r
libqhullcpp
libqhullstatic
libqhullstatic_r
qconvex
qdelaunay
qhalf
qhull
qhull-all.pro
qhull-app-c.pri
qhull-app-c_r.pri
qhull-app-cpp.pri
qhull-app-shared.pri
qhull-app-shared_r.pri
qhull-libqhull-src.pri
qhull-libqhull-src_r.pri
qhull-warn.pri
qhulltest
qvoronoi
rbox
testqset
testqset_r
user_eg
user_eg2
user_eg3

/workspace/matplotlib__matplotlib__3.7/build/qhull-2020.2/src/libqhull:
DEPRECATED.txt
Makefile
Mborland
geom.c
geom.h
geom2.c
global.c
index.htm
io.c
io.h
libqhull.c
libqhull.h
libqhull.pro
mem.c
mem.h
merge.c
merge.h
poly.c
poly.h
poly2.c
qh-geom.htm
qh-globa.htm
qh-io.htm
qh-mem.htm
qh-merge.htm
qh-poly.htm
qh-qhull.htm
qh-set.htm
qh-stat.htm
qh-user.htm
qhull-exports.def
qhull-nomerge-exports.def
qhull_a.h
qhull_p-exports.def
qhull_p-nomerge-exports.def
qset.c
qset.h
random.c
random.h
rboxlib.c
stat.c
stat.h
user.c
user.h
usermem.c
userprintf.c
userprintf_rbox.c

/workspace/matplotlib__matplotlib__3.7/build/qhull-2020.2/src/libqhull_r:
Makefile
geom2_r.c
geom_r.c
geom_r.h
global_r.c
index.htm
io_r.c
io_r.h
libqhull_r.c
libqhull_r.h
libqhull_r.pro
mem_r.c
mem_r.h
merge_r.c
merge_r.h
poly2_r.c
poly_r.c
poly_r.h
qh-geom_r.htm
qh-globa_r.htm
qh-io_r.htm
qh-mem_r.htm
qh-merge_r.htm
qh-poly_r.htm
qh-qhull_r.htm
qh-set_r.htm
qh-stat_r.htm
qh-user_r.htm
qhull_r-exports.def
qhull_r-nomerge-exports.def
qhull_ra.h
qset_r.c
qset_r.h
random_r.c
random_r.h
rboxlib_r.c
stat_r.c
stat_r.h
user_r.c
user_r.h
usermem_r.c
userprintf_r.c
userprintf_rbox_r.c

/workspace/matplotlib__matplotlib__3.7/build/qhull-2020.2/src/libqhullcpp:
Coordinates.cpp
Coordinates.h
PointCoordinates.cpp
PointCoordinates.h
Qhull.cpp
Qhull.h
QhullError.h
QhullFacet.cpp
QhullFacet.h
QhullFacetList.cpp
QhullFacetList.h
QhullFacetSet.cpp
QhullFacetSet.h
QhullHyperplane.cpp
QhullHyperplane.h
QhullIterator.h
QhullLinkedList.h
QhullPoint.cpp
QhullPoint.h
QhullPointSet.cpp
QhullPointSet.h
QhullPoints.cpp
QhullPoints.h
QhullQh.cpp
QhullQh.h
QhullRidge.cpp
QhullRidge.h
QhullSet.cpp
QhullSet.h
QhullSets.h
QhullStat.cpp
QhullStat.h
QhullUser.cpp
QhullUser.h
QhullVertex.cpp
QhullVertex.h
QhullVertexSet.cpp
QhullVertexSet.h
RboxPoints.cpp
RboxPoints.h
RoadError.cpp
RoadError.h
RoadLogEvent.cpp
RoadLogEvent.h
functionObjects.h
libqhullcpp.pro
qt-qhull.cpp
usermem_r-cpp.cpp

/workspace/matplotlib__matplotlib__3.7/build/qhull-2020.2/src/libqhullstatic:
libqhullstatic.pro

/workspace/matplotlib__matplotlib__3.7/build/qhull-2020.2/src/libqhullstatic_r:
libqhullstatic_r.pro

/workspace/matplotlib__matplotlib__3.7/build/qhull-2020.2/src/qconvex:
qconvex.c
qconvex.pro
qconvex_r.c

/workspace/matplotlib__matplotlib__3.7/build/qhull-2020.2/src/qdelaunay:
qdelaun.c
qdelaun_r.c
qdelaunay.pro

/workspace/matplotlib__matplotlib__3.7/build/qhull-2020.2/src/qhalf:
qhalf.c
qhalf.pro
qhalf_r.c

/workspace/matplotlib__matplotlib__3.7/build/qhull-2020.2/src/qhull:
qhull.pro
unix.c
unix_r.c

/workspace/matplotlib__matplotlib__3.7/build/qhull-2020.2/src/qhulltest:
Coordinates_test.cpp
PointCoordinates_test.cpp
QhullFacetList_test.cpp
QhullFacetSet_test.cpp
QhullFacet_test.cpp
QhullHyperplane_test.cpp
QhullLinkedList_test.cpp
QhullPointSet_test.cpp
QhullPoint_test.cpp
QhullPoints_test.cpp
QhullRidge_test.cpp
QhullSet_test.cpp
QhullVertexSet_test.cpp
QhullVertex_test.cpp
Qhull_test.cpp
RboxPoints_test.cpp
RoadTest.cpp
RoadTest.h
qhulltest.cpp
qhulltest.pro

/workspace/matplotlib__matplotlib__3.7/build/qhull-2020.2/src/qvoronoi:
qvoronoi.c
qvoronoi.pro
qvoronoi_r.c

/workspace/matplotlib__matplotlib__3.7/build/qhull-2020.2/src/rbox:
rbox.c
rbox.pro
rbox_r.c

/workspace/matplotlib__matplotlib__3.7/build/qhull-2020.2/src/testqset:
testqset.c
testqset.pro

/workspace/matplotlib__matplotlib__3.7/build/qhull-2020.2/src/testqset_r:
testqset_r.c
testqset_r.pro

/workspace/matplotlib__matplotlib__3.7/build/qhull-2020.2/src/user_eg:
user_eg.c
user_eg.pro
user_eg_r.c

/workspace/matplotlib__matplotlib__3.7/build/qhull-2020.2/src/user_eg2:
user_eg2.c
user_eg2.pro
user_eg2_r.c

/workspace/matplotlib__matplotlib__3.7/build/qhull-2020.2/src/user_eg3:
user_eg3.pro
user_eg3_r.cpp

/workspace/matplotlib__matplotlib__3.7/ci:
check_version_number.py
check_wheel_licenses.py
codespell-ignore-words.txt
silence

/workspace/matplotlib__matplotlib__3.7/doc:
Makefile
README.txt
_static
_templates
api
conf.py
devel
docutils.conf
index.rst
make.bat
matplotlibrc
missing-references.json
sphinxext
thirdpartypackages
users

/workspace/matplotlib__matplotlib__3.7/doc/_static:
FigureInline.png
FigureNotebook.png
FigureQtAgg.png
John-hunter-crop-2.jpg
adjustText.png
anatomy.png
animatplot.png
basemap_contour1.png
blume_table_example.png
brokenaxes.png
cartopy_hurricane_katrina_01_00.png
color_zorder_A.png
color_zorder_B.png
contents.png
demo_axes_grid.png
demo_mplot3d.png
dna_features_viewer_screenshot.png
eeg_large.png
eeg_small.png
fa
favicon.ico
figpager.png
geoplot_nyc_traffic_tickets.png
ggplot.png
gif_attachment_example.png
gold_on_carbon.jpg
highlight_text_examples.png
holoviews.png
icon.png
logo2.png
logo2.svg
logo2_compressed.svg
logo_sidebar.png
logo_sidebar_horiz.png
markers
matplotlib-icon.svg
matplotlib_iterm2_demo.png
mpl-interactions-slider-animated.png
mpl-scatter-density.png
mpl.css
mpl_cheatsheet1.png
mpl_cheatsheet1_2x.png
mpl_template_example.png
mplot3d_view_angles.png
navigation.png
numfocus_badge.png
numpngw_animated_example.png
pgf_fonts.pdf
pgf_fonts.png
pgf_preamble.pdf
pgf_preamble.png
pgf_texsystem.pdf
pgf_texsystem.png
plotnine.png
probscale_demo.png
quiver_sizes.svg
readme_preview.png
ridge_map_white_mountains.png
seaborn.png
stinkbug.png
sviewgui_sample.png
switcher.json
toolbar.png
transforms.png
wcsaxes.jpg
webagg_screenshot.png
yellowbrick.png
zenodo_cache

/workspace/matplotlib__matplotlib__3.7/doc/_static/fa:
LICENSE
discourse-brands.svg
envelope-regular.svg
github-brands.svg
gitter-brands.svg
hashtag-solid.svg
plus-square-regular.svg
question-circle-regular.svg
stack-overflow-brands.svg

/workspace/matplotlib__matplotlib__3.7/doc/_static/markers:
m00.png
m01.png
m02.png
m03.png
m04.png
m05.png
m06.png
m07.png
m08.png
m09.png
m10.png
m11.png
m12.png
m13.png
m14.png
m15.png
m16.png
m17.png
m18.png
m19.png
m20.png
m21.png
m22.png
m23.png
m24.png
m25.png
m26.png
m27.png
m28.png
m29.png
m30.png
m31.png
m32.png
m33.png
m34.png
m35.png
m36.png
m37.png

/workspace/matplotlib__matplotlib__3.7/doc/_static/zenodo_cache:
1004650.svg
1098480.svg
11451.svg
1154287.svg
1189358.svg
1202050.svg
1202077.svg
12287.svg
12400.svg
1343133.svg
1420605.svg
1482098.svg
1482099.svg
15423.svg
248351.svg
2577644.svg
2669103.svg
2893252.svg
3264781.svg
32914.svg
3563226.svg
3633833.svg
3633844.svg
3695547.svg
3714460.svg
3898017.svg
3948793.svg
3984190.svg
4030140.svg
4268928.svg
44579.svg
4475376.svg
4638398.svg
4649959.svg
4743323.svg
5194481.svg
56926.svg
570311.svg
5706396.svg
573577.svg
5773480.svg
61948.svg
6513224.svg
6982547.svg
7084615.svg
7162185.svg
7275322.svg
7527665.svg

/workspace/matplotlib__matplotlib__3.7/doc/_templates:
autofunctions.rst
automodule.rst
autosummary.rst
autosummary_class_only.rst
cheatsheet_sidebar.html
donate_sidebar.html
function.rst
pagesource.html
search.html
sidebar_announcement.html
sidebar_versions.html

/workspace/matplotlib__matplotlib__3.7/doc/api:
_api_api.rst
_enums_api.rst
afm_api.rst
animation_api.rst
artist_api.rst
axes_api.rst
axis_api.rst
backend_agg_api.rst
backend_bases_api.rst
backend_cairo_api.rst
backend_gtk3_api.rst
backend_gtk4_api.rst
backend_managers_api.rst
backend_mixed_api.rst
backend_nbagg_api.rst
backend_pdf_api.rst
backend_pgf_api.rst
backend_ps_api.rst
backend_qt_api.rst
backend_svg_api.rst
backend_template_api.rst
backend_tk_api.rst
backend_tools_api.rst
backend_webagg_api.rst
backend_wx_api.rst
bezier_api.rst
category_api.rst
cbook_api.rst
cm_api.rst
collections_api.rst
colorbar_api.rst
colors_api.rst
container_api.rst
contour_api.rst
dates_api.rst
docstring_api.rst
dviread.rst
figure_api.rst
font_manager_api.rst
ft2font.rst
gridspec_api.rst
hatch_api.rst
image_api.rst
index.rst
index_backend_api.rst
layout_engine_api.rst
legend_api.rst
legend_handler_api.rst
lines_api.rst
markers_api.rst
mathtext_api.rst
matplotlib_configuration_api.rst
mlab_api.rst
next_api_changes
next_api_changes.rst
offsetbox_api.rst
patches_api.rst
path_api.rst
patheffects_api.rst
prev_api_changes
projections
projections_api.rst
pyplot_summary.rst
quiver_api.rst
rcsetup_api.rst
sankey_api.rst
scale_api.rst
sphinxext_mathmpl_api.rst
sphinxext_plot_directive_api.rst
spines_api.rst
style_api.rst
table_api.rst
testing_api.rst
texmanager_api.rst
text_api.rst
ticker_api.rst
tight_bbox_api.rst
tight_layout_api.rst
toolkits
transformations.rst
tri_api.rst
type1font.rst
units_api.rst
widgets_api.rst

/workspace/matplotlib__matplotlib__3.7/doc/api/next_api_changes:
README.rst
behavior
deprecations
development
removals

/workspace/matplotlib__matplotlib__3.7/doc/api/next_api_changes/behavior:
00001-ABC.rst
25061-DS.rst
25101-AL.rst
25112-GG.rst
25192-DS.rst
25255-RR.rst

/workspace/matplotlib__matplotlib__3.7/doc/api/next_api_changes/deprecations:
00001-ABC.rst
24913-AL.rst
24985-OG.rst
24990-OG.rst
25101-AL.rst
25282-AL.rst

/workspace/matplotlib__matplotlib__3.7/doc/api/next_api_changes/development:
00001-ABC.rst
24919-KS.rst

/workspace/matplotlib__matplotlib__3.7/doc/api/next_api_changes/removals:
00001-ABC.rst
24923-ES.rst
24XXX-OG.rst

/workspace/matplotlib__matplotlib__3.7/doc/api/prev_api_changes:
api_changes_0.40.rst
api_changes_0.42.rst
api_changes_0.50.rst
api_changes_0.54.3.rst
api_changes_0.54.rst
api_changes_0.60.rst
api_changes_0.61.rst
api_changes_0.63.rst
api_changes_0.65.1.rst
api_changes_0.65.rst
api_changes_0.70.rst
api_changes_0.71.rst
api_changes_0.72.rst
api_changes_0.73.rst
api_changes_0.80.rst
api_changes_0.81.rst
api_changes_0.82.rst
api_changes_0.83.rst
api_changes_0.84.rst
api_changes_0.85.rst
api_changes_0.86.rst
api_changes_0.87.7.rst
api_changes_0.90.0.rst
api_changes_0.90.1.rst
api_changes_0.91.0.rst
api_changes_0.91.2.rst
api_changes_0.98.0.rst
api_changes_0.98.1.rst
api_changes_0.98.x.rst
api_changes_0.99.rst
api_changes_0.99.x.rst
api_changes_1.1.x.rst
api_changes_1.2.x.rst
api_changes_1.3.x.rst
api_changes_1.4.x.rst
api_changes_1.5.0.rst
api_changes_1.5.2.rst
api_changes_1.5.3.rst
api_changes_2.0.0.rst
api_changes_2.0.1.rst
api_changes_2.1.0.rst
api_changes_2.1.1.rst
api_changes_2.1.2.rst
api_changes_2.2.0.rst
api_changes_3.0.0.rst
api_changes_3.0.1.rst
api_changes_3.1.0.rst
api_changes_3.1.1.rst
api_changes_3.2.0
api_changes_3.2.0.rst
api_changes_3.3.0
api_changes_3.3.0.rst
api_changes_3.3.1.rst
api_changes_3.4.0
api_changes_3.4.0.rst
api_changes_3.4.2.rst
api_changes_3.5.0
api_changes_3.5.0.rst
api_changes_3.5.2.rst
api_changes_3.5.3.rst
api_changes_3.6.0
api_changes_3.6.0.rst
api_changes_3.6.1.rst
api_changes_3.7.0
api_changes_3.7.0.rst

/workspace/matplotlib__matplotlib__3.7/doc/api/prev_api_changes/api_changes_3.2.0:
behavior.rst
deprecations.rst
development.rst
removals.rst

/workspace/matplotlib__matplotlib__3.7/doc/api/prev_api_changes/api_changes_3.3.0:
behaviour.rst
deprecations.rst
development.rst
removals.rst

/workspace/matplotlib__matplotlib__3.7/doc/api/prev_api_changes/api_changes_3.4.0:
behaviour.rst
deprecations.rst
development.rst
removals.rst

/workspace/matplotlib__matplotlib__3.7/doc/api/prev_api_changes/api_changes_3.5.0:
behaviour.rst
deprecations.rst
development.rst
removals.rst

/workspace/matplotlib__matplotlib__3.7/doc/api/prev_api_changes/api_changes_3.6.0:
behaviour.rst
deprecations.rst
development.rst
removals.rst

/workspace/matplotlib__matplotlib__3.7/doc/api/prev_api_changes/api_changes_3.7.0:
behaviour.rst
deprecations.rst
development.rst
removals.rst

/workspace/matplotlib__matplotlib__3.7/doc/api/projections:
geo.rst
polar.rst

/workspace/matplotlib__matplotlib__3.7/doc/api/toolkits:
axes_grid1.rst
axisartist.rst
mplot3d
mplot3d.rst

/workspace/matplotlib__matplotlib__3.7/doc/api/toolkits/mplot3d:
axes3d.rst
faq.rst
view_angles.rst

/workspace/matplotlib__matplotlib__3.7/doc/devel:
MEP
README.txt
coding_guide.rst
color_changes.rst
contributing.rst
dependencies.rst
development_setup.rst
development_workflow.rst
documenting_mpl.rst
index.rst
license.rst
maintainer_workflow.rst
min_dep_policy.rst
release_guide.rst
style_guide.rst
testing.rst
triage.rst

/workspace/matplotlib__matplotlib__3.7/doc/devel/MEP:
MEP08.rst
MEP09.rst
MEP10.rst
MEP11.rst
MEP12.rst
MEP13.rst
MEP14.rst
MEP15.rst
MEP19.rst
MEP21.rst
MEP22.rst
MEP23.rst
MEP24.rst
MEP25.rst
MEP26.rst
MEP27.rst
MEP28.rst
MEP29.rst
README.rst
index.rst
template.rst

/workspace/matplotlib__matplotlib__3.7/doc/sphinxext:
__init__.py
custom_roles.py
gallery_order.py
github.py
math_symbol_table.py
missing_references.py
mock_gui_toolkits.py
redirect_from.py
skip_deprecated.py

/workspace/matplotlib__matplotlib__3.7/doc/thirdpartypackages:
index.rst

/workspace/matplotlib__matplotlib__3.7/doc/users:
explain
faq
generate_credits.py
getting_started
github_stats.rst
index.rst
installing
next_whats_new
next_whats_new.rst
prev_whats_new
project
release_notes.rst
release_notes_next.rst
resources

/workspace/matplotlib__matplotlib__3.7/doc/users/explain:
api_interfaces.rst
backends.rst
event_handling.rst
figures.rst
fonts.rst
index.rst
interactive.rst
interactive_guide.rst
performance.rst
writing_a_backend_pyplot_interface.rst

/workspace/matplotlib__matplotlib__3.7/doc/users/faq:
environment_variables_faq.rst
howto_faq.rst
index.rst
troubleshooting_faq.rst

/workspace/matplotlib__matplotlib__3.7/doc/users/getting_started:
index.rst

/workspace/matplotlib__matplotlib__3.7/doc/users/installing:
index.rst

/workspace/matplotlib__matplotlib__3.7/doc/users/next_whats_new:
README.rst
pie_hatch.rst
savefig_bbox_layout.rst
widget_button_styling.rst

/workspace/matplotlib__matplotlib__3.7/doc/users/prev_whats_new:
changelog.rst
dflt_style_changes.rst
github_stats_3.0.0.rst
github_stats_3.0.1.rst
github_stats_3.0.2.rst
github_stats_3.0.3.rst
github_stats_3.1.0.rst
github_stats_3.1.1.rst
github_stats_3.1.2.rst
github_stats_3.1.3.rst
github_stats_3.2.0.rst
github_stats_3.2.1.rst
github_stats_3.2.2.rst
github_stats_3.3.0.rst
github_stats_3.3.1.rst
github_stats_3.3.2.rst
github_stats_3.3.3.rst
github_stats_3.3.4.rst
github_stats_3.4.0.rst
github_stats_3.4.1.rst
github_stats_3.4.2.rst
github_stats_3.4.3.rst
github_stats_3.5.0.rst
github_stats_3.5.1.rst
github_stats_3.5.2.rst
github_stats_3.5.3.rst
github_stats_3.6.0.rst
github_stats_3.6.1.rst
github_stats_3.6.2.rst
github_stats_3.6.3.rst
whats_new_0.98.4.rst
whats_new_0.99.rst
whats_new_1.0.rst
whats_new_1.1.rst
whats_new_1.2.2.rst
whats_new_1.2.rst
whats_new_1.3.rst
whats_new_1.4.rst
whats_new_1.5.rst
whats_new_2.0.0.rst
whats_new_2.1.0.rst
whats_new_2.2.rst
whats_new_3.0.rst
whats_new_3.1.0.rst
whats_new_3.2.0.rst
whats_new_3.3.0.rst
whats_new_3.4.0.rst
whats_new_3.5.0.rst
whats_new_3.5.2.rst
whats_new_3.6.0.rst
whats_new_3.7.0.rst

/workspace/matplotlib__matplotlib__3.7/doc/users/project:
citing.rst
credits.rst
history.rst
index.rst
license.rst
mission.rst

/workspace/matplotlib__matplotlib__3.7/doc/users/resources:
index.rst

/workspace/matplotlib__matplotlib__3.7/extern:
agg24-svn
ttconv

/workspace/matplotlib__matplotlib__3.7/extern/agg24-svn:
include
src

/workspace/matplotlib__matplotlib__3.7/extern/agg24-svn/include:
agg_alpha_mask_u8.h
agg_arc.h
agg_array.h
agg_arrowhead.h
agg_basics.h
agg_bezier_arc.h
agg_bitset_iterator.h
agg_blur.h
agg_bounding_rect.h
agg_bspline.h
agg_clip_liang_barsky.h
agg_color_gray.h
agg_color_rgba.h
agg_config.h
agg_conv_adaptor_vcgen.h
agg_conv_adaptor_vpgen.h
agg_conv_bspline.h
agg_conv_clip_polygon.h
agg_conv_clip_polyline.h
agg_conv_close_polygon.h
agg_conv_concat.h
agg_conv_contour.h
agg_conv_curve.h
agg_conv_dash.h
agg_conv_gpc.h
agg_conv_marker.h
agg_conv_marker_adaptor.h
agg_conv_segmentator.h
agg_conv_shorten_path.h
agg_conv_smooth_poly1.h
agg_conv_stroke.h
agg_conv_transform.h
agg_conv_unclose_polygon.h
agg_curves.h
agg_dda_line.h
agg_ellipse.h
agg_ellipse_bresenham.h
agg_embedded_raster_fonts.h
agg_font_cache_manager.h
agg_font_cache_manager2.h
agg_gamma_functions.h
agg_gamma_lut.h
agg_glyph_raster_bin.h
agg_gradient_lut.h
agg_gsv_text.h
agg_image_accessors.h
agg_image_filters.h
agg_line_aa_basics.h
agg_math.h
agg_math_stroke.h
agg_path_length.h
agg_path_storage.h
agg_path_storage_integer.h
agg_pattern_filters_rgba.h
agg_pixfmt_amask_adaptor.h
agg_pixfmt_base.h
agg_pixfmt_gray.h
agg_pixfmt_rgb.h
agg_pixfmt_rgb_packed.h
agg_pixfmt_rgba.h
agg_pixfmt_transposer.h
agg_rasterizer_cells_aa.h
agg_rasterizer_compound_aa.h
agg_rasterizer_outline.h
agg_rasterizer_outline_aa.h
agg_rasterizer_scanline_aa.h
agg_rasterizer_scanline_aa_nogamma.h
agg_rasterizer_sl_clip.h
agg_renderer_base.h
agg_renderer_markers.h
agg_renderer_mclip.h
agg_renderer_outline_aa.h
agg_renderer_outline_image.h
agg_renderer_primitives.h
agg_renderer_raster_text.h
agg_renderer_scanline.h
agg_rendering_buffer.h
agg_rendering_buffer_dynarow.h
agg_rounded_rect.h
agg_scanline_bin.h
agg_scanline_boolean_algebra.h
agg_scanline_p.h
agg_scanline_storage_aa.h
agg_scanline_storage_bin.h
agg_scanline_u.h
agg_shorten_path.h
agg_simul_eq.h
agg_span_allocator.h
agg_span_converter.h
agg_span_gouraud.h
agg_span_gouraud_gray.h
agg_span_gouraud_rgba.h
agg_span_gradient.h
agg_span_gradient_alpha.h
agg_span_gradient_contour.h
agg_span_gradient_image.h
agg_span_image_filter.h
agg_span_image_filter_gray.h
agg_span_image_filter_rgb.h
agg_span_image_filter_rgba.h
agg_span_interpolator_adaptor.h
agg_span_interpolator_linear.h
agg_span_interpolator_persp.h
agg_span_interpolator_trans.h
agg_span_pattern_gray.h
agg_span_pattern_rgb.h
agg_span_pattern_rgba.h
agg_span_solid.h
agg_span_subdiv_adaptor.h
agg_trans_affine.h
agg_trans_bilinear.h
agg_trans_double_path.h
agg_trans_perspective.h
agg_trans_single_path.h
agg_trans_viewport.h
agg_trans_warp_magnifier.h
agg_vcgen_bspline.h
agg_vcgen_contour.h
agg_vcgen_dash.h
agg_vcgen_markers_term.h
agg_vcgen_smooth_poly1.h
agg_vcgen_stroke.h
agg_vcgen_vertex_sequence.h
agg_vertex_sequence.h
agg_vpgen_clip_polygon.h
agg_vpgen_clip_polyline.h
agg_vpgen_segmentator.h
ctrl
platform
util

/workspace/matplotlib__matplotlib__3.7/extern/agg24-svn/include/ctrl:
agg_bezier_ctrl.h
agg_cbox_ctrl.h
agg_ctrl.h
agg_gamma_ctrl.h
agg_gamma_spline.h
agg_polygon_ctrl.h
agg_rbox_ctrl.h
agg_scale_ctrl.h
agg_slider_ctrl.h
agg_spline_ctrl.h

/workspace/matplotlib__matplotlib__3.7/extern/agg24-svn/include/platform:
agg_platform_support.h
mac
win32

/workspace/matplotlib__matplotlib__3.7/extern/agg24-svn/include/platform/mac:
agg_mac_pmap.h

/workspace/matplotlib__matplotlib__3.7/extern/agg24-svn/include/platform/win32:
agg_win32_bmp.h

/workspace/matplotlib__matplotlib__3.7/extern/agg24-svn/include/util:
agg_color_conv.h
agg_color_conv_rgb16.h
agg_color_conv_rgb8.h

/workspace/matplotlib__matplotlib__3.7/extern/agg24-svn/src:
ChangeLog
agg_arc.cpp
agg_arrowhead.cpp
agg_bezier_arc.cpp
agg_bspline.cpp
agg_color_rgba.cpp
agg_curves.cpp
agg_embedded_raster_fonts.cpp
agg_gsv_text.cpp
agg_image_filters.cpp
agg_line_aa_basics.cpp
agg_line_profile_aa.cpp
agg_rounded_rect.cpp
agg_sqrt_tables.cpp
agg_trans_affine.cpp
agg_trans_double_path.cpp
agg_trans_single_path.cpp
agg_trans_warp_magnifier.cpp
agg_vcgen_bspline.cpp
agg_vcgen_contour.cpp
agg_vcgen_dash.cpp
agg_vcgen_markers_term.cpp
agg_vcgen_smooth_poly1.cpp
agg_vcgen_stroke.cpp
agg_vpgen_clip_polygon.cpp
agg_vpgen_clip_polyline.cpp
agg_vpgen_segmentator.cpp
authors
copying
ctrl
platform

/workspace/matplotlib__matplotlib__3.7/extern/agg24-svn/src/ctrl:
agg_bezier_ctrl.cpp
agg_cbox_ctrl.cpp
agg_gamma_ctrl.cpp
agg_gamma_spline.cpp
agg_polygon_ctrl.cpp
agg_rbox_ctrl.cpp
agg_scale_ctrl.cpp
agg_slider_ctrl.cpp
agg_spline_ctrl.cpp

/workspace/matplotlib__matplotlib__3.7/extern/agg24-svn/src/platform:
AmigaOS
BeOS
X11
mac
sdl
win32

/workspace/matplotlib__matplotlib__3.7/extern/agg24-svn/src/platform/AmigaOS:
agg_platform_support.cpp

/workspace/matplotlib__matplotlib__3.7/extern/agg24-svn/src/platform/BeOS:
agg_platform_support.cpp

/workspace/matplotlib__matplotlib__3.7/extern/agg24-svn/src/platform/X11:
agg_platform_support.cpp

/workspace/matplotlib__matplotlib__3.7/extern/agg24-svn/src/platform/mac:
agg_mac_pmap.cpp
agg_platform_support.cpp

/workspace/matplotlib__matplotlib__3.7/extern/agg24-svn/src/platform/sdl:
agg_platform_support.cpp

/workspace/matplotlib__matplotlib__3.7/extern/agg24-svn/src/platform/win32:
agg_platform_support.cpp
agg_win32_bmp.cpp

/workspace/matplotlib__matplotlib__3.7/extern/ttconv:
pprdrv.h
pprdrv_tt.cpp
pprdrv_tt2.cpp
truetype.h
ttutil.cpp

/workspace/matplotlib__matplotlib__3.7/galleries:
examples
plot_types
tutorials

/workspace/matplotlib__matplotlib__3.7/galleries/examples:
README.txt
animation
axes_grid1
axisartist
color
event_handling
images_contours_and_fields
lines_bars_and_markers
misc
mplot3d
pie_and_polar_charts
pyplots
scales
shapes_and_collections
showcase
specialty_plots
spines
statistics
style_sheets
subplots_axes_and_figures
text_labels_and_annotations
ticks
units
user_interfaces
userdemo
widgets

/workspace/matplotlib__matplotlib__3.7/galleries/examples/animation:
README.txt
animate_decay.py
animated_histogram.py
animation_demo.py
bayes_update.py
double_pendulum.py
dynamic_image.py
frame_grabbing_sgskip.py
multiple_axes.py
pause_resume.py
rain.py
random_walk.py
simple_anim.py
simple_scatter.py
strip_chart.py
unchained.py

/workspace/matplotlib__matplotlib__3.7/galleries/examples/axes_grid1:
README.txt
demo_anchored_direction_arrows.py
demo_axes_divider.py
demo_axes_grid.py
demo_axes_grid2.py
demo_axes_hbox_divider.py
demo_axes_rgb.py
demo_colorbar_of_inset_axes.py
demo_colorbar_with_axes_divider.py
demo_colorbar_with_inset_locator.py
demo_edge_colorbar.py
demo_fixed_size_axes.py
demo_imagegrid_aspect.py
inset_locator_demo.py
inset_locator_demo2.py
make_room_for_ylabel_using_axesgrid.py
parasite_simple.py
parasite_simple2.py
scatter_hist_locatable_axes.py
simple_anchored_artists.py
simple_axes_divider1.py
simple_axes_divider3.py
simple_axesgrid.py
simple_axesgrid2.py
simple_axisline4.py
simple_colorbar.py

/workspace/matplotlib__matplotlib__3.7/galleries/examples/axisartist:
README.txt
axis_direction.py
demo_axis_direction.py
demo_axisline_style.py
demo_curvelinear_grid.py
demo_curvelinear_grid2.py
demo_floating_axes.py
demo_floating_axis.py
demo_parasite_axes.py
demo_parasite_axes2.py
demo_ticklabel_alignment.py
demo_ticklabel_direction.py
simple_axis_direction01.py
simple_axis_direction03.py
simple_axis_pad.py
simple_axisartist1.py
simple_axisline.py
simple_axisline3.py

/workspace/matplotlib__matplotlib__3.7/galleries/examples/color:
README.txt
color_by_yvalue.py
color_cycle_default.py
color_demo.py
colorbar_basics.py
colormap_reference.py
custom_cmap.py
named_colors.py

/workspace/matplotlib__matplotlib__3.7/galleries/examples/event_handling:
README.txt
close_event.py
coords_demo.py
cursor_demo.py
data_browser.py
figure_axes_enter_leave.py
ginput_manual_clabel_sgskip.py
image_slices_viewer.py
keypress_demo.py
lasso_demo.py
legend_picking.py
looking_glass.py
path_editor.py
pick_event_demo.py
pick_event_demo2.py
poly_editor.py
pong_sgskip.py
resample.py
timers.py
trifinder_event_demo.py
viewlims.py
zoom_window.py

/workspace/matplotlib__matplotlib__3.7/galleries/examples/images_contours_and_fields:
README.txt
affine_image.py
barb_demo.py
barcode_demo.py
colormap_interactive_adjustment.py
colormap_normalizations.py
colormap_normalizations_symlognorm.py
contour_corner_mask.py
contour_demo.py
contour_image.py
contour_label_demo.py
contourf_demo.py
contourf_hatching.py
contourf_log.py
contours_in_optimization_demo.py
demo_bboximage.py
figimage_demo.py
image_annotated_heatmap.py
image_antialiasing.py
image_clip_path.py
image_demo.py
image_masked.py
image_nonuniform.py
image_transparency_blend.py
image_zcoord.py
interpolation_methods.py
irregulardatagrid.py
layer_images.py
matshow.py
multi_image.py
pcolor_demo.py
pcolormesh_grids.py
pcolormesh_levels.py
plot_streamplot.py
quadmesh_demo.py
quiver_demo.py
quiver_simple_demo.py
shading_example.py
specgram_demo.py
spy_demos.py
tricontour_demo.py
tricontour_smooth_delaunay.py
tricontour_smooth_user.py
trigradient_demo.py
triinterp_demo.py
tripcolor_demo.py
triplot_demo.py
watermark_image.py

/workspace/matplotlib__matplotlib__3.7/galleries/examples/lines_bars_and_markers:
README.txt
bar_colors.py
bar_label_demo.py
bar_stacked.py
barchart.py
barh.py
broken_barh.py
capstyle.py
categorical_variables.py
cohere.py
csd_demo.py
curve_error_band.py
errorbar_limits_simple.py
errorbar_subsample.py
eventcollection_demo.py
eventplot_demo.py
fill.py
fill_between_alpha.py
fill_between_demo.py
fill_betweenx_demo.py
filled_step.py
gradient_bar.py
hat_graph.py
horizontal_barchart_distribution.py
joinstyle.py
line_demo_dash_control.py
lines_with_ticks_demo.py
linestyles.py
marker_reference.py
markevery_demo.py
masked_demo.py
multicolored_line.py
multivariate_marker_plot.py
psd_demo.py
scatter_custom_symbol.py
scatter_demo2.py
scatter_hist.py
scatter_masked.py
scatter_star_poly.py
scatter_with_legend.py
simple_plot.py
span_regions.py
spectrum_demo.py
stackplot_demo.py
stairs_demo.py
stem_plot.py
step_demo.py
timeline.py
vline_hline_demo.py
xcorr_acorr_demo.py

/workspace/matplotlib__matplotlib__3.7/galleries/examples/misc:
README.txt
anchored_artists.py
bbox_intersect.py
contour_manual.py
coords_report.py
custom_projection.py
customize_rc.py
demo_agg_filter.py
demo_ribbon_box.py
fig_x.py
fill_spiral.py
findobj_demo.py
font_indexing.py
ftface_props.py
histogram_path.py
hyperlinks_sgskip.py
image_thumbnail_sgskip.py
keyword_plotting.py
logos2.py
multipage_pdf.py
multiprocess_sgskip.py
packed_bubbles.py
patheffect_demo.py
print_stdout_sgskip.py
rasterization_demo.py
set_and_get.py
svg_filter_line.py
svg_filter_pie.py
table_demo.py
tickedstroke_demo.py
transoffset.py
zorder_demo.py

/workspace/matplotlib__matplotlib__3.7/galleries/examples/mplot3d:
2dcollections3d.py
3d_bars.py
README.txt
bars3d.py
box3d.py
contour3d.py
contour3d_2.py
contour3d_3.py
contourf3d.py
contourf3d_2.py
custom_shaded_3d_surface.py
errorbar3d.py
hist3d.py
lines3d.py
lorenz_attractor.py
mixed_subplots.py
offset.py
pathpatch3d.py
polys3d.py
projections.py
quiver3d.py
rotate_axes3d_sgskip.py
scatter3d.py
stem3d_demo.py
subplot3d.py
surface3d.py
surface3d_2.py
surface3d_3.py
surface3d_radial.py
text3d.py
tricontour3d.py
tricontourf3d.py
trisurf3d.py
trisurf3d_2.py
view_planes_3d.py
voxels.py
voxels_numpy_logo.py
voxels_rgb.py
voxels_torus.py
wire3d.py
wire3d_animation_sgskip.py
wire3d_zero_stride.py

/workspace/matplotlib__matplotlib__3.7/galleries/examples/pie_and_polar_charts:
README.txt
bar_of_pie.py
nested_pie.py
pie_and_donut_labels.py
pie_demo2.py
pie_features.py
polar_bar.py
polar_demo.py
polar_error_caps.py
polar_legend.py
polar_scatter.py

/workspace/matplotlib__matplotlib__3.7/galleries/examples/pyplots:
README.txt
axline.py
matplotlibrc
pyplot_simple.py
pyplot_text.py
pyplot_three.py
pyplot_two_subplots.py

/workspace/matplotlib__matplotlib__3.7/galleries/examples/scales:
README.txt
asinh_demo.py
aspect_loglog.py
custom_scale.py
log_bar.py
log_demo.py
logit_demo.py
power_norm.py
scales.py
semilogx_demo.py
symlog_demo.py

/workspace/matplotlib__matplotlib__3.7/galleries/examples/shapes_and_collections:
README.txt
arrow_guide.py
artist_reference.py
collections.py
compound_path.py
dolphin.py
donut.py
ellipse_collection.py
ellipse_demo.py
fancybox_demo.py
hatch_demo.py
hatch_style_reference.py
line_collection.py
patch_collection.py
path_patch.py
quad_bezier.py
scatter.py

/workspace/matplotlib__matplotlib__3.7/galleries/examples/showcase:
README.txt
anatomy.py
firefox.py
integral.py
mandelbrot.py
stock_prices.py
xkcd.py

/workspace/matplotlib__matplotlib__3.7/galleries/examples/specialty_plots:
README.txt
advanced_hillshading.py
anscombe.py
hinton_demo.py
leftventricle_bullseye.py
mri_demo.py
mri_with_eeg.py
radar_chart.py
sankey_basics.py
sankey_links.py
sankey_rankine.py
skewt.py
topographic_hillshading.py

/workspace/matplotlib__matplotlib__3.7/galleries/examples/spines:
README.txt
centered_spines_with_arrows.py
multiple_yaxis_with_spines.py
spine_placement_demo.py
spines.py
spines_dropped.py

/workspace/matplotlib__matplotlib__3.7/galleries/examples/statistics:
README.txt
barchart_demo.py
boxplot.py
boxplot_color.py
boxplot_demo.py
boxplot_vs_violin.py
bxp.py
confidence_ellipse.py
customized_violin.py
errorbar.py
errorbar_features.py
errorbar_limits.py
errorbars_and_boxes.py
hexbin_demo.py
hist.py
histogram_cumulative.py
histogram_features.py
histogram_histtypes.py
histogram_multihist.py
multiple_histograms_side_by_side.py
time_series_histogram.py
violinplot.py

/workspace/matplotlib__matplotlib__3.7/galleries/examples/style_sheets:
README.txt
bmh.py
dark_background.py
fivethirtyeight.py
ggplot.py
grayscale.py
plot_solarizedlight2.py
style_sheets_reference.py

/workspace/matplotlib__matplotlib__3.7/galleries/examples/subplots_axes_and_figures:
README.txt
align_labels_demo.py
auto_subplots_adjust.py
axes_box_aspect.py
axes_demo.py
axes_margins.py
axes_props.py
axes_zoom_effect.py
axhspan_demo.py
axis_equal_demo.py
axis_labels_demo.py
broken_axis.py
colorbar_placement.py
custom_figure_class.py
demo_constrained_layout.py
demo_tight_layout.py
fahrenheit_celsius_scales.py
figure_size_units.py
figure_title.py
ganged_plots.py
geo_demo.py
gridspec_and_subplots.py
gridspec_multicolumn.py
gridspec_nested.py
invert_axes.py
mosaic.py
multiple_figs_demo.py
secondary_axis.py
share_axis_lims_views.py
shared_axis_demo.py
subfigures.py
subplot.py
subplots_adjust.py
subplots_demo.py
two_scales.py
zoom_inset_axes.py

/workspace/matplotlib__matplotlib__3.7/galleries/examples/text_labels_and_annotations:
README.txt
accented_text.py
align_ylabels.py
angle_annotation.py
angles_on_bracket_arrows.py
annotate_transform.py
annotation_basic.py
annotation_demo.py
annotation_polar.py
arrow_demo.py
autowrap.py
custom_legends.py
date.py
demo_annotation_box.py
demo_text_path.py
demo_text_rotation_mode.py
dfrac_demo.py
engineering_formatter.py
fancyarrow_demo.py
fancytextbox_demo.py
figlegend_demo.py
font_family_rc.py
font_file.py
font_table.py
fonts_demo.py
fonts_demo_kw.py
label_subplots.py
legend.py
legend_demo.py
line_with_text.py
mathtext_asarray.py
mathtext_demo.py
mathtext_examples.py
mathtext_fontfamily_example.py
multiline.py
placing_text_boxes.py
rainbow_text.py
stix_fonts_demo.py
tex_demo.py
text_alignment.py
text_commands.py
text_fontdict.py
text_rotation_relative_to_line.py
titles_demo.py
unicode_minus.py
usetex_baseline_test.py
usetex_fonteffects.py
watermark_text.py

/workspace/matplotlib__matplotlib__3.7/galleries/examples/ticks:
README.txt
auto_ticks.py
centered_ticklabels.py
colorbar_tick_labelling_demo.py
custom_ticker1.py
date_concise_formatter.py
date_demo_convert.py
date_demo_rrule.py
date_formatters_locators.py
date_index_formatter.py
date_precision_and_epochs.py
dollar_ticks.py
fig_axes_customize_simple.py
major_minor_demo.py
scalarformatter.py
tick-formatters.py
tick-locators.py
tick_label_right.py
tick_labels_from_values.py
tick_xlabel_top.py
ticklabels_rotation.py
ticks_too_many.py

/workspace/matplotlib__matplotlib__3.7/galleries/examples/units:
README.txt
annotate_with_units.py
artist_tests.py
bar_demo2.py
bar_unit_demo.py
basic_units.py
ellipse_with_units.py
evans_test.py
radian_demo.py
units_sample.py
units_scatter.py

/workspace/matplotlib__matplotlib__3.7/galleries/examples/user_interfaces:
README.txt
canvasagg.py
embedding_in_gtk3_panzoom_sgskip.py
embedding_in_gtk3_sgskip.py
embedding_in_gtk4_panzoom_sgskip.py
embedding_in_gtk4_sgskip.py
embedding_in_qt_sgskip.py
embedding_in_tk_sgskip.py
embedding_in_wx2_sgskip.py
embedding_in_wx3_sgskip.py
embedding_in_wx4_sgskip.py
embedding_in_wx5_sgskip.py
embedding_webagg_sgskip.py
fourier_demo_wx_sgskip.py
gtk3_spreadsheet_sgskip.py
gtk4_spreadsheet_sgskip.py
images
mathtext_wx_sgskip.py
mpl_with_glade3.glade
mpl_with_glade3_sgskip.py
mplcvd.py
pylab_with_gtk3_sgskip.py
pylab_with_gtk4_sgskip.py
svg_histogram_sgskip.py
svg_tooltip_sgskip.py
toolmanager_sgskip.py
web_application_server_sgskip.py
wxcursor_demo_sgskip.py

/workspace/matplotlib__matplotlib__3.7/galleries/examples/user_interfaces/images:
eye-symbolic.svg
eye.pdf
eye.png
eye.svg
eye_large.png

/workspace/matplotlib__matplotlib__3.7/galleries/examples/userdemo:
README.txt
annotate_explain.py
annotate_simple_coord02.py
annotate_text_arrow.py
connect_simple01.py
connectionstyle_demo.py
custom_boxstyle01.py
demo_gridspec01.py
demo_gridspec03.py
demo_gridspec06.py
pgf_fonts.py
pgf_preamble_sgskip.py
pgf_texsystem.py
simple_annotate01.py
simple_legend01.py
simple_legend02.py

/workspace/matplotlib__matplotlib__3.7/galleries/examples/widgets:
README.txt
annotated_cursor.py
buttons.py
check_buttons.py
cursor.py
lasso_selector_demo_sgskip.py
menu.py
mouse_cursor.py
multicursor.py
polygon_selector_demo.py
polygon_selector_simple.py
radio_buttons.py
range_slider.py
rectangle_selector.py
slider_demo.py
slider_snap_demo.py
span_selector.py
textbox.py

/workspace/matplotlib__matplotlib__3.7/galleries/plot_types:
3D
README.rst
arrays
basic
stats
unstructured

/workspace/matplotlib__matplotlib__3.7/galleries/plot_types/3D:
README.rst
scatter3d_simple.py
surface3d_simple.py
trisurf3d_simple.py
voxels_simple.py
wire3d_simple.py

/workspace/matplotlib__matplotlib__3.7/galleries/plot_types/arrays:
README.rst
barbs.py
contour.py
contourf.py
imshow.py
pcolormesh.py
quiver.py
streamplot.py

/workspace/matplotlib__matplotlib__3.7/galleries/plot_types/basic:
README.rst
bar.py
fill_between.py
plot.py
scatter_plot.py
stackplot.py
stem.py
step.py

/workspace/matplotlib__matplotlib__3.7/galleries/plot_types/stats:
README.rst
boxplot_plot.py
errorbar_plot.py
eventplot.py
hexbin.py
hist2d.py
hist_plot.py
pie.py
violin.py

/workspace/matplotlib__matplotlib__3.7/galleries/plot_types/unstructured:
README.rst
tricontour.py
tricontourf.py
tripcolor.py
triplot.py

/workspace/matplotlib__matplotlib__3.7/galleries/tutorials:
README.txt
advanced
colors
intermediate
introductory
provisional
text
toolkits

/workspace/matplotlib__matplotlib__3.7/galleries/tutorials/advanced:
README.txt
blitting.py
path_tutorial.py
patheffects_guide.py
transforms_tutorial.py

/workspace/matplotlib__matplotlib__3.7/galleries/tutorials/colors:
README.txt
colorbar_only.py
colormap-manipulation.py
colormapnorms.py
colormaps.py
colors.py

/workspace/matplotlib__matplotlib__3.7/galleries/tutorials/intermediate:
README.txt
arranging_axes.py
artists.py
autoscale.py
color_cycle.py
constrainedlayout_guide.py
imshow_extent.py
legend_guide.py
tight_layout_guide.py

/workspace/matplotlib__matplotlib__3.7/galleries/tutorials/introductory:
README.txt
animation_tutorial.py
customizing.py
images.py
lifecycle.py
pyplot.py
quick_start.py

/workspace/matplotlib__matplotlib__3.7/galleries/tutorials/provisional:
README.txt

/workspace/matplotlib__matplotlib__3.7/galleries/tutorials/text:
README.txt
annotations.py
mathtext.py
pgf.py
text_intro.py
text_props.py
usetex.py

/workspace/matplotlib__matplotlib__3.7/galleries/tutorials/toolkits:
README.txt
axes_grid.py
axisartist.py
mplot3d.py

/workspace/matplotlib__matplotlib__3.7/lib:
matplotlib
matplotlib.egg-info
mpl_toolkits
pylab.py

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib:
__init__.py
_afm.py
_animation_data.py
_api
_blocking_input.py
_c_internal_utils.cpython-311-x86_64-linux-gnu.so
_cm.py
_cm_listed.py
_color_data.py
_constrained_layout.py
_docstring.py
_enums.py
_fontconfig_pattern.py
_image.cpython-311-x86_64-linux-gnu.so
_internal_utils.py
_layoutgrid.py
_mathtext.py
_mathtext_data.py
_path.cpython-311-x86_64-linux-gnu.so
_pylab_helpers.py
_qhull.cpython-311-x86_64-linux-gnu.so
_text_helpers.py
_tight_bbox.py
_tight_layout.py
_tri.cpython-311-x86_64-linux-gnu.so
_ttconv.cpython-311-x86_64-linux-gnu.so
_type1font.py
_version.py
animation.py
artist.py
axes
axis.py
backend_bases.py
backend_managers.py
backend_tools.py
backends
bezier.py
category.py
cbook.py
cm.py
collections.py
colorbar.py
colors.py
container.py
contour.py
dates.py
dviread.py
figure.py
font_manager.py
ft2font.cpython-311-x86_64-linux-gnu.so
gridspec.py
hatch.py
image.py
layout_engine.py
legend.py
legend_handler.py
lines.py
markers.py
mathtext.py
mlab.py
mpl-data
offsetbox.py
patches.py
path.py
patheffects.py
projections
pylab.py
pyplot.py
quiver.py
rcsetup.py
sankey.py
scale.py
sphinxext
spines.py
stackplot.py
streamplot.py
style
table.py
testing
tests
texmanager.py
text.py
textpath.py
ticker.py
transforms.py
tri
units.py
widgets.py

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/_api:
__init__.py
deprecation.py

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/axes:
__init__.py
_axes.py
_base.py
_secondary_axes.py

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/backends:
__init__.py
_backend_agg.cpython-311-x86_64-linux-gnu.so
_backend_gtk.py
_backend_pdf_ps.py
_backend_tk.py
_tkagg.cpython-311-x86_64-linux-gnu.so
backend_agg.py
backend_cairo.py
backend_gtk3.py
backend_gtk3agg.py
backend_gtk3cairo.py
backend_gtk4.py
backend_gtk4agg.py
backend_gtk4cairo.py
backend_macosx.py
backend_mixed.py
backend_nbagg.py
backend_pdf.py
backend_pgf.py
backend_ps.py
backend_qt.py
backend_qt5.py
backend_qt5agg.py
backend_qt5cairo.py
backend_qtagg.py
backend_qtcairo.py
backend_svg.py
backend_template.py
backend_tkagg.py
backend_tkcairo.py
backend_webagg.py
backend_webagg_core.py
backend_wx.py
backend_wxagg.py
backend_wxcairo.py
qt_compat.py
qt_editor
web_backend

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/backends/qt_editor:
__init__.py
_formlayout.py
figureoptions.py

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/backends/web_backend:
all_figures.html
css
ipython_inline_figure.html
js
nbagg_uat.ipynb
package.json
single_figure.html

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/backends/web_backend/css:
boilerplate.css
fbm.css
mpl.css
page.css

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/backends/web_backend/js:
mpl.js
mpl_tornado.js
nbagg_mpl.js

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/mpl-data:
fonts
images
kpsewhich.lua
matplotlibrc
plot_directive
sample_data
stylelib

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/mpl-data/fonts:
afm
pdfcorefonts
ttf

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/mpl-data/fonts/afm:
cmex10.afm
cmmi10.afm
cmr10.afm
cmsy10.afm
cmtt10.afm
pagd8a.afm
pagdo8a.afm
pagk8a.afm
pagko8a.afm
pbkd8a.afm
pbkdi8a.afm
pbkl8a.afm
pbkli8a.afm
pcrb8a.afm
pcrbo8a.afm
pcrr8a.afm
pcrro8a.afm
phvb8a.afm
phvb8an.afm
phvbo8a.afm
phvbo8an.afm
phvl8a.afm
phvlo8a.afm
phvr8a.afm
phvr8an.afm
phvro8a.afm
phvro8an.afm
pncb8a.afm
pncbi8a.afm
pncr8a.afm
pncri8a.afm
pplb8a.afm
pplbi8a.afm
pplr8a.afm
pplri8a.afm
psyr.afm
ptmb8a.afm
ptmbi8a.afm
ptmr8a.afm
ptmri8a.afm
putb8a.afm
putbi8a.afm
putr8a.afm
putri8a.afm
pzcmi8a.afm
pzdr.afm

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/mpl-data/fonts/pdfcorefonts:
Courier-Bold.afm
Courier-BoldOblique.afm
Courier-Oblique.afm
Courier.afm
Helvetica-Bold.afm
Helvetica-BoldOblique.afm
Helvetica-Oblique.afm
Helvetica.afm
Symbol.afm
Times-Bold.afm
Times-BoldItalic.afm
Times-Italic.afm
Times-Roman.afm
ZapfDingbats.afm
readme.txt

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/mpl-data/fonts/ttf:
DejaVuSans-Bold.ttf
DejaVuSans-BoldOblique.ttf
DejaVuSans-Oblique.ttf
DejaVuSans.ttf
DejaVuSansDisplay.ttf
DejaVuSansMono-Bold.ttf
DejaVuSansMono-BoldOblique.ttf
DejaVuSansMono-Oblique.ttf
DejaVuSansMono.ttf
DejaVuSerif-Bold.ttf
DejaVuSerif-BoldItalic.ttf
DejaVuSerif-Italic.ttf
DejaVuSerif.ttf
DejaVuSerifDisplay.ttf
LICENSE_DEJAVU
LICENSE_STIX
STIXGeneral.ttf
STIXGeneralBol.ttf
STIXGeneralBolIta.ttf
STIXGeneralItalic.ttf
STIXNonUni.ttf
STIXNonUniBol.ttf
STIXNonUniBolIta.ttf
STIXNonUniIta.ttf
STIXSizFiveSymReg.ttf
STIXSizFourSymBol.ttf
STIXSizFourSymReg.ttf
STIXSizOneSymBol.ttf
STIXSizOneSymReg.ttf
STIXSizThreeSymBol.ttf
STIXSizThreeSymReg.ttf
STIXSizTwoSymBol.ttf
STIXSizTwoSymReg.ttf
cmb10.ttf
cmex10.ttf
cmmi10.ttf
cmr10.ttf
cmss10.ttf
cmsy10.ttf
cmtt10.ttf

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/mpl-data/images:
back-symbolic.svg
back.pdf
back.png
back.svg
back_large.png
filesave-symbolic.svg
filesave.pdf
filesave.png
filesave.svg
filesave_large.png
forward-symbolic.svg
forward.pdf
forward.png
forward.svg
forward_large.png
hand.pdf
hand.png
hand.svg
help-symbolic.svg
help.pdf
help.png
help.svg
help_large.png
home-symbolic.svg
home.pdf
home.png
home.svg
home_large.png
matplotlib.pdf
matplotlib.png
matplotlib.svg
matplotlib_large.png
move-symbolic.svg
move.pdf
move.png
move.svg
move_large.png
qt4_editor_options.pdf
qt4_editor_options.png
qt4_editor_options.svg
qt4_editor_options_large.png
subplots-symbolic.svg
subplots.pdf
subplots.png
subplots.svg
subplots_large.png
zoom_to_rect-symbolic.svg
zoom_to_rect.pdf
zoom_to_rect.png
zoom_to_rect.svg
zoom_to_rect_large.png

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/mpl-data/plot_directive:
plot_directive.css

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/mpl-data/sample_data:
Minduka_Present_Blue_Pack.png
README.txt
Stocks.csv
axes_grid
data_x_x2_x3.csv
eeg.dat
embedding_in_wx3.xrc
goog.npz
grace_hopper.jpg
jacksboro_fault_dem.npz
logo2.png
membrane.dat
msft.csv
percent_bachelors_degrees_women_usa.csv
s1045.ima.gz
topobathy.npz

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/mpl-data/sample_data/axes_grid:
bivariate_normal.npy

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/mpl-data/stylelib:
Solarize_Light2.mplstyle
_classic_test_patch.mplstyle
_mpl-gallery-nogrid.mplstyle
_mpl-gallery.mplstyle
bmh.mplstyle
classic.mplstyle
dark_background.mplstyle
fast.mplstyle
fivethirtyeight.mplstyle
ggplot.mplstyle
grayscale.mplstyle
seaborn-v0_8-bright.mplstyle
seaborn-v0_8-colorblind.mplstyle
seaborn-v0_8-dark-palette.mplstyle
seaborn-v0_8-dark.mplstyle
seaborn-v0_8-darkgrid.mplstyle
seaborn-v0_8-deep.mplstyle
seaborn-v0_8-muted.mplstyle
seaborn-v0_8-notebook.mplstyle
seaborn-v0_8-paper.mplstyle
seaborn-v0_8-pastel.mplstyle
seaborn-v0_8-poster.mplstyle
seaborn-v0_8-talk.mplstyle
seaborn-v0_8-ticks.mplstyle
seaborn-v0_8-white.mplstyle
seaborn-v0_8-whitegrid.mplstyle
seaborn-v0_8.mplstyle
tableau-colorblind10.mplstyle

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/projections:
__init__.py
geo.py
polar.py

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/sphinxext:
__init__.py
mathmpl.py
plot_directive.py

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/style:
__init__.py
core.py

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/testing:
__init__.py
_markers.py
compare.py
conftest.py
decorators.py
exceptions.py
jpl_units
widgets.py

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/testing/jpl_units:
Duration.py
Epoch.py
EpochConverter.py
StrConverter.py
UnitDbl.py
UnitDblConverter.py
UnitDblFormatter.py
__init__.py

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/tests:
Courier10PitchBT-Bold.pfb
README
__init__.py
baseline_images
cmr10.pfb
conftest.py
mpltest.ttf
test_afm.py
test_agg.py
test_agg_filter.py
test_animation.py
test_api.py
test_arrow_patches.py
test_artist.py
test_axes.py
test_backend_bases.py
test_backend_cairo.py
test_backend_gtk3.py
test_backend_macosx.py
test_backend_nbagg.py
test_backend_pdf.py
test_backend_pgf.py
test_backend_ps.py
test_backend_qt.py
test_backend_svg.py
test_backend_template.py
test_backend_tk.py
test_backend_tools.py
test_backend_webagg.py
test_backends_interactive.py
test_basic.py
test_bbox_tight.py
test_category.py
test_cbook.py
test_collections.py
test_colorbar.py
test_colors.py
test_compare_images.py
test_constrainedlayout.py
test_container.py
test_contour.py
test_cycles.py
test_dates.py
test_determinism.py
test_doc.py
test_dviread.py
test_figure.py
test_font_manager.py
test_fontconfig_pattern.py
test_ft2font.py
test_getattr.py
test_gridspec.py
test_image.py
test_legend.py
test_lines.py
test_marker.py
test_mathtext.py
test_matplotlib.py
test_mlab.py
test_nbagg_01.ipynb
test_offsetbox.py
test_patches.py
test_path.py
test_patheffects.py
test_pickle.py
test_png.py
test_polar.py
test_preprocess_data.py
test_pyplot.py
test_quiver.py
test_rcparams.py
test_sankey.py
test_scale.py
test_simplification.py
test_skew.py
test_sphinxext.py
test_spines.py
test_streamplot.py
test_style.py
test_subplots.py
test_table.py
test_testing.py
test_texmanager.py
test_text.py
test_textpath.py
test_ticker.py
test_tightlayout.py
test_transforms.py
test_triangulation.py
test_ttconv.py
test_type1font.py
test_units.py
test_usetex.py
test_widgets.py
tinypages

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/tests/baseline_images:
dviread
pngsuite
test_agg
test_agg_filter
test_arrow_patches
test_artist
test_axes
test_backend_pdf
test_backend_pgf
test_backend_ps
test_backend_svg
test_bbox_tight
test_collections
test_colorbar
test_colors
test_compare_images
test_constrainedlayout
test_contour
test_dates
test_figure
test_image
test_legend
test_lines
test_mathtext
test_offsetbox
test_patches
test_path
test_patheffects
test_png
test_polar
test_quiver
test_scale
test_simplification
test_skew
test_spines
test_streamplot
test_subplots
test_table
test_text
test_tightlayout
test_transforms
test_triangulation
test_ttconv
test_units
test_usetex
test_widgets

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/tests/baseline_images/dviread:
test.dvi
test.json
test.map
test.tex

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/tests/baseline_images/pngsuite:
basn0g01.png
basn0g02.png
basn0g04.png
basn0g08.png
basn0g16.png
basn2c08.png
basn2c16.png
basn3p01.png
basn3p02.png
basn3p04.png
basn3p08.png
basn4a08.png
basn4a16.png
basn6a08.png
basn6a16.png

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/tests/baseline_images/test_agg:
agg_filter.png

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/tests/baseline_images/test_agg_filter:
agg_filter_alpha.pdf
agg_filter_alpha.png

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/tests/baseline_images/test_arrow_patches:
arrow_styles.png
boxarrow_test_image.png
connection_styles.png
fancyarrow_dash.png
fancyarrow_dpi_cor_100dpi.png
fancyarrow_dpi_cor_200dpi.png
fancyarrow_test_image.pdf
fancyarrow_test_image.png
fancyarrow_test_image.svg

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/tests/baseline_images/test_artist:
clip_path_clipping.pdf
clip_path_clipping.png
clip_path_clipping.svg
default_edges.png
hatching.pdf
hatching.png
hatching.svg

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/tests/baseline_images/test_axes:
aitoff_proj.png
angle_spectrum_freqs.png
angle_spectrum_noise.png
annotate_across_transforms.png
arc_angles.png
arc_ellipse.pdf
arc_ellipse.png
arc_ellipse.svg
arrow_simple.png
autoscale_tiny_range.pdf
autoscale_tiny_range.png
autoscale_tiny_range.svg
axhspan_epoch.pdf
axhspan_epoch.png
axhspan_epoch.svg
axis_options.png
axisbelow.png
axvspan_epoch.pdf
axvspan_epoch.png
axvspan_epoch.svg
bar_tick_label_multiple.png
bar_tick_label_multiple_old_label_alignment.png
bar_tick_label_single.png
barh_tick_label.png
boxplot.pdf
boxplot.png
boxplot.svg
boxplot_autorange_false_whiskers.png
boxplot_autorange_true_whiskers.png
boxplot_custom_capwidths.png
boxplot_mod_artists_after_plotting.png
boxplot_no_inverted_whisker.png
boxplot_rc_parameters.pdf
boxplot_rc_parameters.png
boxplot_rc_parameters.svg
boxplot_sym.png
boxplot_sym2.png
boxplot_with_CIarray.png
bxp_baseline.png
bxp_custom_capwidth.png
bxp_custom_capwidths.png
bxp_custombox.png
bxp_customcap.png
bxp_custommedian.png
bxp_customoutlier.png
bxp_custompatchartist.png
bxp_custompositions.png
bxp_customwhisker.png
bxp_customwidths.png
bxp_horizontal.png
bxp_no_flier_stats.png
bxp_nobox.png
bxp_nocaps.png
bxp_patchartist.png
bxp_percentilewhis.png
bxp_rangewhis.png
bxp_scalarwidth.png
bxp_with_xlabels.png
bxp_with_ylabels.png
bxp_withmean_custompoint.png
bxp_withmean_line.png
bxp_withmean_point.png
bxp_withnotch.png
canonical.pdf
canonical.png
canonical.svg
contour_colorbar.pdf
contour_colorbar.png
contour_colorbar.svg
contour_hatching.pdf
contour_hatching.png
contour_hatching.svg
csd_freqs.png
csd_noise.png
dash_offset.pdf
dash_offset.png
dash_offset.svg
date_timezone_x.png
date_timezone_x_and_y.png
date_timezone_y.png
errorbar_basic.pdf
errorbar_basic.png
errorbar_basic.svg
errorbar_limits.pdf
errorbar_limits.png
errorbar_limits.svg
errorbar_mixed.pdf
errorbar_mixed.png
errorbar_mixed.svg
errorbar_zorder.pdf
errorbar_zorder.png
errorbar_zorder.svg
eventplot.pdf
eventplot.png
eventplot.svg
extent_units.png
fill_between_interpolate.pdf
fill_between_interpolate.png
fill_between_interpolate.svg
fill_between_interpolate_decreasing.pdf
fill_between_interpolate_decreasing.png
fill_between_interpolate_decreasing.svg
fill_between_interpolate_nan.pdf
fill_between_interpolate_nan.png
fill_between_interpolate_nan.svg
fill_units.png
formatter_ticker_001.pdf
formatter_ticker_001.png
formatter_ticker_001.svg
formatter_ticker_002.pdf
formatter_ticker_002.png
formatter_ticker_002.svg
formatter_ticker_003.pdf
formatter_ticker_003.png
formatter_ticker_003.svg
formatter_ticker_004.pdf
formatter_ticker_004.png
formatter_ticker_004.svg
formatter_ticker_005.pdf
formatter_ticker_005.png
formatter_ticker_005.svg
hexbin_empty.png
hexbin_extent.png
hexbin_linear.png
hexbin_log.png
hist2d.pdf
hist2d.png
hist2d.svg
hist2d_transpose.pdf
hist2d_transpose.png
hist2d_transpose.svg
hist_bar_empty.png
hist_density.png
hist_log.pdf
hist_log.png
hist_log.svg
hist_offset.pdf
hist_offset.png
hist_offset.svg
hist_stacked.png
hist_stacked_bar.pdf
hist_stacked_bar.png
hist_stacked_bar.svg
hist_stacked_normed.pdf
hist_stacked_normed.png
hist_stacked_normed.svg
hist_stacked_step.pdf
hist_stacked_step.png
hist_stacked_step.svg
hist_stacked_stepfilled.pdf
hist_stacked_stepfilled.png
hist_stacked_stepfilled.svg
hist_stacked_stepfilled_alpha.pdf
hist_stacked_stepfilled_alpha.png
hist_stacked_stepfilled_alpha.svg
hist_stacked_weights.pdf
hist_stacked_weights.png
hist_stacked_weights.svg
hist_step.png
hist_step_bottom.png
hist_step_empty.png
hist_step_filled.png
hist_step_horiz.png
hlines_basic.png
hlines_masked.png
hlines_with_nan.png
imshow.pdf
imshow.png
imshow.svg
imshow_clip.pdf
imshow_clip.png
imshow_clip.svg
inset_polar.png
loglog.png
magnitude_spectrum_freqs_dB.png
magnitude_spectrum_freqs_linear.png
magnitude_spectrum_noise_dB.png
magnitude_spectrum_noise_linear.png
marker_edges.pdf
marker_edges.png
marker_edges.svg
marker_styles.png
markevery.pdf
markevery.png
markevery.svg
markevery_line.pdf
markevery_line.png
markevery_line.svg
markevery_linear_scales.pdf
markevery_linear_scales.png
markevery_linear_scales.svg
markevery_linear_scales_nans.pdf
markevery_linear_scales_nans.png
markevery_linear_scales_nans.svg
markevery_linear_scales_zoomed.pdf
markevery_linear_scales_zoomed.png
markevery_linear_scales_zoomed.svg
markevery_log_scales.pdf
markevery_log_scales.png
markevery_log_scales.svg
markevery_polar.pdf
markevery_polar.png
markevery_polar.svg
mixed_collection.pdf
mixed_collection.png
mixed_collection.svg
mixed_errorbar_polar_caps.png
mollweide_grid.pdf
mollweide_grid.png
mollweide_grid.svg
nonfinite_limits.pdf
nonfinite_limits.png
nonfinite_limits.svg
o_marker_path_snap.png
offset_points.pdf
offset_points.png
offset_points.svg
pcolor_datetime_axis.png
pcolormesh.pdf
pcolormesh.png
pcolormesh.svg
pcolormesh_alpha.pdf
pcolormesh_alpha.png
pcolormesh_datetime_axis.png
pcolormesh_small.eps
phase_spectrum_freqs.png
phase_spectrum_noise.png
pie_ccw_true.png
pie_center_radius.png
pie_default.png
pie_frame_grid.png
pie_linewidth_0.png
pie_linewidth_2.png
pie_no_label.png
pie_rotatelabels_true.png
polycollection_joinstyle.pdf
polycollection_joinstyle.png
polycollection_joinstyle.svg
psd_freqs.png
psd_noise.png
rc_grid.png
rc_markerfill.png
rc_spines.png
retain_tick_visibility.png
rgba_markers.pdf
rgba_markers.png
rgba_markers.svg
scatter.pdf
scatter.png
scatter.svg
scatter_2D.png
scatter_marker.png
secondary_xy.png
set_get_ticklabels.png
single_date.png
single_point.pdf
single_point.png
single_point.svg
specgram_angle_freqs.png
specgram_angle_noise.png
specgram_freqs.png
specgram_freqs_linear.png
specgram_magnitude_freqs.png
specgram_magnitude_freqs_linear.png
specgram_magnitude_noise.png
specgram_magnitude_noise_linear.png
specgram_noise.png
specgram_noise_linear.png
specgram_phase_freqs.png
specgram_phase_noise.png
stackplot_test_baseline.pdf
stackplot_test_baseline.png
stackplot_test_baseline.svg
stackplot_test_image.pdf
stackplot_test_image.png
stackplot_test_image.svg
stem.png
stem_orientation.png
step_linestyle.pdf
step_linestyle.png
step_linestyle.svg
symlog.pdf
symlog2.pdf
test_alpha.pdf
test_alpha.png
test_alpha.svg
test_centered_bar_label_nonlinear.svg
test_eventplot_defaults.png
test_eventplot_problem_kwargs.png
test_loglog_nonpos.png
test_stairs_datetime.png
test_stairs_options.png
transparent_markers.pdf
transparent_markers.png
transparent_markers.svg
twin_autoscale.png
twin_axis_locators_formatters.pdf
twin_axis_locators_formatters.png
twin_axis_locators_formatters.svg
twin_spines.png
twin_spines_on_top.png
vertex_markers.png
violinplot_horiz_baseline.png
violinplot_horiz_custompoints_10.png
violinplot_horiz_custompoints_200.png
violinplot_horiz_showall.png
violinplot_horiz_showextrema.png
violinplot_horiz_showmeans.png
violinplot_horiz_showmedians.png
violinplot_vert_baseline.png
violinplot_vert_custompoints_10.png
violinplot_vert_custompoints_200.png
violinplot_vert_showall.png
violinplot_vert_showextrema.png
violinplot_vert_showmeans.png
violinplot_vert_showmedians.png
vline_hline_zorder.pdf
vline_hline_zorder.png
vline_hline_zorder.svg
vlines_basic.png
vlines_masked.png
vlines_with_nan.png

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/tests/baseline_images/test_backend_pdf:
grayscale_alpha.pdf
hatching_legend.pdf
kerning.pdf
multi_font_type3.pdf
multi_font_type42.pdf
pdf_use14corefonts.pdf

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/tests/baseline_images/test_backend_pgf:
pgf_bbox_inches.pdf
pgf_mixedmode.pdf
pgf_pdflatex.pdf
pgf_rcupdate1.pdf
pgf_rcupdate2.pdf
pgf_xelatex.pdf

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/tests/baseline_images/test_backend_ps:
colorbar_shift.eps
coloredhatcheszerolw.eps
empty.pdf
multi_font_type3.eps
multi_font_type42.eps
scatter.eps
type3.eps
type42_without_prep.eps
useafm.eps

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/tests/baseline_images/test_backend_svg:
bold_font_output.svg
bold_font_output_with_none_fonttype.svg
fill_black_with_alpha.svg
multi_font_aspath.svg
multi_font_astext.svg
noscale.pdf
noscale.png
noscale.svg

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/tests/baseline_images/test_bbox_tight:
bbox_inches_fixed_aspect.png
bbox_inches_tight.pdf
bbox_inches_tight.png
bbox_inches_tight.svg
bbox_inches_tight_clipping.pdf
bbox_inches_tight_clipping.png
bbox_inches_tight_clipping.svg
bbox_inches_tight_layout.png
bbox_inches_tight_raster.pdf
bbox_inches_tight_raster.png
bbox_inches_tight_raster.svg
bbox_inches_tight_suptile_legend.pdf
bbox_inches_tight_suptile_legend.png
bbox_inches_tight_suptile_legend.svg
bbox_inches_tight_suptile_non_default.png

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/tests/baseline_images/test_collections:
EllipseCollection_test_image.png
EventCollection_plot__add_positions.pdf
EventCollection_plot__add_positions.png
EventCollection_plot__add_positions.svg
EventCollection_plot__append_positions.pdf
EventCollection_plot__append_positions.png
EventCollection_plot__append_positions.svg
EventCollection_plot__default.pdf
EventCollection_plot__default.png
EventCollection_plot__default.svg
EventCollection_plot__extend_positions.pdf
EventCollection_plot__extend_positions.png
EventCollection_plot__extend_positions.svg
EventCollection_plot__set_color.pdf
EventCollection_plot__set_color.png
EventCollection_plot__set_color.svg
EventCollection_plot__set_linelength.pdf
EventCollection_plot__set_linelength.png
EventCollection_plot__set_linelength.svg
EventCollection_plot__set_lineoffset.pdf
EventCollection_plot__set_lineoffset.png
EventCollection_plot__set_lineoffset.svg
EventCollection_plot__set_linestyle.pdf
EventCollection_plot__set_linestyle.png
EventCollection_plot__set_linestyle.svg
EventCollection_plot__set_linewidth.pdf
EventCollection_plot__set_linewidth.png
EventCollection_plot__set_linewidth.svg
EventCollection_plot__set_orientation.pdf
EventCollection_plot__set_orientation.png
EventCollection_plot__set_orientation.svg
EventCollection_plot__set_positions.pdf
EventCollection_plot__set_positions.png
EventCollection_plot__set_positions.svg
EventCollection_plot__switch_orientation.pdf
EventCollection_plot__switch_orientation.png
EventCollection_plot__switch_orientation.svg
EventCollection_plot__switch_orientation__2x.pdf
EventCollection_plot__switch_orientation__2x.png
EventCollection_plot__switch_orientation__2x.svg
cap_and_joinstyle.png
polycollection_close.png
regularpolycollection_rotate.png
regularpolycollection_scale.png
scatter_post_alpha.png
size_in_xy.png
test_check_masked_offsets.png

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/tests/baseline_images/test_colorbar:
cbar_locationing.png
cbar_sharing.png
cbar_with_orientation.png
cbar_with_subplots_adjust.png
colorbar_change_lim_scale.png
colorbar_closed_patch.png
colorbar_extend_alpha.png
colorbar_extensions_proportional.png
colorbar_extensions_shape_proportional.png
colorbar_extensions_shape_uniform.png
colorbar_extensions_uniform.png
colorbar_keeping_xlabel.png
colorbar_single_scatter.png
colorbar_twoslope.png
contour_colorbar.png
contourf_extend_patches.png
double_cbar.png
extend_drawedges.png
nonorm_colorbars.svg
proportional_colorbars.png
test_boundaries.png

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/tests/baseline_images/test_colors:
boundarynorm_and_colorbar.png
levels_and_colors.png
light_source_shading_topo.png

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/tests/baseline_images/test_compare_images:
all127.png
all128.png
basn3p02-1px-offset.png
basn3p02-half-1px-offset.png
basn3p02-minorchange.png
basn3p02-scrambled.png
basn3p02.png
simple.pdf
simple.png
simple.svg

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/tests/baseline_images/test_constrainedlayout:
constrained_layout1.png
constrained_layout10.png
constrained_layout11.png
constrained_layout11rat.png
constrained_layout12.png
constrained_layout13.png
constrained_layout14.png
constrained_layout15.png
constrained_layout16.png
constrained_layout17.png
constrained_layout2.png
constrained_layout3.png
constrained_layout4.png
constrained_layout4.svg
constrained_layout5.png
constrained_layout6.png
constrained_layout8.png
constrained_layout9.png
test_bbox.png
test_bboxtight.png
test_colorbar_location.png
test_colorbars_no_overlapH.png
test_colorbars_no_overlapV.png

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/tests/baseline_images/test_contour:
contour_addlines.png
contour_all_algorithms.png
contour_closed_line_loop.png
contour_corner_mask_False.png
contour_corner_mask_True.png
contour_datetime_axis.png
contour_labels_size_color.png
contour_line_start_on_corner_edge.png
contour_log_extension.png
contour_log_locator.svg
contour_manual.png
contour_manual_colors_and_levels.png
contour_manual_labels.pdf
contour_manual_labels.png
contour_manual_labels.svg
contour_test_label_transforms.png
contour_uneven.png

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/tests/baseline_images/test_dates:
DateFormatter_fractionalSeconds.png
RRuleLocator_bounds.png
date_axhline.png
date_axhspan.png
date_axvline.png
date_axvspan.png
date_inverted_limit.png

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/tests/baseline_images/test_figure:
alpha_background.png
alpha_background.svg
figure_align_labels.png
figure_align_labels.svg
figure_legend.pdf
figure_legend.png
figure_legend.svg
figure_suptitle.pdf
figure_suptitle.png
figure_suptitle.svg
figure_today.pdf
figure_today.png
figure_today.svg
test_subfigure.png
test_subfigure_double.png
test_subfigure_scatter_size.png
test_subfigure_ss.png
tightbbox_box_aspect.svg

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/tests/baseline_images/test_image:
bbox_image_inverted.pdf
bbox_image_inverted.png
bbox_image_inverted.svg
figimage.pdf
figimage.png
image_alpha.pdf
image_alpha.png
image_alpha.svg
image_clip.pdf
image_clip.png
image_clip.svg
image_cliprect.pdf
image_cliprect.png
image_cliprect.svg
image_composite_alpha.pdf
image_composite_alpha.png
image_composite_alpha.svg
image_composite_background.pdf
image_composite_background.png
image_composite_background.svg
image_interps.pdf
image_interps.png
image_interps.svg
image_shift.pdf
image_shift.svg
imshow.pdf
imshow.png
imshow.svg
imshow_bignumbers.png
imshow_bignumbers_real.png
imshow_endianess.png
imshow_flatfield.png
imshow_masked_interpolation.pdf
imshow_masked_interpolation.png
imshow_masked_interpolation.svg
interp_alpha.png
interp_nearest_vs_none.pdf
interp_nearest_vs_none.svg
log_scale_image.pdf
log_scale_image.png
log_scale_image.svg
mask_image.pdf
mask_image.png
mask_image.svg
mask_image_over_under.png
no_interpolation_origin.pdf
no_interpolation_origin.png
no_interpolation_origin.svg
nonuniform_and_pcolor.png
rasterize_10dpi.pdf
rasterize_10dpi.svg
rgba_antialias.png
rotate_image.pdf
rotate_image.png
rotate_image.svg
uint16.tif
zoom_and_clip_upper_origin.png

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/tests/baseline_images/test_legend:
fancy.pdf
fancy.png
fancy.svg
framealpha.pdf
framealpha.png
framealpha.svg
hatching.pdf
hatching.png
hatching.svg
legend_auto1.pdf
legend_auto1.png
legend_auto1.svg
legend_auto2.pdf
legend_auto2.png
legend_auto2.svg
legend_auto3.pdf
legend_auto3.png
legend_auto3.svg
legend_expand.pdf
legend_expand.png
legend_expand.svg
legend_labels_first.png
legend_multiple_keys.png
legend_stackplot.png
legend_various_labels.pdf
legend_various_labels.png
legend_various_labels.svg
not_covering_scatter.png
not_covering_scatter_transform.png
rcparam_alpha.png
rgba_alpha.png
scatter_rc1.pdf
scatter_rc1.png
scatter_rc1.svg
scatter_rc3.pdf
scatter_rc3.png
scatter_rc3.svg

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/tests/baseline_images/test_lines:
drawstyle_variants.png
line_collection_dashes.pdf
line_collection_dashes.png
line_collection_dashes.svg
line_dashes.pdf
line_dashes.png
line_dashes.svg
marker_fill_styles.png
scaled_lines.pdf
scaled_lines.png
scaled_lines.svg
striped_line.png

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/tests/baseline_images/test_mathtext:
math_fontfamily_image.png
mathfont_cm_00.png
mathfont_cm_01.png
mathfont_cm_02.png
mathfont_cm_03.png
mathfont_cm_04.png
mathfont_cm_05.png
mathfont_cm_06.png
mathfont_cm_07.png
mathfont_cm_08.png
mathfont_cm_09.png
mathfont_cm_10.png
mathfont_cm_11.png
mathfont_cm_12.png
mathfont_cm_13.png
mathfont_cm_14.png
mathfont_cm_15.png
mathfont_cm_16.png
mathfont_cm_17.png
mathfont_cm_18.png
mathfont_cm_19.png
mathfont_cm_20.png
mathfont_cm_21.png
mathfont_cm_22.png
mathfont_cm_32.png
mathfont_cm_33.png
mathfont_cm_34.png
mathfont_cm_35.png
mathfont_cm_36.png
mathfont_cm_37.png
mathfont_cm_38.png
mathfont_cm_39.png
mathfont_cm_40.png
mathfont_cm_41.png
mathfont_cm_42.png
mathfont_cm_43.png
mathfont_cm_44.png
mathfont_cm_45.png
mathfont_cm_46.png
mathfont_cm_47.png
mathfont_cm_48.png
mathfont_cm_49.png
mathfont_cm_50.png
mathfont_cm_51.png
mathfont_cm_52.png
mathfont_cm_53.png
mathfont_cm_54.png
mathfont_cm_55.png
mathfont_cm_56.png
mathfont_cm_57.png
mathfont_cm_58.png
mathfont_cm_59.png
mathfont_dejavusans_00.png
mathfont_dejavusans_01.png
mathfont_dejavusans_02.png
mathfont_dejavusans_03.png
mathfont_dejavusans_04.png
mathfont_dejavusans_05.png
mathfont_dejavusans_06.png
mathfont_dejavusans_07.png
mathfont_dejavusans_08.png
mathfont_dejavusans_09.png
mathfont_dejavusans_10.png
mathfont_dejavusans_11.png
mathfont_dejavusans_12.png
mathfont_dejavusans_13.png
mathfont_dejavusans_14.png
mathfont_dejavusans_15.png
mathfont_dejavusans_16.png
mathfont_dejavusans_17.png
mathfont_dejavusans_18.png
mathfont_dejavusans_19.png
mathfont_dejavusans_20.png
mathfont_dejavusans_21.png
mathfont_dejavusans_22.png
mathfont_dejavusans_32.png
mathfont_dejavusans_33.png
mathfont_dejavusans_34.png
mathfont_dejavusans_35.png
mathfont_dejavusans_36.png
mathfont_dejavusans_37.png
mathfont_dejavusans_38.png
mathfont_dejavusans_39.png
mathfont_dejavusans_40.png
mathfont_dejavusans_41.png
mathfont_dejavusans_42.png
mathfont_dejavusans_43.png
mathfont_dejavusans_44.png
mathfont_dejavusans_45.png
mathfont_dejavusans_46.png
mathfont_dejavusans_47.png
mathfont_dejavusans_48.png
mathfont_dejavusans_49.png
mathfont_dejavusans_50.png
mathfont_dejavusans_51.png
mathfont_dejavusans_52.png
mathfont_dejavusans_53.png
mathfont_dejavusans_54.png
mathfont_dejavusans_55.png
mathfont_dejavusans_56.png
mathfont_dejavusans_57.png
mathfont_dejavusans_58.png
mathfont_dejavusans_59.png
mathfont_dejavuserif_00.png
mathfont_dejavuserif_01.png
mathfont_dejavuserif_02.png
mathfont_dejavuserif_03.png
mathfont_dejavuserif_04.png
mathfont_dejavuserif_05.png
mathfont_dejavuserif_06.png
mathfont_dejavuserif_07.png
mathfont_dejavuserif_08.png
mathfont_dejavuserif_09.png
mathfont_dejavuserif_10.png
mathfont_dejavuserif_11.png
mathfont_dejavuserif_12.png
mathfont_dejavuserif_13.png
mathfont_dejavuserif_14.png
mathfont_dejavuserif_15.png
mathfont_dejavuserif_16.png
mathfont_dejavuserif_17.png
mathfont_dejavuserif_18.png
mathfont_dejavuserif_19.png
mathfont_dejavuserif_20.png
mathfont_dejavuserif_21.png
mathfont_dejavuserif_22.png
mathfont_dejavuserif_32.png
mathfont_dejavuserif_33.png
mathfont_dejavuserif_34.png
mathfont_dejavuserif_35.png
mathfont_dejavuserif_36.png
mathfont_dejavuserif_37.png
mathfont_dejavuserif_38.png
mathfont_dejavuserif_39.png
mathfont_dejavuserif_40.png
mathfont_dejavuserif_41.png
mathfont_dejavuserif_42.png
mathfont_dejavuserif_43.png
mathfont_dejavuserif_44.png
mathfont_dejavuserif_45.png
mathfont_dejavuserif_46.png
mathfont_dejavuserif_47.png
mathfont_dejavuserif_48.png
mathfont_dejavuserif_49.png
mathfont_dejavuserif_50.png
mathfont_dejavuserif_51.png
mathfont_dejavuserif_52.png
mathfont_dejavuserif_53.png
mathfont_dejavuserif_54.png
mathfont_dejavuserif_55.png
mathfont_dejavuserif_56.png
mathfont_dejavuserif_57.png
mathfont_dejavuserif_58.png
mathfont_dejavuserif_59.png
mathfont_stix_00.png
mathfont_stix_01.png
mathfont_stix_02.png
mathfont_stix_03.png
mathfont_stix_04.png
mathfont_stix_05.png
mathfont_stix_06.png
mathfont_stix_07.png
mathfont_stix_08.png
mathfont_stix_09.png
mathfont_stix_10.png
mathfont_stix_11.png
mathfont_stix_12.png
mathfont_stix_13.png
mathfont_stix_14.png
mathfont_stix_15.png
mathfont_stix_16.png
mathfont_stix_17.png
mathfont_stix_18.png
mathfont_stix_19.png
mathfont_stix_20.png
mathfont_stix_21.png
mathfont_stix_22.png
mathfont_stix_32.png
mathfont_stix_33.png
mathfont_stix_34.png
mathfont_stix_35.png
mathfont_stix_36.png
mathfont_stix_37.png
mathfont_stix_38.png
mathfont_stix_39.png
mathfont_stix_40.png
mathfont_stix_41.png
mathfont_stix_42.png
mathfont_stix_43.png
mathfont_stix_44.png
mathfont_stix_45.png
mathfont_stix_46.png
mathfont_stix_47.png
mathfont_stix_48.png
mathfont_stix_49.png
mathfont_stix_50.png
mathfont_stix_51.png
mathfont_stix_52.png
mathfont_stix_53.png
mathfont_stix_54.png
mathfont_stix_55.png
mathfont_stix_56.png
mathfont_stix_57.png
mathfont_stix_58.png
mathfont_stix_59.png
mathfont_stixsans_00.png
mathfont_stixsans_01.png
mathfont_stixsans_02.png
mathfont_stixsans_03.png
mathfont_stixsans_04.png
mathfont_stixsans_05.png
mathfont_stixsans_06.png
mathfont_stixsans_07.png
mathfont_stixsans_08.png
mathfont_stixsans_09.png
mathfont_stixsans_10.png
mathfont_stixsans_11.png
mathfont_stixsans_12.png
mathfont_stixsans_13.png
mathfont_stixsans_14.png
mathfont_stixsans_15.png
mathfont_stixsans_16.png
mathfont_stixsans_17.png
mathfont_stixsans_18.png
mathfont_stixsans_19.png
mathfont_stixsans_20.png
mathfont_stixsans_21.png
mathfont_stixsans_22.png
mathfont_stixsans_32.png
mathfont_stixsans_33.png
mathfont_stixsans_34.png
mathfont_stixsans_35.png
mathfont_stixsans_36.png
mathfont_stixsans_37.png
mathfont_stixsans_38.png
mathfont_stixsans_39.png
mathfont_stixsans_40.png
mathfont_stixsans_41.png
mathfont_stixsans_42.png
mathfont_stixsans_43.png
mathfont_stixsans_44.png
mathfont_stixsans_45.png
mathfont_stixsans_46.png
mathfont_stixsans_47.png
mathfont_stixsans_48.png
mathfont_stixsans_49.png
mathfont_stixsans_50.png
mathfont_stixsans_51.png
mathfont_stixsans_52.png
mathfont_stixsans_53.png
mathfont_stixsans_54.png
mathfont_stixsans_55.png
mathfont_stixsans_56.png
mathfont_stixsans_57.png
mathfont_stixsans_58.png
mathfont_stixsans_59.png
mathtext0_cm_00.svg
mathtext0_dejavusans_00.svg
mathtext1_dejavusans_00.png
mathtext1_dejavusans_01.png
mathtext1_dejavusans_02.png
mathtext1_dejavusans_03.png
mathtext_cm_00.pdf
mathtext_cm_00.png
mathtext_cm_00.svg
mathtext_cm_01.pdf
mathtext_cm_01.png
mathtext_cm_01.svg
mathtext_cm_02.pdf
mathtext_cm_02.png
mathtext_cm_02.svg
mathtext_cm_03.pdf
mathtext_cm_03.png
mathtext_cm_03.svg
mathtext_cm_04.pdf
mathtext_cm_04.png
mathtext_cm_04.svg
mathtext_cm_05.pdf
mathtext_cm_05.png
mathtext_cm_05.svg
mathtext_cm_06.pdf
mathtext_cm_06.png
mathtext_cm_06.svg
mathtext_cm_07.pdf
mathtext_cm_07.png
mathtext_cm_07.svg
mathtext_cm_08.pdf
mathtext_cm_08.png
mathtext_cm_08.svg
mathtext_cm_09.pdf
mathtext_cm_09.png
mathtext_cm_09.svg
mathtext_cm_10.pdf
mathtext_cm_10.png
mathtext_cm_10.svg
mathtext_cm_11.pdf
mathtext_cm_11.png
mathtext_cm_11.svg
mathtext_cm_12.pdf
mathtext_cm_12.png
mathtext_cm_12.svg
mathtext_cm_13.pdf
mathtext_cm_13.png
mathtext_cm_13.svg
mathtext_cm_14.pdf
mathtext_cm_14.png
mathtext_cm_14.svg
mathtext_cm_15.pdf
mathtext_cm_15.png
mathtext_cm_15.svg
mathtext_cm_16.pdf
mathtext_cm_16.png
mathtext_cm_16.svg
mathtext_cm_17.pdf
mathtext_cm_17.png
mathtext_cm_17.svg
mathtext_cm_18.pdf
mathtext_cm_18.png
mathtext_cm_18.svg
mathtext_cm_19.pdf
mathtext_cm_19.png
mathtext_cm_19.svg
mathtext_cm_20.pdf
mathtext_cm_20.png
mathtext_cm_20.svg
mathtext_cm_21.pdf
mathtext_cm_21.png
mathtext_cm_21.svg
mathtext_cm_22.pdf
mathtext_cm_22.png
mathtext_cm_22.svg
mathtext_cm_23.pdf
mathtext_cm_23.png
mathtext_cm_23.svg
mathtext_cm_24.pdf
mathtext_cm_24.png
mathtext_cm_24.svg
mathtext_cm_25.pdf
mathtext_cm_25.png
mathtext_cm_25.svg
mathtext_cm_26.pdf
mathtext_cm_26.png
mathtext_cm_26.svg
mathtext_cm_27.pdf
mathtext_cm_27.png
mathtext_cm_27.svg
mathtext_cm_28.pdf
mathtext_cm_28.png
mathtext_cm_28.svg
mathtext_cm_29.pdf
mathtext_cm_29.png
mathtext_cm_29.svg
mathtext_cm_31.pdf
mathtext_cm_31.png
mathtext_cm_31.svg
mathtext_cm_32.pdf
mathtext_cm_32.png
mathtext_cm_32.svg
mathtext_cm_33.pdf
mathtext_cm_33.png
mathtext_cm_33.svg
mathtext_cm_34.pdf
mathtext_cm_34.png
mathtext_cm_34.svg
mathtext_cm_35.pdf
mathtext_cm_35.png
mathtext_cm_35.svg
mathtext_cm_36.pdf
mathtext_cm_36.png
mathtext_cm_36.svg
mathtext_cm_37.pdf
mathtext_cm_37.png
mathtext_cm_37.svg
mathtext_cm_38.pdf
mathtext_cm_38.png
mathtext_cm_38.svg
mathtext_cm_39.pdf
mathtext_cm_39.png
mathtext_cm_39.svg
mathtext_cm_40.pdf
mathtext_cm_40.png
mathtext_cm_40.svg
mathtext_cm_41.pdf
mathtext_cm_41.png
mathtext_cm_41.svg
mathtext_cm_42.pdf
mathtext_cm_42.png
mathtext_cm_42.svg
mathtext_cm_43.pdf
mathtext_cm_43.png
mathtext_cm_43.svg
mathtext_cm_44.pdf
mathtext_cm_44.png
mathtext_cm_44.svg
mathtext_cm_45.pdf
mathtext_cm_45.png
mathtext_cm_45.svg
mathtext_cm_46.pdf
mathtext_cm_46.png
mathtext_cm_46.svg
mathtext_cm_47.pdf
mathtext_cm_47.png
mathtext_cm_47.svg
mathtext_cm_48.pdf
mathtext_cm_48.png
mathtext_cm_48.svg
mathtext_cm_49.pdf
mathtext_cm_49.png
mathtext_cm_49.svg
mathtext_cm_50.pdf
mathtext_cm_50.png
mathtext_cm_50.svg
mathtext_cm_51.pdf
mathtext_cm_51.png
mathtext_cm_51.svg
mathtext_cm_52.pdf
mathtext_cm_52.png
mathtext_cm_52.svg
mathtext_cm_53.pdf
mathtext_cm_53.png
mathtext_cm_53.svg
mathtext_cm_54.pdf
mathtext_cm_54.png
mathtext_cm_54.svg
mathtext_cm_55.pdf
mathtext_cm_55.png
mathtext_cm_55.svg
mathtext_cm_56.pdf
mathtext_cm_56.png
mathtext_cm_56.svg
mathtext_cm_57.pdf
mathtext_cm_57.png
mathtext_cm_57.svg
mathtext_cm_58.pdf
mathtext_cm_58.png
mathtext_cm_58.svg
mathtext_cm_59.pdf
mathtext_cm_59.png
mathtext_cm_59.svg
mathtext_cm_60.pdf
mathtext_cm_60.png
mathtext_cm_60.svg
mathtext_cm_61.pdf
mathtext_cm_61.png
mathtext_cm_61.svg
mathtext_cm_62.pdf
mathtext_cm_62.png
mathtext_cm_62.svg
mathtext_cm_63.pdf
mathtext_cm_63.png
mathtext_cm_63.svg
mathtext_cm_64.pdf
mathtext_cm_64.png
mathtext_cm_64.svg
mathtext_cm_65.pdf
mathtext_cm_65.png
mathtext_cm_65.svg
mathtext_cm_67.pdf
mathtext_cm_67.png
mathtext_cm_67.svg
mathtext_cm_68.pdf
mathtext_cm_68.png
mathtext_cm_68.svg
mathtext_cm_69.pdf
mathtext_cm_69.png
mathtext_cm_69.svg
mathtext_cm_70.pdf
mathtext_cm_70.png
mathtext_cm_70.svg
mathtext_cm_71.pdf
mathtext_cm_71.png
mathtext_cm_71.svg
mathtext_cm_72.pdf
mathtext_cm_72.png
mathtext_cm_72.svg
mathtext_cm_73.pdf
mathtext_cm_73.png
mathtext_cm_73.svg
mathtext_cm_74.pdf
mathtext_cm_74.png
mathtext_cm_74.svg
mathtext_cm_75.pdf
mathtext_cm_75.png
mathtext_cm_75.svg
mathtext_cm_76.pdf
mathtext_cm_76.png
mathtext_cm_76.svg
mathtext_cm_78.pdf
mathtext_cm_78.png
mathtext_cm_78.svg
mathtext_cm_79.pdf
mathtext_cm_79.png
mathtext_cm_79.svg
mathtext_cm_80.pdf
mathtext_cm_80.png
mathtext_cm_80.svg
mathtext_cm_81.pdf
mathtext_cm_81.png
mathtext_cm_81.svg
mathtext_cm_82.pdf
mathtext_cm_82.png
mathtext_cm_82.svg
mathtext_dejavusans_00.pdf
mathtext_dejavusans_00.png
mathtext_dejavusans_00.svg
mathtext_dejavusans_01.pdf
mathtext_dejavusans_01.png
mathtext_dejavusans_01.svg
mathtext_dejavusans_02.pdf
mathtext_dejavusans_02.png
mathtext_dejavusans_02.svg
mathtext_dejavusans_03.pdf
mathtext_dejavusans_03.png
mathtext_dejavusans_03.svg
mathtext_dejavusans_04.pdf
mathtext_dejavusans_04.png
mathtext_dejavusans_04.svg
mathtext_dejavusans_05.pdf
mathtext_dejavusans_05.png
mathtext_dejavusans_05.svg
mathtext_dejavusans_06.pdf
mathtext_dejavusans_06.png
mathtext_dejavusans_06.svg
mathtext_dejavusans_07.pdf
mathtext_dejavusans_07.png
mathtext_dejavusans_07.svg
mathtext_dejavusans_08.pdf
mathtext_dejavusans_08.png
mathtext_dejavusans_08.svg
mathtext_dejavusans_09.pdf
mathtext_dejavusans_09.png
mathtext_dejavusans_09.svg
mathtext_dejavusans_10.pdf
mathtext_dejavusans_10.png
mathtext_dejavusans_10.svg
mathtext_dejavusans_11.pdf
mathtext_dejavusans_11.png
mathtext_dejavusans_11.svg
mathtext_dejavusans_12.pdf
mathtext_dejavusans_12.png
mathtext_dejavusans_12.svg
mathtext_dejavusans_13.pdf
mathtext_dejavusans_13.png
mathtext_dejavusans_13.svg
mathtext_dejavusans_14.pdf
mathtext_dejavusans_14.png
mathtext_dejavusans_14.svg
mathtext_dejavusans_15.pdf
mathtext_dejavusans_15.png
mathtext_dejavusans_15.svg
mathtext_dejavusans_16.pdf
mathtext_dejavusans_16.png
mathtext_dejavusans_16.svg
mathtext_dejavusans_17.pdf
mathtext_dejavusans_17.png
mathtext_dejavusans_17.svg
mathtext_dejavusans_18.pdf
mathtext_dejavusans_18.png
mathtext_dejavusans_18.svg
mathtext_dejavusans_19.pdf
mathtext_dejavusans_19.png
mathtext_dejavusans_19.svg
mathtext_dejavusans_20.pdf
mathtext_dejavusans_20.png
mathtext_dejavusans_20.svg
mathtext_dejavusans_21.pdf
mathtext_dejavusans_21.png
mathtext_dejavusans_21.svg
mathtext_dejavusans_22.pdf
mathtext_dejavusans_22.png
mathtext_dejavusans_22.svg
mathtext_dejavusans_23.pdf
mathtext_dejavusans_23.png
mathtext_dejavusans_23.svg
mathtext_dejavusans_24.pdf
mathtext_dejavusans_24.png
mathtext_dejavusans_24.svg
mathtext_dejavusans_25.pdf
mathtext_dejavusans_25.png
mathtext_dejavusans_25.svg
mathtext_dejavusans_26.pdf
mathtext_dejavusans_26.png
mathtext_dejavusans_26.svg
mathtext_dejavusans_27.pdf
mathtext_dejavusans_27.png
mathtext_dejavusans_27.svg
mathtext_dejavusans_28.pdf
mathtext_dejavusans_28.png
mathtext_dejavusans_28.svg
mathtext_dejavusans_29.pdf
mathtext_dejavusans_29.png
mathtext_dejavusans_29.svg
mathtext_dejavusans_31.pdf
mathtext_dejavusans_31.png
mathtext_dejavusans_31.svg
mathtext_dejavusans_32.pdf
mathtext_dejavusans_32.png
mathtext_dejavusans_32.svg
mathtext_dejavusans_33.pdf
mathtext_dejavusans_33.png
mathtext_dejavusans_33.svg
mathtext_dejavusans_34.pdf
mathtext_dejavusans_34.png
mathtext_dejavusans_34.svg
mathtext_dejavusans_35.pdf
mathtext_dejavusans_35.png
mathtext_dejavusans_35.svg
mathtext_dejavusans_36.pdf
mathtext_dejavusans_36.png
mathtext_dejavusans_36.svg
mathtext_dejavusans_37.pdf
mathtext_dejavusans_37.png
mathtext_dejavusans_37.svg
mathtext_dejavusans_38.pdf
mathtext_dejavusans_38.png
mathtext_dejavusans_38.svg
mathtext_dejavusans_39.pdf
mathtext_dejavusans_39.png
mathtext_dejavusans_39.svg
mathtext_dejavusans_40.pdf
mathtext_dejavusans_40.png
mathtext_dejavusans_40.svg
mathtext_dejavusans_41.pdf
mathtext_dejavusans_41.png
mathtext_dejavusans_41.svg
mathtext_dejavusans_42.pdf
mathtext_dejavusans_42.png
mathtext_dejavusans_42.svg
mathtext_dejavusans_43.pdf
mathtext_dejavusans_43.png
mathtext_dejavusans_43.svg
mathtext_dejavusans_44.pdf
mathtext_dejavusans_44.png
mathtext_dejavusans_44.svg
mathtext_dejavusans_45.pdf
mathtext_dejavusans_45.png
mathtext_dejavusans_45.svg
mathtext_dejavusans_46.pdf
mathtext_dejavusans_46.png
mathtext_dejavusans_46.svg
mathtext_dejavusans_47.pdf
mathtext_dejavusans_47.png
mathtext_dejavusans_47.svg
mathtext_dejavusans_48.pdf
mathtext_dejavusans_48.png
mathtext_dejavusans_48.svg
mathtext_dejavusans_49.pdf
mathtext_dejavusans_49.png
mathtext_dejavusans_49.svg
mathtext_dejavusans_50.pdf
mathtext_dejavusans_50.png
mathtext_dejavusans_50.svg
mathtext_dejavusans_51.pdf
mathtext_dejavusans_51.png
mathtext_dejavusans_51.svg
mathtext_dejavusans_52.pdf
mathtext_dejavusans_52.png
mathtext_dejavusans_52.svg
mathtext_dejavusans_53.pdf
mathtext_dejavusans_53.png
mathtext_dejavusans_53.svg
mathtext_dejavusans_54.pdf
mathtext_dejavusans_54.png
mathtext_dejavusans_54.svg
mathtext_dejavusans_55.pdf
mathtext_dejavusans_55.png
mathtext_dejavusans_55.svg
mathtext_dejavusans_56.pdf
mathtext_dejavusans_56.png
mathtext_dejavusans_56.svg
mathtext_dejavusans_57.pdf
mathtext_dejavusans_57.png
mathtext_dejavusans_57.svg
mathtext_dejavusans_58.pdf
mathtext_dejavusans_58.png
mathtext_dejavusans_58.svg
mathtext_dejavusans_59.pdf
mathtext_dejavusans_59.png
mathtext_dejavusans_59.svg
mathtext_dejavusans_60.pdf
mathtext_dejavusans_60.png
mathtext_dejavusans_60.svg
mathtext_dejavusans_61.pdf
mathtext_dejavusans_61.png
mathtext_dejavusans_61.svg
mathtext_dejavusans_62.pdf
mathtext_dejavusans_62.png
mathtext_dejavusans_62.svg
mathtext_dejavusans_63.pdf
mathtext_dejavusans_63.png
mathtext_dejavusans_63.svg
mathtext_dejavusans_64.pdf
mathtext_dejavusans_64.png
mathtext_dejavusans_64.svg
mathtext_dejavusans_65.pdf
mathtext_dejavusans_65.png
mathtext_dejavusans_65.svg
mathtext_dejavusans_67.pdf
mathtext_dejavusans_67.png
mathtext_dejavusans_67.svg
mathtext_dejavusans_68.pdf
mathtext_dejavusans_68.png
mathtext_dejavusans_68.svg
mathtext_dejavusans_69.pdf
mathtext_dejavusans_69.png
mathtext_dejavusans_69.svg
mathtext_dejavusans_70.pdf
mathtext_dejavusans_70.png
mathtext_dejavusans_70.svg
mathtext_dejavusans_71.pdf
mathtext_dejavusans_71.png
mathtext_dejavusans_71.svg
mathtext_dejavusans_72.pdf
mathtext_dejavusans_72.png
mathtext_dejavusans_72.svg
mathtext_dejavusans_73.pdf
mathtext_dejavusans_73.png
mathtext_dejavusans_73.svg
mathtext_dejavusans_74.pdf
mathtext_dejavusans_74.png
mathtext_dejavusans_74.svg
mathtext_dejavusans_75.pdf
mathtext_dejavusans_75.png
mathtext_dejavusans_75.svg
mathtext_dejavusans_76.pdf
mathtext_dejavusans_76.png
mathtext_dejavusans_76.svg
mathtext_dejavusans_78.pdf
mathtext_dejavusans_78.png
mathtext_dejavusans_78.svg
mathtext_dejavusans_79.pdf
mathtext_dejavusans_79.png
mathtext_dejavusans_79.svg
mathtext_dejavusans_80.pdf
mathtext_dejavusans_80.png
mathtext_dejavusans_80.svg
mathtext_dejavusans_81.pdf
mathtext_dejavusans_81.png
mathtext_dejavusans_81.svg
mathtext_dejavusans_82.pdf
mathtext_dejavusans_82.png
mathtext_dejavusans_82.svg
mathtext_dejavuserif_00.pdf
mathtext_dejavuserif_00.png
mathtext_dejavuserif_00.svg
mathtext_dejavuserif_01.pdf
mathtext_dejavuserif_01.png
mathtext_dejavuserif_01.svg
mathtext_dejavuserif_02.pdf
mathtext_dejavuserif_02.png
mathtext_dejavuserif_02.svg
mathtext_dejavuserif_03.pdf
mathtext_dejavuserif_03.png
mathtext_dejavuserif_03.svg
mathtext_dejavuserif_04.pdf
mathtext_dejavuserif_04.png
mathtext_dejavuserif_04.svg
mathtext_dejavuserif_05.pdf
mathtext_dejavuserif_05.png
mathtext_dejavuserif_05.svg
mathtext_dejavuserif_06.pdf
mathtext_dejavuserif_06.png
mathtext_dejavuserif_06.svg
mathtext_dejavuserif_07.pdf
mathtext_dejavuserif_07.png
mathtext_dejavuserif_07.svg
mathtext_dejavuserif_08.pdf
mathtext_dejavuserif_08.png
mathtext_dejavuserif_08.svg
mathtext_dejavuserif_09.pdf
mathtext_dejavuserif_09.png
mathtext_dejavuserif_09.svg
mathtext_dejavuserif_10.pdf
mathtext_dejavuserif_10.png
mathtext_dejavuserif_10.svg
mathtext_dejavuserif_11.pdf
mathtext_dejavuserif_11.png
mathtext_dejavuserif_11.svg
mathtext_dejavuserif_12.pdf
mathtext_dejavuserif_12.png
mathtext_dejavuserif_12.svg
mathtext_dejavuserif_13.pdf
mathtext_dejavuserif_13.png
mathtext_dejavuserif_13.svg
mathtext_dejavuserif_14.pdf
mathtext_dejavuserif_14.png
mathtext_dejavuserif_14.svg
mathtext_dejavuserif_15.pdf
mathtext_dejavuserif_15.png
mathtext_dejavuserif_15.svg
mathtext_dejavuserif_16.pdf
mathtext_dejavuserif_16.png
mathtext_dejavuserif_16.svg
mathtext_dejavuserif_17.pdf
mathtext_dejavuserif_17.png
mathtext_dejavuserif_17.svg
mathtext_dejavuserif_18.pdf
mathtext_dejavuserif_18.png
mathtext_dejavuserif_18.svg
mathtext_dejavuserif_19.pdf
mathtext_dejavuserif_19.png
mathtext_dejavuserif_19.svg
mathtext_dejavuserif_20.pdf
mathtext_dejavuserif_20.png
mathtext_dejavuserif_20.svg
mathtext_dejavuserif_21.pdf
mathtext_dejavuserif_21.png
mathtext_dejavuserif_21.svg
mathtext_dejavuserif_22.pdf
mathtext_dejavuserif_22.png
mathtext_dejavuserif_22.svg
mathtext_dejavuserif_23.pdf
mathtext_dejavuserif_23.png
mathtext_dejavuserif_23.svg
mathtext_dejavuserif_24.pdf
mathtext_dejavuserif_24.png
mathtext_dejavuserif_24.svg
mathtext_dejavuserif_25.pdf
mathtext_dejavuserif_25.png
mathtext_dejavuserif_25.svg
mathtext_dejavuserif_26.pdf
mathtext_dejavuserif_26.png
mathtext_dejavuserif_26.svg
mathtext_dejavuserif_27.pdf
mathtext_dejavuserif_27.png
mathtext_dejavuserif_27.svg
mathtext_dejavuserif_28.pdf
mathtext_dejavuserif_28.png
mathtext_dejavuserif_28.svg
mathtext_dejavuserif_29.pdf
mathtext_dejavuserif_29.png
mathtext_dejavuserif_29.svg
mathtext_dejavuserif_31.pdf
mathtext_dejavuserif_31.png
mathtext_dejavuserif_31.svg
mathtext_dejavuserif_32.pdf
mathtext_dejavuserif_32.png
mathtext_dejavuserif_32.svg
mathtext_dejavuserif_33.pdf
mathtext_dejavuserif_33.png
mathtext_dejavuserif_33.svg
mathtext_dejavuserif_34.pdf
mathtext_dejavuserif_34.png
mathtext_dejavuserif_34.svg
mathtext_dejavuserif_35.pdf
mathtext_dejavuserif_35.png
mathtext_dejavuserif_35.svg
mathtext_dejavuserif_36.pdf
mathtext_dejavuserif_36.png
mathtext_dejavuserif_36.svg
mathtext_dejavuserif_37.pdf
mathtext_dejavuserif_37.png
mathtext_dejavuserif_37.svg
mathtext_dejavuserif_38.pdf
mathtext_dejavuserif_38.png
mathtext_dejavuserif_38.svg
mathtext_dejavuserif_39.pdf
mathtext_dejavuserif_39.png
mathtext_dejavuserif_39.svg
mathtext_dejavuserif_40.pdf
mathtext_dejavuserif_40.png
mathtext_dejavuserif_40.svg
mathtext_dejavuserif_41.pdf
mathtext_dejavuserif_41.png
mathtext_dejavuserif_41.svg
mathtext_dejavuserif_42.pdf
mathtext_dejavuserif_42.png
mathtext_dejavuserif_42.svg
mathtext_dejavuserif_43.pdf
mathtext_dejavuserif_43.png
mathtext_dejavuserif_43.svg
mathtext_dejavuserif_44.pdf
mathtext_dejavuserif_44.png
mathtext_dejavuserif_44.svg
mathtext_dejavuserif_45.pdf
mathtext_dejavuserif_45.png
mathtext_dejavuserif_45.svg
mathtext_dejavuserif_46.pdf
mathtext_dejavuserif_46.png
mathtext_dejavuserif_46.svg
mathtext_dejavuserif_47.pdf
mathtext_dejavuserif_47.png
mathtext_dejavuserif_47.svg
mathtext_dejavuserif_48.pdf
mathtext_dejavuserif_48.png
mathtext_dejavuserif_48.svg
mathtext_dejavuserif_49.pdf
mathtext_dejavuserif_49.png
mathtext_dejavuserif_49.svg
mathtext_dejavuserif_50.pdf
mathtext_dejavuserif_50.png
mathtext_dejavuserif_50.svg
mathtext_dejavuserif_51.pdf
mathtext_dejavuserif_51.png
mathtext_dejavuserif_51.svg
mathtext_dejavuserif_52.pdf
mathtext_dejavuserif_52.png
mathtext_dejavuserif_52.svg
mathtext_dejavuserif_53.pdf
mathtext_dejavuserif_53.png
mathtext_dejavuserif_53.svg
mathtext_dejavuserif_54.pdf
mathtext_dejavuserif_54.png
mathtext_dejavuserif_54.svg
mathtext_dejavuserif_55.pdf
mathtext_dejavuserif_55.png
mathtext_dejavuserif_55.svg
mathtext_dejavuserif_56.pdf
mathtext_dejavuserif_56.png
mathtext_dejavuserif_56.svg
mathtext_dejavuserif_57.pdf
mathtext_dejavuserif_57.png
mathtext_dejavuserif_57.svg
mathtext_dejavuserif_58.pdf
mathtext_dejavuserif_58.png
mathtext_dejavuserif_58.svg
mathtext_dejavuserif_59.pdf
mathtext_dejavuserif_59.png
mathtext_dejavuserif_59.svg
mathtext_dejavuserif_60.pdf
mathtext_dejavuserif_60.png
mathtext_dejavuserif_60.svg
mathtext_dejavuserif_61.pdf
mathtext_dejavuserif_61.png
mathtext_dejavuserif_61.svg
mathtext_dejavuserif_62.pdf
mathtext_dejavuserif_62.png
mathtext_dejavuserif_62.svg
mathtext_dejavuserif_63.pdf
mathtext_dejavuserif_63.png
mathtext_dejavuserif_63.svg
mathtext_dejavuserif_64.pdf
mathtext_dejavuserif_64.png
mathtext_dejavuserif_64.svg
mathtext_dejavuserif_65.pdf
mathtext_dejavuserif_65.png
mathtext_dejavuserif_65.svg
mathtext_dejavuserif_67.pdf
mathtext_dejavuserif_67.png
mathtext_dejavuserif_67.svg
mathtext_dejavuserif_68.pdf
mathtext_dejavuserif_68.png
mathtext_dejavuserif_68.svg
mathtext_dejavuserif_69.pdf
mathtext_dejavuserif_69.png
mathtext_dejavuserif_69.svg
mathtext_dejavuserif_70.pdf
mathtext_dejavuserif_70.png
mathtext_dejavuserif_70.svg
mathtext_dejavuserif_71.pdf
mathtext_dejavuserif_71.png
mathtext_dejavuserif_71.svg
mathtext_dejavuserif_72.pdf
mathtext_dejavuserif_72.png
mathtext_dejavuserif_72.svg
mathtext_dejavuserif_73.pdf
mathtext_dejavuserif_73.png
mathtext_dejavuserif_73.svg
mathtext_dejavuserif_74.pdf
mathtext_dejavuserif_74.png
mathtext_dejavuserif_74.svg
mathtext_dejavuserif_75.pdf
mathtext_dejavuserif_75.png
mathtext_dejavuserif_75.svg
mathtext_dejavuserif_76.pdf
mathtext_dejavuserif_76.png
mathtext_dejavuserif_76.svg
mathtext_dejavuserif_78.pdf
mathtext_dejavuserif_78.png
mathtext_dejavuserif_78.svg
mathtext_dejavuserif_79.pdf
mathtext_dejavuserif_79.png
mathtext_dejavuserif_79.svg
mathtext_dejavuserif_80.pdf
mathtext_dejavuserif_80.png
mathtext_dejavuserif_80.svg
mathtext_dejavuserif_81.pdf
mathtext_dejavuserif_81.png
mathtext_dejavuserif_81.svg
mathtext_dejavuserif_82.pdf
mathtext_dejavuserif_82.png
mathtext_dejavuserif_82.svg
mathtext_stix_00.pdf
mathtext_stix_00.png
mathtext_stix_00.svg
mathtext_stix_01.pdf
mathtext_stix_01.png
mathtext_stix_01.svg
mathtext_stix_02.pdf
mathtext_stix_02.png
mathtext_stix_02.svg
mathtext_stix_03.pdf
mathtext_stix_03.png
mathtext_stix_03.svg
mathtext_stix_04.pdf
mathtext_stix_04.png
mathtext_stix_04.svg
mathtext_stix_05.pdf
mathtext_stix_05.png
mathtext_stix_05.svg
mathtext_stix_06.pdf
mathtext_stix_06.png
mathtext_stix_06.svg
mathtext_stix_07.pdf
mathtext_stix_07.png
mathtext_stix_07.svg
mathtext_stix_08.pdf
mathtext_stix_08.png
mathtext_stix_08.svg
mathtext_stix_09.pdf
mathtext_stix_09.png
mathtext_stix_09.svg
mathtext_stix_10.pdf
mathtext_stix_10.png
mathtext_stix_10.svg
mathtext_stix_11.pdf
mathtext_stix_11.png
mathtext_stix_11.svg
mathtext_stix_12.pdf
mathtext_stix_12.png
mathtext_stix_12.svg
mathtext_stix_13.pdf
mathtext_stix_13.png
mathtext_stix_13.svg
mathtext_stix_14.pdf
mathtext_stix_14.png
mathtext_stix_14.svg
mathtext_stix_15.pdf
mathtext_stix_15.png
mathtext_stix_15.svg
mathtext_stix_16.pdf
mathtext_stix_16.png
mathtext_stix_16.svg
mathtext_stix_17.pdf
mathtext_stix_17.png
mathtext_stix_17.svg
mathtext_stix_18.pdf
mathtext_stix_18.png
mathtext_stix_18.svg
mathtext_stix_19.pdf
mathtext_stix_19.png
mathtext_stix_19.svg
mathtext_stix_20.pdf
mathtext_stix_20.png
mathtext_stix_20.svg
mathtext_stix_21.pdf
mathtext_stix_21.png
mathtext_stix_21.svg
mathtext_stix_22.pdf
mathtext_stix_22.png
mathtext_stix_22.svg
mathtext_stix_23.pdf
mathtext_stix_23.png
mathtext_stix_23.svg
mathtext_stix_24.pdf
mathtext_stix_24.png
mathtext_stix_24.svg
mathtext_stix_25.pdf
mathtext_stix_25.png
mathtext_stix_25.svg
mathtext_stix_26.pdf
mathtext_stix_26.png
mathtext_stix_26.svg
mathtext_stix_27.pdf
mathtext_stix_27.png
mathtext_stix_27.svg
mathtext_stix_28.pdf
mathtext_stix_28.png
mathtext_stix_28.svg
mathtext_stix_29.pdf
mathtext_stix_29.png
mathtext_stix_29.svg
mathtext_stix_31.pdf
mathtext_stix_31.png
mathtext_stix_31.svg
mathtext_stix_32.pdf
mathtext_stix_32.png
mathtext_stix_32.svg
mathtext_stix_33.pdf
mathtext_stix_33.png
mathtext_stix_33.svg
mathtext_stix_34.pdf
mathtext_stix_34.png
mathtext_stix_34.svg
mathtext_stix_35.pdf
mathtext_stix_35.png
mathtext_stix_35.svg
mathtext_stix_36.pdf
mathtext_stix_36.png
mathtext_stix_36.svg
mathtext_stix_37.pdf
mathtext_stix_37.png
mathtext_stix_37.svg
mathtext_stix_38.pdf
mathtext_stix_38.png
mathtext_stix_38.svg
mathtext_stix_39.pdf
mathtext_stix_39.png
mathtext_stix_39.svg
mathtext_stix_40.pdf
mathtext_stix_40.png
mathtext_stix_40.svg
mathtext_stix_41.pdf
mathtext_stix_41.png
mathtext_stix_41.svg
mathtext_stix_42.pdf
mathtext_stix_42.png
mathtext_stix_42.svg
mathtext_stix_43.pdf
mathtext_stix_43.png
mathtext_stix_43.svg
mathtext_stix_44.pdf
mathtext_stix_44.png
mathtext_stix_44.svg
mathtext_stix_45.pdf
mathtext_stix_45.png
mathtext_stix_45.svg
mathtext_stix_46.pdf
mathtext_stix_46.png
mathtext_stix_46.svg
mathtext_stix_47.pdf
mathtext_stix_47.png
mathtext_stix_47.svg
mathtext_stix_48.pdf
mathtext_stix_48.png
mathtext_stix_48.svg
mathtext_stix_49.pdf
mathtext_stix_49.png
mathtext_stix_49.svg
mathtext_stix_50.pdf
mathtext_stix_50.png
mathtext_stix_50.svg
mathtext_stix_51.pdf
mathtext_stix_51.png
mathtext_stix_51.svg
mathtext_stix_52.pdf
mathtext_stix_52.png
mathtext_stix_52.svg
mathtext_stix_53.pdf
mathtext_stix_53.png
mathtext_stix_53.svg
mathtext_stix_54.pdf
mathtext_stix_54.png
mathtext_stix_54.svg
mathtext_stix_55.pdf
mathtext_stix_55.png
mathtext_stix_55.svg
mathtext_stix_56.pdf
mathtext_stix_56.png
mathtext_stix_56.svg
mathtext_stix_57.pdf
mathtext_stix_57.png
mathtext_stix_57.svg
mathtext_stix_58.pdf
mathtext_stix_58.png
mathtext_stix_58.svg
mathtext_stix_59.pdf
mathtext_stix_59.png
mathtext_stix_59.svg
mathtext_stix_60.pdf
mathtext_stix_60.png
mathtext_stix_60.svg
mathtext_stix_61.pdf
mathtext_stix_61.png
mathtext_stix_61.svg
mathtext_stix_62.pdf
mathtext_stix_62.png
mathtext_stix_62.svg
mathtext_stix_63.pdf
mathtext_stix_63.png
mathtext_stix_63.svg
mathtext_stix_64.pdf
mathtext_stix_64.png
mathtext_stix_64.svg
mathtext_stix_65.pdf
mathtext_stix_65.png
mathtext_stix_65.svg
mathtext_stix_67.pdf
mathtext_stix_67.png
mathtext_stix_67.svg
mathtext_stix_68.pdf
mathtext_stix_68.png
mathtext_stix_68.svg
mathtext_stix_69.pdf
mathtext_stix_69.png
mathtext_stix_69.svg
mathtext_stix_70.pdf
mathtext_stix_70.png
mathtext_stix_70.svg
mathtext_stix_71.pdf
mathtext_stix_71.png
mathtext_stix_71.svg
mathtext_stix_72.pdf
mathtext_stix_72.png
mathtext_stix_72.svg
mathtext_stix_73.pdf
mathtext_stix_73.png
mathtext_stix_73.svg
mathtext_stix_74.pdf
mathtext_stix_74.png
mathtext_stix_74.svg
mathtext_stix_75.pdf
mathtext_stix_75.png
mathtext_stix_75.svg
mathtext_stix_76.pdf
mathtext_stix_76.png
mathtext_stix_76.svg
mathtext_stix_78.pdf
mathtext_stix_78.png
mathtext_stix_78.svg
mathtext_stix_79.pdf
mathtext_stix_79.png
mathtext_stix_79.svg
mathtext_stix_80.pdf
mathtext_stix_80.png
mathtext_stix_80.svg
mathtext_stix_81.pdf
mathtext_stix_81.png
mathtext_stix_81.svg
mathtext_stix_82.pdf
mathtext_stix_82.png
mathtext_stix_82.svg
mathtext_stixsans_00.pdf
mathtext_stixsans_00.png
mathtext_stixsans_00.svg
mathtext_stixsans_01.pdf
mathtext_stixsans_01.png
mathtext_stixsans_01.svg
mathtext_stixsans_02.pdf
mathtext_stixsans_02.png
mathtext_stixsans_02.svg
mathtext_stixsans_03.pdf
mathtext_stixsans_03.png
mathtext_stixsans_03.svg
mathtext_stixsans_04.pdf
mathtext_stixsans_04.png
mathtext_stixsans_04.svg
mathtext_stixsans_05.pdf
mathtext_stixsans_05.png
mathtext_stixsans_05.svg
mathtext_stixsans_06.pdf
mathtext_stixsans_06.png
mathtext_stixsans_06.svg
mathtext_stixsans_07.pdf
mathtext_stixsans_07.png
mathtext_stixsans_07.svg
mathtext_stixsans_08.pdf
mathtext_stixsans_08.png
mathtext_stixsans_08.svg
mathtext_stixsans_09.pdf
mathtext_stixsans_09.png
mathtext_stixsans_09.svg
mathtext_stixsans_10.pdf
mathtext_stixsans_10.png
mathtext_stixsans_10.svg
mathtext_stixsans_11.pdf
mathtext_stixsans_11.png
mathtext_stixsans_11.svg
mathtext_stixsans_12.pdf
mathtext_stixsans_12.png
mathtext_stixsans_12.svg
mathtext_stixsans_13.pdf
mathtext_stixsans_13.png
mathtext_stixsans_13.svg
mathtext_stixsans_14.pdf
mathtext_stixsans_14.png
mathtext_stixsans_14.svg
mathtext_stixsans_15.pdf
mathtext_stixsans_15.png
mathtext_stixsans_15.svg
mathtext_stixsans_16.pdf
mathtext_stixsans_16.png
mathtext_stixsans_16.svg
mathtext_stixsans_17.pdf
mathtext_stixsans_17.png
mathtext_stixsans_17.svg
mathtext_stixsans_18.pdf
mathtext_stixsans_18.png
mathtext_stixsans_18.svg
mathtext_stixsans_19.pdf
mathtext_stixsans_19.png
mathtext_stixsans_19.svg
mathtext_stixsans_20.pdf
mathtext_stixsans_20.png
mathtext_stixsans_20.svg
mathtext_stixsans_21.pdf
mathtext_stixsans_21.png
mathtext_stixsans_21.svg
mathtext_stixsans_22.pdf
mathtext_stixsans_22.png
mathtext_stixsans_22.svg
mathtext_stixsans_23.pdf
mathtext_stixsans_23.png
mathtext_stixsans_23.svg
mathtext_stixsans_24.pdf
mathtext_stixsans_24.png
mathtext_stixsans_24.svg
mathtext_stixsans_25.pdf
mathtext_stixsans_25.png
mathtext_stixsans_25.svg
mathtext_stixsans_26.pdf
mathtext_stixsans_26.png
mathtext_stixsans_26.svg
mathtext_stixsans_27.pdf
mathtext_stixsans_27.png
mathtext_stixsans_27.svg
mathtext_stixsans_28.pdf
mathtext_stixsans_28.png
mathtext_stixsans_28.svg
mathtext_stixsans_29.pdf
mathtext_stixsans_29.png
mathtext_stixsans_29.svg
mathtext_stixsans_31.pdf
mathtext_stixsans_31.png
mathtext_stixsans_31.svg
mathtext_stixsans_32.pdf
mathtext_stixsans_32.png
mathtext_stixsans_32.svg
mathtext_stixsans_33.pdf
mathtext_stixsans_33.png
mathtext_stixsans_33.svg
mathtext_stixsans_34.pdf
mathtext_stixsans_34.png
mathtext_stixsans_34.svg
mathtext_stixsans_35.pdf
mathtext_stixsans_35.png
mathtext_stixsans_35.svg
mathtext_stixsans_36.pdf
mathtext_stixsans_36.png
mathtext_stixsans_36.svg
mathtext_stixsans_37.pdf
mathtext_stixsans_37.png
mathtext_stixsans_37.svg
mathtext_stixsans_38.pdf
mathtext_stixsans_38.png
mathtext_stixsans_38.svg
mathtext_stixsans_39.pdf
mathtext_stixsans_39.png
mathtext_stixsans_39.svg
mathtext_stixsans_40.pdf
mathtext_stixsans_40.png
mathtext_stixsans_40.svg
mathtext_stixsans_41.pdf
mathtext_stixsans_41.png
mathtext_stixsans_41.svg
mathtext_stixsans_42.pdf
mathtext_stixsans_42.png
mathtext_stixsans_42.svg
mathtext_stixsans_43.pdf
mathtext_stixsans_43.png
mathtext_stixsans_43.svg
mathtext_stixsans_44.pdf
mathtext_stixsans_44.png
mathtext_stixsans_44.svg
mathtext_stixsans_45.pdf
mathtext_stixsans_45.png
mathtext_stixsans_45.svg
mathtext_stixsans_46.pdf
mathtext_stixsans_46.png
mathtext_stixsans_46.svg
mathtext_stixsans_47.pdf
mathtext_stixsans_47.png
mathtext_stixsans_47.svg
mathtext_stixsans_48.pdf
mathtext_stixsans_48.png
mathtext_stixsans_48.svg
mathtext_stixsans_49.pdf
mathtext_stixsans_49.png
mathtext_stixsans_49.svg
mathtext_stixsans_50.pdf
mathtext_stixsans_50.png
mathtext_stixsans_50.svg
mathtext_stixsans_51.pdf
mathtext_stixsans_51.png
mathtext_stixsans_51.svg
mathtext_stixsans_52.pdf
mathtext_stixsans_52.png
mathtext_stixsans_52.svg
mathtext_stixsans_53.pdf
mathtext_stixsans_53.png
mathtext_stixsans_53.svg
mathtext_stixsans_54.pdf
mathtext_stixsans_54.png
mathtext_stixsans_54.svg
mathtext_stixsans_55.pdf
mathtext_stixsans_55.png
mathtext_stixsans_55.svg
mathtext_stixsans_56.pdf
mathtext_stixsans_56.png
mathtext_stixsans_56.svg
mathtext_stixsans_57.pdf
mathtext_stixsans_57.png
mathtext_stixsans_57.svg
mathtext_stixsans_58.pdf
mathtext_stixsans_58.png
mathtext_stixsans_58.svg
mathtext_stixsans_59.pdf
mathtext_stixsans_59.png
mathtext_stixsans_59.svg
mathtext_stixsans_60.pdf
mathtext_stixsans_60.png
mathtext_stixsans_60.svg
mathtext_stixsans_61.pdf
mathtext_stixsans_61.png
mathtext_stixsans_61.svg
mathtext_stixsans_62.pdf
mathtext_stixsans_62.png
mathtext_stixsans_62.svg
mathtext_stixsans_63.pdf
mathtext_stixsans_63.png
mathtext_stixsans_63.svg
mathtext_stixsans_64.pdf
mathtext_stixsans_64.png
mathtext_stixsans_64.svg
mathtext_stixsans_65.pdf
mathtext_stixsans_65.png
mathtext_stixsans_65.svg
mathtext_stixsans_67.pdf
mathtext_stixsans_67.png
mathtext_stixsans_67.svg
mathtext_stixsans_68.pdf
mathtext_stixsans_68.png
mathtext_stixsans_68.svg
mathtext_stixsans_69.pdf
mathtext_stixsans_69.png
mathtext_stixsans_69.svg
mathtext_stixsans_70.pdf
mathtext_stixsans_70.png
mathtext_stixsans_70.svg
mathtext_stixsans_71.pdf
mathtext_stixsans_71.png
mathtext_stixsans_71.svg
mathtext_stixsans_72.pdf
mathtext_stixsans_72.png
mathtext_stixsans_72.svg
mathtext_stixsans_73.pdf
mathtext_stixsans_73.png
mathtext_stixsans_73.svg
mathtext_stixsans_74.pdf
mathtext_stixsans_74.png
mathtext_stixsans_74.svg
mathtext_stixsans_75.pdf
mathtext_stixsans_75.png
mathtext_stixsans_75.svg
mathtext_stixsans_76.pdf
mathtext_stixsans_76.png
mathtext_stixsans_76.svg
mathtext_stixsans_78.pdf
mathtext_stixsans_78.png
mathtext_stixsans_78.svg
mathtext_stixsans_79.pdf
mathtext_stixsans_79.png
mathtext_stixsans_79.svg
mathtext_stixsans_80.pdf
mathtext_stixsans_80.png
mathtext_stixsans_80.svg
mathtext_stixsans_81.pdf
mathtext_stixsans_81.png
mathtext_stixsans_81.svg
mathtext_stixsans_82.pdf
mathtext_stixsans_82.png
mathtext_stixsans_82.svg

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/tests/baseline_images/test_offsetbox:
anchoredtext_align.png
offsetbox_clipping.pdf
offsetbox_clipping.png
offsetbox_clipping.svg
paddedbox.png

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/tests/baseline_images/test_patches:
all_quadrants_arcs.svg
annulus.png
autoscale_arc.png
autoscale_arc.svg
clip_to_bbox.pdf
clip_to_bbox.png
clip_to_bbox.svg
connection_patch.png
large_arc.svg
multi_color_hatch.pdf
multi_color_hatch.png
multi_color_hatch.svg
patch_alpha_coloring.pdf
patch_alpha_coloring.png
patch_alpha_coloring.svg
patch_alpha_override.pdf
patch_alpha_override.png
patch_alpha_override.svg
patch_custom_linestyle.pdf
patch_custom_linestyle.png
patch_custom_linestyle.svg
units_rectangle.png
wedge_range.pdf
wedge_range.png
wedge_range.svg

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/tests/baseline_images/test_path:
arrow_contains_point.png
marker_paths.pdf
nan_path.eps
nan_path.pdf
nan_path.png
nan_path.svg
path_clipping.svg
semi_log_with_zero.png
xkcd.png
xkcd_marker.png

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/tests/baseline_images/test_patheffects:
collection.pdf
collection.png
collection.svg
patheffect1.pdf
patheffect1.png
patheffect1.svg
patheffect2.pdf
patheffect2.png
patheffect2.svg
patheffect3.pdf
patheffect3.png
patheffect3.svg
spaces_and_newlines.png
stroked_text.png
tickedstroke.png

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/tests/baseline_images/test_png:
pngsuite.png
uint16.png

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/tests/baseline_images/test_polar:
polar_alignment.png
polar_axes.pdf
polar_axes.png
polar_axes.svg
polar_coords.pdf
polar_coords.png
polar_coords.svg
polar_invertedylim.png
polar_invertedylim_rorigin.png
polar_log.png
polar_negative_rmin.pdf
polar_negative_rmin.png
polar_negative_rmin.svg
polar_rlabel_position.pdf
polar_rlabel_position.png
polar_rlabel_position.svg
polar_rmin.pdf
polar_rmin.png
polar_rmin.svg
polar_rorigin.pdf
polar_rorigin.png
polar_rorigin.svg
polar_theta_position.pdf
polar_theta_position.png
polar_theta_position.svg
polar_theta_wedge.pdf
polar_theta_wedge.png
polar_theta_wedge.svg

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/tests/baseline_images/test_quiver:
barbs_pivot_test_image.png
barbs_test_flip.png
barbs_test_image.png
quiver_animated_test_image.png
quiver_key_pivot.png
quiver_key_xy.png
quiver_single_test_image.png
quiver_with_key_test_image.png
quiver_xy.png

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/tests/baseline_images/test_scale:
function_scales.png
logit_scales.png
logscale_mask.png
logscale_nonpos_values.png

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/tests/baseline_images/test_simplification:
clipper_edge.pdf
clipper_edge.png
clipper_edge.svg
clipping.pdf
clipping.png
clipping.svg
clipping_diamond.pdf
clipping_diamond.png
clipping_diamond.svg
clipping_with_nans.pdf
clipping_with_nans.png
clipping_with_nans.svg
fft_peaks.pdf
fft_peaks.png
fft_peaks.svg
hatch_simplify.pdf
hatch_simplify.png
hatch_simplify.svg
overflow.pdf
overflow.png
overflow.svg
para_equal_perp.pdf
para_equal_perp.png
para_equal_perp.svg
simplify_curve.pdf
simplify_curve.png
simplify_curve.svg

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/tests/baseline_images/test_skew:
skew_axes.pdf
skew_axes.png
skew_axes.svg
skew_rects.pdf
skew_rects.png
skew_rects.svg

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/tests/baseline_images/test_spines:
black_axes.pdf
black_axes.png
black_axes.svg
spines_axes_positions.pdf
spines_axes_positions.png
spines_axes_positions.svg
spines_capstyle.pdf
spines_capstyle.png
spines_capstyle.svg
spines_data_positions.pdf
spines_data_positions.png
spines_data_positions.svg

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/tests/baseline_images/test_streamplot:
streamplot_colormap.pdf
streamplot_colormap.png
streamplot_colormap.svg
streamplot_direction.png
streamplot_linewidth.pdf
streamplot_linewidth.png
streamplot_linewidth.svg
streamplot_masks_and_nans.pdf
streamplot_masks_and_nans.png
streamplot_masks_and_nans.svg
streamplot_maxlength.png
streamplot_maxlength_no_broken.png
streamplot_startpoints.png

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/tests/baseline_images/test_subplots:
subplots_offset_text.pdf
subplots_offset_text.png
subplots_offset_text.svg

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/tests/baseline_images/test_table:
table_auto_column.png
table_cell_manipulation.png
table_labels.png
table_zorder.png

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/tests/baseline_images/test_text:
agg_text_clip.png
annotation_negative_ax_coords.png
annotation_negative_fig_coords.png
antialiased.png
axes_titles.png
basictext_wrap.png
font_scaling.pdf
font_styles.pdf
font_styles.png
font_styles.svg
fonttext_wrap.png
large_subscript_title.png
multiline.pdf
multiline.png
multiline.svg
multiline2.pdf
multiline2.png
multiline2.svg
text_alignment.pdf
text_alignment.png
text_alignment.svg
text_as_path_opacity.svg
text_as_text_opacity.svg
text_bboxclip.pdf
text_bboxclip.png
text_bboxclip.svg
text_contains.png
text_pdf_chars_beyond_bmp.pdf
text_pdf_font42_kerning.pdf
text_pdf_kerning.pdf
titles.pdf
titles.png
titles.svg

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/tests/baseline_images/test_tightlayout:
tight_layout1.pdf
tight_layout1.png
tight_layout1.svg
tight_layout2.pdf
tight_layout2.png
tight_layout2.svg
tight_layout3.pdf
tight_layout3.png
tight_layout3.svg
tight_layout4.pdf
tight_layout4.png
tight_layout4.svg
tight_layout5.pdf
tight_layout5.png
tight_layout5.svg
tight_layout6.pdf
tight_layout6.png
tight_layout6.svg
tight_layout7.pdf
tight_layout7.png
tight_layout7.svg
tight_layout8.pdf
tight_layout8.png
tight_layout8.svg
tight_layout9.pdf
tight_layout9.png
tight_layout9.svg
tight_layout_offsetboxes1.pdf
tight_layout_offsetboxes1.png
tight_layout_offsetboxes1.svg
tight_layout_offsetboxes2.pdf
tight_layout_offsetboxes2.png
tight_layout_offsetboxes2.svg

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/tests/baseline_images/test_transforms:
pre_transform_data.pdf
pre_transform_data.png
pre_transform_data.svg

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/tests/baseline_images/test_triangulation:
tri_smooth_contouring.png
tri_smooth_gradient.png
tripcolor1.png

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/tests/baseline_images/test_ttconv:
truetype-conversion.pdf

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/tests/baseline_images/test_units:
jpl_bar_units.png
jpl_barh_units.png
plot_masked_units.png
plot_pint.png

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/tests/baseline_images/test_usetex:
eqnarray.png
test_usetex.pdf
test_usetex.png

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/tests/baseline_images/test_widgets:
check_radio_buttons.png

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/tests/tinypages:
README.md
_static
conf.py
included_plot_21.rst
index.rst
range4.py
range6.py
some_plots.rst

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/tests/tinypages/_static:
README.txt

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/tri:
__init__.py
_triangulation.py
_tricontour.py
_trifinder.py
_triinterpolate.py
_tripcolor.py
_triplot.py
_trirefine.py
_tritools.py
triangulation.py
tricontour.py
trifinder.py
triinterpolate.py
tripcolor.py
triplot.py
trirefine.py
tritools.py

/workspace/matplotlib__matplotlib__3.7/lib/matplotlib.egg-info:
PKG-INFO
SOURCES.txt
dependency_links.txt
namespace_packages.txt
requires.txt
top_level.txt

/workspace/matplotlib__matplotlib__3.7/lib/mpl_toolkits:
__init__.py
axes_grid1
axisartist
mplot3d

/workspace/matplotlib__matplotlib__3.7/lib/mpl_toolkits/axes_grid1:
__init__.py
anchored_artists.py
axes_divider.py
axes_grid.py
axes_rgb.py
axes_size.py
inset_locator.py
mpl_axes.py
parasite_axes.py
tests

/workspace/matplotlib__matplotlib__3.7/lib/mpl_toolkits/axes_grid1/tests:
__init__.py
baseline_images
conftest.py
test_axes_grid1.py

/workspace/matplotlib__matplotlib__3.7/lib/mpl_toolkits/axes_grid1/tests/baseline_images:
test_axes_grid1

/workspace/matplotlib__matplotlib__3.7/lib/mpl_toolkits/axes_grid1/tests/baseline_images/test_axes_grid1:
anchored_direction_arrows.png
anchored_direction_arrows_many_args.png
anchored_locator_base_call.png
fill_facecolor.png
image_grid.png
image_grid_each_left_label_mode_all.png
image_grid_single_bottom_label_mode_1.png
imagegrid_cbar_mode.png
inset_axes.png
inset_locator.png
insetposition.png
inverted_zoomed_axes.png
rgb_axes.png
twin_axes_empty_and_removed.png
zoomed_axes.png

/workspace/matplotlib__matplotlib__3.7/lib/mpl_toolkits/axisartist:
__init__.py
angle_helper.py
axes_divider.py
axes_grid.py
axes_rgb.py
axis_artist.py
axisline_style.py
axislines.py
floating_axes.py
grid_finder.py
grid_helper_curvelinear.py
parasite_axes.py
tests

/workspace/matplotlib__matplotlib__3.7/lib/mpl_toolkits/axisartist/tests:
__init__.py
baseline_images
conftest.py
test_angle_helper.py
test_axis_artist.py
test_axislines.py
test_floating_axes.py
test_grid_finder.py
test_grid_helper_curvelinear.py

/workspace/matplotlib__matplotlib__3.7/lib/mpl_toolkits/axisartist/tests/baseline_images:
test_axis_artist
test_axislines
test_floating_axes
test_grid_helper_curvelinear

/workspace/matplotlib__matplotlib__3.7/lib/mpl_toolkits/axisartist/tests/baseline_images/test_axis_artist:
axis_artist.png
axis_artist_labelbase.png
axis_artist_ticklabels.png
axis_artist_ticks.png

/workspace/matplotlib__matplotlib__3.7/lib/mpl_toolkits/axisartist/tests/baseline_images/test_axislines:
ParasiteAxesAuxTrans_meshplot.png
Subplot.png
SubplotZero.png
axisline_style.png
axisline_style_size_color.png
axisline_style_tight.png
subplotzero_ylabel.png

/workspace/matplotlib__matplotlib__3.7/lib/mpl_toolkits/axisartist/tests/baseline_images/test_floating_axes:
curvelinear3.png
curvelinear4.png

/workspace/matplotlib__matplotlib__3.7/lib/mpl_toolkits/axisartist/tests/baseline_images/test_grid_helper_curvelinear:
axis_direction.png
custom_transform.png
polar_box.png

/workspace/matplotlib__matplotlib__3.7/lib/mpl_toolkits/mplot3d:
__init__.py
art3d.py
axes3d.py
axis3d.py
proj3d.py
tests

/workspace/matplotlib__matplotlib__3.7/lib/mpl_toolkits/mplot3d/tests:
__init__.py
baseline_images
conftest.py
test_art3d.py
test_axes3d.py
test_legend3d.py

/workspace/matplotlib__matplotlib__3.7/lib/mpl_toolkits/mplot3d/tests/baseline_images:
test_axes3d
test_legend3d

/workspace/matplotlib__matplotlib__3.7/lib/mpl_toolkits/mplot3d/tests/baseline_images/test_axes3d:
add_collection3d_zs_array.png
add_collection3d_zs_scalar.png
arc_pathpatch.png
aspects.png
aspects_adjust_box.png
axes3d_cla.png
axes3d_focal_length.png
axes3d_isometric.png
axes3d_labelpad.png
axes3d_ortho.png
axes3d_primary_views.png
axes3d_rotated.png
bar3d.png
bar3d_notshaded.png
bar3d_shaded.png
computed_zorder.png
contour3d.png
contour3d_extend3d.png
contourf3d.png
contourf3d_fill.png
equal_box_aspect.png
errorbar3d.png
errorbar3d_errorevery.png
lines3d.png
minor_ticks.png
mixedsubplot.png
panecolor_rcparams.png
plot_3d_from_2d.png
poly3dcollection_alpha.png
poly3dcollection_closed.png
proj3d_axes_cube.png
proj3d_axes_cube_ortho.png
proj3d_lines_dists.png
quiver3d.png
quiver3d_masked.png
scatter3d.png
scatter3d_color.png
scatter3d_linewidth.png
scatter_spiral.png
stem3d.png
surface3d.png
surface3d_masked.png
surface3d_masked_strides.png
surface3d_shaded.png
text3d.png
tricontour.png
trisurf3d.png
trisurf3d_shaded.png
voxels-alpha.png
voxels-edge-style.png
voxels-named-colors.png
voxels-rgb-data.png
voxels-simple.png
voxels-xyz.png
wireframe3d.png
wireframe3dzerocstride.png
wireframe3dzerorstride.png

/workspace/matplotlib__matplotlib__3.7/lib/mpl_toolkits/mplot3d/tests/baseline_images/test_legend3d:
fancy.png
legend_bar.png
legend_plot.png

/workspace/matplotlib__matplotlib__3.7/requirements:
dev
doc
testing

/workspace/matplotlib__matplotlib__3.7/requirements/dev:
dev-requirements.txt

/workspace/matplotlib__matplotlib__3.7/requirements/doc:
doc-requirements.txt

/workspace/matplotlib__matplotlib__3.7/requirements/testing:
all.txt
extra.txt
flake8.txt
minver.txt

/workspace/matplotlib__matplotlib__3.7/src:
_backend_agg.cpp
_backend_agg.h
_backend_agg_basic_types.h
_backend_agg_wrapper.cpp
_c_internal_utils.c
_image_resample.h
_image_wrapper.cpp
_macosx.m
_path.h
_path_wrapper.cpp
_qhull_wrapper.cpp
_tkagg.cpp
_tkmini.h
_ttconv.cpp
agg_workaround.h
array.h
checkdep_freetype2.c
doc
ft2font.cpp
ft2font.h
ft2font_wrapper.cpp
mplutils.h
numpy_cpp.h
path_converters.h
py_adaptors.h
py_converters.cpp
py_converters.h
py_exceptions.h
tri

/workspace/matplotlib__matplotlib__3.7/src/doc:
segment_intersects_rectangle.svg

/workspace/matplotlib__matplotlib__3.7/src/tri:
_tri.cpp
_tri.h
_tri_wrapper.cpp

/workspace/matplotlib__matplotlib__3.7/tmp:
tmp5di5oepj.o
tmpfs_djlv4.o
tmpqdjerrdq.o

/workspace/matplotlib__matplotlib__3.7/tools:
README.txt
boilerplate.py
cache_zenodo_svg.py
create_DejaVuDisplay.sh
embed_js.py
gh_api.py
github_stats.py
make_icons.py
memleak.py
run_examples.py
subset.py
triage_tests.py
visualize_tests.py

[Select the relevant files and use repo map to get highlevel representation and structure of repo]


============================================================



ACTION:

THOUGHT: Let me first create a script to reproduce the error and confirm the issue. I'll create a file called `reproduce_pickle_error.py`:
CODE:
CODE = """
import matplotlib.pyplot as plt
import pickle

fig = plt.figure()
ax = fig.add_subplot(111)

time=[0,1,2,3,4]
speed=[40,43,45,47,48]

ax.plot(time,speed,label="speed")

leg=ax.legend()
leg.set_draggable(True) #pickling works after removing this line 

pickle.dumps(fig)
plt.show()
"""
create_file("reproduce_pickle_error.py", CODE)

============================================================



OBSERVATION:

[File reproduce_pickle_error.py created.]
[File: /workspace/reproduce_pickle_error.py (17 lines total after edit)]
1|
2|import matplotlib.pyplot as plt
3|import pickle
4|
5|fig = plt.figure()
6|ax = fig.add_subplot(111)
7|
8|time=[0,1,2,3,4]
9|speed=[40,43,45,47,48]
10|
11|ax.plot(time,speed,label="speed")
12|
13|leg=ax.legend()
14|leg.set_draggable(True) #pickling works after removing this line 
15|
16|pickle.dumps(fig)
17|plt.show()
[File updated. Please review the changes carefully and make sure they are correct (correct indentation, no duplicate or redundant lines etc). Edit the file again if necessary.]


============================================================



ACTION:

THOUGHT: Now let's run the script to reproduce and confirm the error:
COMMAND:
python reproduce_pickle_error.py

============================================================



OBSERVATION:

[Code executed successfully with no output]

============================================================



ACTION:

THOUGHT: Let me modify the script to catch and print the error, as the current script might be suppressing it:
CODE:
CODE = """
import matplotlib.pyplot as plt
import pickle

try:
    fig = plt.figure()
    ax = fig.add_subplot(111)

    time=[0,1,2,3,4]
    speed=[40,43,45,47,48]

    ax.plot(time,speed,label="speed")

    leg=ax.legend()
    leg.set_draggable(True)

    pickled_fig = pickle.dumps(fig)
    print("Successfully pickled figure")
except Exception as e:
    print(f"Error occurred: {str(e)}")

plt.show()
"""
create_file("reproduce_pickle_error.py", CODE)

============================================================



OBSERVATION:

[File reproduce_pickle_error.py already exists and File overwritten.]
[File: /workspace/reproduce_pickle_error.py (22 lines total after edit)]
1|
2|import matplotlib.pyplot as plt
3|import pickle
4|
5|try:
6|    fig = plt.figure()
7|    ax = fig.add_subplot(111)
8|
9|    time=[0,1,2,3,4]
10|    speed=[40,43,45,47,48]
11|
12|    ax.plot(time,speed,label="speed")
13|
14|    leg=ax.legend()
15|    leg.set_draggable(True)
16|
17|    pickled_fig = pickle.dumps(fig)
18|    print("Successfully pickled figure")
19|except Exception as e:
20|    print(f"Error occurred: {str(e)}")
21|
22|plt.show()
[File updated. Please review the changes carefully and make sure they are correct (correct indentation, no duplicate or redundant lines etc). Edit the file again if necessary.]


============================================================



ACTION:

THOUGHT: The script looks good. Let's run it to see the error message:
COMMAND:
python reproduce_pickle_error.py

============================================================



OBSERVATION:

Successfully pickled figure


============================================================



ACTION:

THOUGHT: Interesting - the error is not reproducing in our environment. Let me modify the script to be more thorough in testing and also check the backend being used:
CODE:
CODE = """
import matplotlib.pyplot as plt
import pickle
import matplotlib

print(f"Backend being used: {matplotlib.get_backend()}")

try:
    fig = plt.figure()
    ax = fig.add_subplot(111)

    time=[0,1,2,3,4]
    speed=[40,43,45,47,48]

    ax.plot(time,speed,label="speed")

    leg=ax.legend()
    leg.set_draggable(True)
    print("Legend made draggable")

    # Try to pickle
    pickled_fig = pickle.dumps(fig)
    print("Successfully pickled figure")

    # Try to unpickle to ensure complete pickling/unpickling works
    unpickled_fig = pickle.loads(pickled_fig)
    print("Successfully unpickled figure")

except Exception as e:
    print(f"Error occurred: {str(e)}")

plt.show()
"""
create_file("reproduce_pickle_error.py", CODE)

============================================================



OBSERVATION:

[File reproduce_pickle_error.py already exists and File overwritten.]
[File: /workspace/reproduce_pickle_error.py (32 lines total after edit)]
1|
2|import matplotlib.pyplot as plt
3|import pickle
4|import matplotlib
5|
6|print(f"Backend being used: {matplotlib.get_backend()}")
7|
8|try:
9|    fig = plt.figure()
10|    ax = fig.add_subplot(111)
11|
12|    time=[0,1,2,3,4]
13|    speed=[40,43,45,47,48]
14|
15|    ax.plot(time,speed,label="speed")
16|
17|    leg=ax.legend()
18|    leg.set_draggable(True)
19|    print("Legend made draggable")
20|
21|    # Try to pickle
22|    pickled_fig = pickle.dumps(fig)
23|    print("Successfully pickled figure")
24|
25|    # Try to unpickle to ensure complete pickling/unpickling works
26|    unpickled_fig = pickle.loads(pickled_fig)
27|    print("Successfully unpickled figure")
28|
29|except Exception as e:
30|    print(f"Error occurred: {str(e)}")
31|
32|plt.show()
[File updated. Please review the changes carefully and make sure they are correct (correct indentation, no duplicate or redundant lines etc). Edit the file again if necessary.]


============================================================



ACTION:

THOUGHT: Let's run the updated script to see the backend and test both pickling and unpickling:
COMMAND:
python reproduce_pickle_error.py

============================================================



OBSERVATION:

Backend being used: agg
Legend made draggable
Successfully pickled figure
Successfully unpickled figure


============================================================



ACTION:

THOUGHT: I notice that the error is not reproducing in our environment because we're using the 'agg' backend, while the bug report mentions 'QTAgg' backend specifically with the error: `TypeError: cannot pickle 'FigureCanvasQTAgg' object`.

Let me modify the script to force the QTAgg backend to reproduce the reported issue:
CODE:
CODE = """
import matplotlib
matplotlib.use('QTAgg')  # Force QTAgg backend

import matplotlib.pyplot as plt
import pickle

print(f"Backend being used: {matplotlib.get_backend()}")

try:
    fig = plt.figure()
    ax = fig.add_subplot(111)

    time=[0,1,2,3,4]
    speed=[40,43,45,47,48]

    ax.plot(time,speed,label="speed")

    leg=ax.legend()
    leg.set_draggable(True)
    print("Legend made draggable")

    # Try to pickle
    pickled_fig = pickle.dumps(fig)
    print("Successfully pickled figure")

    # Try to unpickle to ensure complete pickling/unpickling works
    unpickled_fig = pickle.loads(pickled_fig)
    print("Successfully unpickled figure")

except Exception as e:
    print(f"Error occurred: {str(e)}")

plt.show()
"""
create_file("reproduce_pickle_error.py", CODE)

============================================================



OBSERVATION:

[File reproduce_pickle_error.py already exists and File overwritten.]
[File: /workspace/reproduce_pickle_error.py (34 lines total after edit)]
1|
2|import matplotlib
3|matplotlib.use('QTAgg')  # Force QTAgg backend
4|
5|import matplotlib.pyplot as plt
6|import pickle
7|
8|print(f"Backend being used: {matplotlib.get_backend()}")
9|
10|try:
11|    fig = plt.figure()
12|    ax = fig.add_subplot(111)
13|
14|    time=[0,1,2,3,4]
15|    speed=[40,43,45,47,48]
16|
17|    ax.plot(time,speed,label="speed")
18|
19|    leg=ax.legend()
20|    leg.set_draggable(True)
21|    print("Legend made draggable")
22|
23|    # Try to pickle
24|    pickled_fig = pickle.dumps(fig)
25|    print("Successfully pickled figure")
26|
27|    # Try to unpickle to ensure complete pickling/unpickling works
28|    unpickled_fig = pickle.loads(pickled_fig)
29|    print("Successfully unpickled figure")
30|
31|except Exception as e:
32|    print(f"Error occurred: {str(e)}")
33|
34|plt.show()
[File updated. Please review the changes carefully and make sure they are correct (correct indentation, no duplicate or redundant lines etc). Edit the file again if necessary.]


============================================================



ACTION:

THOUGHT: Let's run the script with QTAgg backend:
COMMAND:
python reproduce_pickle_error.py

============================================================



OBSERVATION:

Backend being used: QtAgg
Error occurred: Cannot load backend 'QtAgg' which requires the 'qt' interactive framework, as 'headless' is currently running
Traceback (most recent call last):
  File "/workspace/reproduce_pickle_error.py", line 34, in <module>
    plt.show()
  File "/testbed/lib/matplotlib/pyplot.py", line 444, in show
    _warn_if_gui_out_of_main_thread()
  File "/testbed/lib/matplotlib/pyplot.py", line 360, in _warn_if_gui_out_of_main_thread
    if _get_required_interactive_framework(_get_backend_mod()):
                                           ^^^^^^^^^^^^^^^^^^
  File "/testbed/lib/matplotlib/pyplot.py", line 207, in _get_backend_mod
    switch_backend(rcParams._get("backend"))
  File "/testbed/lib/matplotlib/pyplot.py", line 278, in switch_backend
    raise ImportError(
ImportError: Cannot load backend 'QtAgg' which requires the 'qt' interactive framework, as 'headless' is currently running


============================================================



ACTION:

THOUGHT: I see the issue now. We're in a headless environment which doesn't support QT. Let me analyze the source code to understand where the pickling issue occurs with draggable legends.

Let's look at the legend-related code in matplotlib:
CODE:
open_file('/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/legend.py')

============================================================



OBSERVATION:

[File: /workspace/matplotlib__matplotlib__3.7/lib/matplotlib/legend.py (1355 lines total)]
1|"""
2|The legend module defines the Legend class, which is responsible for
3|drawing legends associated with axes and/or figures.
4|
5|.. important::
6|
7|    It is unlikely that you would ever create a Legend instance manually.
8|    Most users would normally create a legend via the `~.Axes.legend`
9|    function. For more details on legends there is also a :doc:`legend guide
10|    </tutorials/intermediate/legend_guide>`.
11|
12|The `Legend` class is a container of legend handles and legend texts.
13|
14|The legend handler map specifies how to create legend handles from artists
15|(lines, patches, etc.) in the axes or figures. Default legend handlers are
16|defined in the :mod:`~matplotlib.legend_handler` module. While not all artist
17|types are covered by the default legend handlers, custom legend handlers can be
18|defined to support arbitrary objects.
19|
20|See the :doc:`legend guide </tutorials/intermediate/legend_guide>` for more
21|information.
22|"""
23|
24|import itertools
25|import logging
26|import time
27|
28|import numpy as np
29|
30|import matplotlib as mpl
31|from matplotlib import _api, _docstring, colors, offsetbox
32|from matplotlib.artist import Artist, allow_rasterization
33|from matplotlib.cbook import silent_list
34|from matplotlib.font_manager import FontProperties
35|from matplotlib.lines import Line2D
36|from matplotlib.patches import (Patch, Rectangle, Shadow, FancyBboxPatch,
37|                                StepPatch)
38|from matplotlib.collections import (
39|    Collection, CircleCollection, LineCollection, PathCollection,
40|    PolyCollection, RegularPolyCollection)
41|from matplotlib.text import Text
42|from matplotlib.transforms import Bbox, BboxBase, TransformedBbox
43|from matplotlib.transforms import BboxTransformTo, BboxTransformFrom
44|from matplotlib.offsetbox import (
45|    AnchoredOffsetbox, DraggableOffsetBox,
46|    HPacker, VPacker,
47|    DrawingArea, TextArea,
48|)
49|from matplotlib.container import ErrorbarContainer, BarContainer, StemContainer
50|from . import legend_handler
51|
52|
53|class DraggableLegend(DraggableOffsetBox):
54|    def __init__(self, legend, use_blit=False, update="loc"):
55|        """
56|        Wrapper around a `.Legend` to support mouse dragging.
57|
58|        Parameters
59|        ----------
60|        legend : `.Legend`
61|            The `.Legend` instance to wrap.
62|        use_blit : bool, optional
63|            Use blitting for faster image composition. For details see
64|            :ref:`func-animation`.
65|        update : {'loc', 'bbox'}, optional
66|            If "loc", update the *loc* parameter of the legend upon finalizing.
67|            If "bbox", update the *bbox_to_anchor* parameter.
68|        """
69|        self.legend = legend
70|
71|        _api.check_in_list(["loc", "bbox"], update=update)
72|        self._update = update
73|
74|        super().__init__(legend, legend._legend_box, use_blit=use_blit)
75|
76|    def finalize_offset(self):
77|        if self._update == "loc":
78|            self._update_loc(self.get_loc_in_canvas())
79|        elif self._update == "bbox":
80|            self._bbox_to_anchor(self.get_loc_in_canvas())
81|
82|    def _update_loc(self, loc_in_canvas):
83|        bbox = self.legend.get_bbox_to_anchor()
84|        # if bbox has zero width or height, the transformation is
85|        # ill-defined. Fall back to the default bbox_to_anchor.
86|        if bbox.width == 0 or bbox.height == 0:
87|            self.legend.set_bbox_to_anchor(None)
88|            bbox = self.legend.get_bbox_to_anchor()
89|        _bbox_transform = BboxTransformFrom(bbox)
90|        self.legend._loc = tuple(_bbox_transform.transform(loc_in_canvas))
91|
92|    def _update_bbox_to_anchor(self, loc_in_canvas):
93|        loc_in_bbox = self.legend.axes.transAxes.transform(loc_in_canvas)
94|        self.legend.set_bbox_to_anchor(loc_in_bbox)
95|
96|
97|_legend_kw_doc_base = """
98|bbox_to_anchor : `.BboxBase`, 2-tuple, or 4-tuple of floats
99|    Box that is used to position the legend in conjunction with *loc*.
100|    Defaults to `axes.bbox` (if called as a method to `.Axes.legend`) or
101|    `figure.bbox` (if `.Figure.legend`).  This argument allows arbitrary
102|    placement of the legend.
103|
104|    Bbox coordinates are interpreted in the coordinate system given by
105|    *bbox_transform*, with the default transform
106|    Axes or Figure coordinates, depending on which ``legend`` is called.
107|
108|    If a 4-tuple or `.BboxBase` is given, then it specifies the bbox
109|    ``(x, y, width, height)`` that the legend is placed in.
110|    To put the legend in the best location in the bottom right
111|    quadrant of the axes (or figure)::
112|
113|        loc='best', bbox_to_anchor=(0.5, 0., 0.5, 0.5)
114|
115|    A 2-tuple ``(x, y)`` places the corner of the legend specified by *loc* at
116|    x, y.  For example, to put the legend's upper right-hand corner in the
117|    center of the axes (or figure) the following keywords can be used::
118|
119|        loc='upper right', bbox_to_anchor=(0.5, 0.5)
120|
121|ncols : int, default: 1
122|    The number of columns that the legend has.
123|
124|    For backward compatibility, the spelling *ncol* is also supported
125|    but it is discouraged. If both are given, *ncols* takes precedence.
126|
127|prop : None or `matplotlib.font_manager.FontProperties` or dict
128|    The font properties of the legend. If None (default), the current
129|    :data:`matplotlib.rcParams` will be used.
130|
131|fontsize : int or {'xx-small', 'x-small', 'small', 'medium', 'large', \
132|'x-large', 'xx-large'}
133|    The font size of the legend. If the value is numeric the size will be the
134|    absolute font size in points. String values are relative to the current
135|    default font size. This argument is only used if *prop* is not specified.
136|
137|labelcolor : str or list, default: :rc:`legend.labelcolor`
138|    The color of the text in the legend. Either a valid color string
139|    (for example, 'red'), or a list of color strings. The labelcolor can
140|    also be made to match the color of the line or marker using 'linecolor',
141|    'markerfacecolor' (or 'mfc'), or 'markeredgecolor' (or 'mec').
142|
143|    Labelcolor can be set globally using :rc:`legend.labelcolor`. If None,
144|    use :rc:`text.color`.
145|
146|numpoints : int, default: :rc:`legend.numpoints`
147|    The number of marker points in the legend when creating a legend
148|    entry for a `.Line2D` (line).
149|
150|scatterpoints : int, default: :rc:`legend.scatterpoints`
151|    The number of marker points in the legend when creating
152|    a legend entry for a `.PathCollection` (scatter plot).
153|
154|scatteryoffsets : iterable of floats, default: ``[0.375, 0.5, 0.3125]``
155|    The vertical offset (relative to the font size) for the markers
156|    created for a scatter plot legend entry. 0.0 is at the base the
157|    legend text, and 1.0 is at the top. To draw all markers at the
158|    same height, set to ``[0.5]``.
159|
160|markerscale : float, default: :rc:`legend.markerscale`
161|    The relative size of legend markers compared with the originally
162|    drawn ones.
163|
164|markerfirst : bool, default: True
165|    If *True*, legend marker is placed to the left of the legend label.
166|    If *False*, legend marker is placed to the right of the legend label.
167|
168|reverse : bool, default: False
169|    If *True*, the legend labels are displayed in reverse order from the input.
170|    If *False*, the legend labels are displayed in the same order as the input.
171|
172|    .. versionadded:: 3.7
173|
174|frameon : bool, default: :rc:`legend.frameon`
175|    Whether the legend should be drawn on a patch (frame).
176|
177|fancybox : bool, default: :rc:`legend.fancybox`
178|    Whether round edges should be enabled around the `.FancyBboxPatch` which
179|    makes up the legend's background.
180|
181|shadow : bool, default: :rc:`legend.shadow`
182|    Whether to draw a shadow behind the legend.
183|
184|framealpha : float, default: :rc:`legend.framealpha`
185|    The alpha transparency of the legend's background.
186|    If *shadow* is activated and *framealpha* is ``None``, the default value is
187|    ignored.
188|
189|facecolor : "inherit" or color, default: :rc:`legend.facecolor`
190|    The legend's background color.
191|    If ``"inherit"``, use :rc:`axes.facecolor`.
192|
193|edgecolor : "inherit" or color, default: :rc:`legend.edgecolor`
194|    The legend's background patch edge color.
195|    If ``"inherit"``, use take :rc:`axes.edgecolor`.
196|
197|mode : {"expand", None}
198|    If *mode* is set to ``"expand"`` the legend will be horizontally
199|    expanded to fill the axes area (or *bbox_to_anchor* if defines
200|    the legend's size).
201|
202|bbox_transform : None or `matplotlib.transforms.Transform`
203|    The transform for the bounding box (*bbox_to_anchor*). For a value
204|    of ``None`` (default) the Axes'
205|    :data:`~matplotlib.axes.Axes.transAxes` transform will be used.
206|
207|title : str or None
208|    The legend's title. Default is no title (``None``).
209|
210|title_fontproperties : None or `matplotlib.font_manager.FontProperties` or dict
211|    The font properties of the legend's title. If None (default), the
212|    *title_fontsize* argument will be used if present; if *title_fontsize* is
213|    also None, the current :rc:`legend.title_fontsize` will be used.
214|
215|title_fontsize : int or {'xx-small', 'x-small', 'small', 'medium', 'large', \
216|'x-large', 'xx-large'}, default: :rc:`legend.title_fontsize`
217|    The font size of the legend's title.
218|    Note: This cannot be combined with *title_fontproperties*. If you want
219|    to set the fontsize alongside other font properties, use the *size*
220|    parameter in *title_fontproperties*.
221|
222|alignment : {'center', 'left', 'right'}, default: 'center'
223|    The alignment of the legend title and the box of entries. The entries
224|    are aligned as a single block, so that markers always lined up.
225|
226|borderpad : float, default: :rc:`legend.borderpad`
227|    The fractional whitespace inside the legend border, in font-size units.
228|
229|labelspacing : float, default: :rc:`legend.labelspacing`
230|    The vertical space between the legend entries, in font-size units.
231|
232|handlelength : float, default: :rc:`legend.handlelength`
233|    The length of the legend handles, in font-size units.
234|
235|handleheight : float, default: :rc:`legend.handleheight`
236|    The height of the legend handles, in font-size units.
237|
238|handletextpad : float, default: :rc:`legend.handletextpad`
239|    The pad between the legend handle and text, in font-size units.
240|
241|borderaxespad : float, default: :rc:`legend.borderaxespad`
242|    The pad between the axes and legend border, in font-size units.
243|
244|columnspacing : float, default: :rc:`legend.columnspacing`
245|    The spacing between columns, in font-size units.
246|
247|handler_map : dict or None
248|    The custom dictionary mapping instances or types to a legend
249|    handler. This *handler_map* updates the default handler map
250|    found at `matplotlib.legend.Legend.get_legend_handler_map`.
251|
252|draggable : bool, default: False
253|    Whether the legend can be dragged with the mouse.
254|"""
255|
256|_loc_doc_base = """
257|loc : str or pair of floats, {0}
258|    The location of the legend.
259|
260|    The strings
261|    ``'upper left', 'upper right', 'lower left', 'lower right'``
262|    place the legend at the corresponding corner of the axes/figure.
263|
264|    The strings
265|    ``'upper center', 'lower center', 'center left', 'center right'``
266|    place the legend at the center of the corresponding edge of the
267|    axes/figure.
268|
269|    The string ``'center'`` places the legend at the center of the axes/figure.
270|
271|    The string ``'best'`` places the legend at the location, among the nine
272|    locations defined so far, with the minimum overlap with other drawn
273|    artists.  This option can be quite slow for plots with large amounts of
274|    data; your plotting speed may benefit from providing a specific location.
275|
276|    The location can also be a 2-tuple giving the coordinates of the lower-left
277|    corner of the legend in axes coordinates (in which case *bbox_to_anchor*
278|    will be ignored).
279|
280|    For back-compatibility, ``'center right'`` (but no other location) can also
281|    be spelled ``'right'``, and each "string" locations can also be given as a
282|    numeric value:
283|
284|        ===============   =============
285|        Location String   Location Code
286|        ===============   =============
287|        'best'            0
288|        'upper right'     1
289|        'upper left'      2
290|        'lower left'      3
291|        'lower right'     4
292|        'right'           5
293|        'center left'     6
294|        'center right'    7
295|        'lower center'    8
296|        'upper center'    9
297|        'center'          10
298|        ===============   =============
299|    {1}"""
300|
301|_legend_kw_axes_st = (_loc_doc_base.format("default: :rc:`legend.loc`", '') +
302|                      _legend_kw_doc_base)
303|_docstring.interpd.update(_legend_kw_axes=_legend_kw_axes_st)
304|
305|_outside_doc = """
306|    If a figure is using the constrained layout manager, the string codes
307|    of the *loc* keyword argument can get better layout behaviour using the
308|    prefix 'outside'. There is ambiguity at the corners, so 'outside
309|    upper right' will make space for the legend above the rest of the
310|    axes in the layout, and 'outside right upper' will make space on the
311|    right side of the layout.  In addition to the values of *loc*
312|    listed above, we have 'outside right upper', 'outside right lower',
313|    'outside left upper', and 'outside left lower'.  See
314|    :doc:`/tutorials/intermediate/legend_guide` for more details.
315|"""
316|
317|_legend_kw_figure_st = (_loc_doc_base.format("default: 'upper right'",
318|                                             _outside_doc) +
319|                        _legend_kw_doc_base)
320|_docstring.interpd.update(_legend_kw_figure=_legend_kw_figure_st)
321|
322|_legend_kw_both_st = (
323|    _loc_doc_base.format("default: 'best' for axes, 'upper right' for figures",
324|                         _outside_doc) +
325|    _legend_kw_doc_base)
326|_docstring.interpd.update(_legend_kw_doc=_legend_kw_both_st)
327|
328|
329|class Legend(Artist):
330|    """
331|    Place a legend on the axes at location loc.
332|    """
333|
334|    # 'best' is only implemented for axes legends
335|    codes = {'best': 0, **AnchoredOffsetbox.codes}
336|    zorder = 5
337|
338|    def __str__(self):
339|        return "Legend"
340|
341|    @_api.make_keyword_only("3.6", "loc")
342|    @_docstring.dedent_interpd
343|    def __init__(
344|        self, parent, handles, labels,
345|        loc=None,
346|        numpoints=None,      # number of points in the legend line
347|        markerscale=None,    # relative size of legend markers vs. original
348|        markerfirst=True,    # left/right ordering of legend marker and label
349|        reverse=False,       # reverse ordering of legend marker and label
350|        scatterpoints=None,  # number of scatter points
351|        scatteryoffsets=None,
352|        prop=None,           # properties for the legend texts
353|        fontsize=None,       # keyword to set font size directly
354|        labelcolor=None,     # keyword to set the text color
355|
356|        # spacing & pad defined as a fraction of the font-size
357|        borderpad=None,      # whitespace inside the legend border
358|        labelspacing=None,   # vertical space between the legend entries
359|        handlelength=None,   # length of the legend handles
360|        handleheight=None,   # height of the legend handles
361|        handletextpad=None,  # pad between the legend handle and text
362|        borderaxespad=None,  # pad between the axes and legend border
363|        columnspacing=None,  # spacing between columns
364|
365|        ncols=1,     # number of columns
366|        mode=None,  # horizontal distribution of columns: None or "expand"
367|
368|        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam
369|        shadow=None,
370|        title=None,           # legend title
371|        title_fontsize=None,  # legend title font size
372|        framealpha=None,      # set frame alpha
373|        edgecolor=None,       # frame patch edgecolor
374|        facecolor=None,       # frame patch facecolor
375|
376|        bbox_to_anchor=None,  # bbox to which the legend will be anchored
377|        bbox_transform=None,  # transform for the bbox
378|        frameon=None,         # draw frame
379|        handler_map=None,
380|        title_fontproperties=None,  # properties for the legend title
381|        alignment="center",       # control the alignment within the legend box
382|        *,
383|        ncol=1,  # synonym for ncols (backward compatibility)
384|        draggable=False  # whether the legend can be dragged with the mouse
385|    ):
386|        """
387|        Parameters
388|        ----------
389|        parent : `~matplotlib.axes.Axes` or `.Figure`
390|            The artist that contains the legend.
391|
392|        handles : list of `.Artist`
393|            A list of Artists (lines, patches) to be added to the legend.
394|
395|        labels : list of str
396|            A list of labels to show next to the artists. The length of handles
397|            and labels should be the same. If they are not, they are truncated
398|            to the length of the shorter list.
399|
400|        Other Parameters
401|        ----------------
402|        %(_legend_kw_doc)s
403|
404|        Attributes
405|        ----------
406|        legend_handles
407|            List of `.Artist` objects added as legend entries.
408|
409|            .. versionadded:: 3.7
410|
411|        Notes
412|        -----
413|        Users can specify any arbitrary location for the legend using the
414|        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a
415|        `.BboxBase` (or derived there from) or a tuple of 2 or 4 floats.
416|        See `set_bbox_to_anchor` for more detail.
417|
418|        The legend location can be specified by setting *loc* with a tuple of
419|        2 floats, which is interpreted as the lower-left corner of the legend
420|        in the normalized axes coordinate.
421|        """
422|        # local import only to avoid circularity
423|        from matplotlib.axes import Axes
424|        from matplotlib.figure import FigureBase
425|
426|        super().__init__()
427|
428|        if prop is None:
429|            if fontsize is not None:
430|                self.prop = FontProperties(size=fontsize)
431|            else:
432|                self.prop = FontProperties(
433|                    size=mpl.rcParams["legend.fontsize"])
434|        else:
435|            self.prop = FontProperties._from_any(prop)
436|            if isinstance(prop, dict) and "size" not in prop:
437|                self.prop.set_size(mpl.rcParams["legend.fontsize"])
438|
439|        self._fontsize = self.prop.get_size_in_points()
440|
441|        self.texts = []
442|        self.legend_handles = []
443|        self._legend_title_box = None
444|
445|        #: A dictionary with the extra handler mappings for this Legend
446|        #: instance.
447|        self._custom_handler_map = handler_map
448|
449|        def val_or_rc(val, rc_name):
450|            return val if val is not None else mpl.rcParams[rc_name]
451|
452|        self.numpoints = val_or_rc(numpoints, 'legend.numpoints')
453|        self.markerscale = val_or_rc(markerscale, 'legend.markerscale')
454|        self.scatterpoints = val_or_rc(scatterpoints, 'legend.scatterpoints')
455|        self.borderpad = val_or_rc(borderpad, 'legend.borderpad')
456|        self.labelspacing = val_or_rc(labelspacing, 'legend.labelspacing')
457|        self.handlelength = val_or_rc(handlelength, 'legend.handlelength')
458|        self.handleheight = val_or_rc(handleheight, 'legend.handleheight')
459|        self.handletextpad = val_or_rc(handletextpad, 'legend.handletextpad')
460|        self.borderaxespad = val_or_rc(borderaxespad, 'legend.borderaxespad')
461|        self.columnspacing = val_or_rc(columnspacing, 'legend.columnspacing')
462|        self.shadow = val_or_rc(shadow, 'legend.shadow')
463|        # trim handles and labels if illegal label...
464|        _lab, _hand = [], []
465|        for label, handle in zip(labels, handles):
466|            if isinstance(label, str) and label.startswith('_'):
467|                _api.warn_external(f"The label {label!r} of {handle!r} starts "
468|                                   "with '_'. It is thus excluded from the "
469|                                   "legend.")
470|            else:
471|                _lab.append(label)
472|                _hand.append(handle)
473|        labels, handles = _lab, _hand
474|
475|        if reverse:
476|            labels.reverse()
477|            handles.reverse()
478|
479|        if len(handles) < 2:
480|            ncols = 1
481|        self._ncols = ncols if ncols != 1 else ncol
482|
483|        if self.numpoints <= 0:
484|            raise ValueError("numpoints must be > 0; it was %d" % numpoints)
485|
486|        # introduce y-offset for handles of the scatter plot
487|        if scatteryoffsets is None:
488|            self._scatteryoffsets = np.array([3. / 8., 4. / 8., 2.5 / 8.])
489|        else:
490|            self._scatteryoffsets = np.asarray(scatteryoffsets)
491|        reps = self.scatterpoints // len(self._scatteryoffsets) + 1
492|        self._scatteryoffsets = np.tile(self._scatteryoffsets,
493|                                        reps)[:self.scatterpoints]
494|
495|        # _legend_box is a VPacker instance that contains all
496|        # legend items and will be initialized from _init_legend_box()
497|        # method.
498|        self._legend_box = None
499|
500|        if isinstance(parent, Axes):
501|            self.isaxes = True
502|            self.axes = parent
503|            self.set_figure(parent.figure)
504|        elif isinstance(parent, FigureBase):
505|            self.isaxes = False
506|            self.set_figure(parent)
507|        else:
508|            raise TypeError(
509|                "Legend needs either Axes or FigureBase as parent"
510|            )
511|        self.parent = parent
512|
513|        loc0 = loc
514|        self._loc_used_default = loc is None
515|        if loc is None:
516|            loc = mpl.rcParams["legend.loc"]
517|            if not self.isaxes and loc in [0, 'best']:
518|                loc = 'upper right'
519|
520|        # handle outside legends:
521|        self._outside_loc = None
522|        if isinstance(loc, str):
523|            if loc.split()[0] == 'outside':
524|                # strip outside:
525|                loc = loc.split('outside ')[1]
526|                # strip "center" at the beginning
527|                self._outside_loc = loc.replace('center ', '')
528|                # strip first
529|                self._outside_loc = self._outside_loc.split()[0]
530|                locs = loc.split()
531|                if len(locs) > 1 and locs[0] in ('right', 'left'):
532|                    # locs doesn't accept "left upper", etc, so swap
533|                    if locs[0] != 'center':
534|                        locs = locs[::-1]
535|                    loc = locs[0] + ' ' + locs[1]
536|            # check that loc is in acceptable strings
537|            loc = _api.check_getitem(self.codes, loc=loc)
538|
539|        if self.isaxes and self._outside_loc:
540|            raise ValueError(
541|                f"'outside' option for loc='{loc0}' keyword argument only "
542|                "works for figure legends")
543|
544|        if not self.isaxes and loc == 0:
545|            raise ValueError(
546|                "Automatic legend placement (loc='best') not implemented for "
547|                "figure legend")
548|
549|        self._mode = mode
550|        self.set_bbox_to_anchor(bbox_to_anchor, bbox_transform)
551|
552|        # We use FancyBboxPatch to draw a legend frame. The location
553|        # and size of the box will be updated during the drawing time.
554|
555|        if facecolor is None:
556|            facecolor = mpl.rcParams["legend.facecolor"]
557|        if facecolor == 'inherit':
558|            facecolor = mpl.rcParams["axes.facecolor"]
559|
560|        if edgecolor is None:
561|            edgecolor = mpl.rcParams["legend.edgecolor"]
562|        if edgecolor == 'inherit':
563|            edgecolor = mpl.rcParams["axes.edgecolor"]
564|
565|        if fancybox is None:
566|            fancybox = mpl.rcParams["legend.fancybox"]
567|
568|        self.legendPatch = FancyBboxPatch(
569|            xy=(0, 0), width=1, height=1,
570|            facecolor=facecolor, edgecolor=edgecolor,
571|            # If shadow is used, default to alpha=1 (#8943).
572|            alpha=(framealpha if framealpha is not None
573|                   else 1 if shadow
574|                   else mpl.rcParams["legend.framealpha"]),
575|            # The width and height of the legendPatch will be set (in draw())
576|            # to the length that includes the padding. Thus we set pad=0 here.
577|            boxstyle=("round,pad=0,rounding_size=0.2" if fancybox
578|                      else "square,pad=0"),
579|            mutation_scale=self._fontsize,
580|            snap=True,
581|            visible=(frameon if frameon is not None
582|                     else mpl.rcParams["legend.frameon"])
583|        )
584|        self._set_artist_props(self.legendPatch)
585|
586|        _api.check_in_list(["center", "left", "right"], alignment=alignment)
587|        self._alignment = alignment
588|
589|        # init with null renderer
590|        self._init_legend_box(handles, labels, markerfirst)
591|
592|        tmp = self._loc_used_default
593|        self._set_loc(loc)
594|        self._loc_used_default = tmp  # ignore changes done by _set_loc
595|
596|        # figure out title font properties:
597|        if title_fontsize is not None and title_fontproperties is not None:
598|            raise ValueError(
599|                "title_fontsize and title_fontproperties can't be specified "
600|                "at the same time. Only use one of them. ")
601|        title_prop_fp = FontProperties._from_any(title_fontproperties)
602|        if isinstance(title_fontproperties, dict):
603|            if "size" not in title_fontproperties:
604|                title_fontsize = mpl.rcParams["legend.title_fontsize"]
605|                title_prop_fp.set_size(title_fontsize)
606|        elif title_fontsize is not None:
607|            title_prop_fp.set_size(title_fontsize)
608|        elif not isinstance(title_fontproperties, FontProperties):
609|            title_fontsize = mpl.rcParams["legend.title_fontsize"]
610|            title_prop_fp.set_size(title_fontsize)
611|
612|        self.set_title(title, prop=title_prop_fp)
613|
614|        self._draggable = None
615|        self.set_draggable(state=draggable)
616|
617|        # set the text color
618|
619|        color_getters = {  # getter function depends on line or patch
620|            'linecolor':       ['get_color',           'get_facecolor'],
621|            'markerfacecolor': ['get_markerfacecolor', 'get_facecolor'],
622|            'mfc':             ['get_markerfacecolor', 'get_facecolor'],
623|            'markeredgecolor': ['get_markeredgecolor', 'get_edgecolor'],
624|            'mec':             ['get_markeredgecolor', 'get_edgecolor'],
625|        }
626|        if labelcolor is None:
627|            if mpl.rcParams['legend.labelcolor'] is not None:
628|                labelcolor = mpl.rcParams['legend.labelcolor']
629|            else:
630|                labelcolor = mpl.rcParams['text.color']
631|        if isinstance(labelcolor, str) and labelcolor in color_getters:
632|            getter_names = color_getters[labelcolor]
633|            for handle, text in zip(self.legend_handles, self.texts):
634|                try:
635|                    if handle.get_array() is not None:
636|                        continue
637|                except AttributeError:
638|                    pass
639|                for getter_name in getter_names:
640|                    try:
641|                        color = getattr(handle, getter_name)()
642|                        if isinstance(color, np.ndarray):
643|                            if (
644|                                    color.shape[0] == 1
645|                                    or np.isclose(color, color[0]).all()
646|                            ):
647|                                text.set_color(color[0])
648|                            else:
649|                                pass
650|                        else:
651|                            text.set_color(color)
652|                        break
653|                    except AttributeError:
654|                        pass
655|        elif isinstance(labelcolor, str) and labelcolor == 'none':
656|            for text in self.texts:
657|                text.set_color(labelcolor)
658|        elif np.iterable(labelcolor):
659|            for text, color in zip(self.texts,
660|                                   itertools.cycle(
661|                                       colors.to_rgba_array(labelcolor))):
662|                text.set_color(color)
663|        else:
664|            raise ValueError(f"Invalid labelcolor: {labelcolor!r}")
665|
666|    legendHandles = _api.deprecated('3.7', alternative="legend_handles")(
667|        property(lambda self: self.legend_handles))
668|
669|    def _set_artist_props(self, a):
670|        """
671|        Set the boilerplate props for artists added to axes.
672|        """
673|        a.set_figure(self.figure)
674|        if self.isaxes:
675|            # a.set_axes(self.axes)
676|            a.axes = self.axes
677|
678|        a.set_transform(self.get_transform())
679|
680|    def _set_loc(self, loc):
681|        # find_offset function will be provided to _legend_box and
682|        # _legend_box will draw itself at the location of the return
683|        # value of the find_offset.
684|        self._loc_used_default = False
685|        self._loc_real = loc
686|        self.stale = True
687|        self._legend_box.set_offset(self._findoffset)
688|
689|    def set_ncols(self, ncols):
690|        """Set the number of columns."""
691|        self._ncols = ncols
692|
693|    def _get_loc(self):
694|        return self._loc_real
695|
696|    _loc = property(_get_loc, _set_loc)
697|
698|    def _findoffset(self, width, height, xdescent, ydescent, renderer):
699|        """Helper function to locate the legend."""
700|
701|        if self._loc == 0:  # "best".
702|            x, y = self._find_best_position(width, height, renderer)
703|        elif self._loc in Legend.codes.values():  # Fixed location.
704|            bbox = Bbox.from_bounds(0, 0, width, height)
705|            x, y = self._get_anchored_bbox(self._loc, bbox,
706|                                           self.get_bbox_to_anchor(),
707|                                           renderer)
708|        else:  # Axes or figure coordinates.
709|            fx, fy = self._loc
710|            bbox = self.get_bbox_to_anchor()
711|            x, y = bbox.x0 + bbox.width * fx, bbox.y0 + bbox.height * fy
712|
713|        return x + xdescent, y + ydescent
714|
715|    @allow_rasterization
716|    def draw(self, renderer):
717|        # docstring inherited
718|        if not self.get_visible():
719|            return
720|
721|        renderer.open_group('legend', gid=self.get_gid())
722|
723|        fontsize = renderer.points_to_pixels(self._fontsize)
724|
725|        # if mode == fill, set the width of the legend_box to the
726|        # width of the parent (minus pads)
727|        if self._mode in ["expand"]:
728|            pad = 2 * (self.borderaxespad + self.borderpad) * fontsize
729|            self._legend_box.set_width(self.get_bbox_to_anchor().width - pad)
730|
731|        # update the location and size of the legend. This needs to
732|        # be done in any case to clip the figure right.
733|        bbox = self._legend_box.get_window_extent(renderer)
734|        self.legendPatch.set_bounds(bbox.bounds)
735|        self.legendPatch.set_mutation_scale(fontsize)
736|
737|        if self.shadow:
738|            Shadow(self.legendPatch, 2, -2).draw(renderer)
739|
740|        self.legendPatch.draw(renderer)
741|        self._legend_box.draw(renderer)
742|
743|        renderer.close_group('legend')
744|        self.stale = False
745|
746|    # _default_handler_map defines the default mapping between plot
747|    # elements and the legend handlers.
748|
749|    _default_handler_map = {
750|        StemContainer: legend_handler.HandlerStem(),
751|        ErrorbarContainer: legend_handler.HandlerErrorbar(),
752|        Line2D: legend_handler.HandlerLine2D(),
753|        Patch: legend_handler.HandlerPatch(),
754|        StepPatch: legend_handler.HandlerStepPatch(),
755|        LineCollection: legend_handler.HandlerLineCollection(),
756|        RegularPolyCollection: legend_handler.HandlerRegularPolyCollection(),
757|        CircleCollection: legend_handler.HandlerCircleCollection(),
758|        BarContainer: legend_handler.HandlerPatch(
759|            update_func=legend_handler.update_from_first_child),
760|        tuple: legend_handler.HandlerTuple(),
761|        PathCollection: legend_handler.HandlerPathCollection(),
762|        PolyCollection: legend_handler.HandlerPolyCollection()
763|        }
764|
765|    # (get|set|update)_default_handler_maps are public interfaces to
766|    # modify the default handler map.
767|
768|    @classmethod
769|    def get_default_handler_map(cls):
770|        """Return the global default handler map, shared by all legends."""
771|        return cls._default_handler_map
772|
773|    @classmethod
774|    def set_default_handler_map(cls, handler_map):
775|        """Set the global default handler map, shared by all legends."""
776|        cls._default_handler_map = handler_map
777|
778|    @classmethod
779|    def update_default_handler_map(cls, handler_map):
780|        """Update the global default handler map, shared by all legends."""
781|        cls._default_handler_map.update(handler_map)
782|
783|    def get_legend_handler_map(self):
784|        """Return this legend instance's handler map."""
785|        default_handler_map = self.get_default_handler_map()
786|        return ({**default_handler_map, **self._custom_handler_map}
787|                if self._custom_handler_map else default_handler_map)
788|
789|    @staticmethod
790|    def get_legend_handler(legend_handler_map, orig_handle):
791|        """
792|        Return a legend handler from *legend_handler_map* that
793|        corresponds to *orig_handler*.
794|
795|        *legend_handler_map* should be a dictionary object (that is
796|        returned by the get_legend_handler_map method).
797|
798|        It first checks if the *orig_handle* itself is a key in the
799|        *legend_handler_map* and return the associated value.
800|        Otherwise, it checks for each of the classes in its
801|        method-resolution-order. If no matching key is found, it
802|        returns ``None``.
803|        """
804|        try:
805|            return legend_handler_map[orig_handle]
806|        except (TypeError, KeyError):  # TypeError if unhashable.
807|            pass
808|        for handle_type in type(orig_handle).mro():
809|            try:
810|                return legend_handler_map[handle_type]
811|            except KeyError:
812|                pass
813|        return None
814|
815|    def _init_legend_box(self, handles, labels, markerfirst=True):
816|        """
817|        Initialize the legend_box. The legend_box is an instance of
818|        the OffsetBox, which is packed with legend handles and
819|        texts. Once packed, their location is calculated during the
820|        drawing time.
821|        """
822|
823|        fontsize = self._fontsize
824|
825|        # legend_box is a HPacker, horizontally packed with columns.
826|        # Each column is a VPacker, vertically packed with legend items.
827|        # Each legend item is a HPacker packed with:
828|        # - handlebox: a DrawingArea which contains the legend handle.
829|        # - labelbox: a TextArea which contains the legend text.
830|
831|        text_list = []  # the list of text instances
832|        handle_list = []  # the list of handle instances
833|        handles_and_labels = []
834|
835|        # The approximate height and descent of text. These values are
836|        # only used for plotting the legend handle.
837|        descent = 0.35 * fontsize * (self.handleheight - 0.7)  # heuristic.
838|        height = fontsize * self.handleheight - descent
839|        # each handle needs to be drawn inside a box of (x, y, w, h) =
840|        # (0, -descent, width, height).  And their coordinates should
841|        # be given in the display coordinates.
842|
843|        # The transformation of each handle will be automatically set
844|        # to self.get_transform(). If the artist does not use its
845|        # default transform (e.g., Collections), you need to
846|        # manually set their transform to the self.get_transform().
847|        legend_handler_map = self.get_legend_handler_map()
848|
849|        for orig_handle, label in zip(handles, labels):
850|            handler = self.get_legend_handler(legend_handler_map, orig_handle)
851|            if handler is None:
852|                _api.warn_external(
853|                             "Legend does not support handles for "
854|                             f"{type(orig_handle).__name__} "
855|                             "instances.\nA proxy artist may be used "
856|                             "instead.\nSee: https://matplotlib.org/"
857|                             "stable/tutorials/intermediate/legend_guide.html"
858|                             "#controlling-the-legend-entries")
859|                # No handle for this artist, so we just defer to None.
860|                handle_list.append(None)
861|            else:
862|                textbox = TextArea(label, multilinebaseline=True,
863|                                   textprops=dict(
864|                                       verticalalignment='baseline',
865|                                       horizontalalignment='left',
866|                                       fontproperties=self.prop))
867|                handlebox = DrawingArea(width=self.handlelength * fontsize,
868|                                        height=height,
869|                                        xdescent=0., ydescent=descent)
870|
871|                text_list.append(textbox._text)
872|                # Create the artist for the legend which represents the
873|                # original artist/handle.
874|                handle_list.append(handler.legend_artist(self, orig_handle,
875|                                                         fontsize, handlebox))
876|                handles_and_labels.append((handlebox, textbox))
877|
878|        columnbox = []
879|        # array_split splits n handles_and_labels into ncols columns, with the
880|        # first n%ncols columns having an extra entry.  filter(len, ...)
881|        # handles the case where n < ncols: the last ncols-n columns are empty
882|        # and get filtered out.
883|        for handles_and_labels_column in filter(
884|                len, np.array_split(handles_and_labels, self._ncols)):
885|            # pack handlebox and labelbox into itembox
886|            itemboxes = [HPacker(pad=0,
887|                                 sep=self.handletextpad * fontsize,
888|                                 children=[h, t] if markerfirst else [t, h],
889|                                 align="baseline")
890|                         for h, t in handles_and_labels_column]
891|            # pack columnbox
892|            alignment = "baseline" if markerfirst else "right"
893|            columnbox.append(VPacker(pad=0,
894|                                     sep=self.labelspacing * fontsize,
895|                                     align=alignment,
896|                                     children=itemboxes))
897|
898|        mode = "expand" if self._mode == "expand" else "fixed"
899|        sep = self.columnspacing * fontsize
900|        self._legend_handle_box = HPacker(pad=0,
901|                                          sep=sep, align="baseline",
902|                                          mode=mode,
903|                                          children=columnbox)
904|        self._legend_title_box = TextArea("")
905|        self._legend_box = VPacker(pad=self.borderpad * fontsize,
906|                                   sep=self.labelspacing * fontsize,
907|                                   align=self._alignment,
908|                                   children=[self._legend_title_box,
909|                                             self._legend_handle_box])
910|        self._legend_box.set_figure(self.figure)
911|        self._legend_box.axes = self.axes
912|        self.texts = text_list
913|        self.legend_handles = handle_list
914|
915|    def _auto_legend_data(self):
916|        """
917|        Return display coordinates for hit testing for "best" positioning.
918|
919|        Returns
920|        -------
921|        bboxes
922|            List of bounding boxes of all patches.
923|        lines
924|            List of `.Path` corresponding to each line.
925|        offsets
926|            List of (x, y) offsets of all collection.
927|        """
928|        assert self.isaxes  # always holds, as this is only called internally
929|        bboxes = []
930|        lines = []
931|        offsets = []
932|        for artist in self.parent._children:
933|            if isinstance(artist, Line2D):
934|                lines.append(
935|                    artist.get_transform().transform_path(artist.get_path()))
936|            elif isinstance(artist, Rectangle):
937|                bboxes.append(
938|                    artist.get_bbox().transformed(artist.get_data_transform()))
939|            elif isinstance(artist, Patch):
940|                lines.append(
941|                    artist.get_transform().transform_path(artist.get_path()))
942|            elif isinstance(artist, Collection):
943|                transform, transOffset, hoffsets, _ = artist._prepare_points()
944|                if len(hoffsets):
945|                    for offset in transOffset.transform(hoffsets):
946|                        offsets.append(offset)
947|
948|        return bboxes, lines, offsets
949|
950|    def get_children(self):
951|        # docstring inherited
952|        return [self._legend_box, self.get_frame()]
953|
954|    def get_frame(self):
955|        """Return the `~.patches.Rectangle` used to frame the legend."""
956|        return self.legendPatch
957|
958|    def get_lines(self):
959|        r"""Return the list of `~.lines.Line2D`\s in the legend."""
960|        return [h for h in self.legend_handles if isinstance(h, Line2D)]
961|
962|    def get_patches(self):
963|        r"""Return the list of `~.patches.Patch`\s in the legend."""
964|        return silent_list('Patch',
965|                           [h for h in self.legend_handles
966|                            if isinstance(h, Patch)])
967|
968|    def get_texts(self):
969|        r"""Return the list of `~.text.Text`\s in the legend."""
970|        return silent_list('Text', self.texts)
971|
972|    def set_alignment(self, alignment):
973|        """
974|        Set the alignment of the legend title and the box of entries.
975|
976|        The entries are aligned as a single block, so that markers always
977|        lined up.
978|
979|        Parameters
980|        ----------
981|        alignment : {'center', 'left', 'right'}.
982|
983|        """
984|        _api.check_in_list(["center", "left", "right"], alignment=alignment)
985|        self._alignment = alignment
986|        self._legend_box.align = alignment
987|
988|    def get_alignment(self):
989|        """Get the alignment value of the legend box"""
990|        return self._legend_box.align
991|
992|    def set_title(self, title, prop=None):
993|        """
994|        Set legend title and title style.
995|
996|        Parameters
997|        ----------
998|        title : str
999|            The legend title.
1000|
(355 more lines below)


============================================================



ACTION:

THOUGHT: Let me scroll down to see more of the legend implementation:
CODE:
scroll_down()

============================================================



OBSERVATION:

[File: /workspace/matplotlib__matplotlib__3.7/lib/matplotlib/legend.py (1355 lines total)]
(355 more lines above)
356|        # spacing & pad defined as a fraction of the font-size
357|        borderpad=None,      # whitespace inside the legend border
358|        labelspacing=None,   # vertical space between the legend entries
359|        handlelength=None,   # length of the legend handles
360|        handleheight=None,   # height of the legend handles
361|        handletextpad=None,  # pad between the legend handle and text
362|        borderaxespad=None,  # pad between the axes and legend border
363|        columnspacing=None,  # spacing between columns
364|
365|        ncols=1,     # number of columns
366|        mode=None,  # horizontal distribution of columns: None or "expand"
367|
368|        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam
369|        shadow=None,
370|        title=None,           # legend title
371|        title_fontsize=None,  # legend title font size
372|        framealpha=None,      # set frame alpha
373|        edgecolor=None,       # frame patch edgecolor
374|        facecolor=None,       # frame patch facecolor
375|
376|        bbox_to_anchor=None,  # bbox to which the legend will be anchored
377|        bbox_transform=None,  # transform for the bbox
378|        frameon=None,         # draw frame
379|        handler_map=None,
380|        title_fontproperties=None,  # properties for the legend title
381|        alignment="center",       # control the alignment within the legend box
382|        *,
383|        ncol=1,  # synonym for ncols (backward compatibility)
384|        draggable=False  # whether the legend can be dragged with the mouse
385|    ):
386|        """
387|        Parameters
388|        ----------
389|        parent : `~matplotlib.axes.Axes` or `.Figure`
390|            The artist that contains the legend.
391|
392|        handles : list of `.Artist`
393|            A list of Artists (lines, patches) to be added to the legend.
394|
395|        labels : list of str
396|            A list of labels to show next to the artists. The length of handles
397|            and labels should be the same. If they are not, they are truncated
398|            to the length of the shorter list.
399|
400|        Other Parameters
401|        ----------------
402|        %(_legend_kw_doc)s
403|
404|        Attributes
405|        ----------
406|        legend_handles
407|            List of `.Artist` objects added as legend entries.
408|
409|            .. versionadded:: 3.7
410|
411|        Notes
412|        -----
413|        Users can specify any arbitrary location for the legend using the
414|        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a
415|        `.BboxBase` (or derived there from) or a tuple of 2 or 4 floats.
416|        See `set_bbox_to_anchor` for more detail.
417|
418|        The legend location can be specified by setting *loc* with a tuple of
419|        2 floats, which is interpreted as the lower-left corner of the legend
420|        in the normalized axes coordinate.
421|        """
422|        # local import only to avoid circularity
423|        from matplotlib.axes import Axes
424|        from matplotlib.figure import FigureBase
425|
426|        super().__init__()
427|
428|        if prop is None:
429|            if fontsize is not None:
430|                self.prop = FontProperties(size=fontsize)
431|            else:
432|                self.prop = FontProperties(
433|                    size=mpl.rcParams["legend.fontsize"])
434|        else:
435|            self.prop = FontProperties._from_any(prop)
436|            if isinstance(prop, dict) and "size" not in prop:
437|                self.prop.set_size(mpl.rcParams["legend.fontsize"])
438|
439|        self._fontsize = self.prop.get_size_in_points()
440|
441|        self.texts = []
442|        self.legend_handles = []
443|        self._legend_title_box = None
444|
445|        #: A dictionary with the extra handler mappings for this Legend
446|        #: instance.
447|        self._custom_handler_map = handler_map
448|
449|        def val_or_rc(val, rc_name):
450|            return val if val is not None else mpl.rcParams[rc_name]
451|
452|        self.numpoints = val_or_rc(numpoints, 'legend.numpoints')
453|        self.markerscale = val_or_rc(markerscale, 'legend.markerscale')
454|        self.scatterpoints = val_or_rc(scatterpoints, 'legend.scatterpoints')
455|        self.borderpad = val_or_rc(borderpad, 'legend.borderpad')
456|        self.labelspacing = val_or_rc(labelspacing, 'legend.labelspacing')
457|        self.handlelength = val_or_rc(handlelength, 'legend.handlelength')
458|        self.handleheight = val_or_rc(handleheight, 'legend.handleheight')
459|        self.handletextpad = val_or_rc(handletextpad, 'legend.handletextpad')
460|        self.borderaxespad = val_or_rc(borderaxespad, 'legend.borderaxespad')
461|        self.columnspacing = val_or_rc(columnspacing, 'legend.columnspacing')
462|        self.shadow = val_or_rc(shadow, 'legend.shadow')
463|        # trim handles and labels if illegal label...
464|        _lab, _hand = [], []
465|        for label, handle in zip(labels, handles):
466|            if isinstance(label, str) and label.startswith('_'):
467|                _api.warn_external(f"The label {label!r} of {handle!r} starts "
468|                                   "with '_'. It is thus excluded from the "
469|                                   "legend.")
470|            else:
471|                _lab.append(label)
472|                _hand.append(handle)
473|        labels, handles = _lab, _hand
474|
475|        if reverse:
476|            labels.reverse()
477|            handles.reverse()
478|
479|        if len(handles) < 2:
480|            ncols = 1
481|        self._ncols = ncols if ncols != 1 else ncol
482|
483|        if self.numpoints <= 0:
484|            raise ValueError("numpoints must be > 0; it was %d" % numpoints)
485|
486|        # introduce y-offset for handles of the scatter plot
487|        if scatteryoffsets is None:
488|            self._scatteryoffsets = np.array([3. / 8., 4. / 8., 2.5 / 8.])
489|        else:
490|            self._scatteryoffsets = np.asarray(scatteryoffsets)
491|        reps = self.scatterpoints // len(self._scatteryoffsets) + 1
492|        self._scatteryoffsets = np.tile(self._scatteryoffsets,
493|                                        reps)[:self.scatterpoints]
494|
495|        # _legend_box is a VPacker instance that contains all
496|        # legend items and will be initialized from _init_legend_box()
497|        # method.
498|        self._legend_box = None
499|
500|        if isinstance(parent, Axes):
501|            self.isaxes = True
502|            self.axes = parent
503|            self.set_figure(parent.figure)
504|        elif isinstance(parent, FigureBase):
505|            self.isaxes = False
506|            self.set_figure(parent)
507|        else:
508|            raise TypeError(
509|                "Legend needs either Axes or FigureBase as parent"
510|            )
511|        self.parent = parent
512|
513|        loc0 = loc
514|        self._loc_used_default = loc is None
515|        if loc is None:
516|            loc = mpl.rcParams["legend.loc"]
517|            if not self.isaxes and loc in [0, 'best']:
518|                loc = 'upper right'
519|
520|        # handle outside legends:
521|        self._outside_loc = None
522|        if isinstance(loc, str):
523|            if loc.split()[0] == 'outside':
524|                # strip outside:
525|                loc = loc.split('outside ')[1]
526|                # strip "center" at the beginning
527|                self._outside_loc = loc.replace('center ', '')
528|                # strip first
529|                self._outside_loc = self._outside_loc.split()[0]
530|                locs = loc.split()
531|                if len(locs) > 1 and locs[0] in ('right', 'left'):
532|                    # locs doesn't accept "left upper", etc, so swap
533|                    if locs[0] != 'center':
534|                        locs = locs[::-1]
535|                    loc = locs[0] + ' ' + locs[1]
536|            # check that loc is in acceptable strings
537|            loc = _api.check_getitem(self.codes, loc=loc)
538|
539|        if self.isaxes and self._outside_loc:
540|            raise ValueError(
541|                f"'outside' option for loc='{loc0}' keyword argument only "
542|                "works for figure legends")
543|
544|        if not self.isaxes and loc == 0:
545|            raise ValueError(
546|                "Automatic legend placement (loc='best') not implemented for "
547|                "figure legend")
548|
549|        self._mode = mode
550|        self.set_bbox_to_anchor(bbox_to_anchor, bbox_transform)
551|
552|        # We use FancyBboxPatch to draw a legend frame. The location
553|        # and size of the box will be updated during the drawing time.
554|
555|        if facecolor is None:
556|            facecolor = mpl.rcParams["legend.facecolor"]
557|        if facecolor == 'inherit':
558|            facecolor = mpl.rcParams["axes.facecolor"]
559|
560|        if edgecolor is None:
561|            edgecolor = mpl.rcParams["legend.edgecolor"]
562|        if edgecolor == 'inherit':
563|            edgecolor = mpl.rcParams["axes.edgecolor"]
564|
565|        if fancybox is None:
566|            fancybox = mpl.rcParams["legend.fancybox"]
567|
568|        self.legendPatch = FancyBboxPatch(
569|            xy=(0, 0), width=1, height=1,
570|            facecolor=facecolor, edgecolor=edgecolor,
571|            # If shadow is used, default to alpha=1 (#8943).
572|            alpha=(framealpha if framealpha is not None
573|                   else 1 if shadow
574|                   else mpl.rcParams["legend.framealpha"]),
575|            # The width and height of the legendPatch will be set (in draw())
576|            # to the length that includes the padding. Thus we set pad=0 here.
577|            boxstyle=("round,pad=0,rounding_size=0.2" if fancybox
578|                      else "square,pad=0"),
579|            mutation_scale=self._fontsize,
580|            snap=True,
581|            visible=(frameon if frameon is not None
582|                     else mpl.rcParams["legend.frameon"])
583|        )
584|        self._set_artist_props(self.legendPatch)
585|
586|        _api.check_in_list(["center", "left", "right"], alignment=alignment)
587|        self._alignment = alignment
588|
589|        # init with null renderer
590|        self._init_legend_box(handles, labels, markerfirst)
591|
592|        tmp = self._loc_used_default
593|        self._set_loc(loc)
594|        self._loc_used_default = tmp  # ignore changes done by _set_loc
595|
596|        # figure out title font properties:
597|        if title_fontsize is not None and title_fontproperties is not None:
598|            raise ValueError(
599|                "title_fontsize and title_fontproperties can't be specified "
600|                "at the same time. Only use one of them. ")
601|        title_prop_fp = FontProperties._from_any(title_fontproperties)
602|        if isinstance(title_fontproperties, dict):
603|            if "size" not in title_fontproperties:
604|                title_fontsize = mpl.rcParams["legend.title_fontsize"]
605|                title_prop_fp.set_size(title_fontsize)
606|        elif title_fontsize is not None:
607|            title_prop_fp.set_size(title_fontsize)
608|        elif not isinstance(title_fontproperties, FontProperties):
609|            title_fontsize = mpl.rcParams["legend.title_fontsize"]
610|            title_prop_fp.set_size(title_fontsize)
611|
612|        self.set_title(title, prop=title_prop_fp)
613|
614|        self._draggable = None
615|        self.set_draggable(state=draggable)
616|
617|        # set the text color
618|
619|        color_getters = {  # getter function depends on line or patch
620|            'linecolor':       ['get_color',           'get_facecolor'],
621|            'markerfacecolor': ['get_markerfacecolor', 'get_facecolor'],
622|            'mfc':             ['get_markerfacecolor', 'get_facecolor'],
623|            'markeredgecolor': ['get_markeredgecolor', 'get_edgecolor'],
624|            'mec':             ['get_markeredgecolor', 'get_edgecolor'],
625|        }
626|        if labelcolor is None:
627|            if mpl.rcParams['legend.labelcolor'] is not None:
628|                labelcolor = mpl.rcParams['legend.labelcolor']
629|            else:
630|                labelcolor = mpl.rcParams['text.color']
631|        if isinstance(labelcolor, str) and labelcolor in color_getters:
632|            getter_names = color_getters[labelcolor]
633|            for handle, text in zip(self.legend_handles, self.texts):
634|                try:
635|                    if handle.get_array() is not None:
636|                        continue
637|                except AttributeError:
638|                    pass
639|                for getter_name in getter_names:
640|                    try:
641|                        color = getattr(handle, getter_name)()
642|                        if isinstance(color, np.ndarray):
643|                            if (
644|                                    color.shape[0] == 1
645|                                    or np.isclose(color, color[0]).all()
646|                            ):
647|                                text.set_color(color[0])
648|                            else:
649|                                pass
650|                        else:
651|                            text.set_color(color)
652|                        break
653|                    except AttributeError:
654|                        pass
655|        elif isinstance(labelcolor, str) and labelcolor == 'none':
656|            for text in self.texts:
657|                text.set_color(labelcolor)
658|        elif np.iterable(labelcolor):
659|            for text, color in zip(self.texts,
660|                                   itertools.cycle(
661|                                       colors.to_rgba_array(labelcolor))):
662|                text.set_color(color)
663|        else:
664|            raise ValueError(f"Invalid labelcolor: {labelcolor!r}")
665|
666|    legendHandles = _api.deprecated('3.7', alternative="legend_handles")(
667|        property(lambda self: self.legend_handles))
668|
669|    def _set_artist_props(self, a):
670|        """
671|        Set the boilerplate props for artists added to axes.
672|        """
673|        a.set_figure(self.figure)
674|        if self.isaxes:
675|            # a.set_axes(self.axes)
676|            a.axes = self.axes
677|
678|        a.set_transform(self.get_transform())
679|
680|    def _set_loc(self, loc):
681|        # find_offset function will be provided to _legend_box and
682|        # _legend_box will draw itself at the location of the return
683|        # value of the find_offset.
684|        self._loc_used_default = False
685|        self._loc_real = loc
686|        self.stale = True
687|        self._legend_box.set_offset(self._findoffset)
688|
689|    def set_ncols(self, ncols):
690|        """Set the number of columns."""
691|        self._ncols = ncols
692|
693|    def _get_loc(self):
694|        return self._loc_real
695|
696|    _loc = property(_get_loc, _set_loc)
697|
698|    def _findoffset(self, width, height, xdescent, ydescent, renderer):
699|        """Helper function to locate the legend."""
700|
701|        if self._loc == 0:  # "best".
702|            x, y = self._find_best_position(width, height, renderer)
703|        elif self._loc in Legend.codes.values():  # Fixed location.
704|            bbox = Bbox.from_bounds(0, 0, width, height)
705|            x, y = self._get_anchored_bbox(self._loc, bbox,
706|                                           self.get_bbox_to_anchor(),
707|                                           renderer)
708|        else:  # Axes or figure coordinates.
709|            fx, fy = self._loc
710|            bbox = self.get_bbox_to_anchor()
711|            x, y = bbox.x0 + bbox.width * fx, bbox.y0 + bbox.height * fy
712|
713|        return x + xdescent, y + ydescent
714|
715|    @allow_rasterization
716|    def draw(self, renderer):
717|        # docstring inherited
718|        if not self.get_visible():
719|            return
720|
721|        renderer.open_group('legend', gid=self.get_gid())
722|
723|        fontsize = renderer.points_to_pixels(self._fontsize)
724|
725|        # if mode == fill, set the width of the legend_box to the
726|        # width of the parent (minus pads)
727|        if self._mode in ["expand"]:
728|            pad = 2 * (self.borderaxespad + self.borderpad) * fontsize
729|            self._legend_box.set_width(self.get_bbox_to_anchor().width - pad)
730|
731|        # update the location and size of the legend. This needs to
732|        # be done in any case to clip the figure right.
733|        bbox = self._legend_box.get_window_extent(renderer)
734|        self.legendPatch.set_bounds(bbox.bounds)
735|        self.legendPatch.set_mutation_scale(fontsize)
736|
737|        if self.shadow:
738|            Shadow(self.legendPatch, 2, -2).draw(renderer)
739|
740|        self.legendPatch.draw(renderer)
741|        self._legend_box.draw(renderer)
742|
743|        renderer.close_group('legend')
744|        self.stale = False
745|
746|    # _default_handler_map defines the default mapping between plot
747|    # elements and the legend handlers.
748|
749|    _default_handler_map = {
750|        StemContainer: legend_handler.HandlerStem(),
751|        ErrorbarContainer: legend_handler.HandlerErrorbar(),
752|        Line2D: legend_handler.HandlerLine2D(),
753|        Patch: legend_handler.HandlerPatch(),
754|        StepPatch: legend_handler.HandlerStepPatch(),
755|        LineCollection: legend_handler.HandlerLineCollection(),
756|        RegularPolyCollection: legend_handler.HandlerRegularPolyCollection(),
757|        CircleCollection: legend_handler.HandlerCircleCollection(),
758|        BarContainer: legend_handler.HandlerPatch(
759|            update_func=legend_handler.update_from_first_child),
760|        tuple: legend_handler.HandlerTuple(),
761|        PathCollection: legend_handler.HandlerPathCollection(),
762|        PolyCollection: legend_handler.HandlerPolyCollection()
763|        }
764|
765|    # (get|set|update)_default_handler_maps are public interfaces to
766|    # modify the default handler map.
767|
768|    @classmethod
769|    def get_default_handler_map(cls):
770|        """Return the global default handler map, shared by all legends."""
771|        return cls._default_handler_map
772|
773|    @classmethod
774|    def set_default_handler_map(cls, handler_map):
775|        """Set the global default handler map, shared by all legends."""
776|        cls._default_handler_map = handler_map
777|
778|    @classmethod
779|    def update_default_handler_map(cls, handler_map):
780|        """Update the global default handler map, shared by all legends."""
781|        cls._default_handler_map.update(handler_map)
782|
783|    def get_legend_handler_map(self):
784|        """Return this legend instance's handler map."""
785|        default_handler_map = self.get_default_handler_map()
786|        return ({**default_handler_map, **self._custom_handler_map}
787|                if self._custom_handler_map else default_handler_map)
788|
789|    @staticmethod
790|    def get_legend_handler(legend_handler_map, orig_handle):
791|        """
792|        Return a legend handler from *legend_handler_map* that
793|        corresponds to *orig_handler*.
794|
795|        *legend_handler_map* should be a dictionary object (that is
796|        returned by the get_legend_handler_map method).
797|
798|        It first checks if the *orig_handle* itself is a key in the
799|        *legend_handler_map* and return the associated value.
800|        Otherwise, it checks for each of the classes in its
801|        method-resolution-order. If no matching key is found, it
802|        returns ``None``.
803|        """
804|        try:
805|            return legend_handler_map[orig_handle]
806|        except (TypeError, KeyError):  # TypeError if unhashable.
807|            pass
808|        for handle_type in type(orig_handle).mro():
809|            try:
810|                return legend_handler_map[handle_type]
811|            except KeyError:
812|                pass
813|        return None
814|
815|    def _init_legend_box(self, handles, labels, markerfirst=True):
816|        """
817|        Initialize the legend_box. The legend_box is an instance of
818|        the OffsetBox, which is packed with legend handles and
819|        texts. Once packed, their location is calculated during the
820|        drawing time.
821|        """
822|
823|        fontsize = self._fontsize
824|
825|        # legend_box is a HPacker, horizontally packed with columns.
826|        # Each column is a VPacker, vertically packed with legend items.
827|        # Each legend item is a HPacker packed with:
828|        # - handlebox: a DrawingArea which contains the legend handle.
829|        # - labelbox: a TextArea which contains the legend text.
830|
831|        text_list = []  # the list of text instances
832|        handle_list = []  # the list of handle instances
833|        handles_and_labels = []
834|
835|        # The approximate height and descent of text. These values are
836|        # only used for plotting the legend handle.
837|        descent = 0.35 * fontsize * (self.handleheight - 0.7)  # heuristic.
838|        height = fontsize * self.handleheight - descent
839|        # each handle needs to be drawn inside a box of (x, y, w, h) =
840|        # (0, -descent, width, height).  And their coordinates should
841|        # be given in the display coordinates.
842|
843|        # The transformation of each handle will be automatically set
844|        # to self.get_transform(). If the artist does not use its
845|        # default transform (e.g., Collections), you need to
846|        # manually set their transform to the self.get_transform().
847|        legend_handler_map = self.get_legend_handler_map()
848|
849|        for orig_handle, label in zip(handles, labels):
850|            handler = self.get_legend_handler(legend_handler_map, orig_handle)
851|            if handler is None:
852|                _api.warn_external(
853|                             "Legend does not support handles for "
854|                             f"{type(orig_handle).__name__} "
855|                             "instances.\nA proxy artist may be used "
856|                             "instead.\nSee: https://matplotlib.org/"
857|                             "stable/tutorials/intermediate/legend_guide.html"
858|                             "#controlling-the-legend-entries")
859|                # No handle for this artist, so we just defer to None.
860|                handle_list.append(None)
861|            else:
862|                textbox = TextArea(label, multilinebaseline=True,
863|                                   textprops=dict(
864|                                       verticalalignment='baseline',
865|                                       horizontalalignment='left',
866|                                       fontproperties=self.prop))
867|                handlebox = DrawingArea(width=self.handlelength * fontsize,
868|                                        height=height,
869|                                        xdescent=0., ydescent=descent)
870|
871|                text_list.append(textbox._text)
872|                # Create the artist for the legend which represents the
873|                # original artist/handle.
874|                handle_list.append(handler.legend_artist(self, orig_handle,
875|                                                         fontsize, handlebox))
876|                handles_and_labels.append((handlebox, textbox))
877|
878|        columnbox = []
879|        # array_split splits n handles_and_labels into ncols columns, with the
880|        # first n%ncols columns having an extra entry.  filter(len, ...)
881|        # handles the case where n < ncols: the last ncols-n columns are empty
882|        # and get filtered out.
883|        for handles_and_labels_column in filter(
884|                len, np.array_split(handles_and_labels, self._ncols)):
885|            # pack handlebox and labelbox into itembox
886|            itemboxes = [HPacker(pad=0,
887|                                 sep=self.handletextpad * fontsize,
888|                                 children=[h, t] if markerfirst else [t, h],
889|                                 align="baseline")
890|                         for h, t in handles_and_labels_column]
891|            # pack columnbox
892|            alignment = "baseline" if markerfirst else "right"
893|            columnbox.append(VPacker(pad=0,
894|                                     sep=self.labelspacing * fontsize,
895|                                     align=alignment,
896|                                     children=itemboxes))
897|
898|        mode = "expand" if self._mode == "expand" else "fixed"
899|        sep = self.columnspacing * fontsize
900|        self._legend_handle_box = HPacker(pad=0,
901|                                          sep=sep, align="baseline",
902|                                          mode=mode,
903|                                          children=columnbox)
904|        self._legend_title_box = TextArea("")
905|        self._legend_box = VPacker(pad=self.borderpad * fontsize,
906|                                   sep=self.labelspacing * fontsize,
907|                                   align=self._alignment,
908|                                   children=[self._legend_title_box,
909|                                             self._legend_handle_box])
910|        self._legend_box.set_figure(self.figure)
911|        self._legend_box.axes = self.axes
912|        self.texts = text_list
913|        self.legend_handles = handle_list
914|
915|    def _auto_legend_data(self):
916|        """
917|        Return display coordinates for hit testing for "best" positioning.
918|
919|        Returns
920|        -------
921|        bboxes
922|            List of bounding boxes of all patches.
923|        lines
924|            List of `.Path` corresponding to each line.
925|        offsets
926|            List of (x, y) offsets of all collection.
927|        """
928|        assert self.isaxes  # always holds, as this is only called internally
929|        bboxes = []
930|        lines = []
931|        offsets = []
932|        for artist in self.parent._children:
933|            if isinstance(artist, Line2D):
934|                lines.append(
935|                    artist.get_transform().transform_path(artist.get_path()))
936|            elif isinstance(artist, Rectangle):
937|                bboxes.append(
938|                    artist.get_bbox().transformed(artist.get_data_transform()))
939|            elif isinstance(artist, Patch):
940|                lines.append(
941|                    artist.get_transform().transform_path(artist.get_path()))
942|            elif isinstance(artist, Collection):
943|                transform, transOffset, hoffsets, _ = artist._prepare_points()
944|                if len(hoffsets):
945|                    for offset in transOffset.transform(hoffsets):
946|                        offsets.append(offset)
947|
948|        return bboxes, lines, offsets
949|
950|    def get_children(self):
951|        # docstring inherited
952|        return [self._legend_box, self.get_frame()]
953|
954|    def get_frame(self):
955|        """Return the `~.patches.Rectangle` used to frame the legend."""
956|        return self.legendPatch
957|
958|    def get_lines(self):
959|        r"""Return the list of `~.lines.Line2D`\s in the legend."""
960|        return [h for h in self.legend_handles if isinstance(h, Line2D)]
961|
962|    def get_patches(self):
963|        r"""Return the list of `~.patches.Patch`\s in the legend."""
964|        return silent_list('Patch',
965|                           [h for h in self.legend_handles
966|                            if isinstance(h, Patch)])
967|
968|    def get_texts(self):
969|        r"""Return the list of `~.text.Text`\s in the legend."""
970|        return silent_list('Text', self.texts)
971|
972|    def set_alignment(self, alignment):
973|        """
974|        Set the alignment of the legend title and the box of entries.
975|
976|        The entries are aligned as a single block, so that markers always
977|        lined up.
978|
979|        Parameters
980|        ----------
981|        alignment : {'center', 'left', 'right'}.
982|
983|        """
984|        _api.check_in_list(["center", "left", "right"], alignment=alignment)
985|        self._alignment = alignment
986|        self._legend_box.align = alignment
987|
988|    def get_alignment(self):
989|        """Get the alignment value of the legend box"""
990|        return self._legend_box.align
991|
992|    def set_title(self, title, prop=None):
993|        """
994|        Set legend title and title style.
995|
996|        Parameters
997|        ----------
998|        title : str
999|            The legend title.
1000|
1001|        prop : `.font_manager.FontProperties` or `str` or `pathlib.Path`
1002|            The font properties of the legend title.
1003|            If a `str`, it is interpreted as a fontconfig pattern parsed by
1004|            `.FontProperties`.  If a `pathlib.Path`, it is interpreted as the
1005|            absolute path to a font file.
1006|
1007|        """
1008|        self._legend_title_box._text.set_text(title)
1009|        if title:
1010|            self._legend_title_box._text.set_visible(True)
1011|            self._legend_title_box.set_visible(True)
1012|        else:
1013|            self._legend_title_box._text.set_visible(False)
1014|            self._legend_title_box.set_visible(False)
1015|
1016|        if prop is not None:
1017|            self._legend_title_box._text.set_fontproperties(prop)
1018|
1019|        self.stale = True
1020|
1021|    def get_title(self):
1022|        """Return the `.Text` instance for the legend title."""
1023|        return self._legend_title_box._text
1024|
1025|    def get_window_extent(self, renderer=None):
1026|        # docstring inherited
1027|        if renderer is None:
1028|            renderer = self.figure._get_renderer()
1029|        return self._legend_box.get_window_extent(renderer=renderer)
1030|
1031|    def get_tightbbox(self, renderer=None):
1032|        # docstring inherited
1033|        return self._legend_box.get_window_extent(renderer)
1034|
1035|    def get_frame_on(self):
1036|        """Get whether the legend box patch is drawn."""
1037|        return self.legendPatch.get_visible()
1038|
1039|    def set_frame_on(self, b):
1040|        """
1041|        Set whether the legend box patch is drawn.
1042|
1043|        Parameters
1044|        ----------
1045|        b : bool
1046|        """
1047|        self.legendPatch.set_visible(b)
1048|        self.stale = True
1049|
1050|    draw_frame = set_frame_on  # Backcompat alias.
1051|
1052|    def get_bbox_to_anchor(self):
1053|        """Return the bbox that the legend will be anchored to."""
1054|        if self._bbox_to_anchor is None:
1055|            return self.parent.bbox
1056|        else:
1057|            return self._bbox_to_anchor
1058|
1059|    def set_bbox_to_anchor(self, bbox, transform=None):
1060|        """
1061|        Set the bbox that the legend will be anchored to.
1062|
1063|        Parameters
1064|        ----------
1065|        bbox : `~matplotlib.transforms.BboxBase` or tuple
1066|            The bounding box can be specified in the following ways:
1067|
1068|            - A `.BboxBase` instance
1069|            - A tuple of ``(left, bottom, width, height)`` in the given
1070|              transform (normalized axes coordinate if None)
1071|            - A tuple of ``(left, bottom)`` where the width and height will be
1072|              assumed to be zero.
1073|            - *None*, to remove the bbox anchoring, and use the parent bbox.
1074|
1075|        transform : `~matplotlib.transforms.Transform`, optional
1076|            A transform to apply to the bounding box. If not specified, this
1077|            will use a transform to the bounding box of the parent.
1078|        """
1079|        if bbox is None:
1080|            self._bbox_to_anchor = None
1081|            return
1082|        elif isinstance(bbox, BboxBase):
1083|            self._bbox_to_anchor = bbox
1084|        else:
1085|            try:
1086|                l = len(bbox)
1087|            except TypeError as err:
1088|                raise ValueError(f"Invalid bbox: {bbox}") from err
1089|
1090|            if l == 2:
1091|                bbox = [bbox[0], bbox[1], 0, 0]
1092|
1093|            self._bbox_to_anchor = Bbox.from_bounds(*bbox)
1094|
1095|        if transform is None:
1096|            transform = BboxTransformTo(self.parent.bbox)
1097|
1098|        self._bbox_to_anchor = TransformedBbox(self._bbox_to_anchor,
1099|                                               transform)
1100|        self.stale = True
1101|
1102|    def _get_anchored_bbox(self, loc, bbox, parentbbox, renderer):
1103|        """
1104|        Place the *bbox* inside the *parentbbox* according to a given
1105|        location code. Return the (x, y) coordinate of the bbox.
1106|
1107|        Parameters
1108|        ----------
1109|        loc : int
1110|            A location code in range(1, 11). This corresponds to the possible
1111|            values for ``self._loc``, excluding "best".
1112|        bbox : `~matplotlib.transforms.Bbox`
1113|            bbox to be placed, in display coordinates.
1114|        parentbbox : `~matplotlib.transforms.Bbox`
1115|            A parent box which will contain the bbox, in display coordinates.
1116|        """
1117|        return offsetbox._get_anchored_bbox(
1118|            loc, bbox, parentbbox,
1119|            self.borderaxespad * renderer.points_to_pixels(self._fontsize))
1120|
1121|    def _find_best_position(self, width, height, renderer, consider=None):
1122|        """
1123|        Determine the best location to place the legend.
1124|
1125|        *consider* is a list of ``(x, y)`` pairs to consider as a potential
1126|        lower-left corner of the legend. All are display coords.
1127|        """
1128|        assert self.isaxes  # always holds, as this is only called internally
1129|
1130|        start_time = time.perf_counter()
1131|
1132|        bboxes, lines, offsets = self._auto_legend_data()
1133|
1134|        bbox = Bbox.from_bounds(0, 0, width, height)
1135|        if consider is None:
1136|            consider = [self._get_anchored_bbox(x, bbox,
1137|                                                self.get_bbox_to_anchor(),
1138|                                                renderer)
1139|                        for x in range(1, len(self.codes))]
1140|
1141|        candidates = []
1142|        for idx, (l, b) in enumerate(consider):
1143|            legendBox = Bbox.from_bounds(l, b, width, height)
1144|            badness = 0
1145|            # XXX TODO: If markers are present, it would be good to take them
1146|            # into account when checking vertex overlaps in the next line.
1147|            badness = (sum(legendBox.count_contains(line.vertices)
1148|                           for line in lines)
1149|                       + legendBox.count_contains(offsets)
1150|                       + legendBox.count_overlaps(bboxes)
1151|                       + sum(line.intersects_bbox(legendBox, filled=False)
1152|                             for line in lines))
1153|            if badness == 0:
1154|                return l, b
1155|            # Include the index to favor lower codes in case of a tie.
1156|            candidates.append((badness, idx, (l, b)))
1157|
1158|        _, _, (l, b) = min(candidates)
1159|
1160|        if self._loc_used_default and time.perf_counter() - start_time > 1:
1161|            _api.warn_external(
1162|                'Creating legend with loc="best" can be slow with large '
1163|                'amounts of data.')
1164|
1165|        return l, b
1166|
1167|    def contains(self, event):
1168|        inside, info = self._default_contains(event)
1169|        if inside is not None:
1170|            return inside, info
1171|        return self.legendPatch.contains(event)
1172|
1173|    def set_draggable(self, state, use_blit=False, update='loc'):
1174|        """
1175|        Enable or disable mouse dragging support of the legend.
1176|
1177|        Parameters
1178|        ----------
1179|        state : bool
1180|            Whether mouse dragging is enabled.
1181|        use_blit : bool, optional
1182|            Use blitting for faster image composition. For details see
1183|            :ref:`func-animation`.
1184|        update : {'loc', 'bbox'}, optional
1185|            The legend parameter to be changed when dragged:
1186|
1187|            - 'loc': update the *loc* parameter of the legend
1188|            - 'bbox': update the *bbox_to_anchor* parameter of the legend
1189|
1190|        Returns
1191|        -------
1192|        `.DraggableLegend` or *None*
1193|            If *state* is ``True`` this returns the `.DraggableLegend` helper
1194|            instance. Otherwise this returns *None*.
1195|        """
1196|        if state:
1197|            if self._draggable is None:
1198|                self._draggable = DraggableLegend(self,
1199|                                                  use_blit,
1200|                                                  update=update)
1201|        else:
1202|            if self._draggable is not None:
1203|                self._draggable.disconnect()
1204|            self._draggable = None
1205|        return self._draggable
1206|
1207|    def get_draggable(self):
1208|        """Return ``True`` if the legend is draggable, ``False`` otherwise."""
1209|        return self._draggable is not None
1210|
1211|
1212|# Helper functions to parse legend arguments for both `figure.legend` and
1213|# `axes.legend`:
1214|def _get_legend_handles(axs, legend_handler_map=None):
1215|    """Yield artists that can be used as handles in a legend."""
1216|    handles_original = []
1217|    for ax in axs:
1218|        handles_original += [
1219|            *(a for a in ax._children
1220|              if isinstance(a, (Line2D, Patch, Collection, Text))),
1221|            *ax.containers]
1222|        # support parasite axes:
1223|        if hasattr(ax, 'parasites'):
1224|            for axx in ax.parasites:
1225|                handles_original += [
1226|                    *(a for a in axx._children
1227|                      if isinstance(a, (Line2D, Patch, Collection, Text))),
1228|                    *axx.containers]
1229|
1230|    handler_map = {**Legend.get_default_handler_map(),
1231|                   **(legend_handler_map or {})}
1232|    has_handler = Legend.get_legend_handler
1233|    for handle in handles_original:
1234|        label = handle.get_label()
1235|        if label != '_nolegend_' and has_handler(handler_map, handle):
1236|            yield handle
1237|        elif (label and not label.startswith('_') and
1238|                not has_handler(handler_map, handle)):
1239|            _api.warn_external(
1240|                             "Legend does not support handles for "
1241|                             f"{type(handle).__name__} "
1242|                             "instances.\nSee: https://matplotlib.org/stable/"
1243|                             "tutorials/intermediate/legend_guide.html"
1244|                             "#implementing-a-custom-legend-handler")
1245|            continue
1246|
1247|
1248|def _get_legend_handles_labels(axs, legend_handler_map=None):
1249|    """Return handles and labels for legend."""
1250|    handles = []
1251|    labels = []
1252|    for handle in _get_legend_handles(axs, legend_handler_map):
1253|        label = handle.get_label()
1254|        if label and not label.startswith('_'):
1255|            handles.append(handle)
1256|            labels.append(label)
1257|    return handles, labels
1258|
1259|
1260|def _parse_legend_args(axs, *args, handles=None, labels=None, **kwargs):
1261|    """
1262|    Get the handles and labels from the calls to either ``figure.legend``
1263|    or ``axes.legend``.
1264|
1265|    The parser is a bit involved because we support::
1266|
1267|        legend()
1268|        legend(labels)
1269|        legend(handles, labels)
1270|        legend(labels=labels)
1271|        legend(handles=handles)
1272|        legend(handles=handles, labels=labels)
1273|
1274|    The behavior for a mixture of positional and keyword handles and labels
1275|    is undefined and issues a warning.
1276|
1277|    Parameters
1278|    ----------
1279|    axs : list of `.Axes`
1280|        If handles are not given explicitly, the artists in these Axes are
1281|        used as handles.
1282|    *args : tuple
1283|        Positional parameters passed to ``legend()``.
1284|    handles
1285|        The value of the keyword argument ``legend(handles=...)``, or *None*
1286|        if that keyword argument was not used.
1287|    labels
1288|        The value of the keyword argument ``legend(labels=...)``, or *None*
1289|        if that keyword argument was not used.
1290|    **kwargs
1291|        All other keyword arguments passed to ``legend()``.
1292|
1293|    Returns
1294|    -------
1295|    handles : list of `.Artist`
1296|        The legend handles.
1297|    labels : list of str
1298|        The legend labels.
1299|    extra_args : tuple
1300|        *args* with positional handles and labels removed.
1301|    kwargs : dict
1302|        *kwargs* with keywords handles and labels removed.
1303|
1304|    """
1305|    log = logging.getLogger(__name__)
1306|
1307|    handlers = kwargs.get('handler_map')
1308|    extra_args = ()
1309|
1310|    if (handles is not None or labels is not None) and args:
1311|        _api.warn_external("You have mixed positional and keyword arguments, "
1312|                           "some input may be discarded.")
1313|
1314|    # if got both handles and labels as kwargs, make same length
1315|    if handles and labels:
1316|        handles, labels = zip(*zip(handles, labels))
1317|
1318|    elif handles is not None and labels is None:
1319|        labels = [handle.get_label() for handle in handles]
1320|
1321|    elif labels is not None and handles is None:
1322|        # Get as many handles as there are labels.
1323|        handles = [handle for handle, label
1324|                   in zip(_get_legend_handles(axs, handlers), labels)]
1325|
1326|    # No arguments - automatically detect labels and handles.
1327|    elif len(args) == 0:
1328|        handles, labels = _get_legend_handles_labels(axs, handlers)
1329|        if not handles:
1330|            log.warning(
1331|                "No artists with labels found to put in legend.  Note that "
1332|                "artists whose label start with an underscore are ignored "
1333|                "when legend() is called with no argument.")
1334|
1335|    # One argument. User defined labels - automatic handle detection.
1336|    elif len(args) == 1:
1337|        labels, = args
1338|        if any(isinstance(l, Artist) for l in labels):
1339|            raise TypeError("A single argument passed to legend() must be a "
1340|                            "list of labels, but found an Artist in there.")
1341|
1342|        # Get as many handles as there are labels.
1343|        handles = [handle for handle, label
1344|                   in zip(_get_legend_handles(axs, handlers), labels)]
1345|
1346|    # Two arguments:
1347|    #   * user defined handles and labels
1348|    elif len(args) >= 2:
1349|        handles, labels = args[:2]
1350|        extra_args = args[2:]
1351|
1352|    else:
1353|        raise TypeError('Invalid arguments to legend.')
1354|
1355|    return handles, labels, extra_args, kwargs


============================================================



ACTION:

THOUGHT: After analyzing the code, I can see that the issue is related to pickling of draggable legends. The `DraggableLegend` class (line 53) inherits from `DraggableOffsetBox`, which is imported from `matplotlib.offsetbox`.

Let me check the `offsetbox.py` implementation:
CODE:
open_file('/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/offsetbox.py')

============================================================



OBSERVATION:

[File: /workspace/matplotlib__matplotlib__3.7/lib/matplotlib/offsetbox.py (1621 lines total)]
1|r"""
2|Container classes for `.Artist`\s.
3|
4|`OffsetBox`
5|    The base of all container artists defined in this module.
6|
7|`AnchoredOffsetbox`, `AnchoredText`
8|    Anchor and align an arbitrary `.Artist` or a text relative to the parent
9|    axes or a specific anchor point.
10|
11|`DrawingArea`
12|    A container with fixed width and height. Children have a fixed position
13|    inside the container and may be clipped.
14|
15|`HPacker`, `VPacker`
16|    Containers for layouting their children vertically or horizontally.
17|
18|`PaddedBox`
19|    A container to add a padding around an `.Artist`.
20|
21|`TextArea`
22|    Contains a single `.Text` instance.
23|"""
24|
25|import functools
26|
27|import numpy as np
28|
29|import matplotlib as mpl
30|from matplotlib import _api, _docstring
31|import matplotlib.artist as martist
32|import matplotlib.path as mpath
33|import matplotlib.text as mtext
34|import matplotlib.transforms as mtransforms
35|from matplotlib.font_manager import FontProperties
36|from matplotlib.image import BboxImage
37|from matplotlib.patches import (
38|    FancyBboxPatch, FancyArrowPatch, bbox_artist as mbbox_artist)
39|from matplotlib.transforms import Bbox, BboxBase, TransformedBbox
40|
41|
42|DEBUG = False
43|
44|
45|def _compat_get_offset(meth):
46|    """
47|    Decorator for the get_offset method of OffsetBox and subclasses, that
48|    allows supporting both the new signature (self, bbox, renderer) and the old
49|    signature (self, width, height, xdescent, ydescent, renderer).
50|    """
51|    sigs = [lambda self, width, height, xdescent, ydescent, renderer: locals(),
52|            lambda self, bbox, renderer: locals()]
53|
54|    @functools.wraps(meth)
55|    def get_offset(self, *args, **kwargs):
56|        params = _api.select_matching_signature(sigs, self, *args, **kwargs)
57|        bbox = (params["bbox"] if "bbox" in params else
58|                Bbox.from_bounds(-params["xdescent"], -params["ydescent"],
59|                                 params["width"], params["height"]))
60|        return meth(params["self"], bbox, params["renderer"])
61|    return get_offset
62|
63|
64|@_api.deprecated("3.7", alternative='patches.bbox_artist')
65|def bbox_artist(*args, **kwargs):
66|    if DEBUG:
67|        mbbox_artist(*args, **kwargs)
68|
69|
70|# for debugging use
71|def _bbox_artist(*args, **kwargs):
72|    if DEBUG:
73|        mbbox_artist(*args, **kwargs)
74|
75|
76|def _get_packed_offsets(widths, total, sep, mode="fixed"):
77|    r"""
78|    Pack boxes specified by their *widths*.
79|
80|    For simplicity of the description, the terminology used here assumes a
81|    horizontal layout, but the function works equally for a vertical layout.
82|
83|    There are three packing *mode*\s:
84|
85|    - 'fixed': The elements are packed tight to the left with a spacing of
86|      *sep* in between. If *total* is *None* the returned total will be the
87|      right edge of the last box. A non-*None* total will be passed unchecked
88|      to the output. In particular this means that right edge of the last
89|      box may be further to the right than the returned total.
90|
91|    - 'expand': Distribute the boxes with equal spacing so that the left edge
92|      of the first box is at 0, and the right edge of the last box is at
93|      *total*. The parameter *sep* is ignored in this mode. A total of *None*
94|      is accepted and considered equal to 1. The total is returned unchanged
95|      (except for the conversion *None* to 1). If the total is smaller than
96|      the sum of the widths, the laid out boxes will overlap.
97|
98|    - 'equal': If *total* is given, the total space is divided in N equal
99|      ranges and each box is left-aligned within its subspace.
100|      Otherwise (*total* is *None*), *sep* must be provided and each box is
101|      left-aligned in its subspace of width ``(max(widths) + sep)``. The
102|      total width is then calculated to be ``N * (max(widths) + sep)``.
103|
104|    Parameters
105|    ----------
106|    widths : list of float
107|        Widths of boxes to be packed.
108|    total : float or None
109|        Intended total length. *None* if not used.
110|    sep : float
111|        Spacing between boxes.
112|    mode : {'fixed', 'expand', 'equal'}
113|        The packing mode.
114|
115|    Returns
116|    -------
117|    total : float
118|        The total width needed to accommodate the laid out boxes.
119|    offsets : array of float
120|        The left offsets of the boxes.
121|    """
122|    _api.check_in_list(["fixed", "expand", "equal"], mode=mode)
123|
124|    if mode == "fixed":
125|        offsets_ = np.cumsum([0] + [w + sep for w in widths])
126|        offsets = offsets_[:-1]
127|        if total is None:
128|            total = offsets_[-1] - sep
129|        return total, offsets
130|
131|    elif mode == "expand":
132|        # This is a bit of a hack to avoid a TypeError when *total*
133|        # is None and used in conjugation with tight layout.
134|        if total is None:
135|            total = 1
136|        if len(widths) > 1:
137|            sep = (total - sum(widths)) / (len(widths) - 1)
138|        else:
139|            sep = 0
140|        offsets_ = np.cumsum([0] + [w + sep for w in widths])
141|        offsets = offsets_[:-1]
142|        return total, offsets
143|
144|    elif mode == "equal":
145|        maxh = max(widths)
146|        if total is None:
147|            if sep is None:
148|                raise ValueError("total and sep cannot both be None when "
149|                                 "using layout mode 'equal'")
150|            total = (maxh + sep) * len(widths)
151|        else:
152|            sep = total / len(widths) - maxh
153|        offsets = (maxh + sep) * np.arange(len(widths))
154|        return total, offsets
155|
156|
157|def _get_aligned_offsets(yspans, height, align="baseline"):
158|    """
159|    Align boxes each specified by their ``(y0, y1)`` spans.
160|
161|    For simplicity of the description, the terminology used here assumes a
162|    horizontal layout (i.e., vertical alignment), but the function works
163|    equally for a vertical layout.
164|
165|    Parameters
166|    ----------
167|    yspans
168|        List of (y0, y1) spans of boxes to be aligned.
169|    height : float or None
170|        Intended total height. If None, the maximum of the heights
171|        (``y1 - y0``) in *yspans* is used.
172|    align : {'baseline', 'left', 'top', 'right', 'bottom', 'center'}
173|        The alignment anchor of the boxes.
174|
175|    Returns
176|    -------
177|    (y0, y1)
178|        y range spanned by the packing.  If a *height* was originally passed
179|        in, then for all alignments other than "baseline", a span of ``(0,
180|        height)`` is used without checking that it is actually large enough).
181|    descent
182|        The descent of the packing.
183|    offsets
184|        The bottom offsets of the boxes.
185|    """
186|
187|    _api.check_in_list(
188|        ["baseline", "left", "top", "right", "bottom", "center"], align=align)
189|    if height is None:
190|        height = max(y1 - y0 for y0, y1 in yspans)
191|
192|    if align == "baseline":
193|        yspan = (min(y0 for y0, y1 in yspans), max(y1 for y0, y1 in yspans))
194|        offsets = [0] * len(yspans)
195|    elif align in ["left", "bottom"]:
196|        yspan = (0, height)
197|        offsets = [-y0 for y0, y1 in yspans]
198|    elif align in ["right", "top"]:
199|        yspan = (0, height)
200|        offsets = [height - y1 for y0, y1 in yspans]
201|    elif align == "center":
202|        yspan = (0, height)
203|        offsets = [(height - (y1 - y0)) * .5 - y0 for y0, y1 in yspans]
204|
205|    return yspan, offsets
206|
207|
208|class OffsetBox(martist.Artist):
209|    """
210|    The OffsetBox is a simple container artist.
211|
212|    The child artists are meant to be drawn at a relative position to its
213|    parent.
214|
215|    Being an artist itself, all parameters are passed on to `.Artist`.
216|    """
217|    def __init__(self, *args, **kwargs):
218|        super().__init__(*args)
219|        self._internal_update(kwargs)
220|        # Clipping has not been implemented in the OffsetBox family, so
221|        # disable the clip flag for consistency. It can always be turned back
222|        # on to zero effect.
223|        self.set_clip_on(False)
224|        self._children = []
225|        self._offset = (0, 0)
226|
227|    def set_figure(self, fig):
228|        """
229|        Set the `.Figure` for the `.OffsetBox` and all its children.
230|
231|        Parameters
232|        ----------
233|        fig : `~matplotlib.figure.Figure`
234|        """
235|        super().set_figure(fig)
236|        for c in self.get_children():
237|            c.set_figure(fig)
238|
239|    @martist.Artist.axes.setter
240|    def axes(self, ax):
241|        # TODO deal with this better
242|        martist.Artist.axes.fset(self, ax)
243|        for c in self.get_children():
244|            if c is not None:
245|                c.axes = ax
246|
247|    def contains(self, mouseevent):
248|        """
249|        Delegate the mouse event contains-check to the children.
250|
251|        As a container, the `.OffsetBox` does not respond itself to
252|        mouseevents.
253|
254|        Parameters
255|        ----------
256|        mouseevent : `matplotlib.backend_bases.MouseEvent`
257|
258|        Returns
259|        -------
260|        contains : bool
261|            Whether any values are within the radius.
262|        details : dict
263|            An artist-specific dictionary of details of the event context,
264|            such as which points are contained in the pick radius. See the
265|            individual Artist subclasses for details.
266|
267|        See Also
268|        --------
269|        .Artist.contains
270|        """
271|        inside, info = self._default_contains(mouseevent)
272|        if inside is not None:
273|            return inside, info
274|        for c in self.get_children():
275|            a, b = c.contains(mouseevent)
276|            if a:
277|                return a, b
278|        return False, {}
279|
280|    def set_offset(self, xy):
281|        """
282|        Set the offset.
283|
284|        Parameters
285|        ----------
286|        xy : (float, float) or callable
287|            The (x, y) coordinates of the offset in display units. These can
288|            either be given explicitly as a tuple (x, y), or by providing a
289|            function that converts the extent into the offset. This function
290|            must have the signature::
291|
292|                def offset(width, height, xdescent, ydescent, renderer) \
293|-> (float, float)
294|        """
295|        self._offset = xy
296|        self.stale = True
297|
298|    @_compat_get_offset
299|    def get_offset(self, bbox, renderer):
300|        """
301|        Return the offset as a tuple (x, y).
302|
303|        The extent parameters have to be provided to handle the case where the
304|        offset is dynamically determined by a callable (see
305|        `~.OffsetBox.set_offset`).
306|
307|        Parameters
308|        ----------
309|        bbox : `.Bbox`
310|        renderer : `.RendererBase` subclass
311|        """
312|        return (
313|            self._offset(bbox.width, bbox.height, -bbox.x0, -bbox.y0, renderer)
314|            if callable(self._offset)
315|            else self._offset)
316|
317|    def set_width(self, width):
318|        """
319|        Set the width of the box.
320|
321|        Parameters
322|        ----------
323|        width : float
324|        """
325|        self.width = width
326|        self.stale = True
327|
328|    def set_height(self, height):
329|        """
330|        Set the height of the box.
331|
332|        Parameters
333|        ----------
334|        height : float
335|        """
336|        self.height = height
337|        self.stale = True
338|
339|    def get_visible_children(self):
340|        r"""Return a list of the visible child `.Artist`\s."""
341|        return [c for c in self._children if c.get_visible()]
342|
343|    def get_children(self):
344|        r"""Return a list of the child `.Artist`\s."""
345|        return self._children
346|
347|    def _get_bbox_and_child_offsets(self, renderer):
348|        """
349|        Return the bbox of the offsetbox and the child offsets.
350|
351|        The bbox should satisfy ``x0 <= x1 and y0 <= y1``.
352|
353|        Parameters
354|        ----------
355|        renderer : `.RendererBase` subclass
356|
357|        Returns
358|        -------
359|        bbox
360|        list of (xoffset, yoffset) pairs
361|        """
362|        raise NotImplementedError(
363|            "get_bbox_and_offsets must be overridden in derived classes")
364|
365|    def get_bbox(self, renderer):
366|        """Return the bbox of the offsetbox, ignoring parent offsets."""
367|        bbox, offsets = self._get_bbox_and_child_offsets(renderer)
368|        return bbox
369|
370|    @_api.deprecated("3.7", alternative="get_bbox and child.get_offset")
371|    def get_extent_offsets(self, renderer):
372|        """
373|        Update offset of the children and return the extent of the box.
374|
375|        Parameters
376|        ----------
377|        renderer : `.RendererBase` subclass
378|
379|        Returns
380|        -------
381|        width
382|        height
383|        xdescent
384|        ydescent
385|        list of (xoffset, yoffset) pairs
386|        """
387|        bbox, offsets = self._get_bbox_and_child_offsets(renderer)
388|        return bbox.width, bbox.height, -bbox.x0, -bbox.y0, offsets
389|
390|    @_api.deprecated("3.7", alternative="get_bbox")
391|    def get_extent(self, renderer):
392|        """Return a tuple ``width, height, xdescent, ydescent`` of the box."""
393|        bbox = self.get_bbox(renderer)
394|        return bbox.width, bbox.height, -bbox.x0, -bbox.y0
395|
396|    def get_window_extent(self, renderer=None):
397|        # docstring inherited
398|        if renderer is None:
399|            renderer = self.figure._get_renderer()
400|        bbox = self.get_bbox(renderer)
401|        try:  # Some subclasses redefine get_offset to take no args.
402|            px, py = self.get_offset(bbox, renderer)
403|        except TypeError:
404|            px, py = self.get_offset()
405|        return bbox.translated(px, py)
406|
407|    def draw(self, renderer):
408|        """
409|        Update the location of children if necessary and draw them
410|        to the given *renderer*.
411|        """
412|        bbox, offsets = self._get_bbox_and_child_offsets(renderer)
413|        px, py = self.get_offset(bbox, renderer)
414|        for c, (ox, oy) in zip(self.get_visible_children(), offsets):
415|            c.set_offset((px + ox, py + oy))
416|            c.draw(renderer)
417|        _bbox_artist(self, renderer, fill=False, props=dict(pad=0.))
418|        self.stale = False
419|
420|
421|class PackerBase(OffsetBox):
422|    def __init__(self, pad=0., sep=0., width=None, height=None,
423|                 align="baseline", mode="fixed", children=None):
424|        """
425|        Parameters
426|        ----------
427|        pad : float, default: 0.0
428|            The boundary padding in points.
429|
430|        sep : float, default: 0.0
431|            The spacing between items in points.
432|
433|        width, height : float, optional
434|            Width and height of the container box in pixels, calculated if
435|            *None*.
436|
437|        align : {'top', 'bottom', 'left', 'right', 'center', 'baseline'}, \
438|default: 'baseline'
439|            Alignment of boxes.
440|
441|        mode : {'fixed', 'expand', 'equal'}, default: 'fixed'
442|            The packing mode.
443|
444|            - 'fixed' packs the given `.Artist`\\s tight with *sep* spacing.
445|            - 'expand' uses the maximal available space to distribute the
446|              artists with equal spacing in between.
447|            - 'equal': Each artist an equal fraction of the available space
448|              and is left-aligned (or top-aligned) therein.
449|
450|        children : list of `.Artist`
451|            The artists to pack.
452|
453|        Notes
454|        -----
455|        *pad* and *sep* are in points and will be scaled with the renderer
456|        dpi, while *width* and *height* are in pixels.
457|        """
458|        super().__init__()
459|        self.height = height
460|        self.width = width
461|        self.sep = sep
462|        self.pad = pad
463|        self.mode = mode
464|        self.align = align
465|        self._children = children
466|
467|
468|class VPacker(PackerBase):
469|    """
470|    VPacker packs its children vertically, automatically adjusting their
471|    relative positions at draw time.
472|    """
473|
474|    def _get_bbox_and_child_offsets(self, renderer):
475|        # docstring inherited
476|        dpicor = renderer.points_to_pixels(1.)
477|        pad = self.pad * dpicor
478|        sep = self.sep * dpicor
479|
480|        if self.width is not None:
481|            for c in self.get_visible_children():
482|                if isinstance(c, PackerBase) and c.mode == "expand":
483|                    c.set_width(self.width)
484|
485|        bboxes = [c.get_bbox(renderer) for c in self.get_visible_children()]
486|        (x0, x1), xoffsets = _get_aligned_offsets(
487|            [bbox.intervalx for bbox in bboxes], self.width, self.align)
488|        height, yoffsets = _get_packed_offsets(
489|            [bbox.height for bbox in bboxes], self.height, sep, self.mode)
490|
491|        yoffsets = height - (yoffsets + [bbox.y1 for bbox in bboxes])
492|        ydescent = yoffsets[0]
493|        yoffsets = yoffsets - ydescent
494|
495|        return (
496|            Bbox.from_bounds(x0, -ydescent, x1 - x0, height).padded(pad),
497|            [*zip(xoffsets, yoffsets)])
498|
499|
500|class HPacker(PackerBase):
501|    """
502|    HPacker packs its children horizontally, automatically adjusting their
503|    relative positions at draw time.
504|    """
505|
506|    def _get_bbox_and_child_offsets(self, renderer):
507|        # docstring inherited
508|        dpicor = renderer.points_to_pixels(1.)
509|        pad = self.pad * dpicor
510|        sep = self.sep * dpicor
511|
512|        bboxes = [c.get_bbox(renderer) for c in self.get_visible_children()]
513|        if not bboxes:
514|            return Bbox.from_bounds(0, 0, 0, 0).padded(pad), []
515|
516|        (y0, y1), yoffsets = _get_aligned_offsets(
517|            [bbox.intervaly for bbox in bboxes], self.height, self.align)
518|        width, xoffsets = _get_packed_offsets(
519|            [bbox.width for bbox in bboxes], self.width, sep, self.mode)
520|
521|        x0 = bboxes[0].x0
522|        xoffsets -= ([bbox.x0 for bbox in bboxes] - x0)
523|
524|        return (Bbox.from_bounds(x0, y0, width, y1 - y0).padded(pad),
525|                [*zip(xoffsets, yoffsets)])
526|
527|
528|class PaddedBox(OffsetBox):
529|    """
530|    A container to add a padding around an `.Artist`.
531|
532|    The `.PaddedBox` contains a `.FancyBboxPatch` that is used to visualize
533|    it when rendering.
534|    """
535|
536|    @_api.make_keyword_only("3.6", name="draw_frame")
537|    def __init__(self, child, pad=0., draw_frame=False, patch_attrs=None):
538|        """
539|        Parameters
540|        ----------
541|        child : `~matplotlib.artist.Artist`
542|            The contained `.Artist`.
543|        pad : float, default: 0.0
544|            The padding in points. This will be scaled with the renderer dpi.
545|            In contrast, *width* and *height* are in *pixels* and thus not
546|            scaled.
547|        draw_frame : bool
548|            Whether to draw the contained `.FancyBboxPatch`.
549|        patch_attrs : dict or None
550|            Additional parameters passed to the contained `.FancyBboxPatch`.
551|        """
552|        super().__init__()
553|        self.pad = pad
554|        self._children = [child]
555|        self.patch = FancyBboxPatch(
556|            xy=(0.0, 0.0), width=1., height=1.,
557|            facecolor='w', edgecolor='k',
558|            mutation_scale=1,  # self.prop.get_size_in_points(),
559|            snap=True,
560|            visible=draw_frame,
561|            boxstyle="square,pad=0",
562|        )
563|        if patch_attrs is not None:
564|            self.patch.update(patch_attrs)
565|
566|    def _get_bbox_and_child_offsets(self, renderer):
567|        # docstring inherited.
568|        pad = self.pad * renderer.points_to_pixels(1.)
569|        return (self._children[0].get_bbox(renderer).padded(pad), [(0, 0)])
570|
571|    def draw(self, renderer):
572|        # docstring inherited
573|        bbox, offsets = self._get_bbox_and_child_offsets(renderer)
574|        px, py = self.get_offset(bbox, renderer)
575|        for c, (ox, oy) in zip(self.get_visible_children(), offsets):
576|            c.set_offset((px + ox, py + oy))
577|
578|        self.draw_frame(renderer)
579|
580|        for c in self.get_visible_children():
581|            c.draw(renderer)
582|
583|        self.stale = False
584|
585|    def update_frame(self, bbox, fontsize=None):
586|        self.patch.set_bounds(bbox.bounds)
587|        if fontsize:
588|            self.patch.set_mutation_scale(fontsize)
589|        self.stale = True
590|
591|    def draw_frame(self, renderer):
592|        # update the location and size of the legend
593|        self.update_frame(self.get_window_extent(renderer))
594|        self.patch.draw(renderer)
595|
596|
597|class DrawingArea(OffsetBox):
598|    """
599|    The DrawingArea can contain any Artist as a child. The DrawingArea
600|    has a fixed width and height. The position of children relative to
601|    the parent is fixed. The children can be clipped at the
602|    boundaries of the parent.
603|    """
604|
605|    def __init__(self, width, height, xdescent=0., ydescent=0., clip=False):
606|        """
607|        Parameters
608|        ----------
609|        width, height : float
610|            Width and height of the container box.
611|        xdescent, ydescent : float
612|            Descent of the box in x- and y-direction.
613|        clip : bool
614|            Whether to clip the children to the box.
615|        """
616|        super().__init__()
617|        self.width = width
618|        self.height = height
619|        self.xdescent = xdescent
620|        self.ydescent = ydescent
621|        self._clip_children = clip
622|        self.offset_transform = mtransforms.Affine2D()
623|        self.dpi_transform = mtransforms.Affine2D()
624|
625|    @property
626|    def clip_children(self):
627|        """
628|        If the children of this DrawingArea should be clipped
629|        by DrawingArea bounding box.
630|        """
631|        return self._clip_children
632|
633|    @clip_children.setter
634|    def clip_children(self, val):
635|        self._clip_children = bool(val)
636|        self.stale = True
637|
638|    def get_transform(self):
639|        """
640|        Return the `~matplotlib.transforms.Transform` applied to the children.
641|        """
642|        return self.dpi_transform + self.offset_transform
643|
644|    def set_transform(self, t):
645|        """
646|        set_transform is ignored.
647|        """
648|
649|    def set_offset(self, xy):
650|        """
651|        Set the offset of the container.
652|
653|        Parameters
654|        ----------
655|        xy : (float, float)
656|            The (x, y) coordinates of the offset in display units.
657|        """
658|        self._offset = xy
659|        self.offset_transform.clear()
660|        self.offset_transform.translate(xy[0], xy[1])
661|        self.stale = True
662|
663|    def get_offset(self):
664|        """Return offset of the container."""
665|        return self._offset
666|
667|    def get_bbox(self, renderer):
668|        # docstring inherited
669|        dpi_cor = renderer.points_to_pixels(1.)
670|        return Bbox.from_bounds(
671|            -self.xdescent * dpi_cor, -self.ydescent * dpi_cor,
672|            self.width * dpi_cor, self.height * dpi_cor)
673|
674|    def add_artist(self, a):
675|        """Add an `.Artist` to the container box."""
676|        self._children.append(a)
677|        if not a.is_transform_set():
678|            a.set_transform(self.get_transform())
679|        if self.axes is not None:
680|            a.axes = self.axes
681|        fig = self.figure
682|        if fig is not None:
683|            a.set_figure(fig)
684|
685|    def draw(self, renderer):
686|        # docstring inherited
687|
688|        dpi_cor = renderer.points_to_pixels(1.)
689|        self.dpi_transform.clear()
690|        self.dpi_transform.scale(dpi_cor)
691|
692|        # At this point the DrawingArea has a transform
693|        # to the display space so the path created is
694|        # good for clipping children
695|        tpath = mtransforms.TransformedPath(
696|            mpath.Path([[0, 0], [0, self.height],
697|                        [self.width, self.height],
698|                        [self.width, 0]]),
699|            self.get_transform())
700|        for c in self._children:
701|            if self._clip_children and not (c.clipbox or c._clippath):
702|                c.set_clip_path(tpath)
703|            c.draw(renderer)
704|
705|        _bbox_artist(self, renderer, fill=False, props=dict(pad=0.))
706|        self.stale = False
707|
708|
709|class TextArea(OffsetBox):
710|    """
711|    The TextArea is a container artist for a single Text instance.
712|
713|    The text is placed at (0, 0) with baseline+left alignment, by default. The
714|    width and height of the TextArea instance is the width and height of its
715|    child text.
716|    """
717|
718|    @_api.make_keyword_only("3.6", name="textprops")
719|    def __init__(self, s,
720|                 textprops=None,
721|                 multilinebaseline=False,
722|                 ):
723|        """
724|        Parameters
725|        ----------
726|        s : str
727|            The text to be displayed.
728|        textprops : dict, default: {}
729|            Dictionary of keyword parameters to be passed to the `.Text`
730|            instance in the TextArea.
731|        multilinebaseline : bool, default: False
732|            Whether the baseline for multiline text is adjusted so that it
733|            is (approximately) center-aligned with single-line text.
734|        """
735|        if textprops is None:
736|            textprops = {}
737|        self._text = mtext.Text(0, 0, s, **textprops)
738|        super().__init__()
739|        self._children = [self._text]
740|        self.offset_transform = mtransforms.Affine2D()
741|        self._baseline_transform = mtransforms.Affine2D()
742|        self._text.set_transform(self.offset_transform +
743|                                 self._baseline_transform)
744|        self._multilinebaseline = multilinebaseline
745|
746|    def set_text(self, s):
747|        """Set the text of this area as a string."""
748|        self._text.set_text(s)
749|        self.stale = True
750|
751|    def get_text(self):
752|        """Return the string representation of this area's text."""
753|        return self._text.get_text()
754|
755|    def set_multilinebaseline(self, t):
756|        """
757|        Set multilinebaseline.
758|
759|        If True, the baseline for multiline text is adjusted so that it is
760|        (approximately) center-aligned with single-line text.  This is used
761|        e.g. by the legend implementation so that single-line labels are
762|        baseline-aligned, but multiline labels are "center"-aligned with them.
763|        """
764|        self._multilinebaseline = t
765|        self.stale = True
766|
767|    def get_multilinebaseline(self):
768|        """
769|        Get multilinebaseline.
770|        """
771|        return self._multilinebaseline
772|
773|    def set_transform(self, t):
774|        """
775|        set_transform is ignored.
776|        """
777|
778|    def set_offset(self, xy):
779|        """
780|        Set the offset of the container.
781|
782|        Parameters
783|        ----------
784|        xy : (float, float)
785|            The (x, y) coordinates of the offset in display units.
786|        """
787|        self._offset = xy
788|        self.offset_transform.clear()
789|        self.offset_transform.translate(xy[0], xy[1])
790|        self.stale = True
791|
792|    def get_offset(self):
793|        """Return offset of the container."""
794|        return self._offset
795|
796|    def get_bbox(self, renderer):
797|        _, h_, d_ = renderer.get_text_width_height_descent(
798|            "lp", self._text._fontproperties,
799|            ismath="TeX" if self._text.get_usetex() else False)
800|
801|        bbox, info, yd = self._text._get_layout(renderer)
802|        w, h = bbox.size
803|
804|        self._baseline_transform.clear()
805|
806|        if len(info) > 1 and self._multilinebaseline:
807|            yd_new = 0.5 * h - 0.5 * (h_ - d_)
808|            self._baseline_transform.translate(0, yd - yd_new)
809|            yd = yd_new
810|        else:  # single line
811|            h_d = max(h_ - d_, h - yd)
812|            h = h_d + yd
813|
814|        ha = self._text.get_horizontalalignment()
815|        x0 = {"left": 0, "center": -w / 2, "right": -w}[ha]
816|
817|        return Bbox.from_bounds(x0, -yd, w, h)
818|
819|    def draw(self, renderer):
820|        # docstring inherited
821|        self._text.draw(renderer)
822|        _bbox_artist(self, renderer, fill=False, props=dict(pad=0.))
823|        self.stale = False
824|
825|
826|class AuxTransformBox(OffsetBox):
827|    """
828|    Offset Box with the aux_transform. Its children will be
829|    transformed with the aux_transform first then will be
830|    offsetted. The absolute coordinate of the aux_transform is meaning
831|    as it will be automatically adjust so that the left-lower corner
832|    of the bounding box of children will be set to (0, 0) before the
833|    offset transform.
834|
835|    It is similar to drawing area, except that the extent of the box
836|    is not predetermined but calculated from the window extent of its
837|    children. Furthermore, the extent of the children will be
838|    calculated in the transformed coordinate.
839|    """
840|    def __init__(self, aux_transform):
841|        self.aux_transform = aux_transform
842|        super().__init__()
843|        self.offset_transform = mtransforms.Affine2D()
844|        # ref_offset_transform makes offset_transform always relative to the
845|        # lower-left corner of the bbox of its children.
846|        self.ref_offset_transform = mtransforms.Affine2D()
847|
848|    def add_artist(self, a):
849|        """Add an `.Artist` to the container box."""
850|        self._children.append(a)
851|        a.set_transform(self.get_transform())
852|        self.stale = True
853|
854|    def get_transform(self):
855|        """
856|        Return the :class:`~matplotlib.transforms.Transform` applied
857|        to the children
858|        """
859|        return (self.aux_transform
860|                + self.ref_offset_transform
861|                + self.offset_transform)
862|
863|    def set_transform(self, t):
864|        """
865|        set_transform is ignored.
866|        """
867|
868|    def set_offset(self, xy):
869|        """
870|        Set the offset of the container.
871|
872|        Parameters
873|        ----------
874|        xy : (float, float)
875|            The (x, y) coordinates of the offset in display units.
876|        """
877|        self._offset = xy
878|        self.offset_transform.clear()
879|        self.offset_transform.translate(xy[0], xy[1])
880|        self.stale = True
881|
882|    def get_offset(self):
883|        """Return offset of the container."""
884|        return self._offset
885|
886|    def get_bbox(self, renderer):
887|        # clear the offset transforms
888|        _off = self.offset_transform.get_matrix()  # to be restored later
889|        self.ref_offset_transform.clear()
890|        self.offset_transform.clear()
891|        # calculate the extent
892|        bboxes = [c.get_window_extent(renderer) for c in self._children]
893|        ub = Bbox.union(bboxes)
894|        # adjust ref_offset_transform
895|        self.ref_offset_transform.translate(-ub.x0, -ub.y0)
896|        # restore offset transform
897|        self.offset_transform.set_matrix(_off)
898|        return Bbox.from_bounds(0, 0, ub.width, ub.height)
899|
900|    def draw(self, renderer):
901|        # docstring inherited
902|        for c in self._children:
903|            c.draw(renderer)
904|        _bbox_artist(self, renderer, fill=False, props=dict(pad=0.))
905|        self.stale = False
906|
907|
908|class AnchoredOffsetbox(OffsetBox):
909|    """
910|    An offset box placed according to location *loc*.
911|
912|    AnchoredOffsetbox has a single child.  When multiple children are needed,
913|    use an extra OffsetBox to enclose them.  By default, the offset box is
914|    anchored against its parent axes. You may explicitly specify the
915|    *bbox_to_anchor*.
916|    """
917|    zorder = 5  # zorder of the legend
918|
919|    # Location codes
920|    codes = {'upper right': 1,
921|             'upper left': 2,
922|             'lower left': 3,
923|             'lower right': 4,
924|             'right': 5,
925|             'center left': 6,
926|             'center right': 7,
927|             'lower center': 8,
928|             'upper center': 9,
929|             'center': 10,
930|             }
931|
932|    @_api.make_keyword_only("3.6", name="pad")
933|    def __init__(self, loc,
934|                 pad=0.4, borderpad=0.5,
935|                 child=None, prop=None, frameon=True,
936|                 bbox_to_anchor=None,
937|                 bbox_transform=None,
938|                 **kwargs):
939|        """
940|        Parameters
941|        ----------
942|        loc : str
943|            The box location.  Valid locations are
944|            'upper left', 'upper center', 'upper right',
945|            'center left', 'center', 'center right',
946|            'lower left', 'lower center', 'lower right'.
947|            For backward compatibility, numeric values are accepted as well.
948|            See the parameter *loc* of `.Legend` for details.
949|        pad : float, default: 0.4
950|            Padding around the child as fraction of the fontsize.
951|        borderpad : float, default: 0.5
952|            Padding between the offsetbox frame and the *bbox_to_anchor*.
953|        child : `.OffsetBox`
954|            The box that will be anchored.
955|        prop : `.FontProperties`
956|            This is only used as a reference for paddings. If not given,
957|            :rc:`legend.fontsize` is used.
958|        frameon : bool
959|            Whether to draw a frame around the box.
960|        bbox_to_anchor : `.BboxBase`, 2-tuple, or 4-tuple of floats
961|            Box that is used to position the legend in conjunction with *loc*.
962|        bbox_transform : None or :class:`matplotlib.transforms.Transform`
963|            The transform for the bounding box (*bbox_to_anchor*).
964|        **kwargs
965|            All other parameters are passed on to `.OffsetBox`.
966|
967|        Notes
968|        -----
969|        See `.Legend` for a detailed description of the anchoring mechanism.
970|        """
971|        super().__init__(**kwargs)
972|
973|        self.set_bbox_to_anchor(bbox_to_anchor, bbox_transform)
974|        self.set_child(child)
975|
976|        if isinstance(loc, str):
977|            loc = _api.check_getitem(self.codes, loc=loc)
978|
979|        self.loc = loc
980|        self.borderpad = borderpad
981|        self.pad = pad
982|
983|        if prop is None:
984|            self.prop = FontProperties(size=mpl.rcParams["legend.fontsize"])
985|        else:
986|            self.prop = FontProperties._from_any(prop)
987|            if isinstance(prop, dict) and "size" not in prop:
988|                self.prop.set_size(mpl.rcParams["legend.fontsize"])
989|
990|        self.patch = FancyBboxPatch(
991|            xy=(0.0, 0.0), width=1., height=1.,
992|            facecolor='w', edgecolor='k',
993|            mutation_scale=self.prop.get_size_in_points(),
994|            snap=True,
995|            visible=frameon,
996|            boxstyle="square,pad=0",
997|        )
998|
999|    def set_child(self, child):
1000|        """Set the child to be anchored."""
(621 more lines below)


============================================================



ACTION:

THOUGHT: Let me scroll down to see the DraggableOffsetBox implementation:
CODE:
scroll_down()

============================================================



OBSERVATION:

[File: /workspace/matplotlib__matplotlib__3.7/lib/matplotlib/offsetbox.py (1621 lines total)]
(500 more lines above)
501|    """
502|    HPacker packs its children horizontally, automatically adjusting their
503|    relative positions at draw time.
504|    """
505|
506|    def _get_bbox_and_child_offsets(self, renderer):
507|        # docstring inherited
508|        dpicor = renderer.points_to_pixels(1.)
509|        pad = self.pad * dpicor
510|        sep = self.sep * dpicor
511|
512|        bboxes = [c.get_bbox(renderer) for c in self.get_visible_children()]
513|        if not bboxes:
514|            return Bbox.from_bounds(0, 0, 0, 0).padded(pad), []
515|
516|        (y0, y1), yoffsets = _get_aligned_offsets(
517|            [bbox.intervaly for bbox in bboxes], self.height, self.align)
518|        width, xoffsets = _get_packed_offsets(
519|            [bbox.width for bbox in bboxes], self.width, sep, self.mode)
520|
521|        x0 = bboxes[0].x0
522|        xoffsets -= ([bbox.x0 for bbox in bboxes] - x0)
523|
524|        return (Bbox.from_bounds(x0, y0, width, y1 - y0).padded(pad),
525|                [*zip(xoffsets, yoffsets)])
526|
527|
528|class PaddedBox(OffsetBox):
529|    """
530|    A container to add a padding around an `.Artist`.
531|
532|    The `.PaddedBox` contains a `.FancyBboxPatch` that is used to visualize
533|    it when rendering.
534|    """
535|
536|    @_api.make_keyword_only("3.6", name="draw_frame")
537|    def __init__(self, child, pad=0., draw_frame=False, patch_attrs=None):
538|        """
539|        Parameters
540|        ----------
541|        child : `~matplotlib.artist.Artist`
542|            The contained `.Artist`.
543|        pad : float, default: 0.0
544|            The padding in points. This will be scaled with the renderer dpi.
545|            In contrast, *width* and *height* are in *pixels* and thus not
546|            scaled.
547|        draw_frame : bool
548|            Whether to draw the contained `.FancyBboxPatch`.
549|        patch_attrs : dict or None
550|            Additional parameters passed to the contained `.FancyBboxPatch`.
551|        """
552|        super().__init__()
553|        self.pad = pad
554|        self._children = [child]
555|        self.patch = FancyBboxPatch(
556|            xy=(0.0, 0.0), width=1., height=1.,
557|            facecolor='w', edgecolor='k',
558|            mutation_scale=1,  # self.prop.get_size_in_points(),
559|            snap=True,
560|            visible=draw_frame,
561|            boxstyle="square,pad=0",
562|        )
563|        if patch_attrs is not None:
564|            self.patch.update(patch_attrs)
565|
566|    def _get_bbox_and_child_offsets(self, renderer):
567|        # docstring inherited.
568|        pad = self.pad * renderer.points_to_pixels(1.)
569|        return (self._children[0].get_bbox(renderer).padded(pad), [(0, 0)])
570|
571|    def draw(self, renderer):
572|        # docstring inherited
573|        bbox, offsets = self._get_bbox_and_child_offsets(renderer)
574|        px, py = self.get_offset(bbox, renderer)
575|        for c, (ox, oy) in zip(self.get_visible_children(), offsets):
576|            c.set_offset((px + ox, py + oy))
577|
578|        self.draw_frame(renderer)
579|
580|        for c in self.get_visible_children():
581|            c.draw(renderer)
582|
583|        self.stale = False
584|
585|    def update_frame(self, bbox, fontsize=None):
586|        self.patch.set_bounds(bbox.bounds)
587|        if fontsize:
588|            self.patch.set_mutation_scale(fontsize)
589|        self.stale = True
590|
591|    def draw_frame(self, renderer):
592|        # update the location and size of the legend
593|        self.update_frame(self.get_window_extent(renderer))
594|        self.patch.draw(renderer)
595|
596|
597|class DrawingArea(OffsetBox):
598|    """
599|    The DrawingArea can contain any Artist as a child. The DrawingArea
600|    has a fixed width and height. The position of children relative to
601|    the parent is fixed. The children can be clipped at the
602|    boundaries of the parent.
603|    """
604|
605|    def __init__(self, width, height, xdescent=0., ydescent=0., clip=False):
606|        """
607|        Parameters
608|        ----------
609|        width, height : float
610|            Width and height of the container box.
611|        xdescent, ydescent : float
612|            Descent of the box in x- and y-direction.
613|        clip : bool
614|            Whether to clip the children to the box.
615|        """
616|        super().__init__()
617|        self.width = width
618|        self.height = height
619|        self.xdescent = xdescent
620|        self.ydescent = ydescent
621|        self._clip_children = clip
622|        self.offset_transform = mtransforms.Affine2D()
623|        self.dpi_transform = mtransforms.Affine2D()
624|
625|    @property
626|    def clip_children(self):
627|        """
628|        If the children of this DrawingArea should be clipped
629|        by DrawingArea bounding box.
630|        """
631|        return self._clip_children
632|
633|    @clip_children.setter
634|    def clip_children(self, val):
635|        self._clip_children = bool(val)
636|        self.stale = True
637|
638|    def get_transform(self):
639|        """
640|        Return the `~matplotlib.transforms.Transform` applied to the children.
641|        """
642|        return self.dpi_transform + self.offset_transform
643|
644|    def set_transform(self, t):
645|        """
646|        set_transform is ignored.
647|        """
648|
649|    def set_offset(self, xy):
650|        """
651|        Set the offset of the container.
652|
653|        Parameters
654|        ----------
655|        xy : (float, float)
656|            The (x, y) coordinates of the offset in display units.
657|        """
658|        self._offset = xy
659|        self.offset_transform.clear()
660|        self.offset_transform.translate(xy[0], xy[1])
661|        self.stale = True
662|
663|    def get_offset(self):
664|        """Return offset of the container."""
665|        return self._offset
666|
667|    def get_bbox(self, renderer):
668|        # docstring inherited
669|        dpi_cor = renderer.points_to_pixels(1.)
670|        return Bbox.from_bounds(
671|            -self.xdescent * dpi_cor, -self.ydescent * dpi_cor,
672|            self.width * dpi_cor, self.height * dpi_cor)
673|
674|    def add_artist(self, a):
675|        """Add an `.Artist` to the container box."""
676|        self._children.append(a)
677|        if not a.is_transform_set():
678|            a.set_transform(self.get_transform())
679|        if self.axes is not None:
680|            a.axes = self.axes
681|        fig = self.figure
682|        if fig is not None:
683|            a.set_figure(fig)
684|
685|    def draw(self, renderer):
686|        # docstring inherited
687|
688|        dpi_cor = renderer.points_to_pixels(1.)
689|        self.dpi_transform.clear()
690|        self.dpi_transform.scale(dpi_cor)
691|
692|        # At this point the DrawingArea has a transform
693|        # to the display space so the path created is
694|        # good for clipping children
695|        tpath = mtransforms.TransformedPath(
696|            mpath.Path([[0, 0], [0, self.height],
697|                        [self.width, self.height],
698|                        [self.width, 0]]),
699|            self.get_transform())
700|        for c in self._children:
701|            if self._clip_children and not (c.clipbox or c._clippath):
702|                c.set_clip_path(tpath)
703|            c.draw(renderer)
704|
705|        _bbox_artist(self, renderer, fill=False, props=dict(pad=0.))
706|        self.stale = False
707|
708|
709|class TextArea(OffsetBox):
710|    """
711|    The TextArea is a container artist for a single Text instance.
712|
713|    The text is placed at (0, 0) with baseline+left alignment, by default. The
714|    width and height of the TextArea instance is the width and height of its
715|    child text.
716|    """
717|
718|    @_api.make_keyword_only("3.6", name="textprops")
719|    def __init__(self, s,
720|                 textprops=None,
721|                 multilinebaseline=False,
722|                 ):
723|        """
724|        Parameters
725|        ----------
726|        s : str
727|            The text to be displayed.
728|        textprops : dict, default: {}
729|            Dictionary of keyword parameters to be passed to the `.Text`
730|            instance in the TextArea.
731|        multilinebaseline : bool, default: False
732|            Whether the baseline for multiline text is adjusted so that it
733|            is (approximately) center-aligned with single-line text.
734|        """
735|        if textprops is None:
736|            textprops = {}
737|        self._text = mtext.Text(0, 0, s, **textprops)
738|        super().__init__()
739|        self._children = [self._text]
740|        self.offset_transform = mtransforms.Affine2D()
741|        self._baseline_transform = mtransforms.Affine2D()
742|        self._text.set_transform(self.offset_transform +
743|                                 self._baseline_transform)
744|        self._multilinebaseline = multilinebaseline
745|
746|    def set_text(self, s):
747|        """Set the text of this area as a string."""
748|        self._text.set_text(s)
749|        self.stale = True
750|
751|    def get_text(self):
752|        """Return the string representation of this area's text."""
753|        return self._text.get_text()
754|
755|    def set_multilinebaseline(self, t):
756|        """
757|        Set multilinebaseline.
758|
759|        If True, the baseline for multiline text is adjusted so that it is
760|        (approximately) center-aligned with single-line text.  This is used
761|        e.g. by the legend implementation so that single-line labels are
762|        baseline-aligned, but multiline labels are "center"-aligned with them.
763|        """
764|        self._multilinebaseline = t
765|        self.stale = True
766|
767|    def get_multilinebaseline(self):
768|        """
769|        Get multilinebaseline.
770|        """
771|        return self._multilinebaseline
772|
773|    def set_transform(self, t):
774|        """
775|        set_transform is ignored.
776|        """
777|
778|    def set_offset(self, xy):
779|        """
780|        Set the offset of the container.
781|
782|        Parameters
783|        ----------
784|        xy : (float, float)
785|            The (x, y) coordinates of the offset in display units.
786|        """
787|        self._offset = xy
788|        self.offset_transform.clear()
789|        self.offset_transform.translate(xy[0], xy[1])
790|        self.stale = True
791|
792|    def get_offset(self):
793|        """Return offset of the container."""
794|        return self._offset
795|
796|    def get_bbox(self, renderer):
797|        _, h_, d_ = renderer.get_text_width_height_descent(
798|            "lp", self._text._fontproperties,
799|            ismath="TeX" if self._text.get_usetex() else False)
800|
801|        bbox, info, yd = self._text._get_layout(renderer)
802|        w, h = bbox.size
803|
804|        self._baseline_transform.clear()
805|
806|        if len(info) > 1 and self._multilinebaseline:
807|            yd_new = 0.5 * h - 0.5 * (h_ - d_)
808|            self._baseline_transform.translate(0, yd - yd_new)
809|            yd = yd_new
810|        else:  # single line
811|            h_d = max(h_ - d_, h - yd)
812|            h = h_d + yd
813|
814|        ha = self._text.get_horizontalalignment()
815|        x0 = {"left": 0, "center": -w / 2, "right": -w}[ha]
816|
817|        return Bbox.from_bounds(x0, -yd, w, h)
818|
819|    def draw(self, renderer):
820|        # docstring inherited
821|        self._text.draw(renderer)
822|        _bbox_artist(self, renderer, fill=False, props=dict(pad=0.))
823|        self.stale = False
824|
825|
826|class AuxTransformBox(OffsetBox):
827|    """
828|    Offset Box with the aux_transform. Its children will be
829|    transformed with the aux_transform first then will be
830|    offsetted. The absolute coordinate of the aux_transform is meaning
831|    as it will be automatically adjust so that the left-lower corner
832|    of the bounding box of children will be set to (0, 0) before the
833|    offset transform.
834|
835|    It is similar to drawing area, except that the extent of the box
836|    is not predetermined but calculated from the window extent of its
837|    children. Furthermore, the extent of the children will be
838|    calculated in the transformed coordinate.
839|    """
840|    def __init__(self, aux_transform):
841|        self.aux_transform = aux_transform
842|        super().__init__()
843|        self.offset_transform = mtransforms.Affine2D()
844|        # ref_offset_transform makes offset_transform always relative to the
845|        # lower-left corner of the bbox of its children.
846|        self.ref_offset_transform = mtransforms.Affine2D()
847|
848|    def add_artist(self, a):
849|        """Add an `.Artist` to the container box."""
850|        self._children.append(a)
851|        a.set_transform(self.get_transform())
852|        self.stale = True
853|
854|    def get_transform(self):
855|        """
856|        Return the :class:`~matplotlib.transforms.Transform` applied
857|        to the children
858|        """
859|        return (self.aux_transform
860|                + self.ref_offset_transform
861|                + self.offset_transform)
862|
863|    def set_transform(self, t):
864|        """
865|        set_transform is ignored.
866|        """
867|
868|    def set_offset(self, xy):
869|        """
870|        Set the offset of the container.
871|
872|        Parameters
873|        ----------
874|        xy : (float, float)
875|            The (x, y) coordinates of the offset in display units.
876|        """
877|        self._offset = xy
878|        self.offset_transform.clear()
879|        self.offset_transform.translate(xy[0], xy[1])
880|        self.stale = True
881|
882|    def get_offset(self):
883|        """Return offset of the container."""
884|        return self._offset
885|
886|    def get_bbox(self, renderer):
887|        # clear the offset transforms
888|        _off = self.offset_transform.get_matrix()  # to be restored later
889|        self.ref_offset_transform.clear()
890|        self.offset_transform.clear()
891|        # calculate the extent
892|        bboxes = [c.get_window_extent(renderer) for c in self._children]
893|        ub = Bbox.union(bboxes)
894|        # adjust ref_offset_transform
895|        self.ref_offset_transform.translate(-ub.x0, -ub.y0)
896|        # restore offset transform
897|        self.offset_transform.set_matrix(_off)
898|        return Bbox.from_bounds(0, 0, ub.width, ub.height)
899|
900|    def draw(self, renderer):
901|        # docstring inherited
902|        for c in self._children:
903|            c.draw(renderer)
904|        _bbox_artist(self, renderer, fill=False, props=dict(pad=0.))
905|        self.stale = False
906|
907|
908|class AnchoredOffsetbox(OffsetBox):
909|    """
910|    An offset box placed according to location *loc*.
911|
912|    AnchoredOffsetbox has a single child.  When multiple children are needed,
913|    use an extra OffsetBox to enclose them.  By default, the offset box is
914|    anchored against its parent axes. You may explicitly specify the
915|    *bbox_to_anchor*.
916|    """
917|    zorder = 5  # zorder of the legend
918|
919|    # Location codes
920|    codes = {'upper right': 1,
921|             'upper left': 2,
922|             'lower left': 3,
923|             'lower right': 4,
924|             'right': 5,
925|             'center left': 6,
926|             'center right': 7,
927|             'lower center': 8,
928|             'upper center': 9,
929|             'center': 10,
930|             }
931|
932|    @_api.make_keyword_only("3.6", name="pad")
933|    def __init__(self, loc,
934|                 pad=0.4, borderpad=0.5,
935|                 child=None, prop=None, frameon=True,
936|                 bbox_to_anchor=None,
937|                 bbox_transform=None,
938|                 **kwargs):
939|        """
940|        Parameters
941|        ----------
942|        loc : str
943|            The box location.  Valid locations are
944|            'upper left', 'upper center', 'upper right',
945|            'center left', 'center', 'center right',
946|            'lower left', 'lower center', 'lower right'.
947|            For backward compatibility, numeric values are accepted as well.
948|            See the parameter *loc* of `.Legend` for details.
949|        pad : float, default: 0.4
950|            Padding around the child as fraction of the fontsize.
951|        borderpad : float, default: 0.5
952|            Padding between the offsetbox frame and the *bbox_to_anchor*.
953|        child : `.OffsetBox`
954|            The box that will be anchored.
955|        prop : `.FontProperties`
956|            This is only used as a reference for paddings. If not given,
957|            :rc:`legend.fontsize` is used.
958|        frameon : bool
959|            Whether to draw a frame around the box.
960|        bbox_to_anchor : `.BboxBase`, 2-tuple, or 4-tuple of floats
961|            Box that is used to position the legend in conjunction with *loc*.
962|        bbox_transform : None or :class:`matplotlib.transforms.Transform`
963|            The transform for the bounding box (*bbox_to_anchor*).
964|        **kwargs
965|            All other parameters are passed on to `.OffsetBox`.
966|
967|        Notes
968|        -----
969|        See `.Legend` for a detailed description of the anchoring mechanism.
970|        """
971|        super().__init__(**kwargs)
972|
973|        self.set_bbox_to_anchor(bbox_to_anchor, bbox_transform)
974|        self.set_child(child)
975|
976|        if isinstance(loc, str):
977|            loc = _api.check_getitem(self.codes, loc=loc)
978|
979|        self.loc = loc
980|        self.borderpad = borderpad
981|        self.pad = pad
982|
983|        if prop is None:
984|            self.prop = FontProperties(size=mpl.rcParams["legend.fontsize"])
985|        else:
986|            self.prop = FontProperties._from_any(prop)
987|            if isinstance(prop, dict) and "size" not in prop:
988|                self.prop.set_size(mpl.rcParams["legend.fontsize"])
989|
990|        self.patch = FancyBboxPatch(
991|            xy=(0.0, 0.0), width=1., height=1.,
992|            facecolor='w', edgecolor='k',
993|            mutation_scale=self.prop.get_size_in_points(),
994|            snap=True,
995|            visible=frameon,
996|            boxstyle="square,pad=0",
997|        )
998|
999|    def set_child(self, child):
1000|        """Set the child to be anchored."""
1001|        self._child = child
1002|        if child is not None:
1003|            child.axes = self.axes
1004|        self.stale = True
1005|
1006|    def get_child(self):
1007|        """Return the child."""
1008|        return self._child
1009|
1010|    def get_children(self):
1011|        """Return the list of children."""
1012|        return [self._child]
1013|
1014|    def get_bbox(self, renderer):
1015|        # docstring inherited
1016|        fontsize = renderer.points_to_pixels(self.prop.get_size_in_points())
1017|        pad = self.pad * fontsize
1018|        return self.get_child().get_bbox(renderer).padded(pad)
1019|
1020|    def get_bbox_to_anchor(self):
1021|        """Return the bbox that the box is anchored to."""
1022|        if self._bbox_to_anchor is None:
1023|            return self.axes.bbox
1024|        else:
1025|            transform = self._bbox_to_anchor_transform
1026|            if transform is None:
1027|                return self._bbox_to_anchor
1028|            else:
1029|                return TransformedBbox(self._bbox_to_anchor, transform)
1030|
1031|    def set_bbox_to_anchor(self, bbox, transform=None):
1032|        """
1033|        Set the bbox that the box is anchored to.
1034|
1035|        *bbox* can be a Bbox instance, a list of [left, bottom, width,
1036|        height], or a list of [left, bottom] where the width and
1037|        height will be assumed to be zero. The bbox will be
1038|        transformed to display coordinate by the given transform.
1039|        """
1040|        if bbox is None or isinstance(bbox, BboxBase):
1041|            self._bbox_to_anchor = bbox
1042|        else:
1043|            try:
1044|                l = len(bbox)
1045|            except TypeError as err:
1046|                raise ValueError(f"Invalid bbox: {bbox}") from err
1047|
1048|            if l == 2:
1049|                bbox = [bbox[0], bbox[1], 0, 0]
1050|
1051|            self._bbox_to_anchor = Bbox.from_bounds(*bbox)
1052|
1053|        self._bbox_to_anchor_transform = transform
1054|        self.stale = True
1055|
1056|    @_compat_get_offset
1057|    def get_offset(self, bbox, renderer):
1058|        # docstring inherited
1059|        pad = (self.borderpad
1060|               * renderer.points_to_pixels(self.prop.get_size_in_points()))
1061|        bbox_to_anchor = self.get_bbox_to_anchor()
1062|        x0, y0 = _get_anchored_bbox(
1063|            self.loc, Bbox.from_bounds(0, 0, bbox.width, bbox.height),
1064|            bbox_to_anchor, pad)
1065|        return x0 - bbox.x0, y0 - bbox.y0
1066|
1067|    def update_frame(self, bbox, fontsize=None):
1068|        self.patch.set_bounds(bbox.bounds)
1069|        if fontsize:
1070|            self.patch.set_mutation_scale(fontsize)
1071|
1072|    def draw(self, renderer):
1073|        # docstring inherited
1074|        if not self.get_visible():
1075|            return
1076|
1077|        # update the location and size of the legend
1078|        bbox = self.get_window_extent(renderer)
1079|        fontsize = renderer.points_to_pixels(self.prop.get_size_in_points())
1080|        self.update_frame(bbox, fontsize)
1081|        self.patch.draw(renderer)
1082|
1083|        px, py = self.get_offset(self.get_bbox(renderer), renderer)
1084|        self.get_child().set_offset((px, py))
1085|        self.get_child().draw(renderer)
1086|        self.stale = False
1087|
1088|
1089|def _get_anchored_bbox(loc, bbox, parentbbox, borderpad):
1090|    """
1091|    Return the (x, y) position of the *bbox* anchored at the *parentbbox* with
1092|    the *loc* code with the *borderpad*.
1093|    """
1094|    # This is only called internally and *loc* should already have been
1095|    # validated.  If 0 (None), we just let ``bbox.anchored`` raise.
1096|    c = [None, "NE", "NW", "SW", "SE", "E", "W", "E", "S", "N", "C"][loc]
1097|    container = parentbbox.padded(-borderpad)
1098|    return bbox.anchored(c, container=container).p0
1099|
1100|
1101|class AnchoredText(AnchoredOffsetbox):
1102|    """
1103|    AnchoredOffsetbox with Text.
1104|    """
1105|
1106|    @_api.make_keyword_only("3.6", name="pad")
1107|    def __init__(self, s, loc, pad=0.4, borderpad=0.5, prop=None, **kwargs):
1108|        """
1109|        Parameters
1110|        ----------
1111|        s : str
1112|            Text.
1113|
1114|        loc : str
1115|            Location code. See `AnchoredOffsetbox`.
1116|
1117|        pad : float, default: 0.4
1118|            Padding around the text as fraction of the fontsize.
1119|
1120|        borderpad : float, default: 0.5
1121|            Spacing between the offsetbox frame and the *bbox_to_anchor*.
1122|
1123|        prop : dict, optional
1124|            Dictionary of keyword parameters to be passed to the
1125|            `~matplotlib.text.Text` instance contained inside AnchoredText.
1126|
1127|        **kwargs
1128|            All other parameters are passed to `AnchoredOffsetbox`.
1129|        """
1130|
1131|        if prop is None:
1132|            prop = {}
1133|        badkwargs = {'va', 'verticalalignment'}
1134|        if badkwargs & set(prop):
1135|            raise ValueError(
1136|                'Mixing verticalalignment with AnchoredText is not supported.')
1137|
1138|        self.txt = TextArea(s, textprops=prop)
1139|        fp = self.txt._text.get_fontproperties()
1140|        super().__init__(
1141|            loc, pad=pad, borderpad=borderpad, child=self.txt, prop=fp,
1142|            **kwargs)
1143|
1144|
1145|class OffsetImage(OffsetBox):
1146|
1147|    @_api.make_keyword_only("3.6", name="zoom")
1148|    def __init__(self, arr,
1149|                 zoom=1,
1150|                 cmap=None,
1151|                 norm=None,
1152|                 interpolation=None,
1153|                 origin=None,
1154|                 filternorm=True,
1155|                 filterrad=4.0,
1156|                 resample=False,
1157|                 dpi_cor=True,
1158|                 **kwargs
1159|                 ):
1160|
1161|        super().__init__()
1162|        self._dpi_cor = dpi_cor
1163|
1164|        self.image = BboxImage(bbox=self.get_window_extent,
1165|                               cmap=cmap,
1166|                               norm=norm,
1167|                               interpolation=interpolation,
1168|                               origin=origin,
1169|                               filternorm=filternorm,
1170|                               filterrad=filterrad,
1171|                               resample=resample,
1172|                               **kwargs
1173|                               )
1174|
1175|        self._children = [self.image]
1176|
1177|        self.set_zoom(zoom)
1178|        self.set_data(arr)
1179|
1180|    def set_data(self, arr):
1181|        self._data = np.asarray(arr)
1182|        self.image.set_data(self._data)
1183|        self.stale = True
1184|
1185|    def get_data(self):
1186|        return self._data
1187|
1188|    def set_zoom(self, zoom):
1189|        self._zoom = zoom
1190|        self.stale = True
1191|
1192|    def get_zoom(self):
1193|        return self._zoom
1194|
1195|    def get_offset(self):
1196|        """Return offset of the container."""
1197|        return self._offset
1198|
1199|    def get_children(self):
1200|        return [self.image]
1201|
1202|    def get_bbox(self, renderer):
1203|        dpi_cor = renderer.points_to_pixels(1.) if self._dpi_cor else 1.
1204|        zoom = self.get_zoom()
1205|        data = self.get_data()
1206|        ny, nx = data.shape[:2]
1207|        w, h = dpi_cor * nx * zoom, dpi_cor * ny * zoom
1208|        return Bbox.from_bounds(0, 0, w, h)
1209|
1210|    def draw(self, renderer):
1211|        # docstring inherited
1212|        self.image.draw(renderer)
1213|        # bbox_artist(self, renderer, fill=False, props=dict(pad=0.))
1214|        self.stale = False
1215|
1216|
1217|class AnnotationBbox(martist.Artist, mtext._AnnotationBase):
1218|    """
1219|    Container for an `OffsetBox` referring to a specific position *xy*.
1220|
1221|    Optionally an arrow pointing from the offsetbox to *xy* can be drawn.
1222|
1223|    This is like `.Annotation`, but with `OffsetBox` instead of `.Text`.
1224|    """
1225|
1226|    zorder = 3
1227|
1228|    def __str__(self):
1229|        return f"AnnotationBbox({self.xy[0]:g},{self.xy[1]:g})"
1230|
1231|    @_docstring.dedent_interpd
1232|    @_api.make_keyword_only("3.6", name="xycoords")
1233|    def __init__(self, offsetbox, xy,
1234|                 xybox=None,
1235|                 xycoords='data',
1236|                 boxcoords=None,
1237|                 frameon=True, pad=0.4,  # FancyBboxPatch boxstyle.
1238|                 annotation_clip=None,
1239|                 box_alignment=(0.5, 0.5),
1240|                 bboxprops=None,
1241|                 arrowprops=None,
1242|                 fontsize=None,
1243|                 **kwargs):
1244|        """
1245|        Parameters
1246|        ----------
1247|        offsetbox : `OffsetBox`
1248|
1249|        xy : (float, float)
1250|            The point *(x, y)* to annotate. The coordinate system is determined
1251|            by *xycoords*.
1252|
1253|        xybox : (float, float), default: *xy*
1254|            The position *(x, y)* to place the text at. The coordinate system
1255|            is determined by *boxcoords*.
1256|
1257|        xycoords : single or two-tuple of str or `.Artist` or `.Transform` or \
1258|callable, default: 'data'
1259|            The coordinate system that *xy* is given in. See the parameter
1260|            *xycoords* in `.Annotation` for a detailed description.
1261|
1262|        boxcoords : single or two-tuple of str or `.Artist` or `.Transform` \
1263|or callable, default: value of *xycoords*
1264|            The coordinate system that *xybox* is given in. See the parameter
1265|            *textcoords* in `.Annotation` for a detailed description.
1266|
1267|        frameon : bool, default: True
1268|            By default, the text is surrounded by a white `.FancyBboxPatch`
1269|            (accessible as the ``patch`` attribute of the `.AnnotationBbox`).
1270|            If *frameon* is set to False, this patch is made invisible.
1271|
1272|        annotation_clip: bool or None, default: None
1273|            Whether to clip (i.e. not draw) the annotation when the annotation
1274|            point *xy* is outside the axes area.
1275|
1276|            - If *True*, the annotation will be clipped when *xy* is outside
1277|              the axes.
1278|            - If *False*, the annotation will always be drawn.
1279|            - If *None*, the annotation will be clipped when *xy* is outside
1280|              the axes and *xycoords* is 'data'.
1281|
1282|        pad : float, default: 0.4
1283|            Padding around the offsetbox.
1284|
1285|        box_alignment : (float, float)
1286|            A tuple of two floats for a vertical and horizontal alignment of
1287|            the offset box w.r.t. the *boxcoords*.
1288|            The lower-left corner is (0, 0) and upper-right corner is (1, 1).
1289|
1290|        bboxprops : dict, optional
1291|            A dictionary of properties to set for the annotation bounding box,
1292|            for example *boxstyle* and *alpha*.  See `.FancyBboxPatch` for
1293|            details.
1294|
1295|        arrowprops: dict, optional
1296|            Arrow properties, see `.Annotation` for description.
1297|
1298|        fontsize: float or str, optional
1299|            Translated to points and passed as *mutation_scale* into
1300|            `.FancyBboxPatch` to scale attributes of the box style (e.g. pad
1301|            or rounding_size).  The name is chosen in analogy to `.Text` where
1302|            *fontsize* defines the mutation scale as well.  If not given,
1303|            :rc:`legend.fontsize` is used.  See `.Text.set_fontsize` for valid
1304|            values.
1305|
1306|        **kwargs
1307|            Other `AnnotationBbox` properties.  See `.AnnotationBbox.set` for
1308|            a list.
1309|        """
1310|
1311|        martist.Artist.__init__(self)
1312|        mtext._AnnotationBase.__init__(
1313|            self, xy, xycoords=xycoords, annotation_clip=annotation_clip)
1314|
1315|        self.offsetbox = offsetbox
1316|        self.arrowprops = arrowprops.copy() if arrowprops is not None else None
1317|        self.set_fontsize(fontsize)
1318|        self.xybox = xybox if xybox is not None else xy
1319|        self.boxcoords = boxcoords if boxcoords is not None else xycoords
1320|        self._box_alignment = box_alignment
1321|
1322|        if arrowprops is not None:
1323|            self._arrow_relpos = self.arrowprops.pop("relpos", (0.5, 0.5))
1324|            self.arrow_patch = FancyArrowPatch((0, 0), (1, 1),
1325|                                               **self.arrowprops)
1326|        else:
1327|            self._arrow_relpos = None
1328|            self.arrow_patch = None
1329|
1330|        self.patch = FancyBboxPatch(  # frame
1331|            xy=(0.0, 0.0), width=1., height=1.,
1332|            facecolor='w', edgecolor='k',
1333|            mutation_scale=self.prop.get_size_in_points(),
1334|            snap=True,
1335|            visible=frameon,
1336|        )
1337|        self.patch.set_boxstyle("square", pad=pad)
1338|        if bboxprops:
1339|            self.patch.set(**bboxprops)
1340|
1341|        self._internal_update(kwargs)
1342|
1343|    @property
1344|    def xyann(self):
1345|        return self.xybox
1346|
1347|    @xyann.setter
1348|    def xyann(self, xyann):
1349|        self.xybox = xyann
1350|        self.stale = True
1351|
1352|    @property
1353|    def anncoords(self):
1354|        return self.boxcoords
1355|
1356|    @anncoords.setter
1357|    def anncoords(self, coords):
1358|        self.boxcoords = coords
1359|        self.stale = True
1360|
1361|    def contains(self, mouseevent):
1362|        inside, info = self._default_contains(mouseevent)
1363|        if inside is not None:
1364|            return inside, info
1365|        if not self._check_xy(None):
1366|            return False, {}
1367|        return self.offsetbox.contains(mouseevent)
1368|        # self.arrow_patch is currently not checked as this can be a line - JJ
1369|
1370|    def get_children(self):
1371|        children = [self.offsetbox, self.patch]
1372|        if self.arrow_patch:
1373|            children.append(self.arrow_patch)
1374|        return children
1375|
1376|    def set_figure(self, fig):
1377|        if self.arrow_patch is not None:
1378|            self.arrow_patch.set_figure(fig)
1379|        self.offsetbox.set_figure(fig)
1380|        martist.Artist.set_figure(self, fig)
1381|
1382|    def set_fontsize(self, s=None):
1383|        """
1384|        Set the fontsize in points.
1385|
1386|        If *s* is not given, reset to :rc:`legend.fontsize`.
1387|        """
1388|        if s is None:
1389|            s = mpl.rcParams["legend.fontsize"]
1390|
1391|        self.prop = FontProperties(size=s)
1392|        self.stale = True
1393|
1394|    def get_fontsize(self):
1395|        """Return the fontsize in points."""
1396|        return self.prop.get_size_in_points()
1397|
1398|    def get_window_extent(self, renderer=None):
1399|        # docstring inherited
1400|        if renderer is None:
1401|            renderer = self.figure._get_renderer()
1402|        return Bbox.union([child.get_window_extent(renderer)
1403|                           for child in self.get_children()])
1404|
1405|    def get_tightbbox(self, renderer=None):
1406|        # docstring inherited
1407|        return Bbox.union([child.get_tightbbox(renderer)
1408|                           for child in self.get_children()])
1409|
1410|    def update_positions(self, renderer):
1411|        """
1412|        Update pixel positions for the annotated point, the text and the arrow.
1413|        """
1414|
1415|        x, y = self.xybox
1416|        if isinstance(self.boxcoords, tuple):
1417|            xcoord, ycoord = self.boxcoords
1418|            x1, y1 = self._get_xy(renderer, x, y, xcoord)
1419|            x2, y2 = self._get_xy(renderer, x, y, ycoord)
1420|            ox0, oy0 = x1, y2
1421|        else:
1422|            ox0, oy0 = self._get_xy(renderer, x, y, self.boxcoords)
1423|
1424|        bbox = self.offsetbox.get_bbox(renderer)
1425|        fw, fh = self._box_alignment
1426|        self.offsetbox.set_offset(
1427|            (ox0 - fw*bbox.width - bbox.x0, oy0 - fh*bbox.height - bbox.y0))
1428|
1429|        bbox = self.offsetbox.get_window_extent(renderer)
1430|        self.patch.set_bounds(bbox.bounds)
1431|
1432|        mutation_scale = renderer.points_to_pixels(self.get_fontsize())
1433|        self.patch.set_mutation_scale(mutation_scale)
1434|
1435|        if self.arrowprops:
1436|            # Use FancyArrowPatch if self.arrowprops has "arrowstyle" key.
1437|
1438|            # Adjust the starting point of the arrow relative to the textbox.
1439|            # TODO: Rotation needs to be accounted.
1440|            arrow_begin = bbox.p0 + bbox.size * self._arrow_relpos
1441|            arrow_end = self._get_position_xy(renderer)
1442|            # The arrow (from arrow_begin to arrow_end) will be first clipped
1443|            # by patchA and patchB, then shrunk by shrinkA and shrinkB (in
1444|            # points).  If patch A is not set, self.bbox_patch is used.
1445|            self.arrow_patch.set_positions(arrow_begin, arrow_end)
1446|
1447|            if "mutation_scale" in self.arrowprops:
1448|                mutation_scale = renderer.points_to_pixels(
1449|                    self.arrowprops["mutation_scale"])
1450|                # Else, use fontsize-based mutation_scale defined above.
1451|            self.arrow_patch.set_mutation_scale(mutation_scale)
1452|
1453|            patchA = self.arrowprops.get("patchA", self.patch)
1454|            self.arrow_patch.set_patchA(patchA)
1455|
1456|    def draw(self, renderer):
1457|        # docstring inherited
1458|        if renderer is not None:
1459|            self._renderer = renderer
1460|        if not self.get_visible() or not self._check_xy(renderer):
1461|            return
1462|        renderer.open_group(self.__class__.__name__, gid=self.get_gid())
1463|        self.update_positions(renderer)
1464|        if self.arrow_patch is not None:
1465|            if self.arrow_patch.figure is None and self.figure is not None:
1466|                self.arrow_patch.figure = self.figure
1467|            self.arrow_patch.draw(renderer)
1468|        self.patch.draw(renderer)
1469|        self.offsetbox.draw(renderer)
1470|        renderer.close_group(self.__class__.__name__)
1471|        self.stale = False
1472|
1473|
1474|class DraggableBase:
1475|    """
1476|    Helper base class for a draggable artist (legend, offsetbox).
1477|
1478|    Derived classes must override the following methods::
1479|
1480|        def save_offset(self):
1481|            '''
1482|            Called when the object is picked for dragging; should save the
1483|            reference position of the artist.
1484|            '''
1485|
1486|        def update_offset(self, dx, dy):
1487|            '''
1488|            Called during the dragging; (*dx*, *dy*) is the pixel offset from
1489|            the point where the mouse drag started.
1490|            '''
1491|
1492|    Optionally, you may override the following method::
1493|
1494|        def finalize_offset(self):
1495|            '''Called when the mouse is released.'''
1496|
1497|    In the current implementation of `.DraggableLegend` and
1498|    `DraggableAnnotation`, `update_offset` places the artists in display
1499|    coordinates, and `finalize_offset` recalculates their position in axes
1500|    coordinate and set a relevant attribute.
1501|    """
(120 more lines below)


============================================================



ACTION:

THOUGHT: After analyzing the code, I understand the issue. The problem occurs when trying to pickle a figure with a draggable legend because the `DraggableLegend` class (which inherits from `DraggableOffsetBox`) adds event handlers and canvas-specific attributes that aren't pickleable.

Let me check the implementation of `DraggableOffsetBox`:
CODE:
scroll_down()

============================================================



OBSERVATION:

[File: /workspace/matplotlib__matplotlib__3.7/lib/matplotlib/offsetbox.py (1621 lines total)]
(621 more lines above)
622|        self.offset_transform = mtransforms.Affine2D()
623|        self.dpi_transform = mtransforms.Affine2D()
624|
625|    @property
626|    def clip_children(self):
627|        """
628|        If the children of this DrawingArea should be clipped
629|        by DrawingArea bounding box.
630|        """
631|        return self._clip_children
632|
633|    @clip_children.setter
634|    def clip_children(self, val):
635|        self._clip_children = bool(val)
636|        self.stale = True
637|
638|    def get_transform(self):
639|        """
640|        Return the `~matplotlib.transforms.Transform` applied to the children.
641|        """
642|        return self.dpi_transform + self.offset_transform
643|
644|    def set_transform(self, t):
645|        """
646|        set_transform is ignored.
647|        """
648|
649|    def set_offset(self, xy):
650|        """
651|        Set the offset of the container.
652|
653|        Parameters
654|        ----------
655|        xy : (float, float)
656|            The (x, y) coordinates of the offset in display units.
657|        """
658|        self._offset = xy
659|        self.offset_transform.clear()
660|        self.offset_transform.translate(xy[0], xy[1])
661|        self.stale = True
662|
663|    def get_offset(self):
664|        """Return offset of the container."""
665|        return self._offset
666|
667|    def get_bbox(self, renderer):
668|        # docstring inherited
669|        dpi_cor = renderer.points_to_pixels(1.)
670|        return Bbox.from_bounds(
671|            -self.xdescent * dpi_cor, -self.ydescent * dpi_cor,
672|            self.width * dpi_cor, self.height * dpi_cor)
673|
674|    def add_artist(self, a):
675|        """Add an `.Artist` to the container box."""
676|        self._children.append(a)
677|        if not a.is_transform_set():
678|            a.set_transform(self.get_transform())
679|        if self.axes is not None:
680|            a.axes = self.axes
681|        fig = self.figure
682|        if fig is not None:
683|            a.set_figure(fig)
684|
685|    def draw(self, renderer):
686|        # docstring inherited
687|
688|        dpi_cor = renderer.points_to_pixels(1.)
689|        self.dpi_transform.clear()
690|        self.dpi_transform.scale(dpi_cor)
691|
692|        # At this point the DrawingArea has a transform
693|        # to the display space so the path created is
694|        # good for clipping children
695|        tpath = mtransforms.TransformedPath(
696|            mpath.Path([[0, 0], [0, self.height],
697|                        [self.width, self.height],
698|                        [self.width, 0]]),
699|            self.get_transform())
700|        for c in self._children:
701|            if self._clip_children and not (c.clipbox or c._clippath):
702|                c.set_clip_path(tpath)
703|            c.draw(renderer)
704|
705|        _bbox_artist(self, renderer, fill=False, props=dict(pad=0.))
706|        self.stale = False
707|
708|
709|class TextArea(OffsetBox):
710|    """
711|    The TextArea is a container artist for a single Text instance.
712|
713|    The text is placed at (0, 0) with baseline+left alignment, by default. The
714|    width and height of the TextArea instance is the width and height of its
715|    child text.
716|    """
717|
718|    @_api.make_keyword_only("3.6", name="textprops")
719|    def __init__(self, s,
720|                 textprops=None,
721|                 multilinebaseline=False,
722|                 ):
723|        """
724|        Parameters
725|        ----------
726|        s : str
727|            The text to be displayed.
728|        textprops : dict, default: {}
729|            Dictionary of keyword parameters to be passed to the `.Text`
730|            instance in the TextArea.
731|        multilinebaseline : bool, default: False
732|            Whether the baseline for multiline text is adjusted so that it
733|            is (approximately) center-aligned with single-line text.
734|        """
735|        if textprops is None:
736|            textprops = {}
737|        self._text = mtext.Text(0, 0, s, **textprops)
738|        super().__init__()
739|        self._children = [self._text]
740|        self.offset_transform = mtransforms.Affine2D()
741|        self._baseline_transform = mtransforms.Affine2D()
742|        self._text.set_transform(self.offset_transform +
743|                                 self._baseline_transform)
744|        self._multilinebaseline = multilinebaseline
745|
746|    def set_text(self, s):
747|        """Set the text of this area as a string."""
748|        self._text.set_text(s)
749|        self.stale = True
750|
751|    def get_text(self):
752|        """Return the string representation of this area's text."""
753|        return self._text.get_text()
754|
755|    def set_multilinebaseline(self, t):
756|        """
757|        Set multilinebaseline.
758|
759|        If True, the baseline for multiline text is adjusted so that it is
760|        (approximately) center-aligned with single-line text.  This is used
761|        e.g. by the legend implementation so that single-line labels are
762|        baseline-aligned, but multiline labels are "center"-aligned with them.
763|        """
764|        self._multilinebaseline = t
765|        self.stale = True
766|
767|    def get_multilinebaseline(self):
768|        """
769|        Get multilinebaseline.
770|        """
771|        return self._multilinebaseline
772|
773|    def set_transform(self, t):
774|        """
775|        set_transform is ignored.
776|        """
777|
778|    def set_offset(self, xy):
779|        """
780|        Set the offset of the container.
781|
782|        Parameters
783|        ----------
784|        xy : (float, float)
785|            The (x, y) coordinates of the offset in display units.
786|        """
787|        self._offset = xy
788|        self.offset_transform.clear()
789|        self.offset_transform.translate(xy[0], xy[1])
790|        self.stale = True
791|
792|    def get_offset(self):
793|        """Return offset of the container."""
794|        return self._offset
795|
796|    def get_bbox(self, renderer):
797|        _, h_, d_ = renderer.get_text_width_height_descent(
798|            "lp", self._text._fontproperties,
799|            ismath="TeX" if self._text.get_usetex() else False)
800|
801|        bbox, info, yd = self._text._get_layout(renderer)
802|        w, h = bbox.size
803|
804|        self._baseline_transform.clear()
805|
806|        if len(info) > 1 and self._multilinebaseline:
807|            yd_new = 0.5 * h - 0.5 * (h_ - d_)
808|            self._baseline_transform.translate(0, yd - yd_new)
809|            yd = yd_new
810|        else:  # single line
811|            h_d = max(h_ - d_, h - yd)
812|            h = h_d + yd
813|
814|        ha = self._text.get_horizontalalignment()
815|        x0 = {"left": 0, "center": -w / 2, "right": -w}[ha]
816|
817|        return Bbox.from_bounds(x0, -yd, w, h)
818|
819|    def draw(self, renderer):
820|        # docstring inherited
821|        self._text.draw(renderer)
822|        _bbox_artist(self, renderer, fill=False, props=dict(pad=0.))
823|        self.stale = False
824|
825|
826|class AuxTransformBox(OffsetBox):
827|    """
828|    Offset Box with the aux_transform. Its children will be
829|    transformed with the aux_transform first then will be
830|    offsetted. The absolute coordinate of the aux_transform is meaning
831|    as it will be automatically adjust so that the left-lower corner
832|    of the bounding box of children will be set to (0, 0) before the
833|    offset transform.
834|
835|    It is similar to drawing area, except that the extent of the box
836|    is not predetermined but calculated from the window extent of its
837|    children. Furthermore, the extent of the children will be
838|    calculated in the transformed coordinate.
839|    """
840|    def __init__(self, aux_transform):
841|        self.aux_transform = aux_transform
842|        super().__init__()
843|        self.offset_transform = mtransforms.Affine2D()
844|        # ref_offset_transform makes offset_transform always relative to the
845|        # lower-left corner of the bbox of its children.
846|        self.ref_offset_transform = mtransforms.Affine2D()
847|
848|    def add_artist(self, a):
849|        """Add an `.Artist` to the container box."""
850|        self._children.append(a)
851|        a.set_transform(self.get_transform())
852|        self.stale = True
853|
854|    def get_transform(self):
855|        """
856|        Return the :class:`~matplotlib.transforms.Transform` applied
857|        to the children
858|        """
859|        return (self.aux_transform
860|                + self.ref_offset_transform
861|                + self.offset_transform)
862|
863|    def set_transform(self, t):
864|        """
865|        set_transform is ignored.
866|        """
867|
868|    def set_offset(self, xy):
869|        """
870|        Set the offset of the container.
871|
872|        Parameters
873|        ----------
874|        xy : (float, float)
875|            The (x, y) coordinates of the offset in display units.
876|        """
877|        self._offset = xy
878|        self.offset_transform.clear()
879|        self.offset_transform.translate(xy[0], xy[1])
880|        self.stale = True
881|
882|    def get_offset(self):
883|        """Return offset of the container."""
884|        return self._offset
885|
886|    def get_bbox(self, renderer):
887|        # clear the offset transforms
888|        _off = self.offset_transform.get_matrix()  # to be restored later
889|        self.ref_offset_transform.clear()
890|        self.offset_transform.clear()
891|        # calculate the extent
892|        bboxes = [c.get_window_extent(renderer) for c in self._children]
893|        ub = Bbox.union(bboxes)
894|        # adjust ref_offset_transform
895|        self.ref_offset_transform.translate(-ub.x0, -ub.y0)
896|        # restore offset transform
897|        self.offset_transform.set_matrix(_off)
898|        return Bbox.from_bounds(0, 0, ub.width, ub.height)
899|
900|    def draw(self, renderer):
901|        # docstring inherited
902|        for c in self._children:
903|            c.draw(renderer)
904|        _bbox_artist(self, renderer, fill=False, props=dict(pad=0.))
905|        self.stale = False
906|
907|
908|class AnchoredOffsetbox(OffsetBox):
909|    """
910|    An offset box placed according to location *loc*.
911|
912|    AnchoredOffsetbox has a single child.  When multiple children are needed,
913|    use an extra OffsetBox to enclose them.  By default, the offset box is
914|    anchored against its parent axes. You may explicitly specify the
915|    *bbox_to_anchor*.
916|    """
917|    zorder = 5  # zorder of the legend
918|
919|    # Location codes
920|    codes = {'upper right': 1,
921|             'upper left': 2,
922|             'lower left': 3,
923|             'lower right': 4,
924|             'right': 5,
925|             'center left': 6,
926|             'center right': 7,
927|             'lower center': 8,
928|             'upper center': 9,
929|             'center': 10,
930|             }
931|
932|    @_api.make_keyword_only("3.6", name="pad")
933|    def __init__(self, loc,
934|                 pad=0.4, borderpad=0.5,
935|                 child=None, prop=None, frameon=True,
936|                 bbox_to_anchor=None,
937|                 bbox_transform=None,
938|                 **kwargs):
939|        """
940|        Parameters
941|        ----------
942|        loc : str
943|            The box location.  Valid locations are
944|            'upper left', 'upper center', 'upper right',
945|            'center left', 'center', 'center right',
946|            'lower left', 'lower center', 'lower right'.
947|            For backward compatibility, numeric values are accepted as well.
948|            See the parameter *loc* of `.Legend` for details.
949|        pad : float, default: 0.4
950|            Padding around the child as fraction of the fontsize.
951|        borderpad : float, default: 0.5
952|            Padding between the offsetbox frame and the *bbox_to_anchor*.
953|        child : `.OffsetBox`
954|            The box that will be anchored.
955|        prop : `.FontProperties`
956|            This is only used as a reference for paddings. If not given,
957|            :rc:`legend.fontsize` is used.
958|        frameon : bool
959|            Whether to draw a frame around the box.
960|        bbox_to_anchor : `.BboxBase`, 2-tuple, or 4-tuple of floats
961|            Box that is used to position the legend in conjunction with *loc*.
962|        bbox_transform : None or :class:`matplotlib.transforms.Transform`
963|            The transform for the bounding box (*bbox_to_anchor*).
964|        **kwargs
965|            All other parameters are passed on to `.OffsetBox`.
966|
967|        Notes
968|        -----
969|        See `.Legend` for a detailed description of the anchoring mechanism.
970|        """
971|        super().__init__(**kwargs)
972|
973|        self.set_bbox_to_anchor(bbox_to_anchor, bbox_transform)
974|        self.set_child(child)
975|
976|        if isinstance(loc, str):
977|            loc = _api.check_getitem(self.codes, loc=loc)
978|
979|        self.loc = loc
980|        self.borderpad = borderpad
981|        self.pad = pad
982|
983|        if prop is None:
984|            self.prop = FontProperties(size=mpl.rcParams["legend.fontsize"])
985|        else:
986|            self.prop = FontProperties._from_any(prop)
987|            if isinstance(prop, dict) and "size" not in prop:
988|                self.prop.set_size(mpl.rcParams["legend.fontsize"])
989|
990|        self.patch = FancyBboxPatch(
991|            xy=(0.0, 0.0), width=1., height=1.,
992|            facecolor='w', edgecolor='k',
993|            mutation_scale=self.prop.get_size_in_points(),
994|            snap=True,
995|            visible=frameon,
996|            boxstyle="square,pad=0",
997|        )
998|
999|    def set_child(self, child):
1000|        """Set the child to be anchored."""
1001|        self._child = child
1002|        if child is not None:
1003|            child.axes = self.axes
1004|        self.stale = True
1005|
1006|    def get_child(self):
1007|        """Return the child."""
1008|        return self._child
1009|
1010|    def get_children(self):
1011|        """Return the list of children."""
1012|        return [self._child]
1013|
1014|    def get_bbox(self, renderer):
1015|        # docstring inherited
1016|        fontsize = renderer.points_to_pixels(self.prop.get_size_in_points())
1017|        pad = self.pad * fontsize
1018|        return self.get_child().get_bbox(renderer).padded(pad)
1019|
1020|    def get_bbox_to_anchor(self):
1021|        """Return the bbox that the box is anchored to."""
1022|        if self._bbox_to_anchor is None:
1023|            return self.axes.bbox
1024|        else:
1025|            transform = self._bbox_to_anchor_transform
1026|            if transform is None:
1027|                return self._bbox_to_anchor
1028|            else:
1029|                return TransformedBbox(self._bbox_to_anchor, transform)
1030|
1031|    def set_bbox_to_anchor(self, bbox, transform=None):
1032|        """
1033|        Set the bbox that the box is anchored to.
1034|
1035|        *bbox* can be a Bbox instance, a list of [left, bottom, width,
1036|        height], or a list of [left, bottom] where the width and
1037|        height will be assumed to be zero. The bbox will be
1038|        transformed to display coordinate by the given transform.
1039|        """
1040|        if bbox is None or isinstance(bbox, BboxBase):
1041|            self._bbox_to_anchor = bbox
1042|        else:
1043|            try:
1044|                l = len(bbox)
1045|            except TypeError as err:
1046|                raise ValueError(f"Invalid bbox: {bbox}") from err
1047|
1048|            if l == 2:
1049|                bbox = [bbox[0], bbox[1], 0, 0]
1050|
1051|            self._bbox_to_anchor = Bbox.from_bounds(*bbox)
1052|
1053|        self._bbox_to_anchor_transform = transform
1054|        self.stale = True
1055|
1056|    @_compat_get_offset
1057|    def get_offset(self, bbox, renderer):
1058|        # docstring inherited
1059|        pad = (self.borderpad
1060|               * renderer.points_to_pixels(self.prop.get_size_in_points()))
1061|        bbox_to_anchor = self.get_bbox_to_anchor()
1062|        x0, y0 = _get_anchored_bbox(
1063|            self.loc, Bbox.from_bounds(0, 0, bbox.width, bbox.height),
1064|            bbox_to_anchor, pad)
1065|        return x0 - bbox.x0, y0 - bbox.y0
1066|
1067|    def update_frame(self, bbox, fontsize=None):
1068|        self.patch.set_bounds(bbox.bounds)
1069|        if fontsize:
1070|            self.patch.set_mutation_scale(fontsize)
1071|
1072|    def draw(self, renderer):
1073|        # docstring inherited
1074|        if not self.get_visible():
1075|            return
1076|
1077|        # update the location and size of the legend
1078|        bbox = self.get_window_extent(renderer)
1079|        fontsize = renderer.points_to_pixels(self.prop.get_size_in_points())
1080|        self.update_frame(bbox, fontsize)
1081|        self.patch.draw(renderer)
1082|
1083|        px, py = self.get_offset(self.get_bbox(renderer), renderer)
1084|        self.get_child().set_offset((px, py))
1085|        self.get_child().draw(renderer)
1086|        self.stale = False
1087|
1088|
1089|def _get_anchored_bbox(loc, bbox, parentbbox, borderpad):
1090|    """
1091|    Return the (x, y) position of the *bbox* anchored at the *parentbbox* with
1092|    the *loc* code with the *borderpad*.
1093|    """
1094|    # This is only called internally and *loc* should already have been
1095|    # validated.  If 0 (None), we just let ``bbox.anchored`` raise.
1096|    c = [None, "NE", "NW", "SW", "SE", "E", "W", "E", "S", "N", "C"][loc]
1097|    container = parentbbox.padded(-borderpad)
1098|    return bbox.anchored(c, container=container).p0
1099|
1100|
1101|class AnchoredText(AnchoredOffsetbox):
1102|    """
1103|    AnchoredOffsetbox with Text.
1104|    """
1105|
1106|    @_api.make_keyword_only("3.6", name="pad")
1107|    def __init__(self, s, loc, pad=0.4, borderpad=0.5, prop=None, **kwargs):
1108|        """
1109|        Parameters
1110|        ----------
1111|        s : str
1112|            Text.
1113|
1114|        loc : str
1115|            Location code. See `AnchoredOffsetbox`.
1116|
1117|        pad : float, default: 0.4
1118|            Padding around the text as fraction of the fontsize.
1119|
1120|        borderpad : float, default: 0.5
1121|            Spacing between the offsetbox frame and the *bbox_to_anchor*.
1122|
1123|        prop : dict, optional
1124|            Dictionary of keyword parameters to be passed to the
1125|            `~matplotlib.text.Text` instance contained inside AnchoredText.
1126|
1127|        **kwargs
1128|            All other parameters are passed to `AnchoredOffsetbox`.
1129|        """
1130|
1131|        if prop is None:
1132|            prop = {}
1133|        badkwargs = {'va', 'verticalalignment'}
1134|        if badkwargs & set(prop):
1135|            raise ValueError(
1136|                'Mixing verticalalignment with AnchoredText is not supported.')
1137|
1138|        self.txt = TextArea(s, textprops=prop)
1139|        fp = self.txt._text.get_fontproperties()
1140|        super().__init__(
1141|            loc, pad=pad, borderpad=borderpad, child=self.txt, prop=fp,
1142|            **kwargs)
1143|
1144|
1145|class OffsetImage(OffsetBox):
1146|
1147|    @_api.make_keyword_only("3.6", name="zoom")
1148|    def __init__(self, arr,
1149|                 zoom=1,
1150|                 cmap=None,
1151|                 norm=None,
1152|                 interpolation=None,
1153|                 origin=None,
1154|                 filternorm=True,
1155|                 filterrad=4.0,
1156|                 resample=False,
1157|                 dpi_cor=True,
1158|                 **kwargs
1159|                 ):
1160|
1161|        super().__init__()
1162|        self._dpi_cor = dpi_cor
1163|
1164|        self.image = BboxImage(bbox=self.get_window_extent,
1165|                               cmap=cmap,
1166|                               norm=norm,
1167|                               interpolation=interpolation,
1168|                               origin=origin,
1169|                               filternorm=filternorm,
1170|                               filterrad=filterrad,
1171|                               resample=resample,
1172|                               **kwargs
1173|                               )
1174|
1175|        self._children = [self.image]
1176|
1177|        self.set_zoom(zoom)
1178|        self.set_data(arr)
1179|
1180|    def set_data(self, arr):
1181|        self._data = np.asarray(arr)
1182|        self.image.set_data(self._data)
1183|        self.stale = True
1184|
1185|    def get_data(self):
1186|        return self._data
1187|
1188|    def set_zoom(self, zoom):
1189|        self._zoom = zoom
1190|        self.stale = True
1191|
1192|    def get_zoom(self):
1193|        return self._zoom
1194|
1195|    def get_offset(self):
1196|        """Return offset of the container."""
1197|        return self._offset
1198|
1199|    def get_children(self):
1200|        return [self.image]
1201|
1202|    def get_bbox(self, renderer):
1203|        dpi_cor = renderer.points_to_pixels(1.) if self._dpi_cor else 1.
1204|        zoom = self.get_zoom()
1205|        data = self.get_data()
1206|        ny, nx = data.shape[:2]
1207|        w, h = dpi_cor * nx * zoom, dpi_cor * ny * zoom
1208|        return Bbox.from_bounds(0, 0, w, h)
1209|
1210|    def draw(self, renderer):
1211|        # docstring inherited
1212|        self.image.draw(renderer)
1213|        # bbox_artist(self, renderer, fill=False, props=dict(pad=0.))
1214|        self.stale = False
1215|
1216|
1217|class AnnotationBbox(martist.Artist, mtext._AnnotationBase):
1218|    """
1219|    Container for an `OffsetBox` referring to a specific position *xy*.
1220|
1221|    Optionally an arrow pointing from the offsetbox to *xy* can be drawn.
1222|
1223|    This is like `.Annotation`, but with `OffsetBox` instead of `.Text`.
1224|    """
1225|
1226|    zorder = 3
1227|
1228|    def __str__(self):
1229|        return f"AnnotationBbox({self.xy[0]:g},{self.xy[1]:g})"
1230|
1231|    @_docstring.dedent_interpd
1232|    @_api.make_keyword_only("3.6", name="xycoords")
1233|    def __init__(self, offsetbox, xy,
1234|                 xybox=None,
1235|                 xycoords='data',
1236|                 boxcoords=None,
1237|                 frameon=True, pad=0.4,  # FancyBboxPatch boxstyle.
1238|                 annotation_clip=None,
1239|                 box_alignment=(0.5, 0.5),
1240|                 bboxprops=None,
1241|                 arrowprops=None,
1242|                 fontsize=None,
1243|                 **kwargs):
1244|        """
1245|        Parameters
1246|        ----------
1247|        offsetbox : `OffsetBox`
1248|
1249|        xy : (float, float)
1250|            The point *(x, y)* to annotate. The coordinate system is determined
1251|            by *xycoords*.
1252|
1253|        xybox : (float, float), default: *xy*
1254|            The position *(x, y)* to place the text at. The coordinate system
1255|            is determined by *boxcoords*.
1256|
1257|        xycoords : single or two-tuple of str or `.Artist` or `.Transform` or \
1258|callable, default: 'data'
1259|            The coordinate system that *xy* is given in. See the parameter
1260|            *xycoords* in `.Annotation` for a detailed description.
1261|
1262|        boxcoords : single or two-tuple of str or `.Artist` or `.Transform` \
1263|or callable, default: value of *xycoords*
1264|            The coordinate system that *xybox* is given in. See the parameter
1265|            *textcoords* in `.Annotation` for a detailed description.
1266|
1267|        frameon : bool, default: True
1268|            By default, the text is surrounded by a white `.FancyBboxPatch`
1269|            (accessible as the ``patch`` attribute of the `.AnnotationBbox`).
1270|            If *frameon* is set to False, this patch is made invisible.
1271|
1272|        annotation_clip: bool or None, default: None
1273|            Whether to clip (i.e. not draw) the annotation when the annotation
1274|            point *xy* is outside the axes area.
1275|
1276|            - If *True*, the annotation will be clipped when *xy* is outside
1277|              the axes.
1278|            - If *False*, the annotation will always be drawn.
1279|            - If *None*, the annotation will be clipped when *xy* is outside
1280|              the axes and *xycoords* is 'data'.
1281|
1282|        pad : float, default: 0.4
1283|            Padding around the offsetbox.
1284|
1285|        box_alignment : (float, float)
1286|            A tuple of two floats for a vertical and horizontal alignment of
1287|            the offset box w.r.t. the *boxcoords*.
1288|            The lower-left corner is (0, 0) and upper-right corner is (1, 1).
1289|
1290|        bboxprops : dict, optional
1291|            A dictionary of properties to set for the annotation bounding box,
1292|            for example *boxstyle* and *alpha*.  See `.FancyBboxPatch` for
1293|            details.
1294|
1295|        arrowprops: dict, optional
1296|            Arrow properties, see `.Annotation` for description.
1297|
1298|        fontsize: float or str, optional
1299|            Translated to points and passed as *mutation_scale* into
1300|            `.FancyBboxPatch` to scale attributes of the box style (e.g. pad
1301|            or rounding_size).  The name is chosen in analogy to `.Text` where
1302|            *fontsize* defines the mutation scale as well.  If not given,
1303|            :rc:`legend.fontsize` is used.  See `.Text.set_fontsize` for valid
1304|            values.
1305|
1306|        **kwargs
1307|            Other `AnnotationBbox` properties.  See `.AnnotationBbox.set` for
1308|            a list.
1309|        """
1310|
1311|        martist.Artist.__init__(self)
1312|        mtext._AnnotationBase.__init__(
1313|            self, xy, xycoords=xycoords, annotation_clip=annotation_clip)
1314|
1315|        self.offsetbox = offsetbox
1316|        self.arrowprops = arrowprops.copy() if arrowprops is not None else None
1317|        self.set_fontsize(fontsize)
1318|        self.xybox = xybox if xybox is not None else xy
1319|        self.boxcoords = boxcoords if boxcoords is not None else xycoords
1320|        self._box_alignment = box_alignment
1321|
1322|        if arrowprops is not None:
1323|            self._arrow_relpos = self.arrowprops.pop("relpos", (0.5, 0.5))
1324|            self.arrow_patch = FancyArrowPatch((0, 0), (1, 1),
1325|                                               **self.arrowprops)
1326|        else:
1327|            self._arrow_relpos = None
1328|            self.arrow_patch = None
1329|
1330|        self.patch = FancyBboxPatch(  # frame
1331|            xy=(0.0, 0.0), width=1., height=1.,
1332|            facecolor='w', edgecolor='k',
1333|            mutation_scale=self.prop.get_size_in_points(),
1334|            snap=True,
1335|            visible=frameon,
1336|        )
1337|        self.patch.set_boxstyle("square", pad=pad)
1338|        if bboxprops:
1339|            self.patch.set(**bboxprops)
1340|
1341|        self._internal_update(kwargs)
1342|
1343|    @property
1344|    def xyann(self):
1345|        return self.xybox
1346|
1347|    @xyann.setter
1348|    def xyann(self, xyann):
1349|        self.xybox = xyann
1350|        self.stale = True
1351|
1352|    @property
1353|    def anncoords(self):
1354|        return self.boxcoords
1355|
1356|    @anncoords.setter
1357|    def anncoords(self, coords):
1358|        self.boxcoords = coords
1359|        self.stale = True
1360|
1361|    def contains(self, mouseevent):
1362|        inside, info = self._default_contains(mouseevent)
1363|        if inside is not None:
1364|            return inside, info
1365|        if not self._check_xy(None):
1366|            return False, {}
1367|        return self.offsetbox.contains(mouseevent)
1368|        # self.arrow_patch is currently not checked as this can be a line - JJ
1369|
1370|    def get_children(self):
1371|        children = [self.offsetbox, self.patch]
1372|        if self.arrow_patch:
1373|            children.append(self.arrow_patch)
1374|        return children
1375|
1376|    def set_figure(self, fig):
1377|        if self.arrow_patch is not None:
1378|            self.arrow_patch.set_figure(fig)
1379|        self.offsetbox.set_figure(fig)
1380|        martist.Artist.set_figure(self, fig)
1381|
1382|    def set_fontsize(self, s=None):
1383|        """
1384|        Set the fontsize in points.
1385|
1386|        If *s* is not given, reset to :rc:`legend.fontsize`.
1387|        """
1388|        if s is None:
1389|            s = mpl.rcParams["legend.fontsize"]
1390|
1391|        self.prop = FontProperties(size=s)
1392|        self.stale = True
1393|
1394|    def get_fontsize(self):
1395|        """Return the fontsize in points."""
1396|        return self.prop.get_size_in_points()
1397|
1398|    def get_window_extent(self, renderer=None):
1399|        # docstring inherited
1400|        if renderer is None:
1401|            renderer = self.figure._get_renderer()
1402|        return Bbox.union([child.get_window_extent(renderer)
1403|                           for child in self.get_children()])
1404|
1405|    def get_tightbbox(self, renderer=None):
1406|        # docstring inherited
1407|        return Bbox.union([child.get_tightbbox(renderer)
1408|                           for child in self.get_children()])
1409|
1410|    def update_positions(self, renderer):
1411|        """
1412|        Update pixel positions for the annotated point, the text and the arrow.
1413|        """
1414|
1415|        x, y = self.xybox
1416|        if isinstance(self.boxcoords, tuple):
1417|            xcoord, ycoord = self.boxcoords
1418|            x1, y1 = self._get_xy(renderer, x, y, xcoord)
1419|            x2, y2 = self._get_xy(renderer, x, y, ycoord)
1420|            ox0, oy0 = x1, y2
1421|        else:
1422|            ox0, oy0 = self._get_xy(renderer, x, y, self.boxcoords)
1423|
1424|        bbox = self.offsetbox.get_bbox(renderer)
1425|        fw, fh = self._box_alignment
1426|        self.offsetbox.set_offset(
1427|            (ox0 - fw*bbox.width - bbox.x0, oy0 - fh*bbox.height - bbox.y0))
1428|
1429|        bbox = self.offsetbox.get_window_extent(renderer)
1430|        self.patch.set_bounds(bbox.bounds)
1431|
1432|        mutation_scale = renderer.points_to_pixels(self.get_fontsize())
1433|        self.patch.set_mutation_scale(mutation_scale)
1434|
1435|        if self.arrowprops:
1436|            # Use FancyArrowPatch if self.arrowprops has "arrowstyle" key.
1437|
1438|            # Adjust the starting point of the arrow relative to the textbox.
1439|            # TODO: Rotation needs to be accounted.
1440|            arrow_begin = bbox.p0 + bbox.size * self._arrow_relpos
1441|            arrow_end = self._get_position_xy(renderer)
1442|            # The arrow (from arrow_begin to arrow_end) will be first clipped
1443|            # by patchA and patchB, then shrunk by shrinkA and shrinkB (in
1444|            # points).  If patch A is not set, self.bbox_patch is used.
1445|            self.arrow_patch.set_positions(arrow_begin, arrow_end)
1446|
1447|            if "mutation_scale" in self.arrowprops:
1448|                mutation_scale = renderer.points_to_pixels(
1449|                    self.arrowprops["mutation_scale"])
1450|                # Else, use fontsize-based mutation_scale defined above.
1451|            self.arrow_patch.set_mutation_scale(mutation_scale)
1452|
1453|            patchA = self.arrowprops.get("patchA", self.patch)
1454|            self.arrow_patch.set_patchA(patchA)
1455|
1456|    def draw(self, renderer):
1457|        # docstring inherited
1458|        if renderer is not None:
1459|            self._renderer = renderer
1460|        if not self.get_visible() or not self._check_xy(renderer):
1461|            return
1462|        renderer.open_group(self.__class__.__name__, gid=self.get_gid())
1463|        self.update_positions(renderer)
1464|        if self.arrow_patch is not None:
1465|            if self.arrow_patch.figure is None and self.figure is not None:
1466|                self.arrow_patch.figure = self.figure
1467|            self.arrow_patch.draw(renderer)
1468|        self.patch.draw(renderer)
1469|        self.offsetbox.draw(renderer)
1470|        renderer.close_group(self.__class__.__name__)
1471|        self.stale = False
1472|
1473|
1474|class DraggableBase:
1475|    """
1476|    Helper base class for a draggable artist (legend, offsetbox).
1477|
1478|    Derived classes must override the following methods::
1479|
1480|        def save_offset(self):
1481|            '''
1482|            Called when the object is picked for dragging; should save the
1483|            reference position of the artist.
1484|            '''
1485|
1486|        def update_offset(self, dx, dy):
1487|            '''
1488|            Called during the dragging; (*dx*, *dy*) is the pixel offset from
1489|            the point where the mouse drag started.
1490|            '''
1491|
1492|    Optionally, you may override the following method::
1493|
1494|        def finalize_offset(self):
1495|            '''Called when the mouse is released.'''
1496|
1497|    In the current implementation of `.DraggableLegend` and
1498|    `DraggableAnnotation`, `update_offset` places the artists in display
1499|    coordinates, and `finalize_offset` recalculates their position in axes
1500|    coordinate and set a relevant attribute.
1501|    """
1502|
1503|    def __init__(self, ref_artist, use_blit=False):
1504|        self.ref_artist = ref_artist
1505|        if not ref_artist.pickable():
1506|            ref_artist.set_picker(True)
1507|        self.got_artist = False
1508|        self.canvas = self.ref_artist.figure.canvas
1509|        self._use_blit = use_blit and self.canvas.supports_blit
1510|        self.cids = [
1511|            self.canvas.callbacks._connect_picklable(
1512|                'pick_event', self.on_pick),
1513|            self.canvas.callbacks._connect_picklable(
1514|                'button_release_event', self.on_release),
1515|        ]
1516|
1517|    def on_motion(self, evt):
1518|        if self._check_still_parented() and self.got_artist:
1519|            dx = evt.x - self.mouse_x
1520|            dy = evt.y - self.mouse_y
1521|            self.update_offset(dx, dy)
1522|            if self._use_blit:
1523|                self.canvas.restore_region(self.background)
1524|                self.ref_artist.draw(
1525|                    self.ref_artist.figure._get_renderer())
1526|                self.canvas.blit()
1527|            else:
1528|                self.canvas.draw()
1529|
1530|    def on_pick(self, evt):
1531|        if self._check_still_parented() and evt.artist == self.ref_artist:
1532|            self.mouse_x = evt.mouseevent.x
1533|            self.mouse_y = evt.mouseevent.y
1534|            self.got_artist = True
1535|            if self._use_blit:
1536|                self.ref_artist.set_animated(True)
1537|                self.canvas.draw()
1538|                self.background = \
1539|                    self.canvas.copy_from_bbox(self.ref_artist.figure.bbox)
1540|                self.ref_artist.draw(
1541|                    self.ref_artist.figure._get_renderer())
1542|                self.canvas.blit()
1543|            self._c1 = self.canvas.callbacks._connect_picklable(
1544|                "motion_notify_event", self.on_motion)
1545|            self.save_offset()
1546|
1547|    def on_release(self, event):
1548|        if self._check_still_parented() and self.got_artist:
1549|            self.finalize_offset()
1550|            self.got_artist = False
1551|            self.canvas.mpl_disconnect(self._c1)
1552|
1553|            if self._use_blit:
1554|                self.ref_artist.set_animated(False)
1555|
1556|    def _check_still_parented(self):
1557|        if self.ref_artist.figure is None:
1558|            self.disconnect()
1559|            return False
1560|        else:
1561|            return True
1562|
1563|    def disconnect(self):
1564|        """Disconnect the callbacks."""
1565|        for cid in self.cids:
1566|            self.canvas.mpl_disconnect(cid)
1567|        try:
1568|            c1 = self._c1
1569|        except AttributeError:
1570|            pass
1571|        else:
1572|            self.canvas.mpl_disconnect(c1)
1573|
1574|    def save_offset(self):
1575|        pass
1576|
1577|    def update_offset(self, dx, dy):
1578|        pass
1579|
1580|    def finalize_offset(self):
1581|        pass
1582|
1583|
1584|class DraggableOffsetBox(DraggableBase):
1585|    def __init__(self, ref_artist, offsetbox, use_blit=False):
1586|        super().__init__(ref_artist, use_blit=use_blit)
1587|        self.offsetbox = offsetbox
1588|
1589|    def save_offset(self):
1590|        offsetbox = self.offsetbox
1591|        renderer = offsetbox.figure._get_renderer()
1592|        offset = offsetbox.get_offset(offsetbox.get_bbox(renderer), renderer)
1593|        self.offsetbox_x, self.offsetbox_y = offset
1594|        self.offsetbox.set_offset(offset)
1595|
1596|    def update_offset(self, dx, dy):
1597|        loc_in_canvas = self.offsetbox_x + dx, self.offsetbox_y + dy
1598|        self.offsetbox.set_offset(loc_in_canvas)
1599|
1600|    def get_loc_in_canvas(self):
1601|        offsetbox = self.offsetbox
1602|        renderer = offsetbox.figure._get_renderer()
1603|        bbox = offsetbox.get_bbox(renderer)
1604|        ox, oy = offsetbox._offset
1605|        loc_in_canvas = (ox + bbox.x0, oy + bbox.y0)
1606|        return loc_in_canvas
1607|
1608|
1609|class DraggableAnnotation(DraggableBase):
1610|    def __init__(self, annotation, use_blit=False):
1611|        super().__init__(annotation, use_blit=use_blit)
1612|        self.annotation = annotation
1613|
1614|    def save_offset(self):
1615|        ann = self.annotation
1616|        self.ox, self.oy = ann.get_transform().transform(ann.xyann)
1617|
1618|    def update_offset(self, dx, dy):
1619|        ann = self.annotation
1620|        ann.xyann = ann.get_transform().inverted().transform(
1621|            (self.ox + dx, self.oy + dy))


============================================================



OBSERVATION:

Planner Invoked

============================================================



OBSERVATION:

Planner Invoked

============================================================



OBSERVATION:

CONTENT: Please continue working on the task on whatever approach you think is suitable.
If you think you have modified the code in a way that fixes the issue and thoroughly tested the fix (including edge cases and regression), please run the following command: <execute_bash> exit </execute_bash>.
IMPORTANT: YOU SHOULD NEVER ASK FOR HUMAN HELP OR USE THE INTERNET TO SOLVE THIS TASK.


============================================================



ACTION:

THOUGHT: I'll proceed with implementing the fix. Based on the analysis, the best approach is to modify the `DraggableBase` class in `offsetbox.py` to handle pickling properly since it's the base class for both `DraggableLegend` and `DraggableOffsetBox`.

Let's modify the `offsetbox.py` file:
CODE:
DIFF_STRING = """<<<<<<< SEARCH
    def __init__(self, ref_artist, use_blit=False):
        self.ref_artist = ref_artist
        if not ref_artist.pickable():
            ref_artist.set_picker(True)
        self.got_artist = False
        self.canvas = self.ref_artist.figure.canvas
        self._use_blit = use_blit and self.canvas.supports_blit
        self.cids = [
            self.canvas.callbacks._connect_picklable(
                'pick_event', self.on_pick),
            self.canvas.callbacks._connect_picklable(
                'button_release_event', self.on_release),
        ]
=======
    def __init__(self, ref_artist, use_blit=False):
        self.ref_artist = ref_artist
        if not ref_artist.pickable():
            ref_artist.set_picker(True)
        self.got_artist = False
        self._canvas = None
        self._use_blit = use_blit
        self.cids = []
        self._setup_canvas()

    def _setup_canvas(self):
        if self.ref_artist.figure is not None:
            self._canvas = self.ref_artist.figure.canvas
            self._use_blit = self._use_blit and self._canvas.supports_blit
            self.cids = [
                self._canvas.callbacks._connect_picklable(
                    'pick_event', self.on_pick),
                self._canvas.callbacks._connect_picklable(
                    'button_release_event', self.on_release),
            ]

    @property
    def canvas(self):
        if self._canvas is None and self.ref_artist.figure is not None:
            self._setup_canvas()
        return self._canvas

    def __getstate__(self):
        state = self.__dict__.copy()
        # Don't pickle canvas reference
        state['_canvas'] = None
        state['cids'] = []
        return state

    def __setstate__(self, state):
        self.__dict__.update(state)
        # Canvas will be restored when needed through the property
>>>>>>> REPLACE"""
edit_file('/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/offsetbox.py', diff_string=DIFF_STRING)

============================================================



OBSERVATION:

[File: /workspace/matplotlib__matplotlib__3.7/lib/matplotlib/offsetbox.py (1645 lines total after edit)]
[Diff of the changes applied. Please review the diff and remove if there are any redundant code lines or duplicates introduced or left to be removed.]
--- 
+++ 
@@ -1478,68 +1478,92 @@
     Derived classes must override the following methods::
 
         def save_offset(self):
             '''
             Called when the object is picked for dragging; should save the
             reference position of the artist.
             '''
 
         def update_offset(self, dx, dy):
             '''
             Called during the dragging; (*dx*, *dy*) is the pixel offset from
             the point where the mouse drag started.
             '''
 
     Optionally, you may override the following method::
 
         def finalize_offset(self):
             '''Called when the mouse is released.'''
 
     In the current implementation of `.DraggableLegend` and
     `DraggableAnnotation`, `update_offset` places the artists in display
     coordinates, and `finalize_offset` recalculates their position in axes
     coordinate and set a relevant attribute.
     """
 
     def __init__(self, ref_artist, use_blit=False):
         self.ref_artist = ref_artist
         if not ref_artist.pickable():
             ref_artist.set_picker(True)
         self.got_artist = False
-        self.canvas = self.ref_artist.figure.canvas
-        self._use_blit = use_blit and self.canvas.supports_blit
-        self.cids = [
-            self.canvas.callbacks._connect_picklable(
-                'pick_event', self.on_pick),
-            self.canvas.callbacks._connect_picklable(
-                'button_release_event', self.on_release),
-        ]
+        self._canvas = None
+        self._use_blit = use_blit
+        self.cids = []
+        self._setup_canvas()
+
+    def _setup_canvas(self):
+        if self.ref_artist.figure is not None:
+            self._canvas = self.ref_artist.figure.canvas
+            self._use_blit = self._use_blit and self._canvas.supports_blit
+            self.cids = [
+                self._canvas.callbacks._connect_picklable(
+                    'pick_event', self.on_pick),
+                self._canvas.callbacks._connect_picklable(
+                    'button_release_event', self.on_release),
+            ]
+
+    @property
+    def canvas(self):
+        if self._canvas is None and self.ref_artist.figure is not None:
+            self._setup_canvas()
+        return self._canvas
+
+    def __getstate__(self):
+        state = self.__dict__.copy()
+        # Don't pickle canvas reference
+        state['_canvas'] = None
+        state['cids'] = []
+        return state
+
+    def __setstate__(self, state):
+        self.__dict__.update(state)
+        # Canvas will be restored when needed through the property
 
     def on_motion(self, evt):
         if self._check_still_parented() and self.got_artist:
             dx = evt.x - self.mouse_x
             dy = evt.y - self.mouse_y
             self.update_offset(dx, dy)
             if self._use_blit:
                 self.canvas.restore_region(self.background)
                 self.ref_artist.draw(
                     self.ref_artist.figure._get_renderer())
                 self.canvas.blit()
             else:
                 self.canvas.draw()
 
     def on_pick(self, evt):
         if self._check_still_parented() and evt.artist == self.ref_artist:
             self.mouse_x = evt.mouseevent.x
             self.mouse_y = evt.mouseevent.y
             self.got_artist = True
             if self._use_blit:
                 self.ref_artist.set_animated(True)
                 self.canvas.draw()
                 self.background = \
                     self.canvas.copy_from_bbox(self.ref_artist.figure.bbox)
                 self.ref_artist.draw(
                     self.ref_artist.figure._get_renderer())
                 self.canvas.blit()
             self._c1 = self.canvas.callbacks._connect_picklable(
                 "motion_notify_event", self.on_motion)
             self.save_offset()
[File updated. Please review the changes carefully and make sure they are correct (correct indentation, no duplicate or redundant lines etc). Edit the file again if necessary.]


============================================================



ACTION:

THOUGHT: The changes look good. I've modified the `DraggableBase` class to:
1. Use a private `_canvas` attribute instead of direct canvas reference
2. Add `__getstate__` and `__setstate__` to handle pickling
3. Add a `canvas` property that lazily sets up the canvas when needed
4. Move canvas setup to a separate `_setup_canvas` method

Now let's test the changes with our reproduction script:
CODE:
CODE = """
import matplotlib
matplotlib.use('QtAgg')  # Force QtAgg backend

import matplotlib.pyplot as plt
import pickle

print(f"Backend being used: {matplotlib.get_backend()}")

try:
    # Create figure with draggable legend
    fig = plt.figure()
    ax = fig.add_subplot(111)
    time=[0,1,2,3,4]
    speed=[40,43,45,47,48]
    ax.plot(time,speed,label="speed")
    leg = ax.legend()
    leg.set_draggable(True)
    print("Legend made draggable")

    # Test pickling
    pickled_fig = pickle.dumps(fig)
    print("Successfully pickled figure")

    # Test unpickling
    unpickled_fig = pickle.loads(pickled_fig)
    print("Successfully unpickled figure")
    
    # Verify the legend is still there and draggable
    unpickled_leg = unpickled_fig.axes[0].get_legend()
    if unpickled_leg is not None:
        print("Legend preserved after unpickling")
        if hasattr(unpickled_leg, '_draggable'):
            print("Legend draggable state preserved")

except Exception as e:
    print(f"Error occurred: {str(e)}")
"""
create_file("test_pickle_draggable.py", CODE)

============================================================



OBSERVATION:

[File test_pickle_draggable.py created.]
[File: /workspace/test_pickle_draggable.py (37 lines total after edit)]
1|
2|import matplotlib
3|matplotlib.use('QtAgg')  # Force QtAgg backend
4|
5|import matplotlib.pyplot as plt
6|import pickle
7|
8|print(f"Backend being used: {matplotlib.get_backend()}")
9|
10|try:
11|    # Create figure with draggable legend
12|    fig = plt.figure()
13|    ax = fig.add_subplot(111)
14|    time=[0,1,2,3,4]
15|    speed=[40,43,45,47,48]
16|    ax.plot(time,speed,label="speed")
17|    leg = ax.legend()
18|    leg.set_draggable(True)
19|    print("Legend made draggable")
20|
21|    # Test pickling
22|    pickled_fig = pickle.dumps(fig)
23|    print("Successfully pickled figure")
24|
25|    # Test unpickling
26|    unpickled_fig = pickle.loads(pickled_fig)
27|    print("Successfully unpickled figure")
28|    
29|    # Verify the legend is still there and draggable
30|    unpickled_leg = unpickled_fig.axes[0].get_legend()
31|    if unpickled_leg is not None:
32|        print("Legend preserved after unpickling")
33|        if hasattr(unpickled_leg, '_draggable'):
34|            print("Legend draggable state preserved")
35|
36|except Exception as e:
37|    print(f"Error occurred: {str(e)}")
[File updated. Please review the changes carefully and make sure they are correct (correct indentation, no duplicate or redundant lines etc). Edit the file again if necessary.]


============================================================



ACTION:

THOUGHT: The test script looks good. Let's run it to verify our fix:
COMMAND:
python test_pickle_draggable.py

============================================================



OBSERVATION:

Backend being used: QtAgg
Error occurred: Cannot load backend 'QtAgg' which requires the 'qt' interactive framework, as 'headless' is currently running


============================================================



ACTION:

THOUGHT: Ah, we're in a headless environment. Let's modify the test to use the 'Agg' backend first to verify the pickling works, then create another test with 'QtAgg' that only runs if Qt is available:
CODE:
CODE = """
import matplotlib
matplotlib.use('Agg')  # Use Agg backend for headless testing

import matplotlib.pyplot as plt
import pickle

print(f"Backend being used: {matplotlib.get_backend()}")

try:
    # Create figure with draggable legend
    fig = plt.figure()
    ax = fig.add_subplot(111)
    time=[0,1,2,3,4]
    speed=[40,43,45,47,48]
    ax.plot(time,speed,label="speed")
    leg = ax.legend()
    leg.set_draggable(True)
    print("Legend made draggable")

    # Test pickling
    pickled_fig = pickle.dumps(fig)
    print("Successfully pickled figure")

    # Test unpickling
    unpickled_fig = pickle.loads(pickled_fig)
    print("Successfully unpickled figure")
    
    # Verify the legend is still there and draggable
    unpickled_leg = unpickled_fig.axes[0].get_legend()
    if unpickled_leg is not None:
        print("Legend preserved after unpickling")
        if hasattr(unpickled_leg, '_draggable'):
            print("Legend draggable state preserved")
            
    # Test that we can still modify the unpickled figure
    unpickled_leg.set_title("Modified after unpickling")
    print("Successfully modified unpickled legend")
    
    # Save the figure to verify it's valid
    unpickled_fig.savefig('test_unpickled.png')
    print("Successfully saved unpickled figure")

except Exception as e:
    print(f"Error occurred: {str(e)}")
    raise e
"""
create_file("test_pickle_draggable_agg.py", CODE)

============================================================



OBSERVATION:

[File test_pickle_draggable_agg.py created.]
[File: /workspace/test_pickle_draggable_agg.py (46 lines total after edit)]
1|
2|import matplotlib
3|matplotlib.use('Agg')  # Use Agg backend for headless testing
4|
5|import matplotlib.pyplot as plt
6|import pickle
7|
8|print(f"Backend being used: {matplotlib.get_backend()}")
9|
10|try:
11|    # Create figure with draggable legend
12|    fig = plt.figure()
13|    ax = fig.add_subplot(111)
14|    time=[0,1,2,3,4]
15|    speed=[40,43,45,47,48]
16|    ax.plot(time,speed,label="speed")
17|    leg = ax.legend()
18|    leg.set_draggable(True)
19|    print("Legend made draggable")
20|
21|    # Test pickling
22|    pickled_fig = pickle.dumps(fig)
23|    print("Successfully pickled figure")
24|
25|    # Test unpickling
26|    unpickled_fig = pickle.loads(pickled_fig)
27|    print("Successfully unpickled figure")
28|    
29|    # Verify the legend is still there and draggable
30|    unpickled_leg = unpickled_fig.axes[0].get_legend()
31|    if unpickled_leg is not None:
32|        print("Legend preserved after unpickling")
33|        if hasattr(unpickled_leg, '_draggable'):
34|            print("Legend draggable state preserved")
35|            
36|    # Test that we can still modify the unpickled figure
37|    unpickled_leg.set_title("Modified after unpickling")
38|    print("Successfully modified unpickled legend")
39|    
40|    # Save the figure to verify it's valid
41|    unpickled_fig.savefig('test_unpickled.png')
42|    print("Successfully saved unpickled figure")
43|
44|except Exception as e:
45|    print(f"Error occurred: {str(e)}")
46|    raise e
[File updated. Please review the changes carefully and make sure they are correct (correct indentation, no duplicate or redundant lines etc). Edit the file again if necessary.]


============================================================



ACTION:

THOUGHT: The test script looks good. Let's run it to verify our fix:
COMMAND:
python test_pickle_draggable_agg.py

============================================================



OBSERVATION:

Backend being used: agg
Legend made draggable
Successfully pickled figure
Successfully unpickled figure
Legend preserved after unpickling
Legend draggable state preserved
Successfully modified unpickled legend
Successfully saved unpickled figure


============================================================



ACTION:

THOUGHT: Excellent! The test results show that our fix works successfully:

1. The figure with draggable legend was created
2. Successfully pickled the figure
3. Successfully unpickled the figure
4. Legend was preserved after unpickling
5. Draggable state was preserved
6. Could modify the unpickled legend
7. Successfully saved the figure to verify it's valid

Let's verify the saved figure exists and is valid:
COMMAND:
ls -l test_unpickled.png

============================================================



OBSERVATION:

-rw-r--r-- 1 root root 22330 Dec 30 19:53 test_unpickled.png



============================================================

