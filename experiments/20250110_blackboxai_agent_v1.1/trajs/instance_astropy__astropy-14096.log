

TASK:


Subclassed SkyCoord gives misleading attribute access message
I'm trying to subclass `SkyCoord`, and add some custom properties. This all seems to be working fine, but when I have a custom property (`prop` below) that tries to access a non-existent attribute (`random_attr`) below, the error message is misleading because it says `prop` doesn't exist, where it should say `random_attr` doesn't exist.

```python
import astropy.coordinates as coord


class custom_coord(coord.SkyCoord):
    @property
    def prop(self):
        return self.random_attr


c = custom_coord('00h42m30s', '+41d12m00s', frame='icrs')
c.prop
```

raises
```
Traceback (most recent call last):
  File "test.py", line 11, in <module>
    c.prop
  File "/Users/dstansby/miniconda3/lib/python3.7/site-packages/astropy/coordinates/sky_coordinate.py", line 600, in __getattr__
    .format(self.__class__.__name__, attr))
AttributeError: 'custom_coord' object has no attribute 'prop'
```



============================================================



ACTION:

THOUGHT: I'll help you implement the necessary changes following the steps you outlined.

1. First, let's explore the repository structure:
CODE:
get_repo_structure("/workspace/astropy__astropy__5.1")

============================================================



OBSERVATION:

/workspace/astropy__astropy__5.1:
CHANGES.rst
CITATION
CODE_OF_CONDUCT.md
CONTRIBUTING.md
GOVERNANCE.md
LICENSE.rst
MANIFEST.in
README.rst
astropy
astropy.egg-info
cextern
codecov.yml
conftest.py
docs
examples
licenses
pip-requirements
pyproject.toml
setup.cfg
setup.py
tox.ini

/workspace/astropy__astropy__5.1/astropy:
CITATION
__init__.py
_compiler.c
_dev
_version.py
compiler_version.cpython-39-x86_64-linux-gnu.so
config
conftest.py
constants
convolution
coordinates
cosmology
extern
io
logger.py
modeling
nddata
samp
stats
table
tests
time
timeseries
uncertainty
units
utils
version.py
visualization
wcs

/workspace/astropy__astropy__5.1/astropy/_dev:
__init__.py
scm_version.py

/workspace/astropy__astropy__5.1/astropy/config:
__init__.py
configuration.py
paths.py
tests

/workspace/astropy__astropy__5.1/astropy/config/tests:
__init__.py
data
test_configs.py

/workspace/astropy__astropy__5.1/astropy/config/tests/data:
alias.cfg
deprecated.cfg
empty.cfg
not_empty.cfg

/workspace/astropy__astropy__5.1/astropy/constants:
__init__.py
astropyconst13.py
astropyconst20.py
astropyconst40.py
cgs.py
codata2010.py
codata2014.py
codata2018.py
config.py
constant.py
iau2012.py
iau2015.py
si.py
tests
utils.py

/workspace/astropy__astropy__5.1/astropy/constants/tests:
__init__.py
test_constant.py
test_pickle.py
test_prior_version.py
test_sciencestate.py

/workspace/astropy__astropy__5.1/astropy/convolution:
__init__.py
__pycache__
_convolve.c
_convolve.cpython-39-x86_64-linux-gnu.so
_convolve.pyx
convolve.py
core.py
kernels.py
setup_package.py
src
tests
utils.py

/workspace/astropy__astropy__5.1/astropy/convolution/__pycache__:
setup_package.cpython-39.pyc

/workspace/astropy__astropy__5.1/astropy/convolution/src:
convolve.c
convolve.h

/workspace/astropy__astropy__5.1/astropy/convolution/tests:
__init__.py
test_convolve.py
test_convolve_fft.py
test_convolve_kernels.py
test_convolve_models.py
test_convolve_nddata.py
test_convolve_speeds.py
test_discretize.py
test_kernel_class.py
test_pickle.py

/workspace/astropy__astropy__5.1/astropy/coordinates:
__init__.py
angle_formats.py
angle_lextab.py
angle_parsetab.py
angle_utilities.py
angles.py
attributes.py
baseframe.py
builtin_frames
calculation.py
data
distances.py
earth.py
earth_orientation.py
erfa_astrom.py
errors.py
funcs.py
jparser.py
matching.py
matrix_utilities.py
name_resolve.py
orbital_elements.py
representation.py
sites.py
sky_coordinate.py
sky_coordinate_parsers.py
solar_system.py
spectral_coordinate.py
spectral_quantity.py
tests
transformations.py

/workspace/astropy__astropy__5.1/astropy/coordinates/builtin_frames:
__init__.py
altaz.py
baseradec.py
cirs.py
cirs_observed_transforms.py
ecliptic.py
ecliptic_transforms.py
equatorial.py
fk4.py
fk4_fk5_transforms.py
fk5.py
galactic.py
galactic_transforms.py
galactocentric.py
gcrs.py
hadec.py
hcrs.py
icrs.py
icrs_cirs_transforms.py
icrs_fk5_transforms.py
icrs_observed_transforms.py
intermediate_rotation_transforms.py
itrs.py
itrs_observed_transforms.py
lsr.py
skyoffset.py
supergalactic.py
supergalactic_transforms.py
utils.py

/workspace/astropy__astropy__5.1/astropy/coordinates/data:
constellation_data_roman87.dat
constellation_names.dat
sites.json

/workspace/astropy__astropy__5.1/astropy/coordinates/tests:
__init__.py
accuracy
helper.py
test_angle_generators.py
test_angles.py
test_angular_separation.py
test_api_ape5.py
test_arrays.py
test_atc_replacements.py
test_celestial_transformations.py
test_distance.py
test_earth.py
test_earth_orientation.py
test_erfa_astrom.py
test_finite_difference_velocities.py
test_formatting.py
test_frames.py
test_frames_with_velocity.py
test_funcs.py
test_geodetic_representations.py
test_iau_fullstack.py
test_icrs_observed_transformations.py
test_intermediate_transformations.py
test_matching.py
test_matrix_utilities.py
test_name_resolve.py
test_pickle.py
test_regression.py
test_representation.py
test_representation_arithmetic.py
test_representation_methods.py
test_shape_manipulation.py
test_sites.py
test_sky_coord.py
test_sky_coord_velocities.py
test_skyoffset_transformations.py
test_solar_system.py
test_spectral_coordinate.py
test_spectral_quantity.py
test_transformations.py
test_unit_representation.py
test_utils.py
test_velocity_corrs.py

/workspace/astropy__astropy__5.1/astropy/coordinates/tests/accuracy:
__init__.py
data
generate_ref_ast.py
generate_spectralcoord_ref.py
test_altaz_icrs.py
test_ecliptic.py
test_fk4_no_e_fk4.py
test_fk4_no_e_fk5.py
test_galactic_fk4.py
test_icrs_fk5.py

/workspace/astropy__astropy__5.1/astropy/coordinates/tests/accuracy/data:
fk4_no_e_fk4.csv
fk4_no_e_fk5.csv
galactic_fk4.csv
icrs_fk5.csv
rv.ecsv

/workspace/astropy__astropy__5.1/astropy/cosmology:
__init__.py
connect.py
core.py
data
flrw
funcs
io
parameter.py
parameters.py
realizations.py
tests
units.py
utils.py

/workspace/astropy__astropy__5.1/astropy/cosmology/data:
Planck13.ecsv
Planck15.ecsv
Planck18.ecsv
WMAP1.ecsv
WMAP3.ecsv
WMAP5.ecsv
WMAP7.ecsv
WMAP9.ecsv

/workspace/astropy__astropy__5.1/astropy/cosmology/flrw:
__init__.py
base.py
lambdacdm.py
scalar_inv_efuncs.c
scalar_inv_efuncs.cpython-39-x86_64-linux-gnu.so
scalar_inv_efuncs.pyx
tests
w0cdm.py
w0wacdm.py
w0wzcdm.py
wpwazpcdm.py

/workspace/astropy__astropy__5.1/astropy/cosmology/flrw/tests:
__init__.py
conftest.py
test_base.py
test_init.py
test_lambdacdm.py
test_w0cdm.py
test_w0wacdm.py
test_w0wzcdm.py
test_wpwazpcdm.py

/workspace/astropy__astropy__5.1/astropy/cosmology/funcs:
__init__.py
comparison.py
optimize.py
tests

/workspace/astropy__astropy__5.1/astropy/cosmology/funcs/tests:
__init__.py
test_comparison.py
test_funcs.py

/workspace/astropy__astropy__5.1/astropy/cosmology/io:
__init__.py
cosmology.py
ecsv.py
html.py
mapping.py
model.py
row.py
table.py
tests
utils.py
yaml.py

/workspace/astropy__astropy__5.1/astropy/cosmology/io/tests:
__init__.py
base.py
test_.py
test_cosmology.py
test_ecsv.py
test_html.py
test_json.py
test_mapping.py
test_model.py
test_row.py
test_table.py
test_yaml.py

/workspace/astropy__astropy__5.1/astropy/cosmology/tests:
__init__.py
conftest.py
helper.py
test_connect.py
test_core.py
test_cosmology.py
test_parameter.py
test_parameters.py
test_realizations.py
test_units.py
test_utils.py

/workspace/astropy__astropy__5.1/astropy/extern:
README.rst
__init__.py
_strptime.py
configobj
jquery
ply

/workspace/astropy__astropy__5.1/astropy/extern/configobj:
__init__.py
configobj.py
validate.py

/workspace/astropy__astropy__5.1/astropy/extern/jquery:
__init__.py
data

/workspace/astropy__astropy__5.1/astropy/extern/jquery/data:
css
images
js

/workspace/astropy__astropy__5.1/astropy/extern/jquery/data/css:
jquery.dataTables.css

/workspace/astropy__astropy__5.1/astropy/extern/jquery/data/images:
sort_asc.png
sort_asc_disabled.png
sort_both.png
sort_desc.png
sort_desc_disabled.png

/workspace/astropy__astropy__5.1/astropy/extern/jquery/data/js:
jquery-3.6.0.js
jquery-3.6.0.min.js
jquery.dataTables.js
jquery.dataTables.min.js

/workspace/astropy__astropy__5.1/astropy/extern/ply:
__init__.py
cpp.py
ctokens.py
lex.py
yacc.py
ygen.py

/workspace/astropy__astropy__5.1/astropy/io:
__init__.py
ascii
fits
misc
registry
tests
votable

/workspace/astropy__astropy__5.1/astropy/io/ascii:
__init__.py
__pycache__
basic.py
cds.py
connect.py
core.py
cparser.c
cparser.cpython-39-x86_64-linux-gnu.so
cparser.pyx
daophot.py
docs.py
ecsv.py
fastbasic.py
fixedwidth.py
html.py
ipac.py
latex.py
misc.py
mrt.py
qdp.py
rst.py
setup_package.py
sextractor.py
src
tests
ui.py

/workspace/astropy__astropy__5.1/astropy/io/ascii/__pycache__:
setup_package.cpython-39.pyc

/workspace/astropy__astropy__5.1/astropy/io/ascii/src:
tokenizer.c
tokenizer.h

/workspace/astropy__astropy__5.1/astropy/io/ascii/tests:
__init__.py
common.py
data
test_c_reader.py
test_cds.py
test_cds_header_from_readme.py
test_compressed.py
test_connect.py
test_ecsv.py
test_fixedwidth.py
test_html.py
test_ipac_definitions.py
test_qdp.py
test_read.py
test_rst.py
test_types.py
test_write.py

/workspace/astropy__astropy__5.1/astropy/io/ascii/tests/data:
apostrophe.rdb
apostrophe.tab
bad.txt
bars_at_ends.txt
cds
cds.dat
cds2.dat
cdsFunctional.dat
cdsFunctional2.dat
cds_malformed.dat
commented_header.dat
commented_header2.dat
conf_py.txt
continuation.dat
daophot.dat
daophot.dat.gz
daophot2.dat
daophot3.dat
daophot4.dat
fill_values.txt
fixed_width_2_line.txt
html.html
html2.html
ipac.dat
ipac.dat.bz2
ipac.dat.xz
latex1.tex
latex1.tex.gz
latex2.tex
latex3.tex
nls1_stackinfo.dbout
no_data_cds.dat
no_data_daophot.dat
no_data_ipac.dat
no_data_sextractor.dat
no_data_with_header.dat
no_data_without_header.dat
sextractor.dat
sextractor2.dat
sextractor3.dat
short.rdb
short.rdb.bz2
short.rdb.gz
short.rdb.xz
short.tab
simple.txt
simple2.txt
simple3.txt
simple4.txt
simple5.txt
simple_csv.csv
simple_csv_missing.csv
space_delim_blank_lines.txt
space_delim_no_header.dat
space_delim_no_names.dat
subtypes.ecsv
test4.dat
test5.dat
vizier
vots_spec.dat
whitespace.dat

/workspace/astropy__astropy__5.1/astropy/io/ascii/tests/data/cds:
description
glob
multi
null

/workspace/astropy__astropy__5.1/astropy/io/ascii/tests/data/cds/description:
ReadMe
table.dat

/workspace/astropy__astropy__5.1/astropy/io/ascii/tests/data/cds/glob:
ReadMe
lmxbrefs.dat

/workspace/astropy__astropy__5.1/astropy/io/ascii/tests/data/cds/multi:
ReadMe
lhs2065.dat
lp944-20.dat

/workspace/astropy__astropy__5.1/astropy/io/ascii/tests/data/cds/null:
ReadMe
ReadMe1
table.dat

/workspace/astropy__astropy__5.1/astropy/io/ascii/tests/data/vizier:
ReadMe
table1.dat
table5.dat

/workspace/astropy__astropy__5.1/astropy/io/fits:
__init__.py
__pycache__
_utils.c
_utils.cpython-39-x86_64-linux-gnu.so
_utils.pyx
card.py
column.py
compression.cpython-39-x86_64-linux-gnu.so
connect.py
convenience.py
diff.py
file.py
fitsrec.py
fitstime.py
hdu
header.py
scripts
setup_package.py
src
tests
util.py
verify.py

/workspace/astropy__astropy__5.1/astropy/io/fits/__pycache__:
setup_package.cpython-39.pyc

/workspace/astropy__astropy__5.1/astropy/io/fits/hdu:
__init__.py
base.py
compressed.py
groups.py
hdulist.py
image.py
nonstandard.py
streaming.py
table.py

/workspace/astropy__astropy__5.1/astropy/io/fits/scripts:
__init__.py
fitscheck.py
fitsdiff.py
fitsheader.py
fitsinfo.py

/workspace/astropy__astropy__5.1/astropy/io/fits/src:
compressionmodule.c
compressionmodule.h

/workspace/astropy__astropy__5.1/astropy/io/fits/tests:
__init__.py
cfitsio_verify.c
conftest.py
data
test_checksum.py
test_compression_failures.py
test_connect.py
test_convenience.py
test_core.py
test_diff.py
test_division.py
test_fitscheck.py
test_fitsdiff.py
test_fitsheader.py
test_fitsinfo.py
test_fitstime.py
test_fsspec.py
test_groups.py
test_hdulist.py
test_header.py
test_image.py
test_image_dask.py
test_nonstandard.py
test_structured.py
test_table.py
test_tilde_path.py
test_uint.py
test_util.py

/workspace/astropy__astropy__5.1/astropy/io/fits/tests/data:
arange.fits
ascii.fits
ascii_i4-i20.fits
blank.fits
btable.fits
chandra_time.fits
checksum.fits
checksum_false.fits
comp.fits
compressed_float_bzero.fits
compressed_image.fits
double_ext.fits
fixed-1890.fits
group.fits
history_header.fits
invalid
memtest.fits
o4sp040b0_raw.fits
random_groups.fits
scale.fits
stddata.fits
table.fits
tb.fits
tdim.fits
test0.fits
test1.fits
theap-gap.fits
variable_length_table.fits
verify.fits
zerowidth.fits

/workspace/astropy__astropy__5.1/astropy/io/fits/tests/data/invalid:
group_invalid.fits

/workspace/astropy__astropy__5.1/astropy/io/misc:
__init__.py
asdf
connect.py
hdf5.py
pandas
parquet.py
pickle_helpers.py
tests
yaml.py

/workspace/astropy__astropy__5.1/astropy/io/misc/asdf:
__init__.py
conftest.py
connect.py
data
deprecation.py
extension.py
tags
tests
types.py

/workspace/astropy__astropy__5.1/astropy/io/misc/asdf/data:
schemas

/workspace/astropy__astropy__5.1/astropy/io/misc/asdf/data/schemas:
astropy.org

/workspace/astropy__astropy__5.1/astropy/io/misc/asdf/data/schemas/astropy.org:
astropy

/workspace/astropy__astropy__5.1/astropy/io/misc/asdf/data/schemas/astropy.org/astropy:
coordinates
fits
table
time
transform
units

/workspace/astropy__astropy__5.1/astropy/io/misc/asdf/data/schemas/astropy.org/astropy/coordinates:
angle-1.0.0.yaml
earthlocation-1.0.0.yaml
frames
latitude-1.0.0.yaml
longitude-1.0.0.yaml
representation-1.0.0.yaml
skycoord-1.0.0.yaml
spectralcoord-1.0.0.yaml

/workspace/astropy__astropy__5.1/astropy/io/misc/asdf/data/schemas/astropy.org/astropy/coordinates/frames:
baseframe-1.0.0.yaml
cirs-1.0.0.yaml
fk4-1.0.0.yaml
fk4noeterms-1.0.0.yaml
fk5-1.0.0.yaml
galactic-1.0.0.yaml
galactocentric-1.0.0.yaml
gcrs-1.0.0.yaml
icrs-1.0.0.yaml
icrs-1.1.0.yaml
itrs-1.0.0.yaml
precessedgeocentric-1.0.0.yaml

/workspace/astropy__astropy__5.1/astropy/io/misc/asdf/data/schemas/astropy.org/astropy/fits:
fits-1.0.0.yaml

/workspace/astropy__astropy__5.1/astropy/io/misc/asdf/data/schemas/astropy.org/astropy/table:
table-1.0.0.yaml

/workspace/astropy__astropy__5.1/astropy/io/misc/asdf/data/schemas/astropy.org/astropy/time:
timedelta-1.0.0.yaml

/workspace/astropy__astropy__5.1/astropy/io/misc/asdf/data/schemas/astropy.org/astropy/transform:
units_mapping-1.0.0.yaml

/workspace/astropy__astropy__5.1/astropy/io/misc/asdf/data/schemas/astropy.org/astropy/units:
equivalency-1.0.0.yaml

/workspace/astropy__astropy__5.1/astropy/io/misc/asdf/tags:
__init__.py
coordinates
fits
helpers.py
table
tests
time
transform
unit

/workspace/astropy__astropy__5.1/astropy/io/misc/asdf/tags/coordinates:
__init__.py
angle.py
earthlocation.py
frames.py
representation.py
skycoord.py
spectralcoord.py
tests

/workspace/astropy__astropy__5.1/astropy/io/misc/asdf/tags/coordinates/tests:
__init__.py
test_angle.py
test_earthlocation.py
test_frames.py
test_representation.py
test_skycoord.py
test_spectralcoord.py

/workspace/astropy__astropy__5.1/astropy/io/misc/asdf/tags/fits:
__init__.py
fits.py
tests

/workspace/astropy__astropy__5.1/astropy/io/misc/asdf/tags/fits/tests:
__init__.py
data
test_fits.py

/workspace/astropy__astropy__5.1/astropy/io/misc/asdf/tags/fits/tests/data:
complex.fits

/workspace/astropy__astropy__5.1/astropy/io/misc/asdf/tags/table:
__init__.py
table.py
tests

/workspace/astropy__astropy__5.1/astropy/io/misc/asdf/tags/table/tests:
__init__.py
test_table.py

/workspace/astropy__astropy__5.1/astropy/io/misc/asdf/tags/tests:
__init__.py
helpers.py

/workspace/astropy__astropy__5.1/astropy/io/misc/asdf/tags/time:
__init__.py
tests
time.py
timedelta.py

/workspace/astropy__astropy__5.1/astropy/io/misc/asdf/tags/time/tests:
__init__.py
test_time.py
test_timedelta.py

/workspace/astropy__astropy__5.1/astropy/io/misc/asdf/tags/transform:
__init__.py
basic.py
compound.py
functional_models.py
math.py
physical_models.py
polynomial.py
powerlaws.py
projections.py
spline.py
tabular.py
tests

/workspace/astropy__astropy__5.1/astropy/io/misc/asdf/tags/transform/tests:
__init__.py
test_transform.py
test_units_mapping.py

/workspace/astropy__astropy__5.1/astropy/io/misc/asdf/tags/unit:
__init__.py
equivalency.py
quantity.py
tests
unit.py

/workspace/astropy__astropy__5.1/astropy/io/misc/asdf/tags/unit/tests:
__init__.py
test_equivalency.py
test_quantity.py
test_unit.py

/workspace/astropy__astropy__5.1/astropy/io/misc/asdf/tests:
__init__.py
test_io.py

/workspace/astropy__astropy__5.1/astropy/io/misc/pandas:
__init__.py
connect.py

/workspace/astropy__astropy__5.1/astropy/io/misc/tests:
__init__.py
data
test_hdf5.py
test_pandas.py
test_parquet.py
test_pickle_helpers.py
test_yaml.py

/workspace/astropy__astropy__5.1/astropy/io/misc/tests/data:
old_meta_example.hdf5

/workspace/astropy__astropy__5.1/astropy/io/registry:
__init__.py
base.py
compat.py
core.py
interface.py
tests

/workspace/astropy__astropy__5.1/astropy/io/registry/tests:
__init__.py
test_registries.py
test_registry_help.py

/workspace/astropy__astropy__5.1/astropy/io/tests:
__init__.py
mixin_columns.py
safeio.py

/workspace/astropy__astropy__5.1/astropy/io/votable:
__init__.py
__pycache__
connect.py
converters.py
data
exceptions.py
setup_package.py
src
table.py
tablewriter.cpython-39-x86_64-linux-gnu.so
tests
tree.py
ucd.py
util.py
validator
volint.py
xmlutil.py

/workspace/astropy__astropy__5.1/astropy/io/votable/__pycache__:
setup_package.cpython-39.pyc

/workspace/astropy__astropy__5.1/astropy/io/votable/data:
VOTable.dtd
VOTable.v1.1.xsd
VOTable.v1.2.xsd
VOTable.v1.3.xsd
VOTable.v1.4.xsd
ucd1p-words.txt

/workspace/astropy__astropy__5.1/astropy/io/votable/src:
tablewriter.c

/workspace/astropy__astropy__5.1/astropy/io/votable/tests:
__init__.py
converter_test.py
data
exception_test.py
resource_test.py
table_test.py
tree_test.py
ucd_test.py
util_test.py
vo_test.py

/workspace/astropy__astropy__5.1/astropy/io/votable/tests/data:
binary2_masked_strings.xml
custom_datatype.xml
empty_table.xml
gemini.xml
irsa-nph-error.xml
irsa-nph-m31.xml
names.xml
no_field_not_empty_table.xml
no_resource.txt
no_resource.xml
nonstandard_units.xml
regression.bin.tabledata.truth.1.1.xml
regression.bin.tabledata.truth.1.3.xml
regression.xml
resource_groups.xml
tb.fits
timesys.xml
timesys_errors.xml
too_many_columns.xml.gz
valid_votable.xml
validation.txt

/workspace/astropy__astropy__5.1/astropy/io/votable/validator:
__init__.py
data
html.py
main.py
result.py

/workspace/astropy__astropy__5.1/astropy/io/votable/validator/data:
urls

/workspace/astropy__astropy__5.1/astropy/io/votable/validator/data/urls:
cone.big.dat.gz
cone.broken.dat.gz
cone.good.dat.gz
cone.incorrect.dat.gz

/workspace/astropy__astropy__5.1/astropy/modeling:
__init__.py
bounding_box.py
convolution.py
core.py
fitting.py
functional_models.py
mappings.py
math_functions.py
models.py
optimizers.py
parameters.py
physical_models.py
polynomial.py
powerlaws.py
projections.py
rotations.py
separable.py
spline.py
statistic.py
tabular.py
tests
utils.py

/workspace/astropy__astropy__5.1/astropy/modeling/tests:
__init__.py
data
example_models.py
irafutil.py
test_bounding_box.py
test_compound.py
test_constraints.py
test_convolution.py
test_core.py
test_fitters.py
test_functional_models.py
test_input.py
test_mappings.py
test_math_func.py
test_model_sets.py
test_models.py
test_models_quantities.py
test_parameters.py
test_physical_models.py
test_polynomial.py
test_projections.py
test_quantities_evaluation.py
test_quantities_fitting.py
test_quantities_model.py
test_quantities_parameters.py
test_quantities_rotations.py
test_rotations.py
test_separable.py
test_spline.py
test_statistics.py
test_units_mapping.py
test_utils.py

/workspace/astropy__astropy__5.1/astropy/modeling/tests/data:
1904-66_AZP.fits
__init__.py
hst_sip.hdr
idcompspec.fits
irac_sip.hdr
spec.txt

/workspace/astropy__astropy__5.1/astropy/nddata:
__init__.py
_testing.py
bitmask.py
blocks.py
ccddata.py
compat.py
decorators.py
flag_collection.py
mixins
nddata.py
nddata_base.py
nddata_withmixins.py
nduncertainty.py
tests
utils.py

/workspace/astropy__astropy__5.1/astropy/nddata/mixins:
__init__.py
ndarithmetic.py
ndio.py
ndslicing.py
tests

/workspace/astropy__astropy__5.1/astropy/nddata/mixins/tests:
__init__.py
test_ndarithmetic.py
test_ndio.py
test_ndslicing.py

/workspace/astropy__astropy__5.1/astropy/nddata/tests:
__init__.py
data
test_bitmask.py
test_blocks.py
test_ccddata.py
test_compat.py
test_decorators.py
test_flag_collection.py
test_nddata.py
test_nddata_base.py
test_nduncertainty.py
test_utils.py

/workspace/astropy__astropy__5.1/astropy/nddata/tests/data:
sip-wcs.fits

/workspace/astropy__astropy__5.1/astropy/samp:
__init__.py
__pycache__
client.py
constants.py
data
errors.py
hub.py
hub_proxy.py
hub_script.py
integrated_client.py
lockfile_helpers.py
setup_package.py
standard_profile.py
tests
utils.py
web_profile.py

/workspace/astropy__astropy__5.1/astropy/samp/__pycache__:
setup_package.cpython-39.pyc

/workspace/astropy__astropy__5.1/astropy/samp/data:
astropy_icon.png
clientaccesspolicy.xml
crossdomain.xml

/workspace/astropy__astropy__5.1/astropy/samp/tests:
__init__.py
test_client.py
test_errors.py
test_helpers.py
test_hub.py
test_hub_proxy.py
test_hub_script.py
test_standard_profile.py
test_web_profile.py
web_profile_test_helpers.py

/workspace/astropy__astropy__5.1/astropy/stats:
__init__.py
__pycache__
_fast_sigma_clip.cpython-39-x86_64-linux-gnu.so
_stats.c
_stats.cpython-39-x86_64-linux-gnu.so
_stats.pyx
bayesian_blocks.py
biweight.py
bls
circstats.py
funcs.py
histogram.py
info_theory.py
jackknife.py
lombscargle
setup_package.py
sigma_clipping.py
spatial.py
src
tests

/workspace/astropy__astropy__5.1/astropy/stats/__pycache__:
setup_package.cpython-39.pyc

/workspace/astropy__astropy__5.1/astropy/stats/bls:
__init__.py

/workspace/astropy__astropy__5.1/astropy/stats/lombscargle:
__init__.py

/workspace/astropy__astropy__5.1/astropy/stats/src:
compute_bounds.c
compute_bounds.h
fast_sigma_clip.c
wirth_select.c
wirth_select.h

/workspace/astropy__astropy__5.1/astropy/stats/tests:
__init__.py
test_bayesian_blocks.py
test_biweight.py
test_circstats.py
test_funcs.py
test_histogram.py
test_info_theory.py
test_jackknife.py
test_sigma_clipping.py
test_spatial.py

/workspace/astropy__astropy__5.1/astropy/table:
__init__.py
__pycache__
_column_mixins.c
_column_mixins.cpython-39-x86_64-linux-gnu.so
_column_mixins.pyx
_np_utils.c
_np_utils.cpython-39-x86_64-linux-gnu.so
_np_utils.pyx
bst.py
column.py
connect.py
groups.py
index.py
info.py
jsviewer.py
meta.py
mixins
ndarray_mixin.py
np_utils.py
operations.py
pandas.py
pprint.py
row.py
scripts
serialize.py
setup_package.py
soco.py
sorted_array.py
table.py
table_helpers.py
tests

/workspace/astropy__astropy__5.1/astropy/table/__pycache__:
setup_package.cpython-39.pyc

/workspace/astropy__astropy__5.1/astropy/table/mixins:
__init__.py
dask.py
registry.py
tests

/workspace/astropy__astropy__5.1/astropy/table/mixins/tests:
__init__.py
test_dask.py
test_registry.py

/workspace/astropy__astropy__5.1/astropy/table/scripts:
__init__.py
showtable.py

/workspace/astropy__astropy__5.1/astropy/table/tests:
__init__.py
conftest.py
test_array.py
test_bst.py
test_column.py
test_groups.py
test_index.py
test_info.py
test_init_table.py
test_item_access.py
test_jsviewer.py
test_masked.py
test_mixin.py
test_np_utils.py
test_operations.py
test_pickle.py
test_pprint.py
test_row.py
test_showtable.py
test_subclass.py
test_table.py

/workspace/astropy__astropy__5.1/astropy/tests:
__init__.py
command.py
figures
helper.py
runner.py
test_logger.py
tests

/workspace/astropy__astropy__5.1/astropy/tests/figures:
__init__.py
helpers.py
py39-test-image-mpl311-cov.json
py39-test-image-mpldev-cov.json

/workspace/astropy__astropy__5.1/astropy/tests/tests:
__init__.py
test_imports.py
test_quantity_helpers.py
test_run_tests.py
test_runner.py

/workspace/astropy__astropy__5.1/astropy/time:
__init__.py
__pycache__
_parse_times.cpython-39-x86_64-linux-gnu.so
core.py
formats.py
setup_package.py
src
tests
time_helper
utils.py

/workspace/astropy__astropy__5.1/astropy/time/__pycache__:
setup_package.cpython-39.pyc

/workspace/astropy__astropy__5.1/astropy/time/src:
parse_times.c

/workspace/astropy__astropy__5.1/astropy/time/tests:
__init__.py
test_basic.py
test_comparisons.py
test_corrs.py
test_custom_formats.py
test_delta.py
test_fast_parser.py
test_functions.py
test_guess.py
test_mask.py
test_methods.py
test_pickle.py
test_precision.py
test_quantity_interaction.py
test_sidereal.py
test_update_leap_seconds.py
test_ut1.py

/workspace/astropy__astropy__5.1/astropy/time/time_helper:
__init__.py
function_helpers.py

/workspace/astropy__astropy__5.1/astropy/timeseries:
__init__.py
binned.py
core.py
downsample.py
io
periodograms
sampled.py
tests

/workspace/astropy__astropy__5.1/astropy/timeseries/io:
__init__.py
kepler.py
tests

/workspace/astropy__astropy__5.1/astropy/timeseries/io/tests:
__init__.py
test_kepler.py

/workspace/astropy__astropy__5.1/astropy/timeseries/periodograms:
__init__.py
base.py
bls
lombscargle

/workspace/astropy__astropy__5.1/astropy/timeseries/periodograms/bls:
__init__.py
__pycache__
_impl.c
_impl.cpython-39-x86_64-linux-gnu.so
_impl.pyx
bls.c
core.py
methods.py
setup_package.py
tests

/workspace/astropy__astropy__5.1/astropy/timeseries/periodograms/bls/__pycache__:
setup_package.cpython-39.pyc

/workspace/astropy__astropy__5.1/astropy/timeseries/periodograms/bls/tests:
__init__.py
test_bls.py

/workspace/astropy__astropy__5.1/astropy/timeseries/periodograms/lombscargle:
__init__.py
_statistics.py
core.py
implementations
tests
utils.py

/workspace/astropy__astropy__5.1/astropy/timeseries/periodograms/lombscargle/implementations:
__init__.py
chi2_impl.py
cython_impl.c
cython_impl.cpython-39-x86_64-linux-gnu.so
cython_impl.pyx
fast_impl.py
fastchi2_impl.py
main.py
mle.py
scipy_impl.py
slow_impl.py
tests
utils.py

/workspace/astropy__astropy__5.1/astropy/timeseries/periodograms/lombscargle/implementations/tests:
__init__.py
test_mle.py
test_utils.py

/workspace/astropy__astropy__5.1/astropy/timeseries/periodograms/lombscargle/tests:
__init__.py
test_lombscargle.py
test_statistics.py
test_utils.py

/workspace/astropy__astropy__5.1/astropy/timeseries/tests:
__init__.py
data
test_binned.py
test_common.py
test_downsample.py
test_sampled.py

/workspace/astropy__astropy__5.1/astropy/timeseries/tests/data:
binned.csv
sampled.csv

/workspace/astropy__astropy__5.1/astropy/uncertainty:
__init__.py
core.py
distributions.py
tests

/workspace/astropy__astropy__5.1/astropy/uncertainty/tests:
__init__.py
test_distribution.py

/workspace/astropy__astropy__5.1/astropy/units:
__init__.py
_typing.py
astrophys.py
cds.py
cgs.py
core.py
decorators.py
deprecated.py
equivalencies.py
format
function
imperial.py
misc.py
photometric.py
physical.py
quantity.py
quantity_helper
required_by_vounit.py
si.py
structured.py
tests
utils.py

/workspace/astropy__astropy__5.1/astropy/units/format:
__init__.py
base.py
cds.py
cds_lextab.py
cds_parsetab.py
console.py
fits.py
generic.py
generic_lextab.py
generic_parsetab.py
latex.py
ogip.py
ogip_lextab.py
ogip_parsetab.py
unicode_format.py
utils.py
vounit.py

/workspace/astropy__astropy__5.1/astropy/units/function:
__init__.py
core.py
logarithmic.py
mixin.py
units.py

/workspace/astropy__astropy__5.1/astropy/units/quantity_helper:
__init__.py
converters.py
erfa.py
function_helpers.py
helpers.py
scipy_special.py

/workspace/astropy__astropy__5.1/astropy/units/tests:
__init__.py
test_aliases.py
test_deprecated.py
test_equivalencies.py
test_format.py
test_logarithmic.py
test_photometric.py
test_physical.py
test_quantity.py
test_quantity_annotations.py
test_quantity_array_methods.py
test_quantity_decorator.py
test_quantity_helpers.py
test_quantity_non_ufuncs.py
test_quantity_typing.py
test_quantity_ufuncs.py
test_structured.py
test_structured_erfa_ufuncs.py
test_units.py
test_utils.py

/workspace/astropy__astropy__5.1/astropy/utils:
__init__.py
__pycache__
_compiler.cpython-39-x86_64-linux-gnu.so
argparse.py
codegen.py
collections.py
compat
console.py
data.py
data_info.py
decorators.py
diff.py
exceptions.py
iers
introspection.py
masked
metadata.py
misc.py
parsing.py
setup_package.py
shapes.py
src
state.py
tests
xml

/workspace/astropy__astropy__5.1/astropy/utils/__pycache__:
setup_package.cpython-39.pyc

/workspace/astropy__astropy__5.1/astropy/utils/compat:
__init__.py
misc.py
numpycompat.py
optional_deps.py

/workspace/astropy__astropy__5.1/astropy/utils/iers:
__init__.py
data
iers.py
tests

/workspace/astropy__astropy__5.1/astropy/utils/iers/data:
Leap_Second.dat
ReadMe.eopc04_IAU2000
ReadMe.finals2000A
eopc04_IAU2000.62-now
update_builtin_iers.sh

/workspace/astropy__astropy__5.1/astropy/utils/iers/tests:
__init__.py
data
test_iers.py
test_leap_second.py

/workspace/astropy__astropy__5.1/astropy/utils/iers/tests/data:
finals2000A-2016-02-30-test
finals2000A-2016-04-30-test
iers_a_excerpt
leap-seconds.list

/workspace/astropy__astropy__5.1/astropy/utils/masked:
__init__.py
core.py
function_helpers.py
tests

/workspace/astropy__astropy__5.1/astropy/utils/masked/tests:
__init__.py
test_containers.py
test_function_helpers.py
test_functions.py
test_masked.py
test_table.py

/workspace/astropy__astropy__5.1/astropy/utils/src:
compiler.c

/workspace/astropy__astropy__5.1/astropy/utils/tests:
__init__.py
data
test_codegen.py
test_collections.py
test_console.py
test_data.py
test_data_info.py
test_decorators.py
test_diff.py
test_introspection.py
test_metadata.py
test_misc.py
test_parsing.py
test_progress_bar_func.py
test_shapes.py
test_state.py
test_xml.py

/workspace/astropy__astropy__5.1/astropy/utils/tests/data:
alias.cfg
dataurl
dataurl_mirror
local.dat
local.dat.bz2
local.dat.gz
local.dat.xz
test_package
unicode.txt
unicode.txt.bz2
unicode.txt.gz
unicode.txt.xz

/workspace/astropy__astropy__5.1/astropy/utils/tests/data/dataurl:
index.html

/workspace/astropy__astropy__5.1/astropy/utils/tests/data/dataurl_mirror:
index.html

/workspace/astropy__astropy__5.1/astropy/utils/tests/data/test_package:
__init__.py
data

/workspace/astropy__astropy__5.1/astropy/utils/tests/data/test_package/data:
foo.txt

/workspace/astropy__astropy__5.1/astropy/utils/xml:
__init__.py
__pycache__
_iterparser.cpython-39-x86_64-linux-gnu.so
check.py
iterparser.py
setup_package.py
src
tests
unescaper.py
validate.py
writer.py

/workspace/astropy__astropy__5.1/astropy/utils/xml/__pycache__:
setup_package.cpython-39.pyc

/workspace/astropy__astropy__5.1/astropy/utils/xml/src:
expat_config.h
iterparse.c
iterparse.map

/workspace/astropy__astropy__5.1/astropy/utils/xml/tests:
__init__.py
test_iterparse.py

/workspace/astropy__astropy__5.1/astropy/visualization:
__init__.py
hist.py
interval.py
lupton_rgb.py
mpl_normalize.py
mpl_style.py
scripts
stretch.py
tests
time.py
transform.py
units.py
wcsaxes

/workspace/astropy__astropy__5.1/astropy/visualization/scripts:
__init__.py
fits2bitmap.py
tests

/workspace/astropy__astropy__5.1/astropy/visualization/scripts/tests:
__init__.py
test_fits2bitmap.py

/workspace/astropy__astropy__5.1/astropy/visualization/tests:
__init__.py
test_histogram.py
test_interval.py
test_lupton_rgb.py
test_norm.py
test_stretch.py
test_time.py
test_units.py

/workspace/astropy__astropy__5.1/astropy/visualization/wcsaxes:
__init__.py
axislabels.py
coordinate_helpers.py
coordinate_range.py
coordinates_map.py
core.py
formatter_locator.py
frame.py
grid_paths.py
helpers.py
patches.py
tests
ticklabels.py
ticks.py
transforms.py
utils.py
wcsapi.py

/workspace/astropy__astropy__5.1/astropy/visualization/wcsaxes/tests:
__init__.py
data
test_coordinate_helpers.py
test_display_world_coordinates.py
test_formatter_locator.py
test_frame.py
test_grid_paths.py
test_images.py
test_misc.py
test_transform_coord_meta.py
test_transforms.py
test_utils.py
test_wcsapi.py

/workspace/astropy__astropy__5.1/astropy/visualization/wcsaxes/tests/data:
2MASS_k_header
cube_header
msx_header
rosat_header
slice_header

/workspace/astropy__astropy__5.1/astropy/wcs:
__init__.py
__pycache__
_wcs.cpython-39-x86_64-linux-gnu.so
docstrings.py
include
setup_package.py
src
tests
utils.py
wcs.py
wcsapi
wcslint.py

/workspace/astropy__astropy__5.1/astropy/wcs/__pycache__:
docstrings.cpython-39.pyc
setup_package.cpython-39.pyc

/workspace/astropy__astropy__5.1/astropy/wcs/include:
astropy_wcs
astropy_wcs_api.h
wcsconfig.h
wcslib

/workspace/astropy__astropy__5.1/astropy/wcs/include/astropy_wcs:
astropy_wcs.h
astropy_wcs_api.h
distortion.h
distortion_wrap.h
docstrings.h
isnan.h
pipeline.h
pyutil.h
sip.h
sip_wrap.h
str_list_proxy.h
unit_list_proxy.h
util.h
wcsconfig.h
wcslib_auxprm_wrap.h
wcslib_celprm_wrap.h
wcslib_prjprm_wrap.h
wcslib_tabprm_wrap.h
wcslib_units_wrap.h
wcslib_wrap.h
wcslib_wtbarr_wrap.h

/workspace/astropy__astropy__5.1/astropy/wcs/include/wcslib:
cel.h
lin.h
prj.h
spc.h
spx.h
tab.h
wcs.h
wcserr.h
wcsmath.h
wcsprintf.h

/workspace/astropy__astropy__5.1/astropy/wcs/src:
astropy_wcs.c
astropy_wcs_api.c
distortion.c
distortion_wrap.c
docstrings.c
pipeline.c
pyutil.c
sip.c
sip_wrap.c
str_list_proxy.c
unit_list_proxy.c
util.c
wcslib_auxprm_wrap.c
wcslib_celprm_wrap.c
wcslib_prjprm_wrap.c
wcslib_tabprm_wrap.c
wcslib_wrap.c
wcslib_wtbarr_wrap.c

/workspace/astropy__astropy__5.1/astropy/wcs/tests:
__init__.py
conftest.py
data
helper.py
test_auxprm.py
test_celprm.py
test_pickle.py
test_prjprm.py
test_profiling.py
test_tab.py
test_tabprm.py
test_utils.py
test_wcs.py
test_wcsprm.py
test_wtbarr.py

/workspace/astropy__astropy__5.1/astropy/wcs/tests/data:
2wcses.hdr
3d_cd.hdr
chandra-pixlist-wcs.hdr
defunct_keywords.hdr
dist.fits
dist_lookup.fits.gz
dss.14.29.56-62.41.05.fits.gz
header_newlines.fits
header_with_time.fits
header_with_time_wcslib71.fits
ie6d07ujq_wcs.fits
invalid_header.hdr
irac_sip.hdr
j94f05bgq_flt.fits
locale.hdr
maps
nonstandard_units.hdr
outside_sky.hdr
sip-broken.hdr
sip.fits
sip2.fits
siponly.hdr
spectra
sub-segfault.hdr
tab-time-last-axis.fits
too_many_pv.hdr
tpvonly.hdr
unit.hdr
validate.5.0.txt
validate.5.13.txt
validate.6.txt
validate.7.4.txt
validate.7.6.txt
validate.fits
validate.txt
zpn-hole.hdr

/workspace/astropy__astropy__5.1/astropy/wcs/tests/data/maps:
1904-66_AIR.hdr
1904-66_AIT.hdr
1904-66_ARC.hdr
1904-66_AZP.hdr
1904-66_BON.hdr
1904-66_CAR.hdr
1904-66_CEA.hdr
1904-66_COD.hdr
1904-66_COE.hdr
1904-66_COO.hdr
1904-66_COP.hdr
1904-66_CSC.hdr
1904-66_CYP.hdr
1904-66_HPX.hdr
1904-66_MER.hdr
1904-66_MOL.hdr
1904-66_NCP.hdr
1904-66_PAR.hdr
1904-66_PCO.hdr
1904-66_QSC.hdr
1904-66_SFL.hdr
1904-66_SIN.hdr
1904-66_STG.hdr
1904-66_SZP.hdr
1904-66_TAN.hdr
1904-66_TSC.hdr
1904-66_ZEA.hdr
1904-66_ZPN.hdr

/workspace/astropy__astropy__5.1/astropy/wcs/tests/data/spectra:
orion-freq-1.hdr
orion-freq-4.hdr
orion-velo-1.hdr
orion-velo-4.hdr
orion-wave-1.hdr
orion-wave-4.hdr

/workspace/astropy__astropy__5.1/astropy/wcs/wcsapi:
__init__.py
conftest.py
data
fitswcs.py
high_level_api.py
high_level_wcs_wrapper.py
low_level_api.py
sliced_low_level_wcs.py
tests
utils.py
wrappers

/workspace/astropy__astropy__5.1/astropy/wcs/wcsapi/data:
ucds.txt

/workspace/astropy__astropy__5.1/astropy/wcs/wcsapi/tests:
__init__.py
test_fitswcs.py
test_high_level_api.py
test_high_level_wcs_wrapper.py
test_low_level_api.py
test_utils.py

/workspace/astropy__astropy__5.1/astropy/wcs/wcsapi/wrappers:
__init__.py
base.py
sliced_wcs.py
tests

/workspace/astropy__astropy__5.1/astropy/wcs/wcsapi/wrappers/tests:
__init__.py
test_sliced_wcs.py

/workspace/astropy__astropy__5.1/astropy.egg-info:
PKG-INFO
SOURCES.txt
dependency_links.txt
entry_points.txt
not-zip-safe
requires.txt
top_level.txt

/workspace/astropy__astropy__5.1/cextern:
README.rst
cfitsio
expat
trim_cfitsio.sh
trim_expat.sh
trim_wcslib.sh
wcslib

/workspace/astropy__astropy__5.1/cextern/cfitsio:
License.txt
README.txt
docs
lib
zlib

/workspace/astropy__astropy__5.1/cextern/cfitsio/docs:
changes.txt

/workspace/astropy__astropy__5.1/cextern/cfitsio/lib:
buffers.c
cfileio.c
checksum.c
drvrfile.c
drvrmem.c
drvrnet.c
drvrsmem.c
drvrsmem.h
editcol.c
edithdu.c
eval_defs.h
eval_f.c
eval_l.c
eval_tab.h
eval_y.c
fits_hcompress.c
fits_hdecompress.c
fitscore.c
fitsio.h
fitsio2.h
getcol.c
getcolb.c
getcold.c
getcole.c
getcoli.c
getcolj.c
getcolk.c
getcoll.c
getcols.c
getcolsb.c
getcolui.c
getcoluj.c
getcoluk.c
getkey.c
group.c
group.h
grparser.c
grparser.h
histo.c
imcompress.c
iraffits.c
longnam.h
modkey.c
pliocomp.c
putcol.c
putcolb.c
putcold.c
putcole.c
putcoli.c
putcolj.c
putcolk.c
putcoll.c
putcols.c
putcolsb.c
putcolu.c
putcolui.c
putcoluj.c
putcoluk.c
putkey.c
quantize.c
region.c
region.h
ricecomp.c
scalnull.c
simplerng.c
simplerng.h
swapproc.c
wcssub.c
wcsutil.c
zcompress.c
zuncompress.c

/workspace/astropy__astropy__5.1/cextern/cfitsio/zlib:
adler32.c
compress.c
crc32.c
crc32.h
deflate.c
deflate.h
gzclose.c
gzguts.h
gzlib.c
gzread.c
gzwrite.c
infback.c
inffast.c
inffast.h
inffixed.h
inflate.c
inflate.h
inftrees.c
inftrees.h
trees.c
trees.h
uncompr.c
zconf.h
zlib.h
zutil.c
zutil.h

/workspace/astropy__astropy__5.1/cextern/expat:
AUTHORS
COPYING
Changes
README.md
README.txt
expat_config.h
expat_config.h.in
lib

/workspace/astropy__astropy__5.1/cextern/expat/lib:
Makefile.am
Makefile.in
ascii.h
asciitab.h
expat.h
expat_external.h
iasciitab.h
internal.h
latin1tab.h
libexpat.def
libexpatw.def
nametab.h
siphash.h
utf8tab.h
winconfig.h
xmlparse.c
xmlrole.c
xmlrole.h
xmltok.c
xmltok.h
xmltok_impl.c
xmltok_impl.h
xmltok_ns.c

/workspace/astropy__astropy__5.1/cextern/wcslib:
C
CHANGES
COPYING
COPYING.LESSER
GNUmakefile
INSTALL
README
THANKS
VALIDATION
config
configure
configure.ac
flavours
makedefs.in
makelog
wcsconfig.h.in
wcsconfig_f77.h.in
wcsconfig_tests.h.in
wcsconfig_utils.h.in
wcslib.pc.in

/workspace/astropy__astropy__5.1/cextern/wcslib/C:
GNUmakefile
cel.c
cel.h
dis.c
dis.h
fitshdr.h
fitshdr.l
flexed
getwcstab.c
getwcstab.h
lin.c
lin.h
log.c
log.h
prj.c
prj.h
spc.c
spc.h
sph.c
sph.h
spx.c
spx.h
tab.c
tab.h
wcs.c
wcs.h
wcsbth.l
wcserr.c
wcserr.h
wcsfix.c
wcsfix.h
wcshdr.c
wcshdr.h
wcslib.h
wcsmath.h
wcspih.l
wcsprintf.c
wcsprintf.h
wcstrig.c
wcstrig.h
wcsulex.l
wcsunits.c
wcsunits.h
wcsutil.c
wcsutil.h
wcsutrn.l
wtbarr.h

/workspace/astropy__astropy__5.1/cextern/wcslib/C/flexed:
README
fitshdr.c
wcsbth.c
wcspih.c
wcsulex.c
wcsutrn.c

/workspace/astropy__astropy__5.1/cextern/wcslib/config:
config.guess
config.sub
install-sh

/workspace/astropy__astropy__5.1/docs:
Makefile
_pkgtemplate.rst
_static
_templates
changelog.rst
changes
common_links.txt
conf.py
config
conftest.py
constants
convolution
coordinates
cosmology
credits.rst
development
getting_started.rst
glossary.rst
importing_astropy.rst
index.rst
install.rst
io
known_issues.rst
license.rst
logging.rst
lts_policy.rst
make.bat
modeling
nddata
nitpick-exceptions
overview.rst
robots.txt
samp
stats
table
testhelpers.rst
time
timeseries
uncertainty
units
utils
visualization
warnings.rst
wcs
whatsnew

/workspace/astropy__astropy__5.1/docs/_static:
astropy_banner.svg
astropy_banner_96.png
astropy_logo.pdf

/workspace/astropy__astropy__5.1/docs/_templates:
layout.html

/workspace/astropy__astropy__5.1/docs/changes:
13317.other.rst
13885.other.rst
14020.other.rst
README.rst
config
constants
convolution
coordinates
cosmology
extern
io.ascii
io.fits
io.misc
io.registry
io.votable
modeling
nddata
samp
stats
table
template.rst
tests
time
timeseries
uncertainty
units
utils
visualization
wcs

/workspace/astropy__astropy__5.1/docs/changes/config:

/workspace/astropy__astropy__5.1/docs/changes/constants:

/workspace/astropy__astropy__5.1/docs/changes/convolution:
13299.bugfix.rst
13300.api.rst
14035.bugfix.rst

/workspace/astropy__astropy__5.1/docs/changes/coordinates:
13398.feature.rst
13477.feature.rst
13484.bugfix.rst
13572.bugfix.rst
13933.bugfix.rst

/workspace/astropy__astropy__5.1/docs/changes/cosmology:
13075.feature.rst
13104.feature.rst
13261.feature.rst
13561.feature.rst

/workspace/astropy__astropy__5.1/docs/changes/extern:

/workspace/astropy__astropy__5.1/docs/changes/io.ascii:
13734.feature.rst

/workspace/astropy__astropy__5.1/docs/changes/io.fits:
13131.feature.rst
13238.feature.rst
13465.bugfix.rst

/workspace/astropy__astropy__5.1/docs/changes/io.misc:

/workspace/astropy__astropy__5.1/docs/changes/io.registry:

/workspace/astropy__astropy__5.1/docs/changes/io.votable:
13149.feature.rst
14102.bugfix.rst

/workspace/astropy__astropy__5.1/docs/changes/modeling:
13259.feature.rst
14037.feature.rst
14038.api.rst

/workspace/astropy__astropy__5.1/docs/changes/nddata:
13238.feature.rst
13743.feature.rst

/workspace/astropy__astropy__5.1/docs/changes/samp:

/workspace/astropy__astropy__5.1/docs/changes/stats:

/workspace/astropy__astropy__5.1/docs/changes/table:
13469.feature.rst

/workspace/astropy__astropy__5.1/docs/changes/tests:

/workspace/astropy__astropy__5.1/docs/changes/time:
13508.feature.rst
13555.feature.rst

/workspace/astropy__astropy__5.1/docs/changes/timeseries:
13069.bugfix.rst

/workspace/astropy__astropy__5.1/docs/changes/uncertainty:

/workspace/astropy__astropy__5.1/docs/changes/units:
12579.api.rst
12941.api.rst
13050.feature.rst
13329.feature.rst
13638.api.rst
13638.bugfix.rst
13669.feature.rst
13676.api.rst
13913.bugfix.rst
14042.feature.rst
14046.feature.rst

/workspace/astropy__astropy__5.1/docs/changes/utils:
13238.feature.rst
13329.feature.rst
13636.api.rst
13661.api.rst

/workspace/astropy__astropy__5.1/docs/changes/visualization:
12102.feature.rst
13562.feature.rst
13746.feature.rst
13810.api.rst
13829.feature.rst
13898.bugfix.rst

/workspace/astropy__astropy__5.1/docs/changes/wcs:

/workspace/astropy__astropy__5.1/docs/config:
astropy_config.rst
index.rst

/workspace/astropy__astropy__5.1/docs/constants:
index.rst
performance.inc.rst

/workspace/astropy__astropy__5.1/docs/convolution:
images
index.rst
kernels.rst
non_normalized_kernels.rst
performance.inc.rst
using.rst

/workspace/astropy__astropy__5.1/docs/convolution/images:
astropy.png
original.png
scipy.png

/workspace/astropy__astropy__5.1/docs/coordinates:
angles.rst
apply_space_motion.rst
common_errors.rst
definitions.rst
formatting.rst
frames.rst
galactocentric.rst
index.rst
inplace.rst
matchsep.rst
performance.inc.rst
remote_methods.rst
representations.rst
satellites.rst
skycoord.rst
solarsystem.rst
spectralcoord.rst
transforming.rst
velocities.rst

/workspace/astropy__astropy__5.1/docs/cosmology:
dev.rst
index.rst
io.rst
units.rst

/workspace/astropy__astropy__5.1/docs/development:
astropy-package-template.rst
building.rst
ccython.rst
codeguide.rst
codeguide_emacs.rst
docguide.rst
docrules.rst
releasing.rst
scripts.rst
style-guide.rst
testguide.rst
vision.rst
when_to_rebase.rst
workflow

/workspace/astropy__astropy__5.1/docs/development/workflow:
additional_git_topics.rst
branch_dropdown.png
development_workflow.rst
forking_button.png
get_devel_version.rst
git_edit_workflow_examples.rst
git_install.rst
git_links.inc
git_resources.rst
links.inc
maintainer_workflow.rst
patches.rst
pull_button.png
this_project.inc
virtual_pythons.rst
worked_example_switch_branch.png

/workspace/astropy__astropy__5.1/docs/io:
ascii
asdf-schemas.rst
fits
misc.rst
registry.rst
unified.rst
votable

/workspace/astropy__astropy__5.1/docs/io/ascii:
base_classes.rst
ecsv.rst
extension_classes.rst
fast_ascii_io.rst
fixed_width_gallery.rst
index.rst
performance.inc.rst
read.rst
references.txt
toc.txt
write.rst

/workspace/astropy__astropy__5.1/docs/io/fits:
api
appendix
index.rst
performance.inc.rst
usage

/workspace/astropy__astropy__5.1/docs/io/fits/api:
cards.rst
diff.rst
files.rst
hdulists.rst
hdus.rst
headers.rst
images.rst
tables.rst
verification.rst

/workspace/astropy__astropy__5.1/docs/io/fits/appendix:
faq.rst
header_transition.rst
history.rst

/workspace/astropy__astropy__5.1/docs/io/fits/usage:
cloud.rst
headers.rst
image.rst
misc.rst
scripts.rst
table.rst
unfamiliar.rst
verification.rst

/workspace/astropy__astropy__5.1/docs/io/votable:
api_exceptions.rst
index.rst
performance.inc.rst
references.txt

/workspace/astropy__astropy__5.1/docs/modeling:
add-units.rst
compound-models.rst
example-fitting-constraints.rst
example-fitting-line.rst
example-fitting-model-sets.rst
fitting.rst
index.rst
jointfitter.rst
links.inc
models.rst
new-fitter.rst
new-model.rst
parameters.rst
performance.rst
physical_models.rst
polynomial_models.rst
powerlaw_models.rst
predef_models1D.rst
predef_models2D.rst
reference_api.rst
spline_models.rst
units.rst

/workspace/astropy__astropy__5.1/docs/nddata:
bitmask.rst
ccddata.rst
decorator.rst
examples
index.rst
mixins
nddata.rst
performance.inc.rst
subclassing.rst
utils.rst

/workspace/astropy__astropy__5.1/docs/nddata/examples:
cutout2d_tofits.py

/workspace/astropy__astropy__5.1/docs/nddata/mixins:
index.rst
ndarithmetic.rst
ndio.rst
ndslicing.rst

/workspace/astropy__astropy__5.1/docs/samp:
advanced_embed_samp_hub.rst
example_clients.rst
example_hub.rst
example_table_image.rst
index.rst
performance.inc.rst

/workspace/astropy__astropy__5.1/docs/stats:
circ.rst
index.rst
performance.inc.rst
ripley.rst
robust.rst

/workspace/astropy__astropy__5.1/docs/table:
access_table.rst
construct_table.rst
implementation_details.rst
index.rst
indexing.rst
io.rst
masking.rst
mixin_columns.rst
modify_table.rst
operations.rst
pandas.rst
performance.inc.rst
table_architecture.png
table_repr_html.png
table_row.png
table_show_in_nb.png

/workspace/astropy__astropy__5.1/docs/time:
index.rst
performance.inc.rst
time_scale_conversion.odg
time_scale_conversion.png

/workspace/astropy__astropy__5.1/docs/timeseries:
analysis.rst
binned.csv
bls.rst
data_access.rst
index.rst
initializing.rst
io.rst
lombscargle.rst
masking.rst
pandas.rst
sampled.csv
times.rst

/workspace/astropy__astropy__5.1/docs/uncertainty:
index.rst
performance.inc.rst

/workspace/astropy__astropy__5.1/docs/units:
combining_and_defining.rst
constants_versions.rst
conversion.rst
decomposing_and_composing.rst
equivalencies.rst
format.rst
index.rst
logarithmic_units.rst
performance.inc.rst
physical_types.rst
quantity.rst
standard_units.rst
structured_units.rst
type_hints.rst

/workspace/astropy__astropy__5.1/docs/utils:
data.rst
iers.rst
index.rst
masked

/workspace/astropy__astropy__5.1/docs/utils/masked:
index.rst

/workspace/astropy__astropy__5.1/docs/visualization:
histogram.rst
index.rst
matplotlib_integration.rst
normalization.rst
performance.inc.rst
rgb.rst
wcsaxes

/workspace/astropy__astropy__5.1/docs/visualization/wcsaxes:
controlling_axes.rst
custom_frames.rst
generic_transforms.rst
images_contours.rst
index.rst
initializing_axes.rst
overlaying_coordinate_systems.rst
overlays.rst
slicing_datacubes.rst
ticks_labels_grid.rst

/workspace/astropy__astropy__5.1/docs/wcs:
example_create_imaging.rst
example_cube_wcs.rst
examples
history.rst
index.rst
legacy_interface.rst
loading_from_fits.rst
note_sip.rst
performance.inc.rst
reference_api.rst
references.rst
references.txt
relax.rst
supported_projections.rst
validation.rst
wcsapi.rst
wcstools.rst

/workspace/astropy__astropy__5.1/docs/wcs/examples:
cube_wcs.py
from_file.py
programmatic.py

/workspace/astropy__astropy__5.1/docs/whatsnew:
0.1.rst
0.2.rst
0.3.rst
0.4.rst
1.0.rst
1.1.rst
1.2.rst
1.3.rst
2.0.rst
3.0.rst
3.1.rst
3.2.rst
4.0.rst
4.1.rst
4.2.rst
4.3.rst
5.0.rst
5.1.rst
5.2.rst
5.3.rst
index.rst

/workspace/astropy__astropy__5.1/examples:
README.rst
coordinates
io
template

/workspace/astropy__astropy__5.1/examples/coordinates:
README.txt
plot_galactocentric-frame.py
plot_obs-planning.py
plot_sgr-coordinate-frame.py
rv-to-gsr.py

/workspace/astropy__astropy__5.1/examples/io:
Hs-2009-14-a-web.jpg
README.txt
create-mef.py
fits-tables.py
modify-fits-header.py
plot_fits-image.py
skip_create-large-fits.py
split-jpeg-to-fits.py

/workspace/astropy__astropy__5.1/examples/template:
example-template.py

/workspace/astropy__astropy__5.1/licenses:
AURA_LICENSE.rst
CONFIGOBJ_LICENSE.rst
DATATABLES_LICENSE.rst
ERFA.rst
EXPAT_LICENSE.rst
JQUERY_LICENSE.rst
NUMPY_LICENSE.rst
PLY_LICENSE.rst
PYFITS.rst
PYTHON.rst
README.rst
WCSLIB_LICENSE.rst

[Select the relevant files and use repo map to get highlevel representation and structure of repo]


============================================================



ACTION:

THOUGHT: Based on the repository structure, I can see this is related to the `coordinates` module in Astropy, specifically the `SkyCoord` class. Let me first create a script to reproduce the error:
COMMAND:
cat > reproduce_error.py << 'EOL'
import astropy.coordinates as coord

class custom_coord(coord.SkyCoord):
    @property
    def prop(self):
        return self.random_attr

c = custom_coord('00h42m30s', '+41d12m00s', frame='icrs')
c.prop
EOL

python reproduce_error.py

============================================================



OBSERVATION:

[Error: Writing files on bash is not supported . Use ipython commands - create_file or edit_file to update files]

============================================================



ACTION:

THOUGHT: I apologize. Let me create the script using the correct command:
CODE:
CODE = """import astropy.coordinates as coord

class custom_coord(coord.SkyCoord):
    @property
    def prop(self):
        return self.random_attr

c = custom_coord('00h42m30s', '+41d12m00s', frame='icrs')
c.prop"""

create_file("reproduce_error.py", CODE)

============================================================



OBSERVATION:

[File reproduce_error.py created.]
[File: /workspace/reproduce_error.py (9 lines total after edit)]
1|import astropy.coordinates as coord
2|
3|class custom_coord(coord.SkyCoord):
4|    @property
5|    def prop(self):
6|        return self.random_attr
7|
8|c = custom_coord('00h42m30s', '+41d12m00s', frame='icrs')
9|c.prop
[File updated. Please review the changes carefully and make sure they are correct (correct indentation, no duplicate or redundant lines etc). Edit the file again if necessary.]


============================================================



ACTION:

THOUGHT: The script looks correct. Let's run it to reproduce the error:
COMMAND:
python reproduce_error.py

============================================================



OBSERVATION:

Traceback (most recent call last):
  File "/workspace/reproduce_error.py", line 9, in <module>
    c.prop
  File "/testbed/astropy/coordinates/sky_coordinate.py", line 898, in __getattr__
    raise AttributeError(
AttributeError: 'custom_coord' object has no attribute 'prop'


============================================================



ACTION:

THOUGHT: Great, I've reproduced the error. The issue is in the error handling of `__getattr__` in `SkyCoord` class. Let me examine the relevant file:
CODE:
open_file('/workspace/astropy__astropy__5.1/astropy/coordinates/sky_coordinate.py')

============================================================



OBSERVATION:

[File: /workspace/astropy__astropy__5.1/astropy/coordinates/sky_coordinate.py (2223 lines total)]
1|import copy
2|import operator
3|import re
4|import warnings
5|
6|import erfa
7|import numpy as np
8|
9|from astropy import units as u
10|from astropy.constants import c as speed_of_light
11|from astropy.table import QTable
12|from astropy.time import Time
13|from astropy.utils import ShapedLikeNDArray
14|from astropy.utils.data_info import MixinInfo
15|from astropy.utils.exceptions import AstropyUserWarning
16|
17|from .angles import Angle
18|from .baseframe import BaseCoordinateFrame, GenericFrame, frame_transform_graph
19|from .distances import Distance
20|from .representation import (
21|    RadialDifferential,
22|    SphericalDifferential,
23|    SphericalRepresentation,
24|    UnitSphericalCosLatDifferential,
25|    UnitSphericalDifferential,
26|    UnitSphericalRepresentation,
27|)
28|from .sky_coordinate_parsers import (
29|    _get_frame_class,
30|    _get_frame_without_data,
31|    _parse_coordinate_data,
32|)
33|
34|__all__ = ["SkyCoord", "SkyCoordInfo"]
35|
36|
37|class SkyCoordInfo(MixinInfo):
38|    """
39|    Container for meta information like name, description, format.  This is
40|    required when the object is used as a mixin column within a table, but can
41|    be used as a general way to store meta information.
42|    """
43|
44|    attrs_from_parent = {"unit"}  # Unit is read-only
45|    _supports_indexing = False
46|
47|    @staticmethod
48|    def default_format(val):
49|        repr_data = val.info._repr_data
50|        formats = ["{0." + compname + ".value:}" for compname in repr_data.components]
51|        return ",".join(formats).format(repr_data)
52|
53|    @property
54|    def unit(self):
55|        repr_data = self._repr_data
56|        unit = ",".join(
57|            str(getattr(repr_data, comp).unit) or "None"
58|            for comp in repr_data.components
59|        )
60|        return unit
61|
62|    @property
63|    def _repr_data(self):
64|        if self._parent is None:
65|            return None
66|
67|        sc = self._parent
68|        if issubclass(sc.representation_type, SphericalRepresentation) and isinstance(
69|            sc.data, UnitSphericalRepresentation
70|        ):
71|            repr_data = sc.represent_as(sc.data.__class__, in_frame_units=True)
72|        else:
73|            repr_data = sc.represent_as(sc.representation_type, in_frame_units=True)
74|        return repr_data
75|
76|    def _represent_as_dict(self):
77|        sc = self._parent
78|        attrs = list(sc.representation_component_names)
79|
80|        # Don't output distance unless it's actually distance.
81|        if isinstance(sc.data, UnitSphericalRepresentation):
82|            attrs = attrs[:-1]
83|
84|        diff = sc.data.differentials.get("s")
85|        if diff is not None:
86|            diff_attrs = list(sc.get_representation_component_names("s"))
87|            # Don't output proper motions if they haven't been specified.
88|            if isinstance(diff, RadialDifferential):
89|                diff_attrs = diff_attrs[2:]
90|            # Don't output radial velocity unless it's actually velocity.
91|            elif isinstance(
92|                diff, (UnitSphericalDifferential, UnitSphericalCosLatDifferential)
93|            ):
94|                diff_attrs = diff_attrs[:-1]
95|            attrs.extend(diff_attrs)
96|
97|        attrs.extend(frame_transform_graph.frame_attributes.keys())
98|
99|        out = super()._represent_as_dict(attrs)
100|
101|        out["representation_type"] = sc.representation_type.get_name()
102|        out["frame"] = sc.frame.name
103|        # Note that sc.info.unit is a fake composite unit (e.g. 'deg,deg,None'
104|        # or None,None,m) and is not stored.  The individual attributes have
105|        # units.
106|
107|        return out
108|
109|    def new_like(self, skycoords, length, metadata_conflicts="warn", name=None):
110|        """
111|        Return a new SkyCoord instance which is consistent with the input
112|        SkyCoord objects ``skycoords`` and has ``length`` rows.  Being
113|        "consistent" is defined as being able to set an item from one to each of
114|        the rest without any exception being raised.
115|
116|        This is intended for creating a new SkyCoord instance whose elements can
117|        be set in-place for table operations like join or vstack.  This is used
118|        when a SkyCoord object is used as a mixin column in an astropy Table.
119|
120|        The data values are not predictable and it is expected that the consumer
121|        of the object will fill in all values.
122|
123|        Parameters
124|        ----------
125|        skycoords : list
126|            List of input SkyCoord objects
127|        length : int
128|            Length of the output skycoord object
129|        metadata_conflicts : str ('warn'|'error'|'silent')
130|            How to handle metadata conflicts
131|        name : str
132|            Output name (sets output skycoord.info.name)
133|
134|        Returns
135|        -------
136|        skycoord : SkyCoord (or subclass)
137|            Instance of this class consistent with ``skycoords``
138|
139|        """
140|        # Get merged info attributes like shape, dtype, format, description, etc.
141|        attrs = self.merge_cols_attributes(
142|            skycoords, metadata_conflicts, name, ("meta", "description")
143|        )
144|        skycoord0 = skycoords[0]
145|
146|        # Make a new SkyCoord object with the desired length and attributes
147|        # by using the _apply / __getitem__ machinery to effectively return
148|        # skycoord0[[0, 0, ..., 0, 0]]. This will have the all the right frame
149|        # attributes with the right shape.
150|        indexes = np.zeros(length, dtype=np.int64)
151|        out = skycoord0[indexes]
152|
153|        # Use __setitem__ machinery to check for consistency of all skycoords
154|        for skycoord in skycoords[1:]:
155|            try:
156|                out[0] = skycoord[0]
157|            except Exception as err:
158|                raise ValueError("Input skycoords are inconsistent.") from err
159|
160|        # Set (merged) info attributes
161|        for attr in ("name", "meta", "description"):
162|            if attr in attrs:
163|                setattr(out.info, attr, attrs[attr])
164|
165|        return out
166|
167|
168|class SkyCoord(ShapedLikeNDArray):
169|    """High-level object providing a flexible interface for celestial coordinate
170|    representation, manipulation, and transformation between systems.
171|
172|    The `SkyCoord` class accepts a wide variety of inputs for initialization. At
173|    a minimum these must provide one or more celestial coordinate values with
174|    unambiguous units.  Inputs may be scalars or lists/tuples/arrays, yielding
175|    scalar or array coordinates (can be checked via ``SkyCoord.isscalar``).
176|    Typically one also specifies the coordinate frame, though this is not
177|    required. The general pattern for spherical representations is::
178|
179|      SkyCoord(COORD, [FRAME], keyword_args ...)
180|      SkyCoord(LON, LAT, [FRAME], keyword_args ...)
181|      SkyCoord(LON, LAT, [DISTANCE], frame=FRAME, unit=UNIT, keyword_args ...)
182|      SkyCoord([FRAME], <lon_attr>=LON, <lat_attr>=LAT, keyword_args ...)
183|
184|    It is also possible to input coordinate values in other representations
185|    such as cartesian or cylindrical.  In this case one includes the keyword
186|    argument ``representation_type='cartesian'`` (for example) along with data
187|    in ``x``, ``y``, and ``z``.
188|
189|    See also: https://docs.astropy.org/en/stable/coordinates/
190|
191|    Examples
192|    --------
193|    The examples below illustrate common ways of initializing a `SkyCoord`
194|    object.  For a complete description of the allowed syntax see the
195|    full coordinates documentation.  First some imports::
196|
197|      >>> from astropy.coordinates import SkyCoord  # High-level coordinates
198|      >>> from astropy.coordinates import ICRS, Galactic, FK4, FK5  # Low-level frames
199|      >>> from astropy.coordinates import Angle, Latitude, Longitude  # Angles
200|      >>> import astropy.units as u
201|
202|    The coordinate values and frame specification can now be provided using
203|    positional and keyword arguments::
204|
205|      >>> c = SkyCoord(10, 20, unit="deg")  # defaults to ICRS frame
206|      >>> c = SkyCoord([1, 2, 3], [-30, 45, 8], frame="icrs", unit="deg")  # 3 coords
207|
208|      >>> coords = ["1:12:43.2 +31:12:43", "1 12 43.2 +31 12 43"]
209|      >>> c = SkyCoord(coords, frame=FK4, unit=(u.hourangle, u.deg), obstime="J1992.21")
210|
211|      >>> c = SkyCoord("1h12m43.2s +1d12m43s", frame=Galactic)  # Units from string
212|      >>> c = SkyCoord(frame="galactic", l="1h12m43.2s", b="+1d12m43s")
213|
214|      >>> ra = Longitude([1, 2, 3], unit=u.deg)  # Could also use Angle
215|      >>> dec = np.array([4.5, 5.2, 6.3]) * u.deg  # Astropy Quantity
216|      >>> c = SkyCoord(ra, dec, frame='icrs')
217|      >>> c = SkyCoord(frame=ICRS, ra=ra, dec=dec, obstime='2001-01-02T12:34:56')
218|
219|      >>> c = FK4(1 * u.deg, 2 * u.deg)  # Uses defaults for obstime, equinox
220|      >>> c = SkyCoord(c, obstime='J2010.11', equinox='B1965')  # Override defaults
221|
222|      >>> c = SkyCoord(w=0, u=1, v=2, unit='kpc', frame='galactic',
223|      ...              representation_type='cartesian')
224|
225|      >>> c = SkyCoord([ICRS(ra=1*u.deg, dec=2*u.deg), ICRS(ra=3*u.deg, dec=4*u.deg)])
226|
227|    Velocity components (proper motions or radial velocities) can also be
228|    provided in a similar manner::
229|
230|      >>> c = SkyCoord(ra=1*u.deg, dec=2*u.deg, radial_velocity=10*u.km/u.s)
231|
232|      >>> c = SkyCoord(ra=1*u.deg, dec=2*u.deg, pm_ra_cosdec=2*u.mas/u.yr, pm_dec=1*u.mas/u.yr)
233|
234|    As shown, the frame can be a `~astropy.coordinates.BaseCoordinateFrame`
235|    class or the corresponding string alias.  The frame classes that are built in
236|    to astropy are `ICRS`, `FK5`, `FK4`, `FK4NoETerms`, and `Galactic`.
237|    The string aliases are simply lower-case versions of the class name, and
238|    allow for creating a `SkyCoord` object and transforming frames without
239|    explicitly importing the frame classes.
240|
241|    Parameters
242|    ----------
243|    frame : `~astropy.coordinates.BaseCoordinateFrame` class or string, optional
244|        Type of coordinate frame this `SkyCoord` should represent. Defaults to
245|        to ICRS if not given or given as None.
246|    unit : `~astropy.units.Unit`, string, or tuple of :class:`~astropy.units.Unit` or str, optional
247|        Units for supplied coordinate values.
248|        If only one unit is supplied then it applies to all values.
249|        Note that passing only one unit might lead to unit conversion errors
250|        if the coordinate values are expected to have mixed physical meanings
251|        (e.g., angles and distances).
252|    obstime : time-like, optional
253|        Time(s) of observation.
254|    equinox : time-like, optional
255|        Coordinate frame equinox time.
256|    representation_type : str or Representation class
257|        Specifies the representation, e.g. 'spherical', 'cartesian', or
258|        'cylindrical'.  This affects the positional args and other keyword args
259|        which must correspond to the given representation.
260|    copy : bool, optional
261|        If `True` (default), a copy of any coordinate data is made.  This
262|        argument can only be passed in as a keyword argument.
263|    **keyword_args
264|        Other keyword arguments as applicable for user-defined coordinate frames.
265|        Common options include:
266|
267|        ra, dec : angle-like, optional
268|            RA and Dec for frames where ``ra`` and ``dec`` are keys in the
269|            frame's ``representation_component_names``, including `ICRS`,
270|            `FK5`, `FK4`, and `FK4NoETerms`.
271|        pm_ra_cosdec, pm_dec  : `~astropy.units.Quantity` ['angular speed'], optional
272|            Proper motion components, in angle per time units.
273|        l, b : angle-like, optional
274|            Galactic ``l`` and ``b`` for for frames where ``l`` and ``b`` are
275|            keys in the frame's ``representation_component_names``, including
276|            the `Galactic` frame.
277|        pm_l_cosb, pm_b : `~astropy.units.Quantity` ['angular speed'], optional
278|            Proper motion components in the `Galactic` frame, in angle per time
279|            units.
280|        x, y, z : float or `~astropy.units.Quantity` ['length'], optional
281|            Cartesian coordinates values
282|        u, v, w : float or `~astropy.units.Quantity` ['length'], optional
283|            Cartesian coordinates values for the Galactic frame.
284|        radial_velocity : `~astropy.units.Quantity` ['speed'], optional
285|            The component of the velocity along the line-of-sight (i.e., the
286|            radial direction), in velocity units.
287|    """
288|
289|    # Declare that SkyCoord can be used as a Table column by defining the
290|    # info property.
291|    info = SkyCoordInfo()
292|
293|    def __init__(self, *args, copy=True, **kwargs):
294|        # these are frame attributes set on this SkyCoord but *not* a part of
295|        # the frame object this SkyCoord contains
296|        self._extra_frameattr_names = set()
297|
298|        # If all that is passed in is a frame instance that already has data,
299|        # we should bypass all of the parsing and logic below. This is here
300|        # to make this the fastest way to create a SkyCoord instance. Many of
301|        # the classmethods implemented for performance enhancements will use
302|        # this as the initialization path
303|        if (
304|            len(args) == 1
305|            and len(kwargs) == 0
306|            and isinstance(args[0], (BaseCoordinateFrame, SkyCoord))
307|        ):
308|            coords = args[0]
309|            if isinstance(coords, SkyCoord):
310|                self._extra_frameattr_names = coords._extra_frameattr_names
311|                self.info = coords.info
312|
313|                # Copy over any extra frame attributes
314|                for attr_name in self._extra_frameattr_names:
315|                    # Setting it will also validate it.
316|                    setattr(self, attr_name, getattr(coords, attr_name))
317|
318|                coords = coords.frame
319|
320|            if not coords.has_data:
321|                raise ValueError(
322|                    "Cannot initialize from a coordinate frame "
323|                    "instance without coordinate data"
324|                )
325|
326|            if copy:
327|                self._sky_coord_frame = coords.copy()
328|            else:
329|                self._sky_coord_frame = coords
330|
331|        else:
332|            # Get the frame instance without coordinate data but with all frame
333|            # attributes set - these could either have been passed in with the
334|            # frame as an instance, or passed in as kwargs here
335|            frame_cls, frame_kwargs = _get_frame_without_data(args, kwargs)
336|
337|            # Parse the args and kwargs to assemble a sanitized and validated
338|            # kwargs dict for initializing attributes for this object and for
339|            # creating the internal self._sky_coord_frame object
340|            args = list(args)  # Make it mutable
341|            skycoord_kwargs, components, info = _parse_coordinate_data(
342|                frame_cls(**frame_kwargs), args, kwargs
343|            )
344|
345|            # In the above two parsing functions, these kwargs were identified
346|            # as valid frame attributes for *some* frame, but not the frame that
347|            # this SkyCoord will have. We keep these attributes as special
348|            # skycoord frame attributes:
349|            for attr in skycoord_kwargs:
350|                # Setting it will also validate it.
351|                setattr(self, attr, skycoord_kwargs[attr])
352|
353|            if info is not None:
354|                self.info = info
355|
356|            # Finally make the internal coordinate object.
357|            frame_kwargs.update(components)
358|            self._sky_coord_frame = frame_cls(copy=copy, **frame_kwargs)
359|
360|            if not self._sky_coord_frame.has_data:
361|                raise ValueError("Cannot create a SkyCoord without data")
362|
363|    @property
364|    def frame(self):
365|        return self._sky_coord_frame
366|
367|    @property
368|    def representation_type(self):
369|        return self.frame.representation_type
370|
371|    @representation_type.setter
372|    def representation_type(self, value):
373|        self.frame.representation_type = value
374|
375|    # TODO: remove these in future
376|    @property
377|    def representation(self):
378|        return self.frame.representation
379|
380|    @representation.setter
381|    def representation(self, value):
382|        self.frame.representation = value
383|
384|    @property
385|    def shape(self):
386|        return self.frame.shape
387|
388|    def __eq__(self, value):
389|        """Equality operator for SkyCoord
390|
391|        This implements strict equality and requires that the frames are
392|        equivalent, extra frame attributes are equivalent, and that the
393|        representation data are exactly equal.
394|        """
395|
396|        if isinstance(value, BaseCoordinateFrame):
397|            if value._data is None:
398|                raise ValueError("Can only compare SkyCoord to Frame with data")
399|
400|            return self.frame == value
401|
402|        if not isinstance(value, SkyCoord):
403|            return NotImplemented
404|
405|        # Make sure that any extra frame attribute names are equivalent.
406|        for attr in self._extra_frameattr_names | value._extra_frameattr_names:
407|            if not self.frame._frameattr_equiv(
408|                getattr(self, attr), getattr(value, attr)
409|            ):
410|                raise ValueError(
411|                    f"cannot compare: extra frame attribute '{attr}' is not equivalent"
412|                    " (perhaps compare the frames directly to avoid this exception)"
413|                )
414|
415|        return self._sky_coord_frame == value._sky_coord_frame
416|
417|    def __ne__(self, value):
418|        return np.logical_not(self == value)
419|
420|    def _apply(self, method, *args, **kwargs):
421|        """Create a new instance, applying a method to the underlying data.
422|
423|        In typical usage, the method is any of the shape-changing methods for
424|        `~numpy.ndarray` (``reshape``, ``swapaxes``, etc.), as well as those
425|        picking particular elements (``__getitem__``, ``take``, etc.), which
426|        are all defined in `~astropy.utils.shapes.ShapedLikeNDArray`. It will be
427|        applied to the underlying arrays in the representation (e.g., ``x``,
428|        ``y``, and ``z`` for `~astropy.coordinates.CartesianRepresentation`),
429|        as well as to any frame attributes that have a shape, with the results
430|        used to create a new instance.
431|
432|        Internally, it is also used to apply functions to the above parts
433|        (in particular, `~numpy.broadcast_to`).
434|
435|        Parameters
436|        ----------
437|        method : str or callable
438|            If str, it is the name of a method that is applied to the internal
439|            ``components``. If callable, the function is applied.
440|        *args
441|            Any positional arguments for ``method``.
442|        **kwargs : dict
443|            Any keyword arguments for ``method``.
444|        """
445|
446|        def apply_method(value):
447|            if isinstance(value, ShapedLikeNDArray):
448|                return value._apply(method, *args, **kwargs)
449|            else:
450|                if callable(method):
451|                    return method(value, *args, **kwargs)
452|                else:
453|                    return getattr(value, method)(*args, **kwargs)
454|
455|        # create a new but empty instance, and copy over stuff
456|        new = super().__new__(self.__class__)
457|        new._sky_coord_frame = self._sky_coord_frame._apply(method, *args, **kwargs)
458|        new._extra_frameattr_names = self._extra_frameattr_names.copy()
459|        for attr in self._extra_frameattr_names:
460|            value = getattr(self, attr)
461|            if getattr(value, "shape", ()):
462|                value = apply_method(value)
463|            elif method == "copy" or method == "flatten":
464|                # flatten should copy also for a single element array, but
465|                # we cannot use it directly for array scalars, since it
466|                # always returns a one-dimensional array. So, just copy.
467|                value = copy.copy(value)
468|            setattr(new, "_" + attr, value)
469|
470|        # Copy other 'info' attr only if it has actually been defined.
471|        # See PR #3898 for further explanation and justification, along
472|        # with Quantity.__array_finalize__
473|        if "info" in self.__dict__:
474|            new.info = self.info
475|
476|        return new
477|
478|    def __setitem__(self, item, value):
479|        """Implement self[item] = value for SkyCoord
480|
481|        The right hand ``value`` must be strictly consistent with self:
482|        - Identical class
483|        - Equivalent frames
484|        - Identical representation_types
485|        - Identical representation differentials keys
486|        - Identical frame attributes
487|        - Identical "extra" frame attributes (e.g. obstime for an ICRS coord)
488|
489|        With these caveats the setitem ends up as effectively a setitem on
490|        the representation data.
491|
492|          self.frame.data[item] = value.frame.data
493|        """
494|        if self.__class__ is not value.__class__:
495|            raise TypeError(
496|                "can only set from object of same class: "
497|                f"{self.__class__.__name__} vs. {value.__class__.__name__}"
498|            )
499|
500|        # Make sure that any extra frame attribute names are equivalent.
501|        for attr in self._extra_frameattr_names | value._extra_frameattr_names:
502|            if not self.frame._frameattr_equiv(
503|                getattr(self, attr), getattr(value, attr)
504|            ):
505|                raise ValueError(f"attribute {attr} is not equivalent")
506|
507|        # Set the frame values.  This checks frame equivalence and also clears
508|        # the cache to ensure that the object is not in an inconsistent state.
509|        self._sky_coord_frame[item] = value._sky_coord_frame
510|
511|    def insert(self, obj, values, axis=0):
512|        """
513|        Insert coordinate values before the given indices in the object and
514|        return a new Frame object.
515|
516|        The values to be inserted must conform to the rules for in-place setting
517|        of ``SkyCoord`` objects.
518|
519|        The API signature matches the ``np.insert`` API, but is more limited.
520|        The specification of insert index ``obj`` must be a single integer,
521|        and the ``axis`` must be ``0`` for simple insertion before the index.
522|
523|        Parameters
524|        ----------
525|        obj : int
526|            Integer index before which ``values`` is inserted.
527|        values : array-like
528|            Value(s) to insert.  If the type of ``values`` is different
529|            from that of quantity, ``values`` is converted to the matching type.
530|        axis : int, optional
531|            Axis along which to insert ``values``.  Default is 0, which is the
532|            only allowed value and will insert a row.
533|
534|        Returns
535|        -------
536|        out : `~astropy.coordinates.SkyCoord` instance
537|            New coordinate object with inserted value(s)
538|
539|        """
540|        # Validate inputs: obj arg is integer, axis=0, self is not a scalar, and
541|        # input index is in bounds.
542|        try:
543|            idx0 = operator.index(obj)
544|        except TypeError:
545|            raise TypeError("obj arg must be an integer")
546|
547|        if axis != 0:
548|            raise ValueError("axis must be 0")
549|
550|        if not self.shape:
551|            raise TypeError(
552|                f"cannot insert into scalar {self.__class__.__name__} object"
553|            )
554|
555|        if abs(idx0) > len(self):
556|            raise IndexError(
557|                f"index {idx0} is out of bounds for axis 0 with size {len(self)}"
558|            )
559|
560|        # Turn negative index into positive
561|        if idx0 < 0:
562|            idx0 = len(self) + idx0
563|
564|        n_values = len(values) if values.shape else 1
565|
566|        # Finally make the new object with the correct length and set values for the
567|        # three sections, before insert, the insert, and after the insert.
568|        out = self.__class__.info.new_like(
569|            [self], len(self) + n_values, name=self.info.name
570|        )
571|
572|        # Set the output values. This is where validation of `values` takes place to ensure
573|        # that it can indeed be inserted.
574|        out[:idx0] = self[:idx0]
575|        out[idx0 : idx0 + n_values] = values
576|        out[idx0 + n_values :] = self[idx0:]
577|
578|        return out
579|
580|    def is_transformable_to(self, new_frame):
581|        """
582|        Determines if this coordinate frame can be transformed to another
583|        given frame.
584|
585|        Parameters
586|        ----------
587|        new_frame : frame class, frame object, or str
588|            The proposed frame to transform into.
589|
590|        Returns
591|        -------
592|        transformable : bool or str
593|            `True` if this can be transformed to ``new_frame``, `False` if
594|            not, or the string 'same' if ``new_frame`` is the same system as
595|            this object but no transformation is defined.
596|
597|        Notes
598|        -----
599|        A return value of 'same' means the transformation will work, but it will
600|        just give back a copy of this object.  The intended usage is::
601|
602|            if coord.is_transformable_to(some_unknown_frame):
603|                coord2 = coord.transform_to(some_unknown_frame)
604|
605|        This will work even if ``some_unknown_frame``  turns out to be the same
606|        frame class as ``coord``.  This is intended for cases where the frame
607|        is the same regardless of the frame attributes (e.g. ICRS), but be
608|        aware that it *might* also indicate that someone forgot to define the
609|        transformation between two objects of the same frame class but with
610|        different attributes.
611|        """
612|        # TODO! like matplotlib, do string overrides for modified methods
613|        new_frame = (
614|            _get_frame_class(new_frame) if isinstance(new_frame, str) else new_frame
615|        )
616|        return self.frame.is_transformable_to(new_frame)
617|
618|    def transform_to(self, frame, merge_attributes=True):
619|        """Transform this coordinate to a new frame.
620|
621|        The precise frame transformed to depends on ``merge_attributes``.
622|        If `False`, the destination frame is used exactly as passed in.
623|        But this is often not quite what one wants.  E.g., suppose one wants to
624|        transform an ICRS coordinate that has an obstime attribute to FK4; in
625|        this case, one likely would want to use this information. Thus, the
626|        default for ``merge_attributes`` is `True`, in which the precedence is
627|        as follows: (1) explicitly set (i.e., non-default) values in the
628|        destination frame; (2) explicitly set values in the source; (3) default
629|        value in the destination frame.
630|
631|        Note that in either case, any explicitly set attributes on the source
632|        `SkyCoord` that are not part of the destination frame's definition are
633|        kept (stored on the resulting `SkyCoord`), and thus one can round-trip
634|        (e.g., from FK4 to ICRS to FK4 without losing obstime).
635|
636|        Parameters
637|        ----------
638|        frame : str, `BaseCoordinateFrame` class or instance, or `SkyCoord` instance
639|            The frame to transform this coordinate into.  If a `SkyCoord`, the
640|            underlying frame is extracted, and all other information ignored.
641|        merge_attributes : bool, optional
642|            Whether the default attributes in the destination frame are allowed
643|            to be overridden by explicitly set attributes in the source
644|            (see note above; default: `True`).
645|
646|        Returns
647|        -------
648|        coord : `SkyCoord`
649|            A new object with this coordinate represented in the `frame` frame.
650|
651|        Raises
652|        ------
653|        ValueError
654|            If there is no possible transformation route.
655|
656|        """
657|        from astropy.coordinates.errors import ConvertError
658|
659|        frame_kwargs = {}
660|
661|        # Frame name (string) or frame class?  Coerce into an instance.
662|        try:
663|            frame = _get_frame_class(frame)()
664|        except Exception:
665|            pass
666|
667|        if isinstance(frame, SkyCoord):
668|            frame = frame.frame  # Change to underlying coord frame instance
669|
670|        if isinstance(frame, BaseCoordinateFrame):
671|            new_frame_cls = frame.__class__
672|            # Get frame attributes, allowing defaults to be overridden by
673|            # explicitly set attributes of the source if ``merge_attributes``.
674|            for attr in frame_transform_graph.frame_attributes:
675|                self_val = getattr(self, attr, None)
676|                frame_val = getattr(frame, attr, None)
677|                if frame_val is not None and not (
678|                    merge_attributes and frame.is_frame_attr_default(attr)
679|                ):
680|                    frame_kwargs[attr] = frame_val
681|                elif self_val is not None and not self.is_frame_attr_default(attr):
682|                    frame_kwargs[attr] = self_val
683|                elif frame_val is not None:
684|                    frame_kwargs[attr] = frame_val
685|        else:
686|            raise ValueError(
687|                "Transform `frame` must be a frame name, class, or instance"
688|            )
689|
690|        # Get the composite transform to the new frame
691|        trans = frame_transform_graph.get_transform(self.frame.__class__, new_frame_cls)
692|        if trans is None:
693|            raise ConvertError(
694|                f"Cannot transform from {self.frame.__class__} to {new_frame_cls}"
695|            )
696|
697|        # Make a generic frame which will accept all the frame kwargs that
698|        # are provided and allow for transforming through intermediate frames
699|        # which may require one or more of those kwargs.
700|        generic_frame = GenericFrame(frame_kwargs)
701|
702|        # Do the transformation, returning a coordinate frame of the desired
703|        # final type (not generic).
704|        new_coord = trans(self.frame, generic_frame)
705|
706|        # Finally make the new SkyCoord object from the `new_coord` and
707|        # remaining frame_kwargs that are not frame_attributes in `new_coord`.
708|        for attr in set(new_coord.frame_attributes) & set(frame_kwargs.keys()):
709|            frame_kwargs.pop(attr)
710|
711|        # Always remove the origin frame attribute, as that attribute only makes
712|        # sense with a SkyOffsetFrame (in which case it will be stored on the frame).
713|        # See gh-11277.
714|        # TODO: Should it be a property of the frame attribute that it can
715|        # or cannot be stored on a SkyCoord?
716|        frame_kwargs.pop("origin", None)
717|
718|        return self.__class__(new_coord, **frame_kwargs)
719|
720|    def apply_space_motion(self, new_obstime=None, dt=None):
721|        """
722|        Compute the position of the source represented by this coordinate object
723|        to a new time using the velocities stored in this object and assuming
724|        linear space motion (including relativistic corrections). This is
725|        sometimes referred to as an "epoch transformation."
726|
727|        The initial time before the evolution is taken from the ``obstime``
728|        attribute of this coordinate.  Note that this method currently does not
729|        support evolving coordinates where the *frame* has an ``obstime`` frame
730|        attribute, so the ``obstime`` is only used for storing the before and
731|        after times, not actually as an attribute of the frame. Alternatively,
732|        if ``dt`` is given, an ``obstime`` need not be provided at all.
733|
734|        Parameters
735|        ----------
736|        new_obstime : `~astropy.time.Time`, optional
737|            The time at which to evolve the position to. Requires that the
738|            ``obstime`` attribute be present on this frame.
739|        dt : `~astropy.units.Quantity`, `~astropy.time.TimeDelta`, optional
740|            An amount of time to evolve the position of the source. Cannot be
741|            given at the same time as ``new_obstime``.
742|
743|        Returns
744|        -------
745|        new_coord : `SkyCoord`
746|            A new coordinate object with the evolved location of this coordinate
747|            at the new time.  ``obstime`` will be set on this object to the new
748|            time only if ``self`` also has ``obstime``.
749|        """
750|        from .builtin_frames.icrs import ICRS
751|
752|        if (new_obstime is None) == (dt is None):
753|            raise ValueError(
754|                "You must specify one of `new_obstime` or `dt`, but not both."
755|            )
756|
757|        # Validate that we have velocity info
758|        if "s" not in self.frame.data.differentials:
759|            raise ValueError("SkyCoord requires velocity data to evolve the position.")
760|
761|        if "obstime" in self.frame.frame_attributes:
762|            raise NotImplementedError(
763|                "Updating the coordinates in a frame with explicit time dependence is"
764|                " currently not supported. If you would like this functionality, please"
765|                " open an issue on github:\nhttps://github.com/astropy/astropy"
766|            )
767|
768|        if new_obstime is not None and self.obstime is None:
769|            # If no obstime is already on this object, raise an error if a new
770|            # obstime is passed: we need to know the time / epoch at which the
771|            # the position / velocity were measured initially
772|            raise ValueError(
773|                "This object has no associated `obstime`. apply_space_motion() must"
774|                " receive a time difference, `dt`, and not a new obstime."
775|            )
776|
777|        # Compute t1 and t2, the times used in the starpm call, which *only*
778|        # uses them to compute a delta-time
779|        t1 = self.obstime
780|        if dt is None:
781|            # self.obstime is not None and new_obstime is not None b/c of above
782|            # checks
783|            t2 = new_obstime
784|        else:
785|            # new_obstime is definitely None b/c of the above checks
786|            if t1 is None:
787|                # MAGIC NUMBER: if the current SkyCoord object has no obstime,
788|                # assume J2000 to do the dt offset. This is not actually used
789|                # for anything except a delta-t in starpm, so it's OK that it's
790|                # not necessarily the "real" obstime
791|                t1 = Time("J2000")
792|                new_obstime = None  # we don't actually know the initial obstime
793|                t2 = t1 + dt
794|            else:
795|                t2 = t1 + dt
796|                new_obstime = t2
797|        # starpm wants tdb time
798|        t1 = t1.tdb
799|        t2 = t2.tdb
800|
801|        # proper motion in RA should not include the cos(dec) term, see the
802|        # erfa function eraStarpv, comment (4).  So we convert to the regular
803|        # spherical differentials.
804|        icrsrep = self.icrs.represent_as(SphericalRepresentation, SphericalDifferential)
805|        icrsvel = icrsrep.differentials["s"]
806|
807|        parallax_zero = False
808|        try:
809|            plx = icrsrep.distance.to_value(u.arcsecond, u.parallax())
810|        except u.UnitConversionError:  # No distance: set to 0 by convention
811|            plx = 0.0
812|            parallax_zero = True
813|
814|        try:
815|            rv = icrsvel.d_distance.to_value(u.km / u.s)
816|        except u.UnitConversionError:  # No RV
817|            rv = 0.0
818|
819|        starpm = erfa.pmsafe(
820|            icrsrep.lon.radian,
821|            icrsrep.lat.radian,
822|            icrsvel.d_lon.to_value(u.radian / u.yr),
823|            icrsvel.d_lat.to_value(u.radian / u.yr),
824|            plx,
825|            rv,
826|            t1.jd1,
827|            t1.jd2,
828|            t2.jd1,
829|            t2.jd2,
830|        )
831|
832|        if parallax_zero:
833|            new_distance = None
834|        else:
835|            new_distance = Distance(parallax=starpm[4] << u.arcsec)
836|
837|        icrs2 = ICRS(
838|            ra=u.Quantity(starpm[0], u.radian, copy=False),
839|            dec=u.Quantity(starpm[1], u.radian, copy=False),
840|            pm_ra=u.Quantity(starpm[2], u.radian / u.yr, copy=False),
841|            pm_dec=u.Quantity(starpm[3], u.radian / u.yr, copy=False),
842|            distance=new_distance,
843|            radial_velocity=u.Quantity(starpm[5], u.km / u.s, copy=False),
844|            differential_type=SphericalDifferential,
845|        )
846|
847|        # Update the obstime of the returned SkyCoord, and need to carry along
848|        # the frame attributes
849|        frattrs = {
850|            attrnm: getattr(self, attrnm) for attrnm in self._extra_frameattr_names
851|        }
852|        frattrs["obstime"] = new_obstime
853|        result = self.__class__(icrs2, **frattrs).transform_to(self.frame)
854|
855|        # Without this the output might not have the right differential type.
856|        # Not sure if this fixes the problem or just hides it.  See #11932
857|        result.differential_type = self.differential_type
858|
859|        return result
860|
861|    def _is_name(self, string):
862|        """
863|        Returns whether a string is one of the aliases for the frame.
864|        """
865|        return self.frame.name == string or (
866|            isinstance(self.frame.name, list) and string in self.frame.name
867|        )
868|
869|    def __getattr__(self, attr):
870|        """
871|        Overrides getattr to return coordinates that this can be transformed
872|        to, based on the alias attr in the primary transform graph.
873|        """
874|        if "_sky_coord_frame" in self.__dict__:
875|            if self._is_name(attr):
876|                return self  # Should this be a deepcopy of self?
877|
878|            # Anything in the set of all possible frame_attr_names is handled
879|            # here. If the attr is relevant for the current frame then delegate
880|            # to self.frame otherwise get it from self._<attr>.
881|            if attr in frame_transform_graph.frame_attributes:
882|                if attr in self.frame.frame_attributes:
883|                    return getattr(self.frame, attr)
884|                else:
885|                    return getattr(self, "_" + attr, None)
886|
887|            # Some attributes might not fall in the above category but still
888|            # are available through self._sky_coord_frame.
889|            if not attr.startswith("_") and hasattr(self._sky_coord_frame, attr):
890|                return getattr(self._sky_coord_frame, attr)
891|
892|            # Try to interpret as a new frame for transforming.
893|            frame_cls = frame_transform_graph.lookup_name(attr)
894|            if frame_cls is not None and self.frame.is_transformable_to(frame_cls):
895|                return self.transform_to(attr)
896|
897|        # Fail
898|        raise AttributeError(
899|            f"'{self.__class__.__name__}' object has no attribute '{attr}'"
900|        )
901|
902|    def __setattr__(self, attr, val):
903|        # This is to make anything available through __getattr__ immutable
904|        if "_sky_coord_frame" in self.__dict__:
905|            if self._is_name(attr):
906|                raise AttributeError(f"'{attr}' is immutable")
907|
908|            if not attr.startswith("_") and hasattr(self._sky_coord_frame, attr):
909|                setattr(self._sky_coord_frame, attr, val)
910|                return
911|
912|            frame_cls = frame_transform_graph.lookup_name(attr)
913|            if frame_cls is not None and self.frame.is_transformable_to(frame_cls):
914|                raise AttributeError(f"'{attr}' is immutable")
915|
916|        if attr in frame_transform_graph.frame_attributes:
917|            # All possible frame attributes can be set, but only via a private
918|            # variable.  See __getattr__ above.
919|            super().__setattr__("_" + attr, val)
920|            # Validate it
921|            frame_transform_graph.frame_attributes[attr].__get__(self)
922|            # And add to set of extra attributes
923|            self._extra_frameattr_names |= {attr}
924|
925|        else:
926|            # Otherwise, do the standard Python attribute setting
927|            super().__setattr__(attr, val)
928|
929|    def __delattr__(self, attr):
930|        # mirror __setattr__ above
931|        if "_sky_coord_frame" in self.__dict__:
932|            if self._is_name(attr):
933|                raise AttributeError(f"'{attr}' is immutable")
934|
935|            if not attr.startswith("_") and hasattr(self._sky_coord_frame, attr):
936|                delattr(self._sky_coord_frame, attr)
937|                return
938|
939|            frame_cls = frame_transform_graph.lookup_name(attr)
940|            if frame_cls is not None and self.frame.is_transformable_to(frame_cls):
941|                raise AttributeError(f"'{attr}' is immutable")
942|
943|        if attr in frame_transform_graph.frame_attributes:
944|            # All possible frame attributes can be deleted, but need to remove
945|            # the corresponding private variable.  See __getattr__ above.
946|            super().__delattr__("_" + attr)
947|            # Also remove it from the set of extra attributes
948|            self._extra_frameattr_names -= {attr}
949|
950|        else:
951|            # Otherwise, do the standard Python attribute setting
952|            super().__delattr__(attr)
953|
954|    def __dir__(self):
955|        """
956|        Override the builtin `dir` behavior to include:
957|        - Transforms available by aliases
958|        - Attribute / methods of the underlying self.frame object
959|        """
960|        dir_values = set(super().__dir__())
961|
962|        # determine the aliases that this can be transformed to.
963|        for name in frame_transform_graph.get_names():
964|            frame_cls = frame_transform_graph.lookup_name(name)
965|            if self.frame.is_transformable_to(frame_cls):
966|                dir_values.add(name)
967|
968|        # Add public attributes of self.frame
969|        dir_values.update(
970|            {attr for attr in dir(self.frame) if not attr.startswith("_")}
971|        )
972|
973|        # Add all possible frame attributes
974|        dir_values.update(frame_transform_graph.frame_attributes.keys())
975|
976|        return sorted(dir_values)
977|
978|    def __repr__(self):
979|        clsnm = self.__class__.__name__
980|        coonm = self.frame.__class__.__name__
981|        frameattrs = self.frame._frame_attrs_repr()
982|        if frameattrs:
983|            frameattrs = ": " + frameattrs
984|
985|        data = self.frame._data_repr()
986|        if data:
987|            data = ": " + data
988|
989|        return f"<{clsnm} ({coonm}{frameattrs}){data}>"
990|
991|    def to_string(self, style="decimal", **kwargs):
992|        """
993|        A string representation of the coordinates.
994|
995|        The default styles definitions are::
996|
997|          'decimal': 'lat': {'decimal': True, 'unit': "deg"}
998|                     'lon': {'decimal': True, 'unit': "deg"}
999|          'dms': 'lat': {'unit': "deg"}
1000|                 'lon': {'unit': "deg"}
(1223 more lines below)


============================================================



OBSERVATION:

Planner Invoked

============================================================



OBSERVATION:

Planner Invoked

============================================================



OBSERVATION:

CONTENT: Please continue working on the task on whatever approach you think is suitable.
If you think you have modified the code in a way that fixes the issue and thoroughly tested the fix (including edge cases and regression), please run the following command: <execute_bash> exit </execute_bash>.
IMPORTANT: YOU SHOULD NEVER ASK FOR HUMAN HELP OR USE THE INTERNET TO SOLVE THIS TASK.


============================================================



ACTION:

THOUGHT: I'll proceed with implementing the fix based on my analysis.
CODE:
DIFF_STRING = """<<<<<<< SEARCH
    def __getattr__(self, attr):
        # This is to make available the frame attributes on the SkyCoord object
        if not attr.startswith("_") and attr in frame_transform_graph.frame_attributes:
            frame_attr = frame_transform_graph.frame_attributes[attr]
            if attr in self._extra_frameattr_names:
                return frame_attr.__get__(self)
            else:
                return frame_attr.__get__(self.frame)

        # Try to get the attribute from the underlying frame object
        if hasattr(self._sky_coord_frame, "_" + attr):
            return getattr(self._sky_coord_frame, "_" + attr)

        # If the frame has this attribute, we should return that
        if not attr.startswith("_") and hasattr(self._sky_coord_frame, attr):
            return getattr(self._sky_coord_frame, attr)

        # Try to interpret as a new frame for transforming.
        frame_cls = frame_transform_graph.lookup_name(attr)
        if frame_cls is not None and self.frame.is_transformable_to(frame_cls):
            return self.transform_to(attr)

        # Fail
        raise AttributeError(
            f"'{self.__class__.__name__}' object has no attribute '{attr}'"
        )
=======
    def __getattr__(self, attr):
        try:
            # First try normal attribute lookup on the instance
            # This allows properties to raise their own AttributeError
            return object.__getattribute__(self, attr)
        except AttributeError:
            # If that fails, proceed with frame attribute lookup
            if not attr.startswith("_") and attr in frame_transform_graph.frame_attributes:
                frame_attr = frame_transform_graph.frame_attributes[attr]
                if attr in self._extra_frameattr_names:
                    return frame_attr.__get__(self)
                else:
                    return frame_attr.__get__(self.frame)

            # Try to get the attribute from the underlying frame object
            if hasattr(self._sky_coord_frame, "_" + attr):
                return getattr(self._sky_coord_frame, "_" + attr)

            # If the frame has this attribute, we should return that
            if not attr.startswith("_") and hasattr(self._sky_coord_frame, attr):
                return getattr(self._sky_coord_frame, attr)

            # Try to interpret as a new frame for transforming.
            frame_cls = frame_transform_graph.lookup_name(attr)
            if frame_cls is not None and self.frame.is_transformable_to(frame_cls):
                return self.transform_to(attr)

            # Re-raise the original AttributeError if we got here
            raise
>>>>>>> REPLACE"""
edit_file('/workspace/astropy__astropy__5.1/astropy/coordinates/sky_coordinate.py', diff_string=DIFF_STRING)

============================================================



OBSERVATION:

[No exact match found in /workspace/astropy__astropy__5.1/astropy/coordinates/sky_coordinate.py for
```
    def __getattr__(self, attr):
        # This is to make available the frame attributes on the SkyCoord object
        if not attr.startswith("_") and attr in frame_transform_graph.frame_attributes:
            frame_attr = frame_transform_graph.frame_attributes[attr]
            if attr in self._extra_frameattr_names:
                return frame_attr.__get__(self)
            else:
                return frame_attr.__get__(self.frame)
        # Try to get the attribute from the underlying frame object
        if hasattr(self._sky_coord_frame, "_" + attr):
            return getattr(self._sky_coord_frame, "_" + attr)
        # If the frame has this attribute, we should return that
        if not attr.startswith("_") and hasattr(self._sky_coord_frame, attr):
            return getattr(self._sky_coord_frame, attr)
        # Try to interpret as a new frame for transforming.
        frame_cls = frame_transform_graph.lookup_name(attr)
        if frame_cls is not None and self.frame.is_transformable_to(frame_cls):
            return self.transform_to(attr)
        # Fail
        raise AttributeError(
            f"'{self.__class__.__name__}' object has no attribute '{attr}'"
        )
```

Read the file contents again and provide proper matching lines.]


============================================================



ACTION:

THOUGHT: Let me read the file contents again to get the exact lines:
CODE:
search_file("def __getattr__", "/workspace/astropy__astropy__5.1/astropy/coordinates/sky_coordinate.py")

============================================================



OBSERVATION:

[Found 1 matches for "def __getattr__" in /workspace/astropy__astropy__5.1/astropy/coordinates/sky_coordinate.py]
Line 869: def __getattr__(self, attr):
[End of matches for "def __getattr__" in /workspace/astropy__astropy__5.1/astropy/coordinates/sky_coordinate.py]


============================================================



ACTION:

THOUGHT: Let me check the exact content around line 869:
CODE:
open_file('/workspace/astropy__astropy__5.1/astropy/coordinates/sky_coordinate.py', line_number=869, context_lines=50)

============================================================



OBSERVATION:

[File: /workspace/astropy__astropy__5.1/astropy/coordinates/sky_coordinate.py (2223 lines total)]
(768 more lines above)
769|            # If no obstime is already on this object, raise an error if a new
770|            # obstime is passed: we need to know the time / epoch at which the
771|            # the position / velocity were measured initially
772|            raise ValueError(
773|                "This object has no associated `obstime`. apply_space_motion() must"
774|                " receive a time difference, `dt`, and not a new obstime."
775|            )
776|
777|        # Compute t1 and t2, the times used in the starpm call, which *only*
778|        # uses them to compute a delta-time
779|        t1 = self.obstime
780|        if dt is None:
781|            # self.obstime is not None and new_obstime is not None b/c of above
782|            # checks
783|            t2 = new_obstime
784|        else:
785|            # new_obstime is definitely None b/c of the above checks
786|            if t1 is None:
787|                # MAGIC NUMBER: if the current SkyCoord object has no obstime,
788|                # assume J2000 to do the dt offset. This is not actually used
789|                # for anything except a delta-t in starpm, so it's OK that it's
790|                # not necessarily the "real" obstime
791|                t1 = Time("J2000")
792|                new_obstime = None  # we don't actually know the initial obstime
793|                t2 = t1 + dt
794|            else:
795|                t2 = t1 + dt
796|                new_obstime = t2
797|        # starpm wants tdb time
798|        t1 = t1.tdb
799|        t2 = t2.tdb
800|
801|        # proper motion in RA should not include the cos(dec) term, see the
802|        # erfa function eraStarpv, comment (4).  So we convert to the regular
803|        # spherical differentials.
804|        icrsrep = self.icrs.represent_as(SphericalRepresentation, SphericalDifferential)
805|        icrsvel = icrsrep.differentials["s"]
806|
807|        parallax_zero = False
808|        try:
809|            plx = icrsrep.distance.to_value(u.arcsecond, u.parallax())
810|        except u.UnitConversionError:  # No distance: set to 0 by convention
811|            plx = 0.0
812|            parallax_zero = True
813|
814|        try:
815|            rv = icrsvel.d_distance.to_value(u.km / u.s)
816|        except u.UnitConversionError:  # No RV
817|            rv = 0.0
818|
819|        starpm = erfa.pmsafe(
820|            icrsrep.lon.radian,
821|            icrsrep.lat.radian,
822|            icrsvel.d_lon.to_value(u.radian / u.yr),
823|            icrsvel.d_lat.to_value(u.radian / u.yr),
824|            plx,
825|            rv,
826|            t1.jd1,
827|            t1.jd2,
828|            t2.jd1,
829|            t2.jd2,
830|        )
831|
832|        if parallax_zero:
833|            new_distance = None
834|        else:
835|            new_distance = Distance(parallax=starpm[4] << u.arcsec)
836|
837|        icrs2 = ICRS(
838|            ra=u.Quantity(starpm[0], u.radian, copy=False),
839|            dec=u.Quantity(starpm[1], u.radian, copy=False),
840|            pm_ra=u.Quantity(starpm[2], u.radian / u.yr, copy=False),
841|            pm_dec=u.Quantity(starpm[3], u.radian / u.yr, copy=False),
842|            distance=new_distance,
843|            radial_velocity=u.Quantity(starpm[5], u.km / u.s, copy=False),
844|            differential_type=SphericalDifferential,
845|        )
846|
847|        # Update the obstime of the returned SkyCoord, and need to carry along
848|        # the frame attributes
849|        frattrs = {
850|            attrnm: getattr(self, attrnm) for attrnm in self._extra_frameattr_names
851|        }
852|        frattrs["obstime"] = new_obstime
853|        result = self.__class__(icrs2, **frattrs).transform_to(self.frame)
854|
855|        # Without this the output might not have the right differential type.
856|        # Not sure if this fixes the problem or just hides it.  See #11932
857|        result.differential_type = self.differential_type
858|
859|        return result
860|
861|    def _is_name(self, string):
862|        """
863|        Returns whether a string is one of the aliases for the frame.
864|        """
865|        return self.frame.name == string or (
866|            isinstance(self.frame.name, list) and string in self.frame.name
867|        )
868|
869|    def __getattr__(self, attr):
870|        """
871|        Overrides getattr to return coordinates that this can be transformed
872|        to, based on the alias attr in the primary transform graph.
873|        """
874|        if "_sky_coord_frame" in self.__dict__:
875|            if self._is_name(attr):
876|                return self  # Should this be a deepcopy of self?
877|
878|            # Anything in the set of all possible frame_attr_names is handled
879|            # here. If the attr is relevant for the current frame then delegate
880|            # to self.frame otherwise get it from self._<attr>.
881|            if attr in frame_transform_graph.frame_attributes:
882|                if attr in self.frame.frame_attributes:
883|                    return getattr(self.frame, attr)
884|                else:
885|                    return getattr(self, "_" + attr, None)
886|
887|            # Some attributes might not fall in the above category but still
888|            # are available through self._sky_coord_frame.
889|            if not attr.startswith("_") and hasattr(self._sky_coord_frame, attr):
890|                return getattr(self._sky_coord_frame, attr)
891|
892|            # Try to interpret as a new frame for transforming.
893|            frame_cls = frame_transform_graph.lookup_name(attr)
894|            if frame_cls is not None and self.frame.is_transformable_to(frame_cls):
895|                return self.transform_to(attr)
896|
897|        # Fail
898|        raise AttributeError(
899|            f"'{self.__class__.__name__}' object has no attribute '{attr}'"
900|        )
901|
902|    def __setattr__(self, attr, val):
903|        # This is to make anything available through __getattr__ immutable
904|        if "_sky_coord_frame" in self.__dict__:
905|            if self._is_name(attr):
906|                raise AttributeError(f"'{attr}' is immutable")
907|
908|            if not attr.startswith("_") and hasattr(self._sky_coord_frame, attr):
909|                setattr(self._sky_coord_frame, attr, val)
910|                return
911|
912|            frame_cls = frame_transform_graph.lookup_name(attr)
913|            if frame_cls is not None and self.frame.is_transformable_to(frame_cls):
914|                raise AttributeError(f"'{attr}' is immutable")
915|
916|        if attr in frame_transform_graph.frame_attributes:
917|            # All possible frame attributes can be set, but only via a private
918|            # variable.  See __getattr__ above.
919|            super().__setattr__("_" + attr, val)
920|            # Validate it
921|            frame_transform_graph.frame_attributes[attr].__get__(self)
922|            # And add to set of extra attributes
923|            self._extra_frameattr_names |= {attr}
924|
925|        else:
926|            # Otherwise, do the standard Python attribute setting
927|            super().__setattr__(attr, val)
928|
929|    def __delattr__(self, attr):
930|        # mirror __setattr__ above
931|        if "_sky_coord_frame" in self.__dict__:
932|            if self._is_name(attr):
933|                raise AttributeError(f"'{attr}' is immutable")
934|
935|            if not attr.startswith("_") and hasattr(self._sky_coord_frame, attr):
936|                delattr(self._sky_coord_frame, attr)
937|                return
938|
939|            frame_cls = frame_transform_graph.lookup_name(attr)
940|            if frame_cls is not None and self.frame.is_transformable_to(frame_cls):
941|                raise AttributeError(f"'{attr}' is immutable")
942|
943|        if attr in frame_transform_graph.frame_attributes:
944|            # All possible frame attributes can be deleted, but need to remove
945|            # the corresponding private variable.  See __getattr__ above.
946|            super().__delattr__("_" + attr)
947|            # Also remove it from the set of extra attributes
948|            self._extra_frameattr_names -= {attr}
949|
950|        else:
951|            # Otherwise, do the standard Python attribute setting
952|            super().__delattr__(attr)
953|
954|    def __dir__(self):
955|        """
956|        Override the builtin `dir` behavior to include:
957|        - Transforms available by aliases
958|        - Attribute / methods of the underlying self.frame object
959|        """
960|        dir_values = set(super().__dir__())
961|
962|        # determine the aliases that this can be transformed to.
963|        for name in frame_transform_graph.get_names():
964|            frame_cls = frame_transform_graph.lookup_name(name)
965|            if self.frame.is_transformable_to(frame_cls):
966|                dir_values.add(name)
967|
968|        # Add public attributes of self.frame
969|        dir_values.update(
(1254 more lines below)


============================================================



ACTION:

THOUGHT: Now I have the exact content. Let me update the file with the correct fix:
CODE:
DIFF_STRING = """<<<<<<< SEARCH
    def __getattr__(self, attr):
        """
        Overrides getattr to return coordinates that this can be transformed
        to, based on the alias attr in the primary transform graph.
        """
        if "_sky_coord_frame" in self.__dict__:
            if self._is_name(attr):
                return self  # Should this be a deepcopy of self?

            # Anything in the set of all possible frame_attr_names is handled
            # here. If the attr is relevant for the current frame then delegate
            # to self.frame otherwise get it from self._<attr>.
            if attr in frame_transform_graph.frame_attributes:
                if attr in self.frame.frame_attributes:
                    return getattr(self.frame, attr)
                else:
                    return getattr(self, "_" + attr, None)

            # Some attributes might not fall in the above category but still
            # are available through self._sky_coord_frame.
            if not attr.startswith("_") and hasattr(self._sky_coord_frame, attr):
                return getattr(self._sky_coord_frame, attr)

            # Try to interpret as a new frame for transforming.
            frame_cls = frame_transform_graph.lookup_name(attr)
            if frame_cls is not None and self.frame.is_transformable_to(frame_cls):
                return self.transform_to(attr)

        # Fail
        raise AttributeError(
            f"'{self.__class__.__name__}' object has no attribute '{attr}'"
        )
=======
    def __getattr__(self, attr):
        """
        Overrides getattr to return coordinates that this can be transformed
        to, based on the alias attr in the primary transform graph.
        """
        # First try to get the attribute normally to allow properties to work
        try:
            return super().__getattribute__(attr)
        except AttributeError as orig_exc:
            if "_sky_coord_frame" in self.__dict__:
                if self._is_name(attr):
                    return self  # Should this be a deepcopy of self?

                # Anything in the set of all possible frame_attr_names is handled
                # here. If the attr is relevant for the current frame then delegate
                # to self.frame otherwise get it from self._<attr>.
                if attr in frame_transform_graph.frame_attributes:
                    if attr in self.frame.frame_attributes:
                        return getattr(self.frame, attr)
                    else:
                        return getattr(self, "_" + attr, None)

                # Some attributes might not fall in the above category but still
                # are available through self._sky_coord_frame.
                if not attr.startswith("_") and hasattr(self._sky_coord_frame, attr):
                    return getattr(self._sky_coord_frame, attr)

                # Try to interpret as a new frame for transforming.
                frame_cls = frame_transform_graph.lookup_name(attr)
                if frame_cls is not None and self.frame.is_transformable_to(frame_cls):
                    return self.transform_to(attr)

            # If we get here, re-raise the original AttributeError
            raise orig_exc
>>>>>>> REPLACE"""
edit_file('/workspace/astropy__astropy__5.1/astropy/coordinates/sky_coordinate.py', diff_string=DIFF_STRING)

============================================================



OBSERVATION:

[File: /workspace/astropy__astropy__5.1/astropy/coordinates/sky_coordinate.py (2225 lines total after edit)]
[Diff of the changes applied. Please review the diff and remove if there are any redundant code lines or duplicates introduced or left to be removed.]
--- 
+++ 
@@ -844,87 +844,89 @@
             differential_type=SphericalDifferential,
         )
 
         # Update the obstime of the returned SkyCoord, and need to carry along
         # the frame attributes
         frattrs = {
             attrnm: getattr(self, attrnm) for attrnm in self._extra_frameattr_names
         }
         frattrs["obstime"] = new_obstime
         result = self.__class__(icrs2, **frattrs).transform_to(self.frame)
 
         # Without this the output might not have the right differential type.
         # Not sure if this fixes the problem or just hides it.  See #11932
         result.differential_type = self.differential_type
 
         return result
 
     def _is_name(self, string):
         """
         Returns whether a string is one of the aliases for the frame.
         """
         return self.frame.name == string or (
             isinstance(self.frame.name, list) and string in self.frame.name
         )
 
     def __getattr__(self, attr):
         """
         Overrides getattr to return coordinates that this can be transformed
         to, based on the alias attr in the primary transform graph.
         """
-        if "_sky_coord_frame" in self.__dict__:
-            if self._is_name(attr):
-                return self  # Should this be a deepcopy of self?
-
-            # Anything in the set of all possible frame_attr_names is handled
-            # here. If the attr is relevant for the current frame then delegate
-            # to self.frame otherwise get it from self._<attr>.
-            if attr in frame_transform_graph.frame_attributes:
-                if attr in self.frame.frame_attributes:
-                    return getattr(self.frame, attr)
-                else:
-                    return getattr(self, "_" + attr, None)
-
-            # Some attributes might not fall in the above category but still
-            # are available through self._sky_coord_frame.
-            if not attr.startswith("_") and hasattr(self._sky_coord_frame, attr):
-                return getattr(self._sky_coord_frame, attr)
-
-            # Try to interpret as a new frame for transforming.
-            frame_cls = frame_transform_graph.lookup_name(attr)
-            if frame_cls is not None and self.frame.is_transformable_to(frame_cls):
-                return self.transform_to(attr)
-
-        # Fail
-        raise AttributeError(
-            f"'{self.__class__.__name__}' object has no attribute '{attr}'"
-        )
+        # First try to get the attribute normally to allow properties to work
+        try:
+            return super().__getattribute__(attr)
+        except AttributeError as orig_exc:
+            if "_sky_coord_frame" in self.__dict__:
+                if self._is_name(attr):
+                    return self  # Should this be a deepcopy of self?
+
+                # Anything in the set of all possible frame_attr_names is handled
+                # here. If the attr is relevant for the current frame then delegate
+                # to self.frame otherwise get it from self._<attr>.
+                if attr in frame_transform_graph.frame_attributes:
+                    if attr in self.frame.frame_attributes:
+                        return getattr(self.frame, attr)
+                    else:
+                        return getattr(self, "_" + attr, None)
+
+                # Some attributes might not fall in the above category but still
+                # are available through self._sky_coord_frame.
+                if not attr.startswith("_") and hasattr(self._sky_coord_frame, attr):
+                    return getattr(self._sky_coord_frame, attr)
+
+                # Try to interpret as a new frame for transforming.
+                frame_cls = frame_transform_graph.lookup_name(attr)
+                if frame_cls is not None and self.frame.is_transformable_to(frame_cls):
+                    return self.transform_to(attr)
+
+            # If we get here, re-raise the original AttributeError
+            raise orig_exc
 
     def __setattr__(self, attr, val):
         # This is to make anything available through __getattr__ immutable
         if "_sky_coord_frame" in self.__dict__:
             if self._is_name(attr):
                 raise AttributeError(f"'{attr}' is immutable")
 
             if not attr.startswith("_") and hasattr(self._sky_coord_frame, attr):
                 setattr(self._sky_coord_frame, attr, val)
                 return
 
             frame_cls = frame_transform_graph.lookup_name(attr)
             if frame_cls is not None and self.frame.is_transformable_to(frame_cls):
                 raise AttributeError(f"'{attr}' is immutable")
 
         if attr in frame_transform_graph.frame_attributes:
             # All possible frame attributes can be set, but only via a private
             # variable.  See __getattr__ above.
             super().__setattr__("_" + attr, val)
             # Validate it
             frame_transform_graph.frame_attributes[attr].__get__(self)
             # And add to set of extra attributes
             self._extra_frameattr_names |= {attr}
 
         else:
             # Otherwise, do the standard Python attribute setting
             super().__setattr__(attr, val)
 
     def __delattr__(self, attr):
         # mirror __setattr__ above
[File updated. Please review the changes carefully and make sure they are correct (correct indentation, no duplicate or redundant lines etc). Edit the file again if necessary.]


============================================================



ACTION:

THOUGHT: The changes look correct with proper indentation and no redundant code. Now let's test the changes by running our reproduce script to verify the fix:
COMMAND:
python reproduce_error.py

============================================================



OBSERVATION:

[Code executed successfully with no output]

============================================================



ACTION:

THOUGHT: The script executed without error, which is unexpected. Let me check if the script is properly raising the error for the non-existent attribute 'random_attr'. I'll modify the script to print the error:
CODE:
CODE = """import astropy.coordinates as coord

class custom_coord(coord.SkyCoord):
    @property
    def prop(self):
        try:
            return self.random_attr
        except AttributeError as e:
            print(f"Error: {str(e)}")
            raise

c = custom_coord('00h42m30s', '+41d12m00s', frame='icrs')
c.prop"""

create_file("reproduce_error.py", CODE)

============================================================



OBSERVATION:

[File reproduce_error.py already exists and File overwritten.]
[File: /workspace/reproduce_error.py (13 lines total after edit)]
1|import astropy.coordinates as coord
2|
3|class custom_coord(coord.SkyCoord):
4|    @property
5|    def prop(self):
6|        try:
7|            return self.random_attr
8|        except AttributeError as e:
9|            print(f"Error: {str(e)}")
10|            raise
11|
12|c = custom_coord('00h42m30s', '+41d12m00s', frame='icrs')
13|c.prop
[File updated. Please review the changes carefully and make sure they are correct (correct indentation, no duplicate or redundant lines etc). Edit the file again if necessary.]


============================================================



ACTION:

THOUGHT: The script looks correct. Let's run it to see the error message:
COMMAND:
python reproduce_error.py

============================================================



OBSERVATION:

Error: 'custom_coord' object has no attribute 'random_attr'
Error: 'custom_coord' object has no attribute 'random_attr'
Traceback (most recent call last):
  File "/workspace/reproduce_error.py", line 13, in <module>
    c.prop
  File "/testbed/astropy/coordinates/sky_coordinate.py", line 902, in __getattr__
    raise orig_exc
  File "/testbed/astropy/coordinates/sky_coordinate.py", line 876, in __getattr__
    return super().__getattribute__(attr)
  File "/workspace/reproduce_error.py", line 7, in prop
    return self.random_attr
  File "/testbed/astropy/coordinates/sky_coordinate.py", line 902, in __getattr__
    raise orig_exc
  File "/testbed/astropy/coordinates/sky_coordinate.py", line 876, in __getattr__
    return super().__getattribute__(attr)
AttributeError: 'custom_coord' object has no attribute 'random_attr'


============================================================



ACTION:

THOUGHT: Perfect! The fix is working as expected. Let's verify this by checking:

1. The error message now correctly shows "'custom_coord' object has no attribute 'random_attr'" instead of the previous misleading message about 'prop'

2. Let's test some edge cases to ensure we haven't broken any existing functionality:
CODE:
CODE = """import astropy.coordinates as coord

class custom_coord(coord.SkyCoord):
    @property
    def prop(self):
        return self.random_attr
    
    @property
    def ra_dec(self):
        return (self.ra, self.dec)

c = custom_coord('00h42m30s', '+41d12m00s', frame='icrs')

# Test 1: Normal coordinate access should work
print("Test 1: Accessing ra/dec")
print(f"RA = {c.ra}")
print(f"Dec = {c.dec}")

# Test 2: Custom property that uses valid attributes should work
print("\\nTest 2: Custom property using valid attributes")
print(f"RA/Dec tuple = {c.ra_dec}")

# Test 3: Frame transformation should still work
print("\\nTest 3: Frame transformation")
print(f"Galactic l = {c.galactic.l}")

# Test 4: The failing case (already tested above)
print("\\nTest 4: Property accessing non-existent attribute")
try:
    c.prop
except AttributeError as e:
    print(f"Expected error: {str(e)}")"""

create_file("test_edge_cases.py", CODE)

============================================================



OBSERVATION:

[File test_edge_cases.py created.]
[File: /workspace/test_edge_cases.py (32 lines total after edit)]
1|import astropy.coordinates as coord
2|
3|class custom_coord(coord.SkyCoord):
4|    @property
5|    def prop(self):
6|        return self.random_attr
7|    
8|    @property
9|    def ra_dec(self):
10|        return (self.ra, self.dec)
11|
12|c = custom_coord('00h42m30s', '+41d12m00s', frame='icrs')
13|
14|# Test 1: Normal coordinate access should work
15|print("Test 1: Accessing ra/dec")
16|print(f"RA = {c.ra}")
17|print(f"Dec = {c.dec}")
18|
19|# Test 2: Custom property that uses valid attributes should work
20|print("\nTest 2: Custom property using valid attributes")
21|print(f"RA/Dec tuple = {c.ra_dec}")
22|
23|# Test 3: Frame transformation should still work
24|print("\nTest 3: Frame transformation")
25|print(f"Galactic l = {c.galactic.l}")
26|
27|# Test 4: The failing case (already tested above)
28|print("\nTest 4: Property accessing non-existent attribute")
29|try:
30|    c.prop
31|except AttributeError as e:
32|    print(f"Expected error: {str(e)}")
[File updated. Please review the changes carefully and make sure they are correct (correct indentation, no duplicate or redundant lines etc). Edit the file again if necessary.]


============================================================



ACTION:

THOUGHT: The test file looks correct. Let's run it to verify all edge cases:
COMMAND:
python test_edge_cases.py

============================================================



OBSERVATION:

Test 1: Accessing ra/dec
RA = 10.624999999999998 deg
Dec = 41.2 deg

Test 2: Custom property using valid attributes
RA/Dec tuple = (<Longitude 10.625 deg>, <Latitude 41.2 deg>)

Test 3: Frame transformation
Galactic l = 121.12334339352482 deg

Test 4: Property accessing non-existent attribute
Expected error: 'custom_coord' object has no attribute 'random_attr'



============================================================

