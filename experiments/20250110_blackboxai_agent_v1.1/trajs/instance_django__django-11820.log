

TASK:


models.E015 is raised when Meta.ordering contains "pk" of a related field.
Description
	
models.E015 is raised when Meta.ordering contains __pk of a related field, e.g.:
test_app.SomeModel: (models.E015) 'ordering' refers to the nonexistent field, related field, or lookup 'option__pk'.
Regression in 440505cb2cadbe1a5b9fba246bcde6c04f51d07e.



============================================================



ACTION:

THOUGHT: I'll help you implement the necessary changes following the steps you outlined. Let's start:

1. First, let's explore the repository structure:
CODE:
get_repo_structure("/workspace/django__django__3.1")

============================================================



OBSERVATION:

/workspace/django__django__3.1:
AUTHORS
CONTRIBUTING.rst
Django.egg-info
FUNDING.yml
Gruntfile.js
INSTALL
LICENSE
LICENSE.python
MANIFEST.in
README.rst
django
docs
extras
js_tests
package.json
scripts
setup.cfg
setup.py
tests
tox.ini

/workspace/django__django__3.1/Django.egg-info:
PKG-INFO
SOURCES.txt
dependency_links.txt
entry_points.txt
not-zip-safe
requires.txt
top_level.txt

/workspace/django__django__3.1/django:
__init__.py
__main__.py
__pycache__
apps
bin
conf
contrib
core
db
dispatch
forms
http
middleware
shortcuts.py
template
templatetags
test
urls
utils
views

/workspace/django__django__3.1/django/__pycache__:
__init__.cpython-36.pyc

/workspace/django__django__3.1/django/apps:
__init__.py
config.py
registry.py

/workspace/django__django__3.1/django/bin:
django-admin.py

/workspace/django__django__3.1/django/conf:
__init__.py
app_template
global_settings.py
locale
project_template
urls

/workspace/django__django__3.1/django/conf/app_template:
__init__.py-tpl
admin.py-tpl
apps.py-tpl
migrations
models.py-tpl
tests.py-tpl
views.py-tpl

/workspace/django__django__3.1/django/conf/app_template/migrations:
__init__.py-tpl

/workspace/django__django__3.1/django/conf/locale:
__init__.py
af
ar
ast
az
be
bg
bn
br
bs
ca
cs
cy
da
de
de_CH
dsb
el
en
en_AU
en_GB
eo
es
es_AR
es_CO
es_MX
es_NI
es_PR
es_VE
et
eu
fa
fi
fr
fy
ga
gd
gl
he
hi
hr
hsb
hu
hy
ia
id
io
is
it
ja
ka
kab
kk
km
kn
ko
lb
lt
lv
mk
ml
mn
mr
my
nb
ne
nl
nn
os
pa
pl
pt
pt_BR
ro
ru
sk
sl
sq
sr
sr_Latn
sv
sw
ta
te
th
tr
tt
udm
uk
ur
vi
zh_Hans
zh_Hant

/workspace/django__django__3.1/django/conf/locale/af:
LC_MESSAGES

/workspace/django__django__3.1/django/conf/locale/af/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/ar:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/ar/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/ast:
LC_MESSAGES

/workspace/django__django__3.1/django/conf/locale/ast/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/az:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/az/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/be:
LC_MESSAGES

/workspace/django__django__3.1/django/conf/locale/be/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/bg:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/bg/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/bn:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/bn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/br:
LC_MESSAGES

/workspace/django__django__3.1/django/conf/locale/br/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/bs:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/bs/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/ca:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/ca/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/cs:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/cs/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/cy:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/cy/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/da:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/da/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/de:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/de/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/de_CH:
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/dsb:
LC_MESSAGES

/workspace/django__django__3.1/django/conf/locale/dsb/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/el:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/el/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/en:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/en/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/en_AU:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/en_AU/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/en_GB:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/en_GB/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/eo:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/eo/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/es:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/es/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/es_AR:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/es_AR/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/es_CO:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/es_CO/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/es_MX:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/es_MX/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/es_NI:
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/es_PR:
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/es_VE:
LC_MESSAGES

/workspace/django__django__3.1/django/conf/locale/es_VE/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/et:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/et/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/eu:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/eu/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/fa:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/fa/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/fi:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/fi/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/fr:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/fr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/fy:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/fy/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/ga:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/ga/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/gd:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/gd/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/gl:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/gl/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/he:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/he/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/hi:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/hi/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/hr:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/hr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/hsb:
LC_MESSAGES

/workspace/django__django__3.1/django/conf/locale/hsb/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/hu:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/hu/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/hy:
LC_MESSAGES

/workspace/django__django__3.1/django/conf/locale/hy/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/ia:
LC_MESSAGES

/workspace/django__django__3.1/django/conf/locale/ia/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/id:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/id/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/io:
LC_MESSAGES

/workspace/django__django__3.1/django/conf/locale/io/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/is:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/is/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/it:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/it/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/ja:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/ja/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/ka:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/ka/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/kab:
LC_MESSAGES

/workspace/django__django__3.1/django/conf/locale/kab/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/kk:
LC_MESSAGES

/workspace/django__django__3.1/django/conf/locale/kk/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/km:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/km/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/kn:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/kn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/ko:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/ko/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/lb:
LC_MESSAGES

/workspace/django__django__3.1/django/conf/locale/lb/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/lt:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/lt/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/lv:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/lv/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/mk:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/mk/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/ml:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/ml/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/mn:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/mn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/mr:
LC_MESSAGES

/workspace/django__django__3.1/django/conf/locale/mr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/my:
LC_MESSAGES

/workspace/django__django__3.1/django/conf/locale/my/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/nb:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/nb/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/ne:
LC_MESSAGES

/workspace/django__django__3.1/django/conf/locale/ne/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/nl:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/nl/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/nn:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/nn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/os:
LC_MESSAGES

/workspace/django__django__3.1/django/conf/locale/os/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/pa:
LC_MESSAGES

/workspace/django__django__3.1/django/conf/locale/pa/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/pl:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/pl/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/pt:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/pt/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/pt_BR:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/pt_BR/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/ro:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/ro/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/ru:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/ru/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/sk:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/sk/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/sl:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/sl/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/sq:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/sq/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/sr:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/sr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/sr_Latn:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/sr_Latn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/sv:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/sv/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/sw:
LC_MESSAGES

/workspace/django__django__3.1/django/conf/locale/sw/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/ta:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/ta/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/te:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/te/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/th:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/th/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/tr:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/tr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/tt:
LC_MESSAGES

/workspace/django__django__3.1/django/conf/locale/tt/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/udm:
LC_MESSAGES

/workspace/django__django__3.1/django/conf/locale/udm/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/uk:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/uk/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/ur:
LC_MESSAGES

/workspace/django__django__3.1/django/conf/locale/ur/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/vi:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/vi/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/zh_Hans:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/zh_Hans/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/locale/zh_Hant:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/django/conf/locale/zh_Hant/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/conf/project_template:
manage.py-tpl
project_name

/workspace/django__django__3.1/django/conf/project_template/project_name:
__init__.py-tpl
asgi.py-tpl
settings.py-tpl
urls.py-tpl
wsgi.py-tpl

/workspace/django__django__3.1/django/conf/urls:
__init__.py
i18n.py
static.py

/workspace/django__django__3.1/django/contrib:
__init__.py
admin
admindocs
auth
contenttypes
flatpages
gis
humanize
messages
postgres
redirects
sessions
sitemaps
sites
staticfiles
syndication

/workspace/django__django__3.1/django/contrib/admin:
__init__.py
actions.py
apps.py
bin
checks.py
decorators.py
exceptions.py
filters.py
forms.py
helpers.py
locale
migrations
models.py
options.py
sites.py
static
templates
templatetags
tests.py
utils.py
views
widgets.py

/workspace/django__django__3.1/django/contrib/admin/bin:
compress.py

/workspace/django__django__3.1/django/contrib/admin/locale:
af
am
ar
ast
az
be
bg
bn
br
bs
ca
cs
cy
da
de
dsb
el
en
en_AU
en_GB
eo
es
es_AR
es_CO
es_MX
es_VE
et
eu
fa
fi
fr
fy
ga
gd
gl
he
hi
hr
hsb
hu
hy
ia
id
io
is
it
ja
ka
kab
kk
km
kn
ko
lb
lt
lv
mk
ml
mn
mr
my
nb
ne
nl
nn
os
pa
pl
pt
pt_BR
ro
ru
sk
sl
sq
sr
sr_Latn
sv
sw
ta
te
th
tr
tt
udm
uk
ur
vi
zh_Hans
zh_Hant

/workspace/django__django__3.1/django/contrib/admin/locale/af:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/af/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/am:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/am/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admin/locale/ar:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/ar/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/ast:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/ast/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/az:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/az/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/be:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/be/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/bg:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/bg/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/bn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/bn/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/br:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/br/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/bs:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/bs/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/ca:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/ca/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/cs:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/cs/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/cy:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/cy/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/da:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/da/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/de:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/de/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/dsb:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/dsb/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/el:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/el/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/en:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/en/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/en_AU:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/en_AU/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/en_GB:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/en_GB/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/eo:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/eo/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/es:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/es/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/es_AR:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/es_AR/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/es_CO:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/es_CO/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/es_MX:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/es_MX/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/es_VE:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/es_VE/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/et:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/et/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/eu:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/eu/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/fa:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/fa/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/fi:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/fi/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/fr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/fr/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/fy:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/fy/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/ga:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/ga/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/gd:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/gd/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/gl:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/gl/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/he:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/he/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/hi:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/hi/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/hr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/hr/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/hsb:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/hsb/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/hu:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/hu/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/hy:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/hy/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/ia:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/ia/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/id:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/id/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/io:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/io/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/is:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/is/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/it:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/it/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/ja:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/ja/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/ka:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/ka/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/kab:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/kab/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/kk:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/kk/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/km:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/km/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/kn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/kn/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/ko:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/ko/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/lb:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/lb/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/lt:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/lt/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/lv:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/lv/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/mk:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/mk/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/ml:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/ml/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/mn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/mn/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/mr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/mr/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/my:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/my/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/nb:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/nb/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/ne:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/ne/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/nl:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/nl/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/nn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/nn/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/os:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/os/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/pa:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/pa/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/pl:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/pl/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/pt:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/pt/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/pt_BR:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/pt_BR/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/ro:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/ro/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/ru:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/ru/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/sk:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/sk/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/sl:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/sl/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/sq:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/sq/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/sr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/sr/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/sr_Latn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/sr_Latn/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/sv:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/sv/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/sw:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/sw/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/ta:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/ta/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/te:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/te/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/th:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/th/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/tr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/tr/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/tt:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/tt/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/udm:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/udm/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/uk:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/uk/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/ur:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/ur/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/vi:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/vi/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/zh_Hans:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/zh_Hans/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/locale/zh_Hant:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admin/locale/zh_Hant/LC_MESSAGES:
django.mo
django.po
djangojs.mo
djangojs.po

/workspace/django__django__3.1/django/contrib/admin/migrations:
0001_initial.py
0002_logentry_remove_auto_add.py
0003_logentry_add_action_flag_choices.py
__init__.py

/workspace/django__django__3.1/django/contrib/admin/static:
admin

/workspace/django__django__3.1/django/contrib/admin/static/admin:
css
fonts
img
js

/workspace/django__django__3.1/django/contrib/admin/static/admin/css:
autocomplete.css
base.css
changelists.css
dashboard.css
fonts.css
forms.css
login.css
responsive.css
responsive_rtl.css
rtl.css
vendor
widgets.css

/workspace/django__django__3.1/django/contrib/admin/static/admin/css/vendor:
select2

/workspace/django__django__3.1/django/contrib/admin/static/admin/css/vendor/select2:
LICENSE-SELECT2.md
select2.css
select2.min.css

/workspace/django__django__3.1/django/contrib/admin/static/admin/fonts:
LICENSE.txt
README.txt
Roboto-Bold-webfont.woff
Roboto-Light-webfont.woff
Roboto-Regular-webfont.woff

/workspace/django__django__3.1/django/contrib/admin/static/admin/img:
LICENSE
README.txt
calendar-icons.svg
gis
icon-addlink.svg
icon-alert.svg
icon-calendar.svg
icon-changelink.svg
icon-clock.svg
icon-deletelink.svg
icon-no.svg
icon-unknown-alt.svg
icon-unknown.svg
icon-viewlink.svg
icon-yes.svg
inline-delete.svg
search.svg
selector-icons.svg
sorting-icons.svg
tooltag-add.svg
tooltag-arrowright.svg

/workspace/django__django__3.1/django/contrib/admin/static/admin/img/gis:
move_vertex_off.svg
move_vertex_on.svg

/workspace/django__django__3.1/django/contrib/admin/static/admin/js:
SelectBox.js
SelectFilter2.js
actions.js
actions.min.js
admin
autocomplete.js
calendar.js
cancel.js
change_form.js
collapse.js
collapse.min.js
core.js
inlines.js
inlines.min.js
jquery.init.js
popup_response.js
prepopulate.js
prepopulate.min.js
prepopulate_init.js
urlify.js
vendor

/workspace/django__django__3.1/django/contrib/admin/static/admin/js/admin:
DateTimeShortcuts.js
RelatedObjectLookups.js

/workspace/django__django__3.1/django/contrib/admin/static/admin/js/vendor:
jquery
select2
xregexp

/workspace/django__django__3.1/django/contrib/admin/static/admin/js/vendor/jquery:
LICENSE.txt
jquery.js
jquery.min.js

/workspace/django__django__3.1/django/contrib/admin/static/admin/js/vendor/select2:
LICENSE.md
i18n
select2.full.js
select2.full.min.js

/workspace/django__django__3.1/django/contrib/admin/static/admin/js/vendor/select2/i18n:
af.js
ar.js
az.js
bg.js
bn.js
bs.js
ca.js
cs.js
da.js
de.js
dsb.js
el.js
en.js
es.js
et.js
eu.js
fa.js
fi.js
fr.js
gl.js
he.js
hi.js
hr.js
hsb.js
hu.js
hy.js
id.js
is.js
it.js
ja.js
ka.js
km.js
ko.js
lt.js
lv.js
mk.js
ms.js
nb.js
ne.js
nl.js
pl.js
ps.js
pt-BR.js
pt.js
ro.js
ru.js
sk.js
sl.js
sq.js
sr-Cyrl.js
sr.js
sv.js
th.js
tk.js
tr.js
uk.js
vi.js
zh-CN.js
zh-TW.js

/workspace/django__django__3.1/django/contrib/admin/static/admin/js/vendor/xregexp:
LICENSE.txt
xregexp.js
xregexp.min.js

/workspace/django__django__3.1/django/contrib/admin/templates:
admin
registration

/workspace/django__django__3.1/django/contrib/admin/templates/admin:
404.html
500.html
actions.html
app_index.html
auth
base.html
base_site.html
change_form.html
change_form_object_tools.html
change_list.html
change_list_object_tools.html
change_list_results.html
date_hierarchy.html
delete_confirmation.html
delete_selected_confirmation.html
edit_inline
filter.html
includes
index.html
invalid_setup.html
login.html
object_history.html
pagination.html
popup_response.html
prepopulated_fields_js.html
search_form.html
submit_line.html
widgets

/workspace/django__django__3.1/django/contrib/admin/templates/admin/auth:
user

/workspace/django__django__3.1/django/contrib/admin/templates/admin/auth/user:
add_form.html
change_password.html

/workspace/django__django__3.1/django/contrib/admin/templates/admin/edit_inline:
stacked.html
tabular.html

/workspace/django__django__3.1/django/contrib/admin/templates/admin/includes:
fieldset.html
object_delete_summary.html

/workspace/django__django__3.1/django/contrib/admin/templates/admin/widgets:
clearable_file_input.html
foreign_key_raw_id.html
many_to_many_raw_id.html
radio.html
related_widget_wrapper.html
split_datetime.html
url.html

/workspace/django__django__3.1/django/contrib/admin/templates/registration:
logged_out.html
password_change_done.html
password_change_form.html
password_reset_complete.html
password_reset_confirm.html
password_reset_done.html
password_reset_email.html
password_reset_form.html

/workspace/django__django__3.1/django/contrib/admin/templatetags:
__init__.py
admin_list.py
admin_modify.py
admin_urls.py
base.py
log.py

/workspace/django__django__3.1/django/contrib/admin/views:
__init__.py
autocomplete.py
decorators.py
main.py

/workspace/django__django__3.1/django/contrib/admindocs:
__init__.py
apps.py
locale
middleware.py
templates
urls.py
utils.py
views.py

/workspace/django__django__3.1/django/contrib/admindocs/locale:
af
ar
ast
az
be
bg
bn
br
bs
ca
cs
cy
da
de
dsb
el
en
en_AU
en_GB
eo
es
es_AR
es_CO
es_MX
es_VE
et
eu
fa
fi
fr
fy
ga
gd
gl
he
hi
hr
hsb
hu
ia
id
io
is
it
ja
ka
kab
kk
km
kn
ko
lb
lt
lv
mk
ml
mn
mr
my
nb
ne
nl
nn
os
pa
pl
pt
pt_BR
ro
ru
sk
sl
sq
sr
sr_Latn
sv
sw
ta
te
th
tr
tt
udm
uk
ur
vi
zh_Hans
zh_Hant

/workspace/django__django__3.1/django/contrib/admindocs/locale/af:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/af/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/ar:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/ar/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/ast:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/ast/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/az:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/az/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/be:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/be/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/bg:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/bg/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/bn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/bn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/br:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/br/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/bs:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/bs/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/ca:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/ca/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/cs:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/cs/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/cy:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/cy/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/da:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/da/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/de:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/de/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/dsb:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/dsb/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/el:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/el/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/en:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/en/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/en_AU:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/en_AU/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/en_GB:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/en_GB/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/eo:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/eo/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/es:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/es/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/es_AR:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/es_AR/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/es_CO:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/es_CO/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/es_MX:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/es_MX/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/es_VE:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/es_VE/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/et:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/et/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/eu:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/eu/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/fa:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/fa/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/fi:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/fi/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/fr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/fr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/fy:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/fy/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/ga:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/ga/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/gd:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/gd/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/gl:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/gl/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/he:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/he/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/hi:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/hi/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/hr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/hr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/hsb:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/hsb/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/hu:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/hu/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/ia:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/ia/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/id:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/id/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/io:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/io/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/is:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/is/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/it:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/it/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/ja:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/ja/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/ka:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/ka/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/kab:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/kab/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/kk:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/kk/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/km:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/km/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/kn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/kn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/ko:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/ko/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/lb:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/lb/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/lt:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/lt/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/lv:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/lv/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/mk:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/mk/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/ml:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/ml/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/mn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/mn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/mr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/mr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/my:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/my/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/nb:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/nb/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/ne:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/ne/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/nl:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/nl/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/nn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/nn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/os:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/os/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/pa:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/pa/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/pl:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/pl/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/pt:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/pt/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/pt_BR:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/pt_BR/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/ro:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/ro/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/ru:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/ru/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/sk:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/sk/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/sl:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/sl/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/sq:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/sq/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/sr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/sr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/sr_Latn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/sr_Latn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/sv:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/sv/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/sw:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/sw/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/ta:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/ta/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/te:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/te/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/th:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/th/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/tr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/tr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/tt:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/tt/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/udm:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/udm/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/uk:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/uk/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/ur:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/ur/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/vi:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/vi/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/zh_Hans:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/zh_Hans/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/locale/zh_Hant:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/admindocs/locale/zh_Hant/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/admindocs/templates:
admin_doc

/workspace/django__django__3.1/django/contrib/admindocs/templates/admin_doc:
bookmarklets.html
index.html
missing_docutils.html
model_detail.html
model_index.html
template_detail.html
template_filter_index.html
template_tag_index.html
view_detail.html
view_index.html

/workspace/django__django__3.1/django/contrib/auth:
__init__.py
admin.py
apps.py
backends.py
base_user.py
checks.py
common-passwords.txt.gz
context_processors.py
decorators.py
forms.py
handlers
hashers.py
locale
management
middleware.py
migrations
mixins.py
models.py
password_validation.py
signals.py
templates
tokens.py
urls.py
validators.py
views.py

/workspace/django__django__3.1/django/contrib/auth/handlers:
__init__.py
modwsgi.py

/workspace/django__django__3.1/django/contrib/auth/locale:
af
ar
ast
az
be
bg
bn
br
bs
ca
cs
cy
da
de
dsb
el
en
en_AU
en_GB
eo
es
es_AR
es_CO
es_MX
es_VE
et
eu
fa
fi
fr
fy
ga
gd
gl
he
hi
hr
hsb
hu
hy
ia
id
io
is
it
ja
ka
kab
kk
km
kn
ko
lb
lt
lv
mk
ml
mn
mr
my
nb
ne
nl
nn
os
pa
pl
pt
pt_BR
ro
ru
sk
sl
sq
sr
sr_Latn
sv
sw
ta
te
th
tr
tt
udm
uk
ur
vi
zh_Hans
zh_Hant

/workspace/django__django__3.1/django/contrib/auth/locale/af:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/af/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/ar:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/ar/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/ast:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/ast/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/az:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/az/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/be:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/be/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/bg:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/bg/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/bn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/bn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/br:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/br/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/bs:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/bs/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/ca:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/ca/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/cs:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/cs/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/cy:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/cy/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/da:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/da/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/de:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/de/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/dsb:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/dsb/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/el:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/el/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/en:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/en/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/en_AU:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/en_AU/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/en_GB:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/en_GB/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/eo:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/eo/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/es:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/es/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/es_AR:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/es_AR/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/es_CO:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/es_CO/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/es_MX:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/es_MX/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/es_VE:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/es_VE/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/et:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/et/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/eu:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/eu/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/fa:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/fa/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/fi:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/fi/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/fr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/fr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/fy:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/fy/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/ga:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/ga/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/gd:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/gd/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/gl:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/gl/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/he:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/he/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/hi:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/hi/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/hr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/hr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/hsb:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/hsb/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/hu:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/hu/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/hy:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/hy/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/ia:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/ia/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/id:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/id/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/io:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/io/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/is:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/is/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/it:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/it/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/ja:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/ja/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/ka:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/ka/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/kab:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/kab/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/kk:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/kk/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/km:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/km/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/kn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/kn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/ko:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/ko/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/lb:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/lb/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/lt:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/lt/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/lv:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/lv/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/mk:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/mk/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/ml:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/ml/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/mn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/mn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/mr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/mr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/my:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/my/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/nb:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/nb/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/ne:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/ne/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/nl:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/nl/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/nn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/nn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/os:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/os/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/pa:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/pa/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/pl:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/pl/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/pt:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/pt/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/pt_BR:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/pt_BR/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/ro:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/ro/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/ru:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/ru/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/sk:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/sk/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/sl:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/sl/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/sq:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/sq/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/sr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/sr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/sr_Latn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/sr_Latn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/sv:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/sv/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/sw:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/sw/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/ta:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/ta/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/te:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/te/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/th:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/th/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/tr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/tr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/tt:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/tt/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/udm:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/udm/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/uk:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/uk/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/ur:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/ur/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/vi:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/vi/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/zh_Hans:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/zh_Hans/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/locale/zh_Hant:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/auth/locale/zh_Hant/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/auth/management:
__init__.py
commands

/workspace/django__django__3.1/django/contrib/auth/management/commands:
changepassword.py
createsuperuser.py

/workspace/django__django__3.1/django/contrib/auth/migrations:
0001_initial.py
0002_alter_permission_name_max_length.py
0003_alter_user_email_max_length.py
0004_alter_user_username_opts.py
0005_alter_user_last_login_null.py
0006_require_contenttypes_0002.py
0007_alter_validators_add_error_messages.py
0008_alter_user_username_max_length.py
0009_alter_user_last_name_max_length.py
0010_alter_group_name_max_length.py
0011_update_proxy_permissions.py
__init__.py

/workspace/django__django__3.1/django/contrib/auth/templates:
auth
registration

/workspace/django__django__3.1/django/contrib/auth/templates/auth:
widgets

/workspace/django__django__3.1/django/contrib/auth/templates/auth/widgets:
read_only_password_hash.html

/workspace/django__django__3.1/django/contrib/auth/templates/registration:
password_reset_subject.txt

/workspace/django__django__3.1/django/contrib/contenttypes:
__init__.py
admin.py
apps.py
checks.py
fields.py
forms.py
locale
management
migrations
models.py
views.py

/workspace/django__django__3.1/django/contrib/contenttypes/locale:
af
ar
ast
az
be
bg
bn
br
bs
ca
cs
cy
da
de
dsb
el
en
en_AU
en_GB
eo
es
es_AR
es_CO
es_MX
es_VE
et
eu
fa
fi
fr
fy
ga
gd
gl
he
hi
hr
hsb
hu
hy
ia
id
io
is
it
ja
ka
kk
km
kn
ko
lb
lt
lv
mk
ml
mn
mr
my
nb
ne
nl
nn
os
pa
pl
pt
pt_BR
ro
ru
sk
sl
sq
sr
sr_Latn
sv
sw
ta
te
th
tr
tt
udm
uk
ur
vi
zh_Hans
zh_Hant

/workspace/django__django__3.1/django/contrib/contenttypes/locale/af:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/af/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/ar:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/ar/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/ast:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/ast/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/az:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/az/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/be:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/be/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/bg:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/bg/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/bn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/bn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/br:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/br/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/bs:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/bs/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/ca:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/ca/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/cs:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/cs/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/cy:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/cy/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/da:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/da/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/de:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/de/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/dsb:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/dsb/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/el:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/el/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/en:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/en/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/en_AU:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/en_AU/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/en_GB:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/en_GB/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/eo:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/eo/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/es:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/es/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/es_AR:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/es_AR/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/es_CO:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/es_CO/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/es_MX:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/es_MX/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/es_VE:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/es_VE/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/et:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/et/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/eu:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/eu/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/fa:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/fa/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/fi:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/fi/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/fr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/fr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/fy:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/fy/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/ga:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/ga/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/gd:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/gd/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/gl:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/gl/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/he:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/he/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/hi:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/hi/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/hr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/hr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/hsb:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/hsb/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/hu:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/hu/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/hy:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/hy/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/ia:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/ia/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/id:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/id/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/io:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/io/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/is:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/is/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/it:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/it/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/ja:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/ja/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/ka:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/ka/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/kk:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/kk/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/km:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/km/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/kn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/kn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/ko:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/ko/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/lb:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/lb/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/lt:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/lt/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/lv:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/lv/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/mk:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/mk/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/ml:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/ml/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/mn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/mn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/mr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/mr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/my:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/my/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/nb:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/nb/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/ne:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/ne/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/nl:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/nl/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/nn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/nn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/os:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/os/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/pa:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/pa/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/pl:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/pl/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/pt:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/pt/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/pt_BR:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/pt_BR/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/ro:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/ro/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/ru:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/ru/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/sk:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/sk/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/sl:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/sl/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/sq:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/sq/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/sr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/sr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/sr_Latn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/sr_Latn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/sv:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/sv/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/sw:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/sw/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/ta:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/ta/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/te:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/te/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/th:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/th/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/tr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/tr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/tt:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/tt/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/udm:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/udm/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/uk:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/uk/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/ur:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/ur/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/vi:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/vi/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/zh_Hans:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/zh_Hans/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/locale/zh_Hant:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/contenttypes/locale/zh_Hant/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/contenttypes/management:
__init__.py
commands

/workspace/django__django__3.1/django/contrib/contenttypes/management/commands:
remove_stale_contenttypes.py

/workspace/django__django__3.1/django/contrib/contenttypes/migrations:
0001_initial.py
0002_remove_content_type_name.py
__init__.py

/workspace/django__django__3.1/django/contrib/flatpages:
__init__.py
admin.py
apps.py
forms.py
locale
middleware.py
migrations
models.py
sitemaps.py
templatetags
urls.py
views.py

/workspace/django__django__3.1/django/contrib/flatpages/locale:
af
ar
ast
az
be
bg
bn
br
bs
ca
cs
cy
da
de
dsb
el
en
en_AU
en_GB
eo
es
es_AR
es_CO
es_MX
es_VE
et
eu
fa
fi
fr
fy
ga
gd
gl
he
hi
hr
hsb
hu
hy
ia
id
io
is
it
ja
ka
kk
km
kn
ko
lb
lt
lv
mk
ml
mn
mr
my
nb
ne
nl
nn
os
pa
pl
pt
pt_BR
ro
ru
sk
sl
sq
sr
sr_Latn
sv
sw
ta
te
th
tr
tt
udm
uk
ur
vi
zh_Hans
zh_Hant

/workspace/django__django__3.1/django/contrib/flatpages/locale/af:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/af/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/ar:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/ar/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/ast:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/ast/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/az:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/az/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/be:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/be/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/bg:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/bg/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/bn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/bn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/br:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/br/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/bs:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/bs/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/ca:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/ca/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/cs:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/cs/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/cy:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/cy/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/da:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/da/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/de:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/de/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/dsb:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/dsb/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/el:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/el/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/en:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/en/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/en_AU:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/en_AU/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/en_GB:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/en_GB/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/eo:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/eo/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/es:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/es/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/es_AR:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/es_AR/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/es_CO:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/es_CO/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/es_MX:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/es_MX/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/es_VE:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/es_VE/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/et:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/et/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/eu:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/eu/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/fa:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/fa/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/fi:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/fi/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/fr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/fr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/fy:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/fy/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/ga:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/ga/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/gd:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/gd/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/gl:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/gl/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/he:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/he/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/hi:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/hi/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/hr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/hr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/hsb:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/hsb/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/hu:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/hu/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/hy:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/hy/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/ia:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/ia/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/id:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/id/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/io:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/io/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/is:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/is/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/it:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/it/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/ja:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/ja/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/ka:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/ka/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/kk:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/kk/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/km:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/km/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/kn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/kn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/ko:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/ko/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/lb:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/lb/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/lt:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/lt/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/lv:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/lv/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/mk:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/mk/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/ml:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/ml/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/mn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/mn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/mr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/mr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/my:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/my/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/nb:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/nb/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/ne:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/ne/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/nl:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/nl/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/nn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/nn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/os:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/os/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/pa:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/pa/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/pl:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/pl/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/pt:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/pt/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/pt_BR:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/pt_BR/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/ro:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/ro/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/ru:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/ru/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/sk:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/sk/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/sl:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/sl/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/sq:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/sq/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/sr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/sr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/sr_Latn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/sr_Latn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/sv:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/sv/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/sw:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/sw/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/ta:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/ta/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/te:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/te/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/th:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/th/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/tr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/tr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/tt:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/tt/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/udm:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/udm/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/uk:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/uk/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/ur:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/ur/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/vi:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/vi/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/zh_Hans:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/zh_Hans/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/locale/zh_Hant:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/flatpages/locale/zh_Hant/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/flatpages/migrations:
0001_initial.py
__init__.py

/workspace/django__django__3.1/django/contrib/flatpages/templatetags:
__init__.py
flatpages.py

/workspace/django__django__3.1/django/contrib/gis:
__init__.py
admin
apps.py
db
feeds.py
forms
gdal
geoip2
geometry.py
geos
locale
management
measure.py
ptr.py
serializers
shortcuts.py
sitemaps
static
templates
utils
views.py

/workspace/django__django__3.1/django/contrib/gis/admin:
__init__.py
options.py
widgets.py

/workspace/django__django__3.1/django/contrib/gis/db:
__init__.py
backends
models

/workspace/django__django__3.1/django/contrib/gis/db/backends:
__init__.py
base
mysql
oracle
postgis
spatialite
utils.py

/workspace/django__django__3.1/django/contrib/gis/db/backends/base:
__init__.py
adapter.py
features.py
models.py
operations.py

/workspace/django__django__3.1/django/contrib/gis/db/backends/mysql:
__init__.py
base.py
features.py
introspection.py
operations.py
schema.py

/workspace/django__django__3.1/django/contrib/gis/db/backends/oracle:
__init__.py
adapter.py
base.py
features.py
introspection.py
models.py
operations.py
schema.py

/workspace/django__django__3.1/django/contrib/gis/db/backends/postgis:
__init__.py
adapter.py
base.py
const.py
features.py
introspection.py
models.py
operations.py
pgraster.py
schema.py

/workspace/django__django__3.1/django/contrib/gis/db/backends/spatialite:
__init__.py
adapter.py
base.py
client.py
features.py
introspection.py
models.py
operations.py
schema.py

/workspace/django__django__3.1/django/contrib/gis/db/models:
__init__.py
aggregates.py
fields.py
functions.py
lookups.py
proxy.py
sql

/workspace/django__django__3.1/django/contrib/gis/db/models/sql:
__init__.py
conversion.py

/workspace/django__django__3.1/django/contrib/gis/forms:
__init__.py
fields.py
widgets.py

/workspace/django__django__3.1/django/contrib/gis/gdal:
LICENSE
__init__.py
base.py
datasource.py
driver.py
envelope.py
error.py
feature.py
field.py
geometries.py
geomtype.py
layer.py
libgdal.py
prototypes
raster
srs.py

/workspace/django__django__3.1/django/contrib/gis/gdal/prototypes:
__init__.py
ds.py
errcheck.py
generation.py
geom.py
raster.py
srs.py

/workspace/django__django__3.1/django/contrib/gis/gdal/raster:
__init__.py
band.py
base.py
const.py
source.py

/workspace/django__django__3.1/django/contrib/gis/geoip2:
__init__.py
base.py
resources.py

/workspace/django__django__3.1/django/contrib/gis/geos:
LICENSE
__init__.py
base.py
collections.py
coordseq.py
error.py
factory.py
geometry.py
io.py
libgeos.py
linestring.py
mutable_list.py
point.py
polygon.py
prepared.py
prototypes

/workspace/django__django__3.1/django/contrib/gis/geos/prototypes:
__init__.py
coordseq.py
errcheck.py
geom.py
io.py
misc.py
predicates.py
prepared.py
threadsafe.py
topology.py

/workspace/django__django__3.1/django/contrib/gis/locale:
af
ar
ast
az
be
bg
bn
br
bs
ca
cs
cy
da
de
dsb
el
en
en_AU
en_GB
eo
es
es_AR
es_CO
es_MX
es_VE
et
eu
fa
fi
fr
fy
ga
gd
gl
he
hi
hr
hsb
hu
hy
ia
id
io
is
it
ja
ka
kk
km
kn
ko
lb
lt
lv
mk
ml
mn
mr
my
nb
ne
nl
nn
os
pa
pl
pt
pt_BR
ro
ru
sk
sl
sq
sr
sr_Latn
sv
sw
ta
te
th
tr
tt
udm
uk
ur
vi
zh_Hans
zh_Hant

/workspace/django__django__3.1/django/contrib/gis/locale/af:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/af/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/ar:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/ar/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/ast:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/ast/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/az:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/az/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/be:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/be/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/bg:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/bg/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/bn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/bn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/br:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/br/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/bs:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/bs/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/ca:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/ca/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/cs:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/cs/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/cy:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/cy/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/da:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/da/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/de:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/de/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/dsb:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/dsb/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/el:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/el/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/en:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/en/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/en_AU:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/en_AU/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/en_GB:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/en_GB/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/eo:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/eo/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/es:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/es/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/es_AR:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/es_AR/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/es_CO:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/es_CO/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/es_MX:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/es_MX/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/es_VE:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/es_VE/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/et:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/et/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/eu:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/eu/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/fa:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/fa/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/fi:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/fi/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/fr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/fr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/fy:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/fy/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/ga:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/ga/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/gd:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/gd/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/gl:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/gl/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/he:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/he/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/hi:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/hi/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/hr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/hr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/hsb:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/hsb/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/hu:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/hu/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/hy:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/hy/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/ia:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/ia/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/id:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/id/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/io:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/io/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/is:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/is/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/it:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/it/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/ja:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/ja/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/ka:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/ka/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/kk:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/kk/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/km:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/km/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/kn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/kn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/ko:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/ko/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/lb:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/lb/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/lt:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/lt/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/lv:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/lv/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/mk:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/mk/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/ml:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/ml/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/mn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/mn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/mr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/mr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/my:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/my/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/nb:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/nb/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/ne:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/ne/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/nl:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/nl/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/nn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/nn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/os:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/os/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/pa:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/pa/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/pl:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/pl/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/pt:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/pt/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/pt_BR:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/pt_BR/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/ro:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/ro/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/ru:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/ru/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/sk:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/sk/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/sl:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/sl/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/sq:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/sq/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/sr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/sr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/sr_Latn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/sr_Latn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/sv:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/sv/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/sw:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/sw/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/ta:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/ta/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/te:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/te/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/th:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/th/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/tr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/tr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/tt:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/tt/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/udm:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/udm/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/uk:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/uk/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/ur:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/ur/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/vi:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/vi/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/zh_Hans:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/zh_Hans/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/locale/zh_Hant:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/gis/locale/zh_Hant/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/gis/management:
commands

/workspace/django__django__3.1/django/contrib/gis/management/commands:
inspectdb.py
ogrinspect.py

/workspace/django__django__3.1/django/contrib/gis/serializers:
__init__.py
geojson.py

/workspace/django__django__3.1/django/contrib/gis/sitemaps:
__init__.py
kml.py
views.py

/workspace/django__django__3.1/django/contrib/gis/static:
gis

/workspace/django__django__3.1/django/contrib/gis/static/gis:
css
img
js

/workspace/django__django__3.1/django/contrib/gis/static/gis/css:
ol3.css

/workspace/django__django__3.1/django/contrib/gis/static/gis/img:
draw_line_off.svg
draw_line_on.svg
draw_point_off.svg
draw_point_on.svg
draw_polygon_off.svg
draw_polygon_on.svg

/workspace/django__django__3.1/django/contrib/gis/static/gis/js:
OLMapWidget.js

/workspace/django__django__3.1/django/contrib/gis/templates:
gis

/workspace/django__django__3.1/django/contrib/gis/templates/gis:
admin
kml
openlayers-osm.html
openlayers.html

/workspace/django__django__3.1/django/contrib/gis/templates/gis/admin:
openlayers.html
openlayers.js
osm.html
osm.js

/workspace/django__django__3.1/django/contrib/gis/templates/gis/kml:
base.kml
placemarks.kml

/workspace/django__django__3.1/django/contrib/gis/utils:
__init__.py
layermapping.py
ogrinfo.py
ogrinspect.py
srs.py

/workspace/django__django__3.1/django/contrib/humanize:
__init__.py
apps.py
locale
templatetags

/workspace/django__django__3.1/django/contrib/humanize/locale:
af
ar
ast
az
be
bg
bn
br
bs
ca
cs
cy
da
de
dsb
el
en
en_AU
en_GB
eo
es
es_AR
es_CO
es_MX
es_VE
et
eu
fa
fi
fr
fy
ga
gd
gl
he
hi
hr
hsb
hu
hy
ia
id
io
is
it
ja
ka
kk
km
kn
ko
lb
lt
lv
mk
ml
mn
mr
ms
my
nb
ne
nl
nn
os
pa
pl
pt
pt_BR
ro
ru
sk
sl
sq
sr
sr_Latn
sv
sw
ta
te
th
tr
tt
udm
uk
ur
vi
zh_Hans
zh_Hant

/workspace/django__django__3.1/django/contrib/humanize/locale/af:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/af/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/ar:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/ar/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/ast:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/ast/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/az:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/az/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/be:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/be/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/bg:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/bg/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/bn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/bn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/br:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/br/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/bs:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/bs/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/ca:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/ca/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/cs:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/cs/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/cy:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/cy/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/da:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/da/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/de:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/de/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/dsb:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/dsb/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/el:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/el/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/en:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/en/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/en_AU:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/en_AU/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/en_GB:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/en_GB/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/eo:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/eo/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/es:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/es/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/es_AR:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/es_AR/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/es_CO:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/es_CO/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/es_MX:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/es_MX/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/es_VE:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/es_VE/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/et:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/et/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/eu:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/eu/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/fa:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/fa/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/fi:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/fi/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/fr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/fr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/fy:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/fy/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/ga:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/ga/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/gd:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/gd/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/gl:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/gl/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/he:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/he/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/hi:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/hi/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/hr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/hr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/hsb:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/hsb/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/hu:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/hu/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/hy:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/hy/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/ia:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/ia/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/id:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/id/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/io:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/io/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/is:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/is/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/it:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/it/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/ja:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/ja/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/ka:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/ka/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/kk:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/kk/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/km:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/km/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/kn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/kn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/ko:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/ko/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/lb:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/lb/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/lt:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/lt/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/lv:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/lv/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/mk:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/mk/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/ml:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/ml/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/mn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/mn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/mr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/mr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/ms:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/ms/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/my:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/my/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/nb:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/nb/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/ne:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/ne/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/nl:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/nl/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/nn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/nn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/os:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/os/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/pa:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/pa/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/pl:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/pl/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/pt:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/pt/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/pt_BR:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/pt_BR/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/ro:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/ro/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/ru:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/ru/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/sk:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/sk/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/sl:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/sl/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/sq:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/sq/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/sr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/sr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/sr_Latn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/sr_Latn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/sv:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/sv/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/sw:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/sw/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/ta:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/ta/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/te:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/te/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/th:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/th/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/tr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/tr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/tt:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/tt/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/udm:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/udm/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/uk:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/uk/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/ur:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/ur/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/vi:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/vi/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/zh_Hans:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/zh_Hans/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/locale/zh_Hant:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/humanize/locale/zh_Hant/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/humanize/templatetags:
__init__.py
humanize.py

/workspace/django__django__3.1/django/contrib/messages:
__init__.py
api.py
apps.py
constants.py
context_processors.py
middleware.py
storage
utils.py
views.py

/workspace/django__django__3.1/django/contrib/messages/storage:
__init__.py
base.py
cookie.py
fallback.py
session.py

/workspace/django__django__3.1/django/contrib/postgres:
__init__.py
aggregates
apps.py
constraints.py
fields
forms
functions.py
indexes.py
jinja2
locale
lookups.py
operations.py
search.py
serializers.py
signals.py
templates
utils.py
validators.py

/workspace/django__django__3.1/django/contrib/postgres/aggregates:
__init__.py
general.py
mixins.py
statistics.py

/workspace/django__django__3.1/django/contrib/postgres/fields:
__init__.py
array.py
citext.py
hstore.py
jsonb.py
mixins.py
ranges.py
utils.py

/workspace/django__django__3.1/django/contrib/postgres/forms:
__init__.py
array.py
hstore.py
jsonb.py
ranges.py

/workspace/django__django__3.1/django/contrib/postgres/jinja2:
postgres

/workspace/django__django__3.1/django/contrib/postgres/jinja2/postgres:
widgets

/workspace/django__django__3.1/django/contrib/postgres/jinja2/postgres/widgets:
split_array.html

/workspace/django__django__3.1/django/contrib/postgres/locale:
af
ar
az
be
bg
ca
cs
da
de
dsb
el
en
eo
es
es_AR
es_CO
es_MX
et
eu
fa
fi
fr
gd
gl
he
hr
hsb
hu
hy
ia
id
is
it
ja
ka
kk
ko
lt
lv
mk
mn
nb
ne
nl
pl
pt
pt_BR
ro
ru
sk
sl
sq
sr
sr_Latn
sv
tr
uk
zh_Hans
zh_Hant

/workspace/django__django__3.1/django/contrib/postgres/locale/af:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/af/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/ar:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/ar/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/az:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/az/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/be:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/be/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/bg:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/bg/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/ca:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/ca/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/cs:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/cs/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/da:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/da/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/de:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/de/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/dsb:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/dsb/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/el:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/el/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/en:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/en/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/eo:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/eo/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/es:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/es/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/es_AR:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/es_AR/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/es_CO:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/es_CO/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/es_MX:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/es_MX/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/et:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/et/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/eu:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/eu/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/fa:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/fa/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/fi:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/fi/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/fr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/fr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/gd:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/gd/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/gl:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/gl/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/he:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/he/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/hr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/hr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/hsb:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/hsb/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/hu:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/hu/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/hy:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/hy/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/ia:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/ia/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/id:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/id/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/is:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/is/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/it:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/it/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/ja:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/ja/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/ka:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/ka/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/kk:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/kk/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/ko:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/ko/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/lt:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/lt/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/lv:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/lv/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/mk:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/mk/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/mn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/mn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/nb:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/nb/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/ne:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/ne/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/nl:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/nl/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/pl:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/pl/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/pt:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/pt/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/pt_BR:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/pt_BR/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/ro:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/ro/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/ru:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/ru/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/sk:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/sk/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/sl:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/sl/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/sq:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/sq/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/sr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/sr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/sr_Latn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/sr_Latn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/sv:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/sv/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/tr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/tr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/uk:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/uk/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/zh_Hans:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/zh_Hans/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/locale/zh_Hant:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/postgres/locale/zh_Hant/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/postgres/templates:
postgres

/workspace/django__django__3.1/django/contrib/postgres/templates/postgres:
widgets

/workspace/django__django__3.1/django/contrib/postgres/templates/postgres/widgets:
split_array.html

/workspace/django__django__3.1/django/contrib/redirects:
__init__.py
admin.py
apps.py
locale
middleware.py
migrations
models.py

/workspace/django__django__3.1/django/contrib/redirects/locale:
af
ar
ast
az
be
bg
bn
br
bs
ca
cs
cy
da
de
dsb
el
en
en_AU
en_GB
eo
es
es_AR
es_CO
es_MX
es_VE
et
eu
fa
fi
fr
fy
ga
gd
gl
he
hi
hr
hsb
hu
hy
ia
id
io
is
it
ja
ka
kab
kk
km
kn
ko
lb
lt
lv
mk
ml
mn
mr
my
nb
ne
nl
nn
os
pa
pl
pt
pt_BR
ro
ru
sk
sl
sq
sr
sr_Latn
sv
sw
ta
te
th
tr
tt
udm
uk
ur
uz
vi
zh_Hans
zh_Hant

/workspace/django__django__3.1/django/contrib/redirects/locale/af:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/af/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/ar:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/ar/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/ast:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/ast/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/az:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/az/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/be:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/be/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/bg:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/bg/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/bn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/bn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/br:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/br/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/bs:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/bs/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/ca:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/ca/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/cs:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/cs/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/cy:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/cy/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/da:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/da/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/de:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/de/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/dsb:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/dsb/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/el:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/el/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/en:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/en/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/en_AU:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/en_AU/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/en_GB:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/en_GB/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/eo:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/eo/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/es:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/es/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/es_AR:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/es_AR/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/es_CO:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/es_CO/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/es_MX:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/es_MX/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/es_VE:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/es_VE/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/et:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/et/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/eu:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/eu/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/fa:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/fa/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/fi:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/fi/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/fr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/fr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/fy:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/fy/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/ga:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/ga/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/gd:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/gd/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/gl:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/gl/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/he:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/he/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/hi:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/hi/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/hr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/hr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/hsb:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/hsb/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/hu:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/hu/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/hy:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/hy/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/ia:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/ia/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/id:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/id/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/io:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/io/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/is:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/is/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/it:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/it/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/ja:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/ja/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/ka:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/ka/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/kab:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/kab/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/kk:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/kk/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/km:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/km/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/kn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/kn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/ko:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/ko/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/lb:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/lb/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/lt:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/lt/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/lv:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/lv/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/mk:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/mk/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/ml:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/ml/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/mn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/mn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/mr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/mr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/my:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/my/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/nb:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/nb/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/ne:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/ne/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/nl:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/nl/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/nn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/nn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/os:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/os/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/pa:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/pa/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/pl:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/pl/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/pt:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/pt/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/pt_BR:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/pt_BR/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/ro:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/ro/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/ru:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/ru/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/sk:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/sk/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/sl:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/sl/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/sq:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/sq/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/sr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/sr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/sr_Latn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/sr_Latn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/sv:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/sv/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/sw:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/sw/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/ta:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/ta/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/te:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/te/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/th:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/th/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/tr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/tr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/tt:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/tt/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/udm:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/udm/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/uk:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/uk/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/ur:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/ur/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/uz:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/uz/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/vi:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/vi/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/zh_Hans:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/zh_Hans/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/locale/zh_Hant:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/redirects/locale/zh_Hant/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/redirects/migrations:
0001_initial.py
__init__.py

/workspace/django__django__3.1/django/contrib/sessions:
__init__.py
apps.py
backends
base_session.py
exceptions.py
locale
management
middleware.py
migrations
models.py
serializers.py

/workspace/django__django__3.1/django/contrib/sessions/backends:
__init__.py
base.py
cache.py
cached_db.py
db.py
file.py
signed_cookies.py

/workspace/django__django__3.1/django/contrib/sessions/locale:
af
ar
ast
az
be
bg
bn
br
bs
ca
cs
cy
da
de
dsb
el
en
en_AU
en_GB
eo
es
es_AR
es_CO
es_MX
es_VE
et
eu
fa
fi
fr
fy
ga
gd
gl
he
hi
hr
hsb
hu
hy
ia
id
io
is
it
ja
ka
kab
kk
km
kn
ko
lb
lt
lv
mk
ml
mn
mr
my
nb
ne
nl
nn
os
pa
pl
pt
pt_BR
ro
ru
sk
sl
sq
sr
sr_Latn
sv
sw
ta
te
th
tr
tt
udm
uk
ur
uz
vi
zh_Hans
zh_Hant

/workspace/django__django__3.1/django/contrib/sessions/locale/af:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/af/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/ar:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/ar/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/ast:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/ast/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/az:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/az/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/be:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/be/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/bg:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/bg/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/bn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/bn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/br:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/br/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/bs:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/bs/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/ca:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/ca/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/cs:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/cs/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/cy:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/cy/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/da:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/da/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/de:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/de/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/dsb:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/dsb/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/el:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/el/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/en:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/en/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/en_AU:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/en_AU/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/en_GB:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/en_GB/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/eo:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/eo/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/es:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/es/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/es_AR:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/es_AR/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/es_CO:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/es_CO/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/es_MX:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/es_MX/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/es_VE:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/es_VE/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/et:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/et/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/eu:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/eu/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/fa:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/fa/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/fi:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/fi/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/fr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/fr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/fy:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/fy/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/ga:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/ga/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/gd:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/gd/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/gl:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/gl/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/he:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/he/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/hi:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/hi/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/hr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/hr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/hsb:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/hsb/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/hu:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/hu/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/hy:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/hy/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/ia:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/ia/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/id:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/id/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/io:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/io/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/is:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/is/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/it:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/it/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/ja:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/ja/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/ka:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/ka/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/kab:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/kab/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/kk:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/kk/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/km:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/km/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/kn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/kn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/ko:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/ko/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/lb:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/lb/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/lt:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/lt/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/lv:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/lv/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/mk:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/mk/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/ml:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/ml/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/mn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/mn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/mr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/mr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/my:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/my/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/nb:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/nb/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/ne:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/ne/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/nl:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/nl/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/nn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/nn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/os:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/os/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/pa:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/pa/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/pl:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/pl/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/pt:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/pt/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/pt_BR:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/pt_BR/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/ro:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/ro/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/ru:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/ru/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/sk:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/sk/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/sl:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/sl/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/sq:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/sq/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/sr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/sr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/sr_Latn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/sr_Latn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/sv:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/sv/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/sw:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/sw/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/ta:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/ta/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/te:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/te/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/th:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/th/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/tr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/tr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/tt:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/tt/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/udm:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/udm/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/uk:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/uk/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/ur:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/ur/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/uz:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/uz/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/vi:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/vi/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/zh_Hans:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/zh_Hans/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/locale/zh_Hant:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sessions/locale/zh_Hant/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sessions/management:
commands

/workspace/django__django__3.1/django/contrib/sessions/management/commands:
clearsessions.py

/workspace/django__django__3.1/django/contrib/sessions/migrations:
0001_initial.py
__init__.py

/workspace/django__django__3.1/django/contrib/sitemaps:
__init__.py
apps.py
management
templates
views.py

/workspace/django__django__3.1/django/contrib/sitemaps/management:
commands

/workspace/django__django__3.1/django/contrib/sitemaps/management/commands:
ping_google.py

/workspace/django__django__3.1/django/contrib/sitemaps/templates:
sitemap.xml
sitemap_index.xml

/workspace/django__django__3.1/django/contrib/sites:
__init__.py
admin.py
apps.py
locale
management.py
managers.py
middleware.py
migrations
models.py
requests.py
shortcuts.py

/workspace/django__django__3.1/django/contrib/sites/locale:
af
ar
ast
az
be
bg
bn
br
bs
ca
cs
cy
da
de
dsb
el
en
en_AU
en_GB
eo
es
es_AR
es_CO
es_MX
es_VE
et
eu
fa
fi
fr
fy
ga
gd
gl
he
hi
hr
hsb
hu
hy
ia
id
io
is
it
ja
ka
kab
kk
km
kn
ko
lb
lt
lv
mk
ml
mn
mr
my
nb
ne
nl
nn
os
pa
pl
pt
pt_BR
ro
ru
sk
sl
sq
sr
sr_Latn
sv
sw
ta
te
th
tr
tt
udm
uk
ur
uz
vi
zh_Hans
zh_Hant

/workspace/django__django__3.1/django/contrib/sites/locale/af:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/af/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/ar:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/ar/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/ast:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/ast/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/az:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/az/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/be:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/be/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/bg:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/bg/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/bn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/bn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/br:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/br/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/bs:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/bs/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/ca:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/ca/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/cs:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/cs/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/cy:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/cy/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/da:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/da/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/de:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/de/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/dsb:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/dsb/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/el:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/el/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/en:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/en/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/en_AU:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/en_AU/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/en_GB:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/en_GB/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/eo:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/eo/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/es:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/es/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/es_AR:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/es_AR/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/es_CO:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/es_CO/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/es_MX:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/es_MX/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/es_VE:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/es_VE/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/et:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/et/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/eu:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/eu/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/fa:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/fa/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/fi:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/fi/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/fr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/fr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/fy:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/fy/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/ga:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/ga/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/gd:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/gd/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/gl:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/gl/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/he:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/he/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/hi:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/hi/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/hr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/hr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/hsb:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/hsb/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/hu:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/hu/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/hy:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/hy/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/ia:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/ia/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/id:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/id/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/io:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/io/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/is:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/is/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/it:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/it/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/ja:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/ja/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/ka:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/ka/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/kab:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/kab/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/kk:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/kk/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/km:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/km/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/kn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/kn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/ko:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/ko/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/lb:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/lb/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/lt:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/lt/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/lv:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/lv/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/mk:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/mk/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/ml:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/ml/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/mn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/mn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/mr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/mr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/my:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/my/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/nb:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/nb/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/ne:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/ne/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/nl:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/nl/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/nn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/nn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/os:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/os/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/pa:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/pa/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/pl:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/pl/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/pt:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/pt/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/pt_BR:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/pt_BR/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/ro:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/ro/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/ru:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/ru/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/sk:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/sk/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/sl:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/sl/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/sq:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/sq/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/sr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/sr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/sr_Latn:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/sr_Latn/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/sv:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/sv/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/sw:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/sw/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/ta:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/ta/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/te:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/te/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/th:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/th/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/tr:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/tr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/tt:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/tt/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/udm:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/udm/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/uk:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/uk/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/ur:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/ur/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/uz:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/uz/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/vi:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/vi/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/zh_Hans:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/zh_Hans/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/locale/zh_Hant:
LC_MESSAGES

/workspace/django__django__3.1/django/contrib/sites/locale/zh_Hant/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/django/contrib/sites/migrations:
0001_initial.py
0002_alter_domain_unique.py
__init__.py

/workspace/django__django__3.1/django/contrib/staticfiles:
__init__.py
apps.py
checks.py
finders.py
handlers.py
management
storage.py
testing.py
urls.py
utils.py
views.py

/workspace/django__django__3.1/django/contrib/staticfiles/management:
commands

/workspace/django__django__3.1/django/contrib/staticfiles/management/commands:
collectstatic.py
findstatic.py
runserver.py

/workspace/django__django__3.1/django/contrib/syndication:
__init__.py
apps.py
views.py

/workspace/django__django__3.1/django/core:
__init__.py
asgi.py
cache
checks
exceptions.py
files
handlers
mail
management
paginator.py
serializers
servers
signals.py
signing.py
validators.py
wsgi.py

/workspace/django__django__3.1/django/core/cache:
__init__.py
backends
utils.py

/workspace/django__django__3.1/django/core/cache/backends:
__init__.py
base.py
db.py
dummy.py
filebased.py
locmem.py
memcached.py

/workspace/django__django__3.1/django/core/checks:
__init__.py
caches.py
compatibility
database.py
messages.py
model_checks.py
registry.py
security
templates.py
translation.py
urls.py

/workspace/django__django__3.1/django/core/checks/compatibility:
__init__.py

/workspace/django__django__3.1/django/core/checks/security:
__init__.py
base.py
csrf.py
sessions.py

/workspace/django__django__3.1/django/core/files:
__init__.py
base.py
images.py
locks.py
move.py
storage.py
temp.py
uploadedfile.py
uploadhandler.py
utils.py

/workspace/django__django__3.1/django/core/handlers:
__init__.py
asgi.py
base.py
exception.py
wsgi.py

/workspace/django__django__3.1/django/core/mail:
__init__.py
backends
message.py
utils.py

/workspace/django__django__3.1/django/core/mail/backends:
__init__.py
base.py
console.py
dummy.py
filebased.py
locmem.py
smtp.py

/workspace/django__django__3.1/django/core/management:
__init__.py
base.py
color.py
commands
sql.py
templates.py
utils.py

/workspace/django__django__3.1/django/core/management/commands:
check.py
compilemessages.py
createcachetable.py
dbshell.py
diffsettings.py
dumpdata.py
flush.py
inspectdb.py
loaddata.py
makemessages.py
makemigrations.py
migrate.py
runserver.py
sendtestemail.py
shell.py
showmigrations.py
sqlflush.py
sqlmigrate.py
sqlsequencereset.py
squashmigrations.py
startapp.py
startproject.py
test.py
testserver.py

/workspace/django__django__3.1/django/core/serializers:
__init__.py
base.py
json.py
python.py
pyyaml.py
xml_serializer.py

/workspace/django__django__3.1/django/core/servers:
__init__.py
basehttp.py

/workspace/django__django__3.1/django/db:
__init__.py
backends
migrations
models
transaction.py
utils.py

/workspace/django__django__3.1/django/db/backends:
__init__.py
base
ddl_references.py
dummy
mysql
oracle
postgresql
signals.py
sqlite3
utils.py

/workspace/django__django__3.1/django/db/backends/base:
__init__.py
base.py
client.py
creation.py
features.py
introspection.py
operations.py
schema.py
validation.py

/workspace/django__django__3.1/django/db/backends/dummy:
__init__.py
base.py
features.py

/workspace/django__django__3.1/django/db/backends/mysql:
__init__.py
base.py
client.py
compiler.py
creation.py
features.py
introspection.py
operations.py
schema.py
validation.py

/workspace/django__django__3.1/django/db/backends/oracle:
__init__.py
base.py
client.py
creation.py
features.py
functions.py
introspection.py
operations.py
schema.py
utils.py
validation.py

/workspace/django__django__3.1/django/db/backends/postgresql:
__init__.py
base.py
client.py
creation.py
features.py
introspection.py
operations.py
schema.py
utils.py

/workspace/django__django__3.1/django/db/backends/sqlite3:
__init__.py
base.py
client.py
creation.py
features.py
introspection.py
operations.py
schema.py

/workspace/django__django__3.1/django/db/migrations:
__init__.py
autodetector.py
exceptions.py
executor.py
graph.py
loader.py
migration.py
operations
optimizer.py
questioner.py
recorder.py
serializer.py
state.py
utils.py
writer.py

/workspace/django__django__3.1/django/db/migrations/operations:
__init__.py
base.py
fields.py
models.py
special.py
utils.py

/workspace/django__django__3.1/django/db/models:
__init__.py
aggregates.py
base.py
constants.py
constraints.py
deletion.py
enums.py
expressions.py
fields
functions
indexes.py
lookups.py
manager.py
options.py
query.py
query_utils.py
signals.py
sql
utils.py

/workspace/django__django__3.1/django/db/models/fields:
__init__.py
files.py
mixins.py
proxy.py
related.py
related_descriptors.py
related_lookups.py
reverse_related.py

/workspace/django__django__3.1/django/db/models/functions:
__init__.py
comparison.py
datetime.py
math.py
mixins.py
text.py
window.py

/workspace/django__django__3.1/django/db/models/sql:
__init__.py
compiler.py
constants.py
datastructures.py
query.py
subqueries.py
where.py

/workspace/django__django__3.1/django/dispatch:
__init__.py
dispatcher.py
license.txt

/workspace/django__django__3.1/django/forms:
__init__.py
boundfield.py
fields.py
forms.py
formsets.py
jinja2
models.py
renderers.py
templates
utils.py
widgets.py

/workspace/django__django__3.1/django/forms/jinja2:
django

/workspace/django__django__3.1/django/forms/jinja2/django:
forms

/workspace/django__django__3.1/django/forms/jinja2/django/forms:
widgets

/workspace/django__django__3.1/django/forms/jinja2/django/forms/widgets:
attrs.html
checkbox.html
checkbox_option.html
checkbox_select.html
clearable_file_input.html
date.html
datetime.html
email.html
file.html
hidden.html
input.html
input_option.html
multiple_hidden.html
multiple_input.html
multiwidget.html
number.html
password.html
radio.html
radio_option.html
select.html
select_date.html
select_option.html
splitdatetime.html
splithiddendatetime.html
text.html
textarea.html
time.html
url.html

/workspace/django__django__3.1/django/forms/templates:
django

/workspace/django__django__3.1/django/forms/templates/django:
forms

/workspace/django__django__3.1/django/forms/templates/django/forms:
widgets

/workspace/django__django__3.1/django/forms/templates/django/forms/widgets:
attrs.html
checkbox.html
checkbox_option.html
checkbox_select.html
clearable_file_input.html
date.html
datetime.html
email.html
file.html
hidden.html
input.html
input_option.html
multiple_hidden.html
multiple_input.html
multiwidget.html
number.html
password.html
radio.html
radio_option.html
select.html
select_date.html
select_option.html
splitdatetime.html
splithiddendatetime.html
text.html
textarea.html
time.html
url.html

/workspace/django__django__3.1/django/http:
__init__.py
cookie.py
multipartparser.py
request.py
response.py

/workspace/django__django__3.1/django/middleware:
__init__.py
cache.py
clickjacking.py
common.py
csrf.py
gzip.py
http.py
locale.py
security.py

/workspace/django__django__3.1/django/template:
__init__.py
backends
base.py
context.py
context_processors.py
defaultfilters.py
defaulttags.py
engine.py
exceptions.py
library.py
loader.py
loader_tags.py
loaders
response.py
smartif.py
utils.py

/workspace/django__django__3.1/django/template/backends:
__init__.py
base.py
django.py
dummy.py
jinja2.py
utils.py

/workspace/django__django__3.1/django/template/loaders:
__init__.py
app_directories.py
base.py
cached.py
filesystem.py
locmem.py

/workspace/django__django__3.1/django/templatetags:
__init__.py
cache.py
i18n.py
l10n.py
static.py
tz.py

/workspace/django__django__3.1/django/test:
__init__.py
client.py
html.py
runner.py
selenium.py
signals.py
testcases.py
utils.py

/workspace/django__django__3.1/django/urls:
__init__.py
base.py
conf.py
converters.py
exceptions.py
resolvers.py
utils.py

/workspace/django__django__3.1/django/utils:
__init__.py
__pycache__
_os.py
archive.py
asyncio.py
autoreload.py
baseconv.py
cache.py
crypto.py
datastructures.py
dateformat.py
dateparse.py
dates.py
datetime_safe.py
deconstruct.py
decorators.py
deprecation.py
duration.py
encoding.py
feedgenerator.py
formats.py
functional.py
hashable.py
html.py
http.py
inspect.py
ipv6.py
itercompat.py
jslex.py
log.py
lorem_ipsum.py
module_loading.py
numberformat.py
regex_helper.py
safestring.py
termcolors.py
text.py
timesince.py
timezone.py
topological_sort.py
translation
tree.py
version.py
xmlutils.py

/workspace/django__django__3.1/django/utils/__pycache__:
__init__.cpython-36.pyc
version.cpython-36.pyc

/workspace/django__django__3.1/django/utils/translation:
__init__.py
reloader.py
template.py
trans_null.py
trans_real.py

/workspace/django__django__3.1/django/views:
__init__.py
csrf.py
debug.py
decorators
defaults.py
generic
i18n.py
static.py
templates

/workspace/django__django__3.1/django/views/decorators:
__init__.py
cache.py
clickjacking.py
csrf.py
debug.py
gzip.py
http.py
vary.py

/workspace/django__django__3.1/django/views/generic:
__init__.py
base.py
dates.py
detail.py
edit.py
list.py

/workspace/django__django__3.1/django/views/templates:
default_urlconf.html
technical_404.html
technical_500.html
technical_500.txt

/workspace/django__django__3.1/docs:
Makefile
README
_ext
_theme
conf.py
contents.txt
faq
glossary.txt
howto
index.txt
internals
intro
make.bat
man
misc
ref
releases
spelling_wordlist
topics

/workspace/django__django__3.1/docs/_ext:
djangodocs.py

/workspace/django__django__3.1/docs/_theme:
djangodocs
djangodocs-epub

/workspace/django__django__3.1/docs/_theme/djangodocs:
genindex.html
layout.html
modindex.html
search.html
static
theme.conf

/workspace/django__django__3.1/docs/_theme/djangodocs/static:
console-tabs.css
default.css
djangodocs.css
docicons-behindscenes.png
docicons-note.png
docicons-philosophy.png
docicons-warning.png
fontawesome
homepage.css
reset-fonts-grids.css

/workspace/django__django__3.1/docs/_theme/djangodocs/static/fontawesome:
LICENSE.txt
README.md
css
webfonts

/workspace/django__django__3.1/docs/_theme/djangodocs/static/fontawesome/css:
fa-brands.min.css

/workspace/django__django__3.1/docs/_theme/djangodocs/static/fontawesome/webfonts:
fa-brands-400.eot
fa-brands-400.svg
fa-brands-400.ttf
fa-brands-400.woff
fa-brands-400.woff2

/workspace/django__django__3.1/docs/_theme/djangodocs-epub:
epub-cover.html
static
theme.conf

/workspace/django__django__3.1/docs/_theme/djangodocs-epub/static:
docicons-behindscenes.png
docicons-note.png
docicons-philosophy.png
docicons-warning.png
epub.css

/workspace/django__django__3.1/docs/faq:
admin.txt
contributing.txt
general.txt
help.txt
index.txt
install.txt
models.txt
troubleshooting.txt
usage.txt

/workspace/django__django__3.1/docs/howto:
auth-remote-user.txt
custom-file-storage.txt
custom-lookups.txt
custom-management-commands.txt
custom-model-fields.txt
custom-template-tags.txt
deployment
error-reporting.txt
index.txt
initial-data.txt
jython.txt
legacy-databases.txt
outputting-csv.txt
outputting-pdf.txt
overriding-templates.txt
static-files
upgrade-version.txt
windows.txt
writing-migrations.txt

/workspace/django__django__3.1/docs/howto/deployment:
asgi
checklist.txt
index.txt
wsgi

/workspace/django__django__3.1/docs/howto/deployment/asgi:
daphne.txt
index.txt
uvicorn.txt

/workspace/django__django__3.1/docs/howto/deployment/wsgi:
apache-auth.txt
gunicorn.txt
index.txt
modwsgi.txt
uwsgi.txt

/workspace/django__django__3.1/docs/howto/static-files:
deployment.txt
index.txt

/workspace/django__django__3.1/docs/internals:
_images
contributing
deprecation.txt
git.txt
howto-release-django.txt
index.txt
mailing-lists.txt
organization.txt
release-process.txt
security.txt

/workspace/django__django__3.1/docs/internals/_images:
triage_process.graffle
triage_process.pdf
triage_process.svg

/workspace/django__django__3.1/docs/internals/contributing:
bugs-and-features.txt
committing-code.txt
index.txt
localizing.txt
new-contributors.txt
triaging-tickets.txt
writing-code
writing-documentation.txt

/workspace/django__django__3.1/docs/internals/contributing/writing-code:
coding-style.txt
index.txt
javascript.txt
submitting-patches.txt
unit-tests.txt
working-with-git.txt

/workspace/django__django__3.1/docs/intro:
_images
contributing.txt
index.txt
install.txt
overview.txt
reusable-apps.txt
tutorial01.txt
tutorial02.txt
tutorial03.txt
tutorial04.txt
tutorial05.txt
tutorial06.txt
tutorial07.txt
whatsnext.txt

/workspace/django__django__3.1/docs/intro/_images:
admin01.png
admin02.png
admin03t.png
admin04t.png
admin05t.png
admin06t.png
admin07.png
admin08t.png
admin09.png
admin10t.png
admin11t.png
admin12t.png
admin13t.png
admin14t.png

/workspace/django__django__3.1/docs/man:
django-admin.1

/workspace/django__django__3.1/docs/misc:
api-stability.txt
design-philosophies.txt
distributions.txt
index.txt

/workspace/django__django__3.1/docs/ref:
applications.txt
checks.txt
class-based-views
clickjacking.txt
contrib
csrf.txt
databases.txt
django-admin.txt
exceptions.txt
files
forms
index.txt
middleware.txt
migration-operations.txt
models
paginator.txt
request-response.txt
schema-editor.txt
settings.txt
signals.txt
template-response.txt
templates
unicode.txt
urlresolvers.txt
urls.txt
utils.txt
validators.txt
views.txt

/workspace/django__django__3.1/docs/ref/class-based-views:
base.txt
flattened-index.txt
generic-date-based.txt
generic-display.txt
generic-editing.txt
index.txt
mixins-date-based.txt
mixins-editing.txt
mixins-multiple-object.txt
mixins-simple.txt
mixins-single-object.txt
mixins.txt

/workspace/django__django__3.1/docs/ref/contrib:
admin
auth.txt
contenttypes.txt
flatpages.txt
gis
humanize.txt
index.txt
messages.txt
postgres
redirects.txt
sitemaps.txt
sites.txt
staticfiles.txt
syndication.txt

/workspace/django__django__3.1/docs/ref/contrib/admin:
_images
actions.txt
admindocs.txt
index.txt
javascript.txt

/workspace/django__django__3.1/docs/ref/contrib/admin/_images:
actions-as-modeladmin-methods.png
adding-actions-to-the-modeladmin.png
admin-actions.png
fieldsets.png
list_filter.png
raw_id_fields.png

/workspace/django__django__3.1/docs/ref/contrib/gis:
admin.txt
commands.txt
db-api.txt
deployment.txt
feeds.txt
forms-api.txt
functions.txt
gdal.txt
geoip2.txt
geoquerysets.txt
geos.txt
index.txt
install
layermapping.txt
measure.txt
model-api.txt
ogrinspect.txt
serializers.txt
sitemaps.txt
testing.txt
tutorial.txt
utils.txt

/workspace/django__django__3.1/docs/ref/contrib/gis/install:
geolibs.txt
index.txt
postgis.txt
spatialite.txt

/workspace/django__django__3.1/docs/ref/contrib/postgres:
aggregates.txt
constraints.txt
fields.txt
forms.txt
functions.txt
index.txt
indexes.txt
lookups.txt
operations.txt
search.txt
validators.txt

/workspace/django__django__3.1/docs/ref/files:
file.txt
index.txt
storage.txt
uploads.txt

/workspace/django__django__3.1/docs/ref/forms:
api.txt
fields.txt
formsets.txt
index.txt
models.txt
renderers.txt
validation.txt
widgets.txt

/workspace/django__django__3.1/docs/ref/models:
class.txt
conditional-expressions.txt
constraints.txt
database-functions.txt
expressions.txt
fields.txt
index.txt
indexes.txt
instances.txt
lookups.txt
meta.txt
options.txt
querysets.txt
relations.txt

/workspace/django__django__3.1/docs/ref/templates:
api.txt
builtins.txt
index.txt
language.txt

/workspace/django__django__3.1/docs/releases:
0.95.txt
0.96.txt
1.0-porting-guide.txt
1.0.1.txt
1.0.2.txt
1.0.txt
1.1.2.txt
1.1.3.txt
1.1.4.txt
1.1.txt
1.10.1.txt
1.10.2.txt
1.10.3.txt
1.10.4.txt
1.10.5.txt
1.10.6.txt
1.10.7.txt
1.10.8.txt
1.10.txt
1.11.1.txt
1.11.10.txt
1.11.11.txt
1.11.12.txt
1.11.13.txt
1.11.14.txt
1.11.15.txt
1.11.16.txt
1.11.17.txt
1.11.18.txt
1.11.19.txt
1.11.2.txt
1.11.20.txt
1.11.21.txt
1.11.22.txt
1.11.23.txt
1.11.24.txt
1.11.25.txt
1.11.3.txt
1.11.4.txt
1.11.5.txt
1.11.6.txt
1.11.7.txt
1.11.8.txt
1.11.9.txt
1.11.txt
1.2.1.txt
1.2.2.txt
1.2.3.txt
1.2.4.txt
1.2.5.txt
1.2.6.txt
1.2.7.txt
1.2.txt
1.3.1.txt
1.3.2.txt
1.3.3.txt
1.3.4.txt
1.3.5.txt
1.3.6.txt
1.3.7.txt
1.3.txt
1.4.1.txt
1.4.10.txt
1.4.11.txt
1.4.12.txt
1.4.13.txt
1.4.14.txt
1.4.15.txt
1.4.16.txt
1.4.17.txt
1.4.18.txt
1.4.19.txt
1.4.2.txt
1.4.20.txt
1.4.21.txt
1.4.22.txt
1.4.3.txt
1.4.4.txt
1.4.5.txt
1.4.6.txt
1.4.7.txt
1.4.8.txt
1.4.9.txt
1.4.txt
1.5.1.txt
1.5.10.txt
1.5.11.txt
1.5.12.txt
1.5.2.txt
1.5.3.txt
1.5.4.txt
1.5.5.txt
1.5.6.txt
1.5.7.txt
1.5.8.txt
1.5.9.txt
1.5.txt
1.6.1.txt
1.6.10.txt
1.6.11.txt
1.6.2.txt
1.6.3.txt
1.6.4.txt
1.6.5.txt
1.6.6.txt
1.6.7.txt
1.6.8.txt
1.6.9.txt
1.6.txt
1.7.1.txt
1.7.10.txt
1.7.11.txt
1.7.2.txt
1.7.3.txt
1.7.4.txt
1.7.5.txt
1.7.6.txt
1.7.7.txt
1.7.8.txt
1.7.9.txt
1.7.txt
1.8.1.txt
1.8.10.txt
1.8.11.txt
1.8.12.txt
1.8.13.txt
1.8.14.txt
1.8.15.txt
1.8.16.txt
1.8.17.txt
1.8.18.txt
1.8.19.txt
1.8.2.txt
1.8.3.txt
1.8.4.txt
1.8.5.txt
1.8.6.txt
1.8.7.txt
1.8.8.txt
1.8.9.txt
1.8.txt
1.9.1.txt
1.9.10.txt
1.9.11.txt
1.9.12.txt
1.9.13.txt
1.9.2.txt
1.9.3.txt
1.9.4.txt
1.9.5.txt
1.9.6.txt
1.9.7.txt
1.9.8.txt
1.9.9.txt
1.9.txt
2.0.1.txt
2.0.10.txt
2.0.11.txt
2.0.12.txt
2.0.13.txt
2.0.2.txt
2.0.3.txt
2.0.4.txt
2.0.5.txt
2.0.6.txt
2.0.7.txt
2.0.8.txt
2.0.9.txt
2.0.txt
2.1.1.txt
2.1.10.txt
2.1.11.txt
2.1.12.txt
2.1.13.txt
2.1.2.txt
2.1.3.txt
2.1.4.txt
2.1.5.txt
2.1.6.txt
2.1.7.txt
2.1.8.txt
2.1.9.txt
2.1.txt
2.2.1.txt
2.2.2.txt
2.2.3.txt
2.2.4.txt
2.2.5.txt
2.2.6.txt
2.2.txt
3.0.txt
3.1.txt
index.txt
security.txt

/workspace/django__django__3.1/docs/topics:
_images
auth
cache.txt
checks.txt
class-based-views
conditional-view-processing.txt
db
email.txt
external-packages.txt
files.txt
forms
http
i18n
index.txt
install.txt
logging.txt
migrations.txt
pagination.txt
performance.txt
security.txt
serialization.txt
settings.txt
signals.txt
signing.txt
templates.txt
testing

/workspace/django__django__3.1/docs/topics/_images:
postmortem.png
template-lines.png

/workspace/django__django__3.1/docs/topics/auth:
customizing.txt
default.txt
index.txt
passwords.txt

/workspace/django__django__3.1/docs/topics/class-based-views:
generic-display.txt
generic-editing.txt
index.txt
intro.txt
mixins.txt

/workspace/django__django__3.1/docs/topics/db:
aggregation.txt
examples
index.txt
instrumentation.txt
managers.txt
models.txt
multi-db.txt
optimization.txt
queries.txt
search.txt
sql.txt
tablespaces.txt
transactions.txt

/workspace/django__django__3.1/docs/topics/db/examples:
index.txt
many_to_many.txt
many_to_one.txt
one_to_one.txt

/workspace/django__django__3.1/docs/topics/forms:
formsets.txt
index.txt
media.txt
modelforms.txt

/workspace/django__django__3.1/docs/topics/http:
_images
decorators.txt
file-uploads.txt
generic-views.txt
index.txt
middleware.txt
sessions.txt
shortcuts.txt
urls.txt
views.txt

/workspace/django__django__3.1/docs/topics/http/_images:
middleware.pdf

/workspace/django__django__3.1/docs/topics/i18n:
formatting.txt
index.txt
timezones.txt
translation.txt

/workspace/django__django__3.1/docs/topics/testing:
_images
advanced.txt
index.txt
overview.txt
tools.txt

/workspace/django__django__3.1/docs/topics/testing/_images:
django_unittest_classes_hierarchy.graffle
django_unittest_classes_hierarchy.pdf
django_unittest_classes_hierarchy.svg

/workspace/django__django__3.1/extras:
Makefile
README.TXT
django_bash_completion

/workspace/django__django__3.1/js_tests:
admin
gis
qunit
tests.html

/workspace/django__django__3.1/js_tests/admin:
DateTimeShortcuts.test.js
RelatedObjectLookups.test.js
SelectBox.test.js
SelectFilter2.test.js
URLify.test.js
actions.test.js
core.test.js
inlines.test.js
jsi18n-mocks.test.js

/workspace/django__django__3.1/js_tests/gis:
mapwidget.test.js

/workspace/django__django__3.1/js_tests/qunit:
qunit.css
qunit.js

/workspace/django__django__3.1/scripts:
manage_translations.py
rpm-install.sh

/workspace/django__django__3.1/tests:
README.rst
absolute_url_overrides
admin_autodiscover
admin_changelist
admin_checks
admin_custom_urls
admin_default_site
admin_docs
admin_filters
admin_inlines
admin_ordering
admin_registration
admin_scripts
admin_utils
admin_views
admin_widgets
aggregation
aggregation_regress
annotations
app_loading
apps
asgi
async
auth_tests
backends
base
bash_completion
basic
builtin_server
bulk_create
cache
check_framework
conditional_processing
constraints
contenttypes_tests
context_processors
csrf_tests
custom_columns
custom_lookups
custom_managers
custom_methods
custom_migration_operations
custom_pk
datatypes
dates
datetimes
db_functions
db_typecasts
db_utils
dbshell
decorators
defer
defer_regress
delete
delete_regress
deprecation
dispatch
distinct_on_fields
empty
empty_models
expressions
expressions_case
expressions_window
extra_regress
field_deconstruction
field_defaults
field_subclassing
file_storage
file_uploads
files
filtered_relation
fixtures
fixtures_model_package
fixtures_regress
flatpages_tests
force_insert_update
foreign_object
forms_tests
from_db_value
generic_inline_admin
generic_relations
generic_relations_regress
generic_views
get_earliest_or_latest
get_object_or_404
get_or_create
gis_tests
handlers
httpwrappers
humanize_tests
i18n
import_error_package
indexes
inline_formsets
inspectdb
introspection
invalid_models_tests
known_related_objects
logging_tests
lookup
m2m_and_m2o
m2m_intermediary
m2m_multiple
m2m_recursive
m2m_regress
m2m_signals
m2m_through
m2m_through_regress
m2o_recursive
mail
managers_regress
many_to_many
many_to_one
many_to_one_null
max_lengths
messages_tests
middleware
middleware_exceptions
migrate_signals
migration_test_data_persistence
migrations
migrations2
model_enums
model_fields
model_forms
model_formsets
model_formsets_regress
model_indexes
model_inheritance
model_inheritance_regress
model_meta
model_options
model_package
model_regress
modeladmin
multiple_database
mutually_referential
nested_foreign_keys
no_models
null_fk
null_fk_ordering
null_queries
one_to_one
or_lookups
order_with_respect_to
ordering
pagination
postgres_tests
prefetch_related
project_template
properties
proxy_model_inheritance
proxy_models
queries
queryset_pickle
raw_query
redirects_tests
requests
requirements
reserved_names
resolve_url
responses
reverse_lookup
runtests.py
save_delete_hooks
schema
select_for_update
select_related
select_related_onetoone
select_related_regress
serializers
servers
sessions_tests
settings_tests
shell
shortcuts
signals
signed_cookies_tests
signing
sitemaps_tests
sites_framework
sites_tests
staticfiles_tests
str
string_lookup
swappable_models
syndication_tests
template_backends
template_loader
template_tests
templates
test_client
test_client_regress
test_exceptions
test_runner
test_runner_apps
test_sqlite.py
test_utils
timezones
transaction_hooks
transactions
unmanaged_models
update
update_only_fields
urlpatterns
urlpatterns_reverse
urls.py
user_commands
utils_tests
validation
validators
version
view_tests
wsgi

/workspace/django__django__3.1/tests/absolute_url_overrides:
__init__.py
tests.py

/workspace/django__django__3.1/tests/admin_autodiscover:
__init__.py
admin.py
models.py
tests.py

/workspace/django__django__3.1/tests/admin_changelist:
__init__.py
admin.py
models.py
test_date_hierarchy.py
tests.py
urls.py

/workspace/django__django__3.1/tests/admin_checks:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/admin_custom_urls:
__init__.py
models.py
tests.py
urls.py

/workspace/django__django__3.1/tests/admin_default_site:
__init__.py
apps.py
sites.py
tests.py

/workspace/django__django__3.1/tests/admin_docs:
__init__.py
evilfile.txt
models.py
namespace_urls.py
test_middleware.py
test_utils.py
test_views.py
tests.py
urls.py
views.py

/workspace/django__django__3.1/tests/admin_filters:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/admin_inlines:
__init__.py
admin.py
models.py
test_templates.py
tests.py
urls.py

/workspace/django__django__3.1/tests/admin_ordering:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/admin_registration:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/admin_scripts:
__init__.py
another_app_waiting_migration
app_raising_messages
app_raising_warning
app_waiting_migration
app_with_import
broken_app
complex_app
configured_dynamic_settings_manage.py
configured_settings_manage.py
custom_templates
management
simple_app
tests.py
urls.py

/workspace/django__django__3.1/tests/admin_scripts/another_app_waiting_migration:
__init__.py
migrations
models.py

/workspace/django__django__3.1/tests/admin_scripts/another_app_waiting_migration/migrations:
0001_initial.py
__init__.py

/workspace/django__django__3.1/tests/admin_scripts/app_raising_messages:
__init__.py
models.py

/workspace/django__django__3.1/tests/admin_scripts/app_raising_warning:
__init__.py
models.py

/workspace/django__django__3.1/tests/admin_scripts/app_waiting_migration:
__init__.py
migrations
models.py

/workspace/django__django__3.1/tests/admin_scripts/app_waiting_migration/migrations:
0001_initial.py
__init__.py

/workspace/django__django__3.1/tests/admin_scripts/app_with_import:
__init__.py
models.py

/workspace/django__django__3.1/tests/admin_scripts/broken_app:
__init__.py
models.py

/workspace/django__django__3.1/tests/admin_scripts/complex_app:
__init__.py
admin
management
models

/workspace/django__django__3.1/tests/admin_scripts/complex_app/admin:
__init__.py
foo.py

/workspace/django__django__3.1/tests/admin_scripts/complex_app/management:
commands

/workspace/django__django__3.1/tests/admin_scripts/complex_app/management/commands:
duplicate.py

/workspace/django__django__3.1/tests/admin_scripts/complex_app/models:
__init__.py
bar.py
foo.py

/workspace/django__django__3.1/tests/admin_scripts/custom_templates:
app_template
project_template
project_template.tgz

/workspace/django__django__3.1/tests/admin_scripts/custom_templates/app_template:
__init__.py
api.py

/workspace/django__django__3.1/tests/admin_scripts/custom_templates/project_template:
additional_dir
manage.py-tpl
project_name
ticket-18091-non-ascii-template.txt
ticket-19397-binary-file.ico

/workspace/django__django__3.1/tests/admin_scripts/custom_templates/project_template/additional_dir:
Procfile
additional_file.py
extra.py
localized.py
requirements.txt

/workspace/django__django__3.1/tests/admin_scripts/custom_templates/project_template/project_name:
__init__.py
settings.py

/workspace/django__django__3.1/tests/admin_scripts/management:
commands

/workspace/django__django__3.1/tests/admin_scripts/management/commands:
app_command.py
base_command.py
custom_startproject.py
label_command.py
noargs_command.py

/workspace/django__django__3.1/tests/admin_scripts/simple_app:
__init__.py
management
models.py

/workspace/django__django__3.1/tests/admin_scripts/simple_app/management:
commands

/workspace/django__django__3.1/tests/admin_scripts/simple_app/management/commands:
duplicate.py

/workspace/django__django__3.1/tests/admin_utils:
__init__.py
admin.py
models.py
test_logentry.py
tests.py
urls.py

/workspace/django__django__3.1/tests/admin_views:
__init__.py
admin.py
custom_has_permission_admin.py
customadmin.py
forms.py
models.py
templates
test_actions.py
test_adminsite.py
test_autocomplete_view.py
test_forms.py
test_history_view.py
test_multidb.py
test_templatetags.py
tests.py
urls.py
views.py

/workspace/django__django__3.1/tests/admin_views/templates:
admin
custom_filter_template.html

/workspace/django__django__3.1/tests/admin_views/templates/admin:
admin_views
base_site.html

/workspace/django__django__3.1/tests/admin_views/templates/admin/admin_views:
article

/workspace/django__django__3.1/tests/admin_views/templates/admin/admin_views/article:
actions.html
change_form_object_tools.html
change_list_object_tools.html
change_list_results.html
date_hierarchy.html
pagination.html
prepopulated_fields_js.html
search_form.html
submit_line.html

/workspace/django__django__3.1/tests/admin_widgets:
__init__.py
models.py
test_autocomplete_widget.py
tests.py
urls.py
widgetadmin.py

/workspace/django__django__3.1/tests/aggregation:
__init__.py
models.py
test_filter_argument.py
tests.py

/workspace/django__django__3.1/tests/aggregation_regress:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/annotations:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/app_loading:
__init__.py
eggs
not_installed
tests.py

/workspace/django__django__3.1/tests/app_loading/eggs:
brokenapp.egg
modelapp.egg
nomodelapp.egg
omelet.egg

/workspace/django__django__3.1/tests/app_loading/not_installed:
__init__.py
models.py

/workspace/django__django__3.1/tests/apps:
__init__.py
apps.py
default_config_app
models.py
namespace_package_base
namespace_package_other_base
tests.py

/workspace/django__django__3.1/tests/apps/default_config_app:
__init__.py
apps.py

/workspace/django__django__3.1/tests/apps/namespace_package_base:
nsapp

/workspace/django__django__3.1/tests/apps/namespace_package_base/nsapp:
apps.py

/workspace/django__django__3.1/tests/apps/namespace_package_other_base:
nsapp

/workspace/django__django__3.1/tests/apps/namespace_package_other_base/nsapp:

/workspace/django__django__3.1/tests/asgi:
__init__.py
tests.py
urls.py

/workspace/django__django__3.1/tests/async:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/auth_tests:
__init__.py
backend_alias.py
client.py
common-passwords-custom.txt
fixtures
models
settings.py
templates
test_admin_multidb.py
test_auth_backends.py
test_basic.py
test_checks.py
test_context_processors.py
test_decorators.py
test_forms.py
test_handlers.py
test_hashers.py
test_management.py
test_middleware.py
test_migrations.py
test_mixins.py
test_models.py
test_password_reset_timeout_days.py
test_remote_user.py
test_signals.py
test_templates.py
test_tokens.py
test_validators.py
test_views.py
urls.py
urls_admin.py
urls_custom_user_admin.py

/workspace/django__django__3.1/tests/auth_tests/fixtures:
natural.json
regular.json

/workspace/django__django__3.1/tests/auth_tests/models:
__init__.py
custom_permissions.py
custom_user.py
invalid_models.py
is_active.py
minimal.py
no_password.py
proxy.py
uuid_pk.py
with_custom_email_field.py
with_foreign_key.py
with_integer_username.py
with_last_login_attr.py
with_many_to_many.py

/workspace/django__django__3.1/tests/auth_tests/templates:
context_processors
registration

/workspace/django__django__3.1/tests/auth_tests/templates/context_processors:
auth_attrs_access.html
auth_attrs_messages.html
auth_attrs_no_access.html
auth_attrs_perm_in_perms.html
auth_attrs_perms.html
auth_attrs_test_access.html
auth_attrs_user.html

/workspace/django__django__3.1/tests/auth_tests/templates/registration:
html_password_reset_email.html
logged_out.html
login.html
password_change_form.html
password_reset_complete.html
password_reset_confirm.html
password_reset_done.html
password_reset_email.html
password_reset_form.html
password_reset_subject.txt

/workspace/django__django__3.1/tests/backends:
__init__.py
base
models.py
mysql
oracle
postgresql
sqlite
test_ddl_references.py
test_utils.py
tests.py

/workspace/django__django__3.1/tests/backends/base:
__init__.py
test_base.py
test_creation.py
test_features.py
test_operations.py
test_schema.py

/workspace/django__django__3.1/tests/backends/mysql:
__init__.py
test_creation.py
test_features.py
test_introspection.py
test_schema.py
tests.py

/workspace/django__django__3.1/tests/backends/oracle:
__init__.py
test_creation.py
test_introspection.py
test_operations.py
tests.py

/workspace/django__django__3.1/tests/backends/postgresql:
__init__.py
test_creation.py
test_introspection.py
test_server_side_cursors.py
tests.py

/workspace/django__django__3.1/tests/backends/sqlite:
__init__.py
test_introspection.py
tests.py

/workspace/django__django__3.1/tests/base:
__init__.py
models.py

/workspace/django__django__3.1/tests/bash_completion:
__init__.py
management
tests.py

/workspace/django__django__3.1/tests/bash_completion/management:
commands

/workspace/django__django__3.1/tests/bash_completion/management/commands:
test_command.py

/workspace/django__django__3.1/tests/basic:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/builtin_server:
__init__.py
tests.py

/workspace/django__django__3.1/tests/bulk_create:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/cache:
__init__.py
closeable_cache.py
liberal_backend.py
models.py
tests.py

/workspace/django__django__3.1/tests/check_framework:
__init__.py
models.py
test_caches.py
test_database.py
test_model_checks.py
test_model_field_deprecation.py
test_multi_db.py
test_security.py
test_templates.py
test_translation.py
test_urls.py
tests.py
urls

/workspace/django__django__3.1/tests/check_framework/urls:
__init__.py
bad_error_handlers.py
bad_error_handlers_invalid_path.py
beginning_with_slash.py
contains_tuple.py
good_error_handlers.py
include_contains_tuple.py
include_with_dollar.py
name_with_colon.py
no_warnings.py
no_warnings_i18n.py
non_unique_namespaces.py
path_compatibility
unique_namespaces.py
warning_in_include.py

/workspace/django__django__3.1/tests/check_framework/urls/path_compatibility:
__init__.py
beginning_with_caret.py
contains_re_named_group.py
ending_with_dollar.py

/workspace/django__django__3.1/tests/conditional_processing:
__init__.py
tests.py
urls.py
views.py

/workspace/django__django__3.1/tests/constraints:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/contenttypes_tests:
__init__.py
models.py
operations_migrations
test_checks.py
test_fields.py
test_management.py
test_models.py
test_operations.py
test_order_with_respect_to.py
test_views.py
urls.py

/workspace/django__django__3.1/tests/contenttypes_tests/operations_migrations:
0001_initial.py
0002_rename_foo.py
__init__.py

/workspace/django__django__3.1/tests/context_processors:
__init__.py
models.py
templates
tests.py
urls.py
views.py

/workspace/django__django__3.1/tests/context_processors/templates:
context_processors

/workspace/django__django__3.1/tests/context_processors/templates/context_processors:
debug.html
request_attrs.html

/workspace/django__django__3.1/tests/csrf_tests:
__init__.py
csrf_token_error_handler_urls.py
test_context_processor.py
tests.py
views.py

/workspace/django__django__3.1/tests/custom_columns:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/custom_lookups:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/custom_managers:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/custom_methods:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/custom_migration_operations:
__init__.py
more_operations.py
operations.py

/workspace/django__django__3.1/tests/custom_pk:
__init__.py
fields.py
models.py
tests.py

/workspace/django__django__3.1/tests/datatypes:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/dates:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/datetimes:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/db_functions:
__init__.py
comparison
datetime
math
migrations
models.py
tests.py
text
window

/workspace/django__django__3.1/tests/db_functions/comparison:
__init__.py
test_cast.py
test_coalesce.py
test_greatest.py
test_least.py
test_nullif.py

/workspace/django__django__3.1/tests/db_functions/datetime:
__init__.py
test_extract_trunc.py
test_now.py

/workspace/django__django__3.1/tests/db_functions/math:
__init__.py
test_abs.py
test_acos.py
test_asin.py
test_atan.py
test_atan2.py
test_ceil.py
test_cos.py
test_cot.py
test_degrees.py
test_exp.py
test_floor.py
test_ln.py
test_log.py
test_mod.py
test_pi.py
test_power.py
test_radians.py
test_round.py
test_sign.py
test_sin.py
test_sqrt.py
test_tan.py

/workspace/django__django__3.1/tests/db_functions/migrations:
0001_setup_extensions.py
0002_create_test_models.py
__init__.py

/workspace/django__django__3.1/tests/db_functions/text:
__init__.py
test_chr.py
test_concat.py
test_left.py
test_length.py
test_lower.py
test_md5.py
test_ord.py
test_pad.py
test_repeat.py
test_replace.py
test_reverse.py
test_right.py
test_sha1.py
test_sha224.py
test_sha256.py
test_sha384.py
test_sha512.py
test_strindex.py
test_substr.py
test_trim.py
test_upper.py

/workspace/django__django__3.1/tests/db_functions/window:
__init__.py
test_validation.py

/workspace/django__django__3.1/tests/db_typecasts:
__init__.py
tests.py

/workspace/django__django__3.1/tests/db_utils:
__init__.py
tests.py

/workspace/django__django__3.1/tests/dbshell:
__init__.py
test_mysql.py
test_oracle.py
test_postgresql.py

/workspace/django__django__3.1/tests/decorators:
__init__.py
tests.py

/workspace/django__django__3.1/tests/defer:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/defer_regress:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/delete:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/delete_regress:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/deprecation:
__init__.py
tests.py

/workspace/django__django__3.1/tests/dispatch:
__init__.py
tests.py

/workspace/django__django__3.1/tests/distinct_on_fields:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/empty:
__init__.py
models.py
no_models
tests.py

/workspace/django__django__3.1/tests/empty/no_models:
__init__.py

/workspace/django__django__3.1/tests/empty_models:
__init__.py
models.py
test_commands.py

/workspace/django__django__3.1/tests/expressions:
__init__.py
models.py
test_deprecation.py
test_queryset_values.py
tests.py

/workspace/django__django__3.1/tests/expressions_case:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/expressions_window:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/extra_regress:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/field_deconstruction:
__init__.py
tests.py

/workspace/django__django__3.1/tests/field_defaults:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/field_subclassing:
__init__.py
fields.py
tests.py

/workspace/django__django__3.1/tests/file_storage:
__init__.py
models.py
test_generate_filename.py
tests.py
urls.py

/workspace/django__django__3.1/tests/file_uploads:
__init__.py
models.py
tests.py
uploadhandler.py
urls.py
views.py

/workspace/django__django__3.1/tests/files:
__init__.py
brokenimg.png
magic.png
test.png
test.webp
test1.png
tests.py

/workspace/django__django__3.1/tests/filtered_relation:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/fixtures:
__init__.py
fixtures
models.py
tests.py

/workspace/django__django__3.1/tests/fixtures/fixtures:
db_fixture_1.default.json
db_fixture_2.default.json.gz
db_fixture_3.nosuchdb.json
fixture1.json
fixture2.json
fixture2.xml
fixture3.xml
fixture4.json.zip
fixture5.json.gz
fixture5.json.zip
fixture6.json
fixture7.xml
fixture8.json
fixture9.xml
fixture_with[special]chars.json
forward_reference_fk.json
forward_reference_m2m.json
invalid.json
null_character_in_field_value.json

/workspace/django__django__3.1/tests/fixtures_model_package:
__init__.py
fixtures
models
tests.py

/workspace/django__django__3.1/tests/fixtures_model_package/fixtures:
fixture1.json
fixture2.json
fixture2.xml

/workspace/django__django__3.1/tests/fixtures_model_package/models:
__init__.py

/workspace/django__django__3.1/tests/fixtures_regress:
__init__.py
fixtures
fixtures_1
fixtures_2
models.py
tests.py

/workspace/django__django__3.1/tests/fixtures_regress/fixtures:
absolute.json
animal.xml
bad_fix.ture1.unkn
bad_fixture2.xml
big-fixture.json
empty.json
feature.json
forward_ref.json
forward_ref_bad_data.json
forward_ref_lookup.json
m2mtoself.json
model-inheritance.json
nk-inheritance.json
nk-inheritance2.xml
non_natural_1.json
non_natural_2.xml
path.containing.dots.json
pretty.xml
sequence.json
sequence_extra.json
sequence_extra_xml.xml
special-article.json
thingy.json

/workspace/django__django__3.1/tests/fixtures_regress/fixtures_1:
forward_ref_1.json
inner

/workspace/django__django__3.1/tests/fixtures_regress/fixtures_1/inner:
absolute.json

/workspace/django__django__3.1/tests/fixtures_regress/fixtures_2:
forward_ref_2.json

/workspace/django__django__3.1/tests/flatpages_tests:
__init__.py
settings.py
templates
test_csrf.py
test_forms.py
test_middleware.py
test_models.py
test_sitemaps.py
test_templatetags.py
test_views.py
urls.py

/workspace/django__django__3.1/tests/flatpages_tests/templates:
flatpages
registration

/workspace/django__django__3.1/tests/flatpages_tests/templates/flatpages:
default.html

/workspace/django__django__3.1/tests/flatpages_tests/templates/registration:
login.html

/workspace/django__django__3.1/tests/force_insert_update:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/foreign_object:
__init__.py
models
test_agnostic_order_trimjoin.py
test_empty_join.py
test_forms.py
tests.py

/workspace/django__django__3.1/tests/foreign_object/models:
__init__.py
article.py
customers.py
empty_join.py
person.py

/workspace/django__django__3.1/tests/forms_tests:
__init__.py
field_tests
jinja2
models.py
templates
tests
urls.py
views.py
widget_tests

/workspace/django__django__3.1/tests/forms_tests/field_tests:
__init__.py
filepathfield_test_dir
test_base.py
test_booleanfield.py
test_charfield.py
test_choicefield.py
test_combofield.py
test_datefield.py
test_datetimefield.py
test_decimalfield.py
test_durationfield.py
test_emailfield.py
test_filefield.py
test_filepathfield.py
test_floatfield.py
test_genericipaddressfield.py
test_imagefield.py
test_integerfield.py
test_multiplechoicefield.py
test_multivaluefield.py
test_nullbooleanfield.py
test_regexfield.py
test_slugfield.py
test_splitdatetimefield.py
test_timefield.py
test_typedchoicefield.py
test_typedmultiplechoicefield.py
test_urlfield.py
test_uuidfield.py

/workspace/django__django__3.1/tests/forms_tests/field_tests/filepathfield_test_dir:
README
__init__.py
a.py
ab.py
b.py
c
h
j

/workspace/django__django__3.1/tests/forms_tests/field_tests/filepathfield_test_dir/c:
__init__.py
d.py
e.py
f

/workspace/django__django__3.1/tests/forms_tests/field_tests/filepathfield_test_dir/c/f:
__init__.py
g.py

/workspace/django__django__3.1/tests/forms_tests/field_tests/filepathfield_test_dir/h:
__init__.py

/workspace/django__django__3.1/tests/forms_tests/field_tests/filepathfield_test_dir/j:
__init__.py

/workspace/django__django__3.1/tests/forms_tests/jinja2:
forms_tests

/workspace/django__django__3.1/tests/forms_tests/jinja2/forms_tests:
custom_widget.html

/workspace/django__django__3.1/tests/forms_tests/templates:
forms_tests

/workspace/django__django__3.1/tests/forms_tests/templates/forms_tests:
article_form.html
custom_widget.html

/workspace/django__django__3.1/tests/forms_tests/tests:
__init__.py
filepath_test_files
test_error_messages.py
test_forms.py
test_formsets.py
test_i18n.py
test_input_formats.py
test_media.py
test_renderers.py
test_utils.py
test_validators.py
test_widgets.py
tests.py

/workspace/django__django__3.1/tests/forms_tests/tests/filepath_test_files:
1x1.bmp
1x1.png
directory
fake-image.jpg
real-text-file.txt

/workspace/django__django__3.1/tests/forms_tests/tests/filepath_test_files/directory:

/workspace/django__django__3.1/tests/forms_tests/widget_tests:
__init__.py
base.py
test_checkboxinput.py
test_checkboxselectmultiple.py
test_clearablefileinput.py
test_dateinput.py
test_datetimeinput.py
test_fileinput.py
test_hiddeninput.py
test_input.py
test_multiplehiddeninput.py
test_multiwidget.py
test_nullbooleanselect.py
test_numberinput.py
test_passwordinput.py
test_radioselect.py
test_select.py
test_selectdatewidget.py
test_selectmultiple.py
test_splitdatetimewidget.py
test_splithiddendatetimewidget.py
test_textarea.py
test_textinput.py
test_timeinput.py
test_widget.py

/workspace/django__django__3.1/tests/from_db_value:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/generic_inline_admin:
__init__.py
admin.py
models.py
tests.py
urls.py

/workspace/django__django__3.1/tests/generic_relations:
__init__.py
models.py
test_forms.py
tests.py

/workspace/django__django__3.1/tests/generic_relations_regress:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/generic_views:
__init__.py
forms.py
jinja2
models.py
templates
test_base.py
test_dates.py
test_detail.py
test_edit.py
test_list.py
urls.py
views.py

/workspace/django__django__3.1/tests/generic_views/jinja2:
generic_views

/workspace/django__django__3.1/tests/generic_views/jinja2/generic_views:
using.html

/workspace/django__django__3.1/tests/generic_views/templates:
generic_views
registration

/workspace/django__django__3.1/tests/generic_views/templates/generic_views:
about.html
apple_detail.html
artist_detail.html
artist_form.html
author_confirm_delete.html
author_detail.html
author_form.html
author_list.html
author_objects.html
author_view.html
book_archive.html
book_archive_day.html
book_archive_month.html
book_archive_week.html
book_archive_year.html
book_detail.html
book_list.html
confirm_delete.html
detail.html
form.html
list.html
page_template.html
robots.txt
using.html

/workspace/django__django__3.1/tests/generic_views/templates/registration:
login.html

/workspace/django__django__3.1/tests/get_earliest_or_latest:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/get_object_or_404:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/get_or_create:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/gis_tests:
__init__.py
admin.py
data
distapp
gdal_tests
geo3d
geoadmin
geoapp
geogapp
geos_tests
gis_migrations
inspectapp
layermap
maps
models.py
rasterapp
relatedapp
test_data.py
test_fields.py
test_geoforms.py
test_geoip2.py
test_gis_tests_utils.py
test_measure.py
test_ptr.py
test_spatialrefsys.py
tests.py
utils.py

/workspace/django__django__3.1/tests/gis_tests/data:
__init__.py
ch-city
cities
counties
gas_lines
geometries.json
has_nulls
interstates
invalid
rasters
test_point
test_poly
test_vrt
texas.dbf

/workspace/django__django__3.1/tests/gis_tests/data/ch-city:
ch-city.dbf
ch-city.prj
ch-city.shp
ch-city.shx

/workspace/django__django__3.1/tests/gis_tests/data/cities:
cities.dbf
cities.prj
cities.shp
cities.shx

/workspace/django__django__3.1/tests/gis_tests/data/counties:
counties.dbf
counties.shp
counties.shx

/workspace/django__django__3.1/tests/gis_tests/data/gas_lines:
gas_leitung.dbf
gas_leitung.prj
gas_leitung.shp
gas_leitung.shx

/workspace/django__django__3.1/tests/gis_tests/data/has_nulls:
has_nulls.geojson

/workspace/django__django__3.1/tests/gis_tests/data/interstates:
interstates.dbf
interstates.prj
interstates.shp
interstates.shx

/workspace/django__django__3.1/tests/gis_tests/data/invalid:
emptypoints.dbf
emptypoints.shp
emptypoints.shx

/workspace/django__django__3.1/tests/gis_tests/data/rasters:
__init__.py
raster.numpy.txt
raster.tif
textrasters.py

/workspace/django__django__3.1/tests/gis_tests/data/test_point:
test_point.dbf
test_point.prj
test_point.shp
test_point.shx

/workspace/django__django__3.1/tests/gis_tests/data/test_poly:
test_poly.dbf
test_poly.prj
test_poly.shp
test_poly.shx

/workspace/django__django__3.1/tests/gis_tests/data/test_vrt:
test_vrt.csv
test_vrt.vrt

/workspace/django__django__3.1/tests/gis_tests/distapp:
__init__.py
fixtures
models.py
tests.py

/workspace/django__django__3.1/tests/gis_tests/distapp/fixtures:
initial.json

/workspace/django__django__3.1/tests/gis_tests/gdal_tests:
__init__.py
test_driver.py
test_ds.py
test_envelope.py
test_geom.py
test_raster.py
test_srs.py

/workspace/django__django__3.1/tests/gis_tests/geo3d:
__init__.py
models.py
tests.py
views.py

/workspace/django__django__3.1/tests/gis_tests/geoadmin:
__init__.py
admin.py
models.py
tests.py
urls.py

/workspace/django__django__3.1/tests/gis_tests/geoapp:
__init__.py
feeds.py
fixtures
models.py
sitemaps.py
test_expressions.py
test_feeds.py
test_functions.py
test_regress.py
test_serializers.py
test_sitemaps.py
tests.py
urls.py

/workspace/django__django__3.1/tests/gis_tests/geoapp/fixtures:
initial.json.gz

/workspace/django__django__3.1/tests/gis_tests/geogapp:
__init__.py
fixtures
models.py
tests.py

/workspace/django__django__3.1/tests/gis_tests/geogapp/fixtures:
initial.json

/workspace/django__django__3.1/tests/gis_tests/geos_tests:
__init__.py
test_coordseq.py
test_geos.py
test_geos_mutation.py
test_io.py
test_mutable_list.py

/workspace/django__django__3.1/tests/gis_tests/gis_migrations:
__init__.py
migrations
test_commands.py
test_operations.py

/workspace/django__django__3.1/tests/gis_tests/gis_migrations/migrations:
0001_initial.py
__init__.py

/workspace/django__django__3.1/tests/gis_tests/inspectapp:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/gis_tests/layermap:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/gis_tests/maps:
__init__.py

/workspace/django__django__3.1/tests/gis_tests/rasterapp:
__init__.py
models.py
test_rasterfield.py

/workspace/django__django__3.1/tests/gis_tests/relatedapp:
__init__.py
fixtures
models.py
tests.py

/workspace/django__django__3.1/tests/gis_tests/relatedapp/fixtures:
initial.json

/workspace/django__django__3.1/tests/handlers:
__init__.py
templates
test_exception.py
tests.py
tests_custom_error_handlers.py
urls.py
views.py

/workspace/django__django__3.1/tests/handlers/templates:
test_handler.html

/workspace/django__django__3.1/tests/httpwrappers:
__init__.py
abc.txt
tests.py

/workspace/django__django__3.1/tests/humanize_tests:
__init__.py
tests.py

/workspace/django__django__3.1/tests/i18n:
__init__.py
commands
contenttypes
exclude
forms.py
models.py
other
other2
patterns
project_dir
resolution
sampleproject
territorial_fallback
test_compilation.py
test_extraction.py
test_management.py
test_percents.py
tests.py
urls.py
urls_default_unprefixed.py
utils.py

/workspace/django__django__3.1/tests/i18n/commands:
__init__.py
app_with_locale
code.sample
ignore_dir
javascript.js
locale
media_root
not_utf8.sample
someapp
static
templates

/workspace/django__django__3.1/tests/i18n/commands/app_with_locale:
locale

/workspace/django__django__3.1/tests/i18n/commands/app_with_locale/locale:
ru

/workspace/django__django__3.1/tests/i18n/commands/app_with_locale/locale/ru:
LC_MESSAGES

/workspace/django__django__3.1/tests/i18n/commands/app_with_locale/locale/ru/LC_MESSAGES:
django.po

/workspace/django__django__3.1/tests/i18n/commands/ignore_dir:
ignored.html

/workspace/django__django__3.1/tests/i18n/commands/locale:
en
es_AR
fr
hr
ja
ko
pt_BR
ru
xxx

/workspace/django__django__3.1/tests/i18n/commands/locale/en:
LC_MESSAGES

/workspace/django__django__3.1/tests/i18n/commands/locale/en/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/tests/i18n/commands/locale/es_AR:
LC_MESSAGES

/workspace/django__django__3.1/tests/i18n/commands/locale/es_AR/LC_MESSAGES:
django.po

/workspace/django__django__3.1/tests/i18n/commands/locale/fr:
LC_MESSAGES

/workspace/django__django__3.1/tests/i18n/commands/locale/fr/LC_MESSAGES:
django.po

/workspace/django__django__3.1/tests/i18n/commands/locale/hr:
LC_MESSAGES

/workspace/django__django__3.1/tests/i18n/commands/locale/hr/LC_MESSAGES:
django.po

/workspace/django__django__3.1/tests/i18n/commands/locale/ja:
LC_MESSAGES

/workspace/django__django__3.1/tests/i18n/commands/locale/ja/LC_MESSAGES:
django.po

/workspace/django__django__3.1/tests/i18n/commands/locale/ko:
LC_MESSAGES

/workspace/django__django__3.1/tests/i18n/commands/locale/ko/LC_MESSAGES:
django.po

/workspace/django__django__3.1/tests/i18n/commands/locale/pt_BR:
LC_MESSAGES

/workspace/django__django__3.1/tests/i18n/commands/locale/pt_BR/LC_MESSAGES:
django.pristine

/workspace/django__django__3.1/tests/i18n/commands/locale/ru:
LC_MESSAGES

/workspace/django__django__3.1/tests/i18n/commands/locale/ru/LC_MESSAGES:
django.po

/workspace/django__django__3.1/tests/i18n/commands/locale/xxx:
LC_MESSAGES

/workspace/django__django__3.1/tests/i18n/commands/locale/xxx/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/tests/i18n/commands/media_root:
media_ignored.html

/workspace/django__django__3.1/tests/i18n/commands/someapp:
static

/workspace/django__django__3.1/tests/i18n/commands/someapp/static:
javascript.js

/workspace/django__django__3.1/tests/i18n/commands/static:
javascript_ignored.js
static_ignored.html

/workspace/django__django__3.1/tests/i18n/commands/templates:
comments.thtml
empty.html
plural.djtpl
subdir
template_with_error.tpl
test.html
xxx_ignored.html

/workspace/django__django__3.1/tests/i18n/commands/templates/subdir:
ignored.html

/workspace/django__django__3.1/tests/i18n/contenttypes:
__init__.py
locale
tests.py

/workspace/django__django__3.1/tests/i18n/contenttypes/locale:
en
fr

/workspace/django__django__3.1/tests/i18n/contenttypes/locale/en:
LC_MESSAGES

/workspace/django__django__3.1/tests/i18n/contenttypes/locale/en/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/tests/i18n/contenttypes/locale/fr:
LC_MESSAGES

/workspace/django__django__3.1/tests/i18n/contenttypes/locale/fr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/tests/i18n/exclude:
__init__.py
canned_locale

/workspace/django__django__3.1/tests/i18n/exclude/canned_locale:
en
fr
it

/workspace/django__django__3.1/tests/i18n/exclude/canned_locale/en:
LC_MESSAGES

/workspace/django__django__3.1/tests/i18n/exclude/canned_locale/en/LC_MESSAGES:
django.po

/workspace/django__django__3.1/tests/i18n/exclude/canned_locale/fr:
LC_MESSAGES

/workspace/django__django__3.1/tests/i18n/exclude/canned_locale/fr/LC_MESSAGES:
django.po

/workspace/django__django__3.1/tests/i18n/exclude/canned_locale/it:
LC_MESSAGES

/workspace/django__django__3.1/tests/i18n/exclude/canned_locale/it/LC_MESSAGES:
django.po

/workspace/django__django__3.1/tests/i18n/other:
__init__.py
locale

/workspace/django__django__3.1/tests/i18n/other/locale:
__init__.py
de
fr

/workspace/django__django__3.1/tests/i18n/other/locale/de:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/tests/i18n/other/locale/de/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/tests/i18n/other/locale/fr:
LC_MESSAGES
__init__.py
formats.py

/workspace/django__django__3.1/tests/i18n/other/locale/fr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/tests/i18n/other2:
__init__.py
locale

/workspace/django__django__3.1/tests/i18n/other2/locale:
__init__.py
de

/workspace/django__django__3.1/tests/i18n/other2/locale/de:
__init__.py
formats.py

/workspace/django__django__3.1/tests/i18n/patterns:
__init__.py
locale
templates
tests.py
urls

/workspace/django__django__3.1/tests/i18n/patterns/locale:
en
nl
pt_BR

/workspace/django__django__3.1/tests/i18n/patterns/locale/en:
LC_MESSAGES

/workspace/django__django__3.1/tests/i18n/patterns/locale/en/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/tests/i18n/patterns/locale/nl:
LC_MESSAGES

/workspace/django__django__3.1/tests/i18n/patterns/locale/nl/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/tests/i18n/patterns/locale/pt_BR:
LC_MESSAGES

/workspace/django__django__3.1/tests/i18n/patterns/locale/pt_BR/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/tests/i18n/patterns/templates:
404.html
dummy.html

/workspace/django__django__3.1/tests/i18n/patterns/urls:
__init__.py
default.py
disabled.py
included.py
namespace.py
path_unused.py
wrong.py
wrong_namespace.py

/workspace/django__django__3.1/tests/i18n/project_dir:
__init__.py
app_no_locale
app_with_locale
project_locale

/workspace/django__django__3.1/tests/i18n/project_dir/app_no_locale:
__init__.py
models.py

/workspace/django__django__3.1/tests/i18n/project_dir/app_with_locale:
__init__.py
locale
models.py

/workspace/django__django__3.1/tests/i18n/project_dir/app_with_locale/locale:

/workspace/django__django__3.1/tests/i18n/project_dir/project_locale:

/workspace/django__django__3.1/tests/i18n/resolution:
__init__.py
locale

/workspace/django__django__3.1/tests/i18n/resolution/locale:
de

/workspace/django__django__3.1/tests/i18n/resolution/locale/de:
LC_MESSAGES

/workspace/django__django__3.1/tests/i18n/resolution/locale/de/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/tests/i18n/sampleproject:
locale
manage.py
sampleproject
templates
update_catalogs.py

/workspace/django__django__3.1/tests/i18n/sampleproject/locale:
fr

/workspace/django__django__3.1/tests/i18n/sampleproject/locale/fr:
LC_MESSAGES

/workspace/django__django__3.1/tests/i18n/sampleproject/locale/fr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/tests/i18n/sampleproject/sampleproject:
__init__.py
settings.py

/workspace/django__django__3.1/tests/i18n/sampleproject/templates:
percents.html

/workspace/django__django__3.1/tests/i18n/territorial_fallback:
__init__.py
locale

/workspace/django__django__3.1/tests/i18n/territorial_fallback/locale:
de
de_DE

/workspace/django__django__3.1/tests/i18n/territorial_fallback/locale/de:
LC_MESSAGES

/workspace/django__django__3.1/tests/i18n/territorial_fallback/locale/de/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/tests/i18n/territorial_fallback/locale/de_DE:
LC_MESSAGES

/workspace/django__django__3.1/tests/i18n/territorial_fallback/locale/de_DE/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/tests/import_error_package:
__init__.py

/workspace/django__django__3.1/tests/indexes:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/inline_formsets:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/inspectdb:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/introspection:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/invalid_models_tests:
__init__.py
test_backend_specific.py
test_custom_fields.py
test_deprecated_fields.py
test_models.py
test_ordinary_fields.py
test_relative_fields.py

/workspace/django__django__3.1/tests/known_related_objects:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/logging_tests:
__init__.py
logconfig.py
tests.py
urls.py
urls_i18n.py
views.py

/workspace/django__django__3.1/tests/lookup:
__init__.py
models.py
test_decimalfield.py
test_lookups.py
test_timefield.py
tests.py

/workspace/django__django__3.1/tests/m2m_and_m2o:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/m2m_intermediary:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/m2m_multiple:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/m2m_recursive:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/m2m_regress:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/m2m_signals:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/m2m_through:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/m2m_through_regress:
__init__.py
fixtures
models.py
test_multitable.py
tests.py

/workspace/django__django__3.1/tests/m2m_through_regress/fixtures:
m2m_through.json

/workspace/django__django__3.1/tests/m2o_recursive:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/mail:
__init__.py
attachments
custombackend.py
test_sendtestemail.py
tests.py

/workspace/django__django__3.1/tests/mail/attachments:
file.eml
file.png
file.txt
file_png
file_png.txt
file_txt
file_txt.png

/workspace/django__django__3.1/tests/managers_regress:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/many_to_many:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/many_to_one:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/many_to_one_null:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/max_lengths:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/messages_tests:
__init__.py
base.py
test_api.py
test_cookie.py
test_fallback.py
test_middleware.py
test_mixins.py
test_session.py
urls.py

/workspace/django__django__3.1/tests/middleware:
__init__.py
cond_get_urls.py
extra_urls.py
test_security.py
tests.py
urls.py
views.py

/workspace/django__django__3.1/tests/middleware_exceptions:
__init__.py
middleware.py
tests.py
urls.py
views.py

/workspace/django__django__3.1/tests/migrate_signals:
__init__.py
custom_migrations
models.py
tests.py

/workspace/django__django__3.1/tests/migrate_signals/custom_migrations:
0001_initial.py
__init__.py

/workspace/django__django__3.1/tests/migration_test_data_persistence:
__init__.py
migrations
models.py
tests.py

/workspace/django__django__3.1/tests/migration_test_data_persistence/migrations:
0001_initial.py
0002_add_book.py
__init__.py

/workspace/django__django__3.1/tests/migrations:
__init__.py
deprecated_field_migrations
faulty_migrations
migrations_test_apps
models.py
related_models_app
routers.py
test_add_many_to_many_field_initial
test_auto_now_add
test_autodetector.py
test_base.py
test_commands.py
test_deprecated_fields.py
test_exceptions.py
test_executor.py
test_graph.py
test_loader.py
test_migrations
test_migrations_atomic_operation
test_migrations_backwards_deps_1
test_migrations_bad_pyc
test_migrations_clashing_prefix
test_migrations_conflict
test_migrations_custom_user
test_migrations_empty
test_migrations_fake_split_initial
test_migrations_first
test_migrations_initial_false
test_migrations_no_ancestor
test_migrations_no_changes
test_migrations_no_default
test_migrations_no_init
test_migrations_no_operations
test_migrations_non_atomic
test_migrations_order
test_migrations_plan
test_migrations_private
test_migrations_run_before
test_migrations_squashed
test_migrations_squashed_complex
test_migrations_squashed_complex_multi_apps
test_migrations_squashed_erroneous
test_migrations_squashed_extra
test_migrations_squashed_ref_squashed
test_migrations_unmigdep
test_multidb.py
test_operations.py
test_optimizer.py
test_questioner.py
test_state.py
test_writer.py

/workspace/django__django__3.1/tests/migrations/deprecated_field_migrations:
0001_initial.py
0002_remove_ipaddressfield_ip.py
__init__.py

/workspace/django__django__3.1/tests/migrations/faulty_migrations:
__init__.py
file.py
namespace

/workspace/django__django__3.1/tests/migrations/faulty_migrations/namespace:
foo

/workspace/django__django__3.1/tests/migrations/faulty_migrations/namespace/foo:
__init__.py

/workspace/django__django__3.1/tests/migrations/migrations_test_apps:
__init__.py
alter_fk
conflicting_app_with_dependencies
lookuperror_a
lookuperror_b
lookuperror_c
migrated_app
migrated_unapplied_app
mutate_state_a
mutate_state_b
normal
unmigrated_app
unmigrated_app_simple
unmigrated_app_syncdb
unspecified_app_with_conflict
with_package_model
without_init_file

/workspace/django__django__3.1/tests/migrations/migrations_test_apps/alter_fk:
__init__.py
author_app
book_app

/workspace/django__django__3.1/tests/migrations/migrations_test_apps/alter_fk/author_app:
__init__.py
migrations

/workspace/django__django__3.1/tests/migrations/migrations_test_apps/alter_fk/author_app/migrations:
0001_initial.py
0002_alter_id.py
__init__.py

/workspace/django__django__3.1/tests/migrations/migrations_test_apps/alter_fk/book_app:
__init__.py
migrations

/workspace/django__django__3.1/tests/migrations/migrations_test_apps/alter_fk/book_app/migrations:
0001_initial.py
__init__.py

/workspace/django__django__3.1/tests/migrations/migrations_test_apps/conflicting_app_with_dependencies:
__init__.py
migrations

/workspace/django__django__3.1/tests/migrations/migrations_test_apps/conflicting_app_with_dependencies/migrations:
0001_initial.py
0002_conflicting_second.py
0002_second.py
__init__.py

/workspace/django__django__3.1/tests/migrations/migrations_test_apps/lookuperror_a:
__init__.py
migrations
models.py

/workspace/django__django__3.1/tests/migrations/migrations_test_apps/lookuperror_a/migrations:
0001_initial.py
0002_a2.py
0003_a3.py
0004_a4.py
__init__.py

/workspace/django__django__3.1/tests/migrations/migrations_test_apps/lookuperror_b:
__init__.py
migrations
models.py

/workspace/django__django__3.1/tests/migrations/migrations_test_apps/lookuperror_b/migrations:
0001_initial.py
0002_b2.py
0003_b3.py
__init__.py

/workspace/django__django__3.1/tests/migrations/migrations_test_apps/lookuperror_c:
__init__.py
migrations
models.py

/workspace/django__django__3.1/tests/migrations/migrations_test_apps/lookuperror_c/migrations:
0001_initial.py
0002_c2.py
0003_c3.py
__init__.py

/workspace/django__django__3.1/tests/migrations/migrations_test_apps/migrated_app:
__init__.py
migrations
models.py

/workspace/django__django__3.1/tests/migrations/migrations_test_apps/migrated_app/migrations:
0001_initial.py
__init__.py

/workspace/django__django__3.1/tests/migrations/migrations_test_apps/migrated_unapplied_app:
__init__.py
migrations
models.py

/workspace/django__django__3.1/tests/migrations/migrations_test_apps/migrated_unapplied_app/migrations:
0001_initial.py
__init__.py

/workspace/django__django__3.1/tests/migrations/migrations_test_apps/mutate_state_a:
__init__.py
migrations

/workspace/django__django__3.1/tests/migrations/migrations_test_apps/mutate_state_a/migrations:
0001_initial.py
__init__.py

/workspace/django__django__3.1/tests/migrations/migrations_test_apps/mutate_state_b:
__init__.py
migrations

/workspace/django__django__3.1/tests/migrations/migrations_test_apps/mutate_state_b/migrations:
0001_initial.py
0002_add_field.py
__init__.py

/workspace/django__django__3.1/tests/migrations/migrations_test_apps/normal:
__init__.py

/workspace/django__django__3.1/tests/migrations/migrations_test_apps/unmigrated_app:
__init__.py
models.py

/workspace/django__django__3.1/tests/migrations/migrations_test_apps/unmigrated_app_simple:
__init__.py
models.py

/workspace/django__django__3.1/tests/migrations/migrations_test_apps/unmigrated_app_syncdb:
__init__.py
models.py

/workspace/django__django__3.1/tests/migrations/migrations_test_apps/unspecified_app_with_conflict:
__init__.py
migrations
models.py

/workspace/django__django__3.1/tests/migrations/migrations_test_apps/unspecified_app_with_conflict/migrations:
0001_initial.py
0002_conflicting_second.py
0002_second.py
__init__.py

/workspace/django__django__3.1/tests/migrations/migrations_test_apps/with_package_model:
__init__.py
models

/workspace/django__django__3.1/tests/migrations/migrations_test_apps/with_package_model/models:
__init__.py

/workspace/django__django__3.1/tests/migrations/migrations_test_apps/without_init_file:
__init__.py
migrations

/workspace/django__django__3.1/tests/migrations/migrations_test_apps/without_init_file/migrations:

/workspace/django__django__3.1/tests/migrations/related_models_app:
__init__.py

/workspace/django__django__3.1/tests/migrations/test_add_many_to_many_field_initial:
0001_initial.py
0002_initial.py
__init__.py

/workspace/django__django__3.1/tests/migrations/test_auto_now_add:
0001_initial.py
__init__.py

/workspace/django__django__3.1/tests/migrations/test_migrations:
0001_initial.py
0002_second.py
__init__.py

/workspace/django__django__3.1/tests/migrations/test_migrations_atomic_operation:
0001_initial.py
__init__.py

/workspace/django__django__3.1/tests/migrations/test_migrations_backwards_deps_1:
0001_initial.py
0002_second.py

/workspace/django__django__3.1/tests/migrations/test_migrations_bad_pyc:
0001_initial.pyc-tpl
__init__.py

/workspace/django__django__3.1/tests/migrations/test_migrations_clashing_prefix:
__init__.py
a.py
ab.py

/workspace/django__django__3.1/tests/migrations/test_migrations_conflict:
0001_initial.py
0002_conflicting_second.py
0002_second.py
__init__.py

/workspace/django__django__3.1/tests/migrations/test_migrations_custom_user:
0001_initial.py
__init__.py

/workspace/django__django__3.1/tests/migrations/test_migrations_empty:
__init__.py

/workspace/django__django__3.1/tests/migrations/test_migrations_fake_split_initial:
0001_initial.py
0002_second.py
__init__.py

/workspace/django__django__3.1/tests/migrations/test_migrations_first:
__init__.py
second.py
thefirst.py

/workspace/django__django__3.1/tests/migrations/test_migrations_initial_false:
0001_not_initial.py
__init__.py

/workspace/django__django__3.1/tests/migrations/test_migrations_no_ancestor:
0001_initial.py
0002_conflicting_second.py
0002_second.py
__init__.py

/workspace/django__django__3.1/tests/migrations/test_migrations_no_changes:
0001_initial.py
0002_second.py
0003_third.py
__init__.py

/workspace/django__django__3.1/tests/migrations/test_migrations_no_default:
0001_initial.py
__init__.py

/workspace/django__django__3.1/tests/migrations/test_migrations_no_init:

/workspace/django__django__3.1/tests/migrations/test_migrations_no_operations:
0001_initial.py
__init__.py

/workspace/django__django__3.1/tests/migrations/test_migrations_non_atomic:
0001_initial.py
__init__.py

/workspace/django__django__3.1/tests/migrations/test_migrations_order:
0001.py
__init__.py

/workspace/django__django__3.1/tests/migrations/test_migrations_plan:
0001_initial.py
0002_second.py
0003_third.py
0004_fourth.py
__init__.py

/workspace/django__django__3.1/tests/migrations/test_migrations_private:
0001_initial.py
__init__.py
_util.py
~util.py

/workspace/django__django__3.1/tests/migrations/test_migrations_run_before:
0001_initial.py
0002_second.py
0003_third.py
__init__.py

/workspace/django__django__3.1/tests/migrations/test_migrations_squashed:
0001_initial.py
0001_squashed_0002.py
0002_second.py
__init__.py

/workspace/django__django__3.1/tests/migrations/test_migrations_squashed_complex:
1_auto.py
2_auto.py
3_auto.py
3_squashed_5.py
4_auto.py
5_auto.py
6_auto.py
7_auto.py
__init__.py

/workspace/django__django__3.1/tests/migrations/test_migrations_squashed_complex_multi_apps:
__init__.py
app1
app2

/workspace/django__django__3.1/tests/migrations/test_migrations_squashed_complex_multi_apps/app1:
1_auto.py
2_auto.py
2_squashed_3.py
3_auto.py
4_auto.py
__init__.py

/workspace/django__django__3.1/tests/migrations/test_migrations_squashed_complex_multi_apps/app2:
1_auto.py
1_squashed_2.py
2_auto.py
__init__.py

/workspace/django__django__3.1/tests/migrations/test_migrations_squashed_erroneous:
1_auto.py
2_auto.py
3_squashed_5.py
6_auto.py
7_auto.py
__init__.py

/workspace/django__django__3.1/tests/migrations/test_migrations_squashed_extra:
0001_initial.py
0001_squashed_0002.py
0002_second.py
0003_third.py
__init__.py

/workspace/django__django__3.1/tests/migrations/test_migrations_squashed_ref_squashed:
__init__.py
app1
app2

/workspace/django__django__3.1/tests/migrations/test_migrations_squashed_ref_squashed/app1:
1_auto.py
2_auto.py
2_squashed_3.py
3_auto.py
4_auto.py
__init__.py

/workspace/django__django__3.1/tests/migrations/test_migrations_squashed_ref_squashed/app2:
1_auto.py
1_squashed_2.py
2_auto.py
__init__.py

/workspace/django__django__3.1/tests/migrations/test_migrations_unmigdep:
0001_initial.py
__init__.py

/workspace/django__django__3.1/tests/migrations2:
__init__.py
models.py
test_migrations_2
test_migrations_2_first
test_migrations_2_no_deps

/workspace/django__django__3.1/tests/migrations2/test_migrations_2:
0001_initial.py
__init__.py

/workspace/django__django__3.1/tests/migrations2/test_migrations_2_first:
0001_initial.py
0002_second.py
__init__.py

/workspace/django__django__3.1/tests/migrations2/test_migrations_2_no_deps:
0001_initial.py
__init__.py

/workspace/django__django__3.1/tests/model_enums:
tests.py

/workspace/django__django__3.1/tests/model_fields:
4x8.png
8x4.png
__init__.py
models.py
test_autofield.py
test_binaryfield.py
test_booleanfield.py
test_charfield.py
test_datetimefield.py
test_decimalfield.py
test_durationfield.py
test_field_flags.py
test_filefield.py
test_filepathfield.py
test_floatfield.py
test_foreignkey.py
test_genericipaddressfield.py
test_imagefield.py
test_integerfield.py
test_manytomanyfield.py
test_promises.py
test_slugfield.py
test_textfield.py
test_uuid.py
tests.py

/workspace/django__django__3.1/tests/model_forms:
__init__.py
models.py
test.png
test2.png
test_modelchoicefield.py
test_uuid.py
tests.py

/workspace/django__django__3.1/tests/model_formsets:
__init__.py
models.py
test_uuid.py
tests.py

/workspace/django__django__3.1/tests/model_formsets_regress:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/model_indexes:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/model_inheritance:
__init__.py
models.py
test_abstract_inheritance.py
tests.py

/workspace/django__django__3.1/tests/model_inheritance_regress:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/model_meta:
__init__.py
models.py
results.py
tests.py

/workspace/django__django__3.1/tests/model_options:
__init__.py
models
test_default_related_name.py
test_tablespaces.py

/workspace/django__django__3.1/tests/model_options/models:
__init__.py
default_related_name.py
tablespaces.py

/workspace/django__django__3.1/tests/model_package:
__init__.py
models
tests.py

/workspace/django__django__3.1/tests/model_package/models:
__init__.py
article.py
publication.py

/workspace/django__django__3.1/tests/model_regress:
__init__.py
models.py
test_pickle.py
test_state.py
tests.py

/workspace/django__django__3.1/tests/modeladmin:
__init__.py
models.py
test_actions.py
test_checks.py
tests.py

/workspace/django__django__3.1/tests/multiple_database:
__init__.py
fixtures
models.py
routers.py
tests.py

/workspace/django__django__3.1/tests/multiple_database/fixtures:
multidb-common.json
multidb.default.json
multidb.other.json
pets.json

/workspace/django__django__3.1/tests/mutually_referential:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/nested_foreign_keys:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/no_models:
__init__.py
tests.py

/workspace/django__django__3.1/tests/null_fk:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/null_fk_ordering:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/null_queries:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/one_to_one:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/or_lookups:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/order_with_respect_to:
__init__.py
base_tests.py
models.py
tests.py

/workspace/django__django__3.1/tests/ordering:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/pagination:
__init__.py
custom.py
models.py
tests.py

/workspace/django__django__3.1/tests/postgres_tests:
__init__.py
array_default_migrations
array_index_migrations
fields.py
integration_settings.py
migrations
models.py
test_aggregates.py
test_apps.py
test_array.py
test_bulk_update.py
test_citext.py
test_constraints.py
test_functions.py
test_hstore.py
test_indexes.py
test_integration.py
test_introspection.py
test_json.py
test_operations.py
test_ranges.py
test_search.py
test_signals.py
test_trigram.py
test_unaccent.py

/workspace/django__django__3.1/tests/postgres_tests/array_default_migrations:
0001_initial.py
0002_integerarraymodel_field_2.py
__init__.py

/workspace/django__django__3.1/tests/postgres_tests/array_index_migrations:
0001_initial.py
__init__.py

/workspace/django__django__3.1/tests/postgres_tests/migrations:
0001_setup_extensions.py
0002_create_test_models.py
__init__.py

/workspace/django__django__3.1/tests/prefetch_related:
__init__.py
models.py
test_prefetch_related_objects.py
test_uuid.py
tests.py

/workspace/django__django__3.1/tests/project_template:
__init__.py
test_settings.py
urls.py
views.py

/workspace/django__django__3.1/tests/properties:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/proxy_model_inheritance:
__init__.py
app1
app2
models.py
tests.py

/workspace/django__django__3.1/tests/proxy_model_inheritance/app1:
__init__.py
models.py

/workspace/django__django__3.1/tests/proxy_model_inheritance/app2:
__init__.py
models.py

/workspace/django__django__3.1/tests/proxy_models:
__init__.py
admin.py
fixtures
models.py
tests.py
urls.py

/workspace/django__django__3.1/tests/proxy_models/fixtures:
mypeople.json

/workspace/django__django__3.1/tests/queries:
__init__.py
models.py
test_bulk_update.py
test_db_returning.py
test_explain.py
test_iterator.py
test_q.py
test_qs_combinators.py
test_query.py
tests.py

/workspace/django__django__3.1/tests/queryset_pickle:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/raw_query:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/redirects_tests:
__init__.py
tests.py
urls.py

/workspace/django__django__3.1/tests/requests:
__init__.py
test_data_upload_settings.py
tests.py

/workspace/django__django__3.1/tests/requirements:
mysql.txt
oracle.txt
postgres.txt
py3.txt

/workspace/django__django__3.1/tests/reserved_names:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/resolve_url:
__init__.py
models.py
tests.py
urls.py

/workspace/django__django__3.1/tests/responses:
__init__.py
test_cookie.py
test_fileresponse.py
tests.py

/workspace/django__django__3.1/tests/reverse_lookup:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/save_delete_hooks:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/schema:
__init__.py
fields.py
models.py
test_logging.py
tests.py

/workspace/django__django__3.1/tests/select_for_update:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/select_related:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/select_related_onetoone:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/select_related_regress:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/serializers:
__init__.py
models
test_data.py
test_deserializedobject.py
test_json.py
test_natural.py
test_xml.py
test_yaml.py
tests.py

/workspace/django__django__3.1/tests/serializers/models:
__init__.py
base.py
data.py
multi_table.py
natural.py

/workspace/django__django__3.1/tests/servers:
__init__.py
another_app
fixtures
media
models.py
static
test_basehttp.py
test_liveserverthread.py
tests.py
urls.py
views.py

/workspace/django__django__3.1/tests/servers/another_app:
__init__.py
static

/workspace/django__django__3.1/tests/servers/another_app/static:
another_app

/workspace/django__django__3.1/tests/servers/another_app/static/another_app:
another_app_static_file.txt

/workspace/django__django__3.1/tests/servers/fixtures:
testdata.json

/workspace/django__django__3.1/tests/servers/media:
example_media_file.txt

/workspace/django__django__3.1/tests/servers/static:
example_static_file.txt

/workspace/django__django__3.1/tests/sessions_tests:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/settings_tests:
__init__.py
tests.py

/workspace/django__django__3.1/tests/shell:
__init__.py
tests.py

/workspace/django__django__3.1/tests/shortcuts:
__init__.py
jinja2
templates
tests.py
urls.py
views.py

/workspace/django__django__3.1/tests/shortcuts/jinja2:
shortcuts

/workspace/django__django__3.1/tests/shortcuts/jinja2/shortcuts:
using.html

/workspace/django__django__3.1/tests/shortcuts/templates:
shortcuts

/workspace/django__django__3.1/tests/shortcuts/templates/shortcuts:
render_test.html
using.html

/workspace/django__django__3.1/tests/signals:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/signed_cookies_tests:
__init__.py
tests.py

/workspace/django__django__3.1/tests/signing:
__init__.py
tests.py

/workspace/django__django__3.1/tests/sitemaps_tests:
__init__.py
base.py
models.py
templates
test_generic.py
test_http.py
test_https.py
test_management.py
test_utils.py
urls

/workspace/django__django__3.1/tests/sitemaps_tests/templates:
custom_sitemap.xml
custom_sitemap_index.xml

/workspace/django__django__3.1/tests/sitemaps_tests/urls:
__init__.py
empty.py
http.py
https.py
index_only.py

/workspace/django__django__3.1/tests/sites_framework:
__init__.py
migrations
models.py
tests.py

/workspace/django__django__3.1/tests/sites_framework/migrations:
0001_initial.py
__init__.py

/workspace/django__django__3.1/tests/sites_tests:
__init__.py
tests.py

/workspace/django__django__3.1/tests/staticfiles_tests:
__init__.py
apps
cases.py
project
settings.py
storage.py
test_checks.py
test_finders.py
test_forms.py
test_liveserver.py
test_management.py
test_storage.py
test_templatetags.py
test_utils.py
test_views.py
urls

/workspace/django__django__3.1/tests/staticfiles_tests/apps:
__init__.py
no_label
staticfiles_config.py
test

/workspace/django__django__3.1/tests/staticfiles_tests/apps/no_label:
__init__.py
static

/workspace/django__django__3.1/tests/staticfiles_tests/apps/no_label/static:
file2.txt

/workspace/django__django__3.1/tests/staticfiles_tests/apps/test:
__init__.py
otherdir
static

/workspace/django__django__3.1/tests/staticfiles_tests/apps/test/otherdir:
odfile.txt

/workspace/django__django__3.1/tests/staticfiles_tests/apps/test/static:
test

/workspace/django__django__3.1/tests/staticfiles_tests/apps/test/static/test:
%2F.txt
CVS
file.txt
file1.txt
nonascii.css
test.ignoreme
vendor
window.png
⊗.txt

/workspace/django__django__3.1/tests/staticfiles_tests/apps/test/static/test/vendor:
module.js

/workspace/django__django__3.1/tests/staticfiles_tests/project:
documents
faulty
loop
prefixed
site_media

/workspace/django__django__3.1/tests/staticfiles_tests/project/documents:
absolute_root.css
cached
styles_root.css
subdir
test
test.txt

/workspace/django__django__3.1/tests/staticfiles_tests/project/documents/cached:
absolute.css
css
img
import.css
other.css
relative.css
styles.css
styles_insensitive.css
test.js
url.css

/workspace/django__django__3.1/tests/staticfiles_tests/project/documents/cached/css:
fonts
fragments.css
ignored.css
img
window.css

/workspace/django__django__3.1/tests/staticfiles_tests/project/documents/cached/css/fonts:
font.eot
font.svg

/workspace/django__django__3.1/tests/staticfiles_tests/project/documents/cached/css/img:
window.png

/workspace/django__django__3.1/tests/staticfiles_tests/project/documents/cached/img:
relative.png

/workspace/django__django__3.1/tests/staticfiles_tests/project/documents/subdir:
test.txt

/workspace/django__django__3.1/tests/staticfiles_tests/project/documents/test:
backup~
camelCase.txt
file.txt

/workspace/django__django__3.1/tests/staticfiles_tests/project/faulty:
faulty.css

/workspace/django__django__3.1/tests/staticfiles_tests/project/loop:
bar.css
foo.css

/workspace/django__django__3.1/tests/staticfiles_tests/project/prefixed:
test.txt

/workspace/django__django__3.1/tests/staticfiles_tests/project/site_media:
media
static

/workspace/django__django__3.1/tests/staticfiles_tests/project/site_media/media:
media-file.txt

/workspace/django__django__3.1/tests/staticfiles_tests/project/site_media/static:
testfile.txt

/workspace/django__django__3.1/tests/staticfiles_tests/urls:
__init__.py
default.py
helper.py

/workspace/django__django__3.1/tests/str:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/string_lookup:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/swappable_models:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/syndication_tests:
__init__.py
feeds.py
models.py
templates
tests.py
urls.py

/workspace/django__django__3.1/tests/syndication_tests/templates:
syndication

/workspace/django__django__3.1/tests/syndication_tests/templates/syndication:
description.html
description_context.html
title.html
title_context.html

/workspace/django__django__3.1/tests/template_backends:
__init__.py
apps
forbidden
jinja2
template_strings
templates
test_django.py
test_dummy.py
test_jinja2.py
test_utils.py

/workspace/django__django__3.1/tests/template_backends/apps:
__init__.py
good
importerror

/workspace/django__django__3.1/tests/template_backends/apps/good:
__init__.py
templatetags

/workspace/django__django__3.1/tests/template_backends/apps/good/templatetags:
__init__.py
empty.py
good_tags.py
override.py
subpackage

/workspace/django__django__3.1/tests/template_backends/apps/good/templatetags/subpackage:
__init__.py
tags.py

/workspace/django__django__3.1/tests/template_backends/apps/importerror:
__init__.py
templatetags

/workspace/django__django__3.1/tests/template_backends/apps/importerror/templatetags:
__init__.py
broken_tags.py

/workspace/django__django__3.1/tests/template_backends/forbidden:
template_backends

/workspace/django__django__3.1/tests/template_backends/forbidden/template_backends:
hello.html

/workspace/django__django__3.1/tests/template_backends/jinja2:
template_backends

/workspace/django__django__3.1/tests/template_backends/jinja2/template_backends:
csrf.html
django_escaping.html
hello.html
syntax_error.html
syntax_error2.html

/workspace/django__django__3.1/tests/template_backends/template_strings:
template_backends

/workspace/django__django__3.1/tests/template_backends/template_strings/template_backends:
csrf.html
hello.html

/workspace/django__django__3.1/tests/template_backends/templates:
template_backends

/workspace/django__django__3.1/tests/template_backends/templates/template_backends:
csrf.html
django_escaping.html
hello.html
syntax_error.html

/workspace/django__django__3.1/tests/template_loader:
__init__.py
template_strings
templates
tests.py

/workspace/django__django__3.1/tests/template_loader/template_strings:
template_loader

/workspace/django__django__3.1/tests/template_loader/template_strings/template_loader:
hello.html

/workspace/django__django__3.1/tests/template_loader/templates:
template_loader

/workspace/django__django__3.1/tests/template_loader/templates/template_loader:
goodbye.html
hello.html
request.html

/workspace/django__django__3.1/tests/template_tests:
__init__.py
alternate_urls.py
annotated_tag_function.py
broken_tag.py
eggs
filter_tests
jinja2
other_templates
recursive_templates
relative_templates
syntax_tests
templates
templatetags
test_base.py
test_callables.py
test_context.py
test_custom.py
test_engine.py
test_extends.py
test_extends_relative.py
test_library.py
test_loaders.py
test_logging.py
test_nodelist.py
test_origin.py
test_parser.py
test_response.py
test_smartif.py
tests.py
urls.py
utils.py
views.py

/workspace/django__django__3.1/tests/template_tests/eggs:
tagsegg.egg

/workspace/django__django__3.1/tests/template_tests/filter_tests:
__init__.py
test_add.py
test_addslashes.py
test_autoescape.py
test_capfirst.py
test_center.py
test_chaining.py
test_cut.py
test_date.py
test_default.py
test_default_if_none.py
test_dictsort.py
test_dictsortreversed.py
test_divisibleby.py
test_escape.py
test_escapejs.py
test_filesizeformat.py
test_first.py
test_floatformat.py
test_force_escape.py
test_get_digit.py
test_iriencode.py
test_join.py
test_json_script.py
test_last.py
test_length.py
test_length_is.py
test_linebreaks.py
test_linebreaksbr.py
test_linenumbers.py
test_ljust.py
test_lower.py
test_make_list.py
test_phone2numeric.py
test_pluralize.py
test_random.py
test_rjust.py
test_safe.py
test_safeseq.py
test_slice.py
test_slugify.py
test_stringformat.py
test_striptags.py
test_time.py
test_timesince.py
test_timeuntil.py
test_title.py
test_truncatechars.py
test_truncatechars_html.py
test_truncatewords.py
test_truncatewords_html.py
test_unordered_list.py
test_upper.py
test_urlencode.py
test_urlize.py
test_urlizetrunc.py
test_wordcount.py
test_wordwrap.py
test_yesno.py
timezone_utils.py

/workspace/django__django__3.1/tests/template_tests/jinja2:
template_tests

/workspace/django__django__3.1/tests/template_tests/jinja2/template_tests:
using.html

/workspace/django__django__3.1/tests/template_tests/other_templates:
priority
test_dirs.html

/workspace/django__django__3.1/tests/template_tests/other_templates/priority:
foo.html

/workspace/django__django__3.1/tests/template_tests/recursive_templates:
fs
fs2
fs3

/workspace/django__django__3.1/tests/template_tests/recursive_templates/fs:
extend-missing.html
one.html
other-recursive.html
recursive.html
self.html
three.html
two.html

/workspace/django__django__3.1/tests/template_tests/recursive_templates/fs2:
recursive.html

/workspace/django__django__3.1/tests/template_tests/recursive_templates/fs3:
recursive.html

/workspace/django__django__3.1/tests/template_tests/relative_templates:
dir1
error_extends.html
error_include.html
one.html
three.html
two.html

/workspace/django__django__3.1/tests/template_tests/relative_templates/dir1:
dir2
looped.html
one.html
one1.html
one2.html
one3.html
three.html
two.html

/workspace/django__django__3.1/tests/template_tests/relative_templates/dir1/dir2:
inc1.html
inc2.html
include_content.html
one.html

/workspace/django__django__3.1/tests/template_tests/syntax_tests:
__init__.py
i18n
test_autoescape.py
test_basic.py
test_builtins.py
test_cache.py
test_comment.py
test_cycle.py
test_exceptions.py
test_extends.py
test_filter_syntax.py
test_filter_tag.py
test_firstof.py
test_for.py
test_if.py
test_if_changed.py
test_if_equal.py
test_include.py
test_invalid_string.py
test_list_index.py
test_load.py
test_lorem.py
test_multiline.py
test_named_endblock.py
test_now.py
test_numpy.py
test_regroup.py
test_resetcycle.py
test_setup.py
test_simple_tag.py
test_spaceless.py
test_static.py
test_template_tag.py
test_url.py
test_verbatim.py
test_width_ratio.py
test_with.py

/workspace/django__django__3.1/tests/template_tests/syntax_tests/i18n:
__init__.py
base.py
test_blocktrans.py
test_filters.py
test_get_available_languages.py
test_get_current_language.py
test_get_current_language_bidi.py
test_get_language_info.py
test_get_language_info_list.py
test_language.py
test_trans.py
test_underscore_syntax.py

/workspace/django__django__3.1/tests/template_tests/templates:
27584_child.html
27584_parent.html
27956_child.html
27956_parent.html
broken_base.html
first
include_tpl.html
included_base.html
included_content.html
inclusion.html
inclusion_base.html
inclusion_extends1.html
inclusion_extends2.html
index.html
priority
recursive_include.html
response.html
second
ssi include with spaces.html
ssi_include.html
template_tests
test_context.html
test_context_stack.html
test_extends_error.html
test_incl_tag_use_l10n.html
test_include_error.html

/workspace/django__django__3.1/tests/template_tests/templates/first:
test.html

/workspace/django__django__3.1/tests/template_tests/templates/priority:
foo.html

/workspace/django__django__3.1/tests/template_tests/templates/second:
test.html

/workspace/django__django__3.1/tests/template_tests/templates/template_tests:
using.html

/workspace/django__django__3.1/tests/template_tests/templatetags:
__init__.py
bad_tag.py
custom.py
inclusion.py
subpackage
tag_27584.py
testtags.py

/workspace/django__django__3.1/tests/template_tests/templatetags/subpackage:
__init__.py
echo.py

/workspace/django__django__3.1/tests/templates:
base.html
comments
custom_admin
extended.html
form_view.html
login.html
views

/workspace/django__django__3.1/tests/templates/comments:
comment_notification_email.txt

/workspace/django__django__3.1/tests/templates/custom_admin:
add_form.html
app_index.html
change_form.html
change_list.html
delete_confirmation.html
delete_selected_confirmation.html
index.html
login.html
logout.html
object_history.html
password_change_done.html
password_change_form.html
popup_response.html

/workspace/django__django__3.1/tests/templates/views:
article_archive_day.html
article_archive_month.html
article_confirm_delete.html
article_detail.html
article_form.html
article_list.html
datearticle_archive_month.html
urlarticle_detail.html
urlarticle_form.html

/workspace/django__django__3.1/tests/test_client:
__init__.py
auth_backends.py
test_conditional_content_removal.py
test_fakepayload.py
tests.py
urls.py
views.py

/workspace/django__django__3.1/tests/test_client_regress:
__init__.py
auth_backends.py
bad_templates
context_processors.py
models.py
session.py
templates
tests.py
urls.py
views.py

/workspace/django__django__3.1/tests/test_client_regress/bad_templates:
404.html

/workspace/django__django__3.1/tests/test_client_regress/templates:
request_context.html
unicode.html

/workspace/django__django__3.1/tests/test_exceptions:
__init__.py
test_validation_error.py

/workspace/django__django__3.1/tests/test_runner:
__init__.py
models.py
runner.py
test_debug_sql.py
test_discover_runner.py
test_parallel.py
tests.py

/workspace/django__django__3.1/tests/test_runner_apps:
__init__.py
databases
sample
simple
tagged

/workspace/django__django__3.1/tests/test_runner_apps/databases:
__init__.py
tests.py

/workspace/django__django__3.1/tests/test_runner_apps/sample:
__init__.py
doctests.py
empty.py
pattern_tests.py
tests
tests_sample.py

/workspace/django__django__3.1/tests/test_runner_apps/sample/tests:
__init__.py
tests.py

/workspace/django__django__3.1/tests/test_runner_apps/simple:
__init__.py
tests.py

/workspace/django__django__3.1/tests/test_runner_apps/tagged:
__init__.py
tests.py
tests_inheritance.py

/workspace/django__django__3.1/tests/test_utils:
__init__.py
fixtures
models.py
templates
test_testcase.py
test_transactiontestcase.py
tests.py
urls.py
views.py

/workspace/django__django__3.1/tests/test_utils/fixtures:
should_not_be_loaded.json

/workspace/django__django__3.1/tests/test_utils/templates:
template_used

/workspace/django__django__3.1/tests/test_utils/templates/template_used:
alternative.html
base.html
extends.html
include.html

/workspace/django__django__3.1/tests/timezones:
__init__.py
admin.py
forms.py
models.py
tests.py
urls.py

/workspace/django__django__3.1/tests/transaction_hooks:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/transactions:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/unmanaged_models:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/update:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/update_only_fields:
__init__.py
models.py
tests.py

/workspace/django__django__3.1/tests/urlpatterns:
__init__.py
converter_urls.py
converters.py
included_urls.py
more_urls.py
path_base64_urls.py
path_dynamic_urls.py
path_urls.py
test_resolvers.py
tests.py
views.py

/workspace/django__django__3.1/tests/urlpatterns_reverse:
__init__.py
erroneous_urls.py
extra_urls.py
included_app_urls.py
included_named_urls.py
included_named_urls2.py
included_namespace_urls.py
included_no_kwargs_urls.py
included_urls.py
included_urls2.py
method_view_urls.py
middleware.py
named_urls.py
named_urls_conflict.py
namespace_urls.py
nested_urls.py
no_urls.py
nonimported_module.py
reverse_lazy_urls.py
test_localeregexdescriptor.py
tests.py
translations
urlconf_inner.py
urlconf_outer.py
urls.py
urls_error_handlers.py
urls_error_handlers_callables.py
urls_without_handlers.py
utils.py
views.py
views_broken.py

/workspace/django__django__3.1/tests/urlpatterns_reverse/translations:
__init__.py
locale

/workspace/django__django__3.1/tests/urlpatterns_reverse/translations/locale:
__init__.py
de
fr

/workspace/django__django__3.1/tests/urlpatterns_reverse/translations/locale/de:
LC_MESSAGES
__init__.py

/workspace/django__django__3.1/tests/urlpatterns_reverse/translations/locale/de/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/tests/urlpatterns_reverse/translations/locale/fr:
LC_MESSAGES
__init__.py

/workspace/django__django__3.1/tests/urlpatterns_reverse/translations/locale/fr/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/tests/user_commands:
__init__.py
eggs
management
models.py
tests.py
urls.py

/workspace/django__django__3.1/tests/user_commands/eggs:
basic.egg

/workspace/django__django__3.1/tests/user_commands/management:
commands

/workspace/django__django__3.1/tests/user_commands/management/commands:
common_args.py
dance.py
hal.py
mutually_exclusive_required.py
no_translations.py
required_option.py
reverse_url.py
set_option.py
subparser.py
subparser_dest.py
subparser_required.py
transaction.py

/workspace/django__django__3.1/tests/utils_tests:
__init__.py
archives
eggs
files
models.py
test_archive.py
test_autoreload.py
test_baseconv.py
test_crypto.py
test_datastructures.py
test_dateformat.py
test_dateparse.py
test_datetime_safe.py
test_decorators.py
test_duration.py
test_encoding.py
test_encoding_deprecations.py
test_feedgenerator.py
test_functional.py
test_hashable.py
test_html.py
test_http.py
test_inspect.py
test_ipv6.py
test_jslex.py
test_lazyobject.py
test_lorem_ipsum.py
test_module
test_module_loading.py
test_no_submodule.py
test_numberformat.py
test_os_utils.py
test_regex_helper.py
test_safestring.py
test_simplelazyobject.py
test_termcolors.py
test_text.py
test_timesince.py
test_timezone.py
test_topological_sort.py
test_tree.py
utils.py

/workspace/django__django__3.1/tests/utils_tests/archives:
foobar.tar
foobar.tar.bz2
foobar.tar.gz
foobar.tar.lzma
foobar.tar.xz
foobar.zip
leadpath_foobar.tar
leadpath_foobar.tar.bz2
leadpath_foobar.tar.gz
leadpath_foobar.tar.lzma
leadpath_foobar.tar.xz
leadpath_foobar.zip

/workspace/django__django__3.1/tests/utils_tests/eggs:
test_egg.egg

/workspace/django__django__3.1/tests/utils_tests/files:
strip_tags1.html
strip_tags2.txt

/workspace/django__django__3.1/tests/utils_tests/test_module:
__init__.py
another_bad_module.py
another_good_module.py
bad_module.py
child_module
good_module.py

/workspace/django__django__3.1/tests/utils_tests/test_module/child_module:
__init__.py
grandchild_module.py

/workspace/django__django__3.1/tests/validation:
__init__.py
models.py
test_custom_messages.py
test_error_messages.py
test_picklable.py
test_unique.py
test_validators.py
tests.py

/workspace/django__django__3.1/tests/validators:
__init__.py
invalid_urls.txt
tests.py
valid_urls.txt

/workspace/django__django__3.1/tests/version:
__init__.py
tests.py

/workspace/django__django__3.1/tests/view_tests:
__init__.py
app0
app1
app2
app3
app4
app5
default_urls.py
generic_urls.py
locale
media
models.py
regression_21530_urls.py
templates
templatetags
tests
urls.py
views.py

/workspace/django__django__3.1/tests/view_tests/app0:
__init__.py
locale

/workspace/django__django__3.1/tests/view_tests/app0/locale:
en

/workspace/django__django__3.1/tests/view_tests/app0/locale/en:
LC_MESSAGES

/workspace/django__django__3.1/tests/view_tests/app0/locale/en/LC_MESSAGES:
djangojs.mo
djangojs.po

/workspace/django__django__3.1/tests/view_tests/app1:
__init__.py
locale

/workspace/django__django__3.1/tests/view_tests/app1/locale:
fr

/workspace/django__django__3.1/tests/view_tests/app1/locale/fr:
LC_MESSAGES

/workspace/django__django__3.1/tests/view_tests/app1/locale/fr/LC_MESSAGES:
djangojs.mo
djangojs.po

/workspace/django__django__3.1/tests/view_tests/app2:
__init__.py
locale

/workspace/django__django__3.1/tests/view_tests/app2/locale:
fr

/workspace/django__django__3.1/tests/view_tests/app2/locale/fr:
LC_MESSAGES

/workspace/django__django__3.1/tests/view_tests/app2/locale/fr/LC_MESSAGES:
djangojs.mo
djangojs.po

/workspace/django__django__3.1/tests/view_tests/app3:
__init__.py
locale

/workspace/django__django__3.1/tests/view_tests/app3/locale:
es_AR

/workspace/django__django__3.1/tests/view_tests/app3/locale/es_AR:
LC_MESSAGES

/workspace/django__django__3.1/tests/view_tests/app3/locale/es_AR/LC_MESSAGES:
djangojs.mo
djangojs.po

/workspace/django__django__3.1/tests/view_tests/app4:
__init__.py
locale

/workspace/django__django__3.1/tests/view_tests/app4/locale:
es_AR

/workspace/django__django__3.1/tests/view_tests/app4/locale/es_AR:
LC_MESSAGES

/workspace/django__django__3.1/tests/view_tests/app4/locale/es_AR/LC_MESSAGES:
djangojs.mo
djangojs.po

/workspace/django__django__3.1/tests/view_tests/app5:
__init__.py
locale

/workspace/django__django__3.1/tests/view_tests/app5/locale:
fr

/workspace/django__django__3.1/tests/view_tests/app5/locale/fr:
LC_MESSAGES

/workspace/django__django__3.1/tests/view_tests/app5/locale/fr/LC_MESSAGES:
djangojs.mo
djangojs.po

/workspace/django__django__3.1/tests/view_tests/locale:
de
en_GB
es
fr
nl
pt
ru

/workspace/django__django__3.1/tests/view_tests/locale/de:
LC_MESSAGES

/workspace/django__django__3.1/tests/view_tests/locale/de/LC_MESSAGES:
djangojs.mo
djangojs.po

/workspace/django__django__3.1/tests/view_tests/locale/en_GB:
LC_MESSAGES

/workspace/django__django__3.1/tests/view_tests/locale/en_GB/LC_MESSAGES:
djangojs.mo
djangojs.po

/workspace/django__django__3.1/tests/view_tests/locale/es:
LC_MESSAGES

/workspace/django__django__3.1/tests/view_tests/locale/es/LC_MESSAGES:
djangojs.mo
djangojs.po

/workspace/django__django__3.1/tests/view_tests/locale/fr:
LC_MESSAGES

/workspace/django__django__3.1/tests/view_tests/locale/fr/LC_MESSAGES:
djangojs.mo
djangojs.po

/workspace/django__django__3.1/tests/view_tests/locale/nl:
LC_MESSAGES

/workspace/django__django__3.1/tests/view_tests/locale/nl/LC_MESSAGES:
django.mo
django.po

/workspace/django__django__3.1/tests/view_tests/locale/pt:
LC_MESSAGES

/workspace/django__django__3.1/tests/view_tests/locale/pt/LC_MESSAGES:
djangojs.mo
djangojs.po

/workspace/django__django__3.1/tests/view_tests/locale/ru:
LC_MESSAGES

/workspace/django__django__3.1/tests/view_tests/locale/ru/LC_MESSAGES:
djangojs.mo
djangojs.po

/workspace/django__django__3.1/tests/view_tests/media:
%2F.txt
file.txt
file.txt.gz
file.unknown
long-line.txt
subdir

/workspace/django__django__3.1/tests/view_tests/media/subdir:
visible

/workspace/django__django__3.1/tests/view_tests/templates:
debug
jsi18n-multi-catalogs.html
jsi18n.html

/workspace/django__django__3.1/tests/view_tests/templates/debug:
template_error.html
template_exception.html

/workspace/django__django__3.1/tests/view_tests/templatetags:
__init__.py
debugtags.py

/workspace/django__django__3.1/tests/view_tests/tests:
__init__.py
test_csrf.py
test_debug.py
test_defaults.py
test_i18n.py
test_json.py
test_specials.py
test_static.py

/workspace/django__django__3.1/tests/wsgi:
__init__.py
tests.py
urls.py
wsgi.py

[Select the relevant files and use repo map to get highlevel representation and structure of repo]


============================================================



ACTION:

THOUGHT: Based on the PR description and repository structure, this issue is related to Django's model validation system, specifically the E015 error when Meta.ordering contains "pk" of a related field. 

Let's first create a script to reproduce the error:
CODE:
CODE = """
from django.db import models
from django.core.exceptions import ValidationError
from django.test.utils import setup_test_environment
from django.core.checks import run_checks

# Set up the test environment
setup_test_environment()

# Create test models
class Option(models.Model):
    name = models.CharField(max_length=100)

class SomeModel(models.Model):
    option = models.ForeignKey(Option, on_delete=models.CASCADE)
    
    class Meta:
        ordering = ['option__pk']  # This should raise E015

# Run model checks
errors = run_checks()
for error in errors:
    print(f"Error {error.id}: {error.msg}")
"""
create_file("reproduce_error.py", CODE)

============================================================



OBSERVATION:

[File reproduce_error.py created.]
[File: /workspace/reproduce_error.py (23 lines total after edit)]
1|
2|from django.db import models
3|from django.core.exceptions import ValidationError
4|from django.test.utils import setup_test_environment
5|from django.core.checks import run_checks
6|
7|# Set up the test environment
8|setup_test_environment()
9|
10|# Create test models
11|class Option(models.Model):
12|    name = models.CharField(max_length=100)
13|
14|class SomeModel(models.Model):
15|    option = models.ForeignKey(Option, on_delete=models.CASCADE)
16|    
17|    class Meta:
18|        ordering = ['option__pk']  # This should raise E015
19|
20|# Run model checks
21|errors = run_checks()
22|for error in errors:
23|    print(f"Error {error.id}: {error.msg}")
[File updated. Please review the changes carefully and make sure they are correct (correct indentation, no duplicate or redundant lines etc). Edit the file again if necessary.]


============================================================



ACTION:

THOUGHT: Let's run the script to confirm the error:
COMMAND:
PYTHONPATH=/workspace/django__django__3.1 python3 reproduce_error.py

============================================================



OBSERVATION:

Traceback (most recent call last):
  File "reproduce_error.py", line 8, in <module>
    setup_test_environment()
  File "/workspace/django__django__3.1/django/test/utils.py", line 115, in setup_test_environment
    debug = settings.DEBUG
  File "/workspace/django__django__3.1/django/conf/__init__.py", line 77, in __getattr__
    self._setup(name)
  File "/workspace/django__django__3.1/django/conf/__init__.py", line 62, in _setup
    % (desc, ENVIRONMENT_VARIABLE))
django.core.exceptions.ImproperlyConfigured: Requested setting DEBUG, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.


============================================================



ACTION:

THOUGHT: I need to modify the script to configure Django settings before running the checks:
CODE:
CODE = """
from django.conf import settings
from django.db import models
from django.core.exceptions import ValidationError
from django.test.utils import setup_test_environment
from django.core.checks import run_checks

# Configure minimal settings
settings.configure(
    DATABASES={
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': ':memory:'
        }
    },
    INSTALLED_APPS=['django.contrib.contenttypes'],
)

# Set up the test environment
setup_test_environment()

# Create test models
class Option(models.Model):
    name = models.CharField(max_length=100)

class SomeModel(models.Model):
    option = models.ForeignKey(Option, on_delete=models.CASCADE)
    
    class Meta:
        ordering = ['option__pk']  # This should raise E015

# Run model checks
errors = run_checks()
for error in errors:
    print(f"Error {error.id}: {error.msg}")
"""
create_file("reproduce_error.py", CODE)

============================================================



OBSERVATION:

[File reproduce_error.py already exists and File overwritten.]
[File: /workspace/reproduce_error.py (35 lines total after edit)]
1|
2|from django.conf import settings
3|from django.db import models
4|from django.core.exceptions import ValidationError
5|from django.test.utils import setup_test_environment
6|from django.core.checks import run_checks
7|
8|# Configure minimal settings
9|settings.configure(
10|    DATABASES={
11|        'default': {
12|            'ENGINE': 'django.db.backends.sqlite3',
13|            'NAME': ':memory:'
14|        }
15|    },
16|    INSTALLED_APPS=['django.contrib.contenttypes'],
17|)
18|
19|# Set up the test environment
20|setup_test_environment()
21|
22|# Create test models
23|class Option(models.Model):
24|    name = models.CharField(max_length=100)
25|
26|class SomeModel(models.Model):
27|    option = models.ForeignKey(Option, on_delete=models.CASCADE)
28|    
29|    class Meta:
30|        ordering = ['option__pk']  # This should raise E015
31|
32|# Run model checks
33|errors = run_checks()
34|for error in errors:
35|    print(f"Error {error.id}: {error.msg}")
[File updated. Please review the changes carefully and make sure they are correct (correct indentation, no duplicate or redundant lines etc). Edit the file again if necessary.]


============================================================



ACTION:

THOUGHT: Let's run the updated script to reproduce the error:
COMMAND:
PYTHONPATH=/workspace/django__django__3.1 python3 reproduce_error.py

============================================================



OBSERVATION:

Traceback (most recent call last):
  File "reproduce_error.py", line 23, in <module>
    class Option(models.Model):
  File "/workspace/django__django__3.1/django/db/models/base.py", line 107, in __new__
    app_config = apps.get_containing_app_config(module)
  File "/workspace/django__django__3.1/django/apps/registry.py", line 252, in get_containing_app_config
    self.check_apps_ready()
  File "/workspace/django__django__3.1/django/apps/registry.py", line 135, in check_apps_ready
    raise AppRegistryNotReady("Apps aren't loaded yet.")
django.core.exceptions.AppRegistryNotReady: Apps aren't loaded yet.


============================================================



ACTION:

THOUGHT: I need to modify the script to properly initialize Django apps before defining models:
CODE:
CODE = """
from django.conf import settings
from django.db import models
from django.core.exceptions import ValidationError
from django.test.utils import setup_test_environment
from django.core.checks import run_checks
import django

# Configure minimal settings
settings.configure(
    DATABASES={
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': ':memory:'
        }
    },
    INSTALLED_APPS=['django.contrib.contenttypes'],
)

# Initialize Django
django.setup()

# Set up the test environment
setup_test_environment()

# Create test models
class Option(models.Model):
    name = models.CharField(max_length=100)

class SomeModel(models.Model):
    option = models.ForeignKey(Option, on_delete=models.CASCADE)
    
    class Meta:
        ordering = ['option__pk']  # This should raise E015

# Run model checks
errors = run_checks()
for error in errors:
    print(f"Error {error.id}: {error.msg}")
"""
create_file("reproduce_error.py", CODE)

============================================================



OBSERVATION:

[File reproduce_error.py already exists and File overwritten.]
[File: /workspace/reproduce_error.py (39 lines total after edit)]
1|
2|from django.conf import settings
3|from django.db import models
4|from django.core.exceptions import ValidationError
5|from django.test.utils import setup_test_environment
6|from django.core.checks import run_checks
7|import django
8|
9|# Configure minimal settings
10|settings.configure(
11|    DATABASES={
12|        'default': {
13|            'ENGINE': 'django.db.backends.sqlite3',
14|            'NAME': ':memory:'
15|        }
16|    },
17|    INSTALLED_APPS=['django.contrib.contenttypes'],
18|)
19|
20|# Initialize Django
21|django.setup()
22|
23|# Set up the test environment
24|setup_test_environment()
25|
26|# Create test models
27|class Option(models.Model):
28|    name = models.CharField(max_length=100)
29|
30|class SomeModel(models.Model):
31|    option = models.ForeignKey(Option, on_delete=models.CASCADE)
32|    
33|    class Meta:
34|        ordering = ['option__pk']  # This should raise E015
35|
36|# Run model checks
37|errors = run_checks()
38|for error in errors:
39|    print(f"Error {error.id}: {error.msg}")
[File updated. Please review the changes carefully and make sure they are correct (correct indentation, no duplicate or redundant lines etc). Edit the file again if necessary.]


============================================================



ACTION:

THOUGHT: Let's run the updated script to reproduce the error:
COMMAND:
PYTHONPATH=/workspace/django__django__3.1 python3 reproduce_error.py

============================================================



OBSERVATION:

Traceback (most recent call last):
  File "reproduce_error.py", line 27, in <module>
    class Option(models.Model):
  File "/workspace/django__django__3.1/django/db/models/base.py", line 115, in __new__
    "INSTALLED_APPS." % (module, name)
RuntimeError: Model class __main__.Option doesn't declare an explicit app_label and isn't in an application in INSTALLED_APPS.


============================================================



ACTION:

THOUGHT: I need to modify the script to include our test app in INSTALLED_APPS and specify an app_label for the models:
CODE:
CODE = """
from django.conf import settings
from django.db import models
from django.core.exceptions import ValidationError
from django.test.utils import setup_test_environment
from django.core.checks import run_checks
import django

# Configure minimal settings
settings.configure(
    DATABASES={
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': ':memory:'
        }
    },
    INSTALLED_APPS=[
        'django.contrib.contenttypes',
        'test_app',  # our test app
    ],
)

# Initialize Django
django.setup()

# Set up the test environment
setup_test_environment()

# Create test models
class Option(models.Model):
    name = models.CharField(max_length=100)
    
    class Meta:
        app_label = 'test_app'

class SomeModel(models.Model):
    option = models.ForeignKey(Option, on_delete=models.CASCADE)
    
    class Meta:
        app_label = 'test_app'
        ordering = ['option__pk']  # This should raise E015

# Run model checks
errors = run_checks()
for error in errors:
    print(f"Error {error.id}: {error.msg}")
"""
create_file("reproduce_error.py", CODE)

============================================================



OBSERVATION:

[File reproduce_error.py already exists and File overwritten.]
[File: /workspace/reproduce_error.py (46 lines total after edit)]
1|
2|from django.conf import settings
3|from django.db import models
4|from django.core.exceptions import ValidationError
5|from django.test.utils import setup_test_environment
6|from django.core.checks import run_checks
7|import django
8|
9|# Configure minimal settings
10|settings.configure(
11|    DATABASES={
12|        'default': {
13|            'ENGINE': 'django.db.backends.sqlite3',
14|            'NAME': ':memory:'
15|        }
16|    },
17|    INSTALLED_APPS=[
18|        'django.contrib.contenttypes',
19|        'test_app',  # our test app
20|    ],
21|)
22|
23|# Initialize Django
24|django.setup()
25|
26|# Set up the test environment
27|setup_test_environment()
28|
29|# Create test models
30|class Option(models.Model):
31|    name = models.CharField(max_length=100)
32|    
33|    class Meta:
34|        app_label = 'test_app'
35|
36|class SomeModel(models.Model):
37|    option = models.ForeignKey(Option, on_delete=models.CASCADE)
38|    
39|    class Meta:
40|        app_label = 'test_app'
41|        ordering = ['option__pk']  # This should raise E015
42|
43|# Run model checks
44|errors = run_checks()
45|for error in errors:
46|    print(f"Error {error.id}: {error.msg}")
[File updated. Please review the changes carefully and make sure they are correct (correct indentation, no duplicate or redundant lines etc). Edit the file again if necessary.]


============================================================



ACTION:

THOUGHT: Let's run the updated script to reproduce the error:
COMMAND:
PYTHONPATH=/workspace/django__django__3.1 python3 reproduce_error.py

============================================================



OBSERVATION:

Traceback (most recent call last):
  File "reproduce_error.py", line 24, in <module>
    django.setup()
  File "/workspace/django__django__3.1/django/__init__.py", line 24, in setup
    apps.populate(settings.INSTALLED_APPS)
  File "/workspace/django__django__3.1/django/apps/registry.py", line 91, in populate
    app_config = AppConfig.create(entry)
  File "/workspace/django__django__3.1/django/apps/config.py", line 90, in create
    module = import_module(entry)
  File "/opt/miniconda3/envs/testbed/lib/python3.6/importlib/__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 994, in _gcd_import
  File "<frozen importlib._bootstrap>", line 971, in _find_and_load
  File "<frozen importlib._bootstrap>", line 953, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_app'


============================================================



ACTION:

THOUGHT: I need to create a test_app package first and move our models there:
COMMAND:
mkdir -p test_app
touch test_app/__init__.py

============================================================



OBSERVATION:

[Code executed successfully with no output]

============================================================



ACTION:

THOUGHT: Now let's create the models.py file in test_app and update our test script:
CODE:
# First create the models.py in test_app
CODE = """
from django.db import models

class Option(models.Model):
    name = models.CharField(max_length=100)

class SomeModel(models.Model):
    option = models.ForeignKey(Option, on_delete=models.CASCADE)
    
    class Meta:
        ordering = ['option__pk']  # This should raise E015
"""
create_file("test_app/models.py", CODE)

# Now update the reproduce_error.py
CODE = """
import os
import sys
from django.conf import settings
from django.core.checks import run_checks
import django

# Add the current directory to Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Configure minimal settings
settings.configure(
    DATABASES={
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': ':memory:'
        }
    },
    INSTALLED_APPS=[
        'django.contrib.contenttypes',
        'test_app',
    ],
)

# Initialize Django
django.setup()

# Run model checks
errors = run_checks()
for error in errors:
    print(f"Error {error.id}: {error.msg}")
"""
create_file("reproduce_error.py", CODE)

============================================================



OBSERVATION:

[File test_app/models.py created.]
[File: /workspace/test_app/models.py (11 lines total after edit)]
1|
2|from django.db import models
3|
4|class Option(models.Model):
5|    name = models.CharField(max_length=100)
6|
7|class SomeModel(models.Model):
8|    option = models.ForeignKey(Option, on_delete=models.CASCADE)
9|    
10|    class Meta:
11|        ordering = ['option__pk']  # This should raise E015
[File updated. Please review the changes carefully and make sure they are correct (correct indentation, no duplicate or redundant lines etc). Edit the file again if necessary.]
[File reproduce_error.py already exists and File overwritten.]
[File: /workspace/reproduce_error.py (31 lines total after edit)]
1|
2|import os
3|import sys
4|from django.conf import settings
5|from django.core.checks import run_checks
6|import django
7|
8|# Add the current directory to Python path
9|sys.path.append(os.path.dirname(os.path.abspath(__file__)))
10|
11|# Configure minimal settings
12|settings.configure(
13|    DATABASES={
14|        'default': {
15|            'ENGINE': 'django.db.backends.sqlite3',
16|            'NAME': ':memory:'
17|        }
18|    },
19|    INSTALLED_APPS=[
20|        'django.contrib.contenttypes',
21|        'test_app',
22|    ],
23|)
24|
25|# Initialize Django
26|django.setup()
27|
28|# Run model checks
29|errors = run_checks()
30|for error in errors:
31|    print(f"Error {error.id}: {error.msg}")
[File updated. Please review the changes carefully and make sure they are correct (correct indentation, no duplicate or redundant lines etc). Edit the file again if necessary.]


============================================================



ACTION:

THOUGHT: Let's run the updated script to reproduce the error:
COMMAND:
PYTHONPATH=/workspace/django__django__3.1 python3 reproduce_error.py

============================================================



OBSERVATION:

Error models.E015: 'ordering' refers to the nonexistent field, related field, or lookup 'option__pk'.


============================================================



ACTION:

THOUGHT: Great! We've successfully reproduced the error. Now let's analyze the issue:

1. The error occurs in Django's model validation system when checking the Meta.ordering attribute
2. The error message indicates that 'option__pk' is considered a "nonexistent field, related field, or lookup"
3. The regression was introduced in commit 440505cb2cadbe1a5b9fba246bcde6c04f51d07e

Let me check the model validation code in Django:
CODE:
open_file('/workspace/django__django__3.1/django/core/checks/model_checks.py')

============================================================



OBSERVATION:

[File: /workspace/django__django__3.1/django/core/checks/model_checks.py (210 lines total)]
1|import inspect
2|import types
3|from collections import defaultdict
4|from itertools import chain
5|
6|from django.apps import apps
7|from django.conf import settings
8|from django.core.checks import Error, Tags, Warning, register
9|
10|
11|@register(Tags.models)
12|def check_all_models(app_configs=None, **kwargs):
13|    db_table_models = defaultdict(list)
14|    indexes = defaultdict(list)
15|    constraints = defaultdict(list)
16|    errors = []
17|    if app_configs is None:
18|        models = apps.get_models()
19|    else:
20|        models = chain.from_iterable(app_config.get_models() for app_config in app_configs)
21|    for model in models:
22|        if model._meta.managed and not model._meta.proxy:
23|            db_table_models[model._meta.db_table].append(model._meta.label)
24|        if not inspect.ismethod(model.check):
25|            errors.append(
26|                Error(
27|                    "The '%s.check()' class method is currently overridden by %r."
28|                    % (model.__name__, model.check),
29|                    obj=model,
30|                    id='models.E020'
31|                )
32|            )
33|        else:
34|            errors.extend(model.check(**kwargs))
35|        for model_index in model._meta.indexes:
36|            indexes[model_index.name].append(model._meta.label)
37|        for model_constraint in model._meta.constraints:
38|            constraints[model_constraint.name].append(model._meta.label)
39|    if settings.DATABASE_ROUTERS:
40|        error_class, error_id = Warning, 'models.W035'
41|        error_hint = (
42|            'You have configured settings.DATABASE_ROUTERS. Verify that %s '
43|            'are correctly routed to separate databases.'
44|        )
45|    else:
46|        error_class, error_id = Error, 'models.E028'
47|        error_hint = None
48|    for db_table, model_labels in db_table_models.items():
49|        if len(model_labels) != 1:
50|            model_labels_str = ', '.join(model_labels)
51|            errors.append(
52|                error_class(
53|                    "db_table '%s' is used by multiple models: %s."
54|                    % (db_table, model_labels_str),
55|                    obj=db_table,
56|                    hint=(error_hint % model_labels_str) if error_hint else None,
57|                    id=error_id,
58|                )
59|            )
60|    for index_name, model_labels in indexes.items():
61|        if len(model_labels) > 1:
62|            model_labels = set(model_labels)
63|            errors.append(
64|                Error(
65|                    "index name '%s' is not unique %s %s." % (
66|                        index_name,
67|                        'for model' if len(model_labels) == 1 else 'amongst models:',
68|                        ', '.join(sorted(model_labels)),
69|                    ),
70|                    id='models.E029' if len(model_labels) == 1 else 'models.E030',
71|                ),
72|            )
73|    for constraint_name, model_labels in constraints.items():
74|        if len(model_labels) > 1:
75|            model_labels = set(model_labels)
76|            errors.append(
77|                Error(
78|                    "constraint name '%s' is not unique %s %s." % (
79|                        constraint_name,
80|                        'for model' if len(model_labels) == 1 else 'amongst models:',
81|                        ', '.join(sorted(model_labels)),
82|                    ),
83|                    id='models.E031' if len(model_labels) == 1 else 'models.E032',
84|                ),
85|            )
86|    return errors
87|
88|
89|def _check_lazy_references(apps, ignore=None):
90|    """
91|    Ensure all lazy (i.e. string) model references have been resolved.
92|
93|    Lazy references are used in various places throughout Django, primarily in
94|    related fields and model signals. Identify those common cases and provide
95|    more helpful error messages for them.
96|
97|    The ignore parameter is used by StateApps to exclude swappable models from
98|    this check.
99|    """
100|    pending_models = set(apps._pending_operations) - (ignore or set())
101|
102|    # Short circuit if there aren't any errors.
103|    if not pending_models:
104|        return []
105|
106|    from django.db.models import signals
107|    model_signals = {
108|        signal: name for name, signal in vars(signals).items()
109|        if isinstance(signal, signals.ModelSignal)
110|    }
111|
112|    def extract_operation(obj):
113|        """
114|        Take a callable found in Apps._pending_operations and identify the
115|        original callable passed to Apps.lazy_model_operation(). If that
116|        callable was a partial, return the inner, non-partial function and
117|        any arguments and keyword arguments that were supplied with it.
118|
119|        obj is a callback defined locally in Apps.lazy_model_operation() and
120|        annotated there with a `func` attribute so as to imitate a partial.
121|        """
122|        operation, args, keywords = obj, [], {}
123|        while hasattr(operation, 'func'):
124|            args.extend(getattr(operation, 'args', []))
125|            keywords.update(getattr(operation, 'keywords', {}))
126|            operation = operation.func
127|        return operation, args, keywords
128|
129|    def app_model_error(model_key):
130|        try:
131|            apps.get_app_config(model_key[0])
132|            model_error = "app '%s' doesn't provide model '%s'" % model_key
133|        except LookupError:
134|            model_error = "app '%s' isn't installed" % model_key[0]
135|        return model_error
136|
137|    # Here are several functions which return CheckMessage instances for the
138|    # most common usages of lazy operations throughout Django. These functions
139|    # take the model that was being waited on as an (app_label, modelname)
140|    # pair, the original lazy function, and its positional and keyword args as
141|    # determined by extract_operation().
142|
143|    def field_error(model_key, func, args, keywords):
144|        error_msg = (
145|            "The field %(field)s was declared with a lazy reference "
146|            "to '%(model)s', but %(model_error)s."
147|        )
148|        params = {
149|            'model': '.'.join(model_key),
150|            'field': keywords['field'],
151|            'model_error': app_model_error(model_key),
152|        }
153|        return Error(error_msg % params, obj=keywords['field'], id='fields.E307')
154|
155|    def signal_connect_error(model_key, func, args, keywords):
156|        error_msg = (
157|            "%(receiver)s was connected to the '%(signal)s' signal with a "
158|            "lazy reference to the sender '%(model)s', but %(model_error)s."
159|        )
160|        receiver = args[0]
161|        # The receiver is either a function or an instance of class
162|        # defining a `__call__` method.
163|        if isinstance(receiver, types.FunctionType):
164|            description = "The function '%s'" % receiver.__name__
165|        elif isinstance(receiver, types.MethodType):
166|            description = "Bound method '%s.%s'" % (receiver.__self__.__class__.__name__, receiver.__name__)
167|        else:
168|            description = "An instance of class '%s'" % receiver.__class__.__name__
169|        signal_name = model_signals.get(func.__self__, 'unknown')
170|        params = {
171|            'model': '.'.join(model_key),
172|            'receiver': description,
173|            'signal': signal_name,
174|            'model_error': app_model_error(model_key),
175|        }
176|        return Error(error_msg % params, obj=receiver.__module__, id='signals.E001')
177|
178|    def default_error(model_key, func, args, keywords):
179|        error_msg = "%(op)s contains a lazy reference to %(model)s, but %(model_error)s."
180|        params = {
181|            'op': func,
182|            'model': '.'.join(model_key),
183|            'model_error': app_model_error(model_key),
184|        }
185|        return Error(error_msg % params, obj=func, id='models.E022')
186|
187|    # Maps common uses of lazy operations to corresponding error functions
188|    # defined above. If a key maps to None, no error will be produced.
189|    # default_error() will be used for usages that don't appear in this dict.
190|    known_lazy = {
191|        ('django.db.models.fields.related', 'resolve_related_class'): field_error,
192|        ('django.db.models.fields.related', 'set_managed'): None,
193|        ('django.dispatch.dispatcher', 'connect'): signal_connect_error,
194|    }
195|
196|    def build_error(model_key, func, args, keywords):
197|        key = (func.__module__, func.__name__)
198|        error_fn = known_lazy.get(key, default_error)
199|        return error_fn(model_key, func, args, keywords) if error_fn else None
200|
201|    return sorted(filter(None, (
202|        build_error(model_key, *extract_operation(func))
203|        for model_key in pending_models
204|        for func in apps._pending_operations[model_key]
205|    )), key=lambda error: error.msg)
206|
207|
208|@register(Tags.models)
209|def check_lazy_references(app_configs=None, **kwargs):
210|    return _check_lazy_references(apps)


============================================================



ACTION:

THOUGHT: Let me check the model options validation code since the error is related to model Meta options:
CODE:
open_file('/workspace/django__django__3.1/django/core/checks/model_checks.py', search_term='E015')

============================================================



OBSERVATION:

---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-1-1d2a32af8a32> in <module>
----> 1 open_file('/workspace/django__django__3.1/django/core/checks/model_checks.py', search_term='E015')

TypeError: open_file() got an unexpected keyword argument 'search_term'

============================================================



ACTION:

THOUGHT: I apologize for the incorrect syntax. Let me use search_file instead:
CODE:
search_file('E015', '/workspace/django__django__3.1/django/core/checks/model_checks.py')

============================================================



OBSERVATION:

[No matches found for "E015" in /workspace/django__django__3.1/django/core/checks/model_checks.py]


============================================================



ACTION:

THOUGHT: Let me check other validation-related files. The error is about model fields, so let's check field validation:
CODE:
search_file('E015', '/workspace/django__django__3.1/django/db/models/options.py')

============================================================



OBSERVATION:

[No matches found for "E015" in /workspace/django__django__3.1/django/db/models/options.py]


============================================================



ACTION:

THOUGHT: Let me search in all files under django directory for E015:
COMMAND:
cd /workspace/django__django__3.1 && find . -type f -exec grep -l "E015" {} \;

============================================================



OBSERVATION:

./tests/admin_checks/tests.py
./tests/invalid_models_tests/test_models.py
./docs/ref/checks.txt
./django/contrib/admin/static/admin/js/vendor/xregexp/xregexp.min.js
./django/contrib/admin/static/admin/js/vendor/xregexp/xregexp.js
./django/contrib/admin/checks.py
./django/db/models/base.py
./django/db/models/__pycache__/base.cpython-36.pyc


============================================================



ACTION:

THOUGHT: Let's check django/db/models/base.py since it's the core model file and not a test file:
CODE:
open_file('/workspace/django__django__3.1/django/db/models/base.py')

============================================================



OBSERVATION:

[File: /workspace/django__django__3.1/django/db/models/base.py (1903 lines total)]
1|import copy
2|import inspect
3|import warnings
4|from functools import partialmethod
5|from itertools import chain
6|
7|from django.apps import apps
8|from django.conf import settings
9|from django.core import checks
10|from django.core.exceptions import (
11|    NON_FIELD_ERRORS, FieldDoesNotExist, FieldError, MultipleObjectsReturned,
12|    ObjectDoesNotExist, ValidationError,
13|)
14|from django.db import (
15|    DEFAULT_DB_ALIAS, DJANGO_VERSION_PICKLE_KEY, DatabaseError, connection,
16|    connections, router, transaction,
17|)
18|from django.db.models import (
19|    NOT_PROVIDED, ExpressionWrapper, IntegerField, Max, Value,
20|)
21|from django.db.models.constants import LOOKUP_SEP
22|from django.db.models.constraints import CheckConstraint, UniqueConstraint
23|from django.db.models.deletion import CASCADE, Collector
24|from django.db.models.fields.related import (
25|    ForeignObjectRel, OneToOneField, lazy_related_operation, resolve_relation,
26|)
27|from django.db.models.functions import Coalesce
28|from django.db.models.manager import Manager
29|from django.db.models.options import Options
30|from django.db.models.query import Q
31|from django.db.models.signals import (
32|    class_prepared, post_init, post_save, pre_init, pre_save,
33|)
34|from django.db.models.utils import make_model_tuple
35|from django.utils.encoding import force_str
36|from django.utils.text import capfirst, get_text_list
37|from django.utils.translation import gettext_lazy as _
38|from django.utils.version import get_version
39|
40|
41|class Deferred:
42|    def __repr__(self):
43|        return '<Deferred field>'
44|
45|    def __str__(self):
46|        return '<Deferred field>'
47|
48|
49|DEFERRED = Deferred()
50|
51|
52|def subclass_exception(name, bases, module, attached_to):
53|    """
54|    Create exception subclass. Used by ModelBase below.
55|
56|    The exception is created in a way that allows it to be pickled, assuming
57|    that the returned exception class will be added as an attribute to the
58|    'attached_to' class.
59|    """
60|    return type(name, bases, {
61|        '__module__': module,
62|        '__qualname__': '%s.%s' % (attached_to.__qualname__, name),
63|    })
64|
65|
66|def _has_contribute_to_class(value):
67|    # Only call contribute_to_class() if it's bound.
68|    return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
69|
70|
71|class ModelBase(type):
72|    """Metaclass for all models."""
73|    def __new__(cls, name, bases, attrs, **kwargs):
74|        super_new = super().__new__
75|
76|        # Also ensure initialization is only performed for subclasses of Model
77|        # (excluding Model class itself).
78|        parents = [b for b in bases if isinstance(b, ModelBase)]
79|        if not parents:
80|            return super_new(cls, name, bases, attrs)
81|
82|        # Create the class.
83|        module = attrs.pop('__module__')
84|        new_attrs = {'__module__': module}
85|        classcell = attrs.pop('__classcell__', None)
86|        if classcell is not None:
87|            new_attrs['__classcell__'] = classcell
88|        attr_meta = attrs.pop('Meta', None)
89|        # Pass all attrs without a (Django-specific) contribute_to_class()
90|        # method to type.__new__() so that they're properly initialized
91|        # (i.e. __set_name__()).
92|        contributable_attrs = {}
93|        for obj_name, obj in list(attrs.items()):
94|            if _has_contribute_to_class(obj):
95|                contributable_attrs[obj_name] = obj
96|            else:
97|                new_attrs[obj_name] = obj
98|        new_class = super_new(cls, name, bases, new_attrs, **kwargs)
99|
100|        abstract = getattr(attr_meta, 'abstract', False)
101|        meta = attr_meta or getattr(new_class, 'Meta', None)
102|        base_meta = getattr(new_class, '_meta', None)
103|
104|        app_label = None
105|
106|        # Look for an application configuration to attach the model to.
107|        app_config = apps.get_containing_app_config(module)
108|
109|        if getattr(meta, 'app_label', None) is None:
110|            if app_config is None:
111|                if not abstract:
112|                    raise RuntimeError(
113|                        "Model class %s.%s doesn't declare an explicit "
114|                        "app_label and isn't in an application in "
115|                        "INSTALLED_APPS." % (module, name)
116|                    )
117|
118|            else:
119|                app_label = app_config.label
120|
121|        new_class.add_to_class('_meta', Options(meta, app_label))
122|        if not abstract:
123|            new_class.add_to_class(
124|                'DoesNotExist',
125|                subclass_exception(
126|                    'DoesNotExist',
127|                    tuple(
128|                        x.DoesNotExist for x in parents if hasattr(x, '_meta') and not x._meta.abstract
129|                    ) or (ObjectDoesNotExist,),
130|                    module,
131|                    attached_to=new_class))
132|            new_class.add_to_class(
133|                'MultipleObjectsReturned',
134|                subclass_exception(
135|                    'MultipleObjectsReturned',
136|                    tuple(
137|                        x.MultipleObjectsReturned for x in parents if hasattr(x, '_meta') and not x._meta.abstract
138|                    ) or (MultipleObjectsReturned,),
139|                    module,
140|                    attached_to=new_class))
141|            if base_meta and not base_meta.abstract:
142|                # Non-abstract child classes inherit some attributes from their
143|                # non-abstract parent (unless an ABC comes before it in the
144|                # method resolution order).
145|                if not hasattr(meta, 'ordering'):
146|                    new_class._meta.ordering = base_meta.ordering
147|                if not hasattr(meta, 'get_latest_by'):
148|                    new_class._meta.get_latest_by = base_meta.get_latest_by
149|
150|        is_proxy = new_class._meta.proxy
151|
152|        # If the model is a proxy, ensure that the base class
153|        # hasn't been swapped out.
154|        if is_proxy and base_meta and base_meta.swapped:
155|            raise TypeError("%s cannot proxy the swapped model '%s'." % (name, base_meta.swapped))
156|
157|        # Add remaining attributes (those with a contribute_to_class() method)
158|        # to the class.
159|        for obj_name, obj in contributable_attrs.items():
160|            new_class.add_to_class(obj_name, obj)
161|
162|        # All the fields of any type declared on this model
163|        new_fields = chain(
164|            new_class._meta.local_fields,
165|            new_class._meta.local_many_to_many,
166|            new_class._meta.private_fields
167|        )
168|        field_names = {f.name for f in new_fields}
169|
170|        # Basic setup for proxy models.
171|        if is_proxy:
172|            base = None
173|            for parent in [kls for kls in parents if hasattr(kls, '_meta')]:
174|                if parent._meta.abstract:
175|                    if parent._meta.fields:
176|                        raise TypeError(
177|                            "Abstract base class containing model fields not "
178|                            "permitted for proxy model '%s'." % name
179|                        )
180|                    else:
181|                        continue
182|                if base is None:
183|                    base = parent
184|                elif parent._meta.concrete_model is not base._meta.concrete_model:
185|                    raise TypeError("Proxy model '%s' has more than one non-abstract model base class." % name)
186|            if base is None:
187|                raise TypeError("Proxy model '%s' has no non-abstract model base class." % name)
188|            new_class._meta.setup_proxy(base)
189|            new_class._meta.concrete_model = base._meta.concrete_model
190|        else:
191|            new_class._meta.concrete_model = new_class
192|
193|        # Collect the parent links for multi-table inheritance.
194|        parent_links = {}
195|        for base in reversed([new_class] + parents):
196|            # Conceptually equivalent to `if base is Model`.
197|            if not hasattr(base, '_meta'):
198|                continue
199|            # Skip concrete parent classes.
200|            if base != new_class and not base._meta.abstract:
201|                continue
202|            # Locate OneToOneField instances.
203|            for field in base._meta.local_fields:
204|                if isinstance(field, OneToOneField):
205|                    related = resolve_relation(new_class, field.remote_field.model)
206|                    parent_links[make_model_tuple(related)] = field
207|
208|        # Track fields inherited from base models.
209|        inherited_attributes = set()
210|        # Do the appropriate setup for any model parents.
211|        for base in new_class.mro():
212|            if base not in parents or not hasattr(base, '_meta'):
213|                # Things without _meta aren't functional models, so they're
214|                # uninteresting parents.
215|                inherited_attributes.update(base.__dict__)
216|                continue
217|
218|            parent_fields = base._meta.local_fields + base._meta.local_many_to_many
219|            if not base._meta.abstract:
220|                # Check for clashes between locally declared fields and those
221|                # on the base classes.
222|                for field in parent_fields:
223|                    if field.name in field_names:
224|                        raise FieldError(
225|                            'Local field %r in class %r clashes with field of '
226|                            'the same name from base class %r.' % (
227|                                field.name,
228|                                name,
229|                                base.__name__,
230|                            )
231|                        )
232|                    else:
233|                        inherited_attributes.add(field.name)
234|
235|                # Concrete classes...
236|                base = base._meta.concrete_model
237|                base_key = make_model_tuple(base)
238|                if base_key in parent_links:
239|                    field = parent_links[base_key]
240|                elif not is_proxy:
241|                    attr_name = '%s_ptr' % base._meta.model_name
242|                    field = OneToOneField(
243|                        base,
244|                        on_delete=CASCADE,
245|                        name=attr_name,
246|                        auto_created=True,
247|                        parent_link=True,
248|                    )
249|
250|                    if attr_name in field_names:
251|                        raise FieldError(
252|                            "Auto-generated field '%s' in class %r for "
253|                            "parent_link to base class %r clashes with "
254|                            "declared field of the same name." % (
255|                                attr_name,
256|                                name,
257|                                base.__name__,
258|                            )
259|                        )
260|
261|                    # Only add the ptr field if it's not already present;
262|                    # e.g. migrations will already have it specified
263|                    if not hasattr(new_class, attr_name):
264|                        new_class.add_to_class(attr_name, field)
265|                else:
266|                    field = None
267|                new_class._meta.parents[base] = field
268|            else:
269|                base_parents = base._meta.parents.copy()
270|
271|                # Add fields from abstract base class if it wasn't overridden.
272|                for field in parent_fields:
273|                    if (field.name not in field_names and
274|                            field.name not in new_class.__dict__ and
275|                            field.name not in inherited_attributes):
276|                        new_field = copy.deepcopy(field)
277|                        new_class.add_to_class(field.name, new_field)
278|                        # Replace parent links defined on this base by the new
279|                        # field. It will be appropriately resolved if required.
280|                        if field.one_to_one:
281|                            for parent, parent_link in base_parents.items():
282|                                if field == parent_link:
283|                                    base_parents[parent] = new_field
284|
285|                # Pass any non-abstract parent classes onto child.
286|                new_class._meta.parents.update(base_parents)
287|
288|            # Inherit private fields (like GenericForeignKey) from the parent
289|            # class
290|            for field in base._meta.private_fields:
291|                if field.name in field_names:
292|                    if not base._meta.abstract:
293|                        raise FieldError(
294|                            'Local field %r in class %r clashes with field of '
295|                            'the same name from base class %r.' % (
296|                                field.name,
297|                                name,
298|                                base.__name__,
299|                            )
300|                        )
301|                else:
302|                    field = copy.deepcopy(field)
303|                    if not base._meta.abstract:
304|                        field.mti_inherited = True
305|                    new_class.add_to_class(field.name, field)
306|
307|        # Copy indexes so that index names are unique when models extend an
308|        # abstract model.
309|        new_class._meta.indexes = [copy.deepcopy(idx) for idx in new_class._meta.indexes]
310|
311|        if abstract:
312|            # Abstract base models can't be instantiated and don't appear in
313|            # the list of models for an app. We do the final setup for them a
314|            # little differently from normal models.
315|            attr_meta.abstract = False
316|            new_class.Meta = attr_meta
317|            return new_class
318|
319|        new_class._prepare()
320|        new_class._meta.apps.register_model(new_class._meta.app_label, new_class)
321|        return new_class
322|
323|    def add_to_class(cls, name, value):
324|        if _has_contribute_to_class(value):
325|            value.contribute_to_class(cls, name)
326|        else:
327|            setattr(cls, name, value)
328|
329|    def _prepare(cls):
330|        """Create some methods once self._meta has been populated."""
331|        opts = cls._meta
332|        opts._prepare(cls)
333|
334|        if opts.order_with_respect_to:
335|            cls.get_next_in_order = partialmethod(cls._get_next_or_previous_in_order, is_next=True)
336|            cls.get_previous_in_order = partialmethod(cls._get_next_or_previous_in_order, is_next=False)
337|
338|            # Defer creating accessors on the foreign class until it has been
339|            # created and registered. If remote_field is None, we're ordering
340|            # with respect to a GenericForeignKey and don't know what the
341|            # foreign class is - we'll add those accessors later in
342|            # contribute_to_class().
343|            if opts.order_with_respect_to.remote_field:
344|                wrt = opts.order_with_respect_to
345|                remote = wrt.remote_field.model
346|                lazy_related_operation(make_foreign_order_accessors, cls, remote)
347|
348|        # Give the class a docstring -- its definition.
349|        if cls.__doc__ is None:
350|            cls.__doc__ = "%s(%s)" % (cls.__name__, ", ".join(f.name for f in opts.fields))
351|
352|        get_absolute_url_override = settings.ABSOLUTE_URL_OVERRIDES.get(opts.label_lower)
353|        if get_absolute_url_override:
354|            setattr(cls, 'get_absolute_url', get_absolute_url_override)
355|
356|        if not opts.managers:
357|            if any(f.name == 'objects' for f in opts.fields):
358|                raise ValueError(
359|                    "Model %s must specify a custom Manager, because it has a "
360|                    "field named 'objects'." % cls.__name__
361|                )
362|            manager = Manager()
363|            manager.auto_created = True
364|            cls.add_to_class('objects', manager)
365|
366|        # Set the name of _meta.indexes. This can't be done in
367|        # Options.contribute_to_class() because fields haven't been added to
368|        # the model at that point.
369|        for index in cls._meta.indexes:
370|            if not index.name:
371|                index.set_name_with_model(cls)
372|
373|        class_prepared.send(sender=cls)
374|
375|    @property
376|    def _base_manager(cls):
377|        return cls._meta.base_manager
378|
379|    @property
380|    def _default_manager(cls):
381|        return cls._meta.default_manager
382|
383|
384|class ModelStateFieldsCacheDescriptor:
385|    def __get__(self, instance, cls=None):
386|        if instance is None:
387|            return self
388|        res = instance.fields_cache = {}
389|        return res
390|
391|
392|class ModelState:
393|    """Store model instance state."""
394|    db = None
395|    # If true, uniqueness validation checks will consider this a new, unsaved
396|    # object. Necessary for correct validation of new instances of objects with
397|    # explicit (non-auto) PKs. This impacts validation only; it has no effect
398|    # on the actual save.
399|    adding = True
400|    fields_cache = ModelStateFieldsCacheDescriptor()
401|
402|
403|class Model(metaclass=ModelBase):
404|
405|    def __init__(self, *args, **kwargs):
406|        # Alias some things as locals to avoid repeat global lookups
407|        cls = self.__class__
408|        opts = self._meta
409|        _setattr = setattr
410|        _DEFERRED = DEFERRED
411|
412|        pre_init.send(sender=cls, args=args, kwargs=kwargs)
413|
414|        # Set up the storage for instance state
415|        self._state = ModelState()
416|
417|        # There is a rather weird disparity here; if kwargs, it's set, then args
418|        # overrides it. It should be one or the other; don't duplicate the work
419|        # The reason for the kwargs check is that standard iterator passes in by
420|        # args, and instantiation for iteration is 33% faster.
421|        if len(args) > len(opts.concrete_fields):
422|            # Daft, but matches old exception sans the err msg.
423|            raise IndexError("Number of args exceeds number of fields")
424|
425|        if not kwargs:
426|            fields_iter = iter(opts.concrete_fields)
427|            # The ordering of the zip calls matter - zip throws StopIteration
428|            # when an iter throws it. So if the first iter throws it, the second
429|            # is *not* consumed. We rely on this, so don't change the order
430|            # without changing the logic.
431|            for val, field in zip(args, fields_iter):
432|                if val is _DEFERRED:
433|                    continue
434|                _setattr(self, field.attname, val)
435|        else:
436|            # Slower, kwargs-ready version.
437|            fields_iter = iter(opts.fields)
438|            for val, field in zip(args, fields_iter):
439|                if val is _DEFERRED:
440|                    continue
441|                _setattr(self, field.attname, val)
442|                kwargs.pop(field.name, None)
443|
444|        # Now we're left with the unprocessed fields that *must* come from
445|        # keywords, or default.
446|
447|        for field in fields_iter:
448|            is_related_object = False
449|            # Virtual field
450|            if field.attname not in kwargs and field.column is None:
451|                continue
452|            if kwargs:
453|                if isinstance(field.remote_field, ForeignObjectRel):
454|                    try:
455|                        # Assume object instance was passed in.
456|                        rel_obj = kwargs.pop(field.name)
457|                        is_related_object = True
458|                    except KeyError:
459|                        try:
460|                            # Object instance wasn't passed in -- must be an ID.
461|                            val = kwargs.pop(field.attname)
462|                        except KeyError:
463|                            val = field.get_default()
464|                else:
465|                    try:
466|                        val = kwargs.pop(field.attname)
467|                    except KeyError:
468|                        # This is done with an exception rather than the
469|                        # default argument on pop because we don't want
470|                        # get_default() to be evaluated, and then not used.
471|                        # Refs #12057.
472|                        val = field.get_default()
473|            else:
474|                val = field.get_default()
475|
476|            if is_related_object:
477|                # If we are passed a related instance, set it using the
478|                # field.name instead of field.attname (e.g. "user" instead of
479|                # "user_id") so that the object gets properly cached (and type
480|                # checked) by the RelatedObjectDescriptor.
481|                if rel_obj is not _DEFERRED:
482|                    _setattr(self, field.name, rel_obj)
483|            else:
484|                if val is not _DEFERRED:
485|                    _setattr(self, field.attname, val)
486|
487|        if kwargs:
488|            property_names = opts._property_names
489|            for prop in tuple(kwargs):
490|                try:
491|                    # Any remaining kwargs must correspond to properties or
492|                    # virtual fields.
493|                    if prop in property_names or opts.get_field(prop):
494|                        if kwargs[prop] is not _DEFERRED:
495|                            _setattr(self, prop, kwargs[prop])
496|                        del kwargs[prop]
497|                except (AttributeError, FieldDoesNotExist):
498|                    pass
499|            for kwarg in kwargs:
500|                raise TypeError("%s() got an unexpected keyword argument '%s'" % (cls.__name__, kwarg))
501|        super().__init__()
502|        post_init.send(sender=cls, instance=self)
503|
504|    @classmethod
505|    def from_db(cls, db, field_names, values):
506|        if len(values) != len(cls._meta.concrete_fields):
507|            values_iter = iter(values)
508|            values = [
509|                next(values_iter) if f.attname in field_names else DEFERRED
510|                for f in cls._meta.concrete_fields
511|            ]
512|        new = cls(*values)
513|        new._state.adding = False
514|        new._state.db = db
515|        return new
516|
517|    def __repr__(self):
518|        return '<%s: %s>' % (self.__class__.__name__, self)
519|
520|    def __str__(self):
521|        return '%s object (%s)' % (self.__class__.__name__, self.pk)
522|
523|    def __eq__(self, other):
524|        if not isinstance(other, Model):
525|            return False
526|        if self._meta.concrete_model != other._meta.concrete_model:
527|            return False
528|        my_pk = self.pk
529|        if my_pk is None:
530|            return self is other
531|        return my_pk == other.pk
532|
533|    def __hash__(self):
534|        if self.pk is None:
535|            raise TypeError("Model instances without primary key value are unhashable")
536|        return hash(self.pk)
537|
538|    def __reduce__(self):
539|        data = self.__getstate__()
540|        data[DJANGO_VERSION_PICKLE_KEY] = get_version()
541|        class_id = self._meta.app_label, self._meta.object_name
542|        return model_unpickle, (class_id,), data
543|
544|    def __getstate__(self):
545|        """Hook to allow choosing the attributes to pickle."""
546|        return self.__dict__
547|
548|    def __setstate__(self, state):
549|        msg = None
550|        pickled_version = state.get(DJANGO_VERSION_PICKLE_KEY)
551|        if pickled_version:
552|            current_version = get_version()
553|            if current_version != pickled_version:
554|                msg = (
555|                    "Pickled model instance's Django version %s does not match "
556|                    "the current version %s." % (pickled_version, current_version)
557|                )
558|        else:
559|            msg = "Pickled model instance's Django version is not specified."
560|
561|        if msg:
562|            warnings.warn(msg, RuntimeWarning, stacklevel=2)
563|
564|        self.__dict__.update(state)
565|
566|    def _get_pk_val(self, meta=None):
567|        meta = meta or self._meta
568|        return getattr(self, meta.pk.attname)
569|
570|    def _set_pk_val(self, value):
571|        return setattr(self, self._meta.pk.attname, value)
572|
573|    pk = property(_get_pk_val, _set_pk_val)
574|
575|    def get_deferred_fields(self):
576|        """
577|        Return a set containing names of deferred fields for this instance.
578|        """
579|        return {
580|            f.attname for f in self._meta.concrete_fields
581|            if f.attname not in self.__dict__
582|        }
583|
584|    def refresh_from_db(self, using=None, fields=None):
585|        """
586|        Reload field values from the database.
587|
588|        By default, the reloading happens from the database this instance was
589|        loaded from, or by the read router if this instance wasn't loaded from
590|        any database. The using parameter will override the default.
591|
592|        Fields can be used to specify which fields to reload. The fields
593|        should be an iterable of field attnames. If fields is None, then
594|        all non-deferred fields are reloaded.
595|
596|        When accessing deferred fields of an instance, the deferred loading
597|        of the field will call this method.
598|        """
599|        if fields is None:
600|            self._prefetched_objects_cache = {}
601|        else:
602|            prefetched_objects_cache = getattr(self, '_prefetched_objects_cache', ())
603|            for field in fields:
604|                if field in prefetched_objects_cache:
605|                    del prefetched_objects_cache[field]
606|                    fields.remove(field)
607|            if not fields:
608|                return
609|            if any(LOOKUP_SEP in f for f in fields):
610|                raise ValueError(
611|                    'Found "%s" in fields argument. Relations and transforms '
612|                    'are not allowed in fields.' % LOOKUP_SEP)
613|
614|        hints = {'instance': self}
615|        db_instance_qs = self.__class__._base_manager.db_manager(using, hints=hints).filter(pk=self.pk)
616|
617|        # Use provided fields, if not set then reload all non-deferred fields.
618|        deferred_fields = self.get_deferred_fields()
619|        if fields is not None:
620|            fields = list(fields)
621|            db_instance_qs = db_instance_qs.only(*fields)
622|        elif deferred_fields:
623|            fields = [f.attname for f in self._meta.concrete_fields
624|                      if f.attname not in deferred_fields]
625|            db_instance_qs = db_instance_qs.only(*fields)
626|
627|        db_instance = db_instance_qs.get()
628|        non_loaded_fields = db_instance.get_deferred_fields()
629|        for field in self._meta.concrete_fields:
630|            if field.attname in non_loaded_fields:
631|                # This field wasn't refreshed - skip ahead.
632|                continue
633|            setattr(self, field.attname, getattr(db_instance, field.attname))
634|            # Clear cached foreign keys.
635|            if field.is_relation and field.is_cached(self):
636|                field.delete_cached_value(self)
637|
638|        # Clear cached relations.
639|        for field in self._meta.related_objects:
640|            if field.is_cached(self):
641|                field.delete_cached_value(self)
642|
643|        self._state.db = db_instance._state.db
644|
645|    def serializable_value(self, field_name):
646|        """
647|        Return the value of the field name for this instance. If the field is
648|        a foreign key, return the id value instead of the object. If there's
649|        no Field object with this name on the model, return the model
650|        attribute's value.
651|
652|        Used to serialize a field's value (in the serializer, or form output,
653|        for example). Normally, you would just access the attribute directly
654|        and not use this method.
655|        """
656|        try:
657|            field = self._meta.get_field(field_name)
658|        except FieldDoesNotExist:
659|            return getattr(self, field_name)
660|        return getattr(self, field.attname)
661|
662|    def save(self, force_insert=False, force_update=False, using=None,
663|             update_fields=None):
664|        """
665|        Save the current instance. Override this in a subclass if you want to
666|        control the saving process.
667|
668|        The 'force_insert' and 'force_update' parameters can be used to insist
669|        that the "save" must be an SQL insert or update (or equivalent for
670|        non-SQL backends), respectively. Normally, they should not be set.
671|        """
672|        # Ensure that a model instance without a PK hasn't been assigned to
673|        # a ForeignKey or OneToOneField on this model. If the field is
674|        # nullable, allowing the save() would result in silent data loss.
675|        for field in self._meta.concrete_fields:
676|            # If the related field isn't cached, then an instance hasn't
677|            # been assigned and there's no need to worry about this check.
678|            if field.is_relation and field.is_cached(self):
679|                obj = getattr(self, field.name, None)
680|                if not obj:
681|                    continue
682|                # A pk may have been assigned manually to a model instance not
683|                # saved to the database (or auto-generated in a case like
684|                # UUIDField), but we allow the save to proceed and rely on the
685|                # database to raise an IntegrityError if applicable. If
686|                # constraints aren't supported by the database, there's the
687|                # unavoidable risk of data corruption.
688|                if obj.pk is None:
689|                    # Remove the object from a related instance cache.
690|                    if not field.remote_field.multiple:
691|                        field.remote_field.delete_cached_value(obj)
692|                    raise ValueError(
693|                        "save() prohibited to prevent data loss due to "
694|                        "unsaved related object '%s'." % field.name
695|                    )
696|                elif getattr(self, field.attname) is None:
697|                    # Use pk from related object if it has been saved after
698|                    # an assignment.
699|                    setattr(self, field.attname, obj.pk)
700|                # If the relationship's pk/to_field was changed, clear the
701|                # cached relationship.
702|                if getattr(obj, field.target_field.attname) != getattr(self, field.attname):
703|                    field.delete_cached_value(self)
704|
705|        using = using or router.db_for_write(self.__class__, instance=self)
706|        if force_insert and (force_update or update_fields):
707|            raise ValueError("Cannot force both insert and updating in model saving.")
708|
709|        deferred_fields = self.get_deferred_fields()
710|        if update_fields is not None:
711|            # If update_fields is empty, skip the save. We do also check for
712|            # no-op saves later on for inheritance cases. This bailout is
713|            # still needed for skipping signal sending.
714|            if not update_fields:
715|                return
716|
717|            update_fields = frozenset(update_fields)
718|            field_names = set()
719|
720|            for field in self._meta.fields:
721|                if not field.primary_key:
722|                    field_names.add(field.name)
723|
724|                    if field.name != field.attname:
725|                        field_names.add(field.attname)
726|
727|            non_model_fields = update_fields.difference(field_names)
728|
729|            if non_model_fields:
730|                raise ValueError("The following fields do not exist in this "
731|                                 "model or are m2m fields: %s"
732|                                 % ', '.join(non_model_fields))
733|
734|        # If saving to the same database, and this model is deferred, then
735|        # automatically do an "update_fields" save on the loaded fields.
736|        elif not force_insert and deferred_fields and using == self._state.db:
737|            field_names = set()
738|            for field in self._meta.concrete_fields:
739|                if not field.primary_key and not hasattr(field, 'through'):
740|                    field_names.add(field.attname)
741|            loaded_fields = field_names.difference(deferred_fields)
742|            if loaded_fields:
743|                update_fields = frozenset(loaded_fields)
744|
745|        self.save_base(using=using, force_insert=force_insert,
746|                       force_update=force_update, update_fields=update_fields)
747|    save.alters_data = True
748|
749|    def save_base(self, raw=False, force_insert=False,
750|                  force_update=False, using=None, update_fields=None):
751|        """
752|        Handle the parts of saving which should be done only once per save,
753|        yet need to be done in raw saves, too. This includes some sanity
754|        checks and signal sending.
755|
756|        The 'raw' argument is telling save_base not to save any parent
757|        models and not to do any changes to the values before save. This
758|        is used by fixture loading.
759|        """
760|        using = using or router.db_for_write(self.__class__, instance=self)
761|        assert not (force_insert and (force_update or update_fields))
762|        assert update_fields is None or update_fields
763|        cls = origin = self.__class__
764|        # Skip proxies, but keep the origin as the proxy model.
765|        if cls._meta.proxy:
766|            cls = cls._meta.concrete_model
767|        meta = cls._meta
768|        if not meta.auto_created:
769|            pre_save.send(
770|                sender=origin, instance=self, raw=raw, using=using,
771|                update_fields=update_fields,
772|            )
773|        # A transaction isn't needed if one query is issued.
774|        if meta.parents:
775|            context_manager = transaction.atomic(using=using, savepoint=False)
776|        else:
777|            context_manager = transaction.mark_for_rollback_on_error(using=using)
778|        with context_manager:
779|            parent_inserted = False
780|            if not raw:
781|                parent_inserted = self._save_parents(cls, using, update_fields)
782|            updated = self._save_table(
783|                raw, cls, force_insert or parent_inserted,
784|                force_update, using, update_fields,
785|            )
786|        # Store the database on which the object was saved
787|        self._state.db = using
788|        # Once saved, this is no longer a to-be-added instance.
789|        self._state.adding = False
790|
791|        # Signal that the save is complete
792|        if not meta.auto_created:
793|            post_save.send(
794|                sender=origin, instance=self, created=(not updated),
795|                update_fields=update_fields, raw=raw, using=using,
796|            )
797|
798|    save_base.alters_data = True
799|
800|    def _save_parents(self, cls, using, update_fields):
801|        """Save all the parents of cls using values from self."""
802|        meta = cls._meta
803|        inserted = False
804|        for parent, field in meta.parents.items():
805|            # Make sure the link fields are synced between parent and self.
806|            if (field and getattr(self, parent._meta.pk.attname) is None and
807|                    getattr(self, field.attname) is not None):
808|                setattr(self, parent._meta.pk.attname, getattr(self, field.attname))
809|            parent_inserted = self._save_parents(cls=parent, using=using, update_fields=update_fields)
810|            updated = self._save_table(
811|                cls=parent, using=using, update_fields=update_fields,
812|                force_insert=parent_inserted,
813|            )
814|            if not updated:
815|                inserted = True
816|            # Set the parent's PK value to self.
817|            if field:
818|                setattr(self, field.attname, self._get_pk_val(parent._meta))
819|                # Since we didn't have an instance of the parent handy set
820|                # attname directly, bypassing the descriptor. Invalidate
821|                # the related object cache, in case it's been accidentally
822|                # populated. A fresh instance will be re-built from the
823|                # database if necessary.
824|                if field.is_cached(self):
825|                    field.delete_cached_value(self)
826|        return inserted
827|
828|    def _save_table(self, raw=False, cls=None, force_insert=False,
829|                    force_update=False, using=None, update_fields=None):
830|        """
831|        Do the heavy-lifting involved in saving. Update or insert the data
832|        for a single table.
833|        """
834|        meta = cls._meta
835|        non_pks = [f for f in meta.local_concrete_fields if not f.primary_key]
836|
837|        if update_fields:
838|            non_pks = [f for f in non_pks
839|                       if f.name in update_fields or f.attname in update_fields]
840|
841|        pk_val = self._get_pk_val(meta)
842|        if pk_val is None:
843|            pk_val = meta.pk.get_pk_value_on_save(self)
844|            setattr(self, meta.pk.attname, pk_val)
845|        pk_set = pk_val is not None
846|        if not pk_set and (force_update or update_fields):
847|            raise ValueError("Cannot force an update in save() with no primary key.")
848|        updated = False
849|        # Skip an UPDATE when adding an instance and primary key has a default.
850|        if (
851|            not force_insert and
852|            self._state.adding and
853|            self._meta.pk.default and
854|            self._meta.pk.default is not NOT_PROVIDED
855|        ):
856|            force_insert = True
857|        # If possible, try an UPDATE. If that doesn't update anything, do an INSERT.
858|        if pk_set and not force_insert:
859|            base_qs = cls._base_manager.using(using)
860|            values = [(f, None, (getattr(self, f.attname) if raw else f.pre_save(self, False)))
861|                      for f in non_pks]
862|            forced_update = update_fields or force_update
863|            updated = self._do_update(base_qs, using, pk_val, values, update_fields,
864|                                      forced_update)
865|            if force_update and not updated:
866|                raise DatabaseError("Forced update did not affect any rows.")
867|            if update_fields and not updated:
868|                raise DatabaseError("Save with update_fields did not affect any rows.")
869|        if not updated:
870|            if meta.order_with_respect_to:
871|                # If this is a model with an order_with_respect_to
872|                # autopopulate the _order field
873|                field = meta.order_with_respect_to
874|                filter_args = field.get_filter_kwargs_for_object(self)
875|                self._order = cls._base_manager.using(using).filter(**filter_args).aggregate(
876|                    _order__max=Coalesce(
877|                        ExpressionWrapper(Max('_order') + Value(1), output_field=IntegerField()),
878|                        Value(0),
879|                    ),
880|                )['_order__max']
881|            fields = meta.local_concrete_fields
882|            if not pk_set:
883|                fields = [f for f in fields if f is not meta.auto_field]
884|
885|            returning_fields = meta.db_returning_fields
886|            results = self._do_insert(cls._base_manager, using, fields, returning_fields, raw)
887|            for result, field in zip(results, returning_fields):
888|                setattr(self, field.attname, result)
889|        return updated
890|
891|    def _do_update(self, base_qs, using, pk_val, values, update_fields, forced_update):
892|        """
893|        Try to update the model. Return True if the model was updated (if an
894|        update query was done and a matching row was found in the DB).
895|        """
896|        filtered = base_qs.filter(pk=pk_val)
897|        if not values:
898|            # We can end up here when saving a model in inheritance chain where
899|            # update_fields doesn't target any field in current model. In that
900|            # case we just say the update succeeded. Another case ending up here
901|            # is a model with just PK - in that case check that the PK still
902|            # exists.
903|            return update_fields is not None or filtered.exists()
904|        if self._meta.select_on_save and not forced_update:
905|            return (
906|                filtered.exists() and
907|                # It may happen that the object is deleted from the DB right after
908|                # this check, causing the subsequent UPDATE to return zero matching
909|                # rows. The same result can occur in some rare cases when the
910|                # database returns zero despite the UPDATE being executed
911|                # successfully (a row is matched and updated). In order to
912|                # distinguish these two cases, the object's existence in the
913|                # database is again checked for if the UPDATE query returns 0.
914|                (filtered._update(values) > 0 or filtered.exists())
915|            )
916|        return filtered._update(values) > 0
917|
918|    def _do_insert(self, manager, using, fields, returning_fields, raw):
919|        """
920|        Do an INSERT. If returning_fields is defined then this method should
921|        return the newly created data for the model.
922|        """
923|        return manager._insert(
924|            [self], fields=fields, returning_fields=returning_fields,
925|            using=using, raw=raw,
926|        )
927|
928|    def delete(self, using=None, keep_parents=False):
929|        using = using or router.db_for_write(self.__class__, instance=self)
930|        assert self.pk is not None, (
931|            "%s object can't be deleted because its %s attribute is set to None." %
932|            (self._meta.object_name, self._meta.pk.attname)
933|        )
934|
935|        collector = Collector(using=using)
936|        collector.collect([self], keep_parents=keep_parents)
937|        return collector.delete()
938|
939|    delete.alters_data = True
940|
941|    def _get_FIELD_display(self, field):
942|        value = getattr(self, field.attname)
943|        # force_str() to coerce lazy strings.
944|        return force_str(dict(field.flatchoices).get(value, value), strings_only=True)
945|
946|    def _get_next_or_previous_by_FIELD(self, field, is_next, **kwargs):
947|        if not self.pk:
948|            raise ValueError("get_next/get_previous cannot be used on unsaved objects.")
949|        op = 'gt' if is_next else 'lt'
950|        order = '' if is_next else '-'
951|        param = getattr(self, field.attname)
952|        q = Q(**{'%s__%s' % (field.name, op): param})
953|        q = q | Q(**{field.name: param, 'pk__%s' % op: self.pk})
954|        qs = self.__class__._default_manager.using(self._state.db).filter(**kwargs).filter(q).order_by(
955|            '%s%s' % (order, field.name), '%spk' % order
956|        )
957|        try:
958|            return qs[0]
959|        except IndexError:
960|            raise self.DoesNotExist("%s matching query does not exist." % self.__class__._meta.object_name)
961|
962|    def _get_next_or_previous_in_order(self, is_next):
963|        cachename = "__%s_order_cache" % is_next
964|        if not hasattr(self, cachename):
965|            op = 'gt' if is_next else 'lt'
966|            order = '_order' if is_next else '-_order'
967|            order_field = self._meta.order_with_respect_to
968|            filter_args = order_field.get_filter_kwargs_for_object(self)
969|            obj = self.__class__._default_manager.filter(**filter_args).filter(**{
970|                '_order__%s' % op: self.__class__._default_manager.values('_order').filter(**{
971|                    self._meta.pk.name: self.pk
972|                })
973|            }).order_by(order)[:1].get()
974|            setattr(self, cachename, obj)
975|        return getattr(self, cachename)
976|
977|    def prepare_database_save(self, field):
978|        if self.pk is None:
979|            raise ValueError("Unsaved model instance %r cannot be used in an ORM query." % self)
980|        return getattr(self, field.remote_field.get_related_field().attname)
981|
982|    def clean(self):
983|        """
984|        Hook for doing any extra model-wide validation after clean() has been
985|        called on every field by self.clean_fields. Any ValidationError raised
986|        by this method will not be associated with a particular field; it will
987|        have a special-case association with the field defined by NON_FIELD_ERRORS.
988|        """
989|        pass
990|
991|    def validate_unique(self, exclude=None):
992|        """
993|        Check unique constraints on the model and raise ValidationError if any
994|        failed.
995|        """
996|        unique_checks, date_checks = self._get_unique_checks(exclude=exclude)
997|
998|        errors = self._perform_unique_checks(unique_checks)
999|        date_errors = self._perform_date_checks(date_checks)
1000|
(903 more lines below)


============================================================



ACTION:

THOUGHT: Let me scroll down to find the E015 error:
CODE:
scroll_down()

============================================================



OBSERVATION:

[File: /workspace/django__django__3.1/django/db/models/base.py (1903 lines total)]
(500 more lines above)
501|        super().__init__()
502|        post_init.send(sender=cls, instance=self)
503|
504|    @classmethod
505|    def from_db(cls, db, field_names, values):
506|        if len(values) != len(cls._meta.concrete_fields):
507|            values_iter = iter(values)
508|            values = [
509|                next(values_iter) if f.attname in field_names else DEFERRED
510|                for f in cls._meta.concrete_fields
511|            ]
512|        new = cls(*values)
513|        new._state.adding = False
514|        new._state.db = db
515|        return new
516|
517|    def __repr__(self):
518|        return '<%s: %s>' % (self.__class__.__name__, self)
519|
520|    def __str__(self):
521|        return '%s object (%s)' % (self.__class__.__name__, self.pk)
522|
523|    def __eq__(self, other):
524|        if not isinstance(other, Model):
525|            return False
526|        if self._meta.concrete_model != other._meta.concrete_model:
527|            return False
528|        my_pk = self.pk
529|        if my_pk is None:
530|            return self is other
531|        return my_pk == other.pk
532|
533|    def __hash__(self):
534|        if self.pk is None:
535|            raise TypeError("Model instances without primary key value are unhashable")
536|        return hash(self.pk)
537|
538|    def __reduce__(self):
539|        data = self.__getstate__()
540|        data[DJANGO_VERSION_PICKLE_KEY] = get_version()
541|        class_id = self._meta.app_label, self._meta.object_name
542|        return model_unpickle, (class_id,), data
543|
544|    def __getstate__(self):
545|        """Hook to allow choosing the attributes to pickle."""
546|        return self.__dict__
547|
548|    def __setstate__(self, state):
549|        msg = None
550|        pickled_version = state.get(DJANGO_VERSION_PICKLE_KEY)
551|        if pickled_version:
552|            current_version = get_version()
553|            if current_version != pickled_version:
554|                msg = (
555|                    "Pickled model instance's Django version %s does not match "
556|                    "the current version %s." % (pickled_version, current_version)
557|                )
558|        else:
559|            msg = "Pickled model instance's Django version is not specified."
560|
561|        if msg:
562|            warnings.warn(msg, RuntimeWarning, stacklevel=2)
563|
564|        self.__dict__.update(state)
565|
566|    def _get_pk_val(self, meta=None):
567|        meta = meta or self._meta
568|        return getattr(self, meta.pk.attname)
569|
570|    def _set_pk_val(self, value):
571|        return setattr(self, self._meta.pk.attname, value)
572|
573|    pk = property(_get_pk_val, _set_pk_val)
574|
575|    def get_deferred_fields(self):
576|        """
577|        Return a set containing names of deferred fields for this instance.
578|        """
579|        return {
580|            f.attname for f in self._meta.concrete_fields
581|            if f.attname not in self.__dict__
582|        }
583|
584|    def refresh_from_db(self, using=None, fields=None):
585|        """
586|        Reload field values from the database.
587|
588|        By default, the reloading happens from the database this instance was
589|        loaded from, or by the read router if this instance wasn't loaded from
590|        any database. The using parameter will override the default.
591|
592|        Fields can be used to specify which fields to reload. The fields
593|        should be an iterable of field attnames. If fields is None, then
594|        all non-deferred fields are reloaded.
595|
596|        When accessing deferred fields of an instance, the deferred loading
597|        of the field will call this method.
598|        """
599|        if fields is None:
600|            self._prefetched_objects_cache = {}
601|        else:
602|            prefetched_objects_cache = getattr(self, '_prefetched_objects_cache', ())
603|            for field in fields:
604|                if field in prefetched_objects_cache:
605|                    del prefetched_objects_cache[field]
606|                    fields.remove(field)
607|            if not fields:
608|                return
609|            if any(LOOKUP_SEP in f for f in fields):
610|                raise ValueError(
611|                    'Found "%s" in fields argument. Relations and transforms '
612|                    'are not allowed in fields.' % LOOKUP_SEP)
613|
614|        hints = {'instance': self}
615|        db_instance_qs = self.__class__._base_manager.db_manager(using, hints=hints).filter(pk=self.pk)
616|
617|        # Use provided fields, if not set then reload all non-deferred fields.
618|        deferred_fields = self.get_deferred_fields()
619|        if fields is not None:
620|            fields = list(fields)
621|            db_instance_qs = db_instance_qs.only(*fields)
622|        elif deferred_fields:
623|            fields = [f.attname for f in self._meta.concrete_fields
624|                      if f.attname not in deferred_fields]
625|            db_instance_qs = db_instance_qs.only(*fields)
626|
627|        db_instance = db_instance_qs.get()
628|        non_loaded_fields = db_instance.get_deferred_fields()
629|        for field in self._meta.concrete_fields:
630|            if field.attname in non_loaded_fields:
631|                # This field wasn't refreshed - skip ahead.
632|                continue
633|            setattr(self, field.attname, getattr(db_instance, field.attname))
634|            # Clear cached foreign keys.
635|            if field.is_relation and field.is_cached(self):
636|                field.delete_cached_value(self)
637|
638|        # Clear cached relations.
639|        for field in self._meta.related_objects:
640|            if field.is_cached(self):
641|                field.delete_cached_value(self)
642|
643|        self._state.db = db_instance._state.db
644|
645|    def serializable_value(self, field_name):
646|        """
647|        Return the value of the field name for this instance. If the field is
648|        a foreign key, return the id value instead of the object. If there's
649|        no Field object with this name on the model, return the model
650|        attribute's value.
651|
652|        Used to serialize a field's value (in the serializer, or form output,
653|        for example). Normally, you would just access the attribute directly
654|        and not use this method.
655|        """
656|        try:
657|            field = self._meta.get_field(field_name)
658|        except FieldDoesNotExist:
659|            return getattr(self, field_name)
660|        return getattr(self, field.attname)
661|
662|    def save(self, force_insert=False, force_update=False, using=None,
663|             update_fields=None):
664|        """
665|        Save the current instance. Override this in a subclass if you want to
666|        control the saving process.
667|
668|        The 'force_insert' and 'force_update' parameters can be used to insist
669|        that the "save" must be an SQL insert or update (or equivalent for
670|        non-SQL backends), respectively. Normally, they should not be set.
671|        """
672|        # Ensure that a model instance without a PK hasn't been assigned to
673|        # a ForeignKey or OneToOneField on this model. If the field is
674|        # nullable, allowing the save() would result in silent data loss.
675|        for field in self._meta.concrete_fields:
676|            # If the related field isn't cached, then an instance hasn't
677|            # been assigned and there's no need to worry about this check.
678|            if field.is_relation and field.is_cached(self):
679|                obj = getattr(self, field.name, None)
680|                if not obj:
681|                    continue
682|                # A pk may have been assigned manually to a model instance not
683|                # saved to the database (or auto-generated in a case like
684|                # UUIDField), but we allow the save to proceed and rely on the
685|                # database to raise an IntegrityError if applicable. If
686|                # constraints aren't supported by the database, there's the
687|                # unavoidable risk of data corruption.
688|                if obj.pk is None:
689|                    # Remove the object from a related instance cache.
690|                    if not field.remote_field.multiple:
691|                        field.remote_field.delete_cached_value(obj)
692|                    raise ValueError(
693|                        "save() prohibited to prevent data loss due to "
694|                        "unsaved related object '%s'." % field.name
695|                    )
696|                elif getattr(self, field.attname) is None:
697|                    # Use pk from related object if it has been saved after
698|                    # an assignment.
699|                    setattr(self, field.attname, obj.pk)
700|                # If the relationship's pk/to_field was changed, clear the
701|                # cached relationship.
702|                if getattr(obj, field.target_field.attname) != getattr(self, field.attname):
703|                    field.delete_cached_value(self)
704|
705|        using = using or router.db_for_write(self.__class__, instance=self)
706|        if force_insert and (force_update or update_fields):
707|            raise ValueError("Cannot force both insert and updating in model saving.")
708|
709|        deferred_fields = self.get_deferred_fields()
710|        if update_fields is not None:
711|            # If update_fields is empty, skip the save. We do also check for
712|            # no-op saves later on for inheritance cases. This bailout is
713|            # still needed for skipping signal sending.
714|            if not update_fields:
715|                return
716|
717|            update_fields = frozenset(update_fields)
718|            field_names = set()
719|
720|            for field in self._meta.fields:
721|                if not field.primary_key:
722|                    field_names.add(field.name)
723|
724|                    if field.name != field.attname:
725|                        field_names.add(field.attname)
726|
727|            non_model_fields = update_fields.difference(field_names)
728|
729|            if non_model_fields:
730|                raise ValueError("The following fields do not exist in this "
731|                                 "model or are m2m fields: %s"
732|                                 % ', '.join(non_model_fields))
733|
734|        # If saving to the same database, and this model is deferred, then
735|        # automatically do an "update_fields" save on the loaded fields.
736|        elif not force_insert and deferred_fields and using == self._state.db:
737|            field_names = set()
738|            for field in self._meta.concrete_fields:
739|                if not field.primary_key and not hasattr(field, 'through'):
740|                    field_names.add(field.attname)
741|            loaded_fields = field_names.difference(deferred_fields)
742|            if loaded_fields:
743|                update_fields = frozenset(loaded_fields)
744|
745|        self.save_base(using=using, force_insert=force_insert,
746|                       force_update=force_update, update_fields=update_fields)
747|    save.alters_data = True
748|
749|    def save_base(self, raw=False, force_insert=False,
750|                  force_update=False, using=None, update_fields=None):
751|        """
752|        Handle the parts of saving which should be done only once per save,
753|        yet need to be done in raw saves, too. This includes some sanity
754|        checks and signal sending.
755|
756|        The 'raw' argument is telling save_base not to save any parent
757|        models and not to do any changes to the values before save. This
758|        is used by fixture loading.
759|        """
760|        using = using or router.db_for_write(self.__class__, instance=self)
761|        assert not (force_insert and (force_update or update_fields))
762|        assert update_fields is None or update_fields
763|        cls = origin = self.__class__
764|        # Skip proxies, but keep the origin as the proxy model.
765|        if cls._meta.proxy:
766|            cls = cls._meta.concrete_model
767|        meta = cls._meta
768|        if not meta.auto_created:
769|            pre_save.send(
770|                sender=origin, instance=self, raw=raw, using=using,
771|                update_fields=update_fields,
772|            )
773|        # A transaction isn't needed if one query is issued.
774|        if meta.parents:
775|            context_manager = transaction.atomic(using=using, savepoint=False)
776|        else:
777|            context_manager = transaction.mark_for_rollback_on_error(using=using)
778|        with context_manager:
779|            parent_inserted = False
780|            if not raw:
781|                parent_inserted = self._save_parents(cls, using, update_fields)
782|            updated = self._save_table(
783|                raw, cls, force_insert or parent_inserted,
784|                force_update, using, update_fields,
785|            )
786|        # Store the database on which the object was saved
787|        self._state.db = using
788|        # Once saved, this is no longer a to-be-added instance.
789|        self._state.adding = False
790|
791|        # Signal that the save is complete
792|        if not meta.auto_created:
793|            post_save.send(
794|                sender=origin, instance=self, created=(not updated),
795|                update_fields=update_fields, raw=raw, using=using,
796|            )
797|
798|    save_base.alters_data = True
799|
800|    def _save_parents(self, cls, using, update_fields):
801|        """Save all the parents of cls using values from self."""
802|        meta = cls._meta
803|        inserted = False
804|        for parent, field in meta.parents.items():
805|            # Make sure the link fields are synced between parent and self.
806|            if (field and getattr(self, parent._meta.pk.attname) is None and
807|                    getattr(self, field.attname) is not None):
808|                setattr(self, parent._meta.pk.attname, getattr(self, field.attname))
809|            parent_inserted = self._save_parents(cls=parent, using=using, update_fields=update_fields)
810|            updated = self._save_table(
811|                cls=parent, using=using, update_fields=update_fields,
812|                force_insert=parent_inserted,
813|            )
814|            if not updated:
815|                inserted = True
816|            # Set the parent's PK value to self.
817|            if field:
818|                setattr(self, field.attname, self._get_pk_val(parent._meta))
819|                # Since we didn't have an instance of the parent handy set
820|                # attname directly, bypassing the descriptor. Invalidate
821|                # the related object cache, in case it's been accidentally
822|                # populated. A fresh instance will be re-built from the
823|                # database if necessary.
824|                if field.is_cached(self):
825|                    field.delete_cached_value(self)
826|        return inserted
827|
828|    def _save_table(self, raw=False, cls=None, force_insert=False,
829|                    force_update=False, using=None, update_fields=None):
830|        """
831|        Do the heavy-lifting involved in saving. Update or insert the data
832|        for a single table.
833|        """
834|        meta = cls._meta
835|        non_pks = [f for f in meta.local_concrete_fields if not f.primary_key]
836|
837|        if update_fields:
838|            non_pks = [f for f in non_pks
839|                       if f.name in update_fields or f.attname in update_fields]
840|
841|        pk_val = self._get_pk_val(meta)
842|        if pk_val is None:
843|            pk_val = meta.pk.get_pk_value_on_save(self)
844|            setattr(self, meta.pk.attname, pk_val)
845|        pk_set = pk_val is not None
846|        if not pk_set and (force_update or update_fields):
847|            raise ValueError("Cannot force an update in save() with no primary key.")
848|        updated = False
849|        # Skip an UPDATE when adding an instance and primary key has a default.
850|        if (
851|            not force_insert and
852|            self._state.adding and
853|            self._meta.pk.default and
854|            self._meta.pk.default is not NOT_PROVIDED
855|        ):
856|            force_insert = True
857|        # If possible, try an UPDATE. If that doesn't update anything, do an INSERT.
858|        if pk_set and not force_insert:
859|            base_qs = cls._base_manager.using(using)
860|            values = [(f, None, (getattr(self, f.attname) if raw else f.pre_save(self, False)))
861|                      for f in non_pks]
862|            forced_update = update_fields or force_update
863|            updated = self._do_update(base_qs, using, pk_val, values, update_fields,
864|                                      forced_update)
865|            if force_update and not updated:
866|                raise DatabaseError("Forced update did not affect any rows.")
867|            if update_fields and not updated:
868|                raise DatabaseError("Save with update_fields did not affect any rows.")
869|        if not updated:
870|            if meta.order_with_respect_to:
871|                # If this is a model with an order_with_respect_to
872|                # autopopulate the _order field
873|                field = meta.order_with_respect_to
874|                filter_args = field.get_filter_kwargs_for_object(self)
875|                self._order = cls._base_manager.using(using).filter(**filter_args).aggregate(
876|                    _order__max=Coalesce(
877|                        ExpressionWrapper(Max('_order') + Value(1), output_field=IntegerField()),
878|                        Value(0),
879|                    ),
880|                )['_order__max']
881|            fields = meta.local_concrete_fields
882|            if not pk_set:
883|                fields = [f for f in fields if f is not meta.auto_field]
884|
885|            returning_fields = meta.db_returning_fields
886|            results = self._do_insert(cls._base_manager, using, fields, returning_fields, raw)
887|            for result, field in zip(results, returning_fields):
888|                setattr(self, field.attname, result)
889|        return updated
890|
891|    def _do_update(self, base_qs, using, pk_val, values, update_fields, forced_update):
892|        """
893|        Try to update the model. Return True if the model was updated (if an
894|        update query was done and a matching row was found in the DB).
895|        """
896|        filtered = base_qs.filter(pk=pk_val)
897|        if not values:
898|            # We can end up here when saving a model in inheritance chain where
899|            # update_fields doesn't target any field in current model. In that
900|            # case we just say the update succeeded. Another case ending up here
901|            # is a model with just PK - in that case check that the PK still
902|            # exists.
903|            return update_fields is not None or filtered.exists()
904|        if self._meta.select_on_save and not forced_update:
905|            return (
906|                filtered.exists() and
907|                # It may happen that the object is deleted from the DB right after
908|                # this check, causing the subsequent UPDATE to return zero matching
909|                # rows. The same result can occur in some rare cases when the
910|                # database returns zero despite the UPDATE being executed
911|                # successfully (a row is matched and updated). In order to
912|                # distinguish these two cases, the object's existence in the
913|                # database is again checked for if the UPDATE query returns 0.
914|                (filtered._update(values) > 0 or filtered.exists())
915|            )
916|        return filtered._update(values) > 0
917|
918|    def _do_insert(self, manager, using, fields, returning_fields, raw):
919|        """
920|        Do an INSERT. If returning_fields is defined then this method should
921|        return the newly created data for the model.
922|        """
923|        return manager._insert(
924|            [self], fields=fields, returning_fields=returning_fields,
925|            using=using, raw=raw,
926|        )
927|
928|    def delete(self, using=None, keep_parents=False):
929|        using = using or router.db_for_write(self.__class__, instance=self)
930|        assert self.pk is not None, (
931|            "%s object can't be deleted because its %s attribute is set to None." %
932|            (self._meta.object_name, self._meta.pk.attname)
933|        )
934|
935|        collector = Collector(using=using)
936|        collector.collect([self], keep_parents=keep_parents)
937|        return collector.delete()
938|
939|    delete.alters_data = True
940|
941|    def _get_FIELD_display(self, field):
942|        value = getattr(self, field.attname)
943|        # force_str() to coerce lazy strings.
944|        return force_str(dict(field.flatchoices).get(value, value), strings_only=True)
945|
946|    def _get_next_or_previous_by_FIELD(self, field, is_next, **kwargs):
947|        if not self.pk:
948|            raise ValueError("get_next/get_previous cannot be used on unsaved objects.")
949|        op = 'gt' if is_next else 'lt'
950|        order = '' if is_next else '-'
951|        param = getattr(self, field.attname)
952|        q = Q(**{'%s__%s' % (field.name, op): param})
953|        q = q | Q(**{field.name: param, 'pk__%s' % op: self.pk})
954|        qs = self.__class__._default_manager.using(self._state.db).filter(**kwargs).filter(q).order_by(
955|            '%s%s' % (order, field.name), '%spk' % order
956|        )
957|        try:
958|            return qs[0]
959|        except IndexError:
960|            raise self.DoesNotExist("%s matching query does not exist." % self.__class__._meta.object_name)
961|
962|    def _get_next_or_previous_in_order(self, is_next):
963|        cachename = "__%s_order_cache" % is_next
964|        if not hasattr(self, cachename):
965|            op = 'gt' if is_next else 'lt'
966|            order = '_order' if is_next else '-_order'
967|            order_field = self._meta.order_with_respect_to
968|            filter_args = order_field.get_filter_kwargs_for_object(self)
969|            obj = self.__class__._default_manager.filter(**filter_args).filter(**{
970|                '_order__%s' % op: self.__class__._default_manager.values('_order').filter(**{
971|                    self._meta.pk.name: self.pk
972|                })
973|            }).order_by(order)[:1].get()
974|            setattr(self, cachename, obj)
975|        return getattr(self, cachename)
976|
977|    def prepare_database_save(self, field):
978|        if self.pk is None:
979|            raise ValueError("Unsaved model instance %r cannot be used in an ORM query." % self)
980|        return getattr(self, field.remote_field.get_related_field().attname)
981|
982|    def clean(self):
983|        """
984|        Hook for doing any extra model-wide validation after clean() has been
985|        called on every field by self.clean_fields. Any ValidationError raised
986|        by this method will not be associated with a particular field; it will
987|        have a special-case association with the field defined by NON_FIELD_ERRORS.
988|        """
989|        pass
990|
991|    def validate_unique(self, exclude=None):
992|        """
993|        Check unique constraints on the model and raise ValidationError if any
994|        failed.
995|        """
996|        unique_checks, date_checks = self._get_unique_checks(exclude=exclude)
997|
998|        errors = self._perform_unique_checks(unique_checks)
999|        date_errors = self._perform_date_checks(date_checks)
1000|
1001|        for k, v in date_errors.items():
1002|            errors.setdefault(k, []).extend(v)
1003|
1004|        if errors:
1005|            raise ValidationError(errors)
1006|
1007|    def _get_unique_checks(self, exclude=None):
1008|        """
1009|        Return a list of checks to perform. Since validate_unique() could be
1010|        called from a ModelForm, some fields may have been excluded; we can't
1011|        perform a unique check on a model that is missing fields involved
1012|        in that check. Fields that did not validate should also be excluded,
1013|        but they need to be passed in via the exclude argument.
1014|        """
1015|        if exclude is None:
1016|            exclude = []
1017|        unique_checks = []
1018|
1019|        unique_togethers = [(self.__class__, self._meta.unique_together)]
1020|        constraints = [(self.__class__, self._meta.constraints)]
1021|        for parent_class in self._meta.get_parent_list():
1022|            if parent_class._meta.unique_together:
1023|                unique_togethers.append((parent_class, parent_class._meta.unique_together))
1024|            if parent_class._meta.constraints:
1025|                constraints.append((parent_class, parent_class._meta.constraints))
1026|
1027|        for model_class, unique_together in unique_togethers:
1028|            for check in unique_together:
1029|                if not any(name in exclude for name in check):
1030|                    # Add the check if the field isn't excluded.
1031|                    unique_checks.append((model_class, tuple(check)))
1032|
1033|        for model_class, model_constraints in constraints:
1034|            for constraint in model_constraints:
1035|                if (isinstance(constraint, UniqueConstraint) and
1036|                        # Partial unique constraints can't be validated.
1037|                        constraint.condition is None and
1038|                        not any(name in exclude for name in constraint.fields)):
1039|                    unique_checks.append((model_class, constraint.fields))
1040|
1041|        # These are checks for the unique_for_<date/year/month>.
1042|        date_checks = []
1043|
1044|        # Gather a list of checks for fields declared as unique and add them to
1045|        # the list of checks.
1046|
1047|        fields_with_class = [(self.__class__, self._meta.local_fields)]
1048|        for parent_class in self._meta.get_parent_list():
1049|            fields_with_class.append((parent_class, parent_class._meta.local_fields))
1050|
1051|        for model_class, fields in fields_with_class:
1052|            for f in fields:
1053|                name = f.name
1054|                if name in exclude:
1055|                    continue
1056|                if f.unique:
1057|                    unique_checks.append((model_class, (name,)))
1058|                if f.unique_for_date and f.unique_for_date not in exclude:
1059|                    date_checks.append((model_class, 'date', name, f.unique_for_date))
1060|                if f.unique_for_year and f.unique_for_year not in exclude:
1061|                    date_checks.append((model_class, 'year', name, f.unique_for_year))
1062|                if f.unique_for_month and f.unique_for_month not in exclude:
1063|                    date_checks.append((model_class, 'month', name, f.unique_for_month))
1064|        return unique_checks, date_checks
1065|
1066|    def _perform_unique_checks(self, unique_checks):
1067|        errors = {}
1068|
1069|        for model_class, unique_check in unique_checks:
1070|            # Try to look up an existing object with the same values as this
1071|            # object's values for all the unique field.
1072|
1073|            lookup_kwargs = {}
1074|            for field_name in unique_check:
1075|                f = self._meta.get_field(field_name)
1076|                lookup_value = getattr(self, f.attname)
1077|                # TODO: Handle multiple backends with different feature flags.
1078|                if (lookup_value is None or
1079|                        (lookup_value == '' and connection.features.interprets_empty_strings_as_nulls)):
1080|                    # no value, skip the lookup
1081|                    continue
1082|                if f.primary_key and not self._state.adding:
1083|                    # no need to check for unique primary key when editing
1084|                    continue
1085|                lookup_kwargs[str(field_name)] = lookup_value
1086|
1087|            # some fields were skipped, no reason to do the check
1088|            if len(unique_check) != len(lookup_kwargs):
1089|                continue
1090|
1091|            qs = model_class._default_manager.filter(**lookup_kwargs)
1092|
1093|            # Exclude the current object from the query if we are editing an
1094|            # instance (as opposed to creating a new one)
1095|            # Note that we need to use the pk as defined by model_class, not
1096|            # self.pk. These can be different fields because model inheritance
1097|            # allows single model to have effectively multiple primary keys.
1098|            # Refs #17615.
1099|            model_class_pk = self._get_pk_val(model_class._meta)
1100|            if not self._state.adding and model_class_pk is not None:
1101|                qs = qs.exclude(pk=model_class_pk)
1102|            if qs.exists():
1103|                if len(unique_check) == 1:
1104|                    key = unique_check[0]
1105|                else:
1106|                    key = NON_FIELD_ERRORS
1107|                errors.setdefault(key, []).append(self.unique_error_message(model_class, unique_check))
1108|
1109|        return errors
1110|
1111|    def _perform_date_checks(self, date_checks):
1112|        errors = {}
1113|        for model_class, lookup_type, field, unique_for in date_checks:
1114|            lookup_kwargs = {}
1115|            # there's a ticket to add a date lookup, we can remove this special
1116|            # case if that makes it's way in
1117|            date = getattr(self, unique_for)
1118|            if date is None:
1119|                continue
1120|            if lookup_type == 'date':
1121|                lookup_kwargs['%s__day' % unique_for] = date.day
1122|                lookup_kwargs['%s__month' % unique_for] = date.month
1123|                lookup_kwargs['%s__year' % unique_for] = date.year
1124|            else:
1125|                lookup_kwargs['%s__%s' % (unique_for, lookup_type)] = getattr(date, lookup_type)
1126|            lookup_kwargs[field] = getattr(self, field)
1127|
1128|            qs = model_class._default_manager.filter(**lookup_kwargs)
1129|            # Exclude the current object from the query if we are editing an
1130|            # instance (as opposed to creating a new one)
1131|            if not self._state.adding and self.pk is not None:
1132|                qs = qs.exclude(pk=self.pk)
1133|
1134|            if qs.exists():
1135|                errors.setdefault(field, []).append(
1136|                    self.date_error_message(lookup_type, field, unique_for)
1137|                )
1138|        return errors
1139|
1140|    def date_error_message(self, lookup_type, field_name, unique_for):
1141|        opts = self._meta
1142|        field = opts.get_field(field_name)
1143|        return ValidationError(
1144|            message=field.error_messages['unique_for_date'],
1145|            code='unique_for_date',
1146|            params={
1147|                'model': self,
1148|                'model_name': capfirst(opts.verbose_name),
1149|                'lookup_type': lookup_type,
1150|                'field': field_name,
1151|                'field_label': capfirst(field.verbose_name),
1152|                'date_field': unique_for,
1153|                'date_field_label': capfirst(opts.get_field(unique_for).verbose_name),
1154|            }
1155|        )
1156|
1157|    def unique_error_message(self, model_class, unique_check):
1158|        opts = model_class._meta
1159|
1160|        params = {
1161|            'model': self,
1162|            'model_class': model_class,
1163|            'model_name': capfirst(opts.verbose_name),
1164|            'unique_check': unique_check,
1165|        }
1166|
1167|        # A unique field
1168|        if len(unique_check) == 1:
1169|            field = opts.get_field(unique_check[0])
1170|            params['field_label'] = capfirst(field.verbose_name)
1171|            return ValidationError(
1172|                message=field.error_messages['unique'],
1173|                code='unique',
1174|                params=params,
1175|            )
1176|
1177|        # unique_together
1178|        else:
1179|            field_labels = [capfirst(opts.get_field(f).verbose_name) for f in unique_check]
1180|            params['field_labels'] = get_text_list(field_labels, _('and'))
1181|            return ValidationError(
1182|                message=_("%(model_name)s with this %(field_labels)s already exists."),
1183|                code='unique_together',
1184|                params=params,
1185|            )
1186|
1187|    def full_clean(self, exclude=None, validate_unique=True):
1188|        """
1189|        Call clean_fields(), clean(), and validate_unique() on the model.
1190|        Raise a ValidationError for any errors that occur.
1191|        """
1192|        errors = {}
1193|        if exclude is None:
1194|            exclude = []
1195|        else:
1196|            exclude = list(exclude)
1197|
1198|        try:
1199|            self.clean_fields(exclude=exclude)
1200|        except ValidationError as e:
1201|            errors = e.update_error_dict(errors)
1202|
1203|        # Form.clean() is run even if other validation fails, so do the
1204|        # same with Model.clean() for consistency.
1205|        try:
1206|            self.clean()
1207|        except ValidationError as e:
1208|            errors = e.update_error_dict(errors)
1209|
1210|        # Run unique checks, but only for fields that passed validation.
1211|        if validate_unique:
1212|            for name in errors:
1213|                if name != NON_FIELD_ERRORS and name not in exclude:
1214|                    exclude.append(name)
1215|            try:
1216|                self.validate_unique(exclude=exclude)
1217|            except ValidationError as e:
1218|                errors = e.update_error_dict(errors)
1219|
1220|        if errors:
1221|            raise ValidationError(errors)
1222|
1223|    def clean_fields(self, exclude=None):
1224|        """
1225|        Clean all fields and raise a ValidationError containing a dict
1226|        of all validation errors if any occur.
1227|        """
1228|        if exclude is None:
1229|            exclude = []
1230|
1231|        errors = {}
1232|        for f in self._meta.fields:
1233|            if f.name in exclude:
1234|                continue
1235|            # Skip validation for empty fields with blank=True. The developer
1236|            # is responsible for making sure they have a valid value.
1237|            raw_value = getattr(self, f.attname)
1238|            if f.blank and raw_value in f.empty_values:
1239|                continue
1240|            try:
1241|                setattr(self, f.attname, f.clean(raw_value, self))
1242|            except ValidationError as e:
1243|                errors[f.name] = e.error_list
1244|
1245|        if errors:
1246|            raise ValidationError(errors)
1247|
1248|    @classmethod
1249|    def check(cls, **kwargs):
1250|        errors = [*cls._check_swappable(), *cls._check_model(), *cls._check_managers(**kwargs)]
1251|        if not cls._meta.swapped:
1252|            errors += [
1253|                *cls._check_fields(**kwargs),
1254|                *cls._check_m2m_through_same_relationship(),
1255|                *cls._check_long_column_names(),
1256|            ]
1257|            clash_errors = (
1258|                *cls._check_id_field(),
1259|                *cls._check_field_name_clashes(),
1260|                *cls._check_model_name_db_lookup_clashes(),
1261|                *cls._check_property_name_related_field_accessor_clashes(),
1262|                *cls._check_single_primary_key(),
1263|            )
1264|            errors.extend(clash_errors)
1265|            # If there are field name clashes, hide consequent column name
1266|            # clashes.
1267|            if not clash_errors:
1268|                errors.extend(cls._check_column_name_clashes())
1269|            errors += [
1270|                *cls._check_index_together(),
1271|                *cls._check_unique_together(),
1272|                *cls._check_indexes(),
1273|                *cls._check_ordering(),
1274|                *cls._check_constraints(),
1275|            ]
1276|
1277|        return errors
1278|
1279|    @classmethod
1280|    def _check_swappable(cls):
1281|        """Check if the swapped model exists."""
1282|        errors = []
1283|        if cls._meta.swapped:
1284|            try:
1285|                apps.get_model(cls._meta.swapped)
1286|            except ValueError:
1287|                errors.append(
1288|                    checks.Error(
1289|                        "'%s' is not of the form 'app_label.app_name'." % cls._meta.swappable,
1290|                        id='models.E001',
1291|                    )
1292|                )
1293|            except LookupError:
1294|                app_label, model_name = cls._meta.swapped.split('.')
1295|                errors.append(
1296|                    checks.Error(
1297|                        "'%s' references '%s.%s', which has not been "
1298|                        "installed, or is abstract." % (
1299|                            cls._meta.swappable, app_label, model_name
1300|                        ),
1301|                        id='models.E002',
1302|                    )
1303|                )
1304|        return errors
1305|
1306|    @classmethod
1307|    def _check_model(cls):
1308|        errors = []
1309|        if cls._meta.proxy:
1310|            if cls._meta.local_fields or cls._meta.local_many_to_many:
1311|                errors.append(
1312|                    checks.Error(
1313|                        "Proxy model '%s' contains model fields." % cls.__name__,
1314|                        id='models.E017',
1315|                    )
1316|                )
1317|        return errors
1318|
1319|    @classmethod
1320|    def _check_managers(cls, **kwargs):
1321|        """Perform all manager checks."""
1322|        errors = []
1323|        for manager in cls._meta.managers:
1324|            errors.extend(manager.check(**kwargs))
1325|        return errors
1326|
1327|    @classmethod
1328|    def _check_fields(cls, **kwargs):
1329|        """Perform all field checks."""
1330|        errors = []
1331|        for field in cls._meta.local_fields:
1332|            errors.extend(field.check(**kwargs))
1333|        for field in cls._meta.local_many_to_many:
1334|            errors.extend(field.check(from_model=cls, **kwargs))
1335|        return errors
1336|
1337|    @classmethod
1338|    def _check_m2m_through_same_relationship(cls):
1339|        """ Check if no relationship model is used by more than one m2m field.
1340|        """
1341|
1342|        errors = []
1343|        seen_intermediary_signatures = []
1344|
1345|        fields = cls._meta.local_many_to_many
1346|
1347|        # Skip when the target model wasn't found.
1348|        fields = (f for f in fields if isinstance(f.remote_field.model, ModelBase))
1349|
1350|        # Skip when the relationship model wasn't found.
1351|        fields = (f for f in fields if isinstance(f.remote_field.through, ModelBase))
1352|
1353|        for f in fields:
1354|            signature = (f.remote_field.model, cls, f.remote_field.through, f.remote_field.through_fields)
1355|            if signature in seen_intermediary_signatures:
1356|                errors.append(
1357|                    checks.Error(
1358|                        "The model has two identical many-to-many relations "
1359|                        "through the intermediate model '%s'." %
1360|                        f.remote_field.through._meta.label,
1361|                        obj=cls,
1362|                        id='models.E003',
1363|                    )
1364|                )
1365|            else:
1366|                seen_intermediary_signatures.append(signature)
1367|        return errors
1368|
1369|    @classmethod
1370|    def _check_id_field(cls):
1371|        """Check if `id` field is a primary key."""
1372|        fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
1373|        # fields is empty or consists of the invalid "id" field
1374|        if fields and not fields[0].primary_key and cls._meta.pk.name == 'id':
1375|            return [
1376|                checks.Error(
1377|                    "'id' can only be used as a field name if the field also "
1378|                    "sets 'primary_key=True'.",
1379|                    obj=cls,
1380|                    id='models.E004',
1381|                )
1382|            ]
1383|        else:
1384|            return []
1385|
1386|    @classmethod
1387|    def _check_field_name_clashes(cls):
1388|        """Forbid field shadowing in multi-table inheritance."""
1389|        errors = []
1390|        used_fields = {}  # name or attname -> field
1391|
1392|        # Check that multi-inheritance doesn't cause field name shadowing.
1393|        for parent in cls._meta.get_parent_list():
1394|            for f in parent._meta.local_fields:
1395|                clash = used_fields.get(f.name) or used_fields.get(f.attname) or None
1396|                if clash:
1397|                    errors.append(
1398|                        checks.Error(
1399|                            "The field '%s' from parent model "
1400|                            "'%s' clashes with the field '%s' "
1401|                            "from parent model '%s'." % (
1402|                                clash.name, clash.model._meta,
1403|                                f.name, f.model._meta
1404|                            ),
1405|                            obj=cls,
1406|                            id='models.E005',
1407|                        )
1408|                    )
1409|                used_fields[f.name] = f
1410|                used_fields[f.attname] = f
1411|
1412|        # Check that fields defined in the model don't clash with fields from
1413|        # parents, including auto-generated fields like multi-table inheritance
1414|        # child accessors.
1415|        for parent in cls._meta.get_parent_list():
1416|            for f in parent._meta.get_fields():
1417|                if f not in used_fields:
1418|                    used_fields[f.name] = f
1419|
1420|        for f in cls._meta.local_fields:
1421|            clash = used_fields.get(f.name) or used_fields.get(f.attname) or None
1422|            # Note that we may detect clash between user-defined non-unique
1423|            # field "id" and automatically added unique field "id", both
1424|            # defined at the same model. This special case is considered in
1425|            # _check_id_field and here we ignore it.
1426|            id_conflict = f.name == "id" and clash and clash.name == "id" and clash.model == cls
1427|            if clash and not id_conflict:
1428|                errors.append(
1429|                    checks.Error(
1430|                        "The field '%s' clashes with the field '%s' "
1431|                        "from model '%s'." % (
1432|                            f.name, clash.name, clash.model._meta
1433|                        ),
1434|                        obj=f,
1435|                        id='models.E006',
1436|                    )
1437|                )
1438|            used_fields[f.name] = f
1439|            used_fields[f.attname] = f
1440|
1441|        return errors
1442|
1443|    @classmethod
1444|    def _check_column_name_clashes(cls):
1445|        # Store a list of column names which have already been used by other fields.
1446|        used_column_names = []
1447|        errors = []
1448|
1449|        for f in cls._meta.local_fields:
1450|            _, column_name = f.get_attname_column()
1451|
1452|            # Ensure the column name is not already in use.
1453|            if column_name and column_name in used_column_names:
1454|                errors.append(
1455|                    checks.Error(
1456|                        "Field '%s' has column name '%s' that is used by "
1457|                        "another field." % (f.name, column_name),
1458|                        hint="Specify a 'db_column' for the field.",
1459|                        obj=cls,
1460|                        id='models.E007'
1461|                    )
1462|                )
1463|            else:
1464|                used_column_names.append(column_name)
1465|
1466|        return errors
1467|
1468|    @classmethod
1469|    def _check_model_name_db_lookup_clashes(cls):
1470|        errors = []
1471|        model_name = cls.__name__
1472|        if model_name.startswith('_') or model_name.endswith('_'):
1473|            errors.append(
1474|                checks.Error(
1475|                    "The model name '%s' cannot start or end with an underscore "
1476|                    "as it collides with the query lookup syntax." % model_name,
1477|                    obj=cls,
1478|                    id='models.E023'
1479|                )
1480|            )
1481|        elif LOOKUP_SEP in model_name:
1482|            errors.append(
1483|                checks.Error(
1484|                    "The model name '%s' cannot contain double underscores as "
1485|                    "it collides with the query lookup syntax." % model_name,
1486|                    obj=cls,
1487|                    id='models.E024'
1488|                )
1489|            )
1490|        return errors
1491|
1492|    @classmethod
1493|    def _check_property_name_related_field_accessor_clashes(cls):
1494|        errors = []
1495|        property_names = cls._meta._property_names
1496|        related_field_accessors = (
1497|            f.get_attname() for f in cls._meta._get_fields(reverse=False)
1498|            if f.is_relation and f.related_model is not None
1499|        )
1500|        for accessor in related_field_accessors:
1501|            if accessor in property_names:
(402 more lines below)


============================================================



ACTION:

THOUGHT: Let me check the Django documentation for E015 since it's not immediately visible in the base.py file:
CODE:
open_file('/workspace/django__django__3.1/docs/ref/checks.txt')

============================================================



OBSERVATION:

[File: /workspace/django__django__3.1/docs/ref/checks.txt (774 lines total)]
1|======================
2|System check framework
3|======================
4|
5|.. currentmodule:: django.core.checks
6|
7|The system check framework is a set of static checks for validating Django
8|projects. It detects common problems and provides hints for how to fix them.
9|The framework is extensible so you can easily add your own checks.
10|
11|For details on how to add your own checks and integrate them with Django's
12|system checks, see the :doc:`System check topic guide </topics/checks>`.
13|
14|API reference
15|=============
16|
17|``CheckMessage``
18|----------------
19|
20|.. class:: CheckMessage(level, msg, hint=None, obj=None, id=None)
21|
22|The warnings and errors raised by system checks must be instances of
23|``CheckMessage``. An instance encapsulates a single reportable error or
24|warning. It also provides context and hints applicable to the message, and a
25|unique identifier that is used for filtering purposes.
26|
27|Constructor arguments are:
28|
29|``level``
30|    The severity of the message. Use one of the predefined values: ``DEBUG``,
31|    ``INFO``, ``WARNING``, ``ERROR``, ``CRITICAL``. If the level is greater or
32|    equal to ``ERROR``, then Django will prevent management commands from
33|    executing. Messages with level lower than ``ERROR`` (i.e. warnings) are
34|    reported to the console, but can be silenced.
35|
36|``msg``
37|    A short (less than 80 characters) string describing the problem. The string
38|    should *not* contain newlines.
39|
40|``hint``
41|    A single-line string providing a hint for fixing the problem. If no hint
42|    can be provided, or the hint is self-evident from the error message, the
43|    hint can be omitted, or a value of ``None`` can be used.
44|
45|``obj``
46|    Optional. An object providing context for the message (for example, the
47|    model where the problem was discovered). The object should be a model,
48|    field, or manager or any other object that defines a ``__str__()`` method.
49|    The method is used while reporting all messages and its result precedes the
50|    message.
51|
52|``id``
53|    Optional string. A unique identifier for the issue. Identifiers should
54|    follow the pattern ``applabel.X001``, where ``X`` is one of the letters
55|    ``CEWID``, indicating the message severity (``C`` for criticals, ``E`` for
56|    errors and so). The number can be allocated by the application, but should
57|    be unique within that application.
58|
59|There are subclasses to make creating messages with common levels easier. When
60|using them you can omit the ``level`` argument because it is implied by the
61|class name.
62|
63|.. class:: Debug(msg, hint=None, obj=None, id=None)
64|.. class:: Info(msg, hint=None, obj=None, id=None)
65|.. class:: Warning(msg, hint=None obj=None, id=None)
66|.. class:: Error(msg, hint=None, obj=None, id=None)
67|.. class:: Critical(msg, hint=None, obj=None, id=None)
68|
69|.. _system-check-builtin-tags:
70|
71|Builtin tags
72|============
73|
74|Django's system checks are organized using the following tags:
75|
76|* ``admin``: Checks of any admin site declarations.
77|* ``caches``: Checks cache related configuration.
78|* ``compatibility``: Flags potential problems with version upgrades.
79|* ``database``: Checks database-related configuration issues. Database checks
80|  are not run by default because they do more than static code analysis as
81|  regular checks do. They are only run by the :djadmin:`migrate` command or if
82|  you specify the ``database`` tag when calling the :djadmin:`check` command.
83|* ``models``: Checks of model, field, and manager definitions.
84|* ``security``: Checks security related configuration.
85|* ``signals``: Checks on signal declarations and handler registrations.
86|* ``staticfiles``: Checks :mod:`django.contrib.staticfiles` configuration.
87|* ``templates``: Checks template related configuration.
88|* ``translation``: Checks translation related configuration.
89|* ``urls``: Checks URL configuration.
90|
91|Some checks may be registered with multiple tags.
92|
93|Core system checks
94|==================
95|
96|Backwards compatibility
97|-----------------------
98|
99|Compatibility checks warn of potential problems that might occur after
100|upgrading Django.
101|
102|* **2_0.W001**: Your URL pattern ``<pattern>`` has a ``route`` that contains
103|  ``(?P<``, begins with a ``^``, or ends with a ``$``. This was likely an
104|  oversight when migrating from ``url()`` to :func:`~django.urls.path`.
105|
106|Caches
107|------
108|
109|The following checks verify that your :setting:`CACHES` setting is correctly
110|configured:
111|
112|* **caches.E001**: You must define a ``'default'`` cache in your
113|  :setting:`CACHES` setting.
114|
115|Database
116|--------
117|
118|MySQL
119|~~~~~
120|
121|If you're using MySQL, the following checks will be performed:
122|
123|* **mysql.E001**: MySQL does not allow unique ``CharField``\s to have a
124|  ``max_length`` > 255.
125|* **mysql.W002**: MySQL Strict Mode is not set for database connection
126|  '<alias>'. See also :ref:`mysql-sql-mode`.
127|
128|Model fields
129|------------
130|
131|* **fields.E001**: Field names must not end with an underscore.
132|* **fields.E002**: Field names must not contain ``"__"``.
133|* **fields.E003**: ``pk`` is a reserved word that cannot be used as a field
134|  name.
135|* **fields.E004**: ``choices`` must be an iterable (e.g., a list or tuple).
136|* **fields.E005**: ``choices`` must be an iterable returning ``(actual value,
137|  human readable name)`` tuples.
138|* **fields.E006**: ``db_index`` must be ``None``, ``True`` or ``False``.
139|* **fields.E007**: Primary keys must not have ``null=True``.
140|* **fields.E008**: All ``validators`` must be callable.
141|* **fields.E009**: ``max_length`` is too small to fit the longest value in
142|  ``choices`` (``<count>`` characters).
143|* **fields.E100**: ``AutoField``\s must set primary_key=True.
144|* **fields.E110**: ``BooleanField``\s do not accept null values. *This check
145|  appeared before support for null values was added in Django 2.1.*
146|* **fields.E120**: ``CharField``\s must define a ``max_length`` attribute.
147|* **fields.E121**: ``max_length`` must be a positive integer.
148|* **fields.W122**: ``max_length`` is ignored when used with
149|  ``<integer field type>``.
150|* **fields.E130**: ``DecimalField``\s must define a ``decimal_places`` attribute.
151|* **fields.E131**: ``decimal_places`` must be a non-negative integer.
152|* **fields.E132**: ``DecimalField``\s must define a ``max_digits`` attribute.
153|* **fields.E133**: ``max_digits`` must be a non-negative integer.
154|* **fields.E134**: ``max_digits`` must be greater or equal to ``decimal_places``.
155|* **fields.E140**: ``FilePathField``\s must have either ``allow_files`` or
156|  ``allow_folders`` set to True.
157|* **fields.E150**: ``GenericIPAddressField``\s cannot accept blank values if
158|  null values are not allowed, as blank values are stored as nulls.
159|* **fields.E160**: The options ``auto_now``, ``auto_now_add``, and ``default``
160|  are mutually exclusive. Only one of these options may be present.
161|* **fields.W161**: Fixed default value provided.
162|* **fields.W162**: ``<database>`` does not support a database index on
163|  ``<field data type>`` columns.
164|* **fields.E170**: ``BinaryField``’s ``default`` cannot be a string. Use bytes
165|  content instead.
166|* **fields.E900**: ``IPAddressField`` has been removed except for support in
167|  historical migrations.
168|* **fields.W900**: ``IPAddressField`` has been deprecated. Support for it
169|  (except in historical migrations) will be removed in Django 1.9. *This check
170|  appeared in Django 1.7 and 1.8*.
171|* **fields.W901**: ``CommaSeparatedIntegerField`` has been deprecated. Support
172|  for it (except in historical migrations) will be removed in Django 2.0. *This
173|  check appeared in Django 1.10 and 1.11*.
174|* **fields.E901**: ``CommaSeparatedIntegerField`` is removed except for support
175|  in historical migrations.
176|* **fields.W902**: ``FloatRangeField`` is deprecated and will be removed in
177|  Django 3.1. *This check appeared in Django 2.2 and 3.0*.
178|
179|File fields
180|~~~~~~~~~~~
181|
182|* **fields.E200**: ``unique`` is not a valid argument for a ``FileField``.
183|  *This check is removed in Django 1.11*.
184|* **fields.E201**: ``primary_key`` is not a valid argument for a ``FileField``.
185|* **fields.E202**: ``FileField``’s ``upload_to`` argument must be a relative
186|  path, not an absolute path.
187|* **fields.E210**: Cannot use ``ImageField`` because Pillow is not installed.
188|
189|Related fields
190|~~~~~~~~~~~~~~
191|
192|* **fields.E300**: Field defines a relation with model ``<model>``, which is
193|  either not installed, or is abstract.
194|* **fields.E301**: Field defines a relation with the model ``<model>`` which
195|  has been swapped out.
196|* **fields.E302**: Accessor for field ``<field name>`` clashes with field
197|  ``<field name>``.
198|* **fields.E303**: Reverse query name for field ``<field name>`` clashes with
199|  field ``<field name>``.
200|* **fields.E304**: Field name ``<field name>`` clashes with accessor for
201|  ``<field name>``.
202|* **fields.E305**: Field name ``<field name>`` clashes with reverse query name
203|  for ``<field name>``.
204|* **fields.E306**: Related name must be a valid Python identifier or end with
205|  a ``'+'``.
206|* **fields.E307**: The field ``<app label>.<model>.<field name>`` was declared
207|  with a lazy reference to ``<app label>.<model>``, but app ``<app label>``
208|  isn't installed or doesn't provide model ``<model>``.
209|* **fields.E308**: Reverse query name ``<related query name>`` must not end
210|  with an underscore.
211|* **fields.E309**: Reverse query name ``<related query name>`` must not contain
212|  ``'__'``.
213|* **fields.E310**: No subset of the fields ``<field1>``, ``<field2>``, ... on
214|  model ``<model>`` is unique. Add ``unique=True`` on any of those fields or
215|  add at least a subset of them to a unique_together constraint.
216|* **fields.E311**: ``<model>`` must set ``unique=True`` because it is
217|  referenced by a ``ForeignKey``.
218|* **fields.E312**: The ``to_field`` ``<field name>`` doesn't exist on the
219|  related model ``<app label>.<model>``.
220|* **fields.E320**: Field specifies ``on_delete=SET_NULL``, but cannot be null.
221|* **fields.E321**: The field specifies ``on_delete=SET_DEFAULT``, but has no
222|  default value.
223|* **fields.E330**: ``ManyToManyField``\s cannot be unique.
224|* **fields.E331**: Field specifies a many-to-many relation through model
225|  ``<model>``, which has not been installed.
226|* **fields.E332**: Many-to-many fields with intermediate tables must not be
227|  symmetrical. *This check appeared before Django 3.0.*
228|* **fields.E333**: The model is used as an intermediate model by ``<model>``,
229|  but it has more than two foreign keys to ``<model>``, which is ambiguous.
230|  You must specify which two foreign keys Django should use via the
231|  ``through_fields`` keyword argument.
232|* **fields.E334**: The model is used as an intermediate model by ``<model>``,
233|  but it has more than one foreign key from ``<model>``, which is ambiguous.
234|  You must specify which foreign key Django should use via the
235|  ``through_fields`` keyword argument.
236|* **fields.E335**: The model is used as an intermediate model by ``<model>``,
237|  but it has more than one foreign key to ``<model>``, which is ambiguous.
238|  You must specify which foreign key Django should use via the
239|  ``through_fields`` keyword argument.
240|* **fields.E336**: The model is used as an intermediary model by ``<model>``,
241|  but it does not have foreign key to ``<model>`` or ``<model>``.
242|* **fields.E337**: Field specifies ``through_fields`` but does not provide the
243|  names of the two link fields that should be used for the relation through
244|  ``<model>``.
245|* **fields.E338**: The intermediary model ``<through model>`` has no field
246|  ``<field name>``.
247|* **fields.E339**: ``<model>.<field name>`` is not a foreign key to ``<model>``.
248|* **fields.E340**: The field's intermediary table ``<table name>`` clashes with
249|  the table name of ``<model>``/``<model>.<field name>``.
250|* **fields.W340**: ``null`` has no effect on ``ManyToManyField``.
251|* **fields.W341**: ``ManyToManyField`` does not support ``validators``.
252|* **fields.W342**: Setting ``unique=True`` on a ``ForeignKey`` has the same
253|  effect as using a ``OneToOneField``.
254|* **fields.W343**: ``limit_choices_to`` has no effect on ``ManyToManyField``
255|  with a ``through`` model.
256|
257|Models
258|------
259|
260|* **models.E001**: ``<swappable>`` is not of the form ``app_label.app_name``.
261|* **models.E002**: ``<SETTING>`` references ``<model>``, which has not been
262|  installed, or is abstract.
263|* **models.E003**: The model has two identical many-to-many relations through
264|  the intermediate model ``<app_label>.<model>``.
265|* **models.E004**: ``id`` can only be used as a field name if the field also
266|  sets ``primary_key=True``.
267|* **models.E005**: The field ``<field name>`` from parent model ``<model>``
268|  clashes with the field ``<field name>`` from parent model ``<model>``.
269|* **models.E006**: The field clashes with the field ``<field name>`` from model
270|  ``<model>``.
271|* **models.E007**: Field ``<field name>`` has column name ``<column name>``
272|  that is used by another field.
273|* **models.E008**: ``index_together`` must be a list or tuple.
274|* **models.E009**: All ``index_together`` elements must be lists or tuples.
275|* **models.E010**: ``unique_together`` must be a list or tuple.
276|* **models.E011**: All ``unique_together`` elements must be lists or tuples.
277|* **models.E012**: ``indexes/index_together/unique_together`` refers to the
278|  nonexistent field ``<field name>``.
279|* **models.E013**: ``indexes/index_together/unique_together`` refers to a
280|  ``ManyToManyField`` ``<field name>``, but ``ManyToManyField``\s are not
281|  supported for that option.
282|* **models.E014**: ``ordering`` must be a tuple or list (even if you want to
283|  order by only one field).
284|* **models.E015**: ``ordering`` refers to the nonexistent field, related field,
285|  or lookup ``<field name>``.
286|* **models.E016**: ``indexes/index_together/unique_together`` refers to field
287|  ``<field_name>`` which is not local to model ``<model>``.
288|* **models.E017**: Proxy model ``<model>`` contains model fields.
289|* **models.E018**: Autogenerated column name too long for field ``<field>``.
290|  Maximum length is ``<maximum length>`` for database ``<alias>``.
291|* **models.E019**: Autogenerated column name too long for M2M field
292|  ``<M2M field>``. Maximum length is ``<maximum length>`` for database
293|  ``<alias>``.
294|* **models.E020**: The ``<model>.check()`` class method is currently overridden.
295|* **models.E021**: ``ordering`` and ``order_with_respect_to`` cannot be used
296|  together.
297|* **models.E022**: ``<function>`` contains a lazy reference to
298|  ``<app label>.<model>``, but app ``<app label>`` isn't installed or
299|  doesn't provide model ``<model>``.
300|* **models.E023**: The model name ``<model>`` cannot start or end with an
301|  underscore as it collides with the query lookup syntax.
302|* **models.E024**: The model name ``<model>`` cannot contain double underscores
303|  as it collides with the query lookup syntax.
304|* **models.E025**: The property ``<property name>`` clashes with a related
305|  field accessor.
306|* **models.E026**: The model cannot have more than one field with
307|  ``primary_key=True``.
308|* **models.W027**: ``<database>`` does not support check constraints.
309|* **models.E028**: ``db_table`` ``<db_table>`` is used by multiple models:
310|  ``<model list>``.
311|* **models.E029**: index name ``<index>`` is not unique for model ``<model>``.
312|* **models.E030**: index name ``<index>`` is not unique amongst models:
313|  ``<model list>``.
314|* **models.E031**: constraint name ``<constraint>`` is not unique for model
315|  ``<model>``.
316|* **models.E032**: constraint name ``<constraint>`` is not unique amongst
317|  models: ``<model list>``.
318|* **models.E033**: The index name ``<index>`` cannot start with an underscore
319|  or a number.
320|* **models.E034**: The index name ``<index>`` cannot be longer than
321|  ``<max_length>`` characters.
322|* **models.W035**: ``db_table`` ``<db_table>`` is used by multiple models:
323|  ``<model list>``.
324|
325|Security
326|--------
327|
328|The security checks do not make your site secure. They do not audit code, do
329|intrusion detection, or do anything particularly complex. Rather, they help
330|perform an automated, low-hanging-fruit checklist, that can help you to improve
331|your site's security.
332|
333|Some of these checks may not be appropriate for your particular deployment
334|configuration. For instance, if you do your HTTP to HTTPS redirection in a load
335|balancer, it'd be irritating to be constantly warned about not having enabled
336|:setting:`SECURE_SSL_REDIRECT`. Use :setting:`SILENCED_SYSTEM_CHECKS` to
337|silence unneeded checks.
338|
339|The following checks are run if you use the :option:`check --deploy` option:
340|
341|* **security.W001**: You do not have
342|  :class:`django.middleware.security.SecurityMiddleware` in your
343|  :setting:`MIDDLEWARE` so the :setting:`SECURE_HSTS_SECONDS`,
344|  :setting:`SECURE_CONTENT_TYPE_NOSNIFF`, :setting:`SECURE_BROWSER_XSS_FILTER`,
345|  :setting:`SECURE_REFERRER_POLICY`, and :setting:`SECURE_SSL_REDIRECT`
346|  settings will have no effect.
347|* **security.W002**: You do not have
348|  :class:`django.middleware.clickjacking.XFrameOptionsMiddleware` in your
349|  :setting:`MIDDLEWARE`, so your pages will not be served with an
350|  ``'x-frame-options'`` header. Unless there is a good reason for your
351|  site to be served in a frame, you should consider enabling this
352|  header to help prevent clickjacking attacks.
353|* **security.W003**: You don't appear to be using Django's built-in cross-site
354|  request forgery protection via the middleware
355|  (:class:`django.middleware.csrf.CsrfViewMiddleware` is not in your
356|  :setting:`MIDDLEWARE`). Enabling the middleware is the safest
357|  approach to ensure you don't leave any holes.
358|* **security.W004**: You have not set a value for the
359|  :setting:`SECURE_HSTS_SECONDS` setting. If your entire site is served only
360|  over SSL, you may want to consider setting a value and enabling :ref:`HTTP
361|  Strict Transport Security <http-strict-transport-security>`. Be sure to read
362|  the documentation first; enabling HSTS carelessly can cause serious,
363|  irreversible problems.
364|* **security.W005**: You have not set the
365|  :setting:`SECURE_HSTS_INCLUDE_SUBDOMAINS` setting to ``True``. Without this,
366|  your site is potentially vulnerable to attack via an insecure connection to a
367|  subdomain. Only set this to ``True`` if you are certain that all subdomains of
368|  your domain should be served exclusively via SSL.
369|* **security.W006**: Your :setting:`SECURE_CONTENT_TYPE_NOSNIFF` setting is not
370|  set to ``True``, so your pages will not be served with an
371|  ``'X-Content-Type-Options: nosniff'`` header. You should consider enabling
372|  this header to prevent the browser from identifying content types incorrectly.
373|* **security.W007**: Your :setting:`SECURE_BROWSER_XSS_FILTER` setting is not
374|  set to ``True``, so your pages will not be served with an
375|  ``'X-XSS-Protection: 1; mode=block'`` header. You should consider enabling
376|  this header to activate the browser's XSS filtering and help prevent XSS
377|  attacks. *This check is removed in Django 3.0 as the ``X-XSS-Protection``
378|  header is no longer honored by modern browsers.*
379|* **security.W008**: Your :setting:`SECURE_SSL_REDIRECT` setting is not set to
380|  ``True``. Unless your site should be available over both SSL and non-SSL
381|  connections, you may want to either set this setting to ``True`` or configure
382|  a load balancer or reverse-proxy server  to redirect all connections to HTTPS.
383|* **security.W009**: Your :setting:`SECRET_KEY` has less than 50 characters or
384|  less than 5 unique characters. Please generate a long and random
385|  ``SECRET_KEY``, otherwise many of Django's security-critical features will be
386|  vulnerable to attack.
387|* **security.W010**: You have :mod:`django.contrib.sessions` in your
388|  :setting:`INSTALLED_APPS` but you have not set
389|  :setting:`SESSION_COOKIE_SECURE` to ``True``. Using a secure-only session
390|  cookie makes it more difficult for network traffic sniffers to hijack user
391|  sessions.
392|* **security.W011**: You have
393|  :class:`django.contrib.sessions.middleware.SessionMiddleware` in your
394|  :setting:`MIDDLEWARE`, but you have not set :setting:`SESSION_COOKIE_SECURE`
395|  to ``True``. Using a secure-only session cookie makes it more difficult for
396|  network traffic sniffers to hijack user sessions.
397|* **security.W012**: :setting:`SESSION_COOKIE_SECURE` is not set to ``True``.
398|  Using a secure-only session cookie makes it more difficult for network traffic
399|  sniffers to hijack user sessions.
400|* **security.W013**: You have :mod:`django.contrib.sessions` in your
401|  :setting:`INSTALLED_APPS`, but you have not set
402|  :setting:`SESSION_COOKIE_HTTPONLY` to ``True``. Using an ``HttpOnly`` session
403|  cookie makes it more difficult for cross-site scripting attacks to hijack user
404|  sessions.
405|* **security.W014**: You have
406|  :class:`django.contrib.sessions.middleware.SessionMiddleware` in your
407|  :setting:`MIDDLEWARE`, but you have not set :setting:`SESSION_COOKIE_HTTPONLY`
408|  to ``True``. Using an ``HttpOnly`` session cookie makes it more difficult for
409|  cross-site scripting attacks to hijack user sessions.
410|* **security.W015**: :setting:`SESSION_COOKIE_HTTPONLY` is not set to ``True``.
411|  Using an ``HttpOnly`` session cookie makes it more difficult for cross-site
412|  scripting attacks to hijack user sessions.
413|* **security.W016**: :setting:`CSRF_COOKIE_SECURE` is not set to ``True``.
414|  Using a secure-only CSRF cookie makes it more difficult for network traffic
415|  sniffers to steal the CSRF token.
416|* **security.W017**: :setting:`CSRF_COOKIE_HTTPONLY` is not set to ``True``.
417|  Using an ``HttpOnly`` CSRF cookie makes it more difficult for cross-site
418|  scripting attacks to steal the CSRF token. *This check is removed in Django
419|  1.11 as the* :setting:`CSRF_COOKIE_HTTPONLY` *setting offers no practical
420|  benefit.*
421|* **security.W018**: You should not have :setting:`DEBUG` set to ``True`` in
422|  deployment.
423|* **security.W019**: You have
424|  :class:`django.middleware.clickjacking.XFrameOptionsMiddleware` in your
425|  :setting:`MIDDLEWARE`, but :setting:`X_FRAME_OPTIONS` is not set to
426|  ``'DENY'``. Unless there is a good reason for your site to serve other parts
427|  of itself in a frame, you should change it to ``'DENY'``.
428|* **security.W020**: :setting:`ALLOWED_HOSTS` must not be empty in deployment.
429|* **security.W021**: You have not set the
430|  :setting:`SECURE_HSTS_PRELOAD` setting to ``True``. Without this, your site
431|  cannot be submitted to the browser preload list.
432|* **security.W022**: You have not set the :setting:`SECURE_REFERRER_POLICY`
433|  setting. Without this, your site will not send a Referrer-Policy header. You
434|  should consider enabling this header to protect user privacy.
435|* **security.E023**: You have set the :setting:`SECURE_REFERRER_POLICY` setting
436|  to an invalid value.
437|
438|Signals
439|-------
440|
441|* **signals.E001**: ``<handler>`` was connected to the ``<signal>`` signal with
442|  a lazy reference to the sender ``<app label>.<model>``, but app ``<app label>``
443|  isn't installed or doesn't provide model ``<model>``.
444|
445|Templates
446|---------
447|
448|The following checks verify that your :setting:`TEMPLATES` setting is correctly
449|configured:
450|
451|* **templates.E001**: You have ``'APP_DIRS': True`` in your
452|  :setting:`TEMPLATES` but also specify ``'loaders'`` in ``OPTIONS``. Either
453|  remove ``APP_DIRS`` or remove the ``'loaders'`` option.
454|* **templates.E002**: ``string_if_invalid`` in :setting:`TEMPLATES`
455|  :setting:`OPTIONS <TEMPLATES-OPTIONS>` must be a string but got: ``{value}``
456|  (``{type}``).
457|
458|Translation
459|-----------
460|
461|The following checks are performed on your translation configuration:
462|
463|* **translation.E001**: You have provided an invalid value for the
464|  :setting:`LANGUAGE_CODE` setting: ``<value>``.
465|* **translation.E002**: You have provided an invalid language code in the
466|  :setting:`LANGUAGES` setting: ``<value>``.
467|* **translation.E003**: You have provided an invalid language code in the
468|  :setting:`LANGUAGES_BIDI` setting: ``<value>``.
469|* **translation.E004**: You have provided a value for the
470|  :setting:`LANGUAGE_CODE` setting that is not in the :setting:`LANGUAGES`
471|  setting.
472|
473|URLs
474|----
475|
476|The following checks are performed on your URL configuration:
477|
478|* **urls.W001**: Your URL pattern ``<pattern>`` uses
479|  :func:`~django.urls.include` with a ``route`` ending with a ``$``. Remove the
480|  dollar from the ``route`` to avoid problems including URLs.
481|* **urls.W002**: Your URL pattern ``<pattern>`` has a ``route`` beginning with
482|  a ``/``. Remove this slash as it is unnecessary. If this pattern is targeted
483|  in an :func:`~django.urls.include`, ensure the :func:`~django.urls.include`
484|  pattern has a trailing ``/``.
485|* **urls.W003**: Your URL pattern ``<pattern>`` has a ``name``
486|  including a ``:``. Remove the colon, to avoid ambiguous namespace
487|  references.
488|* **urls.E004**: Your URL pattern ``<pattern>`` is invalid. Ensure that
489|  ``urlpatterns`` is a list of :func:`~django.urls.path` and/or
490|  :func:`~django.urls.re_path` instances.
491|* **urls.W005**: URL namespace ``<namespace>`` isn't unique. You may not be
492|  able to reverse all URLs in this namespace.
493|* **urls.E006**: The :setting:`MEDIA_URL`/ :setting:`STATIC_URL` setting must
494|  end with a slash.
495|* **urls.E007**: The custom ``handlerXXX`` view ``'path.to.view'`` does not
496|  take the correct number of arguments (…).
497|* **urls.E008**: The custom ``handlerXXX`` view ``'path.to.view'`` could not be
498|  imported.
499|
500|``contrib`` app checks
501|======================
502|
503|``admin``
504|---------
505|
506|Admin checks are all performed as part of the ``admin`` tag.
507|
508|The following checks are performed on any
509|:class:`~django.contrib.admin.ModelAdmin` (or subclass) that is registered
510|with the admin site:
511|
512|* **admin.E001**: The value of ``raw_id_fields`` must be a list or tuple.
513|* **admin.E002**: The value of ``raw_id_fields[n]`` refers to ``<field name>``,
514|  which is not an attribute of ``<model>``.
515|* **admin.E003**: The value of ``raw_id_fields[n]`` must be a foreign key or
516|  a many-to-many field.
517|* **admin.E004**: The value of ``fields`` must be a list or tuple.
518|* **admin.E005**: Both ``fieldsets`` and ``fields`` are specified.
519|* **admin.E006**: The value of ``fields`` contains duplicate field(s).
520|* **admin.E007**: The value of ``fieldsets`` must be a list or tuple.
521|* **admin.E008**: The value of ``fieldsets[n]`` must be a list or tuple.
522|* **admin.E009**: The value of ``fieldsets[n]`` must be of length 2.
523|* **admin.E010**: The value of ``fieldsets[n][1]`` must be a dictionary.
524|* **admin.E011**: The value of ``fieldsets[n][1]`` must contain the key
525|  ``fields``.
526|* **admin.E012**: There are duplicate field(s) in ``fieldsets[n][1]``.
527|* **admin.E013**: ``fields[n]/fieldsets[n][m]`` cannot include the
528|  ``ManyToManyField`` ``<field name>``, because that field manually specifies a
529|  relationship model.
530|* **admin.E014**: The value of ``exclude`` must be a list or tuple.
531|* **admin.E015**: The value of ``exclude`` contains duplicate field(s).
532|* **admin.E016**: The value of ``form`` must inherit from ``BaseModelForm``.
533|* **admin.E017**: The value of ``filter_vertical`` must be a list or tuple.
534|* **admin.E018**: The value of ``filter_horizontal`` must be a list or tuple.
535|* **admin.E019**: The value of ``filter_vertical[n]/filter_vertical[n]`` refers
536|  to ``<field name>``, which is not an attribute of ``<model>``.
537|* **admin.E020**: The value of ``filter_vertical[n]/filter_vertical[n]`` must
538|  be a many-to-many field.
539|* **admin.E021**: The value of ``radio_fields`` must be a dictionary.
540|* **admin.E022**: The value of ``radio_fields`` refers to ``<field name>``,
541|  which is not an attribute of ``<model>``.
542|* **admin.E023**: The value of ``radio_fields`` refers to ``<field name>``,
543|  which is not a ``ForeignKey``, and does not have a ``choices`` definition.
544|* **admin.E024**: The value of ``radio_fields[<field name>]`` must be either
545|  ``admin.HORIZONTAL`` or ``admin.VERTICAL``.
546|* **admin.E025**: The value of ``view_on_site`` must be either a callable or a
547|  boolean value.
548|* **admin.E026**: The value of ``prepopulated_fields`` must be a dictionary.
549|* **admin.E027**: The value of ``prepopulated_fields`` refers to
550|  ``<field name>``, which is not an attribute of ``<model>``.
551|* **admin.E028**: The value of ``prepopulated_fields`` refers to
552|  ``<field name>``, which must not be a ``DateTimeField``, a ``ForeignKey``,
553|  a ``OneToOneField``, or a ``ManyToManyField`` field.
554|* **admin.E029**: The value of ``prepopulated_fields[<field name>]`` must be a
555|  list or tuple.
556|* **admin.E030**: The value of ``prepopulated_fields`` refers to
557|  ``<field name>``, which is not an attribute of ``<model>``.
558|* **admin.E031**: The value of ``ordering`` must be a list or tuple.
559|* **admin.E032**: The value of ``ordering`` has the random ordering marker
560|  ``?``, but contains other fields as well.
561|* **admin.E033**: The value of ``ordering`` refers to ``<field name>``, which
562|  is not an attribute of ``<model>``.
563|* **admin.E034**: The value of ``readonly_fields`` must be a list or tuple.
564|* **admin.E035**: The value of ``readonly_fields[n]`` is not a callable, an
565|  attribute of ``<ModelAdmin class>``, or an attribute of ``<model>``.
566|* **admin.E036**: The value of ``autocomplete_fields`` must be a list or tuple.
567|* **admin.E037**: The value of ``autocomplete_fields[n]`` refers to
568|  ``<field name>``, which is not an attribute of ``<model>``.
569|* **admin.E038**: The value of ``autocomplete_fields[n]`` must be a foreign
570|  key or a many-to-many field.
571|* **admin.E039**: An admin for model ``<model>`` has to be registered to be
572|  referenced by ``<modeladmin>.autocomplete_fields``.
573|* **admin.E040**: ``<modeladmin>`` must define ``search_fields``, because
574|  it's referenced by ``<other_modeladmin>.autocomplete_fields``.
575|
576|``ModelAdmin``
577|~~~~~~~~~~~~~~
578|
579|The following checks are performed on any
580|:class:`~django.contrib.admin.ModelAdmin` that is registered
581|with the admin site:
582|
583|* **admin.E101**: The value of ``save_as`` must be a boolean.
584|* **admin.E102**: The value of ``save_on_top`` must be a boolean.
585|* **admin.E103**: The value of ``inlines`` must be a list or tuple.
586|* **admin.E104**: ``<InlineModelAdmin class>`` must inherit from
587|  ``InlineModelAdmin``.
588|* **admin.E105**: ``<InlineModelAdmin class>`` must have a ``model`` attribute.
589|* **admin.E106**: The value of ``<InlineModelAdmin class>.model`` must be a
590|  ``Model``.
591|* **admin.E107**: The value of ``list_display`` must be a list or tuple.
592|* **admin.E108**: The value of ``list_display[n]`` refers to ``<label>``,
593|  which is not a callable, an attribute of ``<ModelAdmin class>``, or an
594|  attribute or method on ``<model>``.
595|* **admin.E109**: The value of ``list_display[n]`` must not be a
596|  ``ManyToManyField`` field.
597|* **admin.E110**: The value of ``list_display_links`` must be a list, a tuple,
598|  or ``None``.
599|* **admin.E111**: The value of ``list_display_links[n]`` refers to ``<label>``,
600|  which is not defined in ``list_display``.
601|* **admin.E112**: The value of ``list_filter`` must be a list or tuple.
602|* **admin.E113**: The value of ``list_filter[n]`` must inherit from
603|  ``ListFilter``.
604|* **admin.E114**: The value of ``list_filter[n]`` must not inherit from
605|  ``FieldListFilter``.
606|* **admin.E115**: The value of ``list_filter[n][1]`` must inherit from
607|  ``FieldListFilter``.
608|* **admin.E116**: The value of ``list_filter[n]`` refers to ``<label>``,
609|  which does not refer to a Field.
610|* **admin.E117**: The value of ``list_select_related`` must be a boolean,
611|  tuple or list.
612|* **admin.E118**: The value of ``list_per_page`` must be an integer.
613|* **admin.E119**: The value of ``list_max_show_all`` must be an integer.
614|* **admin.E120**: The value of ``list_editable`` must be a list or tuple.
615|* **admin.E121**: The value of ``list_editable[n]`` refers to ``<label>``,
616|  which is not an attribute of ``<model>``.
617|* **admin.E122**: The value of ``list_editable[n]`` refers to ``<label>``,
618|  which is not contained in ``list_display``.
619|* **admin.E123**: The value of ``list_editable[n]`` cannot be in both
620|  ``list_editable`` and ``list_display_links``.
621|* **admin.E124**: The value of ``list_editable[n]`` refers to the first field
622|  in ``list_display`` (``<label>``), which cannot be used unless
623|  ``list_display_links`` is set.
624|* **admin.E125**: The value of ``list_editable[n]`` refers to ``<field name>``,
625|  which is not editable through the admin.
626|* **admin.E126**: The value of ``search_fields`` must be a list or tuple.
627|* **admin.E127**: The value of ``date_hierarchy`` refers to ``<field name>``,
628|  which does not refer to a Field.
629|* **admin.E128**: The value of ``date_hierarchy`` must be a ``DateField`` or
630|  ``DateTimeField``.
631|* **admin.E129**: ``<modeladmin>`` must define a ``has_<foo>_permission()``
632|  method for the ``<action>`` action.
633|* **admin.E130**: ``__name__`` attributes of actions defined in
634|  ``<modeladmin>`` must be unique.
635|
636|``InlineModelAdmin``
637|~~~~~~~~~~~~~~~~~~~~
638|
639|The following checks are performed on any
640|:class:`~django.contrib.admin.InlineModelAdmin` that is registered as an
641|inline on a :class:`~django.contrib.admin.ModelAdmin`.
642|
643|* **admin.E201**: Cannot exclude the field ``<field name>``, because it is the
644|  foreign key to the parent model ``<app_label>.<model>``.
645|* **admin.E202**: ``<model>`` has no ``ForeignKey`` to ``<parent model>``./
646|  ``<model>`` has more than one ``ForeignKey`` to ``<parent model>``.
647|* **admin.E203**: The value of ``extra`` must be an integer.
648|* **admin.E204**: The value of ``max_num`` must be an integer.
649|* **admin.E205**: The value of ``min_num`` must be an integer.
650|* **admin.E206**: The value of ``formset`` must inherit from
651|  ``BaseModelFormSet``.
652|
653|``GenericInlineModelAdmin``
654|~~~~~~~~~~~~~~~~~~~~~~~~~~~
655|
656|The following checks are performed on any
657|:class:`~django.contrib.contenttypes.admin.GenericInlineModelAdmin` that is
658|registered as an inline on a :class:`~django.contrib.admin.ModelAdmin`.
659|
660|* **admin.E301**: ``'ct_field'`` references ``<label>``, which is not a field
661|  on ``<model>``.
662|* **admin.E302**: ``'ct_fk_field'`` references ``<label>``, which is not a
663|  field on ``<model>``.
664|* **admin.E303**: ``<model>`` has no ``GenericForeignKey``.
665|* **admin.E304**: ``<model>`` has no ``GenericForeignKey`` using content type
666|  field ``<field name>`` and object ID field ``<field name>``.
667|
668|``AdminSite``
669|~~~~~~~~~~~~~
670|
671|The following checks are performed on the default
672|:class:`~django.contrib.admin.AdminSite`:
673|
674|* **admin.E401**: :mod:`django.contrib.contenttypes` must be in
675|  :setting:`INSTALLED_APPS` in order to use the admin application.
676|* **admin.E402**: :mod:`django.contrib.auth.context_processors.auth`
677|  must be enabled in :class:`~django.template.backends.django.DjangoTemplates`
678|  (:setting:`TEMPLATES`) if using the default auth backend in order to use the
679|  admin application.
680|* **admin.E403**: A :class:`django.template.backends.django.DjangoTemplates`
681|  instance must be configured in :setting:`TEMPLATES` in order to use the
682|  admin application.
683|* **admin.E404**: ``django.contrib.messages.context_processors.messages``
684|  must be enabled in :class:`~django.template.backends.django.DjangoTemplates`
685|  (:setting:`TEMPLATES`) in order to use the admin application.
686|* **admin.E405**: :mod:`django.contrib.auth` must be in
687|  :setting:`INSTALLED_APPS` in order to use the admin application.
688|* **admin.E406**: :mod:`django.contrib.messages` must be in
689|  :setting:`INSTALLED_APPS` in order to use the admin application.
690|* **admin.E408**:
691|  :class:`django.contrib.auth.middleware.AuthenticationMiddleware` must be in
692|  :setting:`MIDDLEWARE` in order to use the admin application.
693|* **admin.E409**: :class:`django.contrib.messages.middleware.MessageMiddleware`
694|  must be in :setting:`MIDDLEWARE` in order to use the admin application.
695|* **admin.E410**: :class:`django.contrib.sessions.middleware.SessionMiddleware`
696|  must be in :setting:`MIDDLEWARE` in order to use the admin application.
697|
698|``auth``
699|--------
700|
701|* **auth.E001**: ``REQUIRED_FIELDS`` must be a list or tuple.
702|* **auth.E002**: The field named as the ``USERNAME_FIELD`` for a custom user
703|  model must not be included in ``REQUIRED_FIELDS``.
704|* **auth.E003**: ``<field>`` must be unique because it is named as the
705|  ``USERNAME_FIELD``.
706|* **auth.W004**: ``<field>`` is named as the ``USERNAME_FIELD``, but it is not
707|  unique.
708|* **auth.E005**: The permission codenamed ``<codename>`` clashes with a builtin
709|  permission for model ``<model>``.
710|* **auth.E006**: The permission codenamed ``<codename>`` is duplicated for model
711|  ``<model>``.
712|* **auth.E007**: The :attr:`verbose_name
713|  <django.db.models.Options.verbose_name>` of model ``<model>`` must be at most
714|  244 characters for its builtin permission names
715|  to be at most 255 characters.
716|* **auth.E008**: The permission named ``<name>`` of model ``<model>`` is longer
717|  than 255 characters.
718|* **auth.C009**: ``<User model>.is_anonymous`` must be an attribute or property
719|  rather than a method. Ignoring this is a security issue as anonymous users
720|  will be treated as authenticated!
721|* **auth.C010**: ``<User model>.is_authenticated`` must be an attribute or
722|  property rather than a method. Ignoring this is a security issue as anonymous
723|  users will be treated as authenticated!
724|
725|``contenttypes``
726|----------------
727|
728|The following checks are performed when a model contains a
729|:class:`~django.contrib.contenttypes.fields.GenericForeignKey` or
730|:class:`~django.contrib.contenttypes.fields.GenericRelation`:
731|
732|* **contenttypes.E001**: The ``GenericForeignKey`` object ID references the
733|  nonexistent field ``<field>``.
734|* **contenttypes.E002**: The ``GenericForeignKey`` content type references the
735|  nonexistent field ``<field>``.
736|* **contenttypes.E003**: ``<field>`` is not a ``ForeignKey``.
737|* **contenttypes.E004**: ``<field>`` is not a ``ForeignKey`` to
738|  ``contenttypes.ContentType``.
739|* **contenttypes.E005**: Model names must be at most 100 characters.
740|
741|``postgres``
742|------------
743|
744|The following checks are performed on :mod:`django.contrib.postgres` model
745|fields:
746|
747|* **postgres.E001**: Base field for array has errors: ...
748|* **postgres.E002**: Base field for array cannot be a related field.
749|* **postgres.E003**: ``<field>`` default should be a callable instead of an
750|  instance so that it's not shared between all field instances.
751|
752|``sites``
753|---------
754|
755|The following checks are performed on any model using a
756|:class:`~django.contrib.sites.managers.CurrentSiteManager`:
757|
758|* **sites.E001**: ``CurrentSiteManager`` could not find a field named
759|  ``<field name>``.
760|* **sites.E002**: ``CurrentSiteManager`` cannot use ``<field>`` as it is not a
761|  foreign key or a many-to-many field.
762|
763|``staticfiles``
764|---------------
765|
766|The following checks verify that :mod:`django.contrib.staticfiles` is correctly
767|configured:
768|
769|* **staticfiles.E001**: The :setting:`STATICFILES_DIRS` setting is not a tuple
770|  or list.
771|* **staticfiles.E002**: The :setting:`STATICFILES_DIRS` setting should not
772|  contain the :setting:`STATIC_ROOT` setting.
773|* **staticfiles.E003**: The prefix ``<prefix>`` in the
774|  :setting:`STATICFILES_DIRS` setting must not end with a slash.


============================================================



ACTION:

THOUGHT: Let me check the test files since they might contain more information about E015. Let's look at invalid_models_tests:
CODE:
open_file('/workspace/django__django__3.1/tests/invalid_models_tests/test_models.py')

============================================================



OBSERVATION:

[File: /workspace/django__django__3.1/tests/invalid_models_tests/test_models.py (1203 lines total)]
1|import unittest
2|
3|from django.conf import settings
4|from django.core.checks import Error, Warning
5|from django.core.checks.model_checks import _check_lazy_references
6|from django.core.exceptions import ImproperlyConfigured
7|from django.db import connection, connections, models
8|from django.db.models.functions import Lower
9|from django.db.models.signals import post_init
10|from django.test import SimpleTestCase
11|from django.test.utils import isolate_apps, override_settings, register_lookup
12|
13|
14|def get_max_column_name_length():
15|    allowed_len = None
16|    db_alias = None
17|
18|    for db in settings.DATABASES:
19|        connection = connections[db]
20|        max_name_length = connection.ops.max_name_length()
21|        if max_name_length is not None and not connection.features.truncates_names:
22|            if allowed_len is None or max_name_length < allowed_len:
23|                allowed_len = max_name_length
24|                db_alias = db
25|
26|    return (allowed_len, db_alias)
27|
28|
29|@isolate_apps('invalid_models_tests')
30|class IndexTogetherTests(SimpleTestCase):
31|
32|    def test_non_iterable(self):
33|        class Model(models.Model):
34|            class Meta:
35|                index_together = 42
36|
37|        self.assertEqual(Model.check(), [
38|            Error(
39|                "'index_together' must be a list or tuple.",
40|                obj=Model,
41|                id='models.E008',
42|            ),
43|        ])
44|
45|    def test_non_list(self):
46|        class Model(models.Model):
47|            class Meta:
48|                index_together = 'not-a-list'
49|
50|        self.assertEqual(Model.check(), [
51|            Error(
52|                "'index_together' must be a list or tuple.",
53|                obj=Model,
54|                id='models.E008',
55|            ),
56|        ])
57|
58|    def test_list_containing_non_iterable(self):
59|        class Model(models.Model):
60|            class Meta:
61|                index_together = [('a', 'b'), 42]
62|
63|        self.assertEqual(Model.check(), [
64|            Error(
65|                "All 'index_together' elements must be lists or tuples.",
66|                obj=Model,
67|                id='models.E009',
68|            ),
69|        ])
70|
71|    def test_pointing_to_missing_field(self):
72|        class Model(models.Model):
73|            class Meta:
74|                index_together = [['missing_field']]
75|
76|        self.assertEqual(Model.check(), [
77|            Error(
78|                "'index_together' refers to the nonexistent field 'missing_field'.",
79|                obj=Model,
80|                id='models.E012',
81|            ),
82|        ])
83|
84|    def test_pointing_to_non_local_field(self):
85|        class Foo(models.Model):
86|            field1 = models.IntegerField()
87|
88|        class Bar(Foo):
89|            field2 = models.IntegerField()
90|
91|            class Meta:
92|                index_together = [['field2', 'field1']]
93|
94|        self.assertEqual(Bar.check(), [
95|            Error(
96|                "'index_together' refers to field 'field1' which is not "
97|                "local to model 'Bar'.",
98|                hint='This issue may be caused by multi-table inheritance.',
99|                obj=Bar,
100|                id='models.E016',
101|            ),
102|        ])
103|
104|    def test_pointing_to_m2m_field(self):
105|        class Model(models.Model):
106|            m2m = models.ManyToManyField('self')
107|
108|            class Meta:
109|                index_together = [['m2m']]
110|
111|        self.assertEqual(Model.check(), [
112|            Error(
113|                "'index_together' refers to a ManyToManyField 'm2m', but "
114|                "ManyToManyFields are not permitted in 'index_together'.",
115|                obj=Model,
116|                id='models.E013',
117|            ),
118|        ])
119|
120|    def test_pointing_to_fk(self):
121|        class Foo(models.Model):
122|            pass
123|
124|        class Bar(models.Model):
125|            foo_1 = models.ForeignKey(Foo, on_delete=models.CASCADE, related_name='bar_1')
126|            foo_2 = models.ForeignKey(Foo, on_delete=models.CASCADE, related_name='bar_2')
127|
128|            class Meta:
129|                index_together = [['foo_1_id', 'foo_2']]
130|
131|        self.assertEqual(Bar.check(), [])
132|
133|
134|# unique_together tests are very similar to index_together tests.
135|@isolate_apps('invalid_models_tests')
136|class UniqueTogetherTests(SimpleTestCase):
137|
138|    def test_non_iterable(self):
139|        class Model(models.Model):
140|            class Meta:
141|                unique_together = 42
142|
143|        self.assertEqual(Model.check(), [
144|            Error(
145|                "'unique_together' must be a list or tuple.",
146|                obj=Model,
147|                id='models.E010',
148|            ),
149|        ])
150|
151|    def test_list_containing_non_iterable(self):
152|        class Model(models.Model):
153|            one = models.IntegerField()
154|            two = models.IntegerField()
155|
156|            class Meta:
157|                unique_together = [('a', 'b'), 42]
158|
159|        self.assertEqual(Model.check(), [
160|            Error(
161|                "All 'unique_together' elements must be lists or tuples.",
162|                obj=Model,
163|                id='models.E011',
164|            ),
165|        ])
166|
167|    def test_non_list(self):
168|        class Model(models.Model):
169|            class Meta:
170|                unique_together = 'not-a-list'
171|
172|        self.assertEqual(Model.check(), [
173|            Error(
174|                "'unique_together' must be a list or tuple.",
175|                obj=Model,
176|                id='models.E010',
177|            ),
178|        ])
179|
180|    def test_valid_model(self):
181|        class Model(models.Model):
182|            one = models.IntegerField()
183|            two = models.IntegerField()
184|
185|            class Meta:
186|                # unique_together can be a simple tuple
187|                unique_together = ('one', 'two')
188|
189|        self.assertEqual(Model.check(), [])
190|
191|    def test_pointing_to_missing_field(self):
192|        class Model(models.Model):
193|            class Meta:
194|                unique_together = [['missing_field']]
195|
196|        self.assertEqual(Model.check(), [
197|            Error(
198|                "'unique_together' refers to the nonexistent field 'missing_field'.",
199|                obj=Model,
200|                id='models.E012',
201|            ),
202|        ])
203|
204|    def test_pointing_to_m2m(self):
205|        class Model(models.Model):
206|            m2m = models.ManyToManyField('self')
207|
208|            class Meta:
209|                unique_together = [['m2m']]
210|
211|        self.assertEqual(Model.check(), [
212|            Error(
213|                "'unique_together' refers to a ManyToManyField 'm2m', but "
214|                "ManyToManyFields are not permitted in 'unique_together'.",
215|                obj=Model,
216|                id='models.E013',
217|            ),
218|        ])
219|
220|    def test_pointing_to_fk(self):
221|        class Foo(models.Model):
222|            pass
223|
224|        class Bar(models.Model):
225|            foo_1 = models.ForeignKey(Foo, on_delete=models.CASCADE, related_name='bar_1')
226|            foo_2 = models.ForeignKey(Foo, on_delete=models.CASCADE, related_name='bar_2')
227|
228|            class Meta:
229|                unique_together = [['foo_1_id', 'foo_2']]
230|
231|        self.assertEqual(Bar.check(), [])
232|
233|
234|@isolate_apps('invalid_models_tests')
235|class IndexesTests(SimpleTestCase):
236|
237|    def test_pointing_to_missing_field(self):
238|        class Model(models.Model):
239|            class Meta:
240|                indexes = [models.Index(fields=['missing_field'], name='name')]
241|
242|        self.assertEqual(Model.check(), [
243|            Error(
244|                "'indexes' refers to the nonexistent field 'missing_field'.",
245|                obj=Model,
246|                id='models.E012',
247|            ),
248|        ])
249|
250|    def test_pointing_to_m2m_field(self):
251|        class Model(models.Model):
252|            m2m = models.ManyToManyField('self')
253|
254|            class Meta:
255|                indexes = [models.Index(fields=['m2m'], name='name')]
256|
257|        self.assertEqual(Model.check(), [
258|            Error(
259|                "'indexes' refers to a ManyToManyField 'm2m', but "
260|                "ManyToManyFields are not permitted in 'indexes'.",
261|                obj=Model,
262|                id='models.E013',
263|            ),
264|        ])
265|
266|    def test_pointing_to_non_local_field(self):
267|        class Foo(models.Model):
268|            field1 = models.IntegerField()
269|
270|        class Bar(Foo):
271|            field2 = models.IntegerField()
272|
273|            class Meta:
274|                indexes = [models.Index(fields=['field2', 'field1'], name='name')]
275|
276|        self.assertEqual(Bar.check(), [
277|            Error(
278|                "'indexes' refers to field 'field1' which is not local to "
279|                "model 'Bar'.",
280|                hint='This issue may be caused by multi-table inheritance.',
281|                obj=Bar,
282|                id='models.E016',
283|            ),
284|        ])
285|
286|    def test_pointing_to_fk(self):
287|        class Foo(models.Model):
288|            pass
289|
290|        class Bar(models.Model):
291|            foo_1 = models.ForeignKey(Foo, on_delete=models.CASCADE, related_name='bar_1')
292|            foo_2 = models.ForeignKey(Foo, on_delete=models.CASCADE, related_name='bar_2')
293|
294|            class Meta:
295|                indexes = [models.Index(fields=['foo_1_id', 'foo_2'], name='index_name')]
296|
297|        self.assertEqual(Bar.check(), [])
298|
299|    def test_name_constraints(self):
300|        class Model(models.Model):
301|            class Meta:
302|                indexes = [
303|                    models.Index(fields=['id'], name='_index_name'),
304|                    models.Index(fields=['id'], name='5index_name'),
305|                ]
306|
307|        self.assertEqual(Model.check(), [
308|            Error(
309|                "The index name '%sindex_name' cannot start with an "
310|                "underscore or a number." % prefix,
311|                obj=Model,
312|                id='models.E033',
313|            ) for prefix in ('_', '5')
314|        ])
315|
316|    def test_max_name_length(self):
317|        index_name = 'x' * 31
318|
319|        class Model(models.Model):
320|            class Meta:
321|                indexes = [models.Index(fields=['id'], name=index_name)]
322|
323|        self.assertEqual(Model.check(), [
324|            Error(
325|                "The index name '%s' cannot be longer than 30 characters."
326|                % index_name,
327|                obj=Model,
328|                id='models.E034',
329|            ),
330|        ])
331|
332|
333|@isolate_apps('invalid_models_tests')
334|class FieldNamesTests(SimpleTestCase):
335|
336|    def test_ending_with_underscore(self):
337|        class Model(models.Model):
338|            field_ = models.CharField(max_length=10)
339|            m2m_ = models.ManyToManyField('self')
340|
341|        self.assertEqual(Model.check(), [
342|            Error(
343|                'Field names must not end with an underscore.',
344|                obj=Model._meta.get_field('field_'),
345|                id='fields.E001',
346|            ),
347|            Error(
348|                'Field names must not end with an underscore.',
349|                obj=Model._meta.get_field('m2m_'),
350|                id='fields.E001',
351|            ),
352|        ])
353|
354|    max_column_name_length, column_limit_db_alias = get_max_column_name_length()
355|
356|    @unittest.skipIf(max_column_name_length is None, "The database doesn't have a column name length limit.")
357|    def test_M2M_long_column_name(self):
358|        """
359|        #13711 -- Model check for long M2M column names when database has
360|        column name length limits.
361|        """
362|        allowed_len, db_alias = get_max_column_name_length()
363|
364|        # A model with very long name which will be used to set relations to.
365|        class VeryLongModelNamezzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(models.Model):
366|            title = models.CharField(max_length=11)
367|
368|        # Main model for which checks will be performed.
369|        class ModelWithLongField(models.Model):
370|            m2m_field = models.ManyToManyField(
371|                VeryLongModelNamezzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz,
372|                related_name='rn1',
373|            )
374|            m2m_field2 = models.ManyToManyField(
375|                VeryLongModelNamezzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz,
376|                related_name='rn2', through='m2msimple',
377|            )
378|            m2m_field3 = models.ManyToManyField(
379|                VeryLongModelNamezzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz,
380|                related_name='rn3',
381|                through='m2mcomplex',
382|            )
383|            fk = models.ForeignKey(
384|                VeryLongModelNamezzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz,
385|                models.CASCADE,
386|                related_name='rn4',
387|            )
388|
389|        # Models used for setting `through` in M2M field.
390|        class m2msimple(models.Model):
391|            id2 = models.ForeignKey(ModelWithLongField, models.CASCADE)
392|
393|        class m2mcomplex(models.Model):
394|            id2 = models.ForeignKey(ModelWithLongField, models.CASCADE)
395|
396|        long_field_name = 'a' * (self.max_column_name_length + 1)
397|        models.ForeignKey(
398|            VeryLongModelNamezzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz,
399|            models.CASCADE,
400|        ).contribute_to_class(m2msimple, long_field_name)
401|
402|        models.ForeignKey(
403|            VeryLongModelNamezzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz,
404|            models.CASCADE,
405|            db_column=long_field_name
406|        ).contribute_to_class(m2mcomplex, long_field_name)
407|
408|        errors = ModelWithLongField.check()
409|
410|        # First error because of M2M field set on the model with long name.
411|        m2m_long_name = "verylongmodelnamezzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz_id"
412|        if self.max_column_name_length > len(m2m_long_name):
413|            # Some databases support names longer than the test name.
414|            expected = []
415|        else:
416|            expected = [
417|                Error(
418|                    'Autogenerated column name too long for M2M field "%s". '
419|                    'Maximum length is "%s" for database "%s".'
420|                    % (m2m_long_name, self.max_column_name_length, self.column_limit_db_alias),
421|                    hint="Use 'through' to create a separate model for "
422|                         "M2M and then set column_name using 'db_column'.",
423|                    obj=ModelWithLongField,
424|                    id='models.E019',
425|                )
426|            ]
427|
428|        # Second error because the FK specified in the `through` model
429|        # `m2msimple` has auto-generated name longer than allowed.
430|        # There will be no check errors in the other M2M because it
431|        # specifies db_column for the FK in `through` model even if the actual
432|        # name is longer than the limits of the database.
433|        expected.append(
434|            Error(
435|                'Autogenerated column name too long for M2M field "%s_id". '
436|                'Maximum length is "%s" for database "%s".'
437|                % (long_field_name, self.max_column_name_length, self.column_limit_db_alias),
438|                hint="Use 'through' to create a separate model for "
439|                     "M2M and then set column_name using 'db_column'.",
440|                obj=ModelWithLongField,
441|                id='models.E019',
442|            )
443|        )
444|
445|        self.assertEqual(errors, expected)
446|
447|    @unittest.skipIf(max_column_name_length is None, "The database doesn't have a column name length limit.")
448|    def test_local_field_long_column_name(self):
449|        """
450|        #13711 -- Model check for long column names
451|        when database does not support long names.
452|        """
453|        allowed_len, db_alias = get_max_column_name_length()
454|
455|        class ModelWithLongField(models.Model):
456|            title = models.CharField(max_length=11)
457|
458|        long_field_name = 'a' * (self.max_column_name_length + 1)
459|        long_field_name2 = 'b' * (self.max_column_name_length + 1)
460|        models.CharField(max_length=11).contribute_to_class(ModelWithLongField, long_field_name)
461|        models.CharField(max_length=11, db_column='vlmn').contribute_to_class(ModelWithLongField, long_field_name2)
462|        self.assertEqual(ModelWithLongField.check(), [
463|            Error(
464|                'Autogenerated column name too long for field "%s". '
465|                'Maximum length is "%s" for database "%s".'
466|                % (long_field_name, self.max_column_name_length, self.column_limit_db_alias),
467|                hint="Set the column name manually using 'db_column'.",
468|                obj=ModelWithLongField,
469|                id='models.E018',
470|            )
471|        ])
472|
473|    def test_including_separator(self):
474|        class Model(models.Model):
475|            some__field = models.IntegerField()
476|
477|        self.assertEqual(Model.check(), [
478|            Error(
479|                'Field names must not contain "__".',
480|                obj=Model._meta.get_field('some__field'),
481|                id='fields.E002',
482|            )
483|        ])
484|
485|    def test_pk(self):
486|        class Model(models.Model):
487|            pk = models.IntegerField()
488|
489|        self.assertEqual(Model.check(), [
490|            Error(
491|                "'pk' is a reserved word that cannot be used as a field name.",
492|                obj=Model._meta.get_field('pk'),
493|                id='fields.E003',
494|            )
495|        ])
496|
497|    def test_db_column_clash(self):
498|        class Model(models.Model):
499|            foo = models.IntegerField()
500|            bar = models.IntegerField(db_column='foo')
501|
502|        self.assertEqual(Model.check(), [
503|            Error(
504|                "Field 'bar' has column name 'foo' that is used by "
505|                "another field.",
506|                hint="Specify a 'db_column' for the field.",
507|                obj=Model,
508|                id='models.E007',
509|            )
510|        ])
511|
512|
513|@isolate_apps('invalid_models_tests')
514|class ShadowingFieldsTests(SimpleTestCase):
515|
516|    def test_field_name_clash_with_child_accessor(self):
517|        class Parent(models.Model):
518|            pass
519|
520|        class Child(Parent):
521|            child = models.CharField(max_length=100)
522|
523|        self.assertEqual(Child.check(), [
524|            Error(
525|                "The field 'child' clashes with the field "
526|                "'child' from model 'invalid_models_tests.parent'.",
527|                obj=Child._meta.get_field('child'),
528|                id='models.E006',
529|            )
530|        ])
531|
532|    def test_multiinheritance_clash(self):
533|        class Mother(models.Model):
534|            clash = models.IntegerField()
535|
536|        class Father(models.Model):
537|            clash = models.IntegerField()
538|
539|        class Child(Mother, Father):
540|            # Here we have two clashed: id (automatic field) and clash, because
541|            # both parents define these fields.
542|            pass
543|
544|        self.assertEqual(Child.check(), [
545|            Error(
546|                "The field 'id' from parent model "
547|                "'invalid_models_tests.mother' clashes with the field 'id' "
548|                "from parent model 'invalid_models_tests.father'.",
549|                obj=Child,
550|                id='models.E005',
551|            ),
552|            Error(
553|                "The field 'clash' from parent model "
554|                "'invalid_models_tests.mother' clashes with the field 'clash' "
555|                "from parent model 'invalid_models_tests.father'.",
556|                obj=Child,
557|                id='models.E005',
558|            )
559|        ])
560|
561|    def test_inheritance_clash(self):
562|        class Parent(models.Model):
563|            f_id = models.IntegerField()
564|
565|        class Target(models.Model):
566|            # This field doesn't result in a clash.
567|            f_id = models.IntegerField()
568|
569|        class Child(Parent):
570|            # This field clashes with parent "f_id" field.
571|            f = models.ForeignKey(Target, models.CASCADE)
572|
573|        self.assertEqual(Child.check(), [
574|            Error(
575|                "The field 'f' clashes with the field 'f_id' "
576|                "from model 'invalid_models_tests.parent'.",
577|                obj=Child._meta.get_field('f'),
578|                id='models.E006',
579|            )
580|        ])
581|
582|    def test_multigeneration_inheritance(self):
583|        class GrandParent(models.Model):
584|            clash = models.IntegerField()
585|
586|        class Parent(GrandParent):
587|            pass
588|
589|        class Child(Parent):
590|            pass
591|
592|        class GrandChild(Child):
593|            clash = models.IntegerField()
594|
595|        self.assertEqual(GrandChild.check(), [
596|            Error(
597|                "The field 'clash' clashes with the field 'clash' "
598|                "from model 'invalid_models_tests.grandparent'.",
599|                obj=GrandChild._meta.get_field('clash'),
600|                id='models.E006',
601|            )
602|        ])
603|
604|    def test_id_clash(self):
605|        class Target(models.Model):
606|            pass
607|
608|        class Model(models.Model):
609|            fk = models.ForeignKey(Target, models.CASCADE)
610|            fk_id = models.IntegerField()
611|
612|        self.assertEqual(Model.check(), [
613|            Error(
614|                "The field 'fk_id' clashes with the field 'fk' from model "
615|                "'invalid_models_tests.model'.",
616|                obj=Model._meta.get_field('fk_id'),
617|                id='models.E006',
618|            )
619|        ])
620|
621|
622|@isolate_apps('invalid_models_tests')
623|class OtherModelTests(SimpleTestCase):
624|
625|    def test_unique_primary_key(self):
626|        invalid_id = models.IntegerField(primary_key=False)
627|
628|        class Model(models.Model):
629|            id = invalid_id
630|
631|        self.assertEqual(Model.check(), [
632|            Error(
633|                "'id' can only be used as a field name if the field also sets "
634|                "'primary_key=True'.",
635|                obj=Model,
636|                id='models.E004',
637|            ),
638|        ])
639|
640|    def test_ordering_non_iterable(self):
641|        class Model(models.Model):
642|            class Meta:
643|                ordering = 'missing_field'
644|
645|        self.assertEqual(Model.check(), [
646|            Error(
647|                "'ordering' must be a tuple or list "
648|                "(even if you want to order by only one field).",
649|                obj=Model,
650|                id='models.E014',
651|            ),
652|        ])
653|
654|    def test_just_ordering_no_errors(self):
655|        class Model(models.Model):
656|            order = models.PositiveIntegerField()
657|
658|            class Meta:
659|                ordering = ['order']
660|
661|        self.assertEqual(Model.check(), [])
662|
663|    def test_just_order_with_respect_to_no_errors(self):
664|        class Question(models.Model):
665|            pass
666|
667|        class Answer(models.Model):
668|            question = models.ForeignKey(Question, models.CASCADE)
669|
670|            class Meta:
671|                order_with_respect_to = 'question'
672|
673|        self.assertEqual(Answer.check(), [])
674|
675|    def test_ordering_with_order_with_respect_to(self):
676|        class Question(models.Model):
677|            pass
678|
679|        class Answer(models.Model):
680|            question = models.ForeignKey(Question, models.CASCADE)
681|            order = models.IntegerField()
682|
683|            class Meta:
684|                order_with_respect_to = 'question'
685|                ordering = ['order']
686|
687|        self.assertEqual(Answer.check(), [
688|            Error(
689|                "'ordering' and 'order_with_respect_to' cannot be used together.",
690|                obj=Answer,
691|                id='models.E021',
692|            ),
693|        ])
694|
695|    def test_non_valid(self):
696|        class RelationModel(models.Model):
697|            pass
698|
699|        class Model(models.Model):
700|            relation = models.ManyToManyField(RelationModel)
701|
702|            class Meta:
703|                ordering = ['relation']
704|
705|        self.assertEqual(Model.check(), [
706|            Error(
707|                "'ordering' refers to the nonexistent field, related field, "
708|                "or lookup 'relation'.",
709|                obj=Model,
710|                id='models.E015',
711|            ),
712|        ])
713|
714|    def test_ordering_pointing_to_missing_field(self):
715|        class Model(models.Model):
716|            class Meta:
717|                ordering = ('missing_field',)
718|
719|        self.assertEqual(Model.check(), [
720|            Error(
721|                "'ordering' refers to the nonexistent field, related field, "
722|                "or lookup 'missing_field'.",
723|                obj=Model,
724|                id='models.E015',
725|            )
726|        ])
727|
728|    def test_ordering_pointing_to_missing_foreignkey_field(self):
729|        class Model(models.Model):
730|            missing_fk_field = models.IntegerField()
731|
732|            class Meta:
733|                ordering = ('missing_fk_field_id',)
734|
735|        self.assertEqual(Model.check(), [
736|            Error(
737|                "'ordering' refers to the nonexistent field, related field, "
738|                "or lookup 'missing_fk_field_id'.",
739|                obj=Model,
740|                id='models.E015',
741|            )
742|        ])
743|
744|    def test_ordering_pointing_to_missing_related_field(self):
745|        class Model(models.Model):
746|            test = models.IntegerField()
747|
748|            class Meta:
749|                ordering = ('missing_related__id',)
750|
751|        self.assertEqual(Model.check(), [
752|            Error(
753|                "'ordering' refers to the nonexistent field, related field, "
754|                "or lookup 'missing_related__id'.",
755|                obj=Model,
756|                id='models.E015',
757|            )
758|        ])
759|
760|    def test_ordering_pointing_to_missing_related_model_field(self):
761|        class Parent(models.Model):
762|            pass
763|
764|        class Child(models.Model):
765|            parent = models.ForeignKey(Parent, models.CASCADE)
766|
767|            class Meta:
768|                ordering = ('parent__missing_field',)
769|
770|        self.assertEqual(Child.check(), [
771|            Error(
772|                "'ordering' refers to the nonexistent field, related field, "
773|                "or lookup 'parent__missing_field'.",
774|                obj=Child,
775|                id='models.E015',
776|            )
777|        ])
778|
779|    def test_ordering_pointing_to_non_related_field(self):
780|        class Child(models.Model):
781|            parent = models.IntegerField()
782|
783|            class Meta:
784|                ordering = ('parent__missing_field',)
785|
786|        self.assertEqual(Child.check(), [
787|            Error(
788|                "'ordering' refers to the nonexistent field, related field, "
789|                "or lookup 'parent__missing_field'.",
790|                obj=Child,
791|                id='models.E015',
792|            )
793|        ])
794|
795|    def test_ordering_pointing_to_two_related_model_field(self):
796|        class Parent2(models.Model):
797|            pass
798|
799|        class Parent1(models.Model):
800|            parent2 = models.ForeignKey(Parent2, models.CASCADE)
801|
802|        class Child(models.Model):
803|            parent1 = models.ForeignKey(Parent1, models.CASCADE)
804|
805|            class Meta:
806|                ordering = ('parent1__parent2__missing_field',)
807|
808|        self.assertEqual(Child.check(), [
809|            Error(
810|                "'ordering' refers to the nonexistent field, related field, "
811|                "or lookup 'parent1__parent2__missing_field'.",
812|                obj=Child,
813|                id='models.E015',
814|            )
815|        ])
816|
817|    def test_ordering_allows_registered_lookups(self):
818|        class Model(models.Model):
819|            test = models.CharField(max_length=100)
820|
821|            class Meta:
822|                ordering = ('test__lower',)
823|
824|        with register_lookup(models.CharField, Lower):
825|            self.assertEqual(Model.check(), [])
826|
827|    def test_ordering_pointing_to_foreignkey_field(self):
828|        class Parent(models.Model):
829|            pass
830|
831|        class Child(models.Model):
832|            parent = models.ForeignKey(Parent, models.CASCADE)
833|
834|            class Meta:
835|                ordering = ('parent_id',)
836|
837|        self.assertFalse(Child.check())
838|
839|    def test_name_beginning_with_underscore(self):
840|        class _Model(models.Model):
841|            pass
842|
843|        self.assertEqual(_Model.check(), [
844|            Error(
845|                "The model name '_Model' cannot start or end with an underscore "
846|                "as it collides with the query lookup syntax.",
847|                obj=_Model,
848|                id='models.E023',
849|            )
850|        ])
851|
852|    def test_name_ending_with_underscore(self):
853|        class Model_(models.Model):
854|            pass
855|
856|        self.assertEqual(Model_.check(), [
857|            Error(
858|                "The model name 'Model_' cannot start or end with an underscore "
859|                "as it collides with the query lookup syntax.",
860|                obj=Model_,
861|                id='models.E023',
862|            )
863|        ])
864|
865|    def test_name_contains_double_underscores(self):
866|        class Test__Model(models.Model):
867|            pass
868|
869|        self.assertEqual(Test__Model.check(), [
870|            Error(
871|                "The model name 'Test__Model' cannot contain double underscores "
872|                "as it collides with the query lookup syntax.",
873|                obj=Test__Model,
874|                id='models.E024',
875|            )
876|        ])
877|
878|    def test_property_and_related_field_accessor_clash(self):
879|        class Model(models.Model):
880|            fk = models.ForeignKey('self', models.CASCADE)
881|
882|            @property
883|            def fk_id(self):
884|                pass
885|
886|        self.assertEqual(Model.check(), [
887|            Error(
888|                "The property 'fk_id' clashes with a related field accessor.",
889|                obj=Model,
890|                id='models.E025',
891|            )
892|        ])
893|
894|    def test_single_primary_key(self):
895|        class Model(models.Model):
896|            foo = models.IntegerField(primary_key=True)
897|            bar = models.IntegerField(primary_key=True)
898|
899|        self.assertEqual(Model.check(), [
900|            Error(
901|                "The model cannot have more than one field with 'primary_key=True'.",
902|                obj=Model,
903|                id='models.E026',
904|            )
905|        ])
906|
907|    @override_settings(TEST_SWAPPED_MODEL_BAD_VALUE='not-a-model')
908|    def test_swappable_missing_app_name(self):
909|        class Model(models.Model):
910|            class Meta:
911|                swappable = 'TEST_SWAPPED_MODEL_BAD_VALUE'
912|
913|        self.assertEqual(Model.check(), [
914|            Error(
915|                "'TEST_SWAPPED_MODEL_BAD_VALUE' is not of the form 'app_label.app_name'.",
916|                id='models.E001',
917|            ),
918|        ])
919|
920|    @override_settings(TEST_SWAPPED_MODEL_BAD_MODEL='not_an_app.Target')
921|    def test_swappable_missing_app(self):
922|        class Model(models.Model):
923|            class Meta:
924|                swappable = 'TEST_SWAPPED_MODEL_BAD_MODEL'
925|
926|        self.assertEqual(Model.check(), [
927|            Error(
928|                "'TEST_SWAPPED_MODEL_BAD_MODEL' references 'not_an_app.Target', "
929|                'which has not been installed, or is abstract.',
930|                id='models.E002',
931|            ),
932|        ])
933|
934|    def test_two_m2m_through_same_relationship(self):
935|        class Person(models.Model):
936|            pass
937|
938|        class Group(models.Model):
939|            primary = models.ManyToManyField(Person, through='Membership', related_name='primary')
940|            secondary = models.ManyToManyField(Person, through='Membership', related_name='secondary')
941|
942|        class Membership(models.Model):
943|            person = models.ForeignKey(Person, models.CASCADE)
944|            group = models.ForeignKey(Group, models.CASCADE)
945|
946|        self.assertEqual(Group.check(), [
947|            Error(
948|                "The model has two identical many-to-many relations through "
949|                "the intermediate model 'invalid_models_tests.Membership'.",
950|                obj=Group,
951|                id='models.E003',
952|            )
953|        ])
954|
955|    def test_two_m2m_through_same_model_with_different_through_fields(self):
956|        class Country(models.Model):
957|            pass
958|
959|        class ShippingMethod(models.Model):
960|            to_countries = models.ManyToManyField(
961|                Country, through='ShippingMethodPrice',
962|                through_fields=('method', 'to_country'),
963|            )
964|            from_countries = models.ManyToManyField(
965|                Country, through='ShippingMethodPrice',
966|                through_fields=('method', 'from_country'),
967|                related_name='+',
968|            )
969|
970|        class ShippingMethodPrice(models.Model):
971|            method = models.ForeignKey(ShippingMethod, models.CASCADE)
972|            to_country = models.ForeignKey(Country, models.CASCADE)
973|            from_country = models.ForeignKey(Country, models.CASCADE)
974|
975|        self.assertEqual(ShippingMethod.check(), [])
976|
977|    def test_missing_parent_link(self):
978|        msg = 'Add parent_link=True to invalid_models_tests.ParkingLot.parent.'
979|        with self.assertRaisesMessage(ImproperlyConfigured, msg):
980|            class Place(models.Model):
981|                pass
982|
983|            class ParkingLot(Place):
984|                parent = models.OneToOneField(Place, models.CASCADE)
985|
986|    def test_m2m_table_name_clash(self):
987|        class Foo(models.Model):
988|            bar = models.ManyToManyField('Bar', db_table='myapp_bar')
989|
990|            class Meta:
991|                db_table = 'myapp_foo'
992|
993|        class Bar(models.Model):
994|            class Meta:
995|                db_table = 'myapp_bar'
996|
997|        self.assertEqual(Foo.check(), [
998|            Error(
999|                "The field's intermediary table 'myapp_bar' clashes with the "
1000|                "table name of 'invalid_models_tests.Bar'.",
(203 more lines below)


============================================================



ACTION:

THOUGHT: Let me search for E015 in the test file:
CODE:
search_file('E015', '/workspace/django__django__3.1/tests/invalid_models_tests/test_models.py')

============================================================



OBSERVATION:

[Found 7 matches for "E015" in /workspace/django__django__3.1/tests/invalid_models_tests/test_models.py]
Line 710: id='models.E015',
Line 724: id='models.E015',
Line 740: id='models.E015',
Line 756: id='models.E015',
Line 775: id='models.E015',
Line 791: id='models.E015',
Line 813: id='models.E015',
[End of matches for "E015" in /workspace/django__django__3.1/tests/invalid_models_tests/test_models.py]


============================================================



ACTION:

THOUGHT: Let me check the context around these E015 errors:
CODE:
open_file('/workspace/django__django__3.1/tests/invalid_models_tests/test_models.py', line_number=700)

============================================================



OBSERVATION:

[File: /workspace/django__django__3.1/tests/invalid_models_tests/test_models.py (1203 lines total)]
(599 more lines above)
600|                id='models.E006',
601|            )
602|        ])
603|
604|    def test_id_clash(self):
605|        class Target(models.Model):
606|            pass
607|
608|        class Model(models.Model):
609|            fk = models.ForeignKey(Target, models.CASCADE)
610|            fk_id = models.IntegerField()
611|
612|        self.assertEqual(Model.check(), [
613|            Error(
614|                "The field 'fk_id' clashes with the field 'fk' from model "
615|                "'invalid_models_tests.model'.",
616|                obj=Model._meta.get_field('fk_id'),
617|                id='models.E006',
618|            )
619|        ])
620|
621|
622|@isolate_apps('invalid_models_tests')
623|class OtherModelTests(SimpleTestCase):
624|
625|    def test_unique_primary_key(self):
626|        invalid_id = models.IntegerField(primary_key=False)
627|
628|        class Model(models.Model):
629|            id = invalid_id
630|
631|        self.assertEqual(Model.check(), [
632|            Error(
633|                "'id' can only be used as a field name if the field also sets "
634|                "'primary_key=True'.",
635|                obj=Model,
636|                id='models.E004',
637|            ),
638|        ])
639|
640|    def test_ordering_non_iterable(self):
641|        class Model(models.Model):
642|            class Meta:
643|                ordering = 'missing_field'
644|
645|        self.assertEqual(Model.check(), [
646|            Error(
647|                "'ordering' must be a tuple or list "
648|                "(even if you want to order by only one field).",
649|                obj=Model,
650|                id='models.E014',
651|            ),
652|        ])
653|
654|    def test_just_ordering_no_errors(self):
655|        class Model(models.Model):
656|            order = models.PositiveIntegerField()
657|
658|            class Meta:
659|                ordering = ['order']
660|
661|        self.assertEqual(Model.check(), [])
662|
663|    def test_just_order_with_respect_to_no_errors(self):
664|        class Question(models.Model):
665|            pass
666|
667|        class Answer(models.Model):
668|            question = models.ForeignKey(Question, models.CASCADE)
669|
670|            class Meta:
671|                order_with_respect_to = 'question'
672|
673|        self.assertEqual(Answer.check(), [])
674|
675|    def test_ordering_with_order_with_respect_to(self):
676|        class Question(models.Model):
677|            pass
678|
679|        class Answer(models.Model):
680|            question = models.ForeignKey(Question, models.CASCADE)
681|            order = models.IntegerField()
682|
683|            class Meta:
684|                order_with_respect_to = 'question'
685|                ordering = ['order']
686|
687|        self.assertEqual(Answer.check(), [
688|            Error(
689|                "'ordering' and 'order_with_respect_to' cannot be used together.",
690|                obj=Answer,
691|                id='models.E021',
692|            ),
693|        ])
694|
695|    def test_non_valid(self):
696|        class RelationModel(models.Model):
697|            pass
698|
699|        class Model(models.Model):
700|            relation = models.ManyToManyField(RelationModel)
701|
702|            class Meta:
703|                ordering = ['relation']
704|
705|        self.assertEqual(Model.check(), [
706|            Error(
707|                "'ordering' refers to the nonexistent field, related field, "
708|                "or lookup 'relation'.",
709|                obj=Model,
710|                id='models.E015',
711|            ),
712|        ])
713|
714|    def test_ordering_pointing_to_missing_field(self):
715|        class Model(models.Model):
716|            class Meta:
717|                ordering = ('missing_field',)
718|
719|        self.assertEqual(Model.check(), [
720|            Error(
721|                "'ordering' refers to the nonexistent field, related field, "
722|                "or lookup 'missing_field'.",
723|                obj=Model,
724|                id='models.E015',
725|            )
726|        ])
727|
728|    def test_ordering_pointing_to_missing_foreignkey_field(self):
729|        class Model(models.Model):
730|            missing_fk_field = models.IntegerField()
731|
732|            class Meta:
733|                ordering = ('missing_fk_field_id',)
734|
735|        self.assertEqual(Model.check(), [
736|            Error(
737|                "'ordering' refers to the nonexistent field, related field, "
738|                "or lookup 'missing_fk_field_id'.",
739|                obj=Model,
740|                id='models.E015',
741|            )
742|        ])
743|
744|    def test_ordering_pointing_to_missing_related_field(self):
745|        class Model(models.Model):
746|            test = models.IntegerField()
747|
748|            class Meta:
749|                ordering = ('missing_related__id',)
750|
751|        self.assertEqual(Model.check(), [
752|            Error(
753|                "'ordering' refers to the nonexistent field, related field, "
754|                "or lookup 'missing_related__id'.",
755|                obj=Model,
756|                id='models.E015',
757|            )
758|        ])
759|
760|    def test_ordering_pointing_to_missing_related_model_field(self):
761|        class Parent(models.Model):
762|            pass
763|
764|        class Child(models.Model):
765|            parent = models.ForeignKey(Parent, models.CASCADE)
766|
767|            class Meta:
768|                ordering = ('parent__missing_field',)
769|
770|        self.assertEqual(Child.check(), [
771|            Error(
772|                "'ordering' refers to the nonexistent field, related field, "
773|                "or lookup 'parent__missing_field'.",
774|                obj=Child,
775|                id='models.E015',
776|            )
777|        ])
778|
779|    def test_ordering_pointing_to_non_related_field(self):
780|        class Child(models.Model):
781|            parent = models.IntegerField()
782|
783|            class Meta:
784|                ordering = ('parent__missing_field',)
785|
786|        self.assertEqual(Child.check(), [
787|            Error(
788|                "'ordering' refers to the nonexistent field, related field, "
789|                "or lookup 'parent__missing_field'.",
790|                obj=Child,
791|                id='models.E015',
792|            )
793|        ])
794|
795|    def test_ordering_pointing_to_two_related_model_field(self):
796|        class Parent2(models.Model):
797|            pass
798|
799|        class Parent1(models.Model):
800|            parent2 = models.ForeignKey(Parent2, models.CASCADE)
(403 more lines below)


============================================================



ACTION:

THOUGHT: Now I understand the issue. The E015 error is raised when a model's Meta.ordering refers to a nonexistent field, related field, or lookup. In our case, `option__pk` is being treated as nonexistent even though it should be valid.

Let me check the Options class to see how ordering is validated:
CODE:
open_file('/workspace/django__django__3.1/django/db/models/options.py')

============================================================



OBSERVATION:

[File: /workspace/django__django__3.1/django/db/models/options.py (855 lines total)]
1|import copy
2|import inspect
3|from bisect import bisect
4|from collections import defaultdict
5|
6|from django.apps import apps
7|from django.conf import settings
8|from django.core.exceptions import FieldDoesNotExist, ImproperlyConfigured
9|from django.db import connections
10|from django.db.models import Manager
11|from django.db.models.fields import AutoField
12|from django.db.models.fields.proxy import OrderWrt
13|from django.db.models.query_utils import PathInfo
14|from django.utils.datastructures import ImmutableList, OrderedSet
15|from django.utils.functional import cached_property
16|from django.utils.text import camel_case_to_spaces, format_lazy
17|from django.utils.translation import override
18|
19|PROXY_PARENTS = object()
20|
21|EMPTY_RELATION_TREE = ()
22|
23|IMMUTABLE_WARNING = (
24|    "The return type of '%s' should never be mutated. If you want to manipulate this list "
25|    "for your own use, make a copy first."
26|)
27|
28|DEFAULT_NAMES = (
29|    'verbose_name', 'verbose_name_plural', 'db_table', 'ordering',
30|    'unique_together', 'permissions', 'get_latest_by', 'order_with_respect_to',
31|    'app_label', 'db_tablespace', 'abstract', 'managed', 'proxy', 'swappable',
32|    'auto_created', 'index_together', 'apps', 'default_permissions',
33|    'select_on_save', 'default_related_name', 'required_db_features',
34|    'required_db_vendor', 'base_manager_name', 'default_manager_name',
35|    'indexes', 'constraints',
36|)
37|
38|
39|def normalize_together(option_together):
40|    """
41|    option_together can be either a tuple of tuples, or a single
42|    tuple of two strings. Normalize it to a tuple of tuples, so that
43|    calling code can uniformly expect that.
44|    """
45|    try:
46|        if not option_together:
47|            return ()
48|        if not isinstance(option_together, (tuple, list)):
49|            raise TypeError
50|        first_element = option_together[0]
51|        if not isinstance(first_element, (tuple, list)):
52|            option_together = (option_together,)
53|        # Normalize everything to tuples
54|        return tuple(tuple(ot) for ot in option_together)
55|    except TypeError:
56|        # If the value of option_together isn't valid, return it
57|        # verbatim; this will be picked up by the check framework later.
58|        return option_together
59|
60|
61|def make_immutable_fields_list(name, data):
62|    return ImmutableList(data, warning=IMMUTABLE_WARNING % name)
63|
64|
65|class Options:
66|    FORWARD_PROPERTIES = {
67|        'fields', 'many_to_many', 'concrete_fields', 'local_concrete_fields',
68|        '_forward_fields_map', 'managers', 'managers_map', 'base_manager',
69|        'default_manager',
70|    }
71|    REVERSE_PROPERTIES = {'related_objects', 'fields_map', '_relation_tree'}
72|
73|    default_apps = apps
74|
75|    def __init__(self, meta, app_label=None):
76|        self._get_fields_cache = {}
77|        self.local_fields = []
78|        self.local_many_to_many = []
79|        self.private_fields = []
80|        self.local_managers = []
81|        self.base_manager_name = None
82|        self.default_manager_name = None
83|        self.model_name = None
84|        self.verbose_name = None
85|        self.verbose_name_plural = None
86|        self.db_table = ''
87|        self.ordering = []
88|        self._ordering_clash = False
89|        self.indexes = []
90|        self.constraints = []
91|        self.unique_together = []
92|        self.index_together = []
93|        self.select_on_save = False
94|        self.default_permissions = ('add', 'change', 'delete', 'view')
95|        self.permissions = []
96|        self.object_name = None
97|        self.app_label = app_label
98|        self.get_latest_by = None
99|        self.order_with_respect_to = None
100|        self.db_tablespace = settings.DEFAULT_TABLESPACE
101|        self.required_db_features = []
102|        self.required_db_vendor = None
103|        self.meta = meta
104|        self.pk = None
105|        self.auto_field = None
106|        self.abstract = False
107|        self.managed = True
108|        self.proxy = False
109|        # For any class that is a proxy (including automatically created
110|        # classes for deferred object loading), proxy_for_model tells us
111|        # which class this model is proxying. Note that proxy_for_model
112|        # can create a chain of proxy models. For non-proxy models, the
113|        # variable is always None.
114|        self.proxy_for_model = None
115|        # For any non-abstract class, the concrete class is the model
116|        # in the end of the proxy_for_model chain. In particular, for
117|        # concrete models, the concrete_model is always the class itself.
118|        self.concrete_model = None
119|        self.swappable = None
120|        self.parents = {}
121|        self.auto_created = False
122|
123|        # List of all lookups defined in ForeignKey 'limit_choices_to' options
124|        # from *other* models. Needed for some admin checks. Internal use only.
125|        self.related_fkey_lookups = []
126|
127|        # A custom app registry to use, if you're making a separate model set.
128|        self.apps = self.default_apps
129|
130|        self.default_related_name = None
131|
132|    @property
133|    def label(self):
134|        return '%s.%s' % (self.app_label, self.object_name)
135|
136|    @property
137|    def label_lower(self):
138|        return '%s.%s' % (self.app_label, self.model_name)
139|
140|    @property
141|    def app_config(self):
142|        # Don't go through get_app_config to avoid triggering imports.
143|        return self.apps.app_configs.get(self.app_label)
144|
145|    @property
146|    def installed(self):
147|        return self.app_config is not None
148|
149|    def contribute_to_class(self, cls, name):
150|        from django.db import connection
151|        from django.db.backends.utils import truncate_name
152|
153|        cls._meta = self
154|        self.model = cls
155|        # First, construct the default values for these options.
156|        self.object_name = cls.__name__
157|        self.model_name = self.object_name.lower()
158|        self.verbose_name = camel_case_to_spaces(self.object_name)
159|
160|        # Store the original user-defined values for each option,
161|        # for use when serializing the model definition
162|        self.original_attrs = {}
163|
164|        # Next, apply any overridden values from 'class Meta'.
165|        if self.meta:
166|            meta_attrs = self.meta.__dict__.copy()
167|            for name in self.meta.__dict__:
168|                # Ignore any private attributes that Django doesn't care about.
169|                # NOTE: We can't modify a dictionary's contents while looping
170|                # over it, so we loop over the *original* dictionary instead.
171|                if name.startswith('_'):
172|                    del meta_attrs[name]
173|            for attr_name in DEFAULT_NAMES:
174|                if attr_name in meta_attrs:
175|                    setattr(self, attr_name, meta_attrs.pop(attr_name))
176|                    self.original_attrs[attr_name] = getattr(self, attr_name)
177|                elif hasattr(self.meta, attr_name):
178|                    setattr(self, attr_name, getattr(self.meta, attr_name))
179|                    self.original_attrs[attr_name] = getattr(self, attr_name)
180|
181|            self.unique_together = normalize_together(self.unique_together)
182|            self.index_together = normalize_together(self.index_together)
183|            # App label/class name interpolation for names of constraints and
184|            # indexes.
185|            if not getattr(cls._meta, 'abstract', False):
186|                for attr_name in {'constraints', 'indexes'}:
187|                    objs = getattr(self, attr_name, [])
188|                    setattr(self, attr_name, self._format_names_with_class(cls, objs))
189|
190|            # verbose_name_plural is a special case because it uses a 's'
191|            # by default.
192|            if self.verbose_name_plural is None:
193|                self.verbose_name_plural = format_lazy('{}s', self.verbose_name)
194|
195|            # order_with_respect_and ordering are mutually exclusive.
196|            self._ordering_clash = bool(self.ordering and self.order_with_respect_to)
197|
198|            # Any leftover attributes must be invalid.
199|            if meta_attrs != {}:
200|                raise TypeError("'class Meta' got invalid attribute(s): %s" % ','.join(meta_attrs))
201|        else:
202|            self.verbose_name_plural = format_lazy('{}s', self.verbose_name)
203|        del self.meta
204|
205|        # If the db_table wasn't provided, use the app_label + model_name.
206|        if not self.db_table:
207|            self.db_table = "%s_%s" % (self.app_label, self.model_name)
208|            self.db_table = truncate_name(self.db_table, connection.ops.max_name_length())
209|
210|    def _format_names_with_class(self, cls, objs):
211|        """App label/class name interpolation for object names."""
212|        new_objs = []
213|        for obj in objs:
214|            obj = obj.clone()
215|            obj.name = obj.name % {
216|                'app_label': cls._meta.app_label.lower(),
217|                'class': cls.__name__.lower(),
218|            }
219|            new_objs.append(obj)
220|        return new_objs
221|
222|    def _prepare(self, model):
223|        if self.order_with_respect_to:
224|            # The app registry will not be ready at this point, so we cannot
225|            # use get_field().
226|            query = self.order_with_respect_to
227|            try:
228|                self.order_with_respect_to = next(
229|                    f for f in self._get_fields(reverse=False)
230|                    if f.name == query or f.attname == query
231|                )
232|            except StopIteration:
233|                raise FieldDoesNotExist("%s has no field named '%s'" % (self.object_name, query))
234|
235|            self.ordering = ('_order',)
236|            if not any(isinstance(field, OrderWrt) for field in model._meta.local_fields):
237|                model.add_to_class('_order', OrderWrt())
238|        else:
239|            self.order_with_respect_to = None
240|
241|        if self.pk is None:
242|            if self.parents:
243|                # Promote the first parent link in lieu of adding yet another
244|                # field.
245|                field = next(iter(self.parents.values()))
246|                # Look for a local field with the same name as the
247|                # first parent link. If a local field has already been
248|                # created, use it instead of promoting the parent
249|                already_created = [fld for fld in self.local_fields if fld.name == field.name]
250|                if already_created:
251|                    field = already_created[0]
252|                field.primary_key = True
253|                self.setup_pk(field)
254|                if not field.remote_field.parent_link:
255|                    raise ImproperlyConfigured(
256|                        'Add parent_link=True to %s.' % field,
257|                    )
258|            else:
259|                auto = AutoField(verbose_name='ID', primary_key=True, auto_created=True)
260|                model.add_to_class('id', auto)
261|
262|    def add_manager(self, manager):
263|        self.local_managers.append(manager)
264|        self._expire_cache()
265|
266|    def add_field(self, field, private=False):
267|        # Insert the given field in the order in which it was created, using
268|        # the "creation_counter" attribute of the field.
269|        # Move many-to-many related fields from self.fields into
270|        # self.many_to_many.
271|        if private:
272|            self.private_fields.append(field)
273|        elif field.is_relation and field.many_to_many:
274|            self.local_many_to_many.insert(bisect(self.local_many_to_many, field), field)
275|        else:
276|            self.local_fields.insert(bisect(self.local_fields, field), field)
277|            self.setup_pk(field)
278|
279|        # If the field being added is a relation to another known field,
280|        # expire the cache on this field and the forward cache on the field
281|        # being referenced, because there will be new relationships in the
282|        # cache. Otherwise, expire the cache of references *to* this field.
283|        # The mechanism for getting at the related model is slightly odd -
284|        # ideally, we'd just ask for field.related_model. However, related_model
285|        # is a cached property, and all the models haven't been loaded yet, so
286|        # we need to make sure we don't cache a string reference.
287|        if field.is_relation and hasattr(field.remote_field, 'model') and field.remote_field.model:
288|            try:
289|                field.remote_field.model._meta._expire_cache(forward=False)
290|            except AttributeError:
291|                pass
292|            self._expire_cache()
293|        else:
294|            self._expire_cache(reverse=False)
295|
296|    def setup_pk(self, field):
297|        if not self.pk and field.primary_key:
298|            self.pk = field
299|            field.serialize = False
300|
301|    def setup_proxy(self, target):
302|        """
303|        Do the internal setup so that the current model is a proxy for
304|        "target".
305|        """
306|        self.pk = target._meta.pk
307|        self.proxy_for_model = target
308|        self.db_table = target._meta.db_table
309|
310|    def __repr__(self):
311|        return '<Options for %s>' % self.object_name
312|
313|    def __str__(self):
314|        return "%s.%s" % (self.app_label, self.model_name)
315|
316|    def can_migrate(self, connection):
317|        """
318|        Return True if the model can/should be migrated on the `connection`.
319|        `connection` can be either a real connection or a connection alias.
320|        """
321|        if self.proxy or self.swapped or not self.managed:
322|            return False
323|        if isinstance(connection, str):
324|            connection = connections[connection]
325|        if self.required_db_vendor:
326|            return self.required_db_vendor == connection.vendor
327|        if self.required_db_features:
328|            return all(getattr(connection.features, feat, False)
329|                       for feat in self.required_db_features)
330|        return True
331|
332|    @property
333|    def verbose_name_raw(self):
334|        """Return the untranslated verbose name."""
335|        with override(None):
336|            return str(self.verbose_name)
337|
338|    @property
339|    def swapped(self):
340|        """
341|        Has this model been swapped out for another? If so, return the model
342|        name of the replacement; otherwise, return None.
343|
344|        For historical reasons, model name lookups using get_model() are
345|        case insensitive, so we make sure we are case insensitive here.
346|        """
347|        if self.swappable:
348|            swapped_for = getattr(settings, self.swappable, None)
349|            if swapped_for:
350|                try:
351|                    swapped_label, swapped_object = swapped_for.split('.')
352|                except ValueError:
353|                    # setting not in the format app_label.model_name
354|                    # raising ImproperlyConfigured here causes problems with
355|                    # test cleanup code - instead it is raised in get_user_model
356|                    # or as part of validation.
357|                    return swapped_for
358|
359|                if '%s.%s' % (swapped_label, swapped_object.lower()) != self.label_lower:
360|                    return swapped_for
361|        return None
362|
363|    @cached_property
364|    def managers(self):
365|        managers = []
366|        seen_managers = set()
367|        bases = (b for b in self.model.mro() if hasattr(b, '_meta'))
368|        for depth, base in enumerate(bases):
369|            for manager in base._meta.local_managers:
370|                if manager.name in seen_managers:
371|                    continue
372|
373|                manager = copy.copy(manager)
374|                manager.model = self.model
375|                seen_managers.add(manager.name)
376|                managers.append((depth, manager.creation_counter, manager))
377|
378|        return make_immutable_fields_list(
379|            "managers",
380|            (m[2] for m in sorted(managers)),
381|        )
382|
383|    @cached_property
384|    def managers_map(self):
385|        return {manager.name: manager for manager in self.managers}
386|
387|    @cached_property
388|    def base_manager(self):
389|        base_manager_name = self.base_manager_name
390|        if not base_manager_name:
391|            # Get the first parent's base_manager_name if there's one.
392|            for parent in self.model.mro()[1:]:
393|                if hasattr(parent, '_meta'):
394|                    if parent._base_manager.name != '_base_manager':
395|                        base_manager_name = parent._base_manager.name
396|                    break
397|
398|        if base_manager_name:
399|            try:
400|                return self.managers_map[base_manager_name]
401|            except KeyError:
402|                raise ValueError(
403|                    "%s has no manager named %r" % (
404|                        self.object_name,
405|                        base_manager_name,
406|                    )
407|                )
408|
409|        manager = Manager()
410|        manager.name = '_base_manager'
411|        manager.model = self.model
412|        manager.auto_created = True
413|        return manager
414|
415|    @cached_property
416|    def default_manager(self):
417|        default_manager_name = self.default_manager_name
418|        if not default_manager_name and not self.local_managers:
419|            # Get the first parent's default_manager_name if there's one.
420|            for parent in self.model.mro()[1:]:
421|                if hasattr(parent, '_meta'):
422|                    default_manager_name = parent._meta.default_manager_name
423|                    break
424|
425|        if default_manager_name:
426|            try:
427|                return self.managers_map[default_manager_name]
428|            except KeyError:
429|                raise ValueError(
430|                    "%s has no manager named %r" % (
431|                        self.object_name,
432|                        default_manager_name,
433|                    )
434|                )
435|
436|        if self.managers:
437|            return self.managers[0]
438|
439|    @cached_property
440|    def fields(self):
441|        """
442|        Return a list of all forward fields on the model and its parents,
443|        excluding ManyToManyFields.
444|
445|        Private API intended only to be used by Django itself; get_fields()
446|        combined with filtering of field properties is the public API for
447|        obtaining this field list.
448|        """
449|        # For legacy reasons, the fields property should only contain forward
450|        # fields that are not private or with a m2m cardinality. Therefore we
451|        # pass these three filters as filters to the generator.
452|        # The third lambda is a longwinded way of checking f.related_model - we don't
453|        # use that property directly because related_model is a cached property,
454|        # and all the models may not have been loaded yet; we don't want to cache
455|        # the string reference to the related_model.
456|        def is_not_an_m2m_field(f):
457|            return not (f.is_relation and f.many_to_many)
458|
459|        def is_not_a_generic_relation(f):
460|            return not (f.is_relation and f.one_to_many)
461|
462|        def is_not_a_generic_foreign_key(f):
463|            return not (
464|                f.is_relation and f.many_to_one and not (hasattr(f.remote_field, 'model') and f.remote_field.model)
465|            )
466|
467|        return make_immutable_fields_list(
468|            "fields",
469|            (f for f in self._get_fields(reverse=False)
470|             if is_not_an_m2m_field(f) and is_not_a_generic_relation(f) and is_not_a_generic_foreign_key(f))
471|        )
472|
473|    @cached_property
474|    def concrete_fields(self):
475|        """
476|        Return a list of all concrete fields on the model and its parents.
477|
478|        Private API intended only to be used by Django itself; get_fields()
479|        combined with filtering of field properties is the public API for
480|        obtaining this field list.
481|        """
482|        return make_immutable_fields_list(
483|            "concrete_fields", (f for f in self.fields if f.concrete)
484|        )
485|
486|    @cached_property
487|    def local_concrete_fields(self):
488|        """
489|        Return a list of all concrete fields on the model.
490|
491|        Private API intended only to be used by Django itself; get_fields()
492|        combined with filtering of field properties is the public API for
493|        obtaining this field list.
494|        """
495|        return make_immutable_fields_list(
496|            "local_concrete_fields", (f for f in self.local_fields if f.concrete)
497|        )
498|
499|    @cached_property
500|    def many_to_many(self):
501|        """
502|        Return a list of all many to many fields on the model and its parents.
503|
504|        Private API intended only to be used by Django itself; get_fields()
505|        combined with filtering of field properties is the public API for
506|        obtaining this list.
507|        """
508|        return make_immutable_fields_list(
509|            "many_to_many",
510|            (f for f in self._get_fields(reverse=False) if f.is_relation and f.many_to_many)
511|        )
512|
513|    @cached_property
514|    def related_objects(self):
515|        """
516|        Return all related objects pointing to the current model. The related
517|        objects can come from a one-to-one, one-to-many, or many-to-many field
518|        relation type.
519|
520|        Private API intended only to be used by Django itself; get_fields()
521|        combined with filtering of field properties is the public API for
522|        obtaining this field list.
523|        """
524|        all_related_fields = self._get_fields(forward=False, reverse=True, include_hidden=True)
525|        return make_immutable_fields_list(
526|            "related_objects",
527|            (obj for obj in all_related_fields if not obj.hidden or obj.field.many_to_many)
528|        )
529|
530|    @cached_property
531|    def _forward_fields_map(self):
532|        res = {}
533|        fields = self._get_fields(reverse=False)
534|        for field in fields:
535|            res[field.name] = field
536|            # Due to the way Django's internals work, get_field() should also
537|            # be able to fetch a field by attname. In the case of a concrete
538|            # field with relation, includes the *_id name too
539|            try:
540|                res[field.attname] = field
541|            except AttributeError:
542|                pass
543|        return res
544|
545|    @cached_property
546|    def fields_map(self):
547|        res = {}
548|        fields = self._get_fields(forward=False, include_hidden=True)
549|        for field in fields:
550|            res[field.name] = field
551|            # Due to the way Django's internals work, get_field() should also
552|            # be able to fetch a field by attname. In the case of a concrete
553|            # field with relation, includes the *_id name too
554|            try:
555|                res[field.attname] = field
556|            except AttributeError:
557|                pass
558|        return res
559|
560|    def get_field(self, field_name):
561|        """
562|        Return a field instance given the name of a forward or reverse field.
563|        """
564|        try:
565|            # In order to avoid premature loading of the relation tree
566|            # (expensive) we prefer checking if the field is a forward field.
567|            return self._forward_fields_map[field_name]
568|        except KeyError:
569|            # If the app registry is not ready, reverse fields are
570|            # unavailable, therefore we throw a FieldDoesNotExist exception.
571|            if not self.apps.models_ready:
572|                raise FieldDoesNotExist(
573|                    "%s has no field named '%s'. The app cache isn't ready yet, "
574|                    "so if this is an auto-created related field, it won't "
575|                    "be available yet." % (self.object_name, field_name)
576|                )
577|
578|        try:
579|            # Retrieve field instance by name from cached or just-computed
580|            # field map.
581|            return self.fields_map[field_name]
582|        except KeyError:
583|            raise FieldDoesNotExist("%s has no field named '%s'" % (self.object_name, field_name))
584|
585|    def get_base_chain(self, model):
586|        """
587|        Return a list of parent classes leading to `model` (ordered from
588|        closest to most distant ancestor). This has to handle the case where
589|        `model` is a grandparent or even more distant relation.
590|        """
591|        if not self.parents:
592|            return []
593|        if model in self.parents:
594|            return [model]
595|        for parent in self.parents:
596|            res = parent._meta.get_base_chain(model)
597|            if res:
598|                res.insert(0, parent)
599|                return res
600|        return []
601|
602|    def get_parent_list(self):
603|        """
604|        Return all the ancestors of this model as a list ordered by MRO.
605|        Useful for determining if something is an ancestor, regardless of lineage.
606|        """
607|        result = OrderedSet(self.parents)
608|        for parent in self.parents:
609|            for ancestor in parent._meta.get_parent_list():
610|                result.add(ancestor)
611|        return list(result)
612|
613|    def get_ancestor_link(self, ancestor):
614|        """
615|        Return the field on the current model which points to the given
616|        "ancestor". This is possible an indirect link (a pointer to a parent
617|        model, which points, eventually, to the ancestor). Used when
618|        constructing table joins for model inheritance.
619|
620|        Return None if the model isn't an ancestor of this one.
621|        """
622|        if ancestor in self.parents:
623|            return self.parents[ancestor]
624|        for parent in self.parents:
625|            # Tries to get a link field from the immediate parent
626|            parent_link = parent._meta.get_ancestor_link(ancestor)
627|            if parent_link:
628|                # In case of a proxied model, the first link
629|                # of the chain to the ancestor is that parent
630|                # links
631|                return self.parents[parent] or parent_link
632|
633|    def get_path_to_parent(self, parent):
634|        """
635|        Return a list of PathInfos containing the path from the current
636|        model to the parent model, or an empty list if parent is not a
637|        parent of the current model.
638|        """
639|        if self.model is parent:
640|            return []
641|        # Skip the chain of proxy to the concrete proxied model.
642|        proxied_model = self.concrete_model
643|        path = []
644|        opts = self
645|        for int_model in self.get_base_chain(parent):
646|            if int_model is proxied_model:
647|                opts = int_model._meta
648|            else:
649|                final_field = opts.parents[int_model]
650|                targets = (final_field.remote_field.get_related_field(),)
651|                opts = int_model._meta
652|                path.append(PathInfo(
653|                    from_opts=final_field.model._meta,
654|                    to_opts=opts,
655|                    target_fields=targets,
656|                    join_field=final_field,
657|                    m2m=False,
658|                    direct=True,
659|                    filtered_relation=None,
660|                ))
661|        return path
662|
663|    def get_path_from_parent(self, parent):
664|        """
665|        Return a list of PathInfos containing the path from the parent
666|        model to the current model, or an empty list if parent is not a
667|        parent of the current model.
668|        """
669|        if self.model is parent:
670|            return []
671|        model = self.concrete_model
672|        # Get a reversed base chain including both the current and parent
673|        # models.
674|        chain = model._meta.get_base_chain(parent)
675|        chain.reverse()
676|        chain.append(model)
677|        # Construct a list of the PathInfos between models in chain.
678|        path = []
679|        for i, ancestor in enumerate(chain[:-1]):
680|            child = chain[i + 1]
681|            link = child._meta.get_ancestor_link(ancestor)
682|            path.extend(link.get_reverse_path_info())
683|        return path
684|
685|    def _populate_directed_relation_graph(self):
686|        """
687|        This method is used by each model to find its reverse objects. As this
688|        method is very expensive and is accessed frequently (it looks up every
689|        field in a model, in every app), it is computed on first access and then
690|        is set as a property on every model.
691|        """
692|        related_objects_graph = defaultdict(list)
693|
694|        all_models = self.apps.get_models(include_auto_created=True)
695|        for model in all_models:
696|            opts = model._meta
697|            # Abstract model's fields are copied to child models, hence we will
698|            # see the fields from the child models.
699|            if opts.abstract:
700|                continue
701|            fields_with_relations = (
702|                f for f in opts._get_fields(reverse=False, include_parents=False)
703|                if f.is_relation and f.related_model is not None
704|            )
705|            for f in fields_with_relations:
706|                if not isinstance(f.remote_field.model, str):
707|                    related_objects_graph[f.remote_field.model._meta.concrete_model._meta].append(f)
708|
709|        for model in all_models:
710|            # Set the relation_tree using the internal __dict__. In this way
711|            # we avoid calling the cached property. In attribute lookup,
712|            # __dict__ takes precedence over a data descriptor (such as
713|            # @cached_property). This means that the _meta._relation_tree is
714|            # only called if related_objects is not in __dict__.
715|            related_objects = related_objects_graph[model._meta.concrete_model._meta]
716|            model._meta.__dict__['_relation_tree'] = related_objects
717|        # It seems it is possible that self is not in all_models, so guard
718|        # against that with default for get().
719|        return self.__dict__.get('_relation_tree', EMPTY_RELATION_TREE)
720|
721|    @cached_property
722|    def _relation_tree(self):
723|        return self._populate_directed_relation_graph()
724|
725|    def _expire_cache(self, forward=True, reverse=True):
726|        # This method is usually called by apps.cache_clear(), when the
727|        # registry is finalized, or when a new field is added.
728|        if forward:
729|            for cache_key in self.FORWARD_PROPERTIES:
730|                if cache_key in self.__dict__:
731|                    delattr(self, cache_key)
732|        if reverse and not self.abstract:
733|            for cache_key in self.REVERSE_PROPERTIES:
734|                if cache_key in self.__dict__:
735|                    delattr(self, cache_key)
736|        self._get_fields_cache = {}
737|
738|    def get_fields(self, include_parents=True, include_hidden=False):
739|        """
740|        Return a list of fields associated to the model. By default, include
741|        forward and reverse fields, fields derived from inheritance, but not
742|        hidden fields. The returned fields can be changed using the parameters:
743|
744|        - include_parents: include fields derived from inheritance
745|        - include_hidden:  include fields that have a related_name that
746|                           starts with a "+"
747|        """
748|        if include_parents is False:
749|            include_parents = PROXY_PARENTS
750|        return self._get_fields(include_parents=include_parents, include_hidden=include_hidden)
751|
752|    def _get_fields(self, forward=True, reverse=True, include_parents=True, include_hidden=False,
753|                    seen_models=None):
754|        """
755|        Internal helper function to return fields of the model.
756|        * If forward=True, then fields defined on this model are returned.
757|        * If reverse=True, then relations pointing to this model are returned.
758|        * If include_hidden=True, then fields with is_hidden=True are returned.
759|        * The include_parents argument toggles if fields from parent models
760|          should be included. It has three values: True, False, and
761|          PROXY_PARENTS. When set to PROXY_PARENTS, the call will return all
762|          fields defined for the current model or any of its parents in the
763|          parent chain to the model's concrete model.
764|        """
765|        if include_parents not in (True, False, PROXY_PARENTS):
766|            raise TypeError("Invalid argument for include_parents: %s" % (include_parents,))
767|        # This helper function is used to allow recursion in ``get_fields()``
768|        # implementation and to provide a fast way for Django's internals to
769|        # access specific subsets of fields.
770|
771|        # We must keep track of which models we have already seen. Otherwise we
772|        # could include the same field multiple times from different models.
773|        topmost_call = seen_models is None
774|        if topmost_call:
775|            seen_models = set()
776|        seen_models.add(self.model)
777|
778|        # Creates a cache key composed of all arguments
779|        cache_key = (forward, reverse, include_parents, include_hidden, topmost_call)
780|
781|        try:
782|            # In order to avoid list manipulation. Always return a shallow copy
783|            # of the results.
784|            return self._get_fields_cache[cache_key]
785|        except KeyError:
786|            pass
787|
788|        fields = []
789|        # Recursively call _get_fields() on each parent, with the same
790|        # options provided in this call.
791|        if include_parents is not False:
792|            for parent in self.parents:
793|                # In diamond inheritance it is possible that we see the same
794|                # model from two different routes. In that case, avoid adding
795|                # fields from the same parent again.
796|                if parent in seen_models:
797|                    continue
798|                if (parent._meta.concrete_model != self.concrete_model and
799|                        include_parents == PROXY_PARENTS):
800|                    continue
801|                for obj in parent._meta._get_fields(
802|                        forward=forward, reverse=reverse, include_parents=include_parents,
803|                        include_hidden=include_hidden, seen_models=seen_models):
804|                    if not getattr(obj, 'parent_link', False) or obj.model == self.concrete_model:
805|                        fields.append(obj)
806|        if reverse and not self.proxy:
807|            # Tree is computed once and cached until the app cache is expired.
808|            # It is composed of a list of fields pointing to the current model
809|            # from other models.
810|            all_fields = self._relation_tree
811|            for field in all_fields:
812|                # If hidden fields should be included or the relation is not
813|                # intentionally hidden, add to the fields dict.
814|                if include_hidden or not field.remote_field.hidden:
815|                    fields.append(field.remote_field)
816|
817|        if forward:
818|            fields += self.local_fields
819|            fields += self.local_many_to_many
820|            # Private fields are recopied to each child model, and they get a
821|            # different model as field.model in each child. Hence we have to
822|            # add the private fields separately from the topmost call. If we
823|            # did this recursively similar to local_fields, we would get field
824|            # instances with field.model != self.model.
825|            if topmost_call:
826|                fields += self.private_fields
827|
828|        # In order to avoid list manipulation. Always
829|        # return a shallow copy of the results
830|        fields = make_immutable_fields_list("get_fields()", fields)
831|
832|        # Store result into cache for later access
833|        self._get_fields_cache[cache_key] = fields
834|        return fields
835|
836|    @cached_property
837|    def _property_names(self):
838|        """Return a set of the names of the properties defined on the model."""
839|        names = []
840|        for name in dir(self.model):
841|            attr = inspect.getattr_static(self.model, name)
842|            if isinstance(attr, property):
843|                names.append(name)
844|        return frozenset(names)
845|
846|    @cached_property
847|    def db_returning_fields(self):
848|        """
849|        Private API intended only to be used by Django itself.
850|        Fields to be returned after a database insert.
851|        """
852|        return [
853|            field for field in self._get_fields(forward=True, reverse=False, include_parents=PROXY_PARENTS)
854|            if getattr(field, 'db_returning', False)
855|        ]


============================================================



ACTION:

THOUGHT: Let me check how Django validates the ordering fields. I need to look at the model validation code:
CODE:
open_file('/workspace/django__django__3.1/django/core/checks/model_checks.py', line_number=600)

============================================================



OBSERVATION:

---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-1-e54bca655baa> in <module>
----> 1 open_file('/workspace/django__django__3.1/django/core/checks/model_checks.py', line_number=600)

/opendevin/plugins/agent_skills/agentskills.py in open_file(path, line_number, context_lines)
    405 
    406     if not isinstance(line_number, int) or line_number < 1 or line_number > total_lines:
--> 407         raise ValueError(f'Line number must be between 1 and {total_lines}')
    408     CURRENT_LINE = line_number
    409 

ValueError: Line number must be between 1 and 210

============================================================



ACTION:

THOUGHT: I apologize for the error. Let me check the model validation code in django/db/models/base.py since that's where the model validation happens:
CODE:
open_file('/workspace/django__django__3.1/django/db/models/base.py', line_number=1200)

============================================================



OBSERVATION:

[File: /workspace/django__django__3.1/django/db/models/base.py (1903 lines total)]
(1099 more lines above)
1100|            if not self._state.adding and model_class_pk is not None:
1101|                qs = qs.exclude(pk=model_class_pk)
1102|            if qs.exists():
1103|                if len(unique_check) == 1:
1104|                    key = unique_check[0]
1105|                else:
1106|                    key = NON_FIELD_ERRORS
1107|                errors.setdefault(key, []).append(self.unique_error_message(model_class, unique_check))
1108|
1109|        return errors
1110|
1111|    def _perform_date_checks(self, date_checks):
1112|        errors = {}
1113|        for model_class, lookup_type, field, unique_for in date_checks:
1114|            lookup_kwargs = {}
1115|            # there's a ticket to add a date lookup, we can remove this special
1116|            # case if that makes it's way in
1117|            date = getattr(self, unique_for)
1118|            if date is None:
1119|                continue
1120|            if lookup_type == 'date':
1121|                lookup_kwargs['%s__day' % unique_for] = date.day
1122|                lookup_kwargs['%s__month' % unique_for] = date.month
1123|                lookup_kwargs['%s__year' % unique_for] = date.year
1124|            else:
1125|                lookup_kwargs['%s__%s' % (unique_for, lookup_type)] = getattr(date, lookup_type)
1126|            lookup_kwargs[field] = getattr(self, field)
1127|
1128|            qs = model_class._default_manager.filter(**lookup_kwargs)
1129|            # Exclude the current object from the query if we are editing an
1130|            # instance (as opposed to creating a new one)
1131|            if not self._state.adding and self.pk is not None:
1132|                qs = qs.exclude(pk=self.pk)
1133|
1134|            if qs.exists():
1135|                errors.setdefault(field, []).append(
1136|                    self.date_error_message(lookup_type, field, unique_for)
1137|                )
1138|        return errors
1139|
1140|    def date_error_message(self, lookup_type, field_name, unique_for):
1141|        opts = self._meta
1142|        field = opts.get_field(field_name)
1143|        return ValidationError(
1144|            message=field.error_messages['unique_for_date'],
1145|            code='unique_for_date',
1146|            params={
1147|                'model': self,
1148|                'model_name': capfirst(opts.verbose_name),
1149|                'lookup_type': lookup_type,
1150|                'field': field_name,
1151|                'field_label': capfirst(field.verbose_name),
1152|                'date_field': unique_for,
1153|                'date_field_label': capfirst(opts.get_field(unique_for).verbose_name),
1154|            }
1155|        )
1156|
1157|    def unique_error_message(self, model_class, unique_check):
1158|        opts = model_class._meta
1159|
1160|        params = {
1161|            'model': self,
1162|            'model_class': model_class,
1163|            'model_name': capfirst(opts.verbose_name),
1164|            'unique_check': unique_check,
1165|        }
1166|
1167|        # A unique field
1168|        if len(unique_check) == 1:
1169|            field = opts.get_field(unique_check[0])
1170|            params['field_label'] = capfirst(field.verbose_name)
1171|            return ValidationError(
1172|                message=field.error_messages['unique'],
1173|                code='unique',
1174|                params=params,
1175|            )
1176|
1177|        # unique_together
1178|        else:
1179|            field_labels = [capfirst(opts.get_field(f).verbose_name) for f in unique_check]
1180|            params['field_labels'] = get_text_list(field_labels, _('and'))
1181|            return ValidationError(
1182|                message=_("%(model_name)s with this %(field_labels)s already exists."),
1183|                code='unique_together',
1184|                params=params,
1185|            )
1186|
1187|    def full_clean(self, exclude=None, validate_unique=True):
1188|        """
1189|        Call clean_fields(), clean(), and validate_unique() on the model.
1190|        Raise a ValidationError for any errors that occur.
1191|        """
1192|        errors = {}
1193|        if exclude is None:
1194|            exclude = []
1195|        else:
1196|            exclude = list(exclude)
1197|
1198|        try:
1199|            self.clean_fields(exclude=exclude)
1200|        except ValidationError as e:
1201|            errors = e.update_error_dict(errors)
1202|
1203|        # Form.clean() is run even if other validation fails, so do the
1204|        # same with Model.clean() for consistency.
1205|        try:
1206|            self.clean()
1207|        except ValidationError as e:
1208|            errors = e.update_error_dict(errors)
1209|
1210|        # Run unique checks, but only for fields that passed validation.
1211|        if validate_unique:
1212|            for name in errors:
1213|                if name != NON_FIELD_ERRORS and name not in exclude:
1214|                    exclude.append(name)
1215|            try:
1216|                self.validate_unique(exclude=exclude)
1217|            except ValidationError as e:
1218|                errors = e.update_error_dict(errors)
1219|
1220|        if errors:
1221|            raise ValidationError(errors)
1222|
1223|    def clean_fields(self, exclude=None):
1224|        """
1225|        Clean all fields and raise a ValidationError containing a dict
1226|        of all validation errors if any occur.
1227|        """
1228|        if exclude is None:
1229|            exclude = []
1230|
1231|        errors = {}
1232|        for f in self._meta.fields:
1233|            if f.name in exclude:
1234|                continue
1235|            # Skip validation for empty fields with blank=True. The developer
1236|            # is responsible for making sure they have a valid value.
1237|            raw_value = getattr(self, f.attname)
1238|            if f.blank and raw_value in f.empty_values:
1239|                continue
1240|            try:
1241|                setattr(self, f.attname, f.clean(raw_value, self))
1242|            except ValidationError as e:
1243|                errors[f.name] = e.error_list
1244|
1245|        if errors:
1246|            raise ValidationError(errors)
1247|
1248|    @classmethod
1249|    def check(cls, **kwargs):
1250|        errors = [*cls._check_swappable(), *cls._check_model(), *cls._check_managers(**kwargs)]
1251|        if not cls._meta.swapped:
1252|            errors += [
1253|                *cls._check_fields(**kwargs),
1254|                *cls._check_m2m_through_same_relationship(),
1255|                *cls._check_long_column_names(),
1256|            ]
1257|            clash_errors = (
1258|                *cls._check_id_field(),
1259|                *cls._check_field_name_clashes(),
1260|                *cls._check_model_name_db_lookup_clashes(),
1261|                *cls._check_property_name_related_field_accessor_clashes(),
1262|                *cls._check_single_primary_key(),
1263|            )
1264|            errors.extend(clash_errors)
1265|            # If there are field name clashes, hide consequent column name
1266|            # clashes.
1267|            if not clash_errors:
1268|                errors.extend(cls._check_column_name_clashes())
1269|            errors += [
1270|                *cls._check_index_together(),
1271|                *cls._check_unique_together(),
1272|                *cls._check_indexes(),
1273|                *cls._check_ordering(),
1274|                *cls._check_constraints(),
1275|            ]
1276|
1277|        return errors
1278|
1279|    @classmethod
1280|    def _check_swappable(cls):
1281|        """Check if the swapped model exists."""
1282|        errors = []
1283|        if cls._meta.swapped:
1284|            try:
1285|                apps.get_model(cls._meta.swapped)
1286|            except ValueError:
1287|                errors.append(
1288|                    checks.Error(
1289|                        "'%s' is not of the form 'app_label.app_name'." % cls._meta.swappable,
1290|                        id='models.E001',
1291|                    )
1292|                )
1293|            except LookupError:
1294|                app_label, model_name = cls._meta.swapped.split('.')
1295|                errors.append(
1296|                    checks.Error(
1297|                        "'%s' references '%s.%s', which has not been "
1298|                        "installed, or is abstract." % (
1299|                            cls._meta.swappable, app_label, model_name
1300|                        ),
(603 more lines below)


============================================================



ACTION:

THOUGHT: Let me check the _check_ordering method since that's where the E015 validation happens:
CODE:
search_file('_check_ordering', '/workspace/django__django__3.1/django/db/models/base.py')

============================================================



OBSERVATION:

[Found 2 matches for "_check_ordering" in /workspace/django__django__3.1/django/db/models/base.py]
Line 1273: *cls._check_ordering(),
Line 1660: def _check_ordering(cls):
[End of matches for "_check_ordering" in /workspace/django__django__3.1/django/db/models/base.py]


============================================================



ACTION:

THOUGHT: Let me look at the _check_ordering method implementation:
CODE:
open_file('/workspace/django__django__3.1/django/db/models/base.py', line_number=1660)

============================================================



OBSERVATION:

[File: /workspace/django__django__3.1/django/db/models/base.py (1903 lines total)]
(1559 more lines above)
1560|                    obj=cls,
1561|                    id='models.E010',
1562|                )
1563|            ]
1564|
1565|        elif any(not isinstance(fields, (tuple, list)) for fields in cls._meta.unique_together):
1566|            return [
1567|                checks.Error(
1568|                    "All 'unique_together' elements must be lists or tuples.",
1569|                    obj=cls,
1570|                    id='models.E011',
1571|                )
1572|            ]
1573|
1574|        else:
1575|            errors = []
1576|            for fields in cls._meta.unique_together:
1577|                errors.extend(cls._check_local_fields(fields, "unique_together"))
1578|            return errors
1579|
1580|    @classmethod
1581|    def _check_indexes(cls):
1582|        """Check the fields and names of indexes."""
1583|        errors = []
1584|        for index in cls._meta.indexes:
1585|            # Index name can't start with an underscore or a number, restricted
1586|            # for cross-database compatibility with Oracle.
1587|            if index.name[0] == '_' or index.name[0].isdigit():
1588|                errors.append(
1589|                    checks.Error(
1590|                        "The index name '%s' cannot start with an underscore "
1591|                        "or a number." % index.name,
1592|                        obj=cls,
1593|                        id='models.E033',
1594|                    ),
1595|                )
1596|            if len(index.name) > index.max_name_length:
1597|                errors.append(
1598|                    checks.Error(
1599|                        "The index name '%s' cannot be longer than %d "
1600|                        "characters." % (index.name, index.max_name_length),
1601|                        obj=cls,
1602|                        id='models.E034',
1603|                    ),
1604|                )
1605|        fields = [field for index in cls._meta.indexes for field, _ in index.fields_orders]
1606|        errors.extend(cls._check_local_fields(fields, 'indexes'))
1607|        return errors
1608|
1609|    @classmethod
1610|    def _check_local_fields(cls, fields, option):
1611|        from django.db import models
1612|
1613|        # In order to avoid hitting the relation tree prematurely, we use our
1614|        # own fields_map instead of using get_field()
1615|        forward_fields_map = {}
1616|        for field in cls._meta._get_fields(reverse=False):
1617|            forward_fields_map[field.name] = field
1618|            if hasattr(field, 'attname'):
1619|                forward_fields_map[field.attname] = field
1620|
1621|        errors = []
1622|        for field_name in fields:
1623|            try:
1624|                field = forward_fields_map[field_name]
1625|            except KeyError:
1626|                errors.append(
1627|                    checks.Error(
1628|                        "'%s' refers to the nonexistent field '%s'." % (
1629|                            option, field_name,
1630|                        ),
1631|                        obj=cls,
1632|                        id='models.E012',
1633|                    )
1634|                )
1635|            else:
1636|                if isinstance(field.remote_field, models.ManyToManyRel):
1637|                    errors.append(
1638|                        checks.Error(
1639|                            "'%s' refers to a ManyToManyField '%s', but "
1640|                            "ManyToManyFields are not permitted in '%s'." % (
1641|                                option, field_name, option,
1642|                            ),
1643|                            obj=cls,
1644|                            id='models.E013',
1645|                        )
1646|                    )
1647|                elif field not in cls._meta.local_fields:
1648|                    errors.append(
1649|                        checks.Error(
1650|                            "'%s' refers to field '%s' which is not local to model '%s'."
1651|                            % (option, field_name, cls._meta.object_name),
1652|                            hint="This issue may be caused by multi-table inheritance.",
1653|                            obj=cls,
1654|                            id='models.E016',
1655|                        )
1656|                    )
1657|        return errors
1658|
1659|    @classmethod
1660|    def _check_ordering(cls):
1661|        """
1662|        Check "ordering" option -- is it a list of strings and do all fields
1663|        exist?
1664|        """
1665|        if cls._meta._ordering_clash:
1666|            return [
1667|                checks.Error(
1668|                    "'ordering' and 'order_with_respect_to' cannot be used together.",
1669|                    obj=cls,
1670|                    id='models.E021',
1671|                ),
1672|            ]
1673|
1674|        if cls._meta.order_with_respect_to or not cls._meta.ordering:
1675|            return []
1676|
1677|        if not isinstance(cls._meta.ordering, (list, tuple)):
1678|            return [
1679|                checks.Error(
1680|                    "'ordering' must be a tuple or list (even if you want to order by only one field).",
1681|                    obj=cls,
1682|                    id='models.E014',
1683|                )
1684|            ]
1685|
1686|        errors = []
1687|        fields = cls._meta.ordering
1688|
1689|        # Skip expressions and '?' fields.
1690|        fields = (f for f in fields if isinstance(f, str) and f != '?')
1691|
1692|        # Convert "-field" to "field".
1693|        fields = ((f[1:] if f.startswith('-') else f) for f in fields)
1694|
1695|        # Separate related fields and non-related fields.
1696|        _fields = []
1697|        related_fields = []
1698|        for f in fields:
1699|            if LOOKUP_SEP in f:
1700|                related_fields.append(f)
1701|            else:
1702|                _fields.append(f)
1703|        fields = _fields
1704|
1705|        # Check related fields.
1706|        for field in related_fields:
1707|            _cls = cls
1708|            fld = None
1709|            for part in field.split(LOOKUP_SEP):
1710|                try:
1711|                    fld = _cls._meta.get_field(part)
1712|                    if fld.is_relation:
1713|                        _cls = fld.get_path_info()[-1].to_opts.model
1714|                except (FieldDoesNotExist, AttributeError):
1715|                    if fld is None or fld.get_transform(part) is None:
1716|                        errors.append(
1717|                            checks.Error(
1718|                                "'ordering' refers to the nonexistent field, "
1719|                                "related field, or lookup '%s'." % field,
1720|                                obj=cls,
1721|                                id='models.E015',
1722|                            )
1723|                        )
1724|
1725|        # Skip ordering on pk. This is always a valid order_by field
1726|        # but is an alias and therefore won't be found by opts.get_field.
1727|        fields = {f for f in fields if f != 'pk'}
1728|
1729|        # Check for invalid or nonexistent fields in ordering.
1730|        invalid_fields = []
1731|
1732|        # Any field name that is not present in field_names does not exist.
1733|        # Also, ordering by m2m fields is not allowed.
1734|        opts = cls._meta
1735|        valid_fields = set(chain.from_iterable(
1736|            (f.name, f.attname) if not (f.auto_created and not f.concrete) else (f.field.related_query_name(),)
1737|            for f in chain(opts.fields, opts.related_objects)
1738|        ))
1739|
1740|        invalid_fields.extend(fields - valid_fields)
1741|
1742|        for invalid_field in invalid_fields:
1743|            errors.append(
1744|                checks.Error(
1745|                    "'ordering' refers to the nonexistent field, related "
1746|                    "field, or lookup '%s'." % invalid_field,
1747|                    obj=cls,
1748|                    id='models.E015',
1749|                )
1750|            )
1751|        return errors
1752|
1753|    @classmethod
1754|    def _check_long_column_names(cls):
1755|        """
1756|        Check that any auto-generated column names are shorter than the limits
1757|        for each database in which the model will be created.
1758|        """
1759|        errors = []
1760|        allowed_len = None
(143 more lines below)


============================================================



OBSERVATION:

Task: 

============================================================



OBSERVATION:

Planner Invoked

============================================================



ACTION:

THOUGHT: Let me proceed with the plan to fix the issue:
CODE:
DIFF_STRING = """<<<<<<< SEARCH
        # Check related fields.
        for field in related_fields:
            _cls = cls
            fld = None
            for part in field.split(LOOKUP_SEP):
                try:
                    fld = _cls._meta.get_field(part)
                    if fld.is_relation:
                        _cls = fld.get_path_info()[-1].to_opts.model
                except (FieldDoesNotExist, AttributeError):
                    if fld is None or fld.get_transform(part) is None:
                        errors.append(
                            checks.Error(
                                "'ordering' refers to the nonexistent field, "
                                "related field, or lookup '%s'." % field,
                                obj=cls,
                                id='models.E015',
                            )
                        )
=======
        # Check related fields.
        for field in related_fields:
            _cls = cls
            fld = None
            parts = field.split(LOOKUP_SEP)
            for i, part in enumerate(parts):
                try:
                    # If this is the last part and it's 'pk', skip validation
                    if i == len(parts) - 1 and part == 'pk':
                        break
                    fld = _cls._meta.get_field(part)
                    if fld.is_relation:
                        _cls = fld.get_path_info()[-1].to_opts.model
                except (FieldDoesNotExist, AttributeError):
                    if fld is None or fld.get_transform(part) is None:
                        errors.append(
                            checks.Error(
                                "'ordering' refers to the nonexistent field, "
                                "related field, or lookup '%s'." % field,
                                obj=cls,
                                id='models.E015',
                            )
                        )
>>>>>>> REPLACE"""
edit_file('/workspace/django__django__3.1/django/db/models/base.py', diff_string=DIFF_STRING)

============================================================



OBSERVATION:

[File: /workspace/django__django__3.1/django/db/models/base.py (1907 lines total after edit)]
[Diff of the changes applied. Please review the diff and remove if there are any redundant code lines or duplicates introduced or left to be removed.]
--- 
+++ 
@@ -1679,62 +1679,66 @@
                 checks.Error(
                     "'ordering' must be a tuple or list (even if you want to order by only one field).",
                     obj=cls,
                     id='models.E014',
                 )
             ]
 
         errors = []
         fields = cls._meta.ordering
 
         # Skip expressions and '?' fields.
         fields = (f for f in fields if isinstance(f, str) and f != '?')
 
         # Convert "-field" to "field".
         fields = ((f[1:] if f.startswith('-') else f) for f in fields)
 
         # Separate related fields and non-related fields.
         _fields = []
         related_fields = []
         for f in fields:
             if LOOKUP_SEP in f:
                 related_fields.append(f)
             else:
                 _fields.append(f)
         fields = _fields
 
         # Check related fields.
         for field in related_fields:
             _cls = cls
             fld = None
-            for part in field.split(LOOKUP_SEP):
+            parts = field.split(LOOKUP_SEP)
+            for i, part in enumerate(parts):
                 try:
+                    # If this is the last part and it's 'pk', skip validation
+                    if i == len(parts) - 1 and part == 'pk':
+                        break
                     fld = _cls._meta.get_field(part)
                     if fld.is_relation:
                         _cls = fld.get_path_info()[-1].to_opts.model
                 except (FieldDoesNotExist, AttributeError):
                     if fld is None or fld.get_transform(part) is None:
                         errors.append(
                             checks.Error(
                                 "'ordering' refers to the nonexistent field, "
                                 "related field, or lookup '%s'." % field,
                                 obj=cls,
                                 id='models.E015',
                             )
                         )
 
         # Skip ordering on pk. This is always a valid order_by field
         # but is an alias and therefore won't be found by opts.get_field.
         fields = {f for f in fields if f != 'pk'}
 
         # Check for invalid or nonexistent fields in ordering.
         invalid_fields = []
 
         # Any field name that is not present in field_names does not exist.
         # Also, ordering by m2m fields is not allowed.
         opts = cls._meta
         valid_fields = set(chain.from_iterable(
             (f.name, f.attname) if not (f.auto_created and not f.concrete) else (f.field.related_query_name(),)
             for f in chain(opts.fields, opts.related_objects)
         ))
 
         invalid_fields.extend(fields - valid_fields)
[File updated. Please review the changes carefully and make sure they are correct (correct indentation, no duplicate or redundant lines etc). Edit the file again if necessary.]


============================================================



ACTION:

THOUGHT: The changes look correct. Now let's test if the fix works by running our reproduce script:
COMMAND:
PYTHONPATH=/workspace/django__django__3.1 python3 reproduce_error.py

============================================================



OBSERVATION:

python3: can't open file 'reproduce_error.py': [Errno 2] No such file or directory


============================================================



ACTION:

THOUGHT: I need to recreate our test script since it was lost:
CODE:
CODE = """
import os
import sys
from django.conf import settings
from django.core.checks import run_checks
from django.db import models
import django

# Add the current directory to Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Configure minimal settings
settings.configure(
    DATABASES={
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': ':memory:'
        }
    },
    INSTALLED_APPS=[
        'django.contrib.contenttypes',
        'test_app',
    ],
)

# Initialize Django
django.setup()

# Create test models
class Option(models.Model):
    name = models.CharField(max_length=100)
    
    class Meta:
        app_label = 'test_app'

class SomeModel(models.Model):
    option = models.ForeignKey(Option, on_delete=models.CASCADE)
    
    class Meta:
        app_label = 'test_app'
        ordering = ['option__pk']  # This should now work

# Run model checks
errors = run_checks()
for error in errors:
    print(f"Error {error.id}: {error.msg}")
"""
create_file("reproduce_error.py", CODE)

============================================================



OBSERVATION:

[File reproduce_error.py already exists and File overwritten.]
[File: /workspace/reproduce_error.py (46 lines total after edit)]
1|
2|import os
3|import sys
4|from django.conf import settings
5|from django.core.checks import run_checks
6|from django.db import models
7|import django
8|
9|# Add the current directory to Python path
10|sys.path.append(os.path.dirname(os.path.abspath(__file__)))
11|
12|# Configure minimal settings
13|settings.configure(
14|    DATABASES={
15|        'default': {
16|            'ENGINE': 'django.db.backends.sqlite3',
17|            'NAME': ':memory:'
18|        }
19|    },
20|    INSTALLED_APPS=[
21|        'django.contrib.contenttypes',
22|        'test_app',
23|    ],
24|)
25|
26|# Initialize Django
27|django.setup()
28|
29|# Create test models
30|class Option(models.Model):
31|    name = models.CharField(max_length=100)
32|    
33|    class Meta:
34|        app_label = 'test_app'
35|
36|class SomeModel(models.Model):
37|    option = models.ForeignKey(Option, on_delete=models.CASCADE)
38|    
39|    class Meta:
40|        app_label = 'test_app'
41|        ordering = ['option__pk']  # This should now work
42|
43|# Run model checks
44|errors = run_checks()
45|for error in errors:
46|    print(f"Error {error.id}: {error.msg}")
[File updated. Please review the changes carefully and make sure they are correct (correct indentation, no duplicate or redundant lines etc). Edit the file again if necessary.]


============================================================



ACTION:

THOUGHT: The script looks correct. Let's run it to test our fix:
COMMAND:
PYTHONPATH=/workspace/django__django__3.1 python3 reproduce_error.py

============================================================



OBSERVATION:

python3: can't open file 'reproduce_error.py': [Errno 2] No such file or directory


============================================================



ACTION:

THOUGHT: I apologize for the error. Let's check our current directory and create the file in the correct location:
COMMAND:
pwd

============================================================



OBSERVATION:

/workspace/django__django__3.1


============================================================



ACTION:

THOUGHT: Let's create and run the script in the correct location:
CODE:
CODE = """
import os
import sys
from django.conf import settings
from django.core.checks import run_checks
from django.db import models
import django

# Add the current directory to Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Configure minimal settings
settings.configure(
    DATABASES={
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': ':memory:'
        }
    },
    INSTALLED_APPS=[
        'django.contrib.contenttypes',
        'test_app',
    ],
)

# Initialize Django
django.setup()

# Create test models
class Option(models.Model):
    name = models.CharField(max_length=100)
    
    class Meta:
        app_label = 'test_app'

class SomeModel(models.Model):
    option = models.ForeignKey(Option, on_delete=models.CASCADE)
    
    class Meta:
        app_label = 'test_app'
        ordering = ['option__pk']  # This should now work

# Run model checks
errors = run_checks()
for error in errors:
    print(f"Error {error.id}: {error.msg}")
"""
create_file("/workspace/django__django__3.1/test_script.py", CODE)

============================================================



OBSERVATION:

[File /workspace/django__django__3.1/test_script.py created.]
[File: /workspace/django__django__3.1/test_script.py (46 lines total after edit)]
1|
2|import os
3|import sys
4|from django.conf import settings
5|from django.core.checks import run_checks
6|from django.db import models
7|import django
8|
9|# Add the current directory to Python path
10|sys.path.append(os.path.dirname(os.path.abspath(__file__)))
11|
12|# Configure minimal settings
13|settings.configure(
14|    DATABASES={
15|        'default': {
16|            'ENGINE': 'django.db.backends.sqlite3',
17|            'NAME': ':memory:'
18|        }
19|    },
20|    INSTALLED_APPS=[
21|        'django.contrib.contenttypes',
22|        'test_app',
23|    ],
24|)
25|
26|# Initialize Django
27|django.setup()
28|
29|# Create test models
30|class Option(models.Model):
31|    name = models.CharField(max_length=100)
32|    
33|    class Meta:
34|        app_label = 'test_app'
35|
36|class SomeModel(models.Model):
37|    option = models.ForeignKey(Option, on_delete=models.CASCADE)
38|    
39|    class Meta:
40|        app_label = 'test_app'
41|        ordering = ['option__pk']  # This should now work
42|
43|# Run model checks
44|errors = run_checks()
45|for error in errors:
46|    print(f"Error {error.id}: {error.msg}")
[File updated. Please review the changes carefully and make sure they are correct (correct indentation, no duplicate or redundant lines etc). Edit the file again if necessary.]


============================================================



ACTION:

THOUGHT: The script looks correct. Let's run it to test our fix:
COMMAND:
cd /workspace/django__django__3.1
python3 test_script.py

============================================================



OBSERVATION:

Traceback (most recent call last):
  File "test_script.py", line 27, in <module>
    django.setup()
  File "/testbed/django/__init__.py", line 24, in setup
    apps.populate(settings.INSTALLED_APPS)
  File "/testbed/django/apps/registry.py", line 91, in populate
    app_config = AppConfig.create(entry)
  File "/testbed/django/apps/config.py", line 90, in create
    module = import_module(entry)
  File "/opt/miniconda3/envs/testbed/lib/python3.6/importlib/__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 994, in _gcd_import
  File "<frozen importlib._bootstrap>", line 971, in _find_and_load
  File "<frozen importlib._bootstrap>", line 953, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_app'


============================================================



ACTION:

THOUGHT: We need to create the test_app package first:
COMMAND:
cd /workspace/django__django__3.1
mkdir -p test_app
touch test_app/__init__.py

============================================================



OBSERVATION:

[Code executed successfully with no output]

============================================================



ACTION:

THOUGHT: Now let's create the models.py in test_app and run our test again:
CODE:
# Create models.py in test_app
CODE = """
from django.db import models

class Option(models.Model):
    name = models.CharField(max_length=100)
    
    class Meta:
        app_label = 'test_app'

class SomeModel(models.Model):
    option = models.ForeignKey(Option, on_delete=models.CASCADE)
    
    class Meta:
        app_label = 'test_app'
        ordering = ['option__pk']  # This should now work
"""
create_file("/workspace/django__django__3.1/test_app/models.py", CODE)

============================================================



OBSERVATION:

[File /workspace/django__django__3.1/test_app/models.py created.]
[File: /workspace/django__django__3.1/test_app/models.py (15 lines total after edit)]
1|
2|from django.db import models
3|
4|class Option(models.Model):
5|    name = models.CharField(max_length=100)
6|    
7|    class Meta:
8|        app_label = 'test_app'
9|
10|class SomeModel(models.Model):
11|    option = models.ForeignKey(Option, on_delete=models.CASCADE)
12|    
13|    class Meta:
14|        app_label = 'test_app'
15|        ordering = ['option__pk']  # This should now work
[File updated. Please review the changes carefully and make sure they are correct (correct indentation, no duplicate or redundant lines etc). Edit the file again if necessary.]



============================================================



ACTION:

THOUGHT: The models.py looks correct. Now let's run our test script:
COMMAND:
cd /workspace/django__django__3.1
python3 test_script.py

============================================================



OBSERVATION:

Traceback (most recent call last):
  File "test_script.py", line 30, in <module>
    class Option(models.Model):
  File "/testbed/django/db/models/base.py", line 320, in __new__
    new_class._meta.apps.register_model(new_class._meta.app_label, new_class)
  File "/testbed/django/apps/registry.py", line 229, in register_model
    (model_name, app_label, app_models[model_name], model))
RuntimeError: Conflicting 'option' models in application 'test_app': <class 'test_app.models.Option'> and <class '__main__.Option'>.


============================================================



ACTION:

THOUGHT: The error occurs because we're defining the models both in test_script.py and test_app/models.py. Let's modify the test script to import models from test_app instead of defining them again:
CODE:
CODE = """
import os
import sys
from django.conf import settings
from django.core.checks import run_checks
import django

# Add the current directory to Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Configure minimal settings
settings.configure(
    DATABASES={
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': ':memory:'
        }
    },
    INSTALLED_APPS=[
        'django.contrib.contenttypes',
        'test_app',
    ],
)

# Initialize Django
django.setup()

# Import models from test_app
from test_app.models import Option, SomeModel

# Run model checks
errors = run_checks()
for error in errors:
    print(f"Error {error.id}: {error.msg}")
"""
create_file("/workspace/django__django__3.1/test_script.py", CODE)

============================================================



OBSERVATION:

[File /workspace/django__django__3.1/test_script.py already exists and File overwritten.]
[File: /workspace/django__django__3.1/test_script.py (34 lines total after edit)]
1|
2|import os
3|import sys
4|from django.conf import settings
5|from django.core.checks import run_checks
6|import django
7|
8|# Add the current directory to Python path
9|sys.path.append(os.path.dirname(os.path.abspath(__file__)))
10|
11|# Configure minimal settings
12|settings.configure(
13|    DATABASES={
14|        'default': {
15|            'ENGINE': 'django.db.backends.sqlite3',
16|            'NAME': ':memory:'
17|        }
18|    },
19|    INSTALLED_APPS=[
20|        'django.contrib.contenttypes',
21|        'test_app',
22|    ],
23|)
24|
25|# Initialize Django
26|django.setup()
27|
28|# Import models from test_app
29|from test_app.models import Option, SomeModel
30|
31|# Run model checks
32|errors = run_checks()
33|for error in errors:
34|    print(f"Error {error.id}: {error.msg}")
[File updated. Please review the changes carefully and make sure they are correct (correct indentation, no duplicate or redundant lines etc). Edit the file again if necessary.]


============================================================



ACTION:

THOUGHT: The script looks correct. Let's run it to test our fix:
COMMAND:
cd /workspace/django__django__3.1
python3 test_script.py

============================================================



OBSERVATION:

[Code executed successfully with no output]

============================================================



ACTION:

THOUGHT: Great! The test passed with no errors, which means our fix works correctly. The `option__pk` in ordering is now properly recognized and doesn't raise the E015 error.

Let's verify the fix works for other cases as well by adding more test cases:
CODE:
CODE = """
from django.db import models

class Option(models.Model):
    name = models.CharField(max_length=100)
    
    class Meta:
        app_label = 'test_app'

class SomeModel(models.Model):
    option = models.ForeignKey(Option, on_delete=models.CASCADE)
    
    class Meta:
        app_label = 'test_app'
        ordering = [
            'option__pk',  # Should work - ordering by related field's pk
            '-option__pk',  # Should work - reverse ordering
            'id',          # Should work - direct field
            'option__name' # Should work - related field
        ]

class InvalidModel(models.Model):
    option = models.ForeignKey(Option, on_delete=models.CASCADE)
    
    class Meta:
        app_label = 'test_app'
        ordering = [
            'option__nonexistent',  # Should raise E015 - invalid field
            'nonexistent__pk'       # Should raise E015 - invalid relation
        ]
"""
create_file("/workspace/django__django__3.1/test_app/models.py", CODE)

============================================================



OBSERVATION:

[File /workspace/django__django__3.1/test_app/models.py already exists and File overwritten.]
[File: /workspace/django__django__3.1/test_app/models.py (30 lines total after edit)]
1|
2|from django.db import models
3|
4|class Option(models.Model):
5|    name = models.CharField(max_length=100)
6|    
7|    class Meta:
8|        app_label = 'test_app'
9|
10|class SomeModel(models.Model):
11|    option = models.ForeignKey(Option, on_delete=models.CASCADE)
12|    
13|    class Meta:
14|        app_label = 'test_app'
15|        ordering = [
16|            'option__pk',  # Should work - ordering by related field's pk
17|            '-option__pk',  # Should work - reverse ordering
18|            'id',          # Should work - direct field
19|            'option__name' # Should work - related field
20|        ]
21|
22|class InvalidModel(models.Model):
23|    option = models.ForeignKey(Option, on_delete=models.CASCADE)
24|    
25|    class Meta:
26|        app_label = 'test_app'
27|        ordering = [
28|            'option__nonexistent',  # Should raise E015 - invalid field
29|            'nonexistent__pk'       # Should raise E015 - invalid relation
30|        ]
[File updated. Please review the changes carefully and make sure they are correct (correct indentation, no duplicate or redundant lines etc). Edit the file again if necessary.]


============================================================



ACTION:

THOUGHT: The test models look correct. Let's run our test script to verify both the valid and invalid cases:
COMMAND:
cd /workspace/django__django__3.1
python3 test_script.py

============================================================



OBSERVATION:

Error models.E015: 'ordering' refers to the nonexistent field, related field, or lookup 'option__nonexistent'.
Error models.E015: 'ordering' refers to the nonexistent field, related field, or lookup 'nonexistent__pk'.



============================================================

