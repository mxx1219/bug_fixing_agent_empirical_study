

TASK:


Make pylint XDG Base Directory Specification compliant
I have this really annoying `.pylint.d` directory in my home folder. From what I can tell (I don't do C or C++), this directory is storing data. 

The problem with this is, quite simply, that data storage has a designated spot. The `$HOME/.local/share/<PROGRAM_NAME>` folder. This is a part of the [XDG Base Directory Specification](https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html). A system that designates the folders for specific things like cached files (`$HOME/.cache/<PROGRAM_NAME>`), configuration files (`$HOME/.config/<PROGRAM_NAME>`), and data files (`$HOME/.local/share/<PROGRAM_NAME>`), among other things. The point is to keep user home directories clean and the user sane. 

This should be pretty easy to implement. Simply change the variables/constants for where these files are made and stored to the appropriate directory. Simple as that, even for a large codebase (if it was done right). 



============================================================



ACTION:

THOUGHT: I'll help you implement the changes to make pylint XDG Base Directory Specification compliant. Let's follow the steps:

1. First, let's explore the repository structure:
CODE:
get_repo_structure("/workspace/pylint-dev__pylint__2.10")

============================================================



OBSERVATION:

/workspace/pylint-dev__pylint__2.10:
CONTRIBUTORS.txt
ChangeLog
Dockerfile
LICENSE
MANIFEST.in
README.rst
doc
elisp
examples
pylint
pylint.egg-info
pylintrc
requirements_test.txt
requirements_test_min.txt
requirements_test_pre_commit.txt
script
setup.cfg
setup.py
tbump.toml
tests
tox.ini

/workspace/pylint-dev__pylint__2.10/doc:
Makefile
backlinks.rst
conf.py
development_guide
exts
faq.rst
how_tos
index.rst
intro.rst
logo.png
logo.svg
make.bat
media
release.md
requirements.txt
support.rst
technical_reference
tutorial.rst
user_guide
whatsnew

/workspace/pylint-dev__pylint__2.10/doc/development_guide:
contribute.rst
index.rst

/workspace/pylint-dev__pylint__2.10/doc/exts:
pylint_extensions.py
pylint_features.py

/workspace/pylint-dev__pylint__2.10/doc/how_tos:
custom_checkers.rst
index.rst
plugins.rst
transform_plugins.rst

/workspace/pylint-dev__pylint__2.10/doc/media:
Tidelift_Logos_RGB_Tidelift_Shorthand_On-White.png
Tidelift_Logos_RGB_Tidelift_Shorthand_On-White_small.png

/workspace/pylint-dev__pylint__2.10/doc/technical_reference:
c_extensions.rst
checkers.rst
index.rst
startup.rst

/workspace/pylint-dev__pylint__2.10/doc/user_guide:
ide-integration.rst
index.rst
installation.rst
message-control.rst
options.rst
output.rst
run.rst

/workspace/pylint-dev__pylint__2.10/doc/whatsnew:
1.6.rst
1.7.rst
1.8.rst
1.9.rst
2.0.rst
2.1.rst
2.10.rst
2.2.rst
2.3.rst
2.4.rst
2.5.rst
2.6.rst
2.7.rst
2.8.rst
2.9.rst
changelog.rst
index.rst

/workspace/pylint-dev__pylint__2.10/elisp:
pylint-flymake.el
pylint.el
startup

/workspace/pylint-dev__pylint__2.10/examples:
custom.py
custom_raw.py
deprecation_checker.py
pylintrc
pylintrc_camelcase

/workspace/pylint-dev__pylint__2.10/pylint:
__init__.py
__main__.py
__pkginfo__.py
checkers
config
constants.py
epylint.py
exceptions.py
extensions
graph.py
interfaces.py
lint
message
pyreverse
reporters
testutils
utils

/workspace/pylint-dev__pylint__2.10/pylint/checkers:
__init__.py
async.py
base.py
base_checker.py
classes.py
deprecated.py
design_analysis.py
exceptions.py
format.py
imports.py
logging.py
mapreduce_checker.py
misc.py
newstyle.py
python3.py
raw_metrics.py
refactoring
similar.py
spelling.py
stdlib.py
strings.py
typecheck.py
utils.py
variables.py

/workspace/pylint-dev__pylint__2.10/pylint/checkers/refactoring:
__init__.py
len_checker.py
not_checker.py
recommendation_checker.py
refactoring_checker.py

/workspace/pylint-dev__pylint__2.10/pylint/config:
__init__.py
configuration_mixin.py
find_default_config_files.py
man_help_formatter.py
option.py
option_manager_mixin.py
option_parser.py
options_provider_mixin.py

/workspace/pylint-dev__pylint__2.10/pylint/extensions:
__init__.py
_check_docs_utils.py
bad_builtin.py
bad_builtin.rst
broad_try_clause.py
check_docs.py
check_elif.py
code_style.py
code_style.rst
comparetozero.py
confusing_elif.py
docparams.py
docparams.rst
docstyle.py
empty_comment.py
emptystring.py
mccabe.py
mccabe.rst
overlapping_exceptions.py
redefined_variable_type.py
typing.py
typing.rst

/workspace/pylint-dev__pylint__2.10/pylint/lint:
__init__.py
expand_modules.py
parallel.py
pylinter.py
report_functions.py
run.py
utils.py

/workspace/pylint-dev__pylint__2.10/pylint/message:
__init__.py
message.py
message_definition.py
message_definition_store.py
message_handler_mix_in.py
message_id_store.py

/workspace/pylint-dev__pylint__2.10/pylint/pyreverse:
__init__.py
diadefslib.py
diagrams.py
inspector.py
main.py
utils.py
vcgutils.py
writer.py

/workspace/pylint-dev__pylint__2.10/pylint/reporters:
__init__.py
base_reporter.py
collecting_reporter.py
json_reporter.py
multi_reporter.py
reports_handler_mix_in.py
text.py
ureports

/workspace/pylint-dev__pylint__2.10/pylint/reporters/ureports:
__init__.py
nodes.py
text_writer.py

/workspace/pylint-dev__pylint__2.10/pylint/testutils:
__init__.py
checker_test_case.py
constants.py
decorator.py
functional_test_file.py
get_test_info.py
global_test_linter.py
lint_module_test.py
output_line.py
reporter_for_tests.py
tokenize_str.py
unittest_linter.py

/workspace/pylint-dev__pylint__2.10/pylint/utils:
__init__.py
ast_walker.py
file_state.py
pragma_parser.py
utils.py

/workspace/pylint-dev__pylint__2.10/pylint.egg-info:
PKG-INFO
SOURCES.txt
dependency_links.txt
entry_points.txt
requires.txt
top_level.txt

/workspace/pylint-dev__pylint__2.10/script:
__init__.py
bump_changelog.py
fix_documentation.py

/workspace/pylint-dev__pylint__2.10/tests:
acceptance
benchmark
checkers
conftest.py
data
extensions
functional
input
lint
message
messages
profile
regrtest_data
test_check_parallel.py
test_config.py
test_epylint.py
test_func.py
test_functional.py
test_import_graph.py
test_numversion.py
test_pragma_parser.py
test_pylint_runners.py
test_regr.py
test_self.py
testutils
unittest_config.py
unittest_pyreverse_diadefs.py
unittest_pyreverse_inspector.py
unittest_pyreverse_writer.py
unittest_reporters_json.py
unittest_reporting.py
utils

/workspace/pylint-dev__pylint__2.10/tests/acceptance:
test_stdlib.py

/workspace/pylint-dev__pylint__2.10/tests/benchmark:
test_baseline_benchmarks.py

/workspace/pylint-dev__pylint__2.10/tests/checkers:
__init__.py
conftest.py
unittest_base.py
unittest_classes.py
unittest_deprecated.py
unittest_exceptions.py
unittest_format.py
unittest_imports.py
unittest_logging.py
unittest_misc.py
unittest_python3.py
unittest_refactoring.py
unittest_similar.py
unittest_spelling.py
unittest_stdlib.py
unittest_strings.py
unittest_typecheck.py
unittest_utils.py
unittest_variables.py

/workspace/pylint-dev__pylint__2.10/tests/data:
__init__.py
ascript
classes_No_Name.dot
clientmodule_test.py
packages_No_Name.dot
suppliermodule_test.py

/workspace/pylint-dev__pylint__2.10/tests/extensions:
__init__.py
data
test_bad_builtin.py
test_broad_try_clause.py
test_check_docs.py
test_check_docs_utils.py
test_check_mccabe.py
test_check_raise_docs.py
test_check_return_docs.py
test_check_yields_docs.py
test_comparetozero.py
test_confusing_elif.py
test_docstyle.py
test_elseif_used.py
test_empty_comment.py
test_emptystring.py
test_overlapping_exceptions.py
test_redefined.py

/workspace/pylint-dev__pylint__2.10/tests/extensions/data:
bad_builtin.py
broad_try_clause.py
compare_to_zero.py
docstring.py
elif.py
empty_comment.py
empty_string_comparison.py
mccabe.py
overlapping_exceptions.py
overlapping_exceptions_py33.py
redefined.py

/workspace/pylint-dev__pylint__2.10/tests/functional:
__init__.py
a
b
c
d
e
ext
f
g
i
import_outside_toplevel.py
import_outside_toplevel.txt
k
l
m
n
o
p
r
s
t
u
w
y

/workspace/pylint-dev__pylint__2.10/tests/functional/a:
__init__.py
abstract
access
alternative
anomalous_backslash_escape.py
anomalous_backslash_escape.txt
anomalous_unicode_escape_py3.py
anomalous_unicode_escape_py3.rc
anomalous_unicode_escape_py3.txt
arguments.py
arguments.rc
arguments.txt
arguments_differ.py
arguments_differ.txt
arguments_out_of_order.py
arguments_out_of_order.txt
arguments_renamed.py
arguments_renamed.txt
assert_on_string_literal.py
assert_on_string_literal.txt
assert_on_tuple.py
assert_on_tuple.txt
assign
async_functions.py
async_functions.rc
async_functions.txt
attribute_defined_outside_init.py
attribute_defined_outside_init.txt
await_outside_async.py
await_outside_async.rc
await_outside_async.txt

/workspace/pylint-dev__pylint__2.10/tests/functional/a/abstract:
abstract_abc_methods.py
abstract_class_instantiated_in_class.py
abstract_class_instantiated_py3.py
abstract_class_instantiated_py3.rc
abstract_class_instantiated_py3.txt
abstract_class_instantiated_py34.py
abstract_class_instantiated_py34.rc
abstract_class_instantiated_py34.txt
abstract_method_py3.py
abstract_method_py3.rc
abstract_method_py3.txt

/workspace/pylint-dev__pylint__2.10/tests/functional/a/access:
access_attr_before_def_false_positive.py
access_member_before_definition.py
access_member_before_definition.txt
access_to__name__.py
access_to__name__.txt
access_to_protected_members.py
access_to_protected_members.txt

/workspace/pylint-dev__pylint__2.10/tests/functional/a/alternative:
alternative_union_syntax.py
alternative_union_syntax.rc
alternative_union_syntax_error.py
alternative_union_syntax_error.rc
alternative_union_syntax_error.txt
alternative_union_syntax_py37.py
alternative_union_syntax_py37.rc
alternative_union_syntax_py37.txt

/workspace/pylint-dev__pylint__2.10/tests/functional/a/assign:
assigment_from_no_return.py
assigment_from_no_return.txt
assigning_non_slot.py
assigning_non_slot.txt
assigning_non_slot_4509.py
assigning_non_slot_4509.rc
assigning_non_slot_4509.txt
assignment_expression.py
assignment_expression.rc
assignment_expression.txt
assignment_from_no_return.py
assignment_from_no_return.txt
assignment_from_no_return_py3.py
assignment_from_no_return_py3.rc

/workspace/pylint-dev__pylint__2.10/tests/functional/b:
__init__.py
bad_except_order.py
bad_except_order.txt
bad_exception_context.py
bad_exception_context.rc
bad_exception_context.txt
bad_indentation.py
bad_indentation.txt
bad_inline_option.py
bad_inline_option.rc
bad_inline_option.txt
bad_open_mode_py3.py
bad_open_mode_py3.rc
bad_open_mode_py3.txt
bad_option_value.py
bad_option_value.txt
bad_reversed_sequence.py
bad_reversed_sequence.txt
bad_reversed_sequence_py37.py
bad_reversed_sequence_py37.rc
bad_reversed_sequence_py37.txt
bad_reversed_sequence_py38.py
bad_reversed_sequence_py38.rc
bad_staticmethod_argument.py
bad_staticmethod_argument.txt
bad_thread_instantiation.py
bad_thread_instantiation.txt
bare_except.py
bare_except.txt
base_init_vars.py
blacklisted_name.py
blacklisted_name.txt
broad_except.py
broad_except.txt
bugfix_local_scope_metaclass_1177.py
bugfix_local_scope_metaclass_1177.rc
builtin_module_test.py

/workspace/pylint-dev__pylint__2.10/tests/functional/c:
__init__.py
cached_property.py
cached_property.rc
cached_property.txt
cellvar_escaping_loop.py
cellvar_escaping_loop.txt
class_attributes.py
class_members_py30.py
class_members_py30.rc
class_members_py30.txt
class_members_py36.py
class_members_py36.rc
class_scope.py
class_scope.txt
class_variable_slots_conflict_exempted.py
class_variable_slots_conflict_exempted.rc
classes_meth_could_be_a_function.py
classes_protected_member_access.py
comparison_with_callable.py
comparison_with_callable.txt
condition_evals_to_constant.py
condition_evals_to_constant.txt
confidence_filter.py
confidence_filter.rc
confidence_filter.txt
confusing_with_statement.py
confusing_with_statement.txt
consider
continue_in_finally.py
continue_in_finally.rc
continue_in_finally.txt
control_pragmas.py
crash_missing_module_type.py
ctor_arguments.py
ctor_arguments.txt

/workspace/pylint-dev__pylint__2.10/tests/functional/c/consider:
consider_iterating_dictionary.py
consider_iterating_dictionary.txt
consider_join.py
consider_join.txt
consider_merging_isinstance.py
consider_merging_isinstance.txt
consider_swap_variables.py
consider_swap_variables.txt
consider_using_dict_comprehension.py
consider_using_dict_comprehension.txt
consider_using_dict_items.py
consider_using_dict_items.txt
consider_using_enumerate.py
consider_using_enumerate.txt
consider_using_generator.py
consider_using_generator.txt
consider_using_get.py
consider_using_get.txt
consider_using_in.py
consider_using_in.txt
consider_using_min_max_builtin.py
consider_using_min_max_builtin.txt
consider_using_set_comprehension.py
consider_using_set_comprehension.txt
consider_using_sys_exit.py
consider_using_sys_exit.txt
consider_using_sys_exit_exempted.py
consider_using_sys_exit_local_scope.py
consider_using_with.py
consider_using_with.txt
consider_using_with_open.py
consider_using_with_open.rc
consider_using_with_open.txt

/workspace/pylint-dev__pylint__2.10/tests/functional/d:
__init__.py
dangerous_default_value_py30.py
dangerous_default_value_py30.rc
dangerous_default_value_py30.txt
dataclass_with_default_factory.py
dataclass_with_default_factory.rc
decorator_scope.py
decorator_unused.py
defined_and_used_on_same_line.py
deprecated
dict_iter_missing_items.py
dict_iter_missing_items.txt
disable_msg_github_issue_1389.py
disable_msg_github_issue_1389.rc
disable_ungrouped_imports.py
disable_ungrouped_imports.txt
disable_wrong_import_order.py
disable_wrong_import_order.txt
disable_wrong_import_position.py
disabled_msgid_in_pylintrc.py
disabled_msgid_in_pylintrc.rc
docstrings.py
docstrings.txt
dotted_ancestor.py
dotted_ancestor.txt
duplicate_argument_name.py
duplicate_argument_name.txt
duplicate_argument_name_py3.py
duplicate_argument_name_py3.rc
duplicate_argument_name_py3.txt
duplicate_bases.py
duplicate_bases.txt
duplicate_dict_literal_key.py
duplicate_dict_literal_key.txt
duplicate_except.py
duplicate_except.txt
duplicate_string_formatting_argument.py
duplicate_string_formatting_argument.txt

/workspace/pylint-dev__pylint__2.10/tests/functional/d/deprecated:
deprecated_class_py33.py
deprecated_class_py33.rc
deprecated_class_py33.txt
deprecated_decorators.py
deprecated_decorators.rc
deprecated_decorators.txt
deprecated_method_getmoduleinfo.py
deprecated_method_getmoduleinfo.rc
deprecated_method_getmoduleinfo.txt
deprecated_methods_py3.py
deprecated_methods_py3.rc
deprecated_methods_py3.txt
deprecated_methods_py36.py
deprecated_methods_py36.rc
deprecated_methods_py36.txt
deprecated_methods_py38.py
deprecated_methods_py38.rc
deprecated_methods_py38.txt
deprecated_module_py3.py
deprecated_module_py3.rc
deprecated_module_py3.txt
deprecated_module_py36.py
deprecated_module_py36.rc
deprecated_module_py36.txt
deprecated_module_py4.py
deprecated_module_py4.rc
deprecated_module_py4.txt
deprecated_module_uninstalled.py
deprecated_module_uninstalled.rc
deprecated_module_uninstalled.txt
deprecated_relative_import

/workspace/pylint-dev__pylint__2.10/tests/functional/d/deprecated/deprecated_relative_import:
__init__.py
dot_relative_import.py
dot_relative_import.rc
dot_relative_import.txt
subpackage

/workspace/pylint-dev__pylint__2.10/tests/functional/d/deprecated/deprecated_relative_import/subpackage:
__init__.py
dot_dot_relative_import.py
dot_dot_relative_import.rc
dot_dot_relative_import.txt

/workspace/pylint-dev__pylint__2.10/tests/functional/e:
__init__.py
e1101_9588_base_attr_aug_assign.py
enum_subclasses.py
eval_used.py
eval_used.txt
exception_is_binary_op.py
exception_is_binary_op.txt
excess_escapes.py
excess_escapes.txt
exec_used_py3.py
exec_used_py3.rc
exec_used_py3.txt
external_classmethod_crash.py

/workspace/pylint-dev__pylint__2.10/tests/functional/ext:
bad_builtins.py
bad_builtins.rc
bad_builtins.txt
code_style
confusing_elif.py
confusing_elif.rc
confusing_elif.txt
docparams.py
docparams.rc
docparams.txt
typing

/workspace/pylint-dev__pylint__2.10/tests/functional/ext/code_style:
code_style_consider_using_namedtuple_or_dataclass.py
code_style_consider_using_namedtuple_or_dataclass.rc
code_style_consider_using_namedtuple_or_dataclass.txt
code_style_consider_using_tuple.py
code_style_consider_using_tuple.rc
code_style_consider_using_tuple.txt

/workspace/pylint-dev__pylint__2.10/tests/functional/ext/typing:
typing_consider_using_alias.py
typing_consider_using_alias.rc
typing_consider_using_alias.txt
typing_consider_using_alias_without_future.py
typing_consider_using_alias_without_future.rc
typing_consider_using_alias_without_future.txt
typing_consider_using_union.py
typing_consider_using_union.rc
typing_consider_using_union.txt
typing_consider_using_union_py310.py
typing_consider_using_union_py310.rc
typing_consider_using_union_py310.txt
typing_consider_using_union_without_future.py
typing_consider_using_union_without_future.rc
typing_consider_using_union_without_future.txt
typing_deprecated_alias.py
typing_deprecated_alias.rc
typing_deprecated_alias.txt

/workspace/pylint-dev__pylint__2.10/tests/functional/f:
__init__.py
f_string_without_interpolation.py
f_string_without_interpolation.rc
f_string_without_interpolation.txt
fallback_import_disabled.py
fallback_import_enabled.py
fallback_import_enabled.rc
fallback_import_enabled.txt
first_arg.py
first_arg.txt
fixme.py
fixme.rc
fixme.txt
fixme_bad_formatting_1139.py
fixme_bad_formatting_1139.rc
fixme_bad_formatting_1139.txt
formatted_string_literal_with_if_py36.py
formatted_string_literal_with_if_py36.rc
func_disable_linebased.py
func_disable_linebased.txt
function_redefined.py
function_redefined.txt
function_redefined_2540.py
function_redefined_2540.rc
future_import.py
future_unicode_literals.py
future_unicode_literals.rc
future_unicode_literals.txt

/workspace/pylint-dev__pylint__2.10/tests/functional/g:
__init__.py
generated_members.py
generated_members.rc
generated_members.txt
generic_alias
genexp_in_class_scope.py
genexpr_variable_scope.py
genexpr_variable_scope.txt
globals.py
globals.txt

/workspace/pylint-dev__pylint__2.10/tests/functional/g/generic_alias:
__init__.py
generic_alias_collections.py
generic_alias_collections.rc
generic_alias_collections.txt
generic_alias_collections_py37.py
generic_alias_collections_py37.rc
generic_alias_collections_py37.txt
generic_alias_collections_py37_with_typing.py
generic_alias_collections_py37_with_typing.rc
generic_alias_collections_py37_with_typing.txt
generic_alias_mixed_py37.py
generic_alias_mixed_py37.rc
generic_alias_mixed_py37.txt
generic_alias_mixed_py39.py
generic_alias_mixed_py39.rc
generic_alias_mixed_py39.txt
generic_alias_postponed_evaluation_py37.py
generic_alias_postponed_evaluation_py37.rc
generic_alias_postponed_evaluation_py37.txt
generic_alias_related.py
generic_alias_related.rc
generic_alias_related.txt
generic_alias_related_py39.py
generic_alias_related_py39.rc
generic_alias_related_py39.txt
generic_alias_side_effects.py
generic_alias_side_effects.rc
generic_alias_side_effects.txt
generic_alias_typing.py
generic_alias_typing.rc
generic_alias_typing.txt

/workspace/pylint-dev__pylint__2.10/tests/functional/i:
__init__.py
implicit
import_aliasing.py
import_aliasing.txt
import_error.py
import_error.rc
import_error.txt
import_itself.py
import_itself.txt
inconsistent
inference_crash_4692.py
inference_crash_4692.txt
inherit_non_class.py
inherit_non_class.txt
init_is_generator.py
init_is_generator.txt
init_not_called.py
init_not_called.txt
init_return_from_inner_function.py
init_subclass_classmethod_py36.py
init_subclass_classmethod_py36.rc
inner_classes.py
invalid
isinstance_second_argument.py
isinstance_second_argument.txt
iterable_context.py
iterable_context.txt
iterable_context_py3.py
iterable_context_py3.rc
iterable_context_py3.txt
iterable_context_py36.py
iterable_context_py36.rc
iterable_context_py36.txt

/workspace/pylint-dev__pylint__2.10/tests/functional/i/implicit:
implicit_str_concat.py
implicit_str_concat.txt
implicit_str_concat_latin1.py
implicit_str_concat_multiline.py
implicit_str_concat_multiline.rc
implicit_str_concat_multiline.txt
implicit_str_concat_utf8.py

/workspace/pylint-dev__pylint__2.10/tests/functional/i/inconsistent:
inconsistent_mro.py
inconsistent_mro.txt
inconsistent_quotes.py
inconsistent_quotes.rc
inconsistent_quotes.txt
inconsistent_quotes2.py
inconsistent_quotes2.rc
inconsistent_quotes2.txt
inconsistent_returns.py
inconsistent_returns.rc
inconsistent_returns.txt
inconsistent_returns_noreturn.py
inconsistent_returns_noreturn.rc
inconsistent_returns_noreturn.txt

/workspace/pylint-dev__pylint__2.10/tests/functional/i/invalid:
b
e
g
invalid_all_format.py
invalid_all_format.txt
invalid_all_format_valid_1.py
invalid_all_format_valid_2.py
invalid_all_object.py
invalid_all_object.txt
invalid_class_object.py
invalid_class_object.txt
invalid_format_returned.py
invalid_format_returned.txt
invalid_hash_returned.py
invalid_hash_returned.txt
invalid_index_returned.py
invalid_index_returned.txt
invalid_name.py
invalid_name.txt
invalid_overridden_method.py
invalid_overridden_method.txt
invalid_repr_returned.py
invalid_repr_returned.txt
invalid_unary_operand_type.py
invalid_unary_operand_type.txt
l
m
s

/workspace/pylint-dev__pylint__2.10/tests/functional/i/invalid/b:
invalid_bool_returned.py
invalid_bool_returned.txt
invalid_bytes_returned.py
invalid_bytes_returned.txt

/workspace/pylint-dev__pylint__2.10/tests/functional/i/invalid/e:
invalid_envvar_value.py
invalid_envvar_value.txt
invalid_exceptions_caught.py
invalid_exceptions_caught.rc
invalid_exceptions_caught.txt
invalid_exceptions_raised.py
invalid_exceptions_raised.txt

/workspace/pylint-dev__pylint__2.10/tests/functional/i/invalid/g:
invalid_getnewargs_ex_returned.py
invalid_getnewargs_ex_returned.txt
invalid_getnewargs_returned.py
invalid_getnewargs_returned.txt

/workspace/pylint-dev__pylint__2.10/tests/functional/i/invalid/l:
invalid_length_hint_returned.py
invalid_length_hint_returned.txt
invalid_length_returned.py
invalid_length_returned.txt

/workspace/pylint-dev__pylint__2.10/tests/functional/i/invalid/m:
invalid_metaclass.py
invalid_metaclass_py3.py
invalid_metaclass_py3.rc

/workspace/pylint-dev__pylint__2.10/tests/functional/i/invalid/s:
invalid_sequence_index.py
invalid_sequence_index.txt
invalid_slice_index.py
invalid_slice_index.txt
invalid_star_assignment_target.py
invalid_star_assignment_target.rc
invalid_star_assignment_target.txt
invalid_str_returned.py
invalid_str_returned.txt

/workspace/pylint-dev__pylint__2.10/tests/functional/k:
__init__.py
keyword_arg_before_vararg.py
keyword_arg_before_vararg.txt

/workspace/pylint-dev__pylint__2.10/tests/functional/l:
__init__.py
lambda_use_before_assign.py
len_checks.py
len_checks.txt
line_endings.py
line_endings.rc
line_endings.txt
line_too_long.py
line_too_long.txt
line_too_long_end_of_module.py
literal_comparison.py
literal_comparison.txt
logging_format_interpolation.py
logging_format_interpolation.txt
logging_format_interpolation_py36.py
logging_format_interpolation_py36.rc
logging_format_interpolation_py36.txt
logging_fstring_interpolation_py36.py
logging_fstring_interpolation_py36.rc
logging_fstring_interpolation_py36.txt
logging_not_lazy.py
logging_not_lazy.txt
logging_not_lazy_with_logger.py
logging_not_lazy_with_logger.txt
logical_tautology.py
logical_tautology.txt
long_lines_with_utf8.py
long_lines_with_utf8.txt
long_utf8_lines.py
loopvar_in_dict_comp_py27.py
loopvar_in_dict_comp_py27.txt
lost_exception.py
lost_exception.txt

/workspace/pylint-dev__pylint__2.10/tests/functional/m:
__init__.py
mapping_context.py
mapping_context.txt
mapping_context_py3.py
mapping_context_py3.rc
mapping_context_py3.txt
member
metaclass_attr_access.py
method_hidden.py
method_hidden.txt
misplaced_bare_raise.py
misplaced_bare_raise.txt
misplaced_comparison_constant.py
misplaced_comparison_constant.txt
misplaced_format_function.py
misplaced_format_function.txt
misplaced_future.py
misplaced_future.txt
missing
module___dict__.py
module___dict__.txt
monkeypatch_method.py
multiple_imports.py
multiple_imports.txt

/workspace/pylint-dev__pylint__2.10/tests/functional/m/member:
member_checks.py
member_checks.txt
member_checks_hints.py
member_checks_hints.rc
member_checks_hints.txt
member_checks_ignore_none.py
member_checks_ignore_none.rc
member_checks_ignore_none.txt
member_checks_inference_improvements.py
member_checks_no_hints.py
member_checks_no_hints.rc
member_checks_no_hints.txt
member_checks_opaque.py
member_checks_opaque.rc
member_checks_opaque.txt
member_checks_py37.py
member_checks_py37.rc
member_checks_py37.txt
member_checks_typed_annotations.py
member_checks_typed_annotations.txt
membership_protocol.py
membership_protocol.txt
membership_protocol_py3.py
membership_protocol_py3.rc
membership_protocol_py3.txt

/workspace/pylint-dev__pylint__2.10/tests/functional/m/missing:
missing_docstring.py
missing_docstring.txt
missing_docstring_new_style.py
missing_docstring_new_style.txt
missing_final_newline.py
missing_final_newline.txt
missing_kwoa_py3.py
missing_kwoa_py3.rc
missing_kwoa_py3.txt
missing_module_docstring_disabled.py
missing_parentheses_for_call_in_test.py
missing_parentheses_for_call_in_test.txt
missing_self_argument.py
missing_self_argument.txt

/workspace/pylint-dev__pylint__2.10/tests/functional/n:
__init__.py
name
nan_comparison_check.py
nan_comparison_check.txt
nested_blocks_issue1088.py
nested_blocks_issue1088.txt
nested_func_defined_in_loop.py
nested_func_defined_in_loop.txt
new_style_class_py_30.py
new_style_class_py_30.txt
no
non
none_dunder_protocols_py36.py
none_dunder_protocols_py36.rc
none_dunder_protocols_py36.txt
nonexistent_operator.py
nonexistent_operator.txt
nonlocal_and_global.py
nonlocal_and_global.rc
nonlocal_and_global.txt
nonlocal_without_binding.py
nonlocal_without_binding.rc
nonlocal_without_binding.txt
not_async_context_manager.py
not_async_context_manager.rc
not_async_context_manager.txt
not_async_context_manager_py37.py
not_async_context_manager_py37.rc
not_callable.py
not_callable.txt
not_context_manager.py
not_context_manager.txt
not_in_loop.py
not_in_loop.txt

/workspace/pylint-dev__pylint__2.10/tests/functional/n/name:
namePresetCamelCase.py
namePresetCamelCase.rc
namePresetCamelCase.txt
name_final.py
name_final.rc
name_final.txt
name_final_snake_case.py
name_final_snake_case.rc
name_final_snake_case.txt
name_good_bad_names_regex.py
name_good_bad_names_regex.rc
name_good_bad_names_regex.txt
name_preset_snake_case.py
name_preset_snake_case.rc
name_preset_snake_case.txt
name_styles.py
name_styles.rc
name_styles.txt
namedtuple_member_inference.py
namedtuple_member_inference.txt
names_in__all__.py
names_in__all__.txt

/workspace/pylint-dev__pylint__2.10/tests/functional/n/no:
__init__.py
no_classmethod_decorator.py
no_classmethod_decorator.txt
no_dummy_redefined.py
no_dummy_redefined.txt
no_else_break.py
no_else_break.txt
no_else_continue.py
no_else_continue.txt
no_else_raise.py
no_else_raise.txt
no_else_return.py
no_else_return.txt
no_method_argument_py38.py
no_method_argument_py38.rc
no_name_in_module.py
no_name_in_module.txt
no_self_argument.py
no_self_argument.txt
no_self_argument_py37.py
no_self_argument_py37.rc
no_self_argument_py37.txt
no_self_use.py
no_self_use.txt
no_self_use_py3.py
no_self_use_py3.rc
no_staticmethod_decorator.py
no_staticmethod_decorator.txt
no_warning_docstring.py

/workspace/pylint-dev__pylint__2.10/tests/functional/n/non:
__init__.py
non_ascii_name.py
non_ascii_name.rc
non_ascii_name.txt
non_init_parent_called.py
non_init_parent_called.txt
non_iterator_returned.py
non_iterator_returned.txt
non_str_assignment_to_dunder_name.py
non_str_assignment_to_dunder_name.txt

/workspace/pylint-dev__pylint__2.10/tests/functional/o:
__init__.py
object_as_class_attribute.py
old_division_floats.py
old_division_floats.rc
old_division_manually.py
old_division_manually.rc
overloaded_operator.py

/workspace/pylint-dev__pylint__2.10/tests/functional/p:
__init__.py
pattern_matching.py
pattern_matching.rc
plugin_does_not_exists.py
plugin_does_not_exists.rc
plugin_does_not_exists.txt
postponed_evaluation_activated.py
postponed_evaluation_activated.rc
postponed_evaluation_activated_with_alias.py
postponed_evaluation_activated_with_alias.rc
postponed_evaluation_not_activated.py
postponed_evaluation_not_activated.rc
postponed_evaluation_not_activated.txt
postponed_evaluation_pep585.py
postponed_evaluation_pep585.rc
postponed_evaluation_pep585.txt
postponed_evaluation_pep585_error.py
postponed_evaluation_pep585_error.rc
postponed_evaluation_pep585_error.txt
postponed_evaluation_pep585_py39.py
postponed_evaluation_pep585_py39.rc
postponed_evaluation_pep585_py39.txt
pragma_after_backslash.py
preferred_module.py
preferred_module.rc
preferred_module.txt
property_affectation_py26.py
property_with_parameters.py
property_with_parameters.txt
protected_access_access_different_scopes.py
protected_access_access_different_scopes.rc
protected_access_access_different_scopes.txt
protocol_classes.py
protocol_classes.rc
protocol_classes.txt

/workspace/pylint-dev__pylint__2.10/tests/functional/r:
__init__.py
raise
recursion
redeclared_assigned_name.py
redeclared_assigned_name.rc
redeclared_assigned_name.txt
redefine_loop.py
redefine_loop.txt
redefined_argument_from_local.py
redefined_argument_from_local.txt
redefined_builtin.py
redefined_builtin.txt
redefined_builtin_allowed.py
redefined_builtin_allowed.rc
redefined_builtin_allowed.txt
redefined_outer_name_type_checking.py
redefined_outer_name_type_checking.rc
redundant_unittest_assert.py
redundant_unittest_assert.txt
regression
reimport.py
reimport.txt
reimported.py
reimported.txt
renamed_import_logging_not_lazy.py
renamed_import_logging_not_lazy.txt
repeated_keyword.py
repeated_keyword.txt
return_in_init.py
return_in_init.txt
return_outside_function.py
return_outside_function.txt
reused_outer_loop_variable.py
reused_outer_loop_variable.txt
reused_outer_loop_variable_py3.py
reused_outer_loop_variable_py3.rc
reused_outer_loop_variable_py3.txt

/workspace/pylint-dev__pylint__2.10/tests/functional/r/raise:
raise_missing_from.py
raise_missing_from.txt
raising_format_tuple.py
raising_format_tuple.txt
raising_non_exception_py3.py
raising_non_exception_py3.rc
raising_non_exception_py3.txt
raising_self.py

/workspace/pylint-dev__pylint__2.10/tests/functional/r/recursion:
recursion_error_2667.py
recursion_error_2836.py
recursion_error_2861.py
recursion_error_2899.py
recursion_error_2906.py
recursion_error_3152.py
recursion_error_3159.py
recursion_error_940.py
recursion_error_crash.py
recursion_error_crash_2683.py
recursion_error_crash_astroid_623.py
recursion_regression_2960.py

/workspace/pylint-dev__pylint__2.10/tests/functional/r/regression:
regression_1326_crash_uninferable.py
regression_2306_enum_value.py
regression_2443_duplicate_bases.py
regression_2443_duplicate_bases.rc
regression_2913.py
regression_2913.txt
regression_2937_ifexp.py
regression_3091.py
regression_3231_no_member_property.py
regression_3416_unused_argument_raise.py
regression_3416_unused_argument_raise.txt
regression_3535_double_enum_inherit.py
regression_3595_notcallable_collections.py
regression_4221_object_instanceattr.py
regression_4358_unsubscriptable_enum.py
regression_4439.py
regression_4439.txt
regression_4612_crash_pytest_fixture.py
regression_4680.py
regression_4680.txt
regression_4688_duplicated_bases_member_hints.py
regression_4688_duplicated_bases_member_hints.txt
regression_4723.py
regression_4723.txt
regression___file___global.py
regression___file___global.txt
regression_implicit_none_with_no_return.py
regression_implicit_none_with_no_return.txt
regression_infer_call_result_3690.py
regression_infer_call_result_3690.txt
regression_issue_4631.py
regression_issue_4631.rc
regression_issue_4633.py
regression_no_member_1078.py
regression_no_value_for_parameter.py
regression_posonly_args.py
regression_posonly_args.rc
regression_properties_in_class_context.py
regression_properties_in_class_context.txt
regression_property_no_member_2641.py
regression_property_no_member_3269.py
regression_property_no_member_844.py
regression_property_no_member_870.py
regression_property_slots_2439.py
regression_too_many_arguments_2335.py

/workspace/pylint-dev__pylint__2.10/tests/functional/s:
__init__.py
self
signature_differs.py
signature_differs.txt
simplifiable
singledispatch_functions_py3.py
singledispatch_functions_py3.rc
singledispatch_functions_py3.txt
singleton_comparison.py
singleton_comparison.txt
slots_checks.py
slots_checks.txt
socketerror_import.py
star
statement_without_effect.py
statement_without_effect.txt
statement_without_effect_py36.py
statement_without_effect_py36.rc
statement_without_effect_py36.txt
stop_iteration_inside_generator.py
stop_iteration_inside_generator.rc
stop_iteration_inside_generator.txt
string
subprocess_popen_preexec_fn.py
subprocess_popen_preexec_fn.txt
subprocess_run_check35.py
subprocess_run_check35.rc
subprocess_run_check35.txt
super
superfluous_parens.py
superfluous_parens.txt
suspicious_str_strip_call_py3.py
suspicious_str_strip_call_py3.rc
suspicious_str_strip_call_py3.txt
syntax_error.py
syntax_error.rc
syntax_error.txt
syntax_error_jython.py
syntax_error_jython.rc
syntax_error_jython.txt
sys_stream_regression_1004.py
sys_stream_regression_1004.rc
sys_stream_regression_1004.txt

/workspace/pylint-dev__pylint__2.10/tests/functional/s/self:
self_assigning_variable.py
self_assigning_variable.txt
self_cls_assignment.py
self_cls_assignment.txt

/workspace/pylint-dev__pylint__2.10/tests/functional/s/simplifiable:
simplifiable_condition.py
simplifiable_condition.txt
simplifiable_if_expression.py
simplifiable_if_expression.txt
simplifiable_if_statement.py
simplifiable_if_statement.txt
simplify_chained_comparison.py
simplify_chained_comparison.txt

/workspace/pylint-dev__pylint__2.10/tests/functional/s/star:
star_needs_assignment_target.py
star_needs_assignment_target.rc
star_needs_assignment_target.txt
star_needs_assignment_target_py35.py
star_needs_assignment_target_py35.rc
star_needs_assignment_target_py35.txt

/workspace/pylint-dev__pylint__2.10/tests/functional/s/string:
string_formatting.py
string_formatting.txt
string_formatting_disable.py
string_formatting_disable.rc
string_formatting_disable.txt
string_formatting_error.py
string_formatting_error.txt
string_formatting_failed_inference.py
string_formatting_failed_inference_py35.py
string_formatting_failed_inference_py35.rc
string_formatting_py3.py
string_formatting_py3.rc
string_formatting_py3.txt
string_log_formatting.py
string_log_formatting.txt

/workspace/pylint-dev__pylint__2.10/tests/functional/s/super:
super_checks.py
super_checks.txt
super_with_arguments.py
super_with_arguments.rc
super_with_arguments.txt

/workspace/pylint-dev__pylint__2.10/tests/functional/t:
__init__.py
ternary.py
ternary.txt
test_compile.py
tokenize_error.py
tokenize_error.rc
tokenize_error.txt
tokenize_error_jython.py
tokenize_error_jython.rc
tokenize_error_jython.txt
too
trailing_comma_tuple.py
trailing_comma_tuple.rc
trailing_comma_tuple.txt
trailing_newlines.py
trailing_newlines.txt
trailing_whitespaces.py
trailing_whitespaces.txt
try_except_raise.py
try_except_raise.txt
try_except_raise_crash.py
try_except_raise_crash.rc
try_except_raise_crash.txt
typedDict.py
typedDict.rc
typing_generic.py
typing_generic.rc
typing_use.py
typing_use.rc
typing_use.txt

/workspace/pylint-dev__pylint__2.10/tests/functional/t/too:
__init__.py
too_few_public_methods.py
too_few_public_methods.txt
too_few_public_methods_37.py
too_few_public_methods_37.rc
too_many_ancestors.py
too_many_ancestors.txt
too_many_arguments.py
too_many_arguments.txt
too_many_arguments_issue_1045.py
too_many_arguments_issue_1045.rc
too_many_arguments_overload.py
too_many_boolean_expressions.py
too_many_boolean_expressions.txt
too_many_branches.py
too_many_branches.txt
too_many_instance_attributes.py
too_many_instance_attributes.txt
too_many_lines.py
too_many_lines.txt
too_many_lines_disabled.py
too_many_locals.py
too_many_locals.txt
too_many_nested_blocks.py
too_many_nested_blocks.txt
too_many_public_methods.py
too_many_public_methods.txt
too_many_return_statements.py
too_many_return_statements.txt
too_many_star_expressions.py
too_many_star_expressions.rc
too_many_star_expressions.txt
too_many_statements.py
too_many_statements.rc
too_many_statements.txt

/workspace/pylint-dev__pylint__2.10/tests/functional/u:
__init__.py
unbalanced_tuple_unpacking.py
unbalanced_tuple_unpacking.txt
unbalanced_tuple_unpacking_py30.py
unbalanced_tuple_unpacking_py30.rc
undefined
unexpected_special_method_signature.py
unexpected_special_method_signature.txt
ungrouped_imports.py
ungrouped_imports.txt
ungrouped_imports_isort_compatible.py
unhashable_dict_key.py
unhashable_dict_key.txt
unidiomatic_typecheck.py
unidiomatic_typecheck.txt
uninferable_all_object.py
unknown_encoding_jython.py
unknown_encoding_jython.rc
unknown_encoding_jython.txt
unnecessary
unpacking.py
unpacking_generalizations.py
unpacking_generalizations.rc
unpacking_generalizations.txt
unpacking_non_sequence.py
unpacking_non_sequence.txt
unreachable.py
unreachable.txt
unrecognized_inline_option.py
unrecognized_inline_option.txt
unspecified_encoding_py38.py
unspecified_encoding_py38.rc
unspecified_encoding_py38.txt
unsubscriptable_value.py
unsubscriptable_value.rc
unsubscriptable_value.txt
unsubscriptable_value_py37.py
unsubscriptable_value_py37.rc
unsubscriptable_value_py37.txt
unsupported
unused
use
useless

/workspace/pylint-dev__pylint__2.10/tests/functional/u/undefined:
undefined_loop_variable.py
undefined_loop_variable.txt
undefined_variable.py
undefined_variable.txt
undefined_variable_crash_on_attribute.py
undefined_variable_py30.py
undefined_variable_py30.rc
undefined_variable_py30.txt

/workspace/pylint-dev__pylint__2.10/tests/functional/u/unnecessary:
unnecessary_comprehension.py
unnecessary_comprehension.txt
unnecessary_dict_index_lookup.py
unnecessary_dict_index_lookup.txt
unnecessary_lambda.py
unnecessary_lambda.txt
unnecessary_not.py
unnecessary_not.txt
unnecessary_pass.py
unnecessary_pass.txt

/workspace/pylint-dev__pylint__2.10/tests/functional/u/unsupported:
unsupported_assignment_operation.py
unsupported_assignment_operation.rc
unsupported_assignment_operation.txt
unsupported_binary_operation.py
unsupported_binary_operation.rc
unsupported_binary_operation.txt
unsupported_delete_operation.py
unsupported_delete_operation.rc
unsupported_delete_operation.txt

/workspace/pylint-dev__pylint__2.10/tests/functional/u/unused:
__init__.py
unused_argument.py
unused_argument.txt
unused_argument_py3.py
unused_argument_py3.rc
unused_argument_py3.txt
unused_global_variable1.py
unused_global_variable2.py
unused_global_variable2.rc
unused_global_variable2.txt
unused_global_variable3.py
unused_global_variable4.py
unused_global_variable4.rc
unused_global_variable4.txt
unused_import.py
unused_import.txt
unused_import_assigned_to.py
unused_import_class_def_keyword.py
unused_import_everything_disabled.py
unused_import_everything_disabled.rc
unused_import_positional_only_py38.py
unused_import_positional_only_py38.rc
unused_import_py30.py
unused_import_py30.txt
unused_name_from_wilcard_import.py
unused_name_from_wilcard_import.txt
unused_private_member.py
unused_private_member.txt
unused_typing_imports.py
unused_typing_imports.rc
unused_variable.py
unused_variable.txt
unused_variable_py36.py
unused_variable_py36.rc

/workspace/pylint-dev__pylint__2.10/tests/functional/u/use:
use_a_generator.py
use_a_generator.txt
use_maxsplit_arg.py
use_maxsplit_arg.txt
use_symbolic_message_instead.py
use_symbolic_message_instead.txt
used_before_assignement.py
used_before_assignement.txt
used_before_assignment_488.py
used_before_assignment_issue1081.py
used_before_assignment_issue1081.txt
used_before_assignment_issue853.py
used_before_assignment_nonlocal.py
used_before_assignment_nonlocal.rc
used_before_assignment_nonlocal.txt
used_prior_global_declaration.py
used_prior_global_declaration.rc
used_prior_global_declaration.txt
using_constant_test.py
using_constant_test.txt

/workspace/pylint-dev__pylint__2.10/tests/functional/u/useless:
useless_else_on_loop.py
useless_else_on_loop.txt
useless_object_inheritance.py
useless_object_inheritance.txt
useless_return.py
useless_return.txt
useless_super_delegation.py
useless_super_delegation.txt
useless_super_delegation_py3.py
useless_super_delegation_py3.rc
useless_super_delegation_py3.txt
useless_super_delegation_py35.py
useless_super_delegation_py35.rc
useless_super_delegation_py35.txt
useless_super_delegation_py38.py
useless_super_delegation_py38.rc
useless_super_delegation_py38.txt
useless_type_doc.py
useless_type_doc.rc
useless_type_doc.txt

/workspace/pylint-dev__pylint__2.10/tests/functional/w:
__init__.py
wildcard_import.py
wildcard_import.txt
wildcard_import_allowed.py
wildcard_import_allowed.rc
wildcard_import_allowed.txt
with_used_before_assign.py
with_used_before_assign.txt
with_using_generator.py
with_using_generator.txt
wrong_exception_operation.py
wrong_exception_operation.txt
wrong_import_order.py
wrong_import_order.txt
wrong_import_order2.py
wrong_import_position.py
wrong_import_position.txt
wrong_import_position10.py
wrong_import_position11.py
wrong_import_position11.txt
wrong_import_position12.py
wrong_import_position12.txt
wrong_import_position13.py
wrong_import_position13.txt
wrong_import_position14.py
wrong_import_position14.txt
wrong_import_position15.py
wrong_import_position2.py
wrong_import_position3.py
wrong_import_position4.py
wrong_import_position5.py
wrong_import_position6.py
wrong_import_position7.py
wrong_import_position8.py
wrong_import_position9.py
wrong_import_position_exclude_dunder_main.py

/workspace/pylint-dev__pylint__2.10/tests/functional/y:
__init__.py
yield_assign_py25.py
yield_from_iterable_py33.py
yield_from_iterable_py33.rc
yield_from_iterable_py33.txt
yield_from_outside_func.py
yield_from_outside_func.rc
yield_from_outside_func.txt
yield_inside_async_function.py
yield_inside_async_function.rc
yield_inside_async_function.txt
yield_inside_async_function_py36.py
yield_inside_async_function_py36.rc
yield_inside_async_function_py36.txt
yield_outside_func.py
yield_outside_func.txt
yield_return_mix.py

/workspace/pylint-dev__pylint__2.10/tests/input:
__init__.py
benchmark_minimal_file.py
func_3k_removed_stuff_py_30.py
func_i0011.py
func_i0012.py
func_i0013.py
func_i0014.py
func_i0020.py
func_i0022.py
func_noerror_cycle
func_return_yield_mix_py_33.py
func_w0122_py_30.py
func_w0332_py_30.py
func_w0401.py
func_w0401_disabled.py
func_w0401_disabled_in_func.py
func_w0401_package
func_w0801.py
hide_code_with_imports.py
ignore_except_pass_by_default.py
multiline-import
no_absolute_import.py
noext
not__init__.py
similar1
similar2
similar3
similar4
similar5
similar6
similar_empty_func_1.py
similar_empty_func_2.py
similar_lines_a.py
similar_lines_b.py
w0401_cycle.py
w0801_same.py

/workspace/pylint-dev__pylint__2.10/tests/input/func_noerror_cycle:
__init__.py
a.py
b.py

/workspace/pylint-dev__pylint__2.10/tests/input/func_w0401_package:
__init__.py
all_the_things.py
thing1.py
thing2.py

/workspace/pylint-dev__pylint__2.10/tests/lint:
__init__.py
unittest_expand_modules.py
unittest_lint.py

/workspace/pylint-dev__pylint__2.10/tests/message:
__init__.py
conftest.py
unittest_message.py
unittest_message_definition.py
unittest_message_definition_store.py
unittest_message_id_store.py

/workspace/pylint-dev__pylint__2.10/tests/messages:
builtin_module.txt
func_3k_removed_stuff_py_30.txt
func_bad_cont_dictcomp_py27.txt
func_bug113231.txt
func_disable_linebased.txt
func_disable_linebased_py30.txt
func_i0011.txt
func_i0012.txt
func_i0013.txt
func_i0014.txt
func_i0020.txt
func_i0022.txt
func_noerror_cycle.txt
func_raw_escapes.txt
func_return_yield_mix_py_33.txt
func_toolonglines_py30.txt
func_typecheck_callfunc_assigment.txt
func_typecheck_getattr_py30.txt
func_typecheck_non_callable_call.txt
func_unicode_literal_py26.txt
func_unicode_literal_py274.txt
func_use_for_or_listcomp_var_py29.txt
func_use_for_or_listcomp_var_py30.txt
func_variables_unused_name_from_wilcard_import.txt
func_w0122_py_30.txt
func_w0312.txt
func_w0332_py_30.txt
func_w0401.txt
func_w0401_disabled.txt
func_w0401_disabled_in_func.txt
func_w0401_package.txt
func_w0622.txt
func_w0623.txt
func_w0623_py_30.txt
func_w0801.txt
func_with_without_as_py25.txt

/workspace/pylint-dev__pylint__2.10/tests/profile:
test_profile_against_externals.py

/workspace/pylint-dev__pylint__2.10/tests/regrtest_data:
absimp
application_crash.py
bad_package
beyond_top
classdoc_usage.py
comments_pylintrc
dataclasses_pyreverse
decimal_inference.py
descriptor_crash.py
dummy
dummy_plugin
dummy_plugin.rc
duplicate_data_raw_strings
empty.py
fail_on.py
fail_on_info_only.py
fail_under_minus10.py
fail_under_plus7_5.py
func_block_disable_msg.py
import_assign.py
import_package_subpackage_module.py
import_something.py
init_wildcard
meta.py
module_global.py
no_stdout_encoding.py
numarray_import.py
numarray_inf.py
package
package_all
precedence_test.py
py3k-disabled.rc
py3k_error_flag.py
py3k_errors_and_warnings.py
regression_missing_init_3564
special_attr_scope_lookup_crash.py
syntax_error.py
test_pylintrc_comments.py
try_finally_disable_msg_crash.py
unused_variable.py
wildcard.py
wrong_import_position.py

/workspace/pylint-dev__pylint__2.10/tests/regrtest_data/absimp:
__init__.py
string.py

/workspace/pylint-dev__pylint__2.10/tests/regrtest_data/bad_package:
__init__.py
wrong.py

/workspace/pylint-dev__pylint__2.10/tests/regrtest_data/beyond_top:
__init__.py
data.py

/workspace/pylint-dev__pylint__2.10/tests/regrtest_data/dataclasses_pyreverse:
__init__.py

/workspace/pylint-dev__pylint__2.10/tests/regrtest_data/dummy:
__init__.py
another.py
dummy.py

/workspace/pylint-dev__pylint__2.10/tests/regrtest_data/dummy_plugin:
dummy_conf_plugin.py
dummy_plugin.py

/workspace/pylint-dev__pylint__2.10/tests/regrtest_data/duplicate_data_raw_strings:
__init__.py
first.py
second.py

/workspace/pylint-dev__pylint__2.10/tests/regrtest_data/init_wildcard:
__init__.py

/workspace/pylint-dev__pylint__2.10/tests/regrtest_data/package:
AudioTime.py
__init__.py
subpackage

/workspace/pylint-dev__pylint__2.10/tests/regrtest_data/package/subpackage:
__init__.py
module.py

/workspace/pylint-dev__pylint__2.10/tests/regrtest_data/package_all:
__init__.py
notmissing.py

/workspace/pylint-dev__pylint__2.10/tests/regrtest_data/regression_missing_init_3564:
subdirectory

/workspace/pylint-dev__pylint__2.10/tests/regrtest_data/regression_missing_init_3564/subdirectory:
file.py

/workspace/pylint-dev__pylint__2.10/tests/testutils:
test_output_line.py

/workspace/pylint-dev__pylint__2.10/tests/utils:
__init__.py
unittest_ast_walker.py
unittest_utils.py

[Select the relevant files and use repo map to get highlevel representation and structure of repo]


============================================================



ACTION:

THOUGHT: Based on the repository structure, we need to focus on files that handle file system operations and configuration. Let's first create a script to reproduce the issue:
COMMAND:
cat > reproduce.py << 'EOL'
import os
import pylint
from pylint.lint import Run

# Run a simple lint check
Run(['--help'])

# Check if .pylint.d directory exists in home
pylint_d = os.path.join(os.path.expanduser('~'), '.pylint.d')
print(f"\nChecking if .pylint.d exists in home directory: {os.path.exists(pylint_d)}")
if os.path.exists(pylint_d):
    print(f"Found at: {pylint_d}")
EOL

python3 reproduce.py

============================================================



OBSERVATION:

[Error: Writing files on bash is not supported . Use ipython commands - create_file or edit_file to update files]

============================================================



ACTION:

THOUGHT: I apologize. Let me create the reproduce script using the correct method:
CODE:
CODE = """
import os
import pylint
from pylint.lint import Run

# Run a simple lint check
Run(['--help'])

# Check if .pylint.d directory exists in home
pylint_d = os.path.join(os.path.expanduser('~'), '.pylint.d')
print(f"\\nChecking if .pylint.d exists in home directory: {os.path.exists(pylint_d)}")
if os.path.exists(pylint_d):
    print(f"Found at: {pylint_d}")
"""
create_file('reproduce.py', CODE)

============================================================



OBSERVATION:

[File reproduce.py created.]
[File: /workspace/reproduce.py (13 lines total after edit)]
1|
2|import os
3|import pylint
4|from pylint.lint import Run
5|
6|# Run a simple lint check
7|Run(['--help'])
8|
9|# Check if .pylint.d directory exists in home
10|pylint_d = os.path.join(os.path.expanduser('~'), '.pylint.d')
11|print(f"\nChecking if .pylint.d exists in home directory: {os.path.exists(pylint_d)}")
12|if os.path.exists(pylint_d):
13|    print(f"Found at: {pylint_d}")
[File updated. Please review the changes carefully and make sure they are correct (correct indentation, no duplicate or redundant lines etc). Edit the file again if necessary.]


============================================================



ACTION:

THOUGHT: Now let's run the script to reproduce the issue:
COMMAND:
python3 reproduce.py

============================================================



OBSERVATION:

Usage: reproduce.py [options]

Options:
  -h, --help            show this help message and exit
  --long-help           more verbose help.

  Master:
    --init-hook=<code>  Python code to execute, usually for sys.path
                        manipulation such as pygtk.require().
    -E, --errors-only   In error mode, checkers without error messages are
                        disabled and for others, only the ERROR messages are
                        displayed, and no reports are done by default.
    --py3k              In Python 3 porting mode, all checkers will be
                        disabled and only messages emitted by the porting
                        checker will be displayed.
    -v, --verbose       In verbose mode, extra non-checker-related info will
                        be displayed.
    --ignore=<file>[,<file>...]
                        Files or directories to be skipped. They should be
                        base names, not paths. [current: CVS]
    --ignore-patterns=<pattern>[,<pattern>...]
                        Files or directories matching the regex patterns are
                        skipped. The regex matches against base names, not
                        paths. [current: none]
    --ignore-paths=<pattern>[,<pattern>...]
                        Add files or directories matching the regex patterns
                        to the ignore-list. The regex matches against paths.
                        [current: none]
    --persistent=<y_or_n>
                        Pickle collected data for later comparisons. [current:
                        yes]
    --load-plugins=<modules>
                        List of plugins (as comma separated values of python
                        module names) to load, usually to register additional
                        checkers. [current: none]
    --fail-under=<score>
                        Specify a score threshold to be exceeded before
                        program exits with error. [current: 10.0]
    --fail-on=<msg ids>
                        Return non-zero exit code if any of these
                        messages/categories are detected, even if score is
                        above --fail-under value. Syntax same as enable.
                        Messages specified are enabled, while categories only
                        check already-enabled messages. [current: none]
    -j <n-processes>, --jobs=<n-processes>
                        Use multiple processes to speed up Pylint. Specifying
                        0 will auto-detect the number of processors available
                        to use. [current: 1]
    --limit-inference-results=<number-of-results>
                        Control the amount of potential inferred values when
                        inferring a single object. This can help the
                        performance when dealing with large functions or
                        complex, nested conditions.  [current: 100]
    --extension-pkg-allow-list=<pkg[,pkg]>
                        A comma-separated list of package or module names from
                        where C extensions may be loaded. Extensions are
                        loading into the active Python interpreter and may run
                        arbitrary code. [current: none]
    --extension-pkg-whitelist=<pkg[,pkg]>
                        A comma-separated list of package or module names from
                        where C extensions may be loaded. Extensions are
                        loading into the active Python interpreter and may run
                        arbitrary code. (This is an alternative name to
                        extension-pkg-allow-list for backward compatibility.)
                        [current: none]
    --suggestion-mode=<yn>
                        When enabled, pylint would attempt to guess common
                        misconfiguration and emit user-friendly hints instead
                        of false-positive error messages. [current: yes]
    --exit-zero         Always return a 0 (non-error) status code, even if
                        lint errors are found. This is primarily useful in
                        continuous integration scripts.
    --from-stdin        Interpret the stdin as a python script, whose filename
                        needs to be passed as the module_or_package argument.

  Commands:
    --rcfile=<file>     Specify a configuration file to load.
    --output=<file>     Specify an output file.
    --help-msg=<msg-id>
                        Display a help message for the given message id and
                        exit. The value may be a comma separated list of
                        message ids.
    --list-msgs         Generate pylint's messages.
    --list-msgs-enabled
                        Display a list of what messages are enabled and
                        disabled with the given configuration.
    --list-groups       List pylint's message groups.
    --list-conf-levels  Generate pylint's confidence levels.
    --list-extensions   List available extensions.
    --full-documentation
                        Generate pylint's full documentation.
    --generate-rcfile   Generate a sample configuration file according to the
                        current configuration. You can put other options
                        before this one to get them in the generated
                        configuration.

  Messages control:
    --confidence=<levels>
                        Only show warnings with the listed confidence levels.
                        Leave empty to show all. Valid levels: HIGH,
                        INFERENCE, INFERENCE_FAILURE, UNDEFINED. [current:
                        none]
    -e <msg ids>, --enable=<msg ids>
                        Enable the message, report, category or checker with
                        the given id(s). You can either give multiple
                        identifier separated by comma (,) or put this option
                        multiple time (only on the command line, not in the
                        configuration file where it should appear only once).
                        See also the "--disable" option for examples.
    -d <msg ids>, --disable=<msg ids>
                        Disable the message, report, category or checker with
                        the given id(s). You can either give multiple
                        identifiers separated by comma (,) or put this option
                        multiple times (only on the command line, not in the
                        configuration file where it should appear only once).
                        You can also use "--disable=all" to disable everything
                        first and then reenable specific checks. For example,
                        if you want to run only the similarities checker, you
                        can use "--disable=all --enable=similarities". If you
                        want to run only the classes checker, but have no
                        Warning level messages displayed, use "--disable=all
                        --enable=classes --disable=W".

  Reports:
    -f <format>, --output-format=<format>
                        Set the output format. Available formats are text,
                        parseable, colorized, json and msvs (visual studio).
                        You can also give a reporter class, e.g.
                        mypackage.mymodule.MyReporterClass. [current: text]
    -r <y_or_n>, --reports=<y_or_n>
                        Tells whether to display a full report or only the
                        messages. [current: no]
    --evaluation=<python_expression>
                        Python expression which should return a score less
                        than or equal to 10. You have access to the variables
                        'error', 'warning', 'refactor', and 'convention' which
                        contain the number of messages in each category, as
                        well as 'statement' which is the total number of
                        statements analyzed. This score is used by the global
                        evaluation report (RP0004). [current: 10.0 - ((float(5
                        * error + warning + refactor + convention) /
                        statement) * 10)]
    -s <y_or_n>, --score=<y_or_n>
                        Activate the evaluation score. [current: yes]
    --msg-template=<template>
                        Template used to display messages. This is a python
                        new-style format string used to format the message
                        information. See doc for all details.



============================================================



ACTION:

THOUGHT: Let me modify the script to actually perform a lint check that would create the cache directory:
CODE:
CODE = """
import os
import tempfile

# Create a temporary Python file to lint
temp_file = os.path.join(tempfile.gettempdir(), 'test.py')
with open(temp_file, 'w') as f:
    f.write('print("hello world")')

# Import and run pylint
from pylint.lint import Run

try:
    Run([temp_file])
except SystemExit:
    pass  # Pylint calls sys.exit()

# Check if .pylint.d directory exists in home
pylint_d = os.path.join(os.path.expanduser('~'), '.pylint.d')
print(f"\\nChecking if .pylint.d exists in home directory: {os.path.exists(pylint_d)}")
if os.path.exists(pylint_d):
    print(f"Found at: {pylint_d}")
"""
create_file('reproduce.py', CODE)

============================================================



OBSERVATION:

[File reproduce.py already exists and File overwritten.]
[File: /workspace/reproduce.py (22 lines total after edit)]
1|
2|import os
3|import tempfile
4|
5|# Create a temporary Python file to lint
6|temp_file = os.path.join(tempfile.gettempdir(), 'test.py')
7|with open(temp_file, 'w') as f:
8|    f.write('print("hello world")')
9|
10|# Import and run pylint
11|from pylint.lint import Run
12|
13|try:
14|    Run([temp_file])
15|except SystemExit:
16|    pass  # Pylint calls sys.exit()
17|
18|# Check if .pylint.d directory exists in home
19|pylint_d = os.path.join(os.path.expanduser('~'), '.pylint.d')
20|print(f"\nChecking if .pylint.d exists in home directory: {os.path.exists(pylint_d)}")
21|if os.path.exists(pylint_d):
22|    print(f"Found at: {pylint_d}")
[File updated. Please review the changes carefully and make sure they are correct (correct indentation, no duplicate or redundant lines etc). Edit the file again if necessary.]


============================================================



ACTION:

THOUGHT: Let's run the modified script to confirm the issue:
COMMAND:
python3 reproduce.py

============================================================



OBSERVATION:

************* Module test
/tmp/test.py:1:0: C0304: Final newline missing (missing-final-newline)
/tmp/test.py:1:0: C0114: Missing module docstring (missing-module-docstring)

-------------------------------------
Your code has been rated at -10.00/10


Checking if .pylint.d exists in home directory: True
Found at: /root/.pylint.d



============================================================



ACTION:

THOUGHT: Great, we've confirmed the issue. The `.pylint.d` directory is indeed being created in the home directory. Let's investigate the relevant files to understand where this is configured.

First, let's look for files that might handle cache directory configuration:
CODE:
search_dir('.pylint.d', '/workspace/pylint-dev__pylint__2.10/pylint')

============================================================



OBSERVATION:

[Found 5 matches for ".pylint.d" in /workspace/pylint-dev__pylint__2.10/pylint]
/workspace/pylint-dev__pylint__2.10/pylint/config/__init__.py (Line 64): PYLINT_HOME = ".pylint.d"
/workspace/pylint-dev__pylint__2.10/pylint/config/__init__.py (Line 66): PYLINT_HOME = os.path.join(USER_HOME, ".pylint.d")
/workspace/pylint-dev__pylint__2.10/pylint/config/__init__.py (Line 113): not found, it defaults to ~/.pylint.d/ or .pylint.d (in the current working
/workspace/pylint-dev__pylint__2.10/pylint/config/__pycache__/__init__.cpython-39.pyc (Line 11): PYLINTHOMEz	.pylint.dc                 C   s&   |  tjd} tjt|  | dS )N_z.stats)replaceosseppathjoinPYLINT_HOME)	base_namerecurs r   "/testbed/pylint/config/__init__.py_get_pdata_pathE   s    r   c                 C   s`   t | d}z:t|d}t|W  d    W S 1 s80    Y  W n tyZ   i  Y S 0 d S )N   rb)r   openpickleload	Exception)base	data_filestreamr   r   r   load_resultsJ   s    
/workspace/pylint-dev__pylint__2.10/pylint/config/__pycache__/__init__.cpython-39.pyc (Line 26): not found, it defaults to ~/.pylint.d/ or .pylint.d (in the current working
[End of matches for ".pylint.d" in /workspace/pylint-dev__pylint__2.10/pylint]


============================================================



ACTION:

THOUGHT: Perfect, I found the configuration in `/workspace/pylint-dev__pylint__2.10/pylint/config/__init__.py`. Let's examine this file in detail:
CODE:
open_file('/workspace/pylint-dev__pylint__2.10/pylint/config/__init__.py')

============================================================



OBSERVATION:

[File: /workspace/pylint-dev__pylint__2.10/pylint/config/__init__.py (120 lines total)]
1|# Copyright (c) 2006-2010, 2012-2014 LOGILAB S.A. (Paris, FRANCE) <contact@logilab.fr>
2|# Copyright (c) 2008 pyves@crater.logilab.fr <pyves@crater.logilab.fr>
3|# Copyright (c) 2013 Google, Inc.
4|# Copyright (c) 2013 John McGehee <jmcgehee@altera.com>
5|# Copyright (c) 2014-2020 Claudiu Popa <pcmanticore@gmail.com>
6|# Copyright (c) 2014 Brett Cannon <brett@python.org>
7|# Copyright (c) 2014 Arun Persaud <arun@nubati.net>
8|# Copyright (c) 2015 Aru Sahni <arusahni@gmail.com>
9|# Copyright (c) 2015 John Kirkham <jakirkham@gmail.com>
10|# Copyright (c) 2015 Ionel Cristian Maries <contact@ionelmc.ro>
11|# Copyright (c) 2016 Erik <erik.eriksson@yahoo.com>
12|# Copyright (c) 2016 Alexander Todorov <atodorov@otb.bg>
13|# Copyright (c) 2016 Moises Lopez <moylop260@vauxoo.com>
14|# Copyright (c) 2017, 2020 hippo91 <guillaume.peillex@gmail.com>
15|# Copyright (c) 2017-2019 Ville Skyttä <ville.skytta@iki.fi>
16|# Copyright (c) 2017 ahirnish <ahirnish@gmail.com>
17|# Copyright (c) 2017 Łukasz Rogalski <rogalski.91@gmail.com>
18|# Copyright (c) 2018, 2020 Anthony Sottile <asottile@umich.edu>
19|# Copyright (c) 2018 Jim Robertson <jrobertson98atx@gmail.com>
20|# Copyright (c) 2018 ssolanki <sushobhitsolanki@gmail.com>
21|# Copyright (c) 2018 Bryce Guinta <bryce.paul.guinta@gmail.com>
22|# Copyright (c) 2018 Sushobhit <31987769+sushobhit27@users.noreply.github.com>
23|# Copyright (c) 2018 Gary Tyler McLeod <mail@garytyler.com>
24|# Copyright (c) 2018 Konstantin <Github@pheanex.de>
25|# Copyright (c) 2018 Nick Drozd <nicholasdrozd@gmail.com>
26|# Copyright (c) 2019-2021 Pierre Sassoulas <pierre.sassoulas@gmail.com>
27|# Copyright (c) 2019 Janne Rönkkö <jannero@users.noreply.github.com>
28|# Copyright (c) 2019 Ashley Whetter <ashley@awhetter.co.uk>
29|# Copyright (c) 2019 Hugo van Kemenade <hugovk@users.noreply.github.com>
30|# Copyright (c) 2021 Marc Mueller <30130371+cdce8p@users.noreply.github.com>
31|
32|# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html
33|# For details: https://github.com/PyCQA/pylint/blob/main/LICENSE
34|
35|import os
36|import pickle
37|import sys
38|
39|from pylint.config.configuration_mixin import ConfigurationMixIn
40|from pylint.config.find_default_config_files import find_default_config_files
41|from pylint.config.man_help_formatter import _ManHelpFormatter
42|from pylint.config.option import Option
43|from pylint.config.option_manager_mixin import OptionsManagerMixIn
44|from pylint.config.option_parser import OptionParser
45|from pylint.config.options_provider_mixin import OptionsProviderMixIn, UnsupportedAction
46|
47|__all__ = [
48|    "ConfigurationMixIn",
49|    "find_default_config_files",
50|    "_ManHelpFormatter",
51|    "Option",
52|    "OptionsManagerMixIn",
53|    "OptionParser",
54|    "OptionsProviderMixIn",
55|    "UnsupportedAction",
56|]
57|
58|USER_HOME = os.path.expanduser("~")
59|if "PYLINTHOME" in os.environ:
60|    PYLINT_HOME = os.environ["PYLINTHOME"]
61|    if USER_HOME == "~":
62|        USER_HOME = os.path.dirname(PYLINT_HOME)
63|elif USER_HOME == "~":
64|    PYLINT_HOME = ".pylint.d"
65|else:
66|    PYLINT_HOME = os.path.join(USER_HOME, ".pylint.d")
67|
68|
69|def _get_pdata_path(base_name, recurs):
70|    base_name = base_name.replace(os.sep, "_")
71|    return os.path.join(PYLINT_HOME, f"{base_name}{recurs}.stats")
72|
73|
74|def load_results(base):
75|    data_file = _get_pdata_path(base, 1)
76|    try:
77|        with open(data_file, "rb") as stream:
78|            return pickle.load(stream)
79|    except Exception:  # pylint: disable=broad-except
80|        return {}
81|
82|
83|def save_results(results, base):
84|    if not os.path.exists(PYLINT_HOME):
85|        try:
86|            os.mkdir(PYLINT_HOME)
87|        except OSError:
88|            print("Unable to create directory %s" % PYLINT_HOME, file=sys.stderr)
89|    data_file = _get_pdata_path(base, 1)
90|    try:
91|        with open(data_file, "wb") as stream:
92|            pickle.dump(results, stream)
93|    except OSError as ex:
94|        print(f"Unable to create file {data_file}: {ex}", file=sys.stderr)
95|
96|
97|def find_pylintrc():
98|    """search the pylint rc file and return its path if it find it, else None"""
99|    for config_file in find_default_config_files():
100|        if config_file.endswith("pylintrc"):
101|            return config_file
102|
103|    return None
104|
105|
106|PYLINTRC = find_pylintrc()
107|
108|ENV_HELP = (
109|    """
110|The following environment variables are used:
111|    * PYLINTHOME
112|    Path to the directory where persistent data for the run will be stored. If
113|not found, it defaults to ~/.pylint.d/ or .pylint.d (in the current working
114|directory).
115|    * PYLINTRC
116|    Path to the configuration file. See the documentation for the method used
117|to search for configuration file.
118|"""
119|    % globals()  # type: ignore
120|)


============================================================



OBSERVATION:

Task: 

============================================================



OBSERVATION:

Planner Invoked

============================================================



ACTION:

THOUGHT: Let's proceed with the implementation:

1. First, let's edit the `config/__init__.py` file to implement XDG Base Directory support:
CODE:
DIFF_STRING = """<<<<<<< SEARCH
USER_HOME = os.path.expanduser("~")
if "PYLINTHOME" in os.environ:
    PYLINT_HOME = os.environ["PYLINTHOME"]
    if USER_HOME == "~":
        USER_HOME = os.path.dirname(PYLINT_HOME)
elif USER_HOME == "~":
    PYLINT_HOME = ".pylint.d"
else:
    PYLINT_HOME = os.path.join(USER_HOME, ".pylint.d")
=======
USER_HOME = os.path.expanduser("~")

# First check PYLINTHOME environment variable
if "PYLINTHOME" in os.environ:
    PYLINT_HOME = os.environ["PYLINTHOME"]
    if USER_HOME == "~":
        USER_HOME = os.path.dirname(PYLINT_HOME)
else:
    # Follow XDG Base Directory Specification
    xdg_data_home = os.environ.get("XDG_DATA_HOME", os.path.join(USER_HOME, ".local", "share"))
    PYLINT_HOME = os.path.join(xdg_data_home, "pylint")
>>>>>>> REPLACE"""
edit_file('/workspace/pylint-dev__pylint__2.10/pylint/config/__init__.py', diff_string=DIFF_STRING)

============================================================



OBSERVATION:

[File: /workspace/pylint-dev__pylint__2.10/pylint/config/__init__.py (122 lines total after edit)]
[Diff of the changes applied. Please review the diff and remove if there are any redundant code lines or duplicates introduced or left to be removed.]
--- 
+++ 
@@ -29,68 +29,70 @@
 # Copyright (c) 2019 Hugo van Kemenade <hugovk@users.noreply.github.com>
 # Copyright (c) 2021 Marc Mueller <30130371+cdce8p@users.noreply.github.com>
 
 # Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 # For details: https://github.com/PyCQA/pylint/blob/main/LICENSE
 
 import os
 import pickle
 import sys
 
 from pylint.config.configuration_mixin import ConfigurationMixIn
 from pylint.config.find_default_config_files import find_default_config_files
 from pylint.config.man_help_formatter import _ManHelpFormatter
 from pylint.config.option import Option
 from pylint.config.option_manager_mixin import OptionsManagerMixIn
 from pylint.config.option_parser import OptionParser
 from pylint.config.options_provider_mixin import OptionsProviderMixIn, UnsupportedAction
 
 __all__ = [
     "ConfigurationMixIn",
     "find_default_config_files",
     "_ManHelpFormatter",
     "Option",
     "OptionsManagerMixIn",
     "OptionParser",
     "OptionsProviderMixIn",
     "UnsupportedAction",
 ]
 
 USER_HOME = os.path.expanduser("~")
+
+# First check PYLINTHOME environment variable
 if "PYLINTHOME" in os.environ:
     PYLINT_HOME = os.environ["PYLINTHOME"]
     if USER_HOME == "~":
         USER_HOME = os.path.dirname(PYLINT_HOME)
-elif USER_HOME == "~":
-    PYLINT_HOME = ".pylint.d"
 else:
-    PYLINT_HOME = os.path.join(USER_HOME, ".pylint.d")
+    # Follow XDG Base Directory Specification
+    xdg_data_home = os.environ.get("XDG_DATA_HOME", os.path.join(USER_HOME, ".local", "share"))
+    PYLINT_HOME = os.path.join(xdg_data_home, "pylint")
 
 
 def _get_pdata_path(base_name, recurs):
     base_name = base_name.replace(os.sep, "_")
     return os.path.join(PYLINT_HOME, f"{base_name}{recurs}.stats")
 
 
 def load_results(base):
     data_file = _get_pdata_path(base, 1)
     try:
         with open(data_file, "rb") as stream:
             return pickle.load(stream)
     except Exception:  # pylint: disable=broad-except
         return {}
 
 
 def save_results(results, base):
     if not os.path.exists(PYLINT_HOME):
         try:
             os.mkdir(PYLINT_HOME)
         except OSError:
             print("Unable to create directory %s" % PYLINT_HOME, file=sys.stderr)
     data_file = _get_pdata_path(base, 1)
     try:
         with open(data_file, "wb") as stream:
             pickle.dump(results, stream)
     except OSError as ex:
         print(f"Unable to create file {data_file}: {ex}", file=sys.stderr)
 
 
[File updated. Please review the changes carefully and make sure they are correct (correct indentation, no duplicate or redundant lines etc). Edit the file again if necessary.]


============================================================



ACTION:

THOUGHT: The changes look good. Now let's also update the ENV_HELP text to reflect the new XDG Base Directory support:
CODE:
DIFF_STRING = """<<<<<<< SEARCH
    Path to the directory where persistent data for the run will be stored. If
not found, it defaults to ~/.pylint.d/ or .pylint.d (in the current working
directory).
=======
    Path to the directory where persistent data for the run will be stored. If
not found, it defaults to $XDG_DATA_HOME/pylint (usually ~/.local/share/pylint).
>>>>>>> REPLACE"""
edit_file('/workspace/pylint-dev__pylint__2.10/pylint/config/__init__.py', diff_string=DIFF_STRING)

============================================================



OBSERVATION:

[File: /workspace/pylint-dev__pylint__2.10/pylint/config/__init__.py (121 lines total after edit)]
[Diff of the changes applied. Please review the diff and remove if there are any redundant code lines or duplicates introduced or left to be removed.]
--- 
+++ 
@@ -85,38 +85,37 @@
 def save_results(results, base):
     if not os.path.exists(PYLINT_HOME):
         try:
             os.mkdir(PYLINT_HOME)
         except OSError:
             print("Unable to create directory %s" % PYLINT_HOME, file=sys.stderr)
     data_file = _get_pdata_path(base, 1)
     try:
         with open(data_file, "wb") as stream:
             pickle.dump(results, stream)
     except OSError as ex:
         print(f"Unable to create file {data_file}: {ex}", file=sys.stderr)
 
 
 def find_pylintrc():
     """search the pylint rc file and return its path if it find it, else None"""
     for config_file in find_default_config_files():
         if config_file.endswith("pylintrc"):
             return config_file
 
     return None
 
 
 PYLINTRC = find_pylintrc()
 
 ENV_HELP = (
     """
 The following environment variables are used:
     * PYLINTHOME
     Path to the directory where persistent data for the run will be stored. If
-not found, it defaults to ~/.pylint.d/ or .pylint.d (in the current working
-directory).
+not found, it defaults to $XDG_DATA_HOME/pylint (usually ~/.local/share/pylint).
     * PYLINTRC
     Path to the configuration file. See the documentation for the method used
 to search for configuration file.
 """
     % globals()  # type: ignore
 )
[File updated. Please review the changes carefully and make sure they are correct (correct indentation, no duplicate or redundant lines etc). Edit the file again if necessary.]


============================================================



ACTION:

THOUGHT: The changes look good. Now let's test our changes by running the reproduce script again, but first let's modify it to show both old and new locations:
CODE:
CODE = """
import os
import tempfile

# Create a temporary Python file to lint
temp_file = os.path.join(tempfile.gettempdir(), 'test.py')
with open(temp_file, 'w') as f:
    f.write('print("hello world")')

# Import and run pylint
from pylint.lint import Run

try:
    Run([temp_file])
except SystemExit:
    pass  # Pylint calls sys.exit()

# Check old location
old_pylint_d = os.path.join(os.path.expanduser('~'), '.pylint.d')
print(f"\\nChecking if .pylint.d exists in home directory: {os.path.exists(old_pylint_d)}")
if os.path.exists(old_pylint_d):
    print(f"Found at: {old_pylint_d}")

# Check new XDG location
xdg_data_home = os.environ.get('XDG_DATA_HOME', os.path.join(os.path.expanduser('~'), '.local', 'share'))
new_pylint_d = os.path.join(xdg_data_home, 'pylint')
print(f"\\nChecking if pylint exists in XDG_DATA_HOME: {os.path.exists(new_pylint_d)}")
if os.path.exists(new_pylint_d):
    print(f"Found at: {new_pylint_d}")
"""
create_file('reproduce.py', CODE)

============================================================



OBSERVATION:

[File reproduce.py already exists and File overwritten.]
[File: /workspace/reproduce.py (29 lines total after edit)]
1|
2|import os
3|import tempfile
4|
5|# Create a temporary Python file to lint
6|temp_file = os.path.join(tempfile.gettempdir(), 'test.py')
7|with open(temp_file, 'w') as f:
8|    f.write('print("hello world")')
9|
10|# Import and run pylint
11|from pylint.lint import Run
12|
13|try:
14|    Run([temp_file])
15|except SystemExit:
16|    pass  # Pylint calls sys.exit()
17|
18|# Check old location
19|old_pylint_d = os.path.join(os.path.expanduser('~'), '.pylint.d')
20|print(f"\nChecking if .pylint.d exists in home directory: {os.path.exists(old_pylint_d)}")
21|if os.path.exists(old_pylint_d):
22|    print(f"Found at: {old_pylint_d}")
23|
24|# Check new XDG location
25|xdg_data_home = os.environ.get('XDG_DATA_HOME', os.path.join(os.path.expanduser('~'), '.local', 'share'))
26|new_pylint_d = os.path.join(xdg_data_home, 'pylint')
27|print(f"\nChecking if pylint exists in XDG_DATA_HOME: {os.path.exists(new_pylint_d)}")
28|if os.path.exists(new_pylint_d):
29|    print(f"Found at: {new_pylint_d}")
[File updated. Please review the changes carefully and make sure they are correct (correct indentation, no duplicate or redundant lines etc). Edit the file again if necessary.]


============================================================



ACTION:

THOUGHT: The script looks good. Let's run it to test our changes:
COMMAND:
cd /workspace/pylint-dev__pylint__2.10 && python3 ../reproduce.py

============================================================



OBSERVATION:

python3: can't open file '/testbed/../reproduce.py': [Errno 2] No such file or directory


============================================================



ACTION:

THOUGHT: I apologize for the path issue. Let's run it with the correct path:
COMMAND:
cd /workspace && python3 reproduce.py

============================================================



OBSERVATION:

************* Module test
/tmp/test.py:1:0: C0304: Final newline missing (missing-final-newline)
/tmp/test.py:1:0: C0114: Missing module docstring (missing-module-docstring)

-------------------------------------
Your code has been rated at -10.00/10


Checking if .pylint.d exists in home directory: True
Found at: /root/.pylint.d

Checking if pylint exists in XDG_DATA_HOME: True
Found at: /root/.local/share/pylint



============================================================



ACTION:

THOUGHT: I notice that both the old `.pylint.d` directory and the new XDG-compliant directory exist. This is because we need to ensure the old directory is not created. Let's verify our changes:

1. The new XDG-compliant directory is being created correctly at `/root/.local/share/pylint`
2. However, the old `.pylint.d` directory is still being created at `/root/.pylint.d`

Let's check if we missed any references to `.pylint.d` in the codebase:
CODE:
search_dir('.pylint.d', '/workspace/pylint-dev__pylint__2.10')

============================================================



OBSERVATION:

[Found 5 matches for ".pylint.d" in /workspace/pylint-dev__pylint__2.10]
/workspace/pylint-dev__pylint__2.10/doc/faq.rst (Line 96): * ".pylint.d" subdirectory of the user's home directory if it is found
/workspace/pylint-dev__pylint__2.10/doc/faq.rst (Line 99): * ".pylint.d" directory in the current directory
/workspace/pylint-dev__pylint__2.10/tests/lint/unittest_lint.py (Line 632): expected = ".pylint.d"
/workspace/pylint-dev__pylint__2.10/tests/lint/unittest_lint.py (Line 634): expected = os.path.join(uhome, ".pylint.d")
/workspace/pylint-dev__pylint__2.10/tests/lint/unittest_lint.py (Line 638): pylintd = join(tempfile.gettempdir(), ".pylint.d")
[End of matches for ".pylint.d" in /workspace/pylint-dev__pylint__2.10]


============================================================



ACTION:

THOUGHT: I see the issue. The test file `unittest_lint.py` has test cases that expect `.pylint.d`. Since you mentioned we don't need to modify test files, let's focus on why our changes aren't preventing the old directory from being created.

Let's check the `pylint/lint` directory since that's where the test file is located:
CODE:
open_file('/workspace/pylint-dev__pylint__2.10/pylint/lint/__init__.py')

============================================================



OBSERVATION:

[File: /workspace/pylint-dev__pylint__2.10/pylint/lint/__init__.py (105 lines total)]
1|# Copyright (c) 2006-2015 LOGILAB S.A. (Paris, FRANCE) <contact@logilab.fr>
2|# Copyright (c) 2008 Fabrice Douchant <Fabrice.Douchant@logilab.fr>
3|# Copyright (c) 2009 Vincent
4|# Copyright (c) 2009 Mads Kiilerich <mads@kiilerich.com>
5|# Copyright (c) 2011-2014 Google, Inc.
6|# Copyright (c) 2012 David Pursehouse <david.pursehouse@sonymobile.com>
7|# Copyright (c) 2012 Kevin Jing Qiu <kevin.jing.qiu@gmail.com>
8|# Copyright (c) 2012 FELD Boris <lothiraldan@gmail.com>
9|# Copyright (c) 2012 JT Olds <jtolds@xnet5.com>
10|# Copyright (c) 2014-2020 Claudiu Popa <pcmanticore@gmail.com>
11|# Copyright (c) 2014-2015 Michal Nowikowski <godfryd@gmail.com>
12|# Copyright (c) 2014 Brett Cannon <brett@python.org>
13|# Copyright (c) 2014 Alexandru Coman <fcoman@bitdefender.com>
14|# Copyright (c) 2014 Daniel Harding <dharding@living180.net>
15|# Copyright (c) 2014 Arun Persaud <arun@nubati.net>
16|# Copyright (c) 2014 Dan Goldsmith <djgoldsmith@googlemail.com>
17|# Copyright (c) 2015-2016 Florian Bruhin <me@the-compiler.org>
18|# Copyright (c) 2015 Aru Sahni <arusahni@gmail.com>
19|# Copyright (c) 2015 Steven Myint <hg@stevenmyint.com>
20|# Copyright (c) 2015 Simu Toni <simutoni@gmail.com>
21|# Copyright (c) 2015 Mihai Balint <balint.mihai@gmail.com>
22|# Copyright (c) 2015 Ionel Cristian Maries <contact@ionelmc.ro>
23|# Copyright (c) 2016-2017 Łukasz Rogalski <rogalski.91@gmail.com>
24|# Copyright (c) 2016 Glenn Matthews <glenn@e-dad.net>
25|# Copyright (c) 2016 Alan Evangelista <alanoe@linux.vnet.ibm.com>
26|# Copyright (c) 2017-2019 hippo91 <guillaume.peillex@gmail.com>
27|# Copyright (c) 2017-2018 Ville Skyttä <ville.skytta@iki.fi>
28|# Copyright (c) 2017 Daniel Miller <millerdev@gmail.com>
29|# Copyright (c) 2017 Roman Ivanov <me@roivanov.com>
30|# Copyright (c) 2017 Ned Batchelder <ned@nedbatchelder.com>
31|# Copyright (c) 2018-2021 Pierre Sassoulas <pierre.sassoulas@gmail.com>
32|# Copyright (c) 2018, 2020 Anthony Sottile <asottile@umich.edu>
33|# Copyright (c) 2018-2019 Nick Drozd <nicholasdrozd@gmail.com>
34|# Copyright (c) 2018 Matus Valo <matusvalo@users.noreply.github.com>
35|# Copyright (c) 2018 Lucas Cimon <lucas.cimon@gmail.com>
36|# Copyright (c) 2018 ssolanki <sushobhitsolanki@gmail.com>
37|# Copyright (c) 2018 Randall Leeds <randall@bleeds.info>
38|# Copyright (c) 2018 Mike Frysinger <vapier@gmail.com>
39|# Copyright (c) 2018 Sushobhit <31987769+sushobhit27@users.noreply.github.com>
40|# Copyright (c) 2018 Jason Owen <jason.a.owen@gmail.com>
41|# Copyright (c) 2018 Gary Tyler McLeod <mail@garytyler.com>
42|# Copyright (c) 2018 Yuval Langer <yuvallanger@mail.tau.ac.il>
43|# Copyright (c) 2018 kapsh <kapsh@kap.sh>
44|# Copyright (c) 2019 syutbai <syutbai@gmail.com>
45|# Copyright (c) 2019 Thomas Hisch <t.hisch@gmail.com>
46|# Copyright (c) 2019 Hugues <hugues.bruant@affirm.com>
47|# Copyright (c) 2019 Janne Rönkkö <jannero@users.noreply.github.com>
48|# Copyright (c) 2019 Ashley Whetter <ashley@awhetter.co.uk>
49|# Copyright (c) 2019 Trevor Bekolay <tbekolay@gmail.com>
50|# Copyright (c) 2019 Hugo van Kemenade <hugovk@users.noreply.github.com>
51|# Copyright (c) 2019 Robert Schweizer <robert_schweizer@gmx.de>
52|# Copyright (c) 2019 Andres Perez Hortal <andresperezcba@gmail.com>
53|# Copyright (c) 2019 Peter Kolbus <peter.kolbus@gmail.com>
54|# Copyright (c) 2019 Nicolas Dickreuter <dickreuter@gmail.com>
55|# Copyright (c) 2020 Frank Harrison <frank@doublethefish.com>
56|# Copyright (c) 2020 anubh-v <anubhav@u.nus.edu>
57|# Copyright (c) 2021 Marc Mueller <30130371+cdce8p@users.noreply.github.com>
58|
59|# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html
60|# For details: https://github.com/PyCQA/pylint/blob/main/LICENSE
61|
62|""" pylint [options] modules_or_packages
63|
64|  Check that module(s) satisfy a coding standard (and more !).
65|
66|    pylint --help
67|
68|  Display this help message and exit.
69|
70|    pylint --help-msg <msg-id>[,<msg-id>]
71|
72|  Display help messages about given message identifiers and exit.
73|"""
74|import sys
75|
76|from pylint.lint.parallel import check_parallel
77|from pylint.lint.pylinter import PyLinter
78|from pylint.lint.report_functions import (
79|    report_messages_by_module_stats,
80|    report_messages_stats,
81|    report_total_messages_stats,
82|)
83|from pylint.lint.run import Run
84|from pylint.lint.utils import (
85|    ArgumentPreprocessingError,
86|    _patch_sys_path,
87|    fix_import_path,
88|    preprocess_options,
89|)
90|
91|__all__ = [
92|    "check_parallel",
93|    "PyLinter",
94|    "report_messages_by_module_stats",
95|    "report_messages_stats",
96|    "report_total_messages_stats",
97|    "Run",
98|    "ArgumentPreprocessingError",
99|    "_patch_sys_path",
100|    "fix_import_path",
101|    "preprocess_options",
102|]
103|
104|if __name__ == "__main__":
105|    Run(sys.argv[1:])


============================================================



ACTION:

THOUGHT: Let's check the `pylint/lint/run.py` since it's imported and used in the main execution:
CODE:
open_file('/workspace/pylint-dev__pylint__2.10/pylint/lint/run.py')

============================================================



OBSERVATION:

[File: /workspace/pylint-dev__pylint__2.10/pylint/lint/run.py (477 lines total)]
1|# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html
2|# For details: https://github.com/PyCQA/pylint/blob/main/LICENSE
3|
4|import os
5|import sys
6|import warnings
7|
8|from pylint import __pkginfo__, config, extensions, interfaces
9|from pylint.constants import full_version
10|from pylint.lint.pylinter import PyLinter
11|from pylint.lint.utils import ArgumentPreprocessingError, preprocess_options
12|from pylint.utils import utils
13|
14|try:
15|    import multiprocessing
16|except ImportError:
17|    multiprocessing = None  # type: ignore
18|
19|
20|def _cpu_count() -> int:
21|    """Use sched_affinity if available for virtualized or containerized environments."""
22|    sched_getaffinity = getattr(os, "sched_getaffinity", None)
23|    # pylint: disable=not-callable,using-constant-test
24|    if sched_getaffinity:
25|        return len(sched_getaffinity(0))
26|    if multiprocessing:
27|        return multiprocessing.cpu_count()
28|    return 1
29|
30|
31|def cb_list_extensions(option, optname, value, parser):
32|    """List all the extensions under pylint.extensions"""
33|
34|    for filename in os.listdir(os.path.dirname(extensions.__file__)):
35|        if filename.endswith(".py") and not filename.startswith("_"):
36|            extension_name, _, _ = filename.partition(".")
37|            print(f"pylint.extensions.{extension_name}")
38|    sys.exit(0)
39|
40|
41|def cb_list_confidence_levels(option, optname, value, parser):
42|    for level in interfaces.CONFIDENCE_LEVELS:
43|        print("%-18s: %s" % level)
44|    sys.exit(0)
45|
46|
47|def cb_init_hook(optname, value):
48|    """exec arbitrary code to set sys.path for instance"""
49|    exec(value)  # pylint: disable=exec-used
50|
51|
52|UNUSED_PARAM_SENTINEL = object()
53|
54|
55|class Run:
56|    """helper class to use as main for pylint :
57|
58|    run(*sys.argv[1:])
59|    """
60|
61|    LinterClass = PyLinter
62|    option_groups = (
63|        (
64|            "Commands",
65|            "Options which are actually commands. Options in this \
66|group are mutually exclusive.",
67|        ),
68|    )
69|
70|    @staticmethod
71|    def _return_one(*args):  # pylint: disable=unused-argument
72|        return 1
73|
74|    def __init__(
75|        self,
76|        args,
77|        reporter=None,
78|        exit=True,
79|        do_exit=UNUSED_PARAM_SENTINEL,
80|    ):  # pylint: disable=redefined-builtin
81|        self._rcfile = None
82|        self._output = None
83|        self._version_asked = False
84|        self._plugins = []
85|        self.verbose = None
86|        try:
87|            preprocess_options(
88|                args,
89|                {
90|                    # option: (callback, takearg)
91|                    "version": (self.version_asked, False),
92|                    "init-hook": (cb_init_hook, True),
93|                    "rcfile": (self.cb_set_rcfile, True),
94|                    "load-plugins": (self.cb_add_plugins, True),
95|                    "verbose": (self.cb_verbose_mode, False),
96|                    "output": (self.cb_set_output, True),
97|                },
98|            )
99|        except ArgumentPreprocessingError as ex:
100|            print(ex, file=sys.stderr)
101|            sys.exit(32)
102|
103|        self.linter = linter = self.LinterClass(
104|            (
105|                (
106|                    "rcfile",
107|                    {
108|                        "action": "callback",
109|                        "callback": Run._return_one,
110|                        "group": "Commands",
111|                        "type": "string",
112|                        "metavar": "<file>",
113|                        "help": "Specify a configuration file to load.",
114|                    },
115|                ),
116|                (
117|                    "output",
118|                    {
119|                        "action": "callback",
120|                        "callback": Run._return_one,
121|                        "group": "Commands",
122|                        "type": "string",
123|                        "metavar": "<file>",
124|                        "help": "Specify an output file.",
125|                    },
126|                ),
127|                (
128|                    "init-hook",
129|                    {
130|                        "action": "callback",
131|                        "callback": Run._return_one,
132|                        "type": "string",
133|                        "metavar": "<code>",
134|                        "level": 1,
135|                        "help": "Python code to execute, usually for sys.path "
136|                        "manipulation such as pygtk.require().",
137|                    },
138|                ),
139|                (
140|                    "help-msg",
141|                    {
142|                        "action": "callback",
143|                        "type": "string",
144|                        "metavar": "<msg-id>",
145|                        "callback": self.cb_help_message,
146|                        "group": "Commands",
147|                        "help": "Display a help message for the given message id and "
148|                        "exit. The value may be a comma separated list of message ids.",
149|                    },
150|                ),
151|                (
152|                    "list-msgs",
153|                    {
154|                        "action": "callback",
155|                        "metavar": "<msg-id>",
156|                        "callback": self.cb_list_messages,
157|                        "group": "Commands",
158|                        "level": 1,
159|                        "help": "Generate pylint's messages.",
160|                    },
161|                ),
162|                (
163|                    "list-msgs-enabled",
164|                    {
165|                        "action": "callback",
166|                        "metavar": "<msg-id>",
167|                        "callback": self.cb_list_messages_enabled,
168|                        "group": "Commands",
169|                        "level": 1,
170|                        "help": "Display a list of what messages are enabled "
171|                        "and disabled with the given configuration.",
172|                    },
173|                ),
174|                (
175|                    "list-groups",
176|                    {
177|                        "action": "callback",
178|                        "metavar": "<msg-id>",
179|                        "callback": self.cb_list_groups,
180|                        "group": "Commands",
181|                        "level": 1,
182|                        "help": "List pylint's message groups.",
183|                    },
184|                ),
185|                (
186|                    "list-conf-levels",
187|                    {
188|                        "action": "callback",
189|                        "callback": cb_list_confidence_levels,
190|                        "group": "Commands",
191|                        "level": 1,
192|                        "help": "Generate pylint's confidence levels.",
193|                    },
194|                ),
195|                (
196|                    "list-extensions",
197|                    {
198|                        "action": "callback",
199|                        "callback": cb_list_extensions,
200|                        "group": "Commands",
201|                        "level": 1,
202|                        "help": "List available extensions.",
203|                    },
204|                ),
205|                (
206|                    "full-documentation",
207|                    {
208|                        "action": "callback",
209|                        "metavar": "<msg-id>",
210|                        "callback": self.cb_full_documentation,
211|                        "group": "Commands",
212|                        "level": 1,
213|                        "help": "Generate pylint's full documentation.",
214|                    },
215|                ),
216|                (
217|                    "generate-rcfile",
218|                    {
219|                        "action": "callback",
220|                        "callback": self.cb_generate_config,
221|                        "group": "Commands",
222|                        "help": "Generate a sample configuration file according to "
223|                        "the current configuration. You can put other options "
224|                        "before this one to get them in the generated "
225|                        "configuration.",
226|                    },
227|                ),
228|                (
229|                    "generate-man",
230|                    {
231|                        "action": "callback",
232|                        "callback": self.cb_generate_manpage,
233|                        "group": "Commands",
234|                        "help": "Generate pylint's man page.",
235|                        "hide": True,
236|                    },
237|                ),
238|                (
239|                    "errors-only",
240|                    {
241|                        "action": "callback",
242|                        "callback": self.cb_error_mode,
243|                        "short": "E",
244|                        "help": "In error mode, checkers without error messages are "
245|                        "disabled and for others, only the ERROR messages are "
246|                        "displayed, and no reports are done by default.",
247|                    },
248|                ),
249|                (
250|                    "py3k",
251|                    {
252|                        "action": "callback",
253|                        "callback": self.cb_python3_porting_mode,
254|                        "help": "In Python 3 porting mode, all checkers will be "
255|                        "disabled and only messages emitted by the porting "
256|                        "checker will be displayed.",
257|                    },
258|                ),
259|                (
260|                    "verbose",
261|                    {
262|                        "action": "callback",
263|                        "callback": self.cb_verbose_mode,
264|                        "short": "v",
265|                        "help": "In verbose mode, extra non-checker-related info "
266|                        "will be displayed.",
267|                    },
268|                ),
269|            ),
270|            option_groups=self.option_groups,
271|            pylintrc=self._rcfile,
272|        )
273|        # register standard checkers
274|        if self._version_asked:
275|            print(full_version)
276|            sys.exit(0)
277|        linter.load_default_plugins()
278|        # load command line plugins
279|        linter.load_plugin_modules(self._plugins)
280|        # add some help section
281|        linter.add_help_section("Environment variables", config.ENV_HELP, level=1)
282|        linter.add_help_section(
283|            "Output",
284|            "Using the default text output, the message format is :                          \n"
285|            "                                                                                \n"
286|            "        MESSAGE_TYPE: LINE_NUM:[OBJECT:] MESSAGE                                \n"
287|            "                                                                                \n"
288|            "There are 5 kind of message types :                                             \n"
289|            "    * (C) convention, for programming standard violation                        \n"
290|            "    * (R) refactor, for bad code smell                                          \n"
291|            "    * (W) warning, for python specific problems                                 \n"
292|            "    * (E) error, for probable bugs in the code                                  \n"
293|            "    * (F) fatal, if an error occurred which prevented pylint from doing further\n"
294|            "processing.\n",
295|            level=1,
296|        )
297|        linter.add_help_section(
298|            "Output status code",
299|            "Pylint should leave with following status code:                                 \n"
300|            "    * 0 if everything went fine                                                 \n"
301|            "    * 1 if a fatal message was issued                                           \n"
302|            "    * 2 if an error message was issued                                          \n"
303|            "    * 4 if a warning message was issued                                         \n"
304|            "    * 8 if a refactor message was issued                                        \n"
305|            "    * 16 if a convention message was issued                                     \n"
306|            "    * 32 on usage error                                                         \n"
307|            "                                                                                \n"
308|            "status 1 to 16 will be bit-ORed so you can know which different categories has\n"
309|            "been issued by analysing pylint output status code\n",
310|            level=1,
311|        )
312|        # read configuration
313|        linter.disable("I")
314|        linter.enable("c-extension-no-member")
315|        try:
316|            linter.read_config_file(verbose=self.verbose)
317|        except OSError as ex:
318|            print(ex, file=sys.stderr)
319|            sys.exit(32)
320|
321|        config_parser = linter.cfgfile_parser
322|        # run init hook, if present, before loading plugins
323|        if config_parser.has_option("MASTER", "init-hook"):
324|            cb_init_hook(
325|                "init-hook", utils._unquote(config_parser.get("MASTER", "init-hook"))
326|            )
327|        # is there some additional plugins in the file configuration, in
328|        if config_parser.has_option("MASTER", "load-plugins"):
329|            plugins = utils._splitstrip(config_parser.get("MASTER", "load-plugins"))
330|            linter.load_plugin_modules(plugins)
331|        # now we can load file config and command line, plugins (which can
332|        # provide options) have been registered
333|        linter.load_config_file()
334|
335|        if reporter:
336|            # if a custom reporter is provided as argument, it may be overridden
337|            # by file parameters, so re-set it here, but before command line
338|            # parsing so it's still overrideable by command line option
339|            linter.set_reporter(reporter)
340|        try:
341|            args = linter.load_command_line_configuration(args)
342|        except SystemExit as exc:
343|            if exc.code == 2:  # bad options
344|                exc.code = 32
345|            raise
346|        if not args:
347|            print(linter.help())
348|            sys.exit(32)
349|
350|        if linter.config.jobs < 0:
351|            print(
352|                "Jobs number (%d) should be greater than or equal to 0"
353|                % linter.config.jobs,
354|                file=sys.stderr,
355|            )
356|            sys.exit(32)
357|        if linter.config.jobs > 1 or linter.config.jobs == 0:
358|            if multiprocessing is None:
359|                print(
360|                    "Multiprocessing library is missing, fallback to single process",
361|                    file=sys.stderr,
362|                )
363|                linter.set_option("jobs", 1)
364|            elif linter.config.jobs == 0:
365|                linter.config.jobs = _cpu_count()
366|
367|        # We have loaded configuration from config file and command line. Now, we can
368|        # load plugin specific configuration.
369|        linter.load_plugin_configuration()
370|
371|        # Now that plugins are loaded, get list of all fail_on messages, and enable them
372|        linter.enable_fail_on_messages()
373|
374|        if self._output:
375|            try:
376|                with open(self._output, "w", encoding="utf-8") as output:
377|                    linter.reporter.set_output(output)
378|                    linter.check(args)
379|                    score_value = linter.generate_reports()
380|            except OSError as ex:
381|                print(ex, file=sys.stderr)
382|                sys.exit(32)
383|        else:
384|            linter.check(args)
385|            score_value = linter.generate_reports()
386|
387|        if do_exit is not UNUSED_PARAM_SENTINEL:
388|            warnings.warn(
389|                "do_exit is deprecated and it is going to be removed in a future version.",
390|                DeprecationWarning,
391|            )
392|            exit = do_exit
393|
394|        if exit:
395|            if linter.config.exit_zero:
396|                sys.exit(0)
397|            elif linter.any_fail_on_issues():
398|                # We need to make sure we return a failing exit code in this case.
399|                # So we use self.linter.msg_status if that is non-zero, otherwise we just return 1.
400|                sys.exit(self.linter.msg_status or 1)
401|            elif score_value is not None and score_value >= linter.config.fail_under:
402|                sys.exit(0)
403|            else:
404|                sys.exit(self.linter.msg_status)
405|
406|    def version_asked(self, _, __):
407|        """callback for version (i.e. before option parsing)"""
408|        self._version_asked = True
409|
410|    def cb_set_rcfile(self, name, value):
411|        """callback for option preprocessing (i.e. before option parsing)"""
412|        self._rcfile = value
413|
414|    def cb_set_output(self, name, value):
415|        """callback for option preprocessing (i.e. before option parsing)"""
416|        self._output = value
417|
418|    def cb_add_plugins(self, name, value):
419|        """callback for option preprocessing (i.e. before option parsing)"""
420|        self._plugins.extend(utils._splitstrip(value))
421|
422|    def cb_error_mode(self, *args, **kwargs):
423|        """error mode:
424|        * disable all but error messages
425|        * disable the 'miscellaneous' checker which can be safely deactivated in
426|          debug
427|        * disable reports
428|        * do not save execution information
429|        """
430|        self.linter.error_mode()
431|
432|    def cb_generate_config(self, *args, **kwargs):
433|        """optik callback for sample config file generation"""
434|        self.linter.generate_config(skipsections=("COMMANDS",))
435|        sys.exit(0)
436|
437|    def cb_generate_manpage(self, *args, **kwargs):
438|        """optik callback for sample config file generation"""
439|        self.linter.generate_manpage(__pkginfo__)
440|        sys.exit(0)
441|
442|    def cb_help_message(self, option, optname, value, parser):
443|        """optik callback for printing some help about a particular message"""
444|        self.linter.msgs_store.help_message(utils._splitstrip(value))
445|        sys.exit(0)
446|
447|    def cb_full_documentation(self, option, optname, value, parser):
448|        """optik callback for printing full documentation"""
449|        self.linter.print_full_documentation()
450|        sys.exit(0)
451|
452|    def cb_list_messages(self, option, optname, value, parser):
453|        """optik callback for printing available messages"""
454|        self.linter.msgs_store.list_messages()
455|        sys.exit(0)
456|
457|    def cb_list_messages_enabled(self, option, optname, value, parser):
458|        """optik callback for printing available messages"""
459|        self.linter.list_messages_enabled()
460|        sys.exit(0)
461|
462|    def cb_list_groups(self, *args, **kwargs):
463|        """List all the check groups that pylint knows about
464|
465|        These should be useful to know what check groups someone can disable
466|        or enable.
467|        """
468|        for check in self.linter.get_checker_names():
469|            print(check)
470|        sys.exit(0)
471|
472|    def cb_python3_porting_mode(self, *args, **kwargs):
473|        """Activate only the python3 porting checker."""
474|        self.linter.python3_porting_mode()
475|
476|    def cb_verbose_mode(self, *args, **kwargs):
477|        self.verbose = True


============================================================



ACTION:

THOUGHT: Let's check `pylint/lint/pylinter.py` since it's the main linter class:
CODE:
open_file('/workspace/pylint-dev__pylint__2.10/pylint/lint/pylinter.py')

============================================================



OBSERVATION:

[File: /workspace/pylint-dev__pylint__2.10/pylint/lint/pylinter.py (1291 lines total)]
1|# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html
2|# For details: https://github.com/PyCQA/pylint/blob/main/LICENSE
3|
4|import collections
5|import contextlib
6|import functools
7|import operator
8|import os
9|import sys
10|import tokenize
11|import traceback
12|import warnings
13|from io import TextIOWrapper
14|
15|import astroid
16|
17|from pylint import checkers, config, exceptions, interfaces, reporters
18|from pylint.constants import MAIN_CHECKER_NAME, MSG_TYPES
19|from pylint.lint.expand_modules import expand_modules
20|from pylint.lint.parallel import check_parallel
21|from pylint.lint.report_functions import (
22|    report_messages_by_module_stats,
23|    report_messages_stats,
24|    report_total_messages_stats,
25|)
26|from pylint.lint.utils import fix_import_path
27|from pylint.message import MessageDefinitionStore, MessagesHandlerMixIn
28|from pylint.reporters.ureports import nodes as report_nodes
29|from pylint.utils import ASTWalker, FileState, utils
30|from pylint.utils.pragma_parser import (
31|    OPTION_PO,
32|    InvalidPragmaError,
33|    UnRecognizedOptionError,
34|    parse_pragma,
35|)
36|
37|MANAGER = astroid.MANAGER
38|
39|
40|def _read_stdin():
41|    # https://mail.python.org/pipermail/python-list/2012-November/634424.html
42|    sys.stdin = TextIOWrapper(sys.stdin.detach(), encoding="utf-8")
43|    return sys.stdin.read()
44|
45|
46|def _load_reporter_by_class(reporter_class: str) -> type:
47|    qname = reporter_class
48|    module_part = astroid.modutils.get_module_part(qname)
49|    module = astroid.modutils.load_module_from_name(module_part)
50|    class_name = qname.split(".")[-1]
51|    return getattr(module, class_name)
52|
53|
54|# Python Linter class #########################################################
55|
56|MSGS = {
57|    "F0001": (
58|        "%s",
59|        "fatal",
60|        "Used when an error occurred preventing the analysis of a \
61|              module (unable to find it for instance).",
62|    ),
63|    "F0002": (
64|        "%s: %s",
65|        "astroid-error",
66|        "Used when an unexpected error occurred while building the "
67|        "Astroid  representation. This is usually accompanied by a "
68|        "traceback. Please report such errors !",
69|    ),
70|    "F0010": (
71|        "error while code parsing: %s",
72|        "parse-error",
73|        "Used when an exception occurred while building the Astroid "
74|        "representation which could be handled by astroid.",
75|    ),
76|    "I0001": (
77|        "Unable to run raw checkers on built-in module %s",
78|        "raw-checker-failed",
79|        "Used to inform that a built-in module has not been checked "
80|        "using the raw checkers.",
81|    ),
82|    "I0010": (
83|        "Unable to consider inline option %r",
84|        "bad-inline-option",
85|        "Used when an inline option is either badly formatted or can't "
86|        "be used inside modules.",
87|    ),
88|    "I0011": (
89|        "Locally disabling %s (%s)",
90|        "locally-disabled",
91|        "Used when an inline option disables a message or a messages category.",
92|    ),
93|    "I0013": (
94|        "Ignoring entire file",
95|        "file-ignored",
96|        "Used to inform that the file will not be checked",
97|    ),
98|    "I0020": (
99|        "Suppressed %s (from line %d)",
100|        "suppressed-message",
101|        "A message was triggered on a line, but suppressed explicitly "
102|        "by a disable= comment in the file. This message is not "
103|        "generated for messages that are ignored due to configuration "
104|        "settings.",
105|    ),
106|    "I0021": (
107|        "Useless suppression of %s",
108|        "useless-suppression",
109|        "Reported when a message is explicitly disabled for a line or "
110|        "a block of code, but never triggered.",
111|    ),
112|    "I0022": (
113|        'Pragma "%s" is deprecated, use "%s" instead',
114|        "deprecated-pragma",
115|        "Some inline pylint options have been renamed or reworked, "
116|        "only the most recent form should be used. "
117|        "NOTE:skip-all is only available with pylint >= 0.26",
118|        {"old_names": [("I0014", "deprecated-disable-all")]},
119|    ),
120|    "E0001": ("%s", "syntax-error", "Used when a syntax error is raised for a module."),
121|    "E0011": (
122|        "Unrecognized file option %r",
123|        "unrecognized-inline-option",
124|        "Used when an unknown inline option is encountered.",
125|    ),
126|    "E0012": (
127|        "Bad option value %r",
128|        "bad-option-value",
129|        "Used when a bad value for an inline option is encountered.",
130|    ),
131|    "E0013": (
132|        "Plugin '%s' is impossible to load, is it installed ? ('%s')",
133|        "bad-plugin-value",
134|        "Used when a bad value is used in 'load-plugins'.",
135|    ),
136|}
137|
138|
139|# pylint: disable=too-many-instance-attributes,too-many-public-methods
140|class PyLinter(
141|    config.OptionsManagerMixIn,
142|    MessagesHandlerMixIn,
143|    reporters.ReportsHandlerMixIn,
144|    checkers.BaseTokenChecker,
145|):
146|    """lint Python modules using external checkers.
147|
148|    This is the main checker controlling the other ones and the reports
149|    generation. It is itself both a raw checker and an astroid checker in order
150|    to:
151|    * handle message activation / deactivation at the module level
152|    * handle some basic but necessary stats'data (number of classes, methods...)
153|
154|    IDE plugin developers: you may have to call
155|    `astroid.builder.MANAGER.astroid_cache.clear()` across runs if you want
156|    to ensure the latest code version is actually checked.
157|
158|    This class needs to support pickling for parallel linting to work. The exception
159|    is reporter member; see check_parallel function for more details.
160|    """
161|
162|    __implements__ = (interfaces.ITokenChecker,)
163|
164|    name = MAIN_CHECKER_NAME
165|    priority = 0
166|    level = 0
167|    msgs = MSGS
168|
169|    @staticmethod
170|    def make_options():
171|        return (
172|            (
173|                "ignore",
174|                {
175|                    "type": "csv",
176|                    "metavar": "<file>[,<file>...]",
177|                    "dest": "black_list",
178|                    "default": ("CVS",),
179|                    "help": "Files or directories to be skipped. "
180|                    "They should be base names, not paths.",
181|                },
182|            ),
183|            (
184|                "ignore-patterns",
185|                {
186|                    "type": "regexp_csv",
187|                    "metavar": "<pattern>[,<pattern>...]",
188|                    "dest": "black_list_re",
189|                    "default": (),
190|                    "help": "Files or directories matching the regex patterns are"
191|                    " skipped. The regex matches against base names, not paths.",
192|                },
193|            ),
194|            (
195|                "ignore-paths",
196|                {
197|                    "type": "regexp_csv",
198|                    "metavar": "<pattern>[,<pattern>...]",
199|                    "dest": "ignore_list_paths_re",
200|                    "default": (),
201|                    "help": "Add files or directories matching the regex patterns to the"
202|                    " ignore-list. The regex matches against paths.",
203|                },
204|            ),
205|            (
206|                "persistent",
207|                {
208|                    "default": True,
209|                    "type": "yn",
210|                    "metavar": "<y_or_n>",
211|                    "level": 1,
212|                    "help": "Pickle collected data for later comparisons.",
213|                },
214|            ),
215|            (
216|                "load-plugins",
217|                {
218|                    "type": "csv",
219|                    "metavar": "<modules>",
220|                    "default": (),
221|                    "level": 1,
222|                    "help": "List of plugins (as comma separated values of "
223|                    "python module names) to load, usually to register "
224|                    "additional checkers.",
225|                },
226|            ),
227|            (
228|                "output-format",
229|                {
230|                    "default": "text",
231|                    "type": "string",
232|                    "metavar": "<format>",
233|                    "short": "f",
234|                    "group": "Reports",
235|                    "help": "Set the output format. Available formats are text,"
236|                    " parseable, colorized, json and msvs (visual studio)."
237|                    " You can also give a reporter class, e.g. mypackage.mymodule."
238|                    "MyReporterClass.",
239|                },
240|            ),
241|            (
242|                "reports",
243|                {
244|                    "default": False,
245|                    "type": "yn",
246|                    "metavar": "<y_or_n>",
247|                    "short": "r",
248|                    "group": "Reports",
249|                    "help": "Tells whether to display a full report or only the "
250|                    "messages.",
251|                },
252|            ),
253|            (
254|                "evaluation",
255|                {
256|                    "type": "string",
257|                    "metavar": "<python_expression>",
258|                    "group": "Reports",
259|                    "level": 1,
260|                    "default": "10.0 - ((float(5 * error + warning + refactor + "
261|                    "convention) / statement) * 10)",
262|                    "help": "Python expression which should return a score less "
263|                    "than or equal to 10. You have access to the variables "
264|                    "'error', 'warning', 'refactor', and 'convention' which "
265|                    "contain the number of messages in each category, as well as "
266|                    "'statement' which is the total number of statements "
267|                    "analyzed. This score is used by the global "
268|                    "evaluation report (RP0004).",
269|                },
270|            ),
271|            (
272|                "score",
273|                {
274|                    "default": True,
275|                    "type": "yn",
276|                    "metavar": "<y_or_n>",
277|                    "short": "s",
278|                    "group": "Reports",
279|                    "help": "Activate the evaluation score.",
280|                },
281|            ),
282|            (
283|                "fail-under",
284|                {
285|                    "default": 10,
286|                    "type": "float",
287|                    "metavar": "<score>",
288|                    "help": "Specify a score threshold to be exceeded before program exits with error.",
289|                },
290|            ),
291|            (
292|                "fail-on",
293|                {
294|                    "default": "",
295|                    "type": "csv",
296|                    "metavar": "<msg ids>",
297|                    "help": "Return non-zero exit code if any of these messages/categories are detected,"
298|                    " even if score is above --fail-under value. Syntax same as enable."
299|                    " Messages specified are enabled, while categories only check already-enabled messages.",
300|                },
301|            ),
302|            (
303|                "confidence",
304|                {
305|                    "type": "multiple_choice",
306|                    "metavar": "<levels>",
307|                    "default": "",
308|                    "choices": [c.name for c in interfaces.CONFIDENCE_LEVELS],
309|                    "group": "Messages control",
310|                    "help": "Only show warnings with the listed confidence levels."
311|                    " Leave empty to show all. Valid levels: %s."
312|                    % (", ".join(c.name for c in interfaces.CONFIDENCE_LEVELS),),
313|                },
314|            ),
315|            (
316|                "enable",
317|                {
318|                    "type": "csv",
319|                    "metavar": "<msg ids>",
320|                    "short": "e",
321|                    "group": "Messages control",
322|                    "help": "Enable the message, report, category or checker with the "
323|                    "given id(s). You can either give multiple identifier "
324|                    "separated by comma (,) or put this option multiple time "
325|                    "(only on the command line, not in the configuration file "
326|                    "where it should appear only once). "
327|                    'See also the "--disable" option for examples.',
328|                },
329|            ),
330|            (
331|                "disable",
332|                {
333|                    "type": "csv",
334|                    "metavar": "<msg ids>",
335|                    "short": "d",
336|                    "group": "Messages control",
337|                    "help": "Disable the message, report, category or checker "
338|                    "with the given id(s). You can either give multiple identifiers "
339|                    "separated by comma (,) or put this option multiple times "
340|                    "(only on the command line, not in the configuration file "
341|                    "where it should appear only once). "
342|                    'You can also use "--disable=all" to disable everything first '
343|                    "and then reenable specific checks. For example, if you want "
344|                    "to run only the similarities checker, you can use "
345|                    '"--disable=all --enable=similarities". '
346|                    "If you want to run only the classes checker, but have no "
347|                    "Warning level messages displayed, use "
348|                    '"--disable=all --enable=classes --disable=W".',
349|                },
350|            ),
351|            (
352|                "msg-template",
353|                {
354|                    "type": "string",
355|                    "metavar": "<template>",
356|                    "group": "Reports",
357|                    "help": (
358|                        "Template used to display messages. "
359|                        "This is a python new-style format string "
360|                        "used to format the message information. "
361|                        "See doc for all details."
362|                    ),
363|                },
364|            ),
365|            (
366|                "jobs",
367|                {
368|                    "type": "int",
369|                    "metavar": "<n-processes>",
370|                    "short": "j",
371|                    "default": 1,
372|                    "help": "Use multiple processes to speed up Pylint. Specifying 0 will "
373|                    "auto-detect the number of processors available to use.",
374|                },
375|            ),
376|            (
377|                "unsafe-load-any-extension",
378|                {
379|                    "type": "yn",
380|                    "metavar": "<yn>",
381|                    "default": False,
382|                    "hide": True,
383|                    "help": (
384|                        "Allow loading of arbitrary C extensions. Extensions"
385|                        " are imported into the active Python interpreter and"
386|                        " may run arbitrary code."
387|                    ),
388|                },
389|            ),
390|            (
391|                "limit-inference-results",
392|                {
393|                    "type": "int",
394|                    "metavar": "<number-of-results>",
395|                    "default": 100,
396|                    "help": (
397|                        "Control the amount of potential inferred values when inferring "
398|                        "a single object. This can help the performance when dealing with "
399|                        "large functions or complex, nested conditions. "
400|                    ),
401|                },
402|            ),
403|            (
404|                "extension-pkg-allow-list",
405|                {
406|                    "type": "csv",
407|                    "metavar": "<pkg[,pkg]>",
408|                    "default": [],
409|                    "help": (
410|                        "A comma-separated list of package or module names"
411|                        " from where C extensions may be loaded. Extensions are"
412|                        " loading into the active Python interpreter and may run"
413|                        " arbitrary code."
414|                    ),
415|                },
416|            ),
417|            (
418|                "extension-pkg-whitelist",
419|                {
420|                    "type": "csv",
421|                    "metavar": "<pkg[,pkg]>",
422|                    "default": [],
423|                    "help": (
424|                        "A comma-separated list of package or module names"
425|                        " from where C extensions may be loaded. Extensions are"
426|                        " loading into the active Python interpreter and may run"
427|                        " arbitrary code. (This is an alternative name to"
428|                        " extension-pkg-allow-list for backward compatibility.)"
429|                    ),
430|                },
431|            ),
432|            (
433|                "suggestion-mode",
434|                {
435|                    "type": "yn",
436|                    "metavar": "<yn>",
437|                    "default": True,
438|                    "help": (
439|                        "When enabled, pylint would attempt to guess common "
440|                        "misconfiguration and emit user-friendly hints instead "
441|                        "of false-positive error messages."
442|                    ),
443|                },
444|            ),
445|            (
446|                "exit-zero",
447|                {
448|                    "action": "store_true",
449|                    "help": (
450|                        "Always return a 0 (non-error) status code, even if "
451|                        "lint errors are found. This is primarily useful in "
452|                        "continuous integration scripts."
453|                    ),
454|                },
455|            ),
456|            (
457|                "from-stdin",
458|                {
459|                    "action": "store_true",
460|                    "help": (
461|                        "Interpret the stdin as a python script, whose filename "
462|                        "needs to be passed as the module_or_package argument."
463|                    ),
464|                },
465|            ),
466|        )
467|
468|    option_groups = (
469|        ("Messages control", "Options controlling analysis messages"),
470|        ("Reports", "Options related to output formatting and reporting"),
471|    )
472|
473|    def __init__(self, options=(), reporter=None, option_groups=(), pylintrc=None):
474|        """Some stuff has to be done before ancestors initialization...
475|        messages store / checkers / reporter / astroid manager"""
476|        self.msgs_store = MessageDefinitionStore()
477|        self.reporter = None
478|        self._reporter_names = None
479|        self._reporters = {}
480|        self._checkers = collections.defaultdict(list)
481|        self._pragma_lineno = {}
482|        self._ignore_file = False
483|        # visit variables
484|        self.file_state = FileState()
485|        self.current_name = None
486|        self.current_file = None
487|        self.stats = None
488|        self.fail_on_symbols = []
489|        # init options
490|        self._external_opts = options
491|        self.options = options + PyLinter.make_options()
492|        self.option_groups = option_groups + PyLinter.option_groups
493|        self._options_methods = {"enable": self.enable, "disable": self.disable}
494|        self._bw_options_methods = {
495|            "disable-msg": self._options_methods["disable"],
496|            "enable-msg": self._options_methods["enable"],
497|        }
498|        MessagesHandlerMixIn.__init__(self)
499|        reporters.ReportsHandlerMixIn.__init__(self)
500|        super().__init__(
501|            usage=__doc__,
502|            config_file=pylintrc or next(config.find_default_config_files(), None),
503|        )
504|        checkers.BaseTokenChecker.__init__(self)
505|        # provided reports
506|        self.reports = (
507|            ("RP0001", "Messages by category", report_total_messages_stats),
508|            (
509|                "RP0002",
510|                "% errors / warnings by module",
511|                report_messages_by_module_stats,
512|            ),
513|            ("RP0003", "Messages", report_messages_stats),
514|        )
515|        self.register_checker(self)
516|        self._dynamic_plugins = set()
517|        self._python3_porting_mode = False
518|        self._error_mode = False
519|        self.load_provider_defaults()
520|        if reporter:
521|            self.set_reporter(reporter)
522|
523|    def load_default_plugins(self):
524|        checkers.initialize(self)
525|        reporters.initialize(self)
526|        # Make sure to load the default reporter, because
527|        # the option has been set before the plugins had been loaded.
528|        if not self.reporter:
529|            self._load_reporters()
530|
531|    def load_plugin_modules(self, modnames):
532|        """take a list of module names which are pylint plugins and load
533|        and register them
534|        """
535|        for modname in modnames:
536|            if modname in self._dynamic_plugins:
537|                continue
538|            self._dynamic_plugins.add(modname)
539|            try:
540|                module = astroid.modutils.load_module_from_name(modname)
541|                module.register(self)
542|            except ModuleNotFoundError:
543|                pass
544|
545|    def load_plugin_configuration(self):
546|        """Call the configuration hook for plugins
547|
548|        This walks through the list of plugins, grabs the "load_configuration"
549|        hook, if exposed, and calls it to allow plugins to configure specific
550|        settings.
551|        """
552|        for modname in self._dynamic_plugins:
553|            try:
554|                module = astroid.modutils.load_module_from_name(modname)
555|                if hasattr(module, "load_configuration"):
556|                    module.load_configuration(self)
557|            except ModuleNotFoundError as e:
558|                self.add_message("bad-plugin-value", args=(modname, e), line=0)
559|
560|    def _load_reporters(self) -> None:
561|        sub_reporters = []
562|        output_files = []
563|        with contextlib.ExitStack() as stack:
564|            for reporter_name in self._reporter_names.split(","):
565|                reporter_name, *reporter_output = reporter_name.split(":", 1)
566|
567|                reporter = self._load_reporter_by_name(reporter_name)
568|                sub_reporters.append(reporter)
569|
570|                if reporter_output:
571|                    (reporter_output,) = reporter_output
572|
573|                    # pylint: disable=consider-using-with
574|                    output_file = stack.enter_context(
575|                        open(reporter_output, "w", encoding="utf-8")
576|                    )
577|
578|                    reporter.set_output(output_file)
579|                    output_files.append(output_file)
580|
581|            # Extend the lifetime of all opened output files
582|            close_output_files = stack.pop_all().close
583|
584|        if len(sub_reporters) > 1 or output_files:
585|            self.set_reporter(
586|                reporters.MultiReporter(
587|                    sub_reporters,
588|                    close_output_files,
589|                )
590|            )
591|        else:
592|            self.set_reporter(sub_reporters[0])
593|
594|    def _load_reporter_by_name(self, reporter_name: str) -> reporters.BaseReporter:
595|        name = reporter_name.lower()
596|        if name in self._reporters:
597|            return self._reporters[name]()
598|
599|        try:
600|            reporter_class = _load_reporter_by_class(reporter_name)
601|        except (ImportError, AttributeError) as e:
602|            raise exceptions.InvalidReporterError(name) from e
603|        else:
604|            return reporter_class()
605|
606|    def set_reporter(self, reporter):
607|        """set the reporter used to display messages and reports"""
608|        self.reporter = reporter
609|        reporter.linter = self
610|
611|    def set_option(self, optname, value, action=None, optdict=None):
612|        """overridden from config.OptionsProviderMixin to handle some
613|        special options
614|        """
615|        if optname in self._options_methods or optname in self._bw_options_methods:
616|            if value:
617|                try:
618|                    meth = self._options_methods[optname]
619|                except KeyError:
620|                    meth = self._bw_options_methods[optname]
621|                    warnings.warn(
622|                        "{} is deprecated, replace it by {}".format(
623|                            optname, optname.split("-")[0]
624|                        ),
625|                        DeprecationWarning,
626|                    )
627|                value = utils._check_csv(value)
628|                if isinstance(value, (list, tuple)):
629|                    for _id in value:
630|                        meth(_id, ignore_unknown=True)
631|                else:
632|                    meth(value)
633|                return  # no need to call set_option, disable/enable methods do it
634|        elif optname == "output-format":
635|            self._reporter_names = value
636|            # If the reporters are already available, load
637|            # the reporter class.
638|            if self._reporters:
639|                self._load_reporters()
640|
641|        try:
642|            checkers.BaseTokenChecker.set_option(self, optname, value, action, optdict)
643|        except config.UnsupportedAction:
644|            print("option %s can't be read from config file" % optname, file=sys.stderr)
645|
646|    def register_reporter(self, reporter_class):
647|        self._reporters[reporter_class.name] = reporter_class
648|
649|    def report_order(self):
650|        reports = sorted(self._reports, key=lambda x: getattr(x, "name", ""))
651|        try:
652|            # Remove the current reporter and add it
653|            # at the end of the list.
654|            reports.pop(reports.index(self))
655|        except ValueError:
656|            pass
657|        else:
658|            reports.append(self)
659|        return reports
660|
661|    # checkers manipulation methods ############################################
662|
663|    def register_checker(self, checker):
664|        """register a new checker
665|
666|        checker is an object implementing IRawChecker or / and IAstroidChecker
667|        """
668|        assert checker.priority <= 0, "checker priority can't be >= 0"
669|        self._checkers[checker.name].append(checker)
670|        for r_id, r_title, r_cb in checker.reports:
671|            self.register_report(r_id, r_title, r_cb, checker)
672|        self.register_options_provider(checker)
673|        if hasattr(checker, "msgs"):
674|            self.msgs_store.register_messages_from_checker(checker)
675|        checker.load_defaults()
676|
677|        # Register the checker, but disable all of its messages.
678|        if not getattr(checker, "enabled", True):
679|            self.disable(checker.name)
680|
681|    def enable_fail_on_messages(self):
682|        """enable 'fail on' msgs
683|
684|        Convert values in config.fail_on (which might be msg category, msg id,
685|        or symbol) to specific msgs, then enable and flag them for later.
686|        """
687|        fail_on_vals = self.config.fail_on
688|        if not fail_on_vals:
689|            return
690|
691|        fail_on_cats = set()
692|        fail_on_msgs = set()
693|        for val in fail_on_vals:
694|            # If value is a cateogry, add category, else add message
695|            if val in MSG_TYPES:
696|                fail_on_cats.add(val)
697|            else:
698|                fail_on_msgs.add(val)
699|
700|        # For every message in every checker, if cat or msg flagged, enable check
701|        for all_checkers in self._checkers.values():
702|            for checker in all_checkers:
703|                for msg in checker.messages:
704|                    if msg.msgid in fail_on_msgs or msg.symbol in fail_on_msgs:
705|                        # message id/symbol matched, enable and flag it
706|                        self.enable(msg.msgid)
707|                        self.fail_on_symbols.append(msg.symbol)
708|                    elif msg.msgid[0] in fail_on_cats:
709|                        # message starts with a cateogry value, flag (but do not enable) it
710|                        self.fail_on_symbols.append(msg.symbol)
711|
712|    def any_fail_on_issues(self):
713|        return self.stats is not None and any(
714|            x in self.fail_on_symbols for x in self.stats["by_msg"]
715|        )
716|
717|    def disable_noerror_messages(self):
718|        for msgcat, msgids in self.msgs_store._msgs_by_category.items():
719|            # enable only messages with 'error' severity and above ('fatal')
720|            if msgcat in ["E", "F"]:
721|                for msgid in msgids:
722|                    self.enable(msgid)
723|            else:
724|                for msgid in msgids:
725|                    self.disable(msgid)
726|
727|    def disable_reporters(self):
728|        """disable all reporters"""
729|        for _reporters in self._reports.values():
730|            for report_id, _, _ in _reporters:
731|                self.disable_report(report_id)
732|
733|    def error_mode(self):
734|        """error mode: enable only errors; no reports, no persistent"""
735|        self._error_mode = True
736|        self.disable_noerror_messages()
737|        self.disable("miscellaneous")
738|        if self._python3_porting_mode:
739|            self.disable("all")
740|            for msg_id in self._checker_messages("python3"):
741|                if msg_id.startswith("E"):
742|                    self.enable(msg_id)
743|            config_parser = self.cfgfile_parser
744|            if config_parser.has_option("MESSAGES CONTROL", "disable"):
745|                value = config_parser.get("MESSAGES CONTROL", "disable")
746|                self.global_set_option("disable", value)
747|        else:
748|            self.disable("python3")
749|        self.set_option("reports", False)
750|        self.set_option("persistent", False)
751|        self.set_option("score", False)
752|
753|    def python3_porting_mode(self):
754|        """Disable all other checkers and enable Python 3 warnings."""
755|        self.disable("all")
756|        # re-enable some errors, or 'print', 'raise', 'async', 'await' will mistakenly lint fine
757|        self.enable("fatal")  # F0001
758|        self.enable("astroid-error")  # F0002
759|        self.enable("parse-error")  # F0010
760|        self.enable("syntax-error")  # E0001
761|        self.enable("python3")
762|        if self._error_mode:
763|            # The error mode was activated, using the -E flag.
764|            # So we'll need to enable only the errors from the
765|            # Python 3 porting checker.
766|            for msg_id in self._checker_messages("python3"):
767|                if msg_id.startswith("E"):
768|                    self.enable(msg_id)
769|                else:
770|                    self.disable(msg_id)
771|        config_parser = self.cfgfile_parser
772|        if config_parser.has_option("MESSAGES CONTROL", "disable"):
773|            value = config_parser.get("MESSAGES CONTROL", "disable")
774|            self.global_set_option("disable", value)
775|        self._python3_porting_mode = True
776|
777|    def list_messages_enabled(self):
778|        enabled = [
779|            f"  {message.symbol} ({message.msgid})"
780|            for message in self.msgs_store.messages
781|            if self.is_message_enabled(message.msgid)
782|        ]
783|        disabled = [
784|            f"  {message.symbol} ({message.msgid})"
785|            for message in self.msgs_store.messages
786|            if not self.is_message_enabled(message.msgid)
787|        ]
788|        print("Enabled messages:")
789|        for msg in sorted(enabled):
790|            print(msg)
791|        print("\nDisabled messages:")
792|        for msg in sorted(disabled):
793|            print(msg)
794|        print("")
795|
796|    # block level option handling #############################################
797|    # see func_block_disable_msg.py test case for expected behaviour
798|
799|    def process_tokens(self, tokens):
800|        """Process tokens from the current module to search for module/block level
801|        options."""
802|        control_pragmas = {"disable", "enable"}
803|        prev_line = None
804|        saw_newline = True
805|        seen_newline = True
806|        for (tok_type, content, start, _, _) in tokens:
807|            if prev_line and prev_line != start[0]:
808|                saw_newline = seen_newline
809|                seen_newline = False
810|
811|            prev_line = start[0]
812|            if tok_type in (tokenize.NL, tokenize.NEWLINE):
813|                seen_newline = True
814|
815|            if tok_type != tokenize.COMMENT:
816|                continue
817|            match = OPTION_PO.search(content)
818|            if match is None:
819|                continue
820|            try:
821|                for pragma_repr in parse_pragma(match.group(2)):
822|                    if pragma_repr.action in ("disable-all", "skip-file"):
823|                        if pragma_repr.action == "disable-all":
824|                            self.add_message(
825|                                "deprecated-pragma",
826|                                line=start[0],
827|                                args=("disable-all", "skip-file"),
828|                            )
829|                        self.add_message("file-ignored", line=start[0])
830|                        self._ignore_file = True
831|                        return
832|                    try:
833|                        meth = self._options_methods[pragma_repr.action]
834|                    except KeyError:
835|                        meth = self._bw_options_methods[pragma_repr.action]
836|                        # found a "(dis|en)able-msg" pragma deprecated suppression
837|                        self.add_message(
838|                            "deprecated-pragma",
839|                            line=start[0],
840|                            args=(
841|                                pragma_repr.action,
842|                                pragma_repr.action.replace("-msg", ""),
843|                            ),
844|                        )
845|                    for msgid in pragma_repr.messages:
846|                        # Add the line where a control pragma was encountered.
847|                        if pragma_repr.action in control_pragmas:
848|                            self._pragma_lineno[msgid] = start[0]
849|
850|                        if (pragma_repr.action, msgid) == ("disable", "all"):
851|                            self.add_message(
852|                                "deprecated-pragma",
853|                                line=start[0],
854|                                args=("disable=all", "skip-file"),
855|                            )
856|                            self.add_message("file-ignored", line=start[0])
857|                            self._ignore_file = True
858|                            return
859|                            # If we did not see a newline between the previous line and now,
860|                            # we saw a backslash so treat the two lines as one.
861|                        l_start = start[0]
862|                        if not saw_newline:
863|                            l_start -= 1
864|                        try:
865|                            meth(msgid, "module", l_start)
866|                        except exceptions.UnknownMessageError:
867|                            self.add_message(
868|                                "bad-option-value", args=msgid, line=start[0]
869|                            )
870|            except UnRecognizedOptionError as err:
871|                self.add_message(
872|                    "unrecognized-inline-option", args=err.token, line=start[0]
873|                )
874|                continue
875|            except InvalidPragmaError as err:
876|                self.add_message("bad-inline-option", args=err.token, line=start[0])
877|                continue
878|
879|    # code checking methods ###################################################
880|
881|    def get_checkers(self):
882|        """return all available checkers as a list"""
883|        return [self] + [
884|            c
885|            for _checkers in self._checkers.values()
886|            for c in _checkers
887|            if c is not self
888|        ]
889|
890|    def get_checker_names(self):
891|        """Get all the checker names that this linter knows about."""
892|        current_checkers = self.get_checkers()
893|        return sorted(
894|            {
895|                checker.name
896|                for checker in current_checkers
897|                if checker.name != MAIN_CHECKER_NAME
898|            }
899|        )
900|
901|    def prepare_checkers(self):
902|        """return checkers needed for activated messages and reports"""
903|        if not self.config.reports:
904|            self.disable_reporters()
905|        # get needed checkers
906|        needed_checkers = [self]
907|        for checker in self.get_checkers()[1:]:
908|            messages = {msg for msg in checker.msgs if self.is_message_enabled(msg)}
909|            if messages or any(self.report_is_enabled(r[0]) for r in checker.reports):
910|                needed_checkers.append(checker)
911|        # Sort checkers by priority
912|        needed_checkers = sorted(
913|            needed_checkers, key=operator.attrgetter("priority"), reverse=True
914|        )
915|        return needed_checkers
916|
917|    # pylint: disable=unused-argument
918|    @staticmethod
919|    def should_analyze_file(modname, path, is_argument=False):
920|        """Returns whether or not a module should be checked.
921|
922|        This implementation returns True for all python source file, indicating
923|        that all files should be linted.
924|
925|        Subclasses may override this method to indicate that modules satisfying
926|        certain conditions should not be linted.
927|
928|        :param str modname: The name of the module to be checked.
929|        :param str path: The full path to the source code of the module.
930|        :param bool is_argument: Whether the file is an argument to pylint or not.
931|                                 Files which respect this property are always
932|                                 checked, since the user requested it explicitly.
933|        :returns: True if the module should be checked.
934|        :rtype: bool
935|        """
936|        if is_argument:
937|            return True
938|        return path.endswith(".py")
939|
940|    # pylint: enable=unused-argument
941|
942|    def initialize(self):
943|        """Initialize linter for linting
944|
945|        This method is called before any linting is done.
946|        """
947|        # initialize msgs_state now that all messages have been registered into
948|        # the store
949|        for msg in self.msgs_store.messages:
950|            if not msg.may_be_emitted():
951|                self._msgs_state[msg.msgid] = False
952|
953|    def check(self, files_or_modules):
954|        """main checking entry: check a list of files or modules from their name.
955|
956|        files_or_modules is either a string or list of strings presenting modules to check.
957|        """
958|
959|        self.initialize()
960|
961|        if not isinstance(files_or_modules, (list, tuple)):
962|            files_or_modules = (files_or_modules,)
963|
964|        if self.config.from_stdin:
965|            if len(files_or_modules) != 1:
966|                raise exceptions.InvalidArgsError(
967|                    "Missing filename required for --from-stdin"
968|                )
969|
970|            filepath = files_or_modules[0]
971|            with fix_import_path(files_or_modules):
972|                self._check_files(
973|                    functools.partial(self.get_ast, data=_read_stdin()),
974|                    [self._get_file_descr_from_stdin(filepath)],
975|                )
976|        elif self.config.jobs == 1:
977|            with fix_import_path(files_or_modules):
978|                self._check_files(
979|                    self.get_ast, self._iterate_file_descrs(files_or_modules)
980|                )
981|        else:
982|            check_parallel(
983|                self,
984|                self.config.jobs,
985|                self._iterate_file_descrs(files_or_modules),
986|                files_or_modules,
987|            )
988|
989|    def check_single_file(self, name, filepath, modname):
990|        """Check single file
991|
992|        The arguments are the same that are documented in _check_files
993|
994|        The initialize() method should be called before calling this method
995|        """
996|        with self._astroid_module_checker() as check_astroid_module:
997|            self._check_file(
998|                self.get_ast, check_astroid_module, name, filepath, modname
999|            )
1000|
(291 more lines below)


============================================================



ACTION:

THOUGHT: Let's check if there are any other files that might be creating the `.pylint.d` directory. Let's search for "mkdir" since we saw that's how the directory is created:
CODE:
search_dir('mkdir', '/workspace/pylint-dev__pylint__2.10')

============================================================



OBSERVATION:

[Found 7 matches for "mkdir" in /workspace/pylint-dev__pylint__2.10]
/workspace/pylint-dev__pylint__2.10/pylint/config/__init__.py (Line 88): os.mkdir(PYLINT_HOME)
/workspace/pylint-dev__pylint__2.10/pylint/config/__pycache__/__init__.cpython-39.pyc (Line 17): r   r   existsr   mkdirOSErrorprintsysstderrr   r   r   dump)resultsr    r!   r"   exr   r   r   save_resultsU   s    
/workspace/pylint-dev__pylint__2.10/doc/Makefile (Line 93): @echo "# mkdir -p $$HOME/.local/share/devhelp/Pylint"
/workspace/pylint-dev__pylint__2.10/tests/test_self.py (Line 612): a.mkdir()
/workspace/pylint-dev__pylint__2.10/tests/test_self.py (Line 1056): test_directory.mkdir()
/workspace/pylint-dev__pylint__2.10/tests/test_self.py (Line 1088): test_directory.mkdir()
/workspace/pylint-dev__pylint__2.10/tests/profile/test_profile_against_externals.py (Line 46): checkoutdir.mkdir()
[End of matches for "mkdir" in /workspace/pylint-dev__pylint__2.10]


============================================================



ACTION:

THOUGHT: I see the issue now. In `pylint/config/__init__.py`, we need to ensure the parent directories exist before creating the pylint directory. Let's modify the `save_results` function:
CODE:
DIFF_STRING = """<<<<<<< SEARCH
def save_results(results, base):
    if not os.path.exists(PYLINT_HOME):
        try:
            os.mkdir(PYLINT_HOME)
        except OSError:
            print("Unable to create directory %s" % PYLINT_HOME, file=sys.stderr)
=======
def save_results(results, base):
    if not os.path.exists(PYLINT_HOME):
        try:
            os.makedirs(PYLINT_HOME, exist_ok=True)
        except OSError as ex:
            print(f"Unable to create directory {PYLINT_HOME}: {ex}", file=sys.stderr)
>>>>>>> REPLACE"""
edit_file('/workspace/pylint-dev__pylint__2.10/pylint/config/__init__.py', diff_string=DIFF_STRING)

============================================================



OBSERVATION:

[File: /workspace/pylint-dev__pylint__2.10/pylint/config/__init__.py (121 lines total after edit)]
[Diff of the changes applied. Please review the diff and remove if there are any redundant code lines or duplicates introduced or left to be removed.]
--- 
+++ 
@@ -58,63 +58,63 @@
 USER_HOME = os.path.expanduser("~")
 
 # First check PYLINTHOME environment variable
 if "PYLINTHOME" in os.environ:
     PYLINT_HOME = os.environ["PYLINTHOME"]
     if USER_HOME == "~":
         USER_HOME = os.path.dirname(PYLINT_HOME)
 else:
     # Follow XDG Base Directory Specification
     xdg_data_home = os.environ.get("XDG_DATA_HOME", os.path.join(USER_HOME, ".local", "share"))
     PYLINT_HOME = os.path.join(xdg_data_home, "pylint")
 
 
 def _get_pdata_path(base_name, recurs):
     base_name = base_name.replace(os.sep, "_")
     return os.path.join(PYLINT_HOME, f"{base_name}{recurs}.stats")
 
 
 def load_results(base):
     data_file = _get_pdata_path(base, 1)
     try:
         with open(data_file, "rb") as stream:
             return pickle.load(stream)
     except Exception:  # pylint: disable=broad-except
         return {}
 
 
 def save_results(results, base):
     if not os.path.exists(PYLINT_HOME):
         try:
-            os.mkdir(PYLINT_HOME)
-        except OSError:
-            print("Unable to create directory %s" % PYLINT_HOME, file=sys.stderr)
+            os.makedirs(PYLINT_HOME, exist_ok=True)
+        except OSError as ex:
+            print(f"Unable to create directory {PYLINT_HOME}: {ex}", file=sys.stderr)
     data_file = _get_pdata_path(base, 1)
     try:
         with open(data_file, "wb") as stream:
             pickle.dump(results, stream)
     except OSError as ex:
         print(f"Unable to create file {data_file}: {ex}", file=sys.stderr)
 
 
 def find_pylintrc():
     """search the pylint rc file and return its path if it find it, else None"""
     for config_file in find_default_config_files():
         if config_file.endswith("pylintrc"):
             return config_file
 
     return None
 
 
 PYLINTRC = find_pylintrc()
 
 ENV_HELP = (
     """
 The following environment variables are used:
     * PYLINTHOME
     Path to the directory where persistent data for the run will be stored. If
 not found, it defaults to $XDG_DATA_HOME/pylint (usually ~/.local/share/pylint).
     * PYLINTRC
     Path to the configuration file. See the documentation for the method used
 to search for configuration file.
 """
     % globals()  # type: ignore
[File updated. Please review the changes carefully and make sure they are correct (correct indentation, no duplicate or redundant lines etc). Edit the file again if necessary.]


============================================================



ACTION:

THOUGHT: The changes look good. We've made three key changes:
1. Changed `os.mkdir` to `os.makedirs` with `exist_ok=True` to create parent directories if needed
2. Updated the error message to include the specific error
3. Updated the ENV_HELP text to reflect the new XDG-compliant default location

Let's test our changes by removing both directories and running the reproduce script again:
COMMAND:
rm -rf /root/.pylint.d /root/.local/share/pylint
python3 reproduce.py

============================================================



OBSERVATION:

************* Module test
/tmp/test.py:1:0: C0304: Final newline missing (missing-final-newline)
/tmp/test.py:1:0: C0114: Missing module docstring (missing-module-docstring)

-------------------------------------
Your code has been rated at -10.00/10


Checking if .pylint.d exists in home directory: False

Checking if pylint exists in XDG_DATA_HOME: True
Found at: /root/.local/share/pylint



============================================================



ACTION:

THOUGHT: Perfect! Our changes are working as expected:
1. The old `.pylint.d` directory is no longer created in the home directory
2. The new XDG-compliant directory `/root/.local/share/pylint` is created and used instead

Let's verify that the PYLINTHOME environment variable override still works as expected:
COMMAND:
rm -rf /root/.pylint.d /root/.local/share/pylint
PYLINTHOME=/tmp/custom_pylint_dir python3 reproduce.py

============================================================



OBSERVATION:

************* Module test
/tmp/test.py:1:0: C0304: Final newline missing (missing-final-newline)
/tmp/test.py:1:0: C0114: Missing module docstring (missing-module-docstring)

-------------------------------------
Your code has been rated at -10.00/10


Checking if .pylint.d exists in home directory: False

Checking if pylint exists in XDG_DATA_HOME: False




============================================================



ACTION:

THOUGHT: Let's check if the custom PYLINTHOME directory was created:
COMMAND:
ls -la /tmp/custom_pylint_dir

============================================================



OBSERVATION:

total 12
drwxr-xr-x 2 root root 4096 Jan  7 19:13 .
drwxrwxrwt 1 root root 4096 Jan  7 19:13 ..
-rw-r--r-- 1 root root  702 Jan  7 19:13 test1.stats



============================================================

