

TASK:


[Bug]: Datetime axis with usetex is unclear
### Bug summary

The spacing for a datetime axis when using `usetex=True` is unclear in matplotlib version 3.4 when comparing it to 3.3.

### Code for reproduction

```python
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

np.random.seed(1)
matplotlib.rcParams["text.usetex"] = True

dates = pd.date_range("2020-01-01 00:00:00", end="2020-01-01 00:10:00", periods=100)
data = np.random.rand(100)

fig, ax = plt.subplots(constrained_layout=True)
ax.plot(dates, data)
plt.savefig(matplotlib.__version__ + ".png")
```


### Actual outcome

Example of how it look in 3.3.4:
![3 3 4](https://user-images.githubusercontent.com/19758978/139711077-e4fd7727-1e8b-4225-b399-ddad2307f754.png)

Example of how it look in 3.4.3:
![3 4 3](https://user-images.githubusercontent.com/19758978/139711070-2859fd7a-70b2-449e-a3b0-d48e50184077.png)

### Expected outcome

The ideal case would be to have the spacing from version 3.3 in a tex format.

### Operating system

Windows

### Matplotlib Version

3.4.3

### Matplotlib Backend

_No response_

### Python version

_No response_

### Jupyter version

_No response_

### Other libraries

_No response_

### Installation

conda

### Conda channel

conda-forge



============================================================



ACTION:

THOUGHT: I'll help you implement the necessary changes following the steps you outlined.

1. First, let's explore the repository structure:
CODE:
get_repo_structure("/workspace/matplotlib__matplotlib__3.4")

============================================================



OBSERVATION:

/workspace/matplotlib__matplotlib__3.4:
CITATION.bib
CODE_OF_CONDUCT.md
INSTALL.rst
LICENSE
README.rst
SECURITY.md
__pycache__
azure-pipelines.yml
build
ci
doc
environment.yml
examples
extern
lib
mplsetup.cfg.template
plot_types
pytest.ini
requirements
setup.cfg
setup.py
setupext.py
src
tests.py
tmp
tools
tox.ini
tutorials

/workspace/matplotlib__matplotlib__3.4/LICENSE:
LICENSE
LICENSE_AMSFONTS
LICENSE_BAKOMA
LICENSE_CARLOGO
LICENSE_COLORBREWER
LICENSE_COURIERTEN
LICENSE_JSXTOOLS_RESIZE_OBSERVER
LICENSE_QHULL
LICENSE_QT4_EDITOR
LICENSE_SOLARIZED
LICENSE_STIX
LICENSE_YORICK

/workspace/matplotlib__matplotlib__3.4/__pycache__:
setupext.cpython-38.pyc

/workspace/matplotlib__matplotlib__3.4/build:
freetype-2.6.1
lib.linux-x86_64-cpython-38
qhull-2020.2
temp.linux-x86_64-cpython-38

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1:
CMakeLists.txt
ChangeLog
ChangeLog.20
ChangeLog.21
ChangeLog.22
ChangeLog.23
ChangeLog.24
Jamfile
Jamrules
Makefile
README
README.git
autogen.sh
builds
config.mk
configure
devel
docs
include
modules.cfg
objs
src
version.sed
vms_make.com

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/builds:
FindHarfBuzz.cmake
amiga
ansi
atari
beos
cmake
compiler
detect.mk
dos
exports.mk
freetype.mk
link_dos.mk
link_std.mk
mac
modules.mk
newline
os2
symbian
toplevel.mk
unix
vms
wince
windows

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/builds/amiga:
README
include
makefile
makefile.os4
smakefile
src

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/builds/amiga/include:
config

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/builds/amiga/include/config:
ftconfig.h
ftmodule.h

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/builds/amiga/src:
base

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/builds/amiga/src/base:
ftdebug.c
ftsystem.c

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/builds/ansi:
ansi-def.mk
ansi.mk

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/builds/atari:
ATARI.H
FNames.SIC
FREETYPE.PRJ
README.TXT
deflinejoiner.awk
gen-purec-patch.sh

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/builds/beos:
beos-def.mk
beos.mk
detect.mk

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/builds/cmake:
iOS.cmake

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/builds/compiler:
ansi-cc.mk
bcc-dev.mk
bcc.mk
emx.mk
gcc-dev.mk
gcc.mk
intelc.mk
unix-lcc.mk
visualage.mk
visualc.mk
watcom.mk
win-lcc.mk

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/builds/dos:
detect.mk
dos-def.mk
dos-emx.mk
dos-gcc.mk
dos-wat.mk

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/builds/mac:
FreeType.m68k_cfm.make.txt
FreeType.m68k_far.make.txt
FreeType.ppc_carbon.make.txt
FreeType.ppc_classic.make.txt
README
ascii2mpw.py
freetype-Info.plist
ftlib.prj.xml
ftmac.c

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/builds/os2:
detect.mk
os2-def.mk
os2-dev.mk
os2-gcc.mk

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/builds/symbian:
bld.inf
freetype.mmp

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/builds/unix:
aclocal.m4
config.guess
config.log
config.status
config.sub
configure
configure.ac
configure.raw
detect.mk
freetype-config
freetype-config.in
freetype2.in
freetype2.m4
freetype2.pc
ft-munmap.m4
ftconfig.h
ftconfig.in
ftsystem.c
install-sh
install.mk
libtool
ltmain.sh
pkg.m4
unix-cc.in
unix-cc.mk
unix-def.in
unix-def.mk
unix-dev.mk
unix-lcc.mk
unix.mk
unixddef.mk

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/builds/vms:
ftconfig.h
ftsystem.c

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/builds/wince:
ftdebug.c
vc2005-ce
vc2008-ce

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/builds/wince/vc2005-ce:
freetype.sln
freetype.vcproj
index.html

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/builds/wince/vc2008-ce:
freetype.sln
freetype.vcproj
index.html

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/builds/windows:
detect.mk
ftdebug.c
vc2005
vc2008
vc2010
visualc
visualce
w32-bcc.mk
w32-bccd.mk
w32-dev.mk
w32-gcc.mk
w32-icc.mk
w32-intl.mk
w32-lcc.mk
w32-mingw32.mk
w32-vcc.mk
w32-wat.mk
win32-def.mk

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/builds/windows/vc2005:
freetype.sln
freetype.vcproj
index.html

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/builds/windows/vc2008:
freetype.sln
freetype.vcproj
index.html

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/builds/windows/vc2010:
freetype.sln
freetype.user.props
freetype.vcxproj
freetype.vcxproj.filters
index.html

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/builds/windows/visualc:
freetype.dsp
freetype.dsw
freetype.sln
freetype.vcproj
index.html

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/builds/windows/visualce:
freetype.dsp
freetype.dsw
freetype.vcproj
index.html

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/devel:
ft2build.h
ftoption.h

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/docs:
CHANGES
CMAKE
CUSTOMIZE
DEBUG
FTL.TXT
GPLv2.TXT
INSTALL
INSTALL.ANY
INSTALL.CROSS
INSTALL.GNU
INSTALL.MAC
INSTALL.UNIX
INSTALL.VMS
LICENSE.TXT
MAKEPP
PROBLEMS
TODO
VERSION.DLL
formats.txt
freetype-config.1
raster.txt
reference
release

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/docs/reference:
README
ft2-auto_hinter.html
ft2-base_interface.html
ft2-basic_types.html
ft2-bdf_fonts.html
ft2-bitmap_handling.html
ft2-bzip2.html
ft2-cache_subsystem.html
ft2-cff_driver.html
ft2-cid_fonts.html
ft2-computations.html
ft2-error_code_values.html
ft2-error_enumerations.html
ft2-font_formats.html
ft2-gasp_table.html
ft2-glyph_management.html
ft2-glyph_stroker.html
ft2-glyph_variants.html
ft2-gx_validation.html
ft2-gzip.html
ft2-header_file_macros.html
ft2-header_inclusion.html
ft2-incremental.html
ft2-index.html
ft2-lcd_filtering.html
ft2-list_processing.html
ft2-lzw.html
ft2-mac_specific.html
ft2-module_management.html
ft2-multiple_masters.html
ft2-ot_validation.html
ft2-outline_processing.html
ft2-pfr_fonts.html
ft2-quick_advance.html
ft2-raster.html
ft2-sfnt_names.html
ft2-sizes_management.html
ft2-system_interface.html
ft2-toc.html
ft2-truetype_engine.html
ft2-truetype_tables.html
ft2-tt_driver.html
ft2-type1_tables.html
ft2-user_allocation.html
ft2-version.html
ft2-winfnt_fonts.html

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/include:
freetype
ft2build.h

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/include/freetype:
config
freetype.h
ftadvanc.h
ftautoh.h
ftbbox.h
ftbdf.h
ftbitmap.h
ftbzip2.h
ftcache.h
ftcffdrv.h
ftchapters.h
ftcid.h
fterrdef.h
fterrors.h
ftfntfmt.h
ftgasp.h
ftglyph.h
ftgxval.h
ftgzip.h
ftimage.h
ftincrem.h
ftlcdfil.h
ftlist.h
ftlzw.h
ftmac.h
ftmm.h
ftmodapi.h
ftmoderr.h
ftotval.h
ftoutln.h
ftpfr.h
ftrender.h
ftsizes.h
ftsnames.h
ftstroke.h
ftsynth.h
ftsystem.h
fttrigon.h
ftttdrv.h
fttypes.h
ftwinfnt.h
internal
t1tables.h
ttnameid.h
tttables.h
tttags.h
ttunpat.h

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/include/freetype/config:
ftconfig.h
ftheader.h
ftmodule.h
ftoption.h
ftstdlib.h

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/include/freetype/internal:
autohint.h
ftcalc.h
ftdebug.h
ftdriver.h
ftgloadr.h
ftmemory.h
ftobjs.h
ftpic.h
ftrfork.h
ftserv.h
ftstream.h
fttrace.h
ftvalid.h
internal.h
psaux.h
pshints.h
services
sfnt.h
t1types.h
tttypes.h

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/include/freetype/internal/services:
svbdf.h
svcid.h
svfntfmt.h
svgldict.h
svgxval.h
svkern.h
svmm.h
svotval.h
svpfr.h
svpostnm.h
svprop.h
svpscmap.h
svpsinfo.h
svsfnt.h
svttcmap.h
svtteng.h
svttglyf.h
svwinfnt.h

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/objs:
README
apinames
autofit.lo
autofit.o
bdf.lo
bdf.o
cff.lo
cff.o
ftbase.lo
ftbase.o
ftbbox.lo
ftbbox.o
ftbdf.lo
ftbdf.o
ftbitmap.lo
ftbitmap.o
ftbzip2.lo
ftbzip2.o
ftcache.lo
ftcache.o
ftcid.lo
ftcid.o
ftdebug.lo
ftdebug.o
ftexport.sym
ftfntfmt.lo
ftfntfmt.o
ftfstype.lo
ftfstype.o
ftgasp.lo
ftgasp.o
ftglyph.lo
ftglyph.o
ftgxval.lo
ftgxval.o
ftgzip.lo
ftgzip.o
ftinit.lo
ftinit.o
ftlcdfil.lo
ftlcdfil.o
ftlzw.lo
ftlzw.o
ftmm.lo
ftmm.o
ftmodule.h
ftotval.lo
ftotval.o
ftpatent.lo
ftpatent.o
ftpfr.lo
ftpfr.o
ftstroke.lo
ftstroke.o
ftsynth.lo
ftsynth.o
ftsystem.lo
ftsystem.o
fttype1.lo
fttype1.o
ftwinfnt.lo
ftwinfnt.o
libfreetype.la
pcf.lo
pcf.o
pfr.lo
pfr.o
psaux.lo
psaux.o
pshinter.lo
pshinter.o
psnames.lo
psnames.o
raster.lo
raster.o
sfnt.lo
sfnt.o
smooth.lo
smooth.o
truetype.lo
truetype.o
type1.lo
type1.o
type1cid.lo
type1cid.o
type42.lo
type42.o
winfnt.lo
winfnt.o

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/src:
Jamfile
autofit
base
bdf
bzip2
cache
cff
cid
gxvalid
gzip
lzw
otvalid
pcf
pfr
psaux
pshinter
psnames
raster
sfnt
smooth
tools
truetype
type1
type42
winfonts

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/src/autofit:
Jamfile
afangles.c
afangles.h
afblue.c
afblue.cin
afblue.dat
afblue.h
afblue.hin
afcjk.c
afcjk.h
afcover.h
afdummy.c
afdummy.h
aferrors.h
afglobal.c
afglobal.h
afhints.c
afhints.h
afindic.c
afindic.h
aflatin.c
aflatin.h
aflatin2.c
aflatin2.h
afloader.c
afloader.h
afmodule.c
afmodule.h
afpic.c
afpic.h
afranges.c
afranges.h
afscript.h
afstyles.h
aftypes.h
afwarp.c
afwarp.h
afwrtsys.h
autofit.c
hbshim.c
hbshim.h
module.mk
rules.mk

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/src/base:
Jamfile
basepic.c
basepic.h
ftadvanc.c
ftapi.c
ftbase.c
ftbase.h
ftbbox.c
ftbdf.c
ftbitmap.c
ftcalc.c
ftcid.c
ftdbgmem.c
ftdebug.c
ftfntfmt.c
ftfstype.c
ftgasp.c
ftgloadr.c
ftglyph.c
ftgxval.c
ftinit.c
ftlcdfil.c
ftmac.c
ftmm.c
ftobjs.c
ftotval.c
ftoutln.c
ftpatent.c
ftpfr.c
ftpic.c
ftrfork.c
ftsnames.c
ftstream.c
ftstroke.c
ftsynth.c
ftsystem.c
fttrigon.c
fttype1.c
ftutil.c
ftwinfnt.c
md5.c
md5.h
rules.mk

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/src/bdf:
Jamfile
README
bdf.c
bdf.h
bdfdrivr.c
bdfdrivr.h
bdferror.h
bdflib.c
module.mk
rules.mk

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/src/bzip2:
Jamfile
ftbzip2.c
rules.mk

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/src/cache:
Jamfile
ftcache.c
ftcbasic.c
ftccache.c
ftccache.h
ftccback.h
ftccmap.c
ftcerror.h
ftcglyph.c
ftcglyph.h
ftcimage.c
ftcimage.h
ftcmanag.c
ftcmanag.h
ftcmru.c
ftcmru.h
ftcsbits.c
ftcsbits.h
rules.mk

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/src/cff:
Jamfile
cf2arrst.c
cf2arrst.h
cf2blues.c
cf2blues.h
cf2error.c
cf2error.h
cf2fixed.h
cf2font.c
cf2font.h
cf2ft.c
cf2ft.h
cf2glue.h
cf2hints.c
cf2hints.h
cf2intrp.c
cf2intrp.h
cf2read.c
cf2read.h
cf2stack.c
cf2stack.h
cf2types.h
cff.c
cffcmap.c
cffcmap.h
cffdrivr.c
cffdrivr.h
cfferrs.h
cffgload.c
cffgload.h
cffload.c
cffload.h
cffobjs.c
cffobjs.h
cffparse.c
cffparse.h
cffpic.c
cffpic.h
cfftoken.h
cfftypes.h
module.mk
rules.mk

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/src/cid:
Jamfile
ciderrs.h
cidgload.c
cidgload.h
cidload.c
cidload.h
cidobjs.c
cidobjs.h
cidparse.c
cidparse.h
cidriver.c
cidriver.h
cidtoken.h
module.mk
rules.mk
type1cid.c

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/src/gxvalid:
Jamfile
README
gxvalid.c
gxvalid.h
gxvbsln.c
gxvcommn.c
gxvcommn.h
gxverror.h
gxvfeat.c
gxvfeat.h
gxvfgen.c
gxvjust.c
gxvkern.c
gxvlcar.c
gxvmod.c
gxvmod.h
gxvmort.c
gxvmort.h
gxvmort0.c
gxvmort1.c
gxvmort2.c
gxvmort4.c
gxvmort5.c
gxvmorx.c
gxvmorx.h
gxvmorx0.c
gxvmorx1.c
gxvmorx2.c
gxvmorx4.c
gxvmorx5.c
gxvopbd.c
gxvprop.c
gxvtrak.c
module.mk
rules.mk

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/src/gzip:
Jamfile
adler32.c
ftgzip.c
infblock.c
infblock.h
infcodes.c
infcodes.h
inffixed.h
inflate.c
inftrees.c
inftrees.h
infutil.c
infutil.h
rules.mk
zconf.h
zlib.h
zutil.c
zutil.h

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/src/lzw:
Jamfile
ftlzw.c
ftzopen.c
ftzopen.h
rules.mk

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/src/otvalid:
Jamfile
module.mk
otvalid.c
otvalid.h
otvbase.c
otvcommn.c
otvcommn.h
otverror.h
otvgdef.c
otvgpos.c
otvgpos.h
otvgsub.c
otvjstf.c
otvmath.c
otvmod.c
otvmod.h
rules.mk

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/src/pcf:
Jamfile
README
module.mk
pcf.c
pcf.h
pcfdrivr.c
pcfdrivr.h
pcferror.h
pcfread.c
pcfread.h
pcfutil.c
pcfutil.h
rules.mk

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/src/pfr:
Jamfile
module.mk
pfr.c
pfrcmap.c
pfrcmap.h
pfrdrivr.c
pfrdrivr.h
pfrerror.h
pfrgload.c
pfrgload.h
pfrload.c
pfrload.h
pfrobjs.c
pfrobjs.h
pfrsbit.c
pfrsbit.h
pfrtypes.h
rules.mk

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/src/psaux:
Jamfile
afmparse.c
afmparse.h
module.mk
psaux.c
psauxerr.h
psauxmod.c
psauxmod.h
psconv.c
psconv.h
psobjs.c
psobjs.h
rules.mk
t1cmap.c
t1cmap.h
t1decode.c
t1decode.h

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/src/pshinter:
Jamfile
module.mk
pshalgo.c
pshalgo.h
pshglob.c
pshglob.h
pshinter.c
pshmod.c
pshmod.h
pshnterr.h
pshpic.c
pshpic.h
pshrec.c
pshrec.h
rules.mk

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/src/psnames:
Jamfile
module.mk
psmodule.c
psmodule.h
psnamerr.h
psnames.c
pspic.c
pspic.h
pstables.h
rules.mk

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/src/raster:
Jamfile
ftmisc.h
ftraster.c
ftraster.h
ftrend1.c
ftrend1.h
module.mk
raster.c
rasterrs.h
rastpic.c
rastpic.h
rules.mk

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/src/sfnt:
Jamfile
module.mk
pngshim.c
pngshim.h
rules.mk
sfdriver.c
sfdriver.h
sferrors.h
sfnt.c
sfntpic.c
sfntpic.h
sfobjs.c
sfobjs.h
ttbdf.c
ttbdf.h
ttcmap.c
ttcmap.h
ttcmapc.h
ttkern.c
ttkern.h
ttload.c
ttload.h
ttmtx.c
ttmtx.h
ttpost.c
ttpost.h
ttsbit.c
ttsbit.h

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/src/smooth:
Jamfile
ftgrays.c
ftgrays.h
ftsmerrs.h
ftsmooth.c
ftsmooth.h
ftspic.c
ftspic.h
module.mk
rules.mk
smooth.c

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/src/tools:
Jamfile
afblue.pl
apinames.c
chktrcmp.py
cordic.py
docmaker
ftrandom
glnames.py
no-copyright
test_afm.c
test_bbox.c
test_trig.c
update-copyright
update-copyright-year

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/src/tools/docmaker:
content.py
docbeauty.py
docmaker.py
formatter.py
sources.py
tohtml.py
utils.py

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/src/tools/ftrandom:
Makefile
README
ftrandom.c

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/src/truetype:
Jamfile
module.mk
rules.mk
truetype.c
ttdriver.c
ttdriver.h
tterrors.h
ttgload.c
ttgload.h
ttgxvar.c
ttgxvar.h
ttinterp.c
ttinterp.h
ttobjs.c
ttobjs.h
ttpic.c
ttpic.h
ttpload.c
ttpload.h
ttsubpix.c
ttsubpix.h

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/src/type1:
Jamfile
module.mk
rules.mk
t1afm.c
t1afm.h
t1driver.c
t1driver.h
t1errors.h
t1gload.c
t1gload.h
t1load.c
t1load.h
t1objs.c
t1objs.h
t1parse.c
t1parse.h
t1tokens.h
type1.c

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/src/type42:
Jamfile
module.mk
rules.mk
t42drivr.c
t42drivr.h
t42error.h
t42objs.c
t42objs.h
t42parse.c
t42parse.h
t42types.h
type42.c

/workspace/matplotlib__matplotlib__3.4/build/freetype-2.6.1/src/winfonts:
Jamfile
fnterrs.h
module.mk
rules.mk
winfnt.c
winfnt.h

/workspace/matplotlib__matplotlib__3.4/build/lib.linux-x86_64-cpython-38:
matplotlib

/workspace/matplotlib__matplotlib__3.4/build/lib.linux-x86_64-cpython-38/matplotlib:
_c_internal_utils.cpython-38-x86_64-linux-gnu.so
_contour.cpython-38-x86_64-linux-gnu.so
_image.cpython-38-x86_64-linux-gnu.so
_path.cpython-38-x86_64-linux-gnu.so
_qhull.cpython-38-x86_64-linux-gnu.so
_tri.cpython-38-x86_64-linux-gnu.so
_ttconv.cpython-38-x86_64-linux-gnu.so
backends
ft2font.cpython-38-x86_64-linux-gnu.so

/workspace/matplotlib__matplotlib__3.4/build/lib.linux-x86_64-cpython-38/matplotlib/backends:
_backend_agg.cpython-38-x86_64-linux-gnu.so
_tkagg.cpython-38-x86_64-linux-gnu.so

/workspace/matplotlib__matplotlib__3.4/build/qhull-2020.2:
Announce.txt
CMakeLists.txt
COPYING.txt
File_id.diz
Makefile
QHULL-GO.lnk
README.txt
REGISTER.txt
build
eg
html
index.htm
qhull-2020-src-8.0.2-tgz.md5sum
src

/workspace/matplotlib__matplotlib__3.4/build/qhull-2020.2/build:
CMakeModules
config.cmake.in
libqhull-32.vcxproj
libqhull-64.vcxproj
libqhull.vcproj
qconvex-32.vcxproj
qconvex-64.vcxproj
qconvex.vcproj
qdelaunay-32.vcxproj
qdelaunay-64.vcxproj
qdelaunay.vcproj
qhalf-32.vcxproj
qhalf-64.vcxproj
qhalf.vcproj
qhull-32.sln
qhull-32.vcxproj
qhull-64.sln
qhull-64.vcxproj
qhull.pc.in
qhull.sln
qhull.vcproj
qhull_p-32.vcxproj
qhull_p-64.vcxproj
qhull_p.vcproj
qhull_r-32.vcxproj
qhull_r-64.vcxproj
qhull_r.vcproj
qhullcpp-32.vcxproj
qhullcpp-64.vcxproj
qhullcpp.vcproj
qhullstatic-32.vcxproj
qhullstatic-64.vcxproj
qhullstatic.vcproj
qhullstatic_r-32.vcxproj
qhullstatic_r-64.vcxproj
qhullstatic_r.vcproj
qvoronoi-32.vcxproj
qvoronoi-64.vcxproj
qvoronoi.vcproj
rbox-32.vcxproj
rbox-64.vcxproj
rbox.vcproj
testqset-32.vcxproj
testqset-64.vcxproj
testqset.vcproj
testqset_r-32.vcxproj
testqset_r-64.vcxproj
testqset_r.vcproj
user_eg-32.vcxproj
user_eg-64.vcxproj
user_eg.vcproj
user_eg2-32.vcxproj
user_eg2-64.vcxproj
user_eg2.vcproj
user_eg3-32.vcxproj
user_eg3-64.vcxproj
user_eg3.vcproj

/workspace/matplotlib__matplotlib__3.4/build/qhull-2020.2/build/CMakeModules:
CheckLFS.cmake

/workspace/matplotlib__matplotlib__3.4/build/qhull-2020.2/eg:
Qhull-go.bat
make-qhull_qh.sh
make-vcproj.sh
q_benchmark
q_benchmark-ok.txt
q_eg
q_egtest
q_test
q_test-ok.txt
q_test.bat
qhull-zip.sh
qhulltest-ok.txt
qtest.sh

/workspace/matplotlib__matplotlib__3.4/build/qhull-2020.2/html:
index.htm
normal_voronoi_knauss_oesterle.jpg
qconvex.htm
qdelau_f.htm
qdelaun.htm
qh--4d.gif
qh--cone.gif
qh--dt.gif
qh--geom.gif
qh--half.gif
qh--rand.gif
qh-code.htm
qh-eg.htm
qh-faq.htm
qh-get.htm
qh-impre.htm
qh-optc.htm
qh-optf.htm
qh-optg.htm
qh-opto.htm
qh-optp.htm
qh-optq.htm
qh-optt.htm
qh-quick.htm
qh_findbestfacet-drielsma.pdf
qhalf.htm
qhull-cpp.xml
qhull.htm
qhull.man
qhull.txt
qvoron_f.htm
qvoronoi.htm
rbox.htm
rbox.man
rbox.txt

/workspace/matplotlib__matplotlib__3.4/build/qhull-2020.2/src:
Changes.txt
libqhull
libqhull_r
libqhullcpp
libqhullstatic
libqhullstatic_r
qconvex
qdelaunay
qhalf
qhull
qhull-all.pro
qhull-app-c.pri
qhull-app-c_r.pri
qhull-app-cpp.pri
qhull-app-shared.pri
qhull-app-shared_r.pri
qhull-libqhull-src.pri
qhull-libqhull-src_r.pri
qhull-warn.pri
qhulltest
qvoronoi
rbox
testqset
testqset_r
user_eg
user_eg2
user_eg3

/workspace/matplotlib__matplotlib__3.4/build/qhull-2020.2/src/libqhull:
DEPRECATED.txt
Makefile
Mborland
geom.c
geom.h
geom2.c
global.c
index.htm
io.c
io.h
libqhull.c
libqhull.h
libqhull.pro
mem.c
mem.h
merge.c
merge.h
poly.c
poly.h
poly2.c
qh-geom.htm
qh-globa.htm
qh-io.htm
qh-mem.htm
qh-merge.htm
qh-poly.htm
qh-qhull.htm
qh-set.htm
qh-stat.htm
qh-user.htm
qhull-exports.def
qhull-nomerge-exports.def
qhull_a.h
qhull_p-exports.def
qhull_p-nomerge-exports.def
qset.c
qset.h
random.c
random.h
rboxlib.c
stat.c
stat.h
user.c
user.h
usermem.c
userprintf.c
userprintf_rbox.c

/workspace/matplotlib__matplotlib__3.4/build/qhull-2020.2/src/libqhull_r:
Makefile
geom2_r.c
geom_r.c
geom_r.h
global_r.c
index.htm
io_r.c
io_r.h
libqhull_r.c
libqhull_r.h
libqhull_r.pro
mem_r.c
mem_r.h
merge_r.c
merge_r.h
poly2_r.c
poly_r.c
poly_r.h
qh-geom_r.htm
qh-globa_r.htm
qh-io_r.htm
qh-mem_r.htm
qh-merge_r.htm
qh-poly_r.htm
qh-qhull_r.htm
qh-set_r.htm
qh-stat_r.htm
qh-user_r.htm
qhull_r-exports.def
qhull_r-nomerge-exports.def
qhull_ra.h
qset_r.c
qset_r.h
random_r.c
random_r.h
rboxlib_r.c
stat_r.c
stat_r.h
user_r.c
user_r.h
usermem_r.c
userprintf_r.c
userprintf_rbox_r.c

/workspace/matplotlib__matplotlib__3.4/build/qhull-2020.2/src/libqhullcpp:
Coordinates.cpp
Coordinates.h
PointCoordinates.cpp
PointCoordinates.h
Qhull.cpp
Qhull.h
QhullError.h
QhullFacet.cpp
QhullFacet.h
QhullFacetList.cpp
QhullFacetList.h
QhullFacetSet.cpp
QhullFacetSet.h
QhullHyperplane.cpp
QhullHyperplane.h
QhullIterator.h
QhullLinkedList.h
QhullPoint.cpp
QhullPoint.h
QhullPointSet.cpp
QhullPointSet.h
QhullPoints.cpp
QhullPoints.h
QhullQh.cpp
QhullQh.h
QhullRidge.cpp
QhullRidge.h
QhullSet.cpp
QhullSet.h
QhullSets.h
QhullStat.cpp
QhullStat.h
QhullUser.cpp
QhullUser.h
QhullVertex.cpp
QhullVertex.h
QhullVertexSet.cpp
QhullVertexSet.h
RboxPoints.cpp
RboxPoints.h
RoadError.cpp
RoadError.h
RoadLogEvent.cpp
RoadLogEvent.h
functionObjects.h
libqhullcpp.pro
qt-qhull.cpp
usermem_r-cpp.cpp

/workspace/matplotlib__matplotlib__3.4/build/qhull-2020.2/src/libqhullstatic:
libqhullstatic.pro

/workspace/matplotlib__matplotlib__3.4/build/qhull-2020.2/src/libqhullstatic_r:
libqhullstatic_r.pro

/workspace/matplotlib__matplotlib__3.4/build/qhull-2020.2/src/qconvex:
qconvex.c
qconvex.pro
qconvex_r.c

/workspace/matplotlib__matplotlib__3.4/build/qhull-2020.2/src/qdelaunay:
qdelaun.c
qdelaun_r.c
qdelaunay.pro

/workspace/matplotlib__matplotlib__3.4/build/qhull-2020.2/src/qhalf:
qhalf.c
qhalf.pro
qhalf_r.c

/workspace/matplotlib__matplotlib__3.4/build/qhull-2020.2/src/qhull:
qhull.pro
unix.c
unix_r.c

/workspace/matplotlib__matplotlib__3.4/build/qhull-2020.2/src/qhulltest:
Coordinates_test.cpp
PointCoordinates_test.cpp
QhullFacetList_test.cpp
QhullFacetSet_test.cpp
QhullFacet_test.cpp
QhullHyperplane_test.cpp
QhullLinkedList_test.cpp
QhullPointSet_test.cpp
QhullPoint_test.cpp
QhullPoints_test.cpp
QhullRidge_test.cpp
QhullSet_test.cpp
QhullVertexSet_test.cpp
QhullVertex_test.cpp
Qhull_test.cpp
RboxPoints_test.cpp
RoadTest.cpp
RoadTest.h
qhulltest.cpp
qhulltest.pro

/workspace/matplotlib__matplotlib__3.4/build/qhull-2020.2/src/qvoronoi:
qvoronoi.c
qvoronoi.pro
qvoronoi_r.c

/workspace/matplotlib__matplotlib__3.4/build/qhull-2020.2/src/rbox:
rbox.c
rbox.pro
rbox_r.c

/workspace/matplotlib__matplotlib__3.4/build/qhull-2020.2/src/testqset:
testqset.c
testqset.pro

/workspace/matplotlib__matplotlib__3.4/build/qhull-2020.2/src/testqset_r:
testqset_r.c
testqset_r.pro

/workspace/matplotlib__matplotlib__3.4/build/qhull-2020.2/src/user_eg:
user_eg.c
user_eg.pro
user_eg_r.c

/workspace/matplotlib__matplotlib__3.4/build/qhull-2020.2/src/user_eg2:
user_eg2.c
user_eg2.pro
user_eg2_r.c

/workspace/matplotlib__matplotlib__3.4/build/qhull-2020.2/src/user_eg3:
user_eg3.pro
user_eg3_r.cpp

/workspace/matplotlib__matplotlib__3.4/build/temp.linux-x86_64-cpython-38:
matplotlib._c_internal_utils
matplotlib._contour
matplotlib._image
matplotlib._path
matplotlib._qhull
matplotlib._tri
matplotlib._ttconv
matplotlib.backends._backend_agg
matplotlib.backends._tkagg
matplotlib.ft2font

/workspace/matplotlib__matplotlib__3.4/build/temp.linux-x86_64-cpython-38/matplotlib._c_internal_utils:
src

/workspace/matplotlib__matplotlib__3.4/build/temp.linux-x86_64-cpython-38/matplotlib._c_internal_utils/src:
_c_internal_utils.o

/workspace/matplotlib__matplotlib__3.4/build/temp.linux-x86_64-cpython-38/matplotlib._contour:
src

/workspace/matplotlib__matplotlib__3.4/build/temp.linux-x86_64-cpython-38/matplotlib._contour/src:
_contour.o
_contour_wrapper.o
py_converters.o

/workspace/matplotlib__matplotlib__3.4/build/temp.linux-x86_64-cpython-38/matplotlib._image:
extern
src

/workspace/matplotlib__matplotlib__3.4/build/temp.linux-x86_64-cpython-38/matplotlib._image/extern:
agg24-svn

/workspace/matplotlib__matplotlib__3.4/build/temp.linux-x86_64-cpython-38/matplotlib._image/extern/agg24-svn:
src

/workspace/matplotlib__matplotlib__3.4/build/temp.linux-x86_64-cpython-38/matplotlib._image/extern/agg24-svn/src:
agg_bezier_arc.o
agg_curves.o
agg_image_filters.o
agg_trans_affine.o
agg_vcgen_contour.o
agg_vcgen_dash.o
agg_vcgen_stroke.o
agg_vpgen_segmentator.o

/workspace/matplotlib__matplotlib__3.4/build/temp.linux-x86_64-cpython-38/matplotlib._image/src:
_image_wrapper.o
py_converters.o

/workspace/matplotlib__matplotlib__3.4/build/temp.linux-x86_64-cpython-38/matplotlib._path:
extern
src

/workspace/matplotlib__matplotlib__3.4/build/temp.linux-x86_64-cpython-38/matplotlib._path/extern:
agg24-svn

/workspace/matplotlib__matplotlib__3.4/build/temp.linux-x86_64-cpython-38/matplotlib._path/extern/agg24-svn:
src

/workspace/matplotlib__matplotlib__3.4/build/temp.linux-x86_64-cpython-38/matplotlib._path/extern/agg24-svn/src:
agg_bezier_arc.o
agg_curves.o
agg_image_filters.o
agg_trans_affine.o
agg_vcgen_contour.o
agg_vcgen_dash.o
agg_vcgen_stroke.o
agg_vpgen_segmentator.o

/workspace/matplotlib__matplotlib__3.4/build/temp.linux-x86_64-cpython-38/matplotlib._path/src:
_path_wrapper.o
py_converters.o

/workspace/matplotlib__matplotlib__3.4/build/temp.linux-x86_64-cpython-38/matplotlib._qhull:
build
src

/workspace/matplotlib__matplotlib__3.4/build/temp.linux-x86_64-cpython-38/matplotlib._qhull/build:
qhull-2020.2

/workspace/matplotlib__matplotlib__3.4/build/temp.linux-x86_64-cpython-38/matplotlib._qhull/build/qhull-2020.2:
src

/workspace/matplotlib__matplotlib__3.4/build/temp.linux-x86_64-cpython-38/matplotlib._qhull/build/qhull-2020.2/src:
libqhull_r

/workspace/matplotlib__matplotlib__3.4/build/temp.linux-x86_64-cpython-38/matplotlib._qhull/build/qhull-2020.2/src/libqhull_r:
geom2_r.o
geom_r.o
global_r.o
io_r.o
libqhull_r.o
mem_r.o
merge_r.o
poly2_r.o
poly_r.o
qset_r.o
random_r.o
rboxlib_r.o
stat_r.o
user_r.o
usermem_r.o
userprintf_r.o
userprintf_rbox_r.o

/workspace/matplotlib__matplotlib__3.4/build/temp.linux-x86_64-cpython-38/matplotlib._qhull/src:
qhull_wrap.o

/workspace/matplotlib__matplotlib__3.4/build/temp.linux-x86_64-cpython-38/matplotlib._tri:
src

/workspace/matplotlib__matplotlib__3.4/build/temp.linux-x86_64-cpython-38/matplotlib._tri/src:
tri

/workspace/matplotlib__matplotlib__3.4/build/temp.linux-x86_64-cpython-38/matplotlib._tri/src/tri:
_tri.o
_tri_wrapper.o

/workspace/matplotlib__matplotlib__3.4/build/temp.linux-x86_64-cpython-38/matplotlib._ttconv:
extern
src

/workspace/matplotlib__matplotlib__3.4/build/temp.linux-x86_64-cpython-38/matplotlib._ttconv/extern:
ttconv

/workspace/matplotlib__matplotlib__3.4/build/temp.linux-x86_64-cpython-38/matplotlib._ttconv/extern/ttconv:
pprdrv_tt.o
pprdrv_tt2.o
ttutil.o

/workspace/matplotlib__matplotlib__3.4/build/temp.linux-x86_64-cpython-38/matplotlib._ttconv/src:
_ttconv.o

/workspace/matplotlib__matplotlib__3.4/build/temp.linux-x86_64-cpython-38/matplotlib.backends._backend_agg:
extern
src

/workspace/matplotlib__matplotlib__3.4/build/temp.linux-x86_64-cpython-38/matplotlib.backends._backend_agg/extern:
agg24-svn

/workspace/matplotlib__matplotlib__3.4/build/temp.linux-x86_64-cpython-38/matplotlib.backends._backend_agg/extern/agg24-svn:
src

/workspace/matplotlib__matplotlib__3.4/build/temp.linux-x86_64-cpython-38/matplotlib.backends._backend_agg/extern/agg24-svn/src:
agg_bezier_arc.o
agg_curves.o
agg_image_filters.o
agg_trans_affine.o
agg_vcgen_contour.o
agg_vcgen_dash.o
agg_vcgen_stroke.o
agg_vpgen_segmentator.o

/workspace/matplotlib__matplotlib__3.4/build/temp.linux-x86_64-cpython-38/matplotlib.backends._backend_agg/src:
_backend_agg.o
_backend_agg_wrapper.o
checkdep_freetype2.o
py_converters.o

/workspace/matplotlib__matplotlib__3.4/build/temp.linux-x86_64-cpython-38/matplotlib.backends._tkagg:
src

/workspace/matplotlib__matplotlib__3.4/build/temp.linux-x86_64-cpython-38/matplotlib.backends._tkagg/src:
_tkagg.o

/workspace/matplotlib__matplotlib__3.4/build/temp.linux-x86_64-cpython-38/matplotlib.ft2font:
src

/workspace/matplotlib__matplotlib__3.4/build/temp.linux-x86_64-cpython-38/matplotlib.ft2font/src:
checkdep_freetype2.o
ft2font.o
ft2font_wrapper.o
py_converters.o

/workspace/matplotlib__matplotlib__3.4/ci:
check_wheel_licenses.py
silence

/workspace/matplotlib__matplotlib__3.4/doc:
Makefile
README.txt
_static
_templates
api
conf.py
devel
docutils.conf
index.rst
make.bat
matplotlibrc
missing-references.json
sphinxext
thirdpartypackages
users

/workspace/matplotlib__matplotlib__3.4/doc/_static:
John-hunter-crop-2.jpg
adjustText.png
anatomy.png
animatplot.png
basemap_contour1.png
blume_table_example.png
brokenaxes.png
cartopy_hurricane_katrina_01_00.png
color_zorder_A.png
color_zorder_B.png
contents.png
demo_axes_grid.png
demo_mplot3d.png
dna_features_viewer_screenshot.png
eeg_large.png
eeg_small.png
fa
favicon.ico
figpager.png
geoplot_nyc_traffic_tickets.png
ggplot.png
gif_attachment_example.png
gold_on_carbon.jpg
highlight_text_examples.png
holoviews.png
icon.png
logo2.png
logo2.svg
logo2_compressed.svg
logo_sidebar.png
logo_sidebar_horiz.png
markers
matplotlib-icon.svg
matplotlib_iterm2_demo.png
mpl-interactions-slider-animated.png
mpl-scatter-density.png
mpl.css
mpl_cheatsheet1.png
mpl_cheatsheet1_2x.png
mpl_template_example.png
navigation.png
numfocus_badge.png
numpngw_animated_example.png
pgf_fonts.pdf
pgf_fonts.png
pgf_preamble.pdf
pgf_preamble.png
pgf_texsystem.pdf
pgf_texsystem.png
plotnine.png
probscale_demo.png
readme_preview.png
ridge_map_white_mountains.png
seaborn.png
stinkbug.png
sviewgui_sample.png
toolbar.png
transforms.png
wcsaxes.jpg
webagg_screenshot.png
yellowbrick.png
zenodo_cache

/workspace/matplotlib__matplotlib__3.4/doc/_static/fa:
LICENSE
discourse-brands.svg
envelope-regular.svg
github-brands.svg
gitter-brands.svg
hashtag-solid.svg
plus-square-regular.svg
question-circle-regular.svg
stack-overflow-brands.svg

/workspace/matplotlib__matplotlib__3.4/doc/_static/markers:
m00.png
m01.png
m02.png
m03.png
m04.png
m05.png
m06.png
m07.png
m08.png
m09.png
m10.png
m11.png
m12.png
m13.png
m14.png
m15.png
m16.png
m17.png
m18.png
m19.png
m20.png
m21.png
m22.png
m23.png
m24.png
m25.png
m26.png
m27.png
m28.png
m29.png
m30.png
m31.png
m32.png
m33.png
m34.png
m35.png
m36.png
m37.png

/workspace/matplotlib__matplotlib__3.4/doc/_static/zenodo_cache:
1004650.svg
1098480.svg
11451.svg
1154287.svg
1189358.svg
1202050.svg
1202077.svg
12287.svg
12400.svg
1343133.svg
1420605.svg
1482098.svg
1482099.svg
15423.svg
248351.svg
2577644.svg
2669103.svg
2893252.svg
3264781.svg
32914.svg
3563226.svg
3633833.svg
3633844.svg
3695547.svg
3714460.svg
3898017.svg
3948793.svg
3984190.svg
4030140.svg
4268928.svg
44579.svg
4475376.svg
4638398.svg
4649959.svg
4743323.svg
5194481.svg
56926.svg
570311.svg
573577.svg
61948.svg

/workspace/matplotlib__matplotlib__3.4/doc/_templates:
autofunctions.rst
automodule.rst
autosummary.rst
cheatsheet_sidebar.html
donate_sidebar.html
function.rst
pagesource.html
search.html
sidebar_announcement.html
sidebar_versions.html

/workspace/matplotlib__matplotlib__3.4/doc/api:
_api_api.rst
_enums_api.rst
afm_api.rst
animation_api.rst
artist_api.rst
axes_api.rst
axis_api.rst
backend_agg_api.rst
backend_bases_api.rst
backend_cairo_api.rst
backend_gtk3_api.rst
backend_gtk4_api.rst
backend_managers_api.rst
backend_mixed_api.rst
backend_nbagg_api.rst
backend_pdf_api.rst
backend_pgf_api.rst
backend_ps_api.rst
backend_qt_api.rst
backend_svg_api.rst
backend_template_api.rst
backend_tk_api.rst
backend_tools_api.rst
backend_webagg_api.rst
backend_wx_api.rst
bezier_api.rst
blocking_input_api.rst
category_api.rst
cbook_api.rst
cm_api.rst
collections_api.rst
colorbar_api.rst
colors_api.rst
container_api.rst
contour_api.rst
dates_api.rst
docstring_api.rst
dviread.rst
figure_api.rst
font_manager_api.rst
fontconfig_pattern_api.rst
gridspec_api.rst
image_api.rst
index.rst
index_backend_api.rst
legend_api.rst
legend_handler_api.rst
lines_api.rst
markers_api.rst
mathtext_api.rst
matplotlib_configuration_api.rst
mlab_api.rst
next_api_changes
next_api_changes.rst
offsetbox_api.rst
patches_api.rst
path_api.rst
patheffects_api.rst
prev_api_changes
projections_api.rst
pyplot_summary.rst
quiver_api.rst
rcsetup_api.rst
sankey_api.rst
scale_api.rst
sphinxext_mathmpl_api.rst
sphinxext_plot_directive_api.rst
spines_api.rst
style_api.rst
table_api.rst
testing_api.rst
texmanager_api.rst
text_api.rst
textpath_api.rst
ticker_api.rst
tight_bbox_api.rst
tight_layout_api.rst
toolkits
transformations.rst
tri_api.rst
type1font.rst
units_api.rst
widgets_api.rst

/workspace/matplotlib__matplotlib__3.4/doc/api/next_api_changes:
README.rst
behavior
deprecations
development
removals

/workspace/matplotlib__matplotlib__3.4/doc/api/next_api_changes/behavior:
00001-ABC.rst
20715-JKS.rst
21026-DS.rst

/workspace/matplotlib__matplotlib__3.4/doc/api/next_api_changes/deprecations:
00001-ABC.rst
20995-AL.rst
21056-AL.rst
21187-AL.rst
21356-AL.rst
21412-AL.rst
ZZZZZ-AL.rst

/workspace/matplotlib__matplotlib__3.4/doc/api/next_api_changes/development:
00001-ABC.rst
21415-AL.rst

/workspace/matplotlib__matplotlib__3.4/doc/api/next_api_changes/removals:
00001-ABC.rst
20990-AL.rst

/workspace/matplotlib__matplotlib__3.4/doc/api/prev_api_changes:
api_changes_0.40.rst
api_changes_0.42.rst
api_changes_0.50.rst
api_changes_0.54.3.rst
api_changes_0.54.rst
api_changes_0.60.rst
api_changes_0.61.rst
api_changes_0.63.rst
api_changes_0.65.1.rst
api_changes_0.65.rst
api_changes_0.70.rst
api_changes_0.71.rst
api_changes_0.72.rst
api_changes_0.73.rst
api_changes_0.80.rst
api_changes_0.81.rst
api_changes_0.82.rst
api_changes_0.83.rst
api_changes_0.84.rst
api_changes_0.85.rst
api_changes_0.86.rst
api_changes_0.87.7.rst
api_changes_0.90.0.rst
api_changes_0.90.1.rst
api_changes_0.91.0.rst
api_changes_0.91.2.rst
api_changes_0.98.0.rst
api_changes_0.98.1.rst
api_changes_0.98.x.rst
api_changes_0.99.rst
api_changes_0.99.x.rst
api_changes_1.1.x.rst
api_changes_1.2.x.rst
api_changes_1.3.x.rst
api_changes_1.4.x.rst
api_changes_1.5.0.rst
api_changes_1.5.2.rst
api_changes_1.5.3.rst
api_changes_2.0.0.rst
api_changes_2.0.1.rst
api_changes_2.1.0.rst
api_changes_2.1.1.rst
api_changes_2.1.2.rst
api_changes_2.2.0.rst
api_changes_3.0.0.rst
api_changes_3.0.1.rst
api_changes_3.1.0.rst
api_changes_3.1.1.rst
api_changes_3.2.0
api_changes_3.2.0.rst
api_changes_3.3.0
api_changes_3.3.0.rst
api_changes_3.3.1.rst
api_changes_3.4.0
api_changes_3.4.0.rst
api_changes_3.4.2.rst
api_changes_3.5.0
api_changes_3.5.0.rst

/workspace/matplotlib__matplotlib__3.4/doc/api/prev_api_changes/api_changes_3.2.0:
behavior.rst
deprecations.rst
development.rst
removals.rst

/workspace/matplotlib__matplotlib__3.4/doc/api/prev_api_changes/api_changes_3.3.0:
behaviour.rst
deprecations.rst
development.rst
removals.rst

/workspace/matplotlib__matplotlib__3.4/doc/api/prev_api_changes/api_changes_3.4.0:
behaviour.rst
deprecations.rst
development.rst
removals.rst

/workspace/matplotlib__matplotlib__3.4/doc/api/prev_api_changes/api_changes_3.5.0:
behaviour.rst
deprecations.rst
development.rst
removals.rst

/workspace/matplotlib__matplotlib__3.4/doc/api/toolkits:
axes_grid.rst
axes_grid1.rst
axisartist.rst
mplot3d
mplot3d.rst

/workspace/matplotlib__matplotlib__3.4/doc/api/toolkits/mplot3d:
faq.rst

/workspace/matplotlib__matplotlib__3.4/doc/devel:
MEP
README.txt
coding_guide.rst
color_changes.rst
contributing.rst
dependencies.rst
development_setup.rst
documenting_mpl.rst
gitwash
index.rst
license.rst
min_dep_policy.rst
release_guide.rst
style_guide.rst
testing.rst
triage.rst

/workspace/matplotlib__matplotlib__3.4/doc/devel/MEP:
MEP08.rst
MEP09.rst
MEP10.rst
MEP11.rst
MEP12.rst
MEP13.rst
MEP14.rst
MEP15.rst
MEP19.rst
MEP21.rst
MEP22.rst
MEP23.rst
MEP24.rst
MEP25.rst
MEP26.rst
MEP27.rst
MEP28.rst
MEP29.rst
README.rst
index.rst
template.rst

/workspace/matplotlib__matplotlib__3.4/doc/devel/gitwash:
branch_dropdown.png
configure_git.rst
development_workflow.rst
dot2_dot3.rst
following_latest.rst
forking_button.png
forking_hell.rst
git_development.rst
git_install.rst
git_intro.rst
git_links.inc
git_resources.rst
index.rst
known_projects.inc
links.inc
maintainer_workflow.rst
patching.rst
pull_button.png
set_up_fork.rst
this_project.inc

/workspace/matplotlib__matplotlib__3.4/doc/sphinxext:
__init__.py
custom_roles.py
gallery_order.py
github.py
math_symbol_table.py
missing_references.py
mock_gui_toolkits.py
redirect_from.py
skip_deprecated.py

/workspace/matplotlib__matplotlib__3.4/doc/thirdpartypackages:
index.rst

/workspace/matplotlib__matplotlib__3.4/doc/users:
explain
faq
generate_credits.py
getting_started
github_stats.rst
index.rst
installing
next_whats_new
next_whats_new.rst
prev_whats_new
project
release_notes.rst
release_notes_next.rst
resources

/workspace/matplotlib__matplotlib__3.4/doc/users/explain:
backends.rst
event_handling.rst
fonts.rst
index.rst
interactive.rst
interactive_guide.rst
performance.rst

/workspace/matplotlib__matplotlib__3.4/doc/users/faq:
environment_variables_faq.rst
howto_faq.rst
index.rst
installing_faq.rst
troubleshooting_faq.rst

/workspace/matplotlib__matplotlib__3.4/doc/users/getting_started:
index.rst

/workspace/matplotlib__matplotlib__3.4/doc/users/installing:
index.rst
installing_source.rst

/workspace/matplotlib__matplotlib__3.4/doc/users/next_whats_new:
README.rst
extending_MarkerStyle.rst
marker_none.rst

/workspace/matplotlib__matplotlib__3.4/doc/users/prev_whats_new:
changelog.rst
dflt_style_changes.rst
github_stats_3.0.0.rst
github_stats_3.0.1.rst
github_stats_3.0.2.rst
github_stats_3.0.3.rst
github_stats_3.1.0.rst
github_stats_3.1.1.rst
github_stats_3.1.2.rst
github_stats_3.1.3.rst
github_stats_3.2.0.rst
github_stats_3.2.1.rst
github_stats_3.2.2.rst
github_stats_3.3.0.rst
github_stats_3.3.1.rst
github_stats_3.3.2.rst
github_stats_3.3.3.rst
github_stats_3.3.4.rst
github_stats_3.4.0.rst
github_stats_3.4.1.rst
github_stats_3.4.2.rst
whats_new_0.98.4.rst
whats_new_0.99.rst
whats_new_1.0.rst
whats_new_1.1.rst
whats_new_1.2.2.rst
whats_new_1.2.rst
whats_new_1.3.rst
whats_new_1.4.rst
whats_new_1.5.rst
whats_new_2.0.0.rst
whats_new_2.1.0.rst
whats_new_2.2.rst
whats_new_3.0.rst
whats_new_3.1.0.rst
whats_new_3.2.0.rst
whats_new_3.3.0.rst
whats_new_3.4.0.rst
whats_new_3.5.0.rst

/workspace/matplotlib__matplotlib__3.4/doc/users/project:
citing.rst
credits.rst
history.rst
index.rst
license.rst

/workspace/matplotlib__matplotlib__3.4/doc/users/resources:
index.rst

/workspace/matplotlib__matplotlib__3.4/examples:
README.txt
animation
axes_grid1
axisartist
color
event_handling
frontpage
images_contours_and_fields
lines_bars_and_markers
misc
mplot3d
pie_and_polar_charts
pyplots
scales
shapes_and_collections
showcase
specialty_plots
spines
statistics
style_sheets
subplots_axes_and_figures
text_labels_and_annotations
ticks
units
user_interfaces
userdemo
widgets

/workspace/matplotlib__matplotlib__3.4/examples/animation:
README.txt
animate_decay.py
animated_histogram.py
animation_demo.py
bayes_update.py
double_pendulum.py
dynamic_image.py
frame_grabbing_sgskip.py
pause_resume.py
rain.py
random_walk.py
simple_anim.py
strip_chart.py
unchained.py

/workspace/matplotlib__matplotlib__3.4/examples/axes_grid1:
README.txt
demo_anchored_direction_arrows.py
demo_axes_divider.py
demo_axes_grid.py
demo_axes_grid2.py
demo_axes_hbox_divider.py
demo_axes_rgb.py
demo_colorbar_of_inset_axes.py
demo_colorbar_with_axes_divider.py
demo_colorbar_with_inset_locator.py
demo_edge_colorbar.py
demo_fixed_size_axes.py
demo_imagegrid_aspect.py
inset_locator_demo.py
inset_locator_demo2.py
make_room_for_ylabel_using_axesgrid.py
parasite_simple.py
parasite_simple2.py
scatter_hist_locatable_axes.py
simple_anchored_artists.py
simple_axes_divider1.py
simple_axes_divider3.py
simple_axesgrid.py
simple_axesgrid2.py
simple_axisline4.py
simple_colorbar.py

/workspace/matplotlib__matplotlib__3.4/examples/axisartist:
README.txt
axis_direction.py
demo_axis_direction.py
demo_axisline_style.py
demo_curvelinear_grid.py
demo_curvelinear_grid2.py
demo_floating_axes.py
demo_floating_axis.py
demo_parasite_axes.py
demo_parasite_axes2.py
demo_ticklabel_alignment.py
demo_ticklabel_direction.py
simple_axis_direction01.py
simple_axis_direction03.py
simple_axis_pad.py
simple_axisartist1.py
simple_axisline.py
simple_axisline3.py

/workspace/matplotlib__matplotlib__3.4/examples/color:
README.txt
color_by_yvalue.py
color_cycle_default.py
color_demo.py
colorbar_basics.py
colormap_reference.py
custom_cmap.py
named_colors.py

/workspace/matplotlib__matplotlib__3.4/examples/event_handling:
README.txt
close_event.py
coords_demo.py
data_browser.py
figure_axes_enter_leave.py
ginput_manual_clabel_sgskip.py
image_slices_viewer.py
keypress_demo.py
lasso_demo.py
legend_picking.py
looking_glass.py
path_editor.py
pick_event_demo.py
pick_event_demo2.py
poly_editor.py
pong_sgskip.py
resample.py
timers.py
trifinder_event_demo.py
viewlims.py
zoom_window.py

/workspace/matplotlib__matplotlib__3.4/examples/frontpage:
3D.py
README.txt
contour_frontpage.py
histogram.py
membrane.py

/workspace/matplotlib__matplotlib__3.4/examples/images_contours_and_fields:
README.txt
affine_image.py
barb_demo.py
barcode_demo.py
colormap_interactive_adjustment.py
colormap_normalizations.py
colormap_normalizations_symlognorm.py
contour_corner_mask.py
contour_demo.py
contour_image.py
contour_label_demo.py
contourf_demo.py
contourf_hatching.py
contourf_log.py
contours_in_optimization_demo.py
demo_bboximage.py
figimage_demo.py
image_annotated_heatmap.py
image_antialiasing.py
image_clip_path.py
image_demo.py
image_masked.py
image_nonuniform.py
image_transparency_blend.py
image_zcoord.py
interpolation_methods.py
irregulardatagrid.py
layer_images.py
matshow.py
multi_image.py
pcolor_demo.py
pcolormesh_grids.py
pcolormesh_levels.py
plot_streamplot.py
quadmesh_demo.py
quiver_demo.py
quiver_simple_demo.py
shading_example.py
specgram_demo.py
spy_demos.py
tricontour_demo.py
tricontour_smooth_delaunay.py
tricontour_smooth_user.py
trigradient_demo.py
triinterp_demo.py
tripcolor_demo.py
triplot_demo.py
watermark_image.py

/workspace/matplotlib__matplotlib__3.4/examples/lines_bars_and_markers:
README.txt
bar_label_demo.py
bar_stacked.py
barchart.py
barh.py
broken_barh.py
capstyle.py
categorical_variables.py
cohere.py
csd_demo.py
curve_error_band.py
errorbar_limits_simple.py
errorbar_subsample.py
eventcollection_demo.py
eventplot_demo.py
fill.py
fill_between_alpha.py
fill_between_demo.py
fill_betweenx_demo.py
filled_step.py
gradient_bar.py
hat_graph.py
horizontal_barchart_distribution.py
joinstyle.py
line_demo_dash_control.py
lines_with_ticks_demo.py
linestyles.py
marker_reference.py
markevery_demo.py
markevery_prop_cycle.py
masked_demo.py
multicolored_line.py
multivariate_marker_plot.py
psd_demo.py
scatter_custom_symbol.py
scatter_demo2.py
scatter_hist.py
scatter_masked.py
scatter_piecharts.py
scatter_star_poly.py
scatter_symbol.py
scatter_with_legend.py
simple_plot.py
span_regions.py
spectrum_demo.py
stackplot_demo.py
stairs_demo.py
stem_plot.py
step_demo.py
timeline.py
vline_hline_demo.py
xcorr_acorr_demo.py

/workspace/matplotlib__matplotlib__3.4/examples/misc:
README.txt
anchored_artists.py
bbox_intersect.py
contour_manual.py
coords_report.py
cursor_demo.py
custom_projection.py
customize_rc.py
demo_agg_filter.py
demo_ribbon_box.py
fill_spiral.py
findobj_demo.py
font_indexing.py
ftface_props.py
histogram_path.py
hyperlinks_sgskip.py
image_thumbnail_sgskip.py
keyword_plotting.py
load_converter.py
logos2.py
multipage_pdf.py
multiprocess_sgskip.py
packed_bubbles.py
patheffect_demo.py
print_stdout_sgskip.py
pythonic_matplotlib.py
rasterization_demo.py
set_and_get.py
svg_filter_line.py
svg_filter_pie.py
table_demo.py
tickedstroke_demo.py
transoffset.py
zorder_demo.py

/workspace/matplotlib__matplotlib__3.4/examples/mplot3d:
2dcollections3d.py
3d_bars.py
README.txt
bars3d.py
box3d.py
contour3d.py
contour3d_2.py
contour3d_3.py
contourf3d.py
contourf3d_2.py
custom_shaded_3d_surface.py
errorbar3d.py
hist3d.py
lines3d.py
lorenz_attractor.py
mixed_subplots.py
offset.py
pathpatch3d.py
polys3d.py
quiver3d.py
rotate_axes3d_sgskip.py
scatter3d.py
stem3d_demo.py
subplot3d.py
surface3d.py
surface3d_2.py
surface3d_3.py
surface3d_radial.py
text3d.py
tricontour3d.py
tricontourf3d.py
trisurf3d.py
trisurf3d_2.py
voxels.py
voxels_numpy_logo.py
voxels_rgb.py
voxels_torus.py
wire3d.py
wire3d_animation_sgskip.py
wire3d_zero_stride.py

/workspace/matplotlib__matplotlib__3.4/examples/pie_and_polar_charts:
README.txt
bar_of_pie.py
nested_pie.py
pie_and_donut_labels.py
pie_demo2.py
pie_features.py
polar_bar.py
polar_demo.py
polar_legend.py
polar_scatter.py

/workspace/matplotlib__matplotlib__3.4/examples/pyplots:
README.txt
align_ylabels.py
annotate_transform.py
annotation_basic.py
annotation_polar.py
auto_subplots_adjust.py
axline.py
boxplot_demo_pyplot.py
dollar_ticks.py
fig_axes_customize_simple.py
fig_axes_labels_simple.py
fig_x.py
matplotlibrc
pyplot_formatstr.py
pyplot_mathtext.py
pyplot_simple.py
pyplot_text.py
pyplot_three.py
pyplot_two_subplots.py
text_commands.py
text_layout.py

/workspace/matplotlib__matplotlib__3.4/examples/scales:
README.txt
aspect_loglog.py
custom_scale.py
log_bar.py
log_demo.py
log_test.py
logit_demo.py
power_norm.py
scales.py
symlog_demo.py

/workspace/matplotlib__matplotlib__3.4/examples/shapes_and_collections:
README.txt
arrow_guide.py
artist_reference.py
collections.py
compound_path.py
dolphin.py
donut.py
ellipse_collection.py
ellipse_demo.py
fancybox_demo.py
hatch_demo.py
hatch_style_reference.py
line_collection.py
patch_collection.py
path_patch.py
quad_bezier.py
scatter.py

/workspace/matplotlib__matplotlib__3.4/examples/showcase:
README.txt
anatomy.py
bachelors_degrees_by_gender.py
firefox.py
integral.py
mandelbrot.py
xkcd.py

/workspace/matplotlib__matplotlib__3.4/examples/specialty_plots:
README.txt
advanced_hillshading.py
anscombe.py
hinton_demo.py
leftventricle_bulleye.py
mri_demo.py
mri_with_eeg.py
radar_chart.py
sankey_basics.py
sankey_links.py
sankey_rankine.py
skewt.py
topographic_hillshading.py

/workspace/matplotlib__matplotlib__3.4/examples/spines:
README.txt
centered_spines_with_arrows.py
multiple_yaxis_with_spines.py
spine_placement_demo.py
spines.py
spines_bounds.py
spines_dropped.py

/workspace/matplotlib__matplotlib__3.4/examples/statistics:
README.txt
barchart_demo.py
boxplot.py
boxplot_color.py
boxplot_demo.py
boxplot_vs_violin.py
bxp.py
confidence_ellipse.py
customized_violin.py
errorbar.py
errorbar_features.py
errorbar_limits.py
errorbars_and_boxes.py
hexbin_demo.py
hist.py
histogram_cumulative.py
histogram_features.py
histogram_histtypes.py
histogram_multihist.py
multiple_histograms_side_by_side.py
time_series_histogram.py
violinplot.py

/workspace/matplotlib__matplotlib__3.4/examples/style_sheets:
README.txt
bmh.py
dark_background.py
fivethirtyeight.py
ggplot.py
grayscale.py
plot_solarizedlight2.py
style_sheets_reference.py

/workspace/matplotlib__matplotlib__3.4/examples/subplots_axes_and_figures:
README.txt
align_labels_demo.py
axes_box_aspect.py
axes_demo.py
axes_margins.py
axes_props.py
axes_zoom_effect.py
axhspan_demo.py
axis_equal_demo.py
axis_labels_demo.py
broken_axis.py
colorbar_placement.py
custom_figure_class.py
demo_constrained_layout.py
demo_tight_layout.py
fahrenheit_celsius_scales.py
figure_size_units.py
figure_title.py
ganged_plots.py
geo_demo.py
gridspec_and_subplots.py
gridspec_multicolumn.py
gridspec_nested.py
invert_axes.py
multiple_figs_demo.py
secondary_axis.py
share_axis_lims_views.py
shared_axis_demo.py
subfigures.py
subplot.py
subplots_adjust.py
subplots_demo.py
two_scales.py
zoom_inset_axes.py

/workspace/matplotlib__matplotlib__3.4/examples/text_labels_and_annotations:
README.txt
accented_text.py
angle_annotation.py
annotation_demo.py
arrow_demo.py
autowrap.py
custom_legends.py
date.py
date_index_formatter.py
demo_annotation_box.py
demo_text_path.py
demo_text_rotation_mode.py
dfrac_demo.py
engineering_formatter.py
fancyarrow_demo.py
fancytextbox_demo.py
figlegend_demo.py
font_family_rc_sgskip.py
font_file.py
font_table.py
fonts_demo.py
fonts_demo_kw.py
label_subplots.py
legend.py
legend_demo.py
line_with_text.py
mathtext_asarray.py
mathtext_demo.py
mathtext_examples.py
mathtext_fontfamily_example.py
multiline.py
placing_text_boxes.py
rainbow_text.py
stix_fonts_demo.py
tex_demo.py
text_alignment.py
text_fontdict.py
text_rotation.py
text_rotation_relative_to_line.py
titles_demo.py
unicode_minus.py
usetex_baseline_test.py
usetex_fonteffects.py
watermark_text.py

/workspace/matplotlib__matplotlib__3.4/examples/ticks:
README.txt
auto_ticks.py
centered_ticklabels.py
colorbar_tick_labelling_demo.py
custom_ticker1.py
date_concise_formatter.py
date_demo_convert.py
date_demo_rrule.py
date_index_formatter2.py
date_precision_and_epochs.py
major_minor_demo.py
scalarformatter.py
tick-formatters.py
tick-locators.py
tick_label_right.py
tick_labels_from_values.py
tick_xlabel_top.py
ticklabels_rotation.py

/workspace/matplotlib__matplotlib__3.4/examples/units:
README.txt
annotate_with_units.py
artist_tests.py
bar_demo2.py
bar_unit_demo.py
basic_units.py
ellipse_with_units.py
evans_test.py
radian_demo.py
units_sample.py
units_scatter.py

/workspace/matplotlib__matplotlib__3.4/examples/user_interfaces:
README.txt
canvasagg.py
embedding_in_gtk3_panzoom_sgskip.py
embedding_in_gtk3_sgskip.py
embedding_in_gtk4_panzoom_sgskip.py
embedding_in_gtk4_sgskip.py
embedding_in_qt_sgskip.py
embedding_in_tk_sgskip.py
embedding_in_wx2_sgskip.py
embedding_in_wx3_sgskip.py
embedding_in_wx4_sgskip.py
embedding_in_wx5_sgskip.py
embedding_webagg_sgskip.py
fourier_demo_wx_sgskip.py
gtk3_spreadsheet_sgskip.py
gtk4_spreadsheet_sgskip.py
mathtext_wx_sgskip.py
mpl_with_glade3.glade
mpl_with_glade3_sgskip.py
pylab_with_gtk3_sgskip.py
pylab_with_gtk4_sgskip.py
svg_histogram_sgskip.py
svg_tooltip_sgskip.py
toolmanager_sgskip.py
web_application_server_sgskip.py
wxcursor_demo_sgskip.py

/workspace/matplotlib__matplotlib__3.4/examples/userdemo:
README.txt
anchored_box04.py
annotate_explain.py
annotate_simple01.py
annotate_simple02.py
annotate_simple03.py
annotate_simple04.py
annotate_simple_coord01.py
annotate_simple_coord02.py
annotate_simple_coord03.py
annotate_text_arrow.py
connect_simple01.py
connectionstyle_demo.py
custom_boxstyle01.py
demo_gridspec01.py
demo_gridspec03.py
demo_gridspec06.py
pgf_fonts.py
pgf_preamble_sgskip.py
pgf_texsystem.py
simple_annotate01.py
simple_legend01.py
simple_legend02.py

/workspace/matplotlib__matplotlib__3.4/examples/widgets:
README.txt
annotated_cursor.py
buttons.py
check_buttons.py
cursor.py
lasso_selector_demo_sgskip.py
menu.py
mouse_cursor.py
multicursor.py
polygon_selector_demo.py
radio_buttons.py
range_slider.py
rectangle_selector.py
slider_demo.py
slider_snap_demo.py
span_selector.py
textbox.py

/workspace/matplotlib__matplotlib__3.4/extern:
agg24-svn
ttconv

/workspace/matplotlib__matplotlib__3.4/extern/agg24-svn:
include
src

/workspace/matplotlib__matplotlib__3.4/extern/agg24-svn/include:
agg_alpha_mask_u8.h
agg_arc.h
agg_array.h
agg_arrowhead.h
agg_basics.h
agg_bezier_arc.h
agg_bitset_iterator.h
agg_blur.h
agg_bounding_rect.h
agg_bspline.h
agg_clip_liang_barsky.h
agg_color_gray.h
agg_color_rgba.h
agg_config.h
agg_conv_adaptor_vcgen.h
agg_conv_adaptor_vpgen.h
agg_conv_bspline.h
agg_conv_clip_polygon.h
agg_conv_clip_polyline.h
agg_conv_close_polygon.h
agg_conv_concat.h
agg_conv_contour.h
agg_conv_curve.h
agg_conv_dash.h
agg_conv_gpc.h
agg_conv_marker.h
agg_conv_marker_adaptor.h
agg_conv_segmentator.h
agg_conv_shorten_path.h
agg_conv_smooth_poly1.h
agg_conv_stroke.h
agg_conv_transform.h
agg_conv_unclose_polygon.h
agg_curves.h
agg_dda_line.h
agg_ellipse.h
agg_ellipse_bresenham.h
agg_embedded_raster_fonts.h
agg_font_cache_manager.h
agg_font_cache_manager2.h
agg_gamma_functions.h
agg_gamma_lut.h
agg_glyph_raster_bin.h
agg_gradient_lut.h
agg_gsv_text.h
agg_image_accessors.h
agg_image_filters.h
agg_line_aa_basics.h
agg_math.h
agg_math_stroke.h
agg_path_length.h
agg_path_storage.h
agg_path_storage_integer.h
agg_pattern_filters_rgba.h
agg_pixfmt_amask_adaptor.h
agg_pixfmt_base.h
agg_pixfmt_gray.h
agg_pixfmt_rgb.h
agg_pixfmt_rgb_packed.h
agg_pixfmt_rgba.h
agg_pixfmt_transposer.h
agg_rasterizer_cells_aa.h
agg_rasterizer_compound_aa.h
agg_rasterizer_outline.h
agg_rasterizer_outline_aa.h
agg_rasterizer_scanline_aa.h
agg_rasterizer_scanline_aa_nogamma.h
agg_rasterizer_sl_clip.h
agg_renderer_base.h
agg_renderer_markers.h
agg_renderer_mclip.h
agg_renderer_outline_aa.h
agg_renderer_outline_image.h
agg_renderer_primitives.h
agg_renderer_raster_text.h
agg_renderer_scanline.h
agg_rendering_buffer.h
agg_rendering_buffer_dynarow.h
agg_rounded_rect.h
agg_scanline_bin.h
agg_scanline_boolean_algebra.h
agg_scanline_p.h
agg_scanline_storage_aa.h
agg_scanline_storage_bin.h
agg_scanline_u.h
agg_shorten_path.h
agg_simul_eq.h
agg_span_allocator.h
agg_span_converter.h
agg_span_gouraud.h
agg_span_gouraud_gray.h
agg_span_gouraud_rgba.h
agg_span_gradient.h
agg_span_gradient_alpha.h
agg_span_gradient_contour.h
agg_span_gradient_image.h
agg_span_image_filter.h
agg_span_image_filter_gray.h
agg_span_image_filter_rgb.h
agg_span_image_filter_rgba.h
agg_span_interpolator_adaptor.h
agg_span_interpolator_linear.h
agg_span_interpolator_persp.h
agg_span_interpolator_trans.h
agg_span_pattern_gray.h
agg_span_pattern_rgb.h
agg_span_pattern_rgba.h
agg_span_solid.h
agg_span_subdiv_adaptor.h
agg_trans_affine.h
agg_trans_bilinear.h
agg_trans_double_path.h
agg_trans_perspective.h
agg_trans_single_path.h
agg_trans_viewport.h
agg_trans_warp_magnifier.h
agg_vcgen_bspline.h
agg_vcgen_contour.h
agg_vcgen_dash.h
agg_vcgen_markers_term.h
agg_vcgen_smooth_poly1.h
agg_vcgen_stroke.h
agg_vcgen_vertex_sequence.h
agg_vertex_sequence.h
agg_vpgen_clip_polygon.h
agg_vpgen_clip_polyline.h
agg_vpgen_segmentator.h
ctrl
platform
util

/workspace/matplotlib__matplotlib__3.4/extern/agg24-svn/include/ctrl:
agg_bezier_ctrl.h
agg_cbox_ctrl.h
agg_ctrl.h
agg_gamma_ctrl.h
agg_gamma_spline.h
agg_polygon_ctrl.h
agg_rbox_ctrl.h
agg_scale_ctrl.h
agg_slider_ctrl.h
agg_spline_ctrl.h

/workspace/matplotlib__matplotlib__3.4/extern/agg24-svn/include/platform:
agg_platform_support.h
mac
win32

/workspace/matplotlib__matplotlib__3.4/extern/agg24-svn/include/platform/mac:
agg_mac_pmap.h

/workspace/matplotlib__matplotlib__3.4/extern/agg24-svn/include/platform/win32:
agg_win32_bmp.h

/workspace/matplotlib__matplotlib__3.4/extern/agg24-svn/include/util:
agg_color_conv.h
agg_color_conv_rgb16.h
agg_color_conv_rgb8.h

/workspace/matplotlib__matplotlib__3.4/extern/agg24-svn/src:
ChangeLog
agg_arc.cpp
agg_arrowhead.cpp
agg_bezier_arc.cpp
agg_bspline.cpp
agg_color_rgba.cpp
agg_curves.cpp
agg_embedded_raster_fonts.cpp
agg_gsv_text.cpp
agg_image_filters.cpp
agg_line_aa_basics.cpp
agg_line_profile_aa.cpp
agg_rounded_rect.cpp
agg_sqrt_tables.cpp
agg_trans_affine.cpp
agg_trans_double_path.cpp
agg_trans_single_path.cpp
agg_trans_warp_magnifier.cpp
agg_vcgen_bspline.cpp
agg_vcgen_contour.cpp
agg_vcgen_dash.cpp
agg_vcgen_markers_term.cpp
agg_vcgen_smooth_poly1.cpp
agg_vcgen_stroke.cpp
agg_vpgen_clip_polygon.cpp
agg_vpgen_clip_polyline.cpp
agg_vpgen_segmentator.cpp
authors
copying
ctrl
platform

/workspace/matplotlib__matplotlib__3.4/extern/agg24-svn/src/ctrl:
agg_bezier_ctrl.cpp
agg_cbox_ctrl.cpp
agg_gamma_ctrl.cpp
agg_gamma_spline.cpp
agg_polygon_ctrl.cpp
agg_rbox_ctrl.cpp
agg_scale_ctrl.cpp
agg_slider_ctrl.cpp
agg_spline_ctrl.cpp

/workspace/matplotlib__matplotlib__3.4/extern/agg24-svn/src/platform:
AmigaOS
BeOS
X11
mac
sdl
win32

/workspace/matplotlib__matplotlib__3.4/extern/agg24-svn/src/platform/AmigaOS:
agg_platform_support.cpp

/workspace/matplotlib__matplotlib__3.4/extern/agg24-svn/src/platform/BeOS:
agg_platform_support.cpp

/workspace/matplotlib__matplotlib__3.4/extern/agg24-svn/src/platform/X11:
agg_platform_support.cpp

/workspace/matplotlib__matplotlib__3.4/extern/agg24-svn/src/platform/mac:
agg_mac_pmap.cpp
agg_platform_support.cpp

/workspace/matplotlib__matplotlib__3.4/extern/agg24-svn/src/platform/sdl:
agg_platform_support.cpp

/workspace/matplotlib__matplotlib__3.4/extern/agg24-svn/src/platform/win32:
agg_platform_support.cpp
agg_win32_bmp.cpp

/workspace/matplotlib__matplotlib__3.4/extern/ttconv:
pprdrv.h
pprdrv_tt.cpp
pprdrv_tt2.cpp
truetype.h
ttutil.cpp

/workspace/matplotlib__matplotlib__3.4/lib:
matplotlib
matplotlib.egg-info
mpl_toolkits
pylab.py

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib:
__init__.py
_animation_data.py
_api
_blocking_input.py
_c_internal_utils.cpython-38-x86_64-linux-gnu.so
_cm.py
_cm_listed.py
_color_data.py
_constrained_layout.py
_contour.cpython-38-x86_64-linux-gnu.so
_enums.py
_image.cpython-38-x86_64-linux-gnu.so
_internal_utils.py
_layoutgrid.py
_mathtext.py
_mathtext_data.py
_path.cpython-38-x86_64-linux-gnu.so
_pylab_helpers.py
_qhull.cpython-38-x86_64-linux-gnu.so
_text_helpers.py
_tri.cpython-38-x86_64-linux-gnu.so
_ttconv.cpython-38-x86_64-linux-gnu.so
_version.py
afm.py
animation.py
artist.py
axes
axis.py
backend_bases.py
backend_managers.py
backend_tools.py
backends
bezier.py
blocking_input.py
category.py
cbook
cm.py
collections.py
colorbar.py
colors.py
container.py
contour.py
dates.py
docstring.py
dviread.py
figure.py
font_manager.py
fontconfig_pattern.py
ft2font.cpython-38-x86_64-linux-gnu.so
gridspec.py
hatch.py
image.py
legend.py
legend_handler.py
lines.py
markers.py
mathtext.py
mlab.py
mpl-data
offsetbox.py
patches.py
path.py
patheffects.py
projections
pylab.py
pyplot.py
quiver.py
rcsetup.py
sankey.py
scale.py
sphinxext
spines.py
stackplot.py
streamplot.py
style
table.py
testing
tests
texmanager.py
text.py
textpath.py
ticker.py
tight_bbox.py
tight_layout.py
transforms.py
tri
type1font.py
units.py
widgets.py

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/_api:
__init__.py
deprecation.py

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/axes:
__init__.py
_axes.py
_base.py
_secondary_axes.py
_subplots.py

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/backends:
__init__.py
_backend_agg.cpython-38-x86_64-linux-gnu.so
_backend_gtk.py
_backend_pdf_ps.py
_backend_tk.py
_tkagg.cpython-38-x86_64-linux-gnu.so
backend_agg.py
backend_cairo.py
backend_gtk3.py
backend_gtk3agg.py
backend_gtk3cairo.py
backend_gtk4.py
backend_gtk4agg.py
backend_gtk4cairo.py
backend_macosx.py
backend_mixed.py
backend_nbagg.py
backend_pdf.py
backend_pgf.py
backend_ps.py
backend_qt.py
backend_qt5.py
backend_qt5agg.py
backend_qt5cairo.py
backend_qtagg.py
backend_qtcairo.py
backend_svg.py
backend_template.py
backend_tkagg.py
backend_tkcairo.py
backend_webagg.py
backend_webagg_core.py
backend_wx.py
backend_wxagg.py
backend_wxcairo.py
qt_compat.py
qt_editor
web_backend

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/backends/qt_editor:
__init__.py
_formlayout.py
figureoptions.py

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/backends/web_backend:
all_figures.html
css
ipython_inline_figure.html
js
nbagg_uat.ipynb
package.json
single_figure.html

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/backends/web_backend/css:
boilerplate.css
fbm.css
mpl.css
page.css

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/backends/web_backend/js:
mpl.js
mpl_tornado.js
nbagg_mpl.js

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/cbook:
__init__.py
deprecation.py

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/mpl-data:
fonts
images
kpsewhich.lua
matplotlibrc
plot_directive
sample_data
stylelib

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/mpl-data/fonts:
afm
pdfcorefonts
ttf

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/mpl-data/fonts/afm:
cmex10.afm
cmmi10.afm
cmr10.afm
cmsy10.afm
cmtt10.afm
pagd8a.afm
pagdo8a.afm
pagk8a.afm
pagko8a.afm
pbkd8a.afm
pbkdi8a.afm
pbkl8a.afm
pbkli8a.afm
pcrb8a.afm
pcrbo8a.afm
pcrr8a.afm
pcrro8a.afm
phvb8a.afm
phvb8an.afm
phvbo8a.afm
phvbo8an.afm
phvl8a.afm
phvlo8a.afm
phvr8a.afm
phvr8an.afm
phvro8a.afm
phvro8an.afm
pncb8a.afm
pncbi8a.afm
pncr8a.afm
pncri8a.afm
pplb8a.afm
pplbi8a.afm
pplr8a.afm
pplri8a.afm
psyr.afm
ptmb8a.afm
ptmbi8a.afm
ptmr8a.afm
ptmri8a.afm
putb8a.afm
putbi8a.afm
putr8a.afm
putri8a.afm
pzcmi8a.afm
pzdr.afm

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/mpl-data/fonts/pdfcorefonts:
Courier-Bold.afm
Courier-BoldOblique.afm
Courier-Oblique.afm
Courier.afm
Helvetica-Bold.afm
Helvetica-BoldOblique.afm
Helvetica-Oblique.afm
Helvetica.afm
Symbol.afm
Times-Bold.afm
Times-BoldItalic.afm
Times-Italic.afm
Times-Roman.afm
ZapfDingbats.afm
readme.txt

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/mpl-data/fonts/ttf:
DejaVuSans-Bold.ttf
DejaVuSans-BoldOblique.ttf
DejaVuSans-Oblique.ttf
DejaVuSans.ttf
DejaVuSansDisplay.ttf
DejaVuSansMono-Bold.ttf
DejaVuSansMono-BoldOblique.ttf
DejaVuSansMono-Oblique.ttf
DejaVuSansMono.ttf
DejaVuSerif-Bold.ttf
DejaVuSerif-BoldItalic.ttf
DejaVuSerif-Italic.ttf
DejaVuSerif.ttf
DejaVuSerifDisplay.ttf
LICENSE_DEJAVU
LICENSE_STIX
STIXGeneral.ttf
STIXGeneralBol.ttf
STIXGeneralBolIta.ttf
STIXGeneralItalic.ttf
STIXNonUni.ttf
STIXNonUniBol.ttf
STIXNonUniBolIta.ttf
STIXNonUniIta.ttf
STIXSizFiveSymReg.ttf
STIXSizFourSymBol.ttf
STIXSizFourSymReg.ttf
STIXSizOneSymBol.ttf
STIXSizOneSymReg.ttf
STIXSizThreeSymBol.ttf
STIXSizThreeSymReg.ttf
STIXSizTwoSymBol.ttf
STIXSizTwoSymReg.ttf
cmb10.ttf
cmex10.ttf
cmmi10.ttf
cmr10.ttf
cmss10.ttf
cmsy10.ttf
cmtt10.ttf

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/mpl-data/images:
back-symbolic.svg
back.pdf
back.png
back.svg
back_large.png
filesave-symbolic.svg
filesave.pdf
filesave.png
filesave.svg
filesave_large.png
forward-symbolic.svg
forward.pdf
forward.png
forward.svg
forward_large.png
hand.pdf
hand.png
hand.svg
help-symbolic.svg
help.pdf
help.png
help.svg
help_large.png
home-symbolic.svg
home.pdf
home.png
home.svg
home_large.png
matplotlib.pdf
matplotlib.png
matplotlib.svg
matplotlib_128.ppm
matplotlib_large.png
move-symbolic.svg
move.pdf
move.png
move.svg
move_large.png
qt4_editor_options.pdf
qt4_editor_options.png
qt4_editor_options.svg
qt4_editor_options_large.png
subplots-symbolic.svg
subplots.pdf
subplots.png
subplots.svg
subplots_large.png
zoom_to_rect-symbolic.svg
zoom_to_rect.pdf
zoom_to_rect.png
zoom_to_rect.svg
zoom_to_rect_large.png

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/mpl-data/plot_directive:
plot_directive.css

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/mpl-data/sample_data:
Minduka_Present_Blue_Pack.png
README.txt
axes_grid
data_x_x2_x3.csv
eeg.dat
embedding_in_wx3.xrc
goog.npz
grace_hopper.jpg
jacksboro_fault_dem.npz
logo2.png
membrane.dat
msft.csv
percent_bachelors_degrees_women_usa.csv
s1045.ima.gz
topobathy.npz

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/mpl-data/sample_data/axes_grid:
bivariate_normal.npy

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/mpl-data/stylelib:
Solarize_Light2.mplstyle
_classic_test_patch.mplstyle
_mpl-gallery-nogrid.mplstyle
_mpl-gallery.mplstyle
bmh.mplstyle
classic.mplstyle
dark_background.mplstyle
fast.mplstyle
fivethirtyeight.mplstyle
ggplot.mplstyle
grayscale.mplstyle
seaborn-bright.mplstyle
seaborn-colorblind.mplstyle
seaborn-dark-palette.mplstyle
seaborn-dark.mplstyle
seaborn-darkgrid.mplstyle
seaborn-deep.mplstyle
seaborn-muted.mplstyle
seaborn-notebook.mplstyle
seaborn-paper.mplstyle
seaborn-pastel.mplstyle
seaborn-poster.mplstyle
seaborn-talk.mplstyle
seaborn-ticks.mplstyle
seaborn-white.mplstyle
seaborn-whitegrid.mplstyle
seaborn.mplstyle
tableau-colorblind10.mplstyle

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/projections:
__init__.py
geo.py
polar.py

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/sphinxext:
__init__.py
mathmpl.py
plot_directive.py

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/style:
__init__.py
core.py

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/testing:
__init__.py
compare.py
conftest.py
decorators.py
exceptions.py
jpl_units
widgets.py

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/testing/jpl_units:
Duration.py
Epoch.py
EpochConverter.py
StrConverter.py
UnitDbl.py
UnitDblConverter.py
UnitDblFormatter.py
__init__.py

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tests:
Courier10PitchBT-Bold.pfb
README
__init__.py
baseline_images
cmr10.pfb
conftest.py
mpltest.ttf
test_afm.py
test_agg.py
test_agg_filter.py
test_animation.py
test_api.py
test_arrow_patches.py
test_artist.py
test_axes.py
test_backend_bases.py
test_backend_cairo.py
test_backend_gtk3.py
test_backend_nbagg.py
test_backend_pdf.py
test_backend_pgf.py
test_backend_ps.py
test_backend_qt.py
test_backend_svg.py
test_backend_tk.py
test_backend_tools.py
test_backend_webagg.py
test_backends_interactive.py
test_basic.py
test_bbox_tight.py
test_category.py
test_cbook.py
test_collections.py
test_colorbar.py
test_colors.py
test_compare_images.py
test_constrainedlayout.py
test_container.py
test_contour.py
test_cycles.py
test_dates.py
test_determinism.py
test_dviread.py
test_figure.py
test_font_manager.py
test_fontconfig_pattern.py
test_getattr.py
test_gridspec.py
test_image.py
test_legend.py
test_lines.py
test_marker.py
test_mathtext.py
test_matplotlib.py
test_mlab.py
test_nbagg_01.ipynb
test_offsetbox.py
test_patches.py
test_path.py
test_patheffects.py
test_pickle.py
test_png.py
test_polar.py
test_preprocess_data.py
test_pyplot.py
test_quiver.py
test_rcparams.py
test_sankey.py
test_scale.py
test_simplification.py
test_skew.py
test_sphinxext.py
test_spines.py
test_streamplot.py
test_style.py
test_subplots.py
test_table.py
test_testing.py
test_texmanager.py
test_text.py
test_textpath.py
test_ticker.py
test_tightlayout.py
test_transforms.py
test_triangulation.py
test_ttconv.py
test_type1font.py
test_units.py
test_usetex.py
test_widgets.py
tinypages

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tests/baseline_images:
dviread
pngsuite
test_agg
test_agg_filter
test_arrow_patches
test_artist
test_axes
test_backend_pdf
test_backend_pgf
test_backend_ps
test_backend_svg
test_bbox_tight
test_collections
test_colorbar
test_colors
test_compare_images
test_constrainedlayout
test_contour
test_dates
test_figure
test_image
test_legend
test_lines
test_mathtext
test_offsetbox
test_patches
test_path
test_patheffects
test_pickle
test_png
test_polar
test_quiver
test_scale
test_simplification
test_skew
test_spines
test_streamplot
test_subplots
test_table
test_text
test_tightlayout
test_transforms
test_triangulation
test_ttconv
test_units
test_usetex
test_widgets

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tests/baseline_images/dviread:
test.dvi
test.json
test.map
test.tex

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tests/baseline_images/pngsuite:
basn0g01.png
basn0g02.png
basn0g04.png
basn0g08.png
basn0g16.png
basn2c08.png
basn2c16.png
basn3p01.png
basn3p02.png
basn3p04.png
basn3p08.png
basn4a08.png
basn4a16.png
basn6a08.png
basn6a16.png

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tests/baseline_images/test_agg:
agg_filter.png

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tests/baseline_images/test_agg_filter:
agg_filter_alpha.pdf
agg_filter_alpha.png

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tests/baseline_images/test_arrow_patches:
arrow_styles.png
boxarrow_test_image.png
connection_styles.png
fancyarrow_dash.png
fancyarrow_dpi_cor_100dpi.png
fancyarrow_dpi_cor_200dpi.png
fancyarrow_test_image.pdf
fancyarrow_test_image.png
fancyarrow_test_image.svg

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tests/baseline_images/test_artist:
clip_path_clipping.pdf
clip_path_clipping.png
clip_path_clipping.svg
default_edges.png
hatching.pdf
hatching.png
hatching.svg

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tests/baseline_images/test_axes:
aitoff_proj.png
angle_spectrum_freqs.png
angle_spectrum_noise.png
annotate_across_transforms.png
arc_angles.png
arc_ellipse.pdf
arc_ellipse.png
arc_ellipse.svg
arrow_simple.png
auto_numticks.png
auto_numticks_log.png
autoscale_tiny_range.pdf
autoscale_tiny_range.png
autoscale_tiny_range.svg
axhspan_epoch.pdf
axhspan_epoch.png
axhspan_epoch.svg
axisbelow.png
axvspan_epoch.pdf
axvspan_epoch.png
axvspan_epoch.svg
bar_tick_label_multiple.png
bar_tick_label_multiple_old_label_alignment.png
bar_tick_label_single.png
barh_tick_label.png
boxplot.pdf
boxplot.png
boxplot.svg
boxplot_autorange_false_whiskers.png
boxplot_autorange_true_whiskers.png
boxplot_mod_artists_after_plotting.png
boxplot_no_inverted_whisker.png
boxplot_rc_parameters.pdf
boxplot_rc_parameters.png
boxplot_rc_parameters.svg
boxplot_sym.png
boxplot_sym2.png
boxplot_with_CIarray.png
bxp_baseline.png
bxp_custombox.png
bxp_customcap.png
bxp_custommedian.png
bxp_customoutlier.png
bxp_custompatchartist.png
bxp_custompositions.png
bxp_customwhisker.png
bxp_customwidths.png
bxp_horizontal.png
bxp_no_flier_stats.png
bxp_nobox.png
bxp_nocaps.png
bxp_patchartist.png
bxp_percentilewhis.png
bxp_rangewhis.png
bxp_scalarwidth.png
bxp_with_xlabels.png
bxp_with_ylabels.png
bxp_withmean_custompoint.png
bxp_withmean_line.png
bxp_withmean_point.png
bxp_withnotch.png
canonical.pdf
canonical.png
canonical.svg
contour_colorbar.pdf
contour_colorbar.png
contour_colorbar.svg
contour_hatching.pdf
contour_hatching.png
contour_hatching.svg
csd_freqs.png
csd_noise.png
dash_offset.pdf
dash_offset.png
dash_offset.svg
date_timezone_x.png
date_timezone_x_and_y.png
date_timezone_y.png
errorbar_basic.pdf
errorbar_basic.png
errorbar_basic.svg
errorbar_limits.pdf
errorbar_limits.png
errorbar_limits.svg
errorbar_mixed.pdf
errorbar_mixed.png
errorbar_mixed.svg
errorbar_zorder.pdf
errorbar_zorder.png
errorbar_zorder.svg
eventplot.pdf
eventplot.png
eventplot.svg
fill_between_interpolate.pdf
fill_between_interpolate.png
fill_between_interpolate.svg
fill_between_interpolate_decreasing.pdf
fill_between_interpolate_decreasing.png
fill_between_interpolate_decreasing.svg
fill_between_interpolate_nan.pdf
fill_between_interpolate_nan.png
fill_between_interpolate_nan.svg
fill_units.png
formatter_ticker_001.pdf
formatter_ticker_001.png
formatter_ticker_001.svg
formatter_ticker_002.pdf
formatter_ticker_002.png
formatter_ticker_002.svg
formatter_ticker_003.pdf
formatter_ticker_003.png
formatter_ticker_003.svg
formatter_ticker_004.pdf
formatter_ticker_004.png
formatter_ticker_004.svg
formatter_ticker_005.pdf
formatter_ticker_005.png
formatter_ticker_005.svg
hexbin_empty.png
hexbin_extent.png
hexbin_log.png
hist2d.pdf
hist2d.png
hist2d.svg
hist2d_transpose.pdf
hist2d_transpose.png
hist2d_transpose.svg
hist_bar_empty.png
hist_density.png
hist_log.pdf
hist_log.png
hist_log.svg
hist_offset.pdf
hist_offset.png
hist_offset.svg
hist_stacked.png
hist_stacked_bar.pdf
hist_stacked_bar.png
hist_stacked_bar.svg
hist_stacked_normed.pdf
hist_stacked_normed.png
hist_stacked_normed.svg
hist_stacked_step.pdf
hist_stacked_step.png
hist_stacked_step.svg
hist_stacked_stepfilled.pdf
hist_stacked_stepfilled.png
hist_stacked_stepfilled.svg
hist_stacked_stepfilled_alpha.pdf
hist_stacked_stepfilled_alpha.png
hist_stacked_stepfilled_alpha.svg
hist_stacked_weights.pdf
hist_stacked_weights.png
hist_stacked_weights.svg
hist_step.png
hist_step_bottom.png
hist_step_empty.png
hist_step_filled.png
hist_step_horiz.png
hlines_basic.png
hlines_masked.png
hlines_with_nan.png
imshow.pdf
imshow.png
imshow.svg
imshow_clip.pdf
imshow_clip.png
imshow_clip.svg
log_scales.pdf
log_scales.png
log_scales.svg
loglog.png
magnitude_spectrum_freqs_dB.png
magnitude_spectrum_freqs_linear.png
magnitude_spectrum_noise_dB.png
magnitude_spectrum_noise_linear.png
marker_edges.pdf
marker_edges.png
marker_edges.svg
marker_styles.png
markevery.pdf
markevery.png
markevery.svg
markevery_line.pdf
markevery_line.png
markevery_line.svg
markevery_linear_scales.pdf
markevery_linear_scales.png
markevery_linear_scales.svg
markevery_linear_scales_zoomed.pdf
markevery_linear_scales_zoomed.png
markevery_linear_scales_zoomed.svg
markevery_log_scales.pdf
markevery_log_scales.png
markevery_log_scales.svg
markevery_polar.pdf
markevery_polar.png
markevery_polar.svg
mixed_collection.pdf
mixed_collection.png
mixed_collection.svg
mollweide_grid.pdf
mollweide_grid.png
mollweide_grid.svg
nonfinite_limits.pdf
nonfinite_limits.png
nonfinite_limits.svg
o_marker_path_snap.png
offset_points.pdf
offset_points.png
offset_points.svg
pcolor_datetime_axis.png
pcolormesh.pdf
pcolormesh.png
pcolormesh.svg
pcolormesh_alpha.pdf
pcolormesh_alpha.png
pcolormesh_datetime_axis.png
phase_spectrum_freqs.png
phase_spectrum_noise.png
pie_ccw_true.png
pie_center_radius.png
pie_default.png
pie_frame_grid.png
pie_linewidth_0.png
pie_linewidth_2.png
pie_no_label.png
pie_rotatelabels_true.png
polycollection_joinstyle.pdf
polycollection_joinstyle.png
polycollection_joinstyle.svg
psd_freqs.png
psd_noise.png
rc_grid.png
rc_markerfill.png
rc_spines.png
retain_tick_visibility.png
rgba_markers.pdf
rgba_markers.png
rgba_markers.svg
scatter.pdf
scatter.png
scatter.svg
scatter_2D.png
scatter_marker.png
secondary_xy.png
set_get_ticklabels.png
single_date.png
single_point.pdf
single_point.png
single_point.svg
specgram_angle_freqs.png
specgram_angle_noise.png
specgram_freqs.png
specgram_freqs_linear.png
specgram_magnitude_freqs.png
specgram_magnitude_freqs_linear.png
specgram_magnitude_noise.png
specgram_magnitude_noise_linear.png
specgram_noise.png
specgram_noise_linear.png
specgram_phase_freqs.png
specgram_phase_noise.png
stackplot_test_baseline.pdf
stackplot_test_baseline.png
stackplot_test_baseline.svg
stackplot_test_image.pdf
stackplot_test_image.png
stackplot_test_image.svg
stem.png
stem_orientation.png
step_linestyle.pdf
step_linestyle.png
step_linestyle.svg
symlog.pdf
symlog2.pdf
test_alpha.pdf
test_alpha.png
test_alpha.svg
test_eventplot_defaults.png
test_eventplot_problem_kwargs.png
test_loglog_nonpos.png
test_stairs_datetime.png
test_stairs_options.png
transparent_markers.pdf
transparent_markers.png
transparent_markers.svg
twin_autoscale.png
twin_axis_locators_formatters.pdf
twin_axis_locators_formatters.png
twin_axis_locators_formatters.svg
twin_spines.png
twin_spines_on_top.png
vertex_markers.png
violinplot_horiz_baseline.png
violinplot_horiz_custompoints_10.png
violinplot_horiz_custompoints_200.png
violinplot_horiz_showall.png
violinplot_horiz_showextrema.png
violinplot_horiz_showmeans.png
violinplot_horiz_showmedians.png
violinplot_vert_baseline.png
violinplot_vert_custompoints_10.png
violinplot_vert_custompoints_200.png
violinplot_vert_showall.png
violinplot_vert_showextrema.png
violinplot_vert_showmeans.png
violinplot_vert_showmedians.png
vline_hline_zorder.pdf
vline_hline_zorder.png
vline_hline_zorder.svg
vlines_basic.png
vlines_masked.png
vlines_with_nan.png

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tests/baseline_images/test_backend_pdf:
grayscale_alpha.pdf
hatching_legend.pdf
kerning.pdf
pdf_use14corefonts.pdf

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tests/baseline_images/test_backend_pgf:
pgf_bbox_inches.pdf
pgf_mixedmode.pdf
pgf_pdflatex.pdf
pgf_rcupdate1.pdf
pgf_rcupdate2.pdf
pgf_xelatex.pdf

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tests/baseline_images/test_backend_ps:
empty.pdf
type3.eps
type42_without_prep.eps
useafm.eps

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tests/baseline_images/test_backend_svg:
bold_font_output.svg
bold_font_output_with_none_fonttype.svg
fill_black_with_alpha.svg
noscale.pdf
noscale.png
noscale.svg

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tests/baseline_images/test_bbox_tight:
bbox_inches_tight.pdf
bbox_inches_tight.png
bbox_inches_tight.svg
bbox_inches_tight_clipping.pdf
bbox_inches_tight_clipping.png
bbox_inches_tight_clipping.svg
bbox_inches_tight_raster.pdf
bbox_inches_tight_raster.png
bbox_inches_tight_raster.svg
bbox_inches_tight_suptile_legend.pdf
bbox_inches_tight_suptile_legend.png
bbox_inches_tight_suptile_legend.svg
bbox_inches_tight_suptile_non_default.png

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tests/baseline_images/test_collections:
EllipseCollection_test_image.png
EventCollection_plot__add_positions.pdf
EventCollection_plot__add_positions.png
EventCollection_plot__add_positions.svg
EventCollection_plot__append_positions.pdf
EventCollection_plot__append_positions.png
EventCollection_plot__append_positions.svg
EventCollection_plot__default.pdf
EventCollection_plot__default.png
EventCollection_plot__default.svg
EventCollection_plot__extend_positions.pdf
EventCollection_plot__extend_positions.png
EventCollection_plot__extend_positions.svg
EventCollection_plot__set_color.pdf
EventCollection_plot__set_color.png
EventCollection_plot__set_color.svg
EventCollection_plot__set_linelength.pdf
EventCollection_plot__set_linelength.png
EventCollection_plot__set_linelength.svg
EventCollection_plot__set_lineoffset.pdf
EventCollection_plot__set_lineoffset.png
EventCollection_plot__set_lineoffset.svg
EventCollection_plot__set_linestyle.pdf
EventCollection_plot__set_linestyle.png
EventCollection_plot__set_linestyle.svg
EventCollection_plot__set_linewidth.pdf
EventCollection_plot__set_linewidth.png
EventCollection_plot__set_linewidth.svg
EventCollection_plot__set_orientation.pdf
EventCollection_plot__set_orientation.png
EventCollection_plot__set_orientation.svg
EventCollection_plot__set_positions.pdf
EventCollection_plot__set_positions.png
EventCollection_plot__set_positions.svg
EventCollection_plot__switch_orientation.pdf
EventCollection_plot__switch_orientation.png
EventCollection_plot__switch_orientation.svg
EventCollection_plot__switch_orientation__2x.pdf
EventCollection_plot__switch_orientation__2x.png
EventCollection_plot__switch_orientation__2x.svg
cap_and_joinstyle.png
polycollection_close.png
regularpolycollection_rotate.png
regularpolycollection_scale.png
scatter_post_alpha.png
size_in_xy.png

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tests/baseline_images/test_colorbar:
cbar_locationing.png
cbar_sharing.png
cbar_with_orientation.png
cbar_with_subplots_adjust.png
colorbar_change_lim_scale.png
colorbar_closed_patch.png
colorbar_extensions_proportional.png
colorbar_extensions_shape_proportional.png
colorbar_extensions_shape_uniform.png
colorbar_extensions_uniform.png
colorbar_single_scatter.png
colorbar_twoslope.png
double_cbar.png
proportional_colorbars.png

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tests/baseline_images/test_colors:
boundarynorm_and_colorbar.png
levels_and_colors.png
light_source_shading_topo.png

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tests/baseline_images/test_compare_images:
all127.png
all128.png
basn3p02-1px-offset.png
basn3p02-half-1px-offset.png
basn3p02-minorchange.png
basn3p02-scrambled.png
basn3p02.png
simple.pdf
simple.png
simple.svg

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tests/baseline_images/test_constrainedlayout:
constrained_layout1.png
constrained_layout10.png
constrained_layout11.png
constrained_layout11rat.png
constrained_layout12.png
constrained_layout13.png
constrained_layout14.png
constrained_layout15.png
constrained_layout16.png
constrained_layout17.png
constrained_layout2.png
constrained_layout3.png
constrained_layout4.png
constrained_layout4.svg
constrained_layout5.png
constrained_layout6.png
constrained_layout8.png
constrained_layout9.png
test_bbox.png
test_bboxtight.png
test_colorbar_location.png
test_colorbars_no_overlapH.png
test_colorbars_no_overlapV.png

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tests/baseline_images/test_contour:
contour_addlines.png
contour_closed_line_loop.png
contour_corner_mask_False.png
contour_corner_mask_True.png
contour_datetime_axis.png
contour_labels_size_color.png
contour_line_start_on_corner_edge.png
contour_log_extension.png
contour_manual.png
contour_manual_colors_and_levels.png
contour_manual_labels.pdf
contour_manual_labels.png
contour_manual_labels.svg
contour_test_label_transforms.png
contour_uneven.png

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tests/baseline_images/test_dates:
DateFormatter_fractionalSeconds.png
RRuleLocator_bounds.png
date_axhline.png
date_axhspan.png
date_axvline.png
date_axvspan.png
date_inverted_limit.png

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tests/baseline_images/test_figure:
alpha_background.png
alpha_background.svg
figure_align_labels.png
figure_align_labels.svg
figure_legend.pdf
figure_legend.png
figure_legend.svg
figure_suptitle.pdf
figure_suptitle.png
figure_suptitle.svg
figure_today.pdf
figure_today.png
figure_today.svg
test_subfigure.png
test_subfigure_double.png
test_subfigure_scatter_size.png
test_subfigure_ss.png
tightbbox_box_aspect.svg

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tests/baseline_images/test_image:
bbox_image_inverted.pdf
bbox_image_inverted.png
bbox_image_inverted.svg
figimage.pdf
figimage.png
image_alpha.pdf
image_alpha.png
image_alpha.svg
image_clip.pdf
image_clip.png
image_clip.svg
image_cliprect.pdf
image_cliprect.png
image_cliprect.svg
image_composite_alpha.pdf
image_composite_alpha.png
image_composite_alpha.svg
image_composite_background.pdf
image_composite_background.png
image_composite_background.svg
image_interps.pdf
image_interps.png
image_interps.svg
image_shift.pdf
image_shift.svg
imshow.pdf
imshow.png
imshow.svg
imshow_bignumbers.png
imshow_bignumbers_real.png
imshow_endianess.png
imshow_flatfield.png
imshow_masked_interpolation.pdf
imshow_masked_interpolation.png
imshow_masked_interpolation.svg
interp_alpha.png
interp_nearest_vs_none.pdf
interp_nearest_vs_none.svg
log_scale_image.pdf
log_scale_image.png
log_scale_image.svg
mask_image.pdf
mask_image.png
mask_image.svg
mask_image_over_under.png
no_interpolation_origin.pdf
no_interpolation_origin.png
no_interpolation_origin.svg
nonuniform_and_pcolor.png
rasterize_10dpi.pdf
rasterize_10dpi.svg
rgba_antialias.png
rotate_image.pdf
rotate_image.png
rotate_image.svg
uint16.tif
zoom_and_clip_upper_origin.png

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tests/baseline_images/test_legend:
fancy.pdf
fancy.png
fancy.svg
framealpha.pdf
framealpha.png
framealpha.svg
hatching.pdf
hatching.png
hatching.svg
legend_auto1.pdf
legend_auto1.png
legend_auto1.svg
legend_auto2.pdf
legend_auto2.png
legend_auto2.svg
legend_auto3.pdf
legend_auto3.png
legend_auto3.svg
legend_expand.pdf
legend_expand.png
legend_expand.svg
legend_labels_first.png
legend_multiple_keys.png
legend_stackplot.png
legend_various_labels.pdf
legend_various_labels.png
legend_various_labels.svg
not_covering_scatter.png
not_covering_scatter_transform.png
rcparam_alpha.png
rgba_alpha.png
scatter_rc1.pdf
scatter_rc1.png
scatter_rc1.svg
scatter_rc3.pdf
scatter_rc3.png
scatter_rc3.svg

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tests/baseline_images/test_lines:
drawstyle_variants.png
line_collection_dashes.pdf
line_collection_dashes.png
line_collection_dashes.svg
line_dashes.pdf
line_dashes.png
line_dashes.svg
marker_fill_styles.png
scaled_lines.pdf
scaled_lines.png
scaled_lines.svg

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tests/baseline_images/test_mathtext:
math_fontfamily_image.png
mathfont_cm_00.png
mathfont_cm_01.png
mathfont_cm_02.png
mathfont_cm_03.png
mathfont_cm_04.png
mathfont_cm_05.png
mathfont_cm_06.png
mathfont_cm_07.png
mathfont_cm_08.png
mathfont_cm_09.png
mathfont_cm_10.png
mathfont_cm_11.png
mathfont_cm_12.png
mathfont_cm_13.png
mathfont_cm_14.png
mathfont_cm_15.png
mathfont_cm_16.png
mathfont_cm_17.png
mathfont_cm_18.png
mathfont_cm_19.png
mathfont_cm_20.png
mathfont_cm_21.png
mathfont_cm_22.png
mathfont_cm_32.png
mathfont_cm_33.png
mathfont_cm_34.png
mathfont_cm_35.png
mathfont_cm_36.png
mathfont_cm_37.png
mathfont_cm_38.png
mathfont_cm_39.png
mathfont_cm_40.png
mathfont_cm_41.png
mathfont_cm_42.png
mathfont_cm_43.png
mathfont_cm_44.png
mathfont_cm_45.png
mathfont_cm_46.png
mathfont_cm_47.png
mathfont_cm_48.png
mathfont_cm_49.png
mathfont_cm_50.png
mathfont_cm_51.png
mathfont_cm_52.png
mathfont_cm_53.png
mathfont_cm_54.png
mathfont_cm_55.png
mathfont_cm_56.png
mathfont_cm_57.png
mathfont_cm_58.png
mathfont_cm_59.png
mathfont_dejavusans_00.png
mathfont_dejavusans_01.png
mathfont_dejavusans_02.png
mathfont_dejavusans_03.png
mathfont_dejavusans_04.png
mathfont_dejavusans_05.png
mathfont_dejavusans_06.png
mathfont_dejavusans_07.png
mathfont_dejavusans_08.png
mathfont_dejavusans_09.png
mathfont_dejavusans_10.png
mathfont_dejavusans_11.png
mathfont_dejavusans_12.png
mathfont_dejavusans_13.png
mathfont_dejavusans_14.png
mathfont_dejavusans_15.png
mathfont_dejavusans_16.png
mathfont_dejavusans_17.png
mathfont_dejavusans_18.png
mathfont_dejavusans_19.png
mathfont_dejavusans_20.png
mathfont_dejavusans_21.png
mathfont_dejavusans_22.png
mathfont_dejavusans_32.png
mathfont_dejavusans_33.png
mathfont_dejavusans_34.png
mathfont_dejavusans_35.png
mathfont_dejavusans_36.png
mathfont_dejavusans_37.png
mathfont_dejavusans_38.png
mathfont_dejavusans_39.png
mathfont_dejavusans_40.png
mathfont_dejavusans_41.png
mathfont_dejavusans_42.png
mathfont_dejavusans_43.png
mathfont_dejavusans_44.png
mathfont_dejavusans_45.png
mathfont_dejavusans_46.png
mathfont_dejavusans_47.png
mathfont_dejavusans_48.png
mathfont_dejavusans_49.png
mathfont_dejavusans_50.png
mathfont_dejavusans_51.png
mathfont_dejavusans_52.png
mathfont_dejavusans_53.png
mathfont_dejavusans_54.png
mathfont_dejavusans_55.png
mathfont_dejavusans_56.png
mathfont_dejavusans_57.png
mathfont_dejavusans_58.png
mathfont_dejavusans_59.png
mathfont_dejavuserif_00.png
mathfont_dejavuserif_01.png
mathfont_dejavuserif_02.png
mathfont_dejavuserif_03.png
mathfont_dejavuserif_04.png
mathfont_dejavuserif_05.png
mathfont_dejavuserif_06.png
mathfont_dejavuserif_07.png
mathfont_dejavuserif_08.png
mathfont_dejavuserif_09.png
mathfont_dejavuserif_10.png
mathfont_dejavuserif_11.png
mathfont_dejavuserif_12.png
mathfont_dejavuserif_13.png
mathfont_dejavuserif_14.png
mathfont_dejavuserif_15.png
mathfont_dejavuserif_16.png
mathfont_dejavuserif_17.png
mathfont_dejavuserif_18.png
mathfont_dejavuserif_19.png
mathfont_dejavuserif_20.png
mathfont_dejavuserif_21.png
mathfont_dejavuserif_22.png
mathfont_dejavuserif_32.png
mathfont_dejavuserif_33.png
mathfont_dejavuserif_34.png
mathfont_dejavuserif_35.png
mathfont_dejavuserif_36.png
mathfont_dejavuserif_37.png
mathfont_dejavuserif_38.png
mathfont_dejavuserif_39.png
mathfont_dejavuserif_40.png
mathfont_dejavuserif_41.png
mathfont_dejavuserif_42.png
mathfont_dejavuserif_43.png
mathfont_dejavuserif_44.png
mathfont_dejavuserif_45.png
mathfont_dejavuserif_46.png
mathfont_dejavuserif_47.png
mathfont_dejavuserif_48.png
mathfont_dejavuserif_49.png
mathfont_dejavuserif_50.png
mathfont_dejavuserif_51.png
mathfont_dejavuserif_52.png
mathfont_dejavuserif_53.png
mathfont_dejavuserif_54.png
mathfont_dejavuserif_55.png
mathfont_dejavuserif_56.png
mathfont_dejavuserif_57.png
mathfont_dejavuserif_58.png
mathfont_dejavuserif_59.png
mathfont_stix_00.png
mathfont_stix_01.png
mathfont_stix_02.png
mathfont_stix_03.png
mathfont_stix_04.png
mathfont_stix_05.png
mathfont_stix_06.png
mathfont_stix_07.png
mathfont_stix_08.png
mathfont_stix_09.png
mathfont_stix_10.png
mathfont_stix_11.png
mathfont_stix_12.png
mathfont_stix_13.png
mathfont_stix_14.png
mathfont_stix_15.png
mathfont_stix_16.png
mathfont_stix_17.png
mathfont_stix_18.png
mathfont_stix_19.png
mathfont_stix_20.png
mathfont_stix_21.png
mathfont_stix_22.png
mathfont_stix_32.png
mathfont_stix_33.png
mathfont_stix_34.png
mathfont_stix_35.png
mathfont_stix_36.png
mathfont_stix_37.png
mathfont_stix_38.png
mathfont_stix_39.png
mathfont_stix_40.png
mathfont_stix_41.png
mathfont_stix_42.png
mathfont_stix_43.png
mathfont_stix_44.png
mathfont_stix_45.png
mathfont_stix_46.png
mathfont_stix_47.png
mathfont_stix_48.png
mathfont_stix_49.png
mathfont_stix_50.png
mathfont_stix_51.png
mathfont_stix_52.png
mathfont_stix_53.png
mathfont_stix_54.png
mathfont_stix_55.png
mathfont_stix_56.png
mathfont_stix_57.png
mathfont_stix_58.png
mathfont_stix_59.png
mathfont_stixsans_00.png
mathfont_stixsans_01.png
mathfont_stixsans_02.png
mathfont_stixsans_03.png
mathfont_stixsans_04.png
mathfont_stixsans_05.png
mathfont_stixsans_06.png
mathfont_stixsans_07.png
mathfont_stixsans_08.png
mathfont_stixsans_09.png
mathfont_stixsans_10.png
mathfont_stixsans_11.png
mathfont_stixsans_12.png
mathfont_stixsans_13.png
mathfont_stixsans_14.png
mathfont_stixsans_15.png
mathfont_stixsans_16.png
mathfont_stixsans_17.png
mathfont_stixsans_18.png
mathfont_stixsans_19.png
mathfont_stixsans_20.png
mathfont_stixsans_21.png
mathfont_stixsans_22.png
mathfont_stixsans_32.png
mathfont_stixsans_33.png
mathfont_stixsans_34.png
mathfont_stixsans_35.png
mathfont_stixsans_36.png
mathfont_stixsans_37.png
mathfont_stixsans_38.png
mathfont_stixsans_39.png
mathfont_stixsans_40.png
mathfont_stixsans_41.png
mathfont_stixsans_42.png
mathfont_stixsans_43.png
mathfont_stixsans_44.png
mathfont_stixsans_45.png
mathfont_stixsans_46.png
mathfont_stixsans_47.png
mathfont_stixsans_48.png
mathfont_stixsans_49.png
mathfont_stixsans_50.png
mathfont_stixsans_51.png
mathfont_stixsans_52.png
mathfont_stixsans_53.png
mathfont_stixsans_54.png
mathfont_stixsans_55.png
mathfont_stixsans_56.png
mathfont_stixsans_57.png
mathfont_stixsans_58.png
mathfont_stixsans_59.png
mathtext1_dejavusans_00.png
mathtext1_dejavusans_01.png
mathtext_cm_00.pdf
mathtext_cm_00.png
mathtext_cm_00.svg
mathtext_cm_01.pdf
mathtext_cm_01.png
mathtext_cm_01.svg
mathtext_cm_02.pdf
mathtext_cm_02.png
mathtext_cm_02.svg
mathtext_cm_03.pdf
mathtext_cm_03.png
mathtext_cm_03.svg
mathtext_cm_04.pdf
mathtext_cm_04.png
mathtext_cm_04.svg
mathtext_cm_05.pdf
mathtext_cm_05.png
mathtext_cm_05.svg
mathtext_cm_06.pdf
mathtext_cm_06.png
mathtext_cm_06.svg
mathtext_cm_07.pdf
mathtext_cm_07.png
mathtext_cm_07.svg
mathtext_cm_08.pdf
mathtext_cm_08.png
mathtext_cm_08.svg
mathtext_cm_09.pdf
mathtext_cm_09.png
mathtext_cm_09.svg
mathtext_cm_10.pdf
mathtext_cm_10.png
mathtext_cm_10.svg
mathtext_cm_11.pdf
mathtext_cm_11.png
mathtext_cm_11.svg
mathtext_cm_12.pdf
mathtext_cm_12.png
mathtext_cm_12.svg
mathtext_cm_13.pdf
mathtext_cm_13.png
mathtext_cm_13.svg
mathtext_cm_14.pdf
mathtext_cm_14.png
mathtext_cm_14.svg
mathtext_cm_15.pdf
mathtext_cm_15.png
mathtext_cm_15.svg
mathtext_cm_16.pdf
mathtext_cm_16.png
mathtext_cm_16.svg
mathtext_cm_17.pdf
mathtext_cm_17.png
mathtext_cm_17.svg
mathtext_cm_18.pdf
mathtext_cm_18.png
mathtext_cm_18.svg
mathtext_cm_19.pdf
mathtext_cm_19.png
mathtext_cm_19.svg
mathtext_cm_20.pdf
mathtext_cm_20.png
mathtext_cm_20.svg
mathtext_cm_21.pdf
mathtext_cm_21.png
mathtext_cm_21.svg
mathtext_cm_22.pdf
mathtext_cm_22.png
mathtext_cm_22.svg
mathtext_cm_23.pdf
mathtext_cm_23.png
mathtext_cm_23.svg
mathtext_cm_24.pdf
mathtext_cm_24.png
mathtext_cm_24.svg
mathtext_cm_25.pdf
mathtext_cm_25.png
mathtext_cm_25.svg
mathtext_cm_26.pdf
mathtext_cm_26.png
mathtext_cm_26.svg
mathtext_cm_27.pdf
mathtext_cm_27.png
mathtext_cm_27.svg
mathtext_cm_28.pdf
mathtext_cm_28.png
mathtext_cm_28.svg
mathtext_cm_29.pdf
mathtext_cm_29.png
mathtext_cm_29.svg
mathtext_cm_30.pdf
mathtext_cm_30.png
mathtext_cm_30.svg
mathtext_cm_31.pdf
mathtext_cm_31.png
mathtext_cm_31.svg
mathtext_cm_32.pdf
mathtext_cm_32.png
mathtext_cm_32.svg
mathtext_cm_33.pdf
mathtext_cm_33.png
mathtext_cm_33.svg
mathtext_cm_34.pdf
mathtext_cm_34.png
mathtext_cm_34.svg
mathtext_cm_35.pdf
mathtext_cm_35.png
mathtext_cm_35.svg
mathtext_cm_36.pdf
mathtext_cm_36.png
mathtext_cm_36.svg
mathtext_cm_37.pdf
mathtext_cm_37.png
mathtext_cm_37.svg
mathtext_cm_38.pdf
mathtext_cm_38.png
mathtext_cm_38.svg
mathtext_cm_39.pdf
mathtext_cm_39.png
mathtext_cm_39.svg
mathtext_cm_40.pdf
mathtext_cm_40.png
mathtext_cm_40.svg
mathtext_cm_41.pdf
mathtext_cm_41.png
mathtext_cm_41.svg
mathtext_cm_42.pdf
mathtext_cm_42.png
mathtext_cm_42.svg
mathtext_cm_43.pdf
mathtext_cm_43.png
mathtext_cm_43.svg
mathtext_cm_44.pdf
mathtext_cm_44.png
mathtext_cm_44.svg
mathtext_cm_45.pdf
mathtext_cm_45.png
mathtext_cm_45.svg
mathtext_cm_46.pdf
mathtext_cm_46.png
mathtext_cm_46.svg
mathtext_cm_47.pdf
mathtext_cm_47.png
mathtext_cm_47.svg
mathtext_cm_48.pdf
mathtext_cm_48.png
mathtext_cm_48.svg
mathtext_cm_49.pdf
mathtext_cm_49.png
mathtext_cm_49.svg
mathtext_cm_50.pdf
mathtext_cm_50.png
mathtext_cm_50.svg
mathtext_cm_51.pdf
mathtext_cm_51.png
mathtext_cm_51.svg
mathtext_cm_52.pdf
mathtext_cm_52.png
mathtext_cm_52.svg
mathtext_cm_53.pdf
mathtext_cm_53.png
mathtext_cm_53.svg
mathtext_cm_54.pdf
mathtext_cm_54.png
mathtext_cm_54.svg
mathtext_cm_55.pdf
mathtext_cm_55.png
mathtext_cm_55.svg
mathtext_cm_56.pdf
mathtext_cm_56.png
mathtext_cm_56.svg
mathtext_cm_57.pdf
mathtext_cm_57.png
mathtext_cm_57.svg
mathtext_cm_58.pdf
mathtext_cm_58.png
mathtext_cm_58.svg
mathtext_cm_59.pdf
mathtext_cm_59.png
mathtext_cm_59.svg
mathtext_cm_60.pdf
mathtext_cm_60.png
mathtext_cm_60.svg
mathtext_cm_61.pdf
mathtext_cm_61.png
mathtext_cm_61.svg
mathtext_cm_62.pdf
mathtext_cm_62.png
mathtext_cm_62.svg
mathtext_cm_63.pdf
mathtext_cm_63.png
mathtext_cm_63.svg
mathtext_cm_64.pdf
mathtext_cm_64.png
mathtext_cm_64.svg
mathtext_cm_65.pdf
mathtext_cm_65.png
mathtext_cm_65.svg
mathtext_cm_67.pdf
mathtext_cm_67.png
mathtext_cm_67.svg
mathtext_cm_68.pdf
mathtext_cm_68.png
mathtext_cm_68.svg
mathtext_cm_69.pdf
mathtext_cm_69.png
mathtext_cm_69.svg
mathtext_cm_70.pdf
mathtext_cm_70.png
mathtext_cm_70.svg
mathtext_cm_71.pdf
mathtext_cm_71.png
mathtext_cm_71.svg
mathtext_cm_72.pdf
mathtext_cm_72.png
mathtext_cm_72.svg
mathtext_cm_73.pdf
mathtext_cm_73.png
mathtext_cm_73.svg
mathtext_cm_74.pdf
mathtext_cm_74.png
mathtext_cm_74.svg
mathtext_cm_75.pdf
mathtext_cm_75.png
mathtext_cm_75.svg
mathtext_cm_76.pdf
mathtext_cm_76.png
mathtext_cm_76.svg
mathtext_cm_77.pdf
mathtext_cm_77.png
mathtext_cm_77.svg
mathtext_cm_78.pdf
mathtext_cm_78.png
mathtext_cm_78.svg
mathtext_cm_79.pdf
mathtext_cm_79.png
mathtext_cm_79.svg
mathtext_cm_80.pdf
mathtext_cm_80.png
mathtext_cm_80.svg
mathtext_cm_81.pdf
mathtext_cm_81.png
mathtext_cm_81.svg
mathtext_cm_82.pdf
mathtext_cm_82.png
mathtext_cm_82.svg
mathtext_dejavusans_00.pdf
mathtext_dejavusans_00.png
mathtext_dejavusans_00.svg
mathtext_dejavusans_01.pdf
mathtext_dejavusans_01.png
mathtext_dejavusans_01.svg
mathtext_dejavusans_02.pdf
mathtext_dejavusans_02.png
mathtext_dejavusans_02.svg
mathtext_dejavusans_03.pdf
mathtext_dejavusans_03.png
mathtext_dejavusans_03.svg
mathtext_dejavusans_04.pdf
mathtext_dejavusans_04.png
mathtext_dejavusans_04.svg
mathtext_dejavusans_05.pdf
mathtext_dejavusans_05.png
mathtext_dejavusans_05.svg
mathtext_dejavusans_06.pdf
mathtext_dejavusans_06.png
mathtext_dejavusans_06.svg
mathtext_dejavusans_07.pdf
mathtext_dejavusans_07.png
mathtext_dejavusans_07.svg
mathtext_dejavusans_08.pdf
mathtext_dejavusans_08.png
mathtext_dejavusans_08.svg
mathtext_dejavusans_09.pdf
mathtext_dejavusans_09.png
mathtext_dejavusans_09.svg
mathtext_dejavusans_10.pdf
mathtext_dejavusans_10.png
mathtext_dejavusans_10.svg
mathtext_dejavusans_11.pdf
mathtext_dejavusans_11.png
mathtext_dejavusans_11.svg
mathtext_dejavusans_12.pdf
mathtext_dejavusans_12.png
mathtext_dejavusans_12.svg
mathtext_dejavusans_13.pdf
mathtext_dejavusans_13.png
mathtext_dejavusans_13.svg
mathtext_dejavusans_14.pdf
mathtext_dejavusans_14.png
mathtext_dejavusans_14.svg
mathtext_dejavusans_15.pdf
mathtext_dejavusans_15.png
mathtext_dejavusans_15.svg
mathtext_dejavusans_16.pdf
mathtext_dejavusans_16.png
mathtext_dejavusans_16.svg
mathtext_dejavusans_17.pdf
mathtext_dejavusans_17.png
mathtext_dejavusans_17.svg
mathtext_dejavusans_18.pdf
mathtext_dejavusans_18.png
mathtext_dejavusans_18.svg
mathtext_dejavusans_19.pdf
mathtext_dejavusans_19.png
mathtext_dejavusans_19.svg
mathtext_dejavusans_20.pdf
mathtext_dejavusans_20.png
mathtext_dejavusans_20.svg
mathtext_dejavusans_21.pdf
mathtext_dejavusans_21.png
mathtext_dejavusans_21.svg
mathtext_dejavusans_22.pdf
mathtext_dejavusans_22.png
mathtext_dejavusans_22.svg
mathtext_dejavusans_23.pdf
mathtext_dejavusans_23.png
mathtext_dejavusans_23.svg
mathtext_dejavusans_24.pdf
mathtext_dejavusans_24.png
mathtext_dejavusans_24.svg
mathtext_dejavusans_25.pdf
mathtext_dejavusans_25.png
mathtext_dejavusans_25.svg
mathtext_dejavusans_26.pdf
mathtext_dejavusans_26.png
mathtext_dejavusans_26.svg
mathtext_dejavusans_27.pdf
mathtext_dejavusans_27.png
mathtext_dejavusans_27.svg
mathtext_dejavusans_28.pdf
mathtext_dejavusans_28.png
mathtext_dejavusans_28.svg
mathtext_dejavusans_29.pdf
mathtext_dejavusans_29.png
mathtext_dejavusans_29.svg
mathtext_dejavusans_30.pdf
mathtext_dejavusans_30.png
mathtext_dejavusans_30.svg
mathtext_dejavusans_31.pdf
mathtext_dejavusans_31.png
mathtext_dejavusans_31.svg
mathtext_dejavusans_32.pdf
mathtext_dejavusans_32.png
mathtext_dejavusans_32.svg
mathtext_dejavusans_33.pdf
mathtext_dejavusans_33.png
mathtext_dejavusans_33.svg
mathtext_dejavusans_34.pdf
mathtext_dejavusans_34.png
mathtext_dejavusans_34.svg
mathtext_dejavusans_35.pdf
mathtext_dejavusans_35.png
mathtext_dejavusans_35.svg
mathtext_dejavusans_36.pdf
mathtext_dejavusans_36.png
mathtext_dejavusans_36.svg
mathtext_dejavusans_37.pdf
mathtext_dejavusans_37.png
mathtext_dejavusans_37.svg
mathtext_dejavusans_38.pdf
mathtext_dejavusans_38.png
mathtext_dejavusans_38.svg
mathtext_dejavusans_39.pdf
mathtext_dejavusans_39.png
mathtext_dejavusans_39.svg
mathtext_dejavusans_40.pdf
mathtext_dejavusans_40.png
mathtext_dejavusans_40.svg
mathtext_dejavusans_41.pdf
mathtext_dejavusans_41.png
mathtext_dejavusans_41.svg
mathtext_dejavusans_42.pdf
mathtext_dejavusans_42.png
mathtext_dejavusans_42.svg
mathtext_dejavusans_43.pdf
mathtext_dejavusans_43.png
mathtext_dejavusans_43.svg
mathtext_dejavusans_44.pdf
mathtext_dejavusans_44.png
mathtext_dejavusans_44.svg
mathtext_dejavusans_45.pdf
mathtext_dejavusans_45.png
mathtext_dejavusans_45.svg
mathtext_dejavusans_46.pdf
mathtext_dejavusans_46.png
mathtext_dejavusans_46.svg
mathtext_dejavusans_47.pdf
mathtext_dejavusans_47.png
mathtext_dejavusans_47.svg
mathtext_dejavusans_48.pdf
mathtext_dejavusans_48.png
mathtext_dejavusans_48.svg
mathtext_dejavusans_49.pdf
mathtext_dejavusans_49.png
mathtext_dejavusans_49.svg
mathtext_dejavusans_50.pdf
mathtext_dejavusans_50.png
mathtext_dejavusans_50.svg
mathtext_dejavusans_51.pdf
mathtext_dejavusans_51.png
mathtext_dejavusans_51.svg
mathtext_dejavusans_52.pdf
mathtext_dejavusans_52.png
mathtext_dejavusans_52.svg
mathtext_dejavusans_53.pdf
mathtext_dejavusans_53.png
mathtext_dejavusans_53.svg
mathtext_dejavusans_54.pdf
mathtext_dejavusans_54.png
mathtext_dejavusans_54.svg
mathtext_dejavusans_55.pdf
mathtext_dejavusans_55.png
mathtext_dejavusans_55.svg
mathtext_dejavusans_56.pdf
mathtext_dejavusans_56.png
mathtext_dejavusans_56.svg
mathtext_dejavusans_57.pdf
mathtext_dejavusans_57.png
mathtext_dejavusans_57.svg
mathtext_dejavusans_58.pdf
mathtext_dejavusans_58.png
mathtext_dejavusans_58.svg
mathtext_dejavusans_59.pdf
mathtext_dejavusans_59.png
mathtext_dejavusans_59.svg
mathtext_dejavusans_60.pdf
mathtext_dejavusans_60.png
mathtext_dejavusans_60.svg
mathtext_dejavusans_61.pdf
mathtext_dejavusans_61.png
mathtext_dejavusans_61.svg
mathtext_dejavusans_62.pdf
mathtext_dejavusans_62.png
mathtext_dejavusans_62.svg
mathtext_dejavusans_63.pdf
mathtext_dejavusans_63.png
mathtext_dejavusans_63.svg
mathtext_dejavusans_64.pdf
mathtext_dejavusans_64.png
mathtext_dejavusans_64.svg
mathtext_dejavusans_65.pdf
mathtext_dejavusans_65.png
mathtext_dejavusans_65.svg
mathtext_dejavusans_67.pdf
mathtext_dejavusans_67.png
mathtext_dejavusans_67.svg
mathtext_dejavusans_68.pdf
mathtext_dejavusans_68.png
mathtext_dejavusans_68.svg
mathtext_dejavusans_69.pdf
mathtext_dejavusans_69.png
mathtext_dejavusans_69.svg
mathtext_dejavusans_70.pdf
mathtext_dejavusans_70.png
mathtext_dejavusans_70.svg
mathtext_dejavusans_71.pdf
mathtext_dejavusans_71.png
mathtext_dejavusans_71.svg
mathtext_dejavusans_72.pdf
mathtext_dejavusans_72.png
mathtext_dejavusans_72.svg
mathtext_dejavusans_73.pdf
mathtext_dejavusans_73.png
mathtext_dejavusans_73.svg
mathtext_dejavusans_74.pdf
mathtext_dejavusans_74.png
mathtext_dejavusans_74.svg
mathtext_dejavusans_75.pdf
mathtext_dejavusans_75.png
mathtext_dejavusans_75.svg
mathtext_dejavusans_76.pdf
mathtext_dejavusans_76.png
mathtext_dejavusans_76.svg
mathtext_dejavusans_77.pdf
mathtext_dejavusans_77.png
mathtext_dejavusans_77.svg
mathtext_dejavusans_78.pdf
mathtext_dejavusans_78.png
mathtext_dejavusans_78.svg
mathtext_dejavusans_79.pdf
mathtext_dejavusans_79.png
mathtext_dejavusans_79.svg
mathtext_dejavusans_80.pdf
mathtext_dejavusans_80.png
mathtext_dejavusans_80.svg
mathtext_dejavusans_81.pdf
mathtext_dejavusans_81.png
mathtext_dejavusans_81.svg
mathtext_dejavusans_82.pdf
mathtext_dejavusans_82.png
mathtext_dejavusans_82.svg
mathtext_dejavuserif_00.pdf
mathtext_dejavuserif_00.png
mathtext_dejavuserif_00.svg
mathtext_dejavuserif_01.pdf
mathtext_dejavuserif_01.png
mathtext_dejavuserif_01.svg
mathtext_dejavuserif_02.pdf
mathtext_dejavuserif_02.png
mathtext_dejavuserif_02.svg
mathtext_dejavuserif_03.pdf
mathtext_dejavuserif_03.png
mathtext_dejavuserif_03.svg
mathtext_dejavuserif_04.pdf
mathtext_dejavuserif_04.png
mathtext_dejavuserif_04.svg
mathtext_dejavuserif_05.pdf
mathtext_dejavuserif_05.png
mathtext_dejavuserif_05.svg
mathtext_dejavuserif_06.pdf
mathtext_dejavuserif_06.png
mathtext_dejavuserif_06.svg
mathtext_dejavuserif_07.pdf
mathtext_dejavuserif_07.png
mathtext_dejavuserif_07.svg
mathtext_dejavuserif_08.pdf
mathtext_dejavuserif_08.png
mathtext_dejavuserif_08.svg
mathtext_dejavuserif_09.pdf
mathtext_dejavuserif_09.png
mathtext_dejavuserif_09.svg
mathtext_dejavuserif_10.pdf
mathtext_dejavuserif_10.png
mathtext_dejavuserif_10.svg
mathtext_dejavuserif_11.pdf
mathtext_dejavuserif_11.png
mathtext_dejavuserif_11.svg
mathtext_dejavuserif_12.pdf
mathtext_dejavuserif_12.png
mathtext_dejavuserif_12.svg
mathtext_dejavuserif_13.pdf
mathtext_dejavuserif_13.png
mathtext_dejavuserif_13.svg
mathtext_dejavuserif_14.pdf
mathtext_dejavuserif_14.png
mathtext_dejavuserif_14.svg
mathtext_dejavuserif_15.pdf
mathtext_dejavuserif_15.png
mathtext_dejavuserif_15.svg
mathtext_dejavuserif_16.pdf
mathtext_dejavuserif_16.png
mathtext_dejavuserif_16.svg
mathtext_dejavuserif_17.pdf
mathtext_dejavuserif_17.png
mathtext_dejavuserif_17.svg
mathtext_dejavuserif_18.pdf
mathtext_dejavuserif_18.png
mathtext_dejavuserif_18.svg
mathtext_dejavuserif_19.pdf
mathtext_dejavuserif_19.png
mathtext_dejavuserif_19.svg
mathtext_dejavuserif_20.pdf
mathtext_dejavuserif_20.png
mathtext_dejavuserif_20.svg
mathtext_dejavuserif_21.pdf
mathtext_dejavuserif_21.png
mathtext_dejavuserif_21.svg
mathtext_dejavuserif_22.pdf
mathtext_dejavuserif_22.png
mathtext_dejavuserif_22.svg
mathtext_dejavuserif_23.pdf
mathtext_dejavuserif_23.png
mathtext_dejavuserif_23.svg
mathtext_dejavuserif_24.pdf
mathtext_dejavuserif_24.png
mathtext_dejavuserif_24.svg
mathtext_dejavuserif_25.pdf
mathtext_dejavuserif_25.png
mathtext_dejavuserif_25.svg
mathtext_dejavuserif_26.pdf
mathtext_dejavuserif_26.png
mathtext_dejavuserif_26.svg
mathtext_dejavuserif_27.pdf
mathtext_dejavuserif_27.png
mathtext_dejavuserif_27.svg
mathtext_dejavuserif_28.pdf
mathtext_dejavuserif_28.png
mathtext_dejavuserif_28.svg
mathtext_dejavuserif_29.pdf
mathtext_dejavuserif_29.png
mathtext_dejavuserif_29.svg
mathtext_dejavuserif_30.pdf
mathtext_dejavuserif_30.png
mathtext_dejavuserif_30.svg
mathtext_dejavuserif_31.pdf
mathtext_dejavuserif_31.png
mathtext_dejavuserif_31.svg
mathtext_dejavuserif_32.pdf
mathtext_dejavuserif_32.png
mathtext_dejavuserif_32.svg
mathtext_dejavuserif_33.pdf
mathtext_dejavuserif_33.png
mathtext_dejavuserif_33.svg
mathtext_dejavuserif_34.pdf
mathtext_dejavuserif_34.png
mathtext_dejavuserif_34.svg
mathtext_dejavuserif_35.pdf
mathtext_dejavuserif_35.png
mathtext_dejavuserif_35.svg
mathtext_dejavuserif_36.pdf
mathtext_dejavuserif_36.png
mathtext_dejavuserif_36.svg
mathtext_dejavuserif_37.pdf
mathtext_dejavuserif_37.png
mathtext_dejavuserif_37.svg
mathtext_dejavuserif_38.pdf
mathtext_dejavuserif_38.png
mathtext_dejavuserif_38.svg
mathtext_dejavuserif_39.pdf
mathtext_dejavuserif_39.png
mathtext_dejavuserif_39.svg
mathtext_dejavuserif_40.pdf
mathtext_dejavuserif_40.png
mathtext_dejavuserif_40.svg
mathtext_dejavuserif_41.pdf
mathtext_dejavuserif_41.png
mathtext_dejavuserif_41.svg
mathtext_dejavuserif_42.pdf
mathtext_dejavuserif_42.png
mathtext_dejavuserif_42.svg
mathtext_dejavuserif_43.pdf
mathtext_dejavuserif_43.png
mathtext_dejavuserif_43.svg
mathtext_dejavuserif_44.pdf
mathtext_dejavuserif_44.png
mathtext_dejavuserif_44.svg
mathtext_dejavuserif_45.pdf
mathtext_dejavuserif_45.png
mathtext_dejavuserif_45.svg
mathtext_dejavuserif_46.pdf
mathtext_dejavuserif_46.png
mathtext_dejavuserif_46.svg
mathtext_dejavuserif_47.pdf
mathtext_dejavuserif_47.png
mathtext_dejavuserif_47.svg
mathtext_dejavuserif_48.pdf
mathtext_dejavuserif_48.png
mathtext_dejavuserif_48.svg
mathtext_dejavuserif_49.pdf
mathtext_dejavuserif_49.png
mathtext_dejavuserif_49.svg
mathtext_dejavuserif_50.pdf
mathtext_dejavuserif_50.png
mathtext_dejavuserif_50.svg
mathtext_dejavuserif_51.pdf
mathtext_dejavuserif_51.png
mathtext_dejavuserif_51.svg
mathtext_dejavuserif_52.pdf
mathtext_dejavuserif_52.png
mathtext_dejavuserif_52.svg
mathtext_dejavuserif_53.pdf
mathtext_dejavuserif_53.png
mathtext_dejavuserif_53.svg
mathtext_dejavuserif_54.pdf
mathtext_dejavuserif_54.png
mathtext_dejavuserif_54.svg
mathtext_dejavuserif_55.pdf
mathtext_dejavuserif_55.png
mathtext_dejavuserif_55.svg
mathtext_dejavuserif_56.pdf
mathtext_dejavuserif_56.png
mathtext_dejavuserif_56.svg
mathtext_dejavuserif_57.pdf
mathtext_dejavuserif_57.png
mathtext_dejavuserif_57.svg
mathtext_dejavuserif_58.pdf
mathtext_dejavuserif_58.png
mathtext_dejavuserif_58.svg
mathtext_dejavuserif_59.pdf
mathtext_dejavuserif_59.png
mathtext_dejavuserif_59.svg
mathtext_dejavuserif_60.pdf
mathtext_dejavuserif_60.png
mathtext_dejavuserif_60.svg
mathtext_dejavuserif_61.pdf
mathtext_dejavuserif_61.png
mathtext_dejavuserif_61.svg
mathtext_dejavuserif_62.pdf
mathtext_dejavuserif_62.png
mathtext_dejavuserif_62.svg
mathtext_dejavuserif_63.pdf
mathtext_dejavuserif_63.png
mathtext_dejavuserif_63.svg
mathtext_dejavuserif_64.pdf
mathtext_dejavuserif_64.png
mathtext_dejavuserif_64.svg
mathtext_dejavuserif_65.pdf
mathtext_dejavuserif_65.png
mathtext_dejavuserif_65.svg
mathtext_dejavuserif_67.pdf
mathtext_dejavuserif_67.png
mathtext_dejavuserif_67.svg
mathtext_dejavuserif_68.pdf
mathtext_dejavuserif_68.png
mathtext_dejavuserif_68.svg
mathtext_dejavuserif_69.pdf
mathtext_dejavuserif_69.png
mathtext_dejavuserif_69.svg
mathtext_dejavuserif_70.pdf
mathtext_dejavuserif_70.png
mathtext_dejavuserif_70.svg
mathtext_dejavuserif_71.pdf
mathtext_dejavuserif_71.png
mathtext_dejavuserif_71.svg
mathtext_dejavuserif_72.pdf
mathtext_dejavuserif_72.png
mathtext_dejavuserif_72.svg
mathtext_dejavuserif_73.pdf
mathtext_dejavuserif_73.png
mathtext_dejavuserif_73.svg
mathtext_dejavuserif_74.pdf
mathtext_dejavuserif_74.png
mathtext_dejavuserif_74.svg
mathtext_dejavuserif_75.pdf
mathtext_dejavuserif_75.png
mathtext_dejavuserif_75.svg
mathtext_dejavuserif_76.pdf
mathtext_dejavuserif_76.png
mathtext_dejavuserif_76.svg
mathtext_dejavuserif_77.pdf
mathtext_dejavuserif_77.png
mathtext_dejavuserif_77.svg
mathtext_dejavuserif_78.pdf
mathtext_dejavuserif_78.png
mathtext_dejavuserif_78.svg
mathtext_dejavuserif_79.pdf
mathtext_dejavuserif_79.png
mathtext_dejavuserif_79.svg
mathtext_dejavuserif_80.pdf
mathtext_dejavuserif_80.png
mathtext_dejavuserif_80.svg
mathtext_dejavuserif_81.pdf
mathtext_dejavuserif_81.png
mathtext_dejavuserif_81.svg
mathtext_dejavuserif_82.pdf
mathtext_dejavuserif_82.png
mathtext_dejavuserif_82.svg
mathtext_stix_00.pdf
mathtext_stix_00.png
mathtext_stix_00.svg
mathtext_stix_01.pdf
mathtext_stix_01.png
mathtext_stix_01.svg
mathtext_stix_02.pdf
mathtext_stix_02.png
mathtext_stix_02.svg
mathtext_stix_03.pdf
mathtext_stix_03.png
mathtext_stix_03.svg
mathtext_stix_04.pdf
mathtext_stix_04.png
mathtext_stix_04.svg
mathtext_stix_05.pdf
mathtext_stix_05.png
mathtext_stix_05.svg
mathtext_stix_06.pdf
mathtext_stix_06.png
mathtext_stix_06.svg
mathtext_stix_07.pdf
mathtext_stix_07.png
mathtext_stix_07.svg
mathtext_stix_08.pdf
mathtext_stix_08.png
mathtext_stix_08.svg
mathtext_stix_09.pdf
mathtext_stix_09.png
mathtext_stix_09.svg
mathtext_stix_10.pdf
mathtext_stix_10.png
mathtext_stix_10.svg
mathtext_stix_11.pdf
mathtext_stix_11.png
mathtext_stix_11.svg
mathtext_stix_12.pdf
mathtext_stix_12.png
mathtext_stix_12.svg
mathtext_stix_13.pdf
mathtext_stix_13.png
mathtext_stix_13.svg
mathtext_stix_14.pdf
mathtext_stix_14.png
mathtext_stix_14.svg
mathtext_stix_15.pdf
mathtext_stix_15.png
mathtext_stix_15.svg
mathtext_stix_16.pdf
mathtext_stix_16.png
mathtext_stix_16.svg
mathtext_stix_17.pdf
mathtext_stix_17.png
mathtext_stix_17.svg
mathtext_stix_18.pdf
mathtext_stix_18.png
mathtext_stix_18.svg
mathtext_stix_19.pdf
mathtext_stix_19.png
mathtext_stix_19.svg
mathtext_stix_20.pdf
mathtext_stix_20.png
mathtext_stix_20.svg
mathtext_stix_21.pdf
mathtext_stix_21.png
mathtext_stix_21.svg
mathtext_stix_22.pdf
mathtext_stix_22.png
mathtext_stix_22.svg
mathtext_stix_23.pdf
mathtext_stix_23.png
mathtext_stix_23.svg
mathtext_stix_24.pdf
mathtext_stix_24.png
mathtext_stix_24.svg
mathtext_stix_25.pdf
mathtext_stix_25.png
mathtext_stix_25.svg
mathtext_stix_26.pdf
mathtext_stix_26.png
mathtext_stix_26.svg
mathtext_stix_27.pdf
mathtext_stix_27.png
mathtext_stix_27.svg
mathtext_stix_28.pdf
mathtext_stix_28.png
mathtext_stix_28.svg
mathtext_stix_29.pdf
mathtext_stix_29.png
mathtext_stix_29.svg
mathtext_stix_30.pdf
mathtext_stix_30.png
mathtext_stix_30.svg
mathtext_stix_31.pdf
mathtext_stix_31.png
mathtext_stix_31.svg
mathtext_stix_32.pdf
mathtext_stix_32.png
mathtext_stix_32.svg
mathtext_stix_33.pdf
mathtext_stix_33.png
mathtext_stix_33.svg
mathtext_stix_34.pdf
mathtext_stix_34.png
mathtext_stix_34.svg
mathtext_stix_35.pdf
mathtext_stix_35.png
mathtext_stix_35.svg
mathtext_stix_36.pdf
mathtext_stix_36.png
mathtext_stix_36.svg
mathtext_stix_37.pdf
mathtext_stix_37.png
mathtext_stix_37.svg
mathtext_stix_38.pdf
mathtext_stix_38.png
mathtext_stix_38.svg
mathtext_stix_39.pdf
mathtext_stix_39.png
mathtext_stix_39.svg
mathtext_stix_40.pdf
mathtext_stix_40.png
mathtext_stix_40.svg
mathtext_stix_41.pdf
mathtext_stix_41.png
mathtext_stix_41.svg
mathtext_stix_42.pdf
mathtext_stix_42.png
mathtext_stix_42.svg
mathtext_stix_43.pdf
mathtext_stix_43.png
mathtext_stix_43.svg
mathtext_stix_44.pdf
mathtext_stix_44.png
mathtext_stix_44.svg
mathtext_stix_45.pdf
mathtext_stix_45.png
mathtext_stix_45.svg
mathtext_stix_46.pdf
mathtext_stix_46.png
mathtext_stix_46.svg
mathtext_stix_47.pdf
mathtext_stix_47.png
mathtext_stix_47.svg
mathtext_stix_48.pdf
mathtext_stix_48.png
mathtext_stix_48.svg
mathtext_stix_49.pdf
mathtext_stix_49.png
mathtext_stix_49.svg
mathtext_stix_50.pdf
mathtext_stix_50.png
mathtext_stix_50.svg
mathtext_stix_51.pdf
mathtext_stix_51.png
mathtext_stix_51.svg
mathtext_stix_52.pdf
mathtext_stix_52.png
mathtext_stix_52.svg
mathtext_stix_53.pdf
mathtext_stix_53.png
mathtext_stix_53.svg
mathtext_stix_54.pdf
mathtext_stix_54.png
mathtext_stix_54.svg
mathtext_stix_55.pdf
mathtext_stix_55.png
mathtext_stix_55.svg
mathtext_stix_56.pdf
mathtext_stix_56.png
mathtext_stix_56.svg
mathtext_stix_57.pdf
mathtext_stix_57.png
mathtext_stix_57.svg
mathtext_stix_58.pdf
mathtext_stix_58.png
mathtext_stix_58.svg
mathtext_stix_59.pdf
mathtext_stix_59.png
mathtext_stix_59.svg
mathtext_stix_60.pdf
mathtext_stix_60.png
mathtext_stix_60.svg
mathtext_stix_61.pdf
mathtext_stix_61.png
mathtext_stix_61.svg
mathtext_stix_62.pdf
mathtext_stix_62.png
mathtext_stix_62.svg
mathtext_stix_63.pdf
mathtext_stix_63.png
mathtext_stix_63.svg
mathtext_stix_64.pdf
mathtext_stix_64.png
mathtext_stix_64.svg
mathtext_stix_65.pdf
mathtext_stix_65.png
mathtext_stix_65.svg
mathtext_stix_67.pdf
mathtext_stix_67.png
mathtext_stix_67.svg
mathtext_stix_68.pdf
mathtext_stix_68.png
mathtext_stix_68.svg
mathtext_stix_69.pdf
mathtext_stix_69.png
mathtext_stix_69.svg
mathtext_stix_70.pdf
mathtext_stix_70.png
mathtext_stix_70.svg
mathtext_stix_71.pdf
mathtext_stix_71.png
mathtext_stix_71.svg
mathtext_stix_72.pdf
mathtext_stix_72.png
mathtext_stix_72.svg
mathtext_stix_73.pdf
mathtext_stix_73.png
mathtext_stix_73.svg
mathtext_stix_74.pdf
mathtext_stix_74.png
mathtext_stix_74.svg
mathtext_stix_75.pdf
mathtext_stix_75.png
mathtext_stix_75.svg
mathtext_stix_76.pdf
mathtext_stix_76.png
mathtext_stix_76.svg
mathtext_stix_77.pdf
mathtext_stix_77.png
mathtext_stix_77.svg
mathtext_stix_78.pdf
mathtext_stix_78.png
mathtext_stix_78.svg
mathtext_stix_79.pdf
mathtext_stix_79.png
mathtext_stix_79.svg
mathtext_stix_80.pdf
mathtext_stix_80.png
mathtext_stix_80.svg
mathtext_stix_81.pdf
mathtext_stix_81.png
mathtext_stix_81.svg
mathtext_stix_82.pdf
mathtext_stix_82.png
mathtext_stix_82.svg
mathtext_stixsans_00.pdf
mathtext_stixsans_00.png
mathtext_stixsans_00.svg
mathtext_stixsans_01.pdf
mathtext_stixsans_01.png
mathtext_stixsans_01.svg
mathtext_stixsans_02.pdf
mathtext_stixsans_02.png
mathtext_stixsans_02.svg
mathtext_stixsans_03.pdf
mathtext_stixsans_03.png
mathtext_stixsans_03.svg
mathtext_stixsans_04.pdf
mathtext_stixsans_04.png
mathtext_stixsans_04.svg
mathtext_stixsans_05.pdf
mathtext_stixsans_05.png
mathtext_stixsans_05.svg
mathtext_stixsans_06.pdf
mathtext_stixsans_06.png
mathtext_stixsans_06.svg
mathtext_stixsans_07.pdf
mathtext_stixsans_07.png
mathtext_stixsans_07.svg
mathtext_stixsans_08.pdf
mathtext_stixsans_08.png
mathtext_stixsans_08.svg
mathtext_stixsans_09.pdf
mathtext_stixsans_09.png
mathtext_stixsans_09.svg
mathtext_stixsans_10.pdf
mathtext_stixsans_10.png
mathtext_stixsans_10.svg
mathtext_stixsans_11.pdf
mathtext_stixsans_11.png
mathtext_stixsans_11.svg
mathtext_stixsans_12.pdf
mathtext_stixsans_12.png
mathtext_stixsans_12.svg
mathtext_stixsans_13.pdf
mathtext_stixsans_13.png
mathtext_stixsans_13.svg
mathtext_stixsans_14.pdf
mathtext_stixsans_14.png
mathtext_stixsans_14.svg
mathtext_stixsans_15.pdf
mathtext_stixsans_15.png
mathtext_stixsans_15.svg
mathtext_stixsans_16.pdf
mathtext_stixsans_16.png
mathtext_stixsans_16.svg
mathtext_stixsans_17.pdf
mathtext_stixsans_17.png
mathtext_stixsans_17.svg
mathtext_stixsans_18.pdf
mathtext_stixsans_18.png
mathtext_stixsans_18.svg
mathtext_stixsans_19.pdf
mathtext_stixsans_19.png
mathtext_stixsans_19.svg
mathtext_stixsans_20.pdf
mathtext_stixsans_20.png
mathtext_stixsans_20.svg
mathtext_stixsans_21.pdf
mathtext_stixsans_21.png
mathtext_stixsans_21.svg
mathtext_stixsans_22.pdf
mathtext_stixsans_22.png
mathtext_stixsans_22.svg
mathtext_stixsans_23.pdf
mathtext_stixsans_23.png
mathtext_stixsans_23.svg
mathtext_stixsans_24.pdf
mathtext_stixsans_24.png
mathtext_stixsans_24.svg
mathtext_stixsans_25.pdf
mathtext_stixsans_25.png
mathtext_stixsans_25.svg
mathtext_stixsans_26.pdf
mathtext_stixsans_26.png
mathtext_stixsans_26.svg
mathtext_stixsans_27.pdf
mathtext_stixsans_27.png
mathtext_stixsans_27.svg
mathtext_stixsans_28.pdf
mathtext_stixsans_28.png
mathtext_stixsans_28.svg
mathtext_stixsans_29.pdf
mathtext_stixsans_29.png
mathtext_stixsans_29.svg
mathtext_stixsans_30.pdf
mathtext_stixsans_30.png
mathtext_stixsans_30.svg
mathtext_stixsans_31.pdf
mathtext_stixsans_31.png
mathtext_stixsans_31.svg
mathtext_stixsans_32.pdf
mathtext_stixsans_32.png
mathtext_stixsans_32.svg
mathtext_stixsans_33.pdf
mathtext_stixsans_33.png
mathtext_stixsans_33.svg
mathtext_stixsans_34.pdf
mathtext_stixsans_34.png
mathtext_stixsans_34.svg
mathtext_stixsans_35.pdf
mathtext_stixsans_35.png
mathtext_stixsans_35.svg
mathtext_stixsans_36.pdf
mathtext_stixsans_36.png
mathtext_stixsans_36.svg
mathtext_stixsans_37.pdf
mathtext_stixsans_37.png
mathtext_stixsans_37.svg
mathtext_stixsans_38.pdf
mathtext_stixsans_38.png
mathtext_stixsans_38.svg
mathtext_stixsans_39.pdf
mathtext_stixsans_39.png
mathtext_stixsans_39.svg
mathtext_stixsans_40.pdf
mathtext_stixsans_40.png
mathtext_stixsans_40.svg
mathtext_stixsans_41.pdf
mathtext_stixsans_41.png
mathtext_stixsans_41.svg
mathtext_stixsans_42.pdf
mathtext_stixsans_42.png
mathtext_stixsans_42.svg
mathtext_stixsans_43.pdf
mathtext_stixsans_43.png
mathtext_stixsans_43.svg
mathtext_stixsans_44.pdf
mathtext_stixsans_44.png
mathtext_stixsans_44.svg
mathtext_stixsans_45.pdf
mathtext_stixsans_45.png
mathtext_stixsans_45.svg
mathtext_stixsans_46.pdf
mathtext_stixsans_46.png
mathtext_stixsans_46.svg
mathtext_stixsans_47.pdf
mathtext_stixsans_47.png
mathtext_stixsans_47.svg
mathtext_stixsans_48.pdf
mathtext_stixsans_48.png
mathtext_stixsans_48.svg
mathtext_stixsans_49.pdf
mathtext_stixsans_49.png
mathtext_stixsans_49.svg
mathtext_stixsans_50.pdf
mathtext_stixsans_50.png
mathtext_stixsans_50.svg
mathtext_stixsans_51.pdf
mathtext_stixsans_51.png
mathtext_stixsans_51.svg
mathtext_stixsans_52.pdf
mathtext_stixsans_52.png
mathtext_stixsans_52.svg
mathtext_stixsans_53.pdf
mathtext_stixsans_53.png
mathtext_stixsans_53.svg
mathtext_stixsans_54.pdf
mathtext_stixsans_54.png
mathtext_stixsans_54.svg
mathtext_stixsans_55.pdf
mathtext_stixsans_55.png
mathtext_stixsans_55.svg
mathtext_stixsans_56.pdf
mathtext_stixsans_56.png
mathtext_stixsans_56.svg
mathtext_stixsans_57.pdf
mathtext_stixsans_57.png
mathtext_stixsans_57.svg
mathtext_stixsans_58.pdf
mathtext_stixsans_58.png
mathtext_stixsans_58.svg
mathtext_stixsans_59.pdf
mathtext_stixsans_59.png
mathtext_stixsans_59.svg
mathtext_stixsans_60.pdf
mathtext_stixsans_60.png
mathtext_stixsans_60.svg
mathtext_stixsans_61.pdf
mathtext_stixsans_61.png
mathtext_stixsans_61.svg
mathtext_stixsans_62.pdf
mathtext_stixsans_62.png
mathtext_stixsans_62.svg
mathtext_stixsans_63.pdf
mathtext_stixsans_63.png
mathtext_stixsans_63.svg
mathtext_stixsans_64.pdf
mathtext_stixsans_64.png
mathtext_stixsans_64.svg
mathtext_stixsans_65.pdf
mathtext_stixsans_65.png
mathtext_stixsans_65.svg
mathtext_stixsans_67.pdf
mathtext_stixsans_67.png
mathtext_stixsans_67.svg
mathtext_stixsans_68.pdf
mathtext_stixsans_68.png
mathtext_stixsans_68.svg
mathtext_stixsans_69.pdf
mathtext_stixsans_69.png
mathtext_stixsans_69.svg
mathtext_stixsans_70.pdf
mathtext_stixsans_70.png
mathtext_stixsans_70.svg
mathtext_stixsans_71.pdf
mathtext_stixsans_71.png
mathtext_stixsans_71.svg
mathtext_stixsans_72.pdf
mathtext_stixsans_72.png
mathtext_stixsans_72.svg
mathtext_stixsans_73.pdf
mathtext_stixsans_73.png
mathtext_stixsans_73.svg
mathtext_stixsans_74.pdf
mathtext_stixsans_74.png
mathtext_stixsans_74.svg
mathtext_stixsans_75.pdf
mathtext_stixsans_75.png
mathtext_stixsans_75.svg
mathtext_stixsans_76.pdf
mathtext_stixsans_76.png
mathtext_stixsans_76.svg
mathtext_stixsans_77.pdf
mathtext_stixsans_77.png
mathtext_stixsans_77.svg
mathtext_stixsans_78.pdf
mathtext_stixsans_78.png
mathtext_stixsans_78.svg
mathtext_stixsans_79.pdf
mathtext_stixsans_79.png
mathtext_stixsans_79.svg
mathtext_stixsans_80.pdf
mathtext_stixsans_80.png
mathtext_stixsans_80.svg
mathtext_stixsans_81.pdf
mathtext_stixsans_81.png
mathtext_stixsans_81.svg
mathtext_stixsans_82.pdf
mathtext_stixsans_82.png
mathtext_stixsans_82.svg

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tests/baseline_images/test_offsetbox:
anchoredtext_align.png
offsetbox_clipping.pdf
offsetbox_clipping.png
offsetbox_clipping.svg

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tests/baseline_images/test_patches:
all_quadrants_arcs.svg
annulus.png
clip_to_bbox.pdf
clip_to_bbox.png
clip_to_bbox.svg
connection_patch.png
large_arc.svg
multi_color_hatch.pdf
multi_color_hatch.png
multi_color_hatch.svg
patch_alpha_coloring.pdf
patch_alpha_coloring.png
patch_alpha_coloring.svg
patch_alpha_override.pdf
patch_alpha_override.png
patch_alpha_override.svg
patch_custom_linestyle.pdf
patch_custom_linestyle.png
patch_custom_linestyle.svg
units_rectangle.png
wedge_range.pdf
wedge_range.png
wedge_range.svg

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tests/baseline_images/test_path:
arrow_contains_point.png
marker_paths.pdf
nan_path.eps
nan_path.pdf
nan_path.png
nan_path.svg
path_clipping.svg
semi_log_with_zero.png
xkcd.png
xkcd_marker.png

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tests/baseline_images/test_patheffects:
collection.pdf
collection.png
collection.svg
patheffect1.pdf
patheffect1.png
patheffect1.svg
patheffect2.pdf
patheffect2.png
patheffect2.svg
patheffect3.pdf
patheffect3.png
patheffect3.svg
stroked_text.png
tickedstroke.png

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tests/baseline_images/test_pickle:
multi_pickle.png

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tests/baseline_images/test_png:
pngsuite.png
uint16.png

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tests/baseline_images/test_polar:
polar_alignment.png
polar_axes.pdf
polar_axes.png
polar_axes.svg
polar_coords.pdf
polar_coords.png
polar_coords.svg
polar_invertedylim.png
polar_invertedylim_rorigin.png
polar_negative_rmin.pdf
polar_negative_rmin.png
polar_negative_rmin.svg
polar_rlabel_position.pdf
polar_rlabel_position.png
polar_rlabel_position.svg
polar_rmin.pdf
polar_rmin.png
polar_rmin.svg
polar_rorigin.pdf
polar_rorigin.png
polar_rorigin.svg
polar_theta_position.pdf
polar_theta_position.png
polar_theta_position.svg
polar_theta_wedge.pdf
polar_theta_wedge.png
polar_theta_wedge.svg

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tests/baseline_images/test_quiver:
barbs_pivot_test_image.png
barbs_test_flip.png
barbs_test_image.png
quiver_animated_test_image.png
quiver_key_pivot.png
quiver_key_xy.png
quiver_single_test_image.png
quiver_with_key_test_image.png
quiver_xy.png

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tests/baseline_images/test_scale:
function_scales.png
logit_scales.png
logscale_mask.png
logscale_nonpos_values.png

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tests/baseline_images/test_simplification:
clipper_edge.pdf
clipper_edge.png
clipper_edge.svg
clipping.pdf
clipping.png
clipping.svg
clipping_diamond.pdf
clipping_diamond.png
clipping_diamond.svg
clipping_with_nans.pdf
clipping_with_nans.png
clipping_with_nans.svg
fft_peaks.pdf
fft_peaks.png
fft_peaks.svg
hatch_simplify.pdf
hatch_simplify.png
hatch_simplify.svg
overflow.pdf
overflow.png
overflow.svg
para_equal_perp.pdf
para_equal_perp.png
para_equal_perp.svg
simplify_curve.pdf
simplify_curve.png
simplify_curve.svg

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tests/baseline_images/test_skew:
skew_axes.pdf
skew_axes.png
skew_axes.svg
skew_rects.pdf
skew_rects.png
skew_rects.svg

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tests/baseline_images/test_spines:
spines_axes_positions.pdf
spines_axes_positions.png
spines_axes_positions.svg
spines_capstyle.pdf
spines_capstyle.png
spines_capstyle.svg
spines_data_positions.pdf
spines_data_positions.png
spines_data_positions.svg

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tests/baseline_images/test_streamplot:
streamplot_colormap.pdf
streamplot_colormap.png
streamplot_colormap.svg
streamplot_direction.png
streamplot_linewidth.pdf
streamplot_linewidth.png
streamplot_linewidth.svg
streamplot_masks_and_nans.pdf
streamplot_masks_and_nans.png
streamplot_masks_and_nans.svg
streamplot_maxlength.png
streamplot_startpoints.pdf
streamplot_startpoints.png
streamplot_startpoints.svg

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tests/baseline_images/test_subplots:
subplots_offset_text.pdf
subplots_offset_text.png
subplots_offset_text.svg

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tests/baseline_images/test_table:
table_auto_column.png
table_cell_manipulation.png
table_labels.png
table_zorder.png

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tests/baseline_images/test_text:
agg_text_clip.png
annotation_negative_ax_coords.png
annotation_negative_fig_coords.png
antialiased.png
axes_titles.png
basictext_wrap.png
font_scaling.pdf
font_styles.pdf
font_styles.png
font_styles.svg
fonttext_wrap.png
large_subscript_title.png
multiline.pdf
multiline.png
multiline.svg
multiline2.pdf
multiline2.png
multiline2.svg
text_alignment.pdf
text_alignment.png
text_alignment.svg
text_as_path_opacity.svg
text_as_text_opacity.svg
text_bboxclip.pdf
text_bboxclip.png
text_bboxclip.svg
text_contains.png
text_pdf_chars_beyond_bmp.pdf
text_pdf_font42_kerning.pdf
text_pdf_kerning.pdf
titles.pdf
titles.png
titles.svg

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tests/baseline_images/test_tightlayout:
tight_layout1.pdf
tight_layout1.png
tight_layout1.svg
tight_layout2.pdf
tight_layout2.png
tight_layout2.svg
tight_layout3.pdf
tight_layout3.png
tight_layout3.svg
tight_layout4.pdf
tight_layout4.png
tight_layout4.svg
tight_layout5.pdf
tight_layout5.png
tight_layout5.svg
tight_layout6.pdf
tight_layout6.png
tight_layout6.svg
tight_layout7.pdf
tight_layout7.png
tight_layout7.svg
tight_layout8.pdf
tight_layout8.png
tight_layout8.svg
tight_layout9.pdf
tight_layout9.png
tight_layout9.svg
tight_layout_offsetboxes1.pdf
tight_layout_offsetboxes1.png
tight_layout_offsetboxes1.svg
tight_layout_offsetboxes2.pdf
tight_layout_offsetboxes2.png
tight_layout_offsetboxes2.svg

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tests/baseline_images/test_transforms:
pre_transform_data.pdf
pre_transform_data.png
pre_transform_data.svg

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tests/baseline_images/test_triangulation:
tri_smooth_contouring.png
tri_smooth_gradient.png
tripcolor1.png

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tests/baseline_images/test_ttconv:
truetype-conversion.pdf

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tests/baseline_images/test_units:
jpl_bar_units.png
jpl_barh_units.png
plot_masked_units.png
plot_pint.png

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tests/baseline_images/test_usetex:
test_usetex.pdf
test_usetex.png

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tests/baseline_images/test_widgets:
check_bunch_of_radio_buttons.png
check_radio_buttons.png

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tests/tinypages:
README.md
_static
conf.py
included_plot_21.rst
index.rst
range4.py
range6.py
some_plots.rst

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tests/tinypages/_static:
README.txt

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/tri:
__init__.py
triangulation.py
tricontour.py
trifinder.py
triinterpolate.py
tripcolor.py
triplot.py
trirefine.py
tritools.py

/workspace/matplotlib__matplotlib__3.4/lib/matplotlib.egg-info:
PKG-INFO
SOURCES.txt
dependency_links.txt
namespace_packages.txt
requires.txt
top_level.txt

/workspace/matplotlib__matplotlib__3.4/lib/mpl_toolkits:
__init__.py
axes_grid
axes_grid1
axisartist
mplot3d
tests

/workspace/matplotlib__matplotlib__3.4/lib/mpl_toolkits/axes_grid:
__init__.py
anchored_artists.py
angle_helper.py
axes_divider.py
axes_grid.py
axes_rgb.py
axes_size.py
axis_artist.py
axisline_style.py
axislines.py
clip_path.py
floating_axes.py
grid_finder.py
grid_helper_curvelinear.py
inset_locator.py
parasite_axes.py

/workspace/matplotlib__matplotlib__3.4/lib/mpl_toolkits/axes_grid1:
__init__.py
anchored_artists.py
axes_divider.py
axes_grid.py
axes_rgb.py
axes_size.py
inset_locator.py
mpl_axes.py
parasite_axes.py

/workspace/matplotlib__matplotlib__3.4/lib/mpl_toolkits/axisartist:
__init__.py
angle_helper.py
axes_divider.py
axes_grid.py
axes_rgb.py
axis_artist.py
axisline_style.py
axislines.py
clip_path.py
floating_axes.py
grid_finder.py
grid_helper_curvelinear.py
parasite_axes.py

/workspace/matplotlib__matplotlib__3.4/lib/mpl_toolkits/mplot3d:
__init__.py
art3d.py
axes3d.py
axis3d.py
proj3d.py

/workspace/matplotlib__matplotlib__3.4/lib/mpl_toolkits/tests:
__init__.py
baseline_images
conftest.py
test_axes_grid.py
test_axes_grid1.py
test_axisartist_angle_helper.py
test_axisartist_axis_artist.py
test_axisartist_axislines.py
test_axisartist_clip_path.py
test_axisartist_floating_axes.py
test_axisartist_grid_finder.py
test_axisartist_grid_helper_curvelinear.py
test_mplot3d.py

/workspace/matplotlib__matplotlib__3.4/lib/mpl_toolkits/tests/baseline_images:
test_axes_grid
test_axes_grid1
test_axisartist_axis_artist
test_axisartist_axislines
test_axisartist_clip_path
test_axisartist_floating_axes
test_axisartist_grid_helper_curvelinear
test_mplot3d

/workspace/matplotlib__matplotlib__3.4/lib/mpl_toolkits/tests/baseline_images/test_axes_grid:
imagegrid_cbar_mode.png

/workspace/matplotlib__matplotlib__3.4/lib/mpl_toolkits/tests/baseline_images/test_axes_grid1:
anchored_direction_arrows.png
anchored_direction_arrows_many_args.png
fill_facecolor.png
image_grid.png
inset_axes.png
inset_locator.png
inverted_zoomed_axes.png
twin_axes_empty_and_removed.png
zoomed_axes.png

/workspace/matplotlib__matplotlib__3.4/lib/mpl_toolkits/tests/baseline_images/test_axisartist_axis_artist:
axis_artist.png
axis_artist_labelbase.png
axis_artist_ticklabels.png
axis_artist_ticks.png

/workspace/matplotlib__matplotlib__3.4/lib/mpl_toolkits/tests/baseline_images/test_axisartist_axislines:
ParasiteAxesAuxTrans_meshplot.png
Subplot.png
SubplotZero.png

/workspace/matplotlib__matplotlib__3.4/lib/mpl_toolkits/tests/baseline_images/test_axisartist_clip_path:
clip_path.png

/workspace/matplotlib__matplotlib__3.4/lib/mpl_toolkits/tests/baseline_images/test_axisartist_floating_axes:
curvelinear3.png
curvelinear4.png

/workspace/matplotlib__matplotlib__3.4/lib/mpl_toolkits/tests/baseline_images/test_axisartist_grid_helper_curvelinear:
axis_direction.png
custom_transform.png
polar_box.png

/workspace/matplotlib__matplotlib__3.4/lib/mpl_toolkits/tests/baseline_images/test_mplot3d:
add_collection3d_zs_array.png
add_collection3d_zs_scalar.png
axes3d_cla.png
axes3d_isometric.png
axes3d_labelpad.png
axes3d_ortho.png
axes3d_rotated.png
bar3d.png
bar3d_notshaded.png
bar3d_shaded.png
computed_zorder.png
contour3d.png
contourf3d.png
contourf3d_fill.png
equal_box_aspect.png
errorbar3d.png
errorbar3d_errorevery.png
lines3d.png
minor_ticks.png
mixedsubplot.png
plot_3d_from_2d.png
poly3dcollection_alpha.png
poly3dcollection_closed.png
proj3d_axes_cube.png
proj3d_axes_cube_ortho.png
proj3d_lines_dists.png
quiver3d.png
quiver3d_masked.png
quiver3d_pivot_middle.png
quiver3d_pivot_tail.png
scatter3d.png
scatter3d_color.png
scatter_spiral.png
stem3d.png
surface3d.png
surface3d_masked.png
surface3d_masked_strides.png
surface3d_shaded.png
text3d.png
tricontour.png
trisurf3d.png
trisurf3d_shaded.png
voxels-alpha.png
voxels-edge-style.png
voxels-named-colors.png
voxels-rgb-data.png
voxels-simple.png
voxels-xyz.png
wireframe3d.png
wireframe3dzerocstride.png
wireframe3dzerorstride.png

/workspace/matplotlib__matplotlib__3.4/plot_types:
README.rst
arrays
basic
stats
unstructured

/workspace/matplotlib__matplotlib__3.4/plot_types/arrays:
README.rst
barbs.py
contour.py
contourf.py
imshow.py
pcolormesh.py
quiver.py
streamplot.py

/workspace/matplotlib__matplotlib__3.4/plot_types/basic:
README.rst
bar.py
fill_between.py
plot.py
scatter_plot.py
stem.py
step.py

/workspace/matplotlib__matplotlib__3.4/plot_types/stats:
README.rst
boxplot_plot.py
errorbar_plot.py
eventplot.py
hexbin.py
hist2d.py
hist_plot.py
pie.py
violin.py

/workspace/matplotlib__matplotlib__3.4/plot_types/unstructured:
README.rst
tricontour.py
tricontourf.py
tripcolor.py
triplot.py

/workspace/matplotlib__matplotlib__3.4/requirements:
dev
doc
testing

/workspace/matplotlib__matplotlib__3.4/requirements/dev:
dev-requirements.txt

/workspace/matplotlib__matplotlib__3.4/requirements/doc:
doc-requirements.txt

/workspace/matplotlib__matplotlib__3.4/requirements/testing:
all.txt
extra.txt
flake8.txt
minver.txt

/workspace/matplotlib__matplotlib__3.4/src:
_backend_agg.cpp
_backend_agg.h
_backend_agg_basic_types.h
_backend_agg_wrapper.cpp
_c_internal_utils.c
_contour.cpp
_contour.h
_contour_wrapper.cpp
_image_resample.h
_image_wrapper.cpp
_macosx.m
_path.h
_path_wrapper.cpp
_tkagg.cpp
_tkmini.h
_ttconv.cpp
agg_workaround.h
array.h
checkdep_freetype2.c
doc
ft2font.cpp
ft2font.h
ft2font_wrapper.cpp
mplutils.h
numpy_cpp.h
path_converters.h
py_adaptors.h
py_converters.cpp
py_converters.h
py_exceptions.h
qhull_wrap.cpp
tri

/workspace/matplotlib__matplotlib__3.4/src/doc:
segment_intersects_rectangle.svg

/workspace/matplotlib__matplotlib__3.4/src/tri:
_tri.cpp
_tri.h
_tri_wrapper.cpp

/workspace/matplotlib__matplotlib__3.4/tmp:
tmp6inj2y64.o
tmpj6s6d5qq.o
tmpj_n6k7tr.o

/workspace/matplotlib__matplotlib__3.4/tools:
README.txt
boilerplate.py
cache_zenodo_svg.py
create_DejaVuDisplay.sh
embed_js.py
gh_api.py
github_stats.py
make_icons.py
memleak.py
run_examples.py
subset.py
triage_tests.py
visualize_tests.py

/workspace/matplotlib__matplotlib__3.4/tutorials:
README.txt
advanced
colors
intermediate
introductory
provisional
text
toolkits

/workspace/matplotlib__matplotlib__3.4/tutorials/advanced:
README.txt
blitting.py
path_tutorial.py
patheffects_guide.py
transforms_tutorial.py

/workspace/matplotlib__matplotlib__3.4/tutorials/colors:
README.txt
colorbar_only.py
colormap-manipulation.py
colormapnorms.py
colormaps.py
colors.py

/workspace/matplotlib__matplotlib__3.4/tutorials/intermediate:
README.txt
artists.py
autoscale.py
color_cycle.py
constrainedlayout_guide.py
gridspec.py
imshow_extent.py
legend_guide.py
tight_layout_guide.py

/workspace/matplotlib__matplotlib__3.4/tutorials/introductory:
README.txt
customizing.py
images.py
lifecycle.py
pyplot.py
sample_plots.py
usage.py

/workspace/matplotlib__matplotlib__3.4/tutorials/provisional:
README.txt
mosaic.py

/workspace/matplotlib__matplotlib__3.4/tutorials/text:
README.txt
annotations.py
mathtext.py
pgf.py
text_intro.py
text_props.py
usetex.py

/workspace/matplotlib__matplotlib__3.4/tutorials/toolkits:
README.txt
axes_grid.py
axisartist.py
mplot3d.py

[Select the relevant files and use repo map to get highlevel representation and structure of repo]


============================================================



ACTION:

THOUGHT: Based on the repository structure and the PR description, this seems to be an issue with datetime axis spacing when using usetex=True in matplotlib 3.4. Let me first create a script to reproduce the issue.

1. Creating a reproduction script:
CODE:
CODE = """
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

np.random.seed(1)
matplotlib.rcParams["text.usetex"] = True

dates = pd.date_range("2020-01-01 00:00:00", end="2020-01-01 00:10:00", periods=100)
data = np.random.rand(100)

fig, ax = plt.subplots(constrained_layout=True)
ax.plot(dates, data)
plt.savefig("test_3.4.png")
"""
create_file("reproduce_issue.py", CODE)

============================================================



OBSERVATION:

[File reproduce_issue.py created.]
[File: /workspace/reproduce_issue.py (15 lines total after edit)]
1|
2|import matplotlib
3|import matplotlib.pyplot as plt
4|import numpy as np
5|import pandas as pd
6|
7|np.random.seed(1)
8|matplotlib.rcParams["text.usetex"] = True
9|
10|dates = pd.date_range("2020-01-01 00:00:00", end="2020-01-01 00:10:00", periods=100)
11|data = np.random.rand(100)
12|
13|fig, ax = plt.subplots(constrained_layout=True)
14|ax.plot(dates, data)
15|plt.savefig("test_3.4.png")
[File updated. Please review the changes carefully and make sure they are correct (correct indentation, no duplicate or redundant lines etc). Edit the file again if necessary.]


============================================================



ACTION:

THOUGHT: Let's run the script to reproduce the issue:
COMMAND:
python reproduce_issue.py

============================================================



OBSERVATION:

Traceback (most recent call last):
  File "reproduce_issue.py", line 14, in <module>
    ax.plot(dates, data)
  File "/testbed/lib/matplotlib/axes/_axes.py", line 1633, in plot
    lines = [*self._get_lines(*args, data=data, **kwargs)]
  File "/testbed/lib/matplotlib/axes/_base.py", line 312, in __call__
    yield from self._plot_args(this, kwargs)
  File "/testbed/lib/matplotlib/axes/_base.py", line 487, in _plot_args
    x = _check_1d(xy[0])
  File "/testbed/lib/matplotlib/cbook/__init__.py", line 1327, in _check_1d
    ndim = x[:, None].ndim
  File "/opt/miniconda3/envs/testbed/lib/python3.8/site-packages/pandas/core/indexes/base.py", line 5199, in __getitem__
    disallow_ndim_indexing(result)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/site-packages/pandas/core/indexers/utils.py", line 343, in disallow_ndim_indexing
    raise ValueError(
ValueError: Multi-dimensional indexing (e.g. `obj[:, None]`) is no longer supported. Convert to a numpy array before indexing instead.


============================================================



ACTION:

THOUGHT: I apologize for the error. Let's modify the script to convert the pandas datetime to numpy array first:
CODE:
CODE = """
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

np.random.seed(1)
matplotlib.rcParams["text.usetex"] = True

dates = pd.date_range("2020-01-01 00:00:00", end="2020-01-01 00:10:00", periods=100)
dates = dates.to_numpy()  # Convert to numpy array
data = np.random.rand(100)

fig, ax = plt.subplots(constrained_layout=True)
ax.plot(dates, data)
plt.savefig("test_3.4.png")
"""
create_file("reproduce_issue.py", CODE)

============================================================



OBSERVATION:

[File reproduce_issue.py already exists and File overwritten.]
[File: /workspace/reproduce_issue.py (16 lines total after edit)]
1|
2|import matplotlib
3|import matplotlib.pyplot as plt
4|import numpy as np
5|import pandas as pd
6|
7|np.random.seed(1)
8|matplotlib.rcParams["text.usetex"] = True
9|
10|dates = pd.date_range("2020-01-01 00:00:00", end="2020-01-01 00:10:00", periods=100)
11|dates = dates.to_numpy()  # Convert to numpy array
12|data = np.random.rand(100)
13|
14|fig, ax = plt.subplots(constrained_layout=True)
15|ax.plot(dates, data)
16|plt.savefig("test_3.4.png")
[File updated. Please review the changes carefully and make sure they are correct (correct indentation, no duplicate or redundant lines etc). Edit the file again if necessary.]


============================================================



ACTION:

THOUGHT: Let's run the modified script:
COMMAND:
python reproduce_issue.py

============================================================



OBSERVATION:

[Code executed successfully with no output]

============================================================



ACTION:

THOUGHT: The script executed successfully. Now let's examine the relevant files to understand where the datetime axis spacing with usetex is handled. Based on the PR description, this is related to datetime axis formatting and tex rendering.

Let's look at the relevant files:

1. First, let's check the datetime axis formatting code:
CODE:
open_file('/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/dates.py')

============================================================



OBSERVATION:

[File: /workspace/matplotlib__matplotlib__3.4/lib/matplotlib/dates.py (1921 lines total)]
1|"""
2|Matplotlib provides sophisticated date plotting capabilities, standing on the
3|shoulders of python :mod:`datetime` and the add-on module :mod:`dateutil`.
4|
5|By default, Matplotlib uses the units machinery described in
6|`~matplotlib.units` to convert `datetime.datetime`, and `numpy.datetime64`
7|objects when plotted on an x- or y-axis. The user does not
8|need to do anything for dates to be formatted, but dates often have strict
9|formatting needs, so this module provides many axis locators and formatters.
10|A basic example using `numpy.datetime64` is::
11|
12|    import numpy as np
13|
14|    times = np.arange(np.datetime64('2001-01-02'),
15|                      np.datetime64('2002-02-03'), np.timedelta64(75, 'm'))
16|    y = np.random.randn(len(times))
17|
18|    fig, ax = plt.subplots()
19|    ax.plot(times, y)
20|
21|.. seealso::
22|
23|    - :doc:`/gallery/text_labels_and_annotations/date`
24|    - :doc:`/gallery/ticks/date_concise_formatter`
25|    - :doc:`/gallery/ticks/date_demo_convert`
26|
27|.. _date-format:
28|
29|Matplotlib date format
30|----------------------
31|
32|Matplotlib represents dates using floating point numbers specifying the number
33|of days since a default epoch of 1970-01-01 UTC; for example,
34|1970-01-01, 06:00 is the floating point number 0.25. The formatters and
35|locators require the use of `datetime.datetime` objects, so only dates between
36|year 0001 and 9999 can be represented.  Microsecond precision
37|is achievable for (approximately) 70 years on either side of the epoch, and
38|20 microseconds for the rest of the allowable range of dates (year 0001 to
39|9999). The epoch can be changed at import time via `.dates.set_epoch` or
40|:rc:`dates.epoch` to other dates if necessary; see
41|:doc:`/gallery/ticks/date_precision_and_epochs` for a discussion.
42|
43|.. note::
44|
45|   Before Matplotlib 3.3, the epoch was 0000-12-31 which lost modern
46|   microsecond precision and also made the default axis limit of 0 an invalid
47|   datetime.  In 3.3 the epoch was changed as above.  To convert old
48|   ordinal floats to the new epoch, users can do::
49|
50|     new_ordinal = old_ordinal + mdates.date2num(np.datetime64('0000-12-31'))
51|
52|
53|There are a number of helper functions to convert between :mod:`datetime`
54|objects and Matplotlib dates:
55|
56|.. currentmodule:: matplotlib.dates
57|
58|.. autosummary::
59|   :nosignatures:
60|
61|   datestr2num
62|   date2num
63|   num2date
64|   num2timedelta
65|   drange
66|   set_epoch
67|   get_epoch
68|
69|.. note::
70|
71|   Like Python's `datetime.datetime`, Matplotlib uses the Gregorian calendar
72|   for all conversions between dates and floating point numbers. This practice
73|   is not universal, and calendar differences can cause confusing
74|   differences between what Python and Matplotlib give as the number of days
75|   since 0001-01-01 and what other software and databases yield.  For
76|   example, the US Naval Observatory uses a calendar that switches
77|   from Julian to Gregorian in October, 1582.  Hence, using their
78|   calculator, the number of days between 0001-01-01 and 2006-04-01 is
79|   732403, whereas using the Gregorian calendar via the datetime
80|   module we find::
81|
82|     In [1]: date(2006, 4, 1).toordinal() - date(1, 1, 1).toordinal()
83|     Out[1]: 732401
84|
85|All the Matplotlib date converters, tickers and formatters are timezone aware.
86|If no explicit timezone is provided, :rc:`timezone` is assumed.  If you want to
87|use a custom time zone, pass a `datetime.tzinfo` instance with the tz keyword
88|argument to `num2date`, `.Axis.axis_date`, and any custom date tickers or
89|locators you create.
90|
91|A wide range of specific and general purpose date tick locators and
92|formatters are provided in this module.  See
93|:mod:`matplotlib.ticker` for general information on tick locators
94|and formatters.  These are described below.
95|
96|The dateutil_ module provides additional code to handle date ticking, making it
97|easy to place ticks on any kinds of dates.  See examples below.
98|
99|.. _dateutil: https://dateutil.readthedocs.io
100|
101|Date tickers
102|------------
103|
104|Most of the date tickers can locate single or multiple values.  For example::
105|
106|    # import constants for the days of the week
107|    from matplotlib.dates import MO, TU, WE, TH, FR, SA, SU
108|
109|    # tick on mondays every week
110|    loc = WeekdayLocator(byweekday=MO, tz=tz)
111|
112|    # tick on mondays and saturdays
113|    loc = WeekdayLocator(byweekday=(MO, SA))
114|
115|In addition, most of the constructors take an interval argument::
116|
117|    # tick on mondays every second week
118|    loc = WeekdayLocator(byweekday=MO, interval=2)
119|
120|The rrule locator allows completely general date ticking::
121|
122|    # tick every 5th easter
123|    rule = rrulewrapper(YEARLY, byeaster=1, interval=5)
124|    loc = RRuleLocator(rule)
125|
126|The available date tickers are:
127|
128|* `MicrosecondLocator`: Locate microseconds.
129|
130|* `SecondLocator`: Locate seconds.
131|
132|* `MinuteLocator`: Locate minutes.
133|
134|* `HourLocator`: Locate hours.
135|
136|* `DayLocator`: Locate specified days of the month.
137|
138|* `WeekdayLocator`: Locate days of the week, e.g., MO, TU.
139|
140|* `MonthLocator`: Locate months, e.g., 7 for July.
141|
142|* `YearLocator`: Locate years that are multiples of base.
143|
144|* `RRuleLocator`: Locate using a `matplotlib.dates.rrulewrapper`.
145|  `.rrulewrapper` is a simple wrapper around dateutil_'s `dateutil.rrule` which
146|  allow almost arbitrary date tick specifications.  See :doc:`rrule example
147|  </gallery/ticks/date_demo_rrule>`.
148|
149|* `AutoDateLocator`: On autoscale, this class picks the best `DateLocator`
150|  (e.g., `RRuleLocator`) to set the view limits and the tick locations.  If
151|  called with ``interval_multiples=True`` it will make ticks line up with
152|  sensible multiples of the tick intervals.  E.g. if the interval is 4 hours,
153|  it will pick hours 0, 4, 8, etc as ticks.  This behaviour is not guaranteed
154|  by default.
155|
156|Date formatters
157|---------------
158|
159|The available date formatters are:
160|
161|* `AutoDateFormatter`: attempts to figure out the best format to use.  This is
162|  most useful when used with the `AutoDateLocator`.
163|
164|* `ConciseDateFormatter`: also attempts to figure out the best format to use,
165|  and to make the format as compact as possible while still having complete
166|  date information.  This is most useful when used with the `AutoDateLocator`.
167|
168|* `DateFormatter`: use `~datetime.datetime.strftime` format strings.
169|"""
170|
171|import datetime
172|import functools
173|import logging
174|import math
175|import re
176|
177|from dateutil.rrule import (rrule, MO, TU, WE, TH, FR, SA, SU, YEARLY,
178|                            MONTHLY, WEEKLY, DAILY, HOURLY, MINUTELY,
179|                            SECONDLY)
180|from dateutil.relativedelta import relativedelta
181|import dateutil.parser
182|import dateutil.tz
183|import numpy as np
184|
185|import matplotlib as mpl
186|from matplotlib import _api, cbook, ticker, units
187|
188|__all__ = ('datestr2num', 'date2num', 'num2date', 'num2timedelta', 'drange',
189|           'epoch2num', 'num2epoch', 'set_epoch', 'get_epoch', 'DateFormatter',
190|           'ConciseDateFormatter', 'AutoDateFormatter',
191|           'DateLocator', 'RRuleLocator', 'AutoDateLocator', 'YearLocator',
192|           'MonthLocator', 'WeekdayLocator',
193|           'DayLocator', 'HourLocator', 'MinuteLocator',
194|           'SecondLocator', 'MicrosecondLocator',
195|           'rrule', 'MO', 'TU', 'WE', 'TH', 'FR', 'SA', 'SU',
196|           'YEARLY', 'MONTHLY', 'WEEKLY', 'DAILY',
197|           'HOURLY', 'MINUTELY', 'SECONDLY', 'MICROSECONDLY', 'relativedelta',
198|           'DateConverter', 'ConciseDateConverter')
199|
200|
201|_log = logging.getLogger(__name__)
202|UTC = datetime.timezone.utc
203|
204|
205|def _get_rc_timezone():
206|    """Retrieve the preferred timezone from the rcParams dictionary."""
207|    s = mpl.rcParams['timezone']
208|    if s == 'UTC':
209|        return UTC
210|    return dateutil.tz.gettz(s)
211|
212|
213|"""
214|Time-related constants.
215|"""
216|EPOCH_OFFSET = float(datetime.datetime(1970, 1, 1).toordinal())
217|# EPOCH_OFFSET is not used by matplotlib
218|JULIAN_OFFSET = 1721424.5  # Julian date at 0000-12-31
219|# note that the Julian day epoch is achievable w/
220|# np.datetime64('-4713-11-24T12:00:00'); datetime64 is proleptic
221|# Gregorian and BC has a one-year offset.  So
222|# np.datetime64('0000-12-31') - np.datetime64('-4713-11-24T12:00') = 1721424.5
223|# Ref: https://en.wikipedia.org/wiki/Julian_day
224|MICROSECONDLY = SECONDLY + 1
225|HOURS_PER_DAY = 24.
226|MIN_PER_HOUR = 60.
227|SEC_PER_MIN = 60.
228|MONTHS_PER_YEAR = 12.
229|
230|DAYS_PER_WEEK = 7.
231|DAYS_PER_MONTH = 30.
232|DAYS_PER_YEAR = 365.0
233|
234|MINUTES_PER_DAY = MIN_PER_HOUR * HOURS_PER_DAY
235|
236|SEC_PER_HOUR = SEC_PER_MIN * MIN_PER_HOUR
237|SEC_PER_DAY = SEC_PER_HOUR * HOURS_PER_DAY
238|SEC_PER_WEEK = SEC_PER_DAY * DAYS_PER_WEEK
239|
240|MUSECONDS_PER_DAY = 1e6 * SEC_PER_DAY
241|
242|MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY = (
243|    MO, TU, WE, TH, FR, SA, SU)
244|WEEKDAYS = (MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY)
245|
246|# default epoch: passed to np.datetime64...
247|_epoch = None
248|
249|
250|def _reset_epoch_test_example():
251|    """
252|    Reset the Matplotlib date epoch so it can be set again.
253|
254|    Only for use in tests and examples.
255|    """
256|    global _epoch
257|    _epoch = None
258|
259|
260|def set_epoch(epoch):
261|    """
262|    Set the epoch (origin for dates) for datetime calculations.
263|
264|    The default epoch is :rc:`dates.epoch` (by default 1970-01-01T00:00).
265|
266|    If microsecond accuracy is desired, the date being plotted needs to be
267|    within approximately 70 years of the epoch. Matplotlib internally
268|    represents dates as days since the epoch, so floating point dynamic
269|    range needs to be within a factor of 2^52.
270|
271|    `~.dates.set_epoch` must be called before any dates are converted
272|    (i.e. near the import section) or a RuntimeError will be raised.
273|
274|    See also :doc:`/gallery/ticks/date_precision_and_epochs`.
275|
276|    Parameters
277|    ----------
278|    epoch : str
279|        valid UTC date parsable by `numpy.datetime64` (do not include
280|        timezone).
281|
282|    """
283|    global _epoch
284|    if _epoch is not None:
285|        raise RuntimeError('set_epoch must be called before dates plotted.')
286|    _epoch = epoch
287|
288|
289|def get_epoch():
290|    """
291|    Get the epoch used by `.dates`.
292|
293|    Returns
294|    -------
295|    epoch : str
296|        String for the epoch (parsable by `numpy.datetime64`).
297|    """
298|    global _epoch
299|
300|    if _epoch is None:
301|        _epoch = mpl.rcParams['date.epoch']
302|    return _epoch
303|
304|
305|def _dt64_to_ordinalf(d):
306|    """
307|    Convert `numpy.datetime64` or an ndarray of those types to Gregorian
308|    date as UTC float relative to the epoch (see `.get_epoch`).  Roundoff
309|    is float64 precision.  Practically: microseconds for dates between
310|    290301 BC, 294241 AD, milliseconds for larger dates
311|    (see `numpy.datetime64`).
312|    """
313|
314|    # the "extra" ensures that we at least allow the dynamic range out to
315|    # seconds.  That should get out to +/-2e11 years.
316|    dseconds = d.astype('datetime64[s]')
317|    extra = (d - dseconds).astype('timedelta64[ns]')
318|    t0 = np.datetime64(get_epoch(), 's')
319|    dt = (dseconds - t0).astype(np.float64)
320|    dt += extra.astype(np.float64) / 1.0e9
321|    dt = dt / SEC_PER_DAY
322|
323|    NaT_int = np.datetime64('NaT').astype(np.int64)
324|    d_int = d.astype(np.int64)
325|    try:
326|        dt[d_int == NaT_int] = np.nan
327|    except TypeError:
328|        if d_int == NaT_int:
329|            dt = np.nan
330|    return dt
331|
332|
333|def _from_ordinalf(x, tz=None):
334|    """
335|    Convert Gregorian float of the date, preserving hours, minutes,
336|    seconds and microseconds.  Return value is a `.datetime`.
337|
338|    The input date *x* is a float in ordinal days at UTC, and the output will
339|    be the specified `.datetime` object corresponding to that time in
340|    timezone *tz*, or if *tz* is ``None``, in the timezone specified in
341|    :rc:`timezone`.
342|    """
343|
344|    if tz is None:
345|        tz = _get_rc_timezone()
346|
347|    dt = (np.datetime64(get_epoch()) +
348|          np.timedelta64(int(np.round(x * MUSECONDS_PER_DAY)), 'us'))
349|    if dt < np.datetime64('0001-01-01') or dt >= np.datetime64('10000-01-01'):
350|        raise ValueError(f'Date ordinal {x} converts to {dt} (using '
351|                         f'epoch {get_epoch()}), but Matplotlib dates must be '
352|                          'between year 0001 and 9999.')
353|    # convert from datetime64 to datetime:
354|    dt = dt.tolist()
355|
356|    # datetime64 is always UTC:
357|    dt = dt.replace(tzinfo=dateutil.tz.gettz('UTC'))
358|    # but maybe we are working in a different timezone so move.
359|    dt = dt.astimezone(tz)
360|    # fix round off errors
361|    if np.abs(x) > 70 * 365:
362|        # if x is big, round off to nearest twenty microseconds.
363|        # This avoids floating point roundoff error
364|        ms = round(dt.microsecond / 20) * 20
365|        if ms == 1000000:
366|            dt = dt.replace(microsecond=0) + datetime.timedelta(seconds=1)
367|        else:
368|            dt = dt.replace(microsecond=ms)
369|
370|    return dt
371|
372|
373|# a version of _from_ordinalf that can operate on numpy arrays
374|_from_ordinalf_np_vectorized = np.vectorize(_from_ordinalf, otypes="O")
375|
376|
377|# a version of dateutil.parser.parse that can operate on numpy arrays
378|_dateutil_parser_parse_np_vectorized = np.vectorize(dateutil.parser.parse)
379|
380|
381|def datestr2num(d, default=None):
382|    """
383|    Convert a date string to a datenum using `dateutil.parser.parse`.
384|
385|    Parameters
386|    ----------
387|    d : str or sequence of str
388|        The dates to convert.
389|
390|    default : datetime.datetime, optional
391|        The default date to use when fields are missing in *d*.
392|    """
393|    if isinstance(d, str):
394|        dt = dateutil.parser.parse(d, default=default)
395|        return date2num(dt)
396|    else:
397|        if default is not None:
398|            d = [dateutil.parser.parse(s, default=default) for s in d]
399|        d = np.asarray(d)
400|        if not d.size:
401|            return d
402|        return date2num(_dateutil_parser_parse_np_vectorized(d))
403|
404|
405|def date2num(d):
406|    """
407|    Convert datetime objects to Matplotlib dates.
408|
409|    Parameters
410|    ----------
411|    d : `datetime.datetime` or `numpy.datetime64` or sequences of these
412|
413|    Returns
414|    -------
415|    float or sequence of floats
416|        Number of days since the epoch.  See `.get_epoch` for the
417|        epoch, which can be changed by :rc:`date.epoch` or `.set_epoch`.  If
418|        the epoch is "1970-01-01T00:00:00" (default) then noon Jan 1 1970
419|        ("1970-01-01T12:00:00") returns 0.5.
420|
421|    Notes
422|    -----
423|    The Gregorian calendar is assumed; this is not universal practice.
424|    For details see the module docstring.
425|    """
426|    if hasattr(d, "values"):
427|        # this unpacks pandas series or dataframes...
428|        d = d.values
429|
430|    # make an iterable, but save state to unpack later:
431|    iterable = np.iterable(d)
432|    if not iterable:
433|        d = [d]
434|
435|    d = np.asarray(d)
436|    # convert to datetime64 arrays, if not already:
437|    if not np.issubdtype(d.dtype, np.datetime64):
438|        # datetime arrays
439|        if not d.size:
440|            # deals with an empty array...
441|            return d
442|        tzi = getattr(d[0], 'tzinfo', None)
443|        if tzi is not None:
444|            # make datetime naive:
445|            d = [dt.astimezone(UTC).replace(tzinfo=None) for dt in d]
446|            d = np.asarray(d)
447|        d = d.astype('datetime64[us]')
448|
449|    d = _dt64_to_ordinalf(d)
450|
451|    return d if iterable else d[0]
452|
453|
454|def julian2num(j):
455|    """
456|    Convert a Julian date (or sequence) to a Matplotlib date (or sequence).
457|
458|    Parameters
459|    ----------
460|    j : float or sequence of floats
461|        Julian dates (days relative to 4713 BC Jan 1, 12:00:00 Julian
462|        calendar or 4714 BC Nov 24, 12:00:00, proleptic Gregorian calendar).
463|
464|    Returns
465|    -------
466|    float or sequence of floats
467|        Matplotlib dates (days relative to `.get_epoch`).
468|    """
469|    ep = np.datetime64(get_epoch(), 'h').astype(float) / 24.
470|    ep0 = np.datetime64('0000-12-31T00:00:00', 'h').astype(float) / 24.
471|    # Julian offset defined above is relative to 0000-12-31, but we need
472|    # relative to our current epoch:
473|    dt = JULIAN_OFFSET - ep0 + ep
474|    return np.subtract(j, dt)  # Handles both scalar & nonscalar j.
475|
476|
477|def num2julian(n):
478|    """
479|    Convert a Matplotlib date (or sequence) to a Julian date (or sequence).
480|
481|    Parameters
482|    ----------
483|    n : float or sequence of floats
484|        Matplotlib dates (days relative to `.get_epoch`).
485|
486|    Returns
487|    -------
488|    float or sequence of floats
489|        Julian dates (days relative to 4713 BC Jan 1, 12:00:00).
490|    """
491|    ep = np.datetime64(get_epoch(), 'h').astype(float) / 24.
492|    ep0 = np.datetime64('0000-12-31T00:00:00', 'h').astype(float) / 24.
493|    # Julian offset defined above is relative to 0000-12-31, but we need
494|    # relative to our current epoch:
495|    dt = JULIAN_OFFSET - ep0 + ep
496|    return np.add(n, dt)  # Handles both scalar & nonscalar j.
497|
498|
499|def num2date(x, tz=None):
500|    """
501|    Convert Matplotlib dates to `~datetime.datetime` objects.
502|
503|    Parameters
504|    ----------
505|    x : float or sequence of floats
506|        Number of days (fraction part represents hours, minutes, seconds)
507|        since the epoch.  See `.get_epoch` for the
508|        epoch, which can be changed by :rc:`date.epoch` or `.set_epoch`.
509|    tz : str, default: :rc:`timezone`
510|        Timezone of *x*.
511|
512|    Returns
513|    -------
514|    `~datetime.datetime` or sequence of `~datetime.datetime`
515|        Dates are returned in timezone *tz*.
516|
517|        If *x* is a sequence, a sequence of `~datetime.datetime` objects will
518|        be returned.
519|
520|    Notes
521|    -----
522|    The addition of one here is a historical artifact. Also, note that the
523|    Gregorian calendar is assumed; this is not universal practice.
524|    For details, see the module docstring.
525|    """
526|    if tz is None:
527|        tz = _get_rc_timezone()
528|    return _from_ordinalf_np_vectorized(x, tz).tolist()
529|
530|
531|_ordinalf_to_timedelta_np_vectorized = np.vectorize(
532|    lambda x: datetime.timedelta(days=x), otypes="O")
533|
534|
535|def num2timedelta(x):
536|    """
537|    Convert number of days to a `~datetime.timedelta` object.
538|
539|    If *x* is a sequence, a sequence of `~datetime.timedelta` objects will
540|    be returned.
541|
542|    Parameters
543|    ----------
544|    x : float, sequence of floats
545|        Number of days. The fraction part represents hours, minutes, seconds.
546|
547|    Returns
548|    -------
549|    `datetime.timedelta` or list[`datetime.timedelta`]
550|    """
551|    return _ordinalf_to_timedelta_np_vectorized(x).tolist()
552|
553|
554|def drange(dstart, dend, delta):
555|    """
556|    Return a sequence of equally spaced Matplotlib dates.
557|
558|    The dates start at *dstart* and reach up to, but not including *dend*.
559|    They are spaced by *delta*.
560|
561|    Parameters
562|    ----------
563|    dstart, dend : `~datetime.datetime`
564|        The date limits.
565|    delta : `datetime.timedelta`
566|        Spacing of the dates.
567|
568|    Returns
569|    -------
570|    `numpy.array`
571|        A list floats representing Matplotlib dates.
572|
573|    """
574|    f1 = date2num(dstart)
575|    f2 = date2num(dend)
576|    step = delta.total_seconds() / SEC_PER_DAY
577|
578|    # calculate the difference between dend and dstart in times of delta
579|    num = int(np.ceil((f2 - f1) / step))
580|
581|    # calculate end of the interval which will be generated
582|    dinterval_end = dstart + num * delta
583|
584|    # ensure, that an half open interval will be generated [dstart, dend)
585|    if dinterval_end >= dend:
586|        # if the endpoint is greater than dend, just subtract one delta
587|        dinterval_end -= delta
588|        num -= 1
589|
590|    f2 = date2num(dinterval_end)  # new float-endpoint
591|    return np.linspace(f1, f2, num + 1)
592|
593|
594|def _wrap_in_tex(text):
595|    p = r'([a-zA-Z]+)'
596|    ret_text = re.sub(p, r'}$\1$\\mathdefault{', text)
597|
598|    # Braces ensure dashes are not spaced like binary operators.
599|    ret_text = '$\\mathdefault{'+ret_text.replace('-', '{-}')+'}$'
600|    ret_text = ret_text.replace('$\\mathdefault{}$', '')
601|    return ret_text
602|
603|
604|## date tickers and formatters ###
605|
606|
607|class DateFormatter(ticker.Formatter):
608|    """
609|    Format a tick (in days since the epoch) with a
610|    `~datetime.datetime.strftime` format string.
611|    """
612|
613|    def __init__(self, fmt, tz=None, *, usetex=None):
614|        """
615|        Parameters
616|        ----------
617|        fmt : str
618|            `~datetime.datetime.strftime` format string
619|        tz : `datetime.tzinfo`, default: :rc:`timezone`
620|            Ticks timezone.
621|        usetex : bool, default: :rc:`text.usetex`
622|            To enable/disable the use of TeX's math mode for rendering the
623|            results of the formatter.
624|        """
625|        if tz is None:
626|            tz = _get_rc_timezone()
627|        self.fmt = fmt
628|        self.tz = tz
629|        self._usetex = (usetex if usetex is not None else
630|                        mpl.rcParams['text.usetex'])
631|
632|    def __call__(self, x, pos=0):
633|        result = num2date(x, self.tz).strftime(self.fmt)
634|        return _wrap_in_tex(result) if self._usetex else result
635|
636|    def set_tzinfo(self, tz):
637|        self.tz = tz
638|
639|
640|class ConciseDateFormatter(ticker.Formatter):
641|    """
642|    A `.Formatter` which attempts to figure out the best format to use for the
643|    date, and to make it as compact as possible, but still be complete. This is
644|    most useful when used with the `AutoDateLocator`::
645|
646|    >>> locator = AutoDateLocator()
647|    >>> formatter = ConciseDateFormatter(locator)
648|
649|    Parameters
650|    ----------
651|    locator : `.ticker.Locator`
652|        Locator that this axis is using.
653|
654|    tz : str, optional
655|        Passed to `.dates.date2num`.
656|
657|    formats : list of 6 strings, optional
658|        Format strings for 6 levels of tick labelling: mostly years,
659|        months, days, hours, minutes, and seconds.  Strings use
660|        the same format codes as `~datetime.datetime.strftime`.  Default is
661|        ``['%Y', '%b', '%d', '%H:%M', '%H:%M', '%S.%f']``
662|
663|    zero_formats : list of 6 strings, optional
664|        Format strings for tick labels that are "zeros" for a given tick
665|        level.  For instance, if most ticks are months, ticks around 1 Jan 2005
666|        will be labeled "Dec", "2005", "Feb".  The default is
667|        ``['', '%Y', '%b', '%b-%d', '%H:%M', '%H:%M']``
668|
669|    offset_formats : list of 6 strings, optional
670|        Format strings for the 6 levels that is applied to the "offset"
671|        string found on the right side of an x-axis, or top of a y-axis.
672|        Combined with the tick labels this should completely specify the
673|        date.  The default is::
674|
675|            ['', '%Y', '%Y-%b', '%Y-%b-%d', '%Y-%b-%d', '%Y-%b-%d %H:%M']
676|
677|    show_offset : bool, default: True
678|        Whether to show the offset or not.
679|
680|    usetex : bool, default: :rc:`text.usetex`
681|        To enable/disable the use of TeX's math mode for rendering the results
682|        of the formatter.
683|
684|    Examples
685|    --------
686|    See :doc:`/gallery/ticks/date_concise_formatter`
687|
688|    .. plot::
689|
690|        import datetime
691|        import matplotlib.dates as mdates
692|
693|        base = datetime.datetime(2005, 2, 1)
694|        dates = np.array([base + datetime.timedelta(hours=(2 * i))
695|                          for i in range(732)])
696|        N = len(dates)
697|        np.random.seed(19680801)
698|        y = np.cumsum(np.random.randn(N))
699|
700|        fig, ax = plt.subplots(constrained_layout=True)
701|        locator = mdates.AutoDateLocator()
702|        formatter = mdates.ConciseDateFormatter(locator)
703|        ax.xaxis.set_major_locator(locator)
704|        ax.xaxis.set_major_formatter(formatter)
705|
706|        ax.plot(dates, y)
707|        ax.set_title('Concise Date Formatter')
708|
709|    """
710|
711|    def __init__(self, locator, tz=None, formats=None, offset_formats=None,
712|                 zero_formats=None, show_offset=True, *, usetex=None):
713|        """
714|        Autoformat the date labels.  The default format is used to form an
715|        initial string, and then redundant elements are removed.
716|        """
717|        self._locator = locator
718|        self._tz = tz
719|        self.defaultfmt = '%Y'
720|        # there are 6 levels with each level getting a specific format
721|        # 0: mostly years,  1: months,  2: days,
722|        # 3: hours, 4: minutes, 5: seconds
723|        if formats:
724|            if len(formats) != 6:
725|                raise ValueError('formats argument must be a list of '
726|                                 '6 format strings (or None)')
727|            self.formats = formats
728|        else:
729|            self.formats = ['%Y',  # ticks are mostly years
730|                            '%b',          # ticks are mostly months
731|                            '%d',          # ticks are mostly days
732|                            '%H:%M',       # hrs
733|                            '%H:%M',       # min
734|                            '%S.%f',       # secs
735|                            ]
736|        # fmt for zeros ticks at this level.  These are
737|        # ticks that should be labeled w/ info the level above.
738|        # like 1 Jan can just be labelled "Jan".  02:02:00 can
739|        # just be labeled 02:02.
740|        if zero_formats:
741|            if len(zero_formats) != 6:
742|                raise ValueError('zero_formats argument must be a list of '
743|                                 '6 format strings (or None)')
744|            self.zero_formats = zero_formats
745|        elif formats:
746|            # use the users formats for the zero tick formats
747|            self.zero_formats = [''] + self.formats[:-1]
748|        else:
749|            # make the defaults a bit nicer:
750|            self.zero_formats = [''] + self.formats[:-1]
751|            self.zero_formats[3] = '%b-%d'
752|
753|        if offset_formats:
754|            if len(offset_formats) != 6:
755|                raise ValueError('offsetfmts argument must be a list of '
756|                                 '6 format strings (or None)')
757|            self.offset_formats = offset_formats
758|        else:
759|            self.offset_formats = ['',
760|                                   '%Y',
761|                                   '%Y-%b',
762|                                   '%Y-%b-%d',
763|                                   '%Y-%b-%d',
764|                                   '%Y-%b-%d %H:%M']
765|        self.offset_string = ''
766|        self.show_offset = show_offset
767|        self._usetex = (usetex if usetex is not None else
768|                        mpl.rcParams['text.usetex'])
769|
770|    def __call__(self, x, pos=None):
771|        formatter = DateFormatter(self.defaultfmt, self._tz,
772|                                  usetex=self._usetex)
773|        return formatter(x, pos=pos)
774|
775|    def format_ticks(self, values):
776|        tickdatetime = [num2date(value, tz=self._tz) for value in values]
777|        tickdate = np.array([tdt.timetuple()[:6] for tdt in tickdatetime])
778|
779|        # basic algorithm:
780|        # 1) only display a part of the date if it changes over the ticks.
781|        # 2) don't display the smaller part of the date if:
782|        #    it is always the same or if it is the start of the
783|        #    year, month, day etc.
784|        # fmt for most ticks at this level
785|        fmts = self.formats
786|        # format beginnings of days, months, years, etc.
787|        zerofmts = self.zero_formats
788|        # offset fmt are for the offset in the upper left of the
789|        # or lower right of the axis.
790|        offsetfmts = self.offset_formats
791|
792|        # determine the level we will label at:
793|        # mostly 0: years,  1: months,  2: days,
794|        # 3: hours, 4: minutes, 5: seconds, 6: microseconds
795|        for level in range(5, -1, -1):
796|            if len(np.unique(tickdate[:, level])) > 1:
797|                # level is less than 2 so a year is already present in the axis
798|                if (level < 2):
799|                    self.show_offset = False
800|                break
801|            elif level == 0:
802|                # all tickdate are the same, so only micros might be different
803|                # set to the most precise (6: microseconds doesn't exist...)
804|                level = 5
805|
806|        # level is the basic level we will label at.
807|        # now loop through and decide the actual ticklabels
808|        zerovals = [0, 1, 1, 0, 0, 0, 0]
809|        labels = [''] * len(tickdate)
810|        for nn in range(len(tickdate)):
811|            if level < 5:
812|                if tickdate[nn][level] == zerovals[level]:
813|                    fmt = zerofmts[level]
814|                else:
815|                    fmt = fmts[level]
816|            else:
817|                # special handling for seconds + microseconds
818|                if (tickdatetime[nn].second == tickdatetime[nn].microsecond
819|                        == 0):
820|                    fmt = zerofmts[level]
821|                else:
822|                    fmt = fmts[level]
823|            labels[nn] = tickdatetime[nn].strftime(fmt)
824|
825|        # special handling of seconds and microseconds:
826|        # strip extra zeros and decimal if possible.
827|        # this is complicated by two factors.  1) we have some level-4 strings
828|        # here (i.e. 03:00, '0.50000', '1.000') 2) we would like to have the
829|        # same number of decimals for each string (i.e. 0.5 and 1.0).
830|        if level >= 5:
831|            trailing_zeros = min(
832|                (len(s) - len(s.rstrip('0')) for s in labels if '.' in s),
833|                default=None)
834|            if trailing_zeros:
835|                for nn in range(len(labels)):
836|                    if '.' in labels[nn]:
837|                        labels[nn] = labels[nn][:-trailing_zeros].rstrip('.')
838|
839|        if self.show_offset:
840|            # set the offset string:
841|            self.offset_string = tickdatetime[-1].strftime(offsetfmts[level])
842|            if self._usetex:
843|                self.offset_string = _wrap_in_tex(self.offset_string)
844|
845|        if self._usetex:
846|            return [_wrap_in_tex(l) for l in labels]
847|        else:
848|            return labels
849|
850|    def get_offset(self):
851|        return self.offset_string
852|
853|    def format_data_short(self, value):
854|        return num2date(value, tz=self._tz).strftime('%Y-%m-%d %H:%M:%S')
855|
856|
857|class AutoDateFormatter(ticker.Formatter):
858|    """
859|    A `.Formatter` which attempts to figure out the best format to use.  This
860|    is most useful when used with the `AutoDateLocator`.
861|
862|    `.AutoDateFormatter` has a ``.scale`` dictionary that maps tick scales (the
863|    interval in days between one major tick) to format strings; this dictionary
864|    defaults to ::
865|
866|        self.scaled = {
867|            DAYS_PER_YEAR: rcParams['date.autoformat.year'],
868|            DAYS_PER_MONTH: rcParams['date.autoformat.month'],
869|            1: rcParams['date.autoformat.day'],
870|            1 / HOURS_PER_DAY: rcParams['date.autoformat.hour'],
871|            1 / MINUTES_PER_DAY: rcParams['date.autoformat.minute'],
872|            1 / SEC_PER_DAY: rcParams['date.autoformat.second'],
873|            1 / MUSECONDS_PER_DAY: rcParams['date.autoformat.microsecond'],
874|        }
875|
876|    The formatter uses the format string corresponding to the lowest key in
877|    the dictionary that is greater or equal to the current scale.  Dictionary
878|    entries can be customized::
879|
880|        locator = AutoDateLocator()
881|        formatter = AutoDateFormatter(locator)
882|        formatter.scaled[1/(24*60)] = '%M:%S' # only show min and sec
883|
884|    Custom callables can also be used instead of format strings.  The following
885|    example shows how to use a custom format function to strip trailing zeros
886|    from decimal seconds and adds the date to the first ticklabel::
887|
888|        def my_format_function(x, pos=None):
889|            x = matplotlib.dates.num2date(x)
890|            if pos == 0:
891|                fmt = '%D %H:%M:%S.%f'
892|            else:
893|                fmt = '%H:%M:%S.%f'
894|            label = x.strftime(fmt)
895|            label = label.rstrip("0")
896|            label = label.rstrip(".")
897|            return label
898|
899|        formatter.scaled[1/(24*60)] = my_format_function
900|    """
901|
902|    # This can be improved by providing some user-level direction on
903|    # how to choose the best format (precedence, etc.).
904|
905|    # Perhaps a 'struct' that has a field for each time-type where a
906|    # zero would indicate "don't show" and a number would indicate
907|    # "show" with some sort of priority.  Same priorities could mean
908|    # show all with the same priority.
909|
910|    # Or more simply, perhaps just a format string for each
911|    # possibility...
912|
913|    def __init__(self, locator, tz=None, defaultfmt='%Y-%m-%d', *,
914|                 usetex=None):
915|        """
916|        Autoformat the date labels.
917|
918|        Parameters
919|        ----------
920|        locator : `.ticker.Locator`
921|            Locator that this axis is using.
922|
923|        tz : str, optional
924|            Passed to `.dates.date2num`.
925|
926|        defaultfmt : str
927|            The default format to use if none of the values in ``self.scaled``
928|            are greater than the unit returned by ``locator._get_unit()``.
929|
930|        usetex : bool, default: :rc:`text.usetex`
931|            To enable/disable the use of TeX's math mode for rendering the
932|            results of the formatter. If any entries in ``self.scaled`` are set
933|            as functions, then it is up to the customized function to enable or
934|            disable TeX's math mode itself.
935|        """
936|        self._locator = locator
937|        self._tz = tz
938|        self.defaultfmt = defaultfmt
939|        self._formatter = DateFormatter(self.defaultfmt, tz)
940|        rcParams = mpl.rcParams
941|        self._usetex = (usetex if usetex is not None else
942|                        mpl.rcParams['text.usetex'])
943|        self.scaled = {
944|            DAYS_PER_YEAR: rcParams['date.autoformatter.year'],
945|            DAYS_PER_MONTH: rcParams['date.autoformatter.month'],
946|            1: rcParams['date.autoformatter.day'],
947|            1 / HOURS_PER_DAY: rcParams['date.autoformatter.hour'],
948|            1 / MINUTES_PER_DAY: rcParams['date.autoformatter.minute'],
949|            1 / SEC_PER_DAY: rcParams['date.autoformatter.second'],
950|            1 / MUSECONDS_PER_DAY: rcParams['date.autoformatter.microsecond']
951|        }
952|
953|    def _set_locator(self, locator):
954|        self._locator = locator
955|
956|    def __call__(self, x, pos=None):
957|        try:
958|            locator_unit_scale = float(self._locator._get_unit())
959|        except AttributeError:
960|            locator_unit_scale = 1
961|        # Pick the first scale which is greater than the locator unit.
962|        fmt = next((fmt for scale, fmt in sorted(self.scaled.items())
963|                    if scale >= locator_unit_scale),
964|                   self.defaultfmt)
965|
966|        if isinstance(fmt, str):
967|            self._formatter = DateFormatter(fmt, self._tz, usetex=self._usetex)
968|            result = self._formatter(x, pos)
969|        elif callable(fmt):
970|            result = fmt(x, pos)
971|        else:
972|            raise TypeError('Unexpected type passed to {0!r}.'.format(self))
973|
974|        return result
975|
976|
977|class rrulewrapper:
978|    def __init__(self, freq, tzinfo=None, **kwargs):
979|        kwargs['freq'] = freq
980|        self._base_tzinfo = tzinfo
981|
982|        self._update_rrule(**kwargs)
983|
984|    def set(self, **kwargs):
985|        self._construct.update(kwargs)
986|
987|        self._update_rrule(**self._construct)
988|
989|    def _update_rrule(self, **kwargs):
990|        tzinfo = self._base_tzinfo
991|
992|        # rrule does not play nicely with time zones - especially pytz time
993|        # zones, it's best to use naive zones and attach timezones once the
994|        # datetimes are returned
995|        if 'dtstart' in kwargs:
996|            dtstart = kwargs['dtstart']
997|            if dtstart.tzinfo is not None:
998|                if tzinfo is None:
999|                    tzinfo = dtstart.tzinfo
1000|                else:
(921 more lines below)


============================================================



ACTION:

THOUGHT: Let me also check the text rendering and tex formatting code:
CODE:
open_file('/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/text.py')

============================================================



OBSERVATION:

[File: /workspace/matplotlib__matplotlib__3.4/lib/matplotlib/text.py (2017 lines total)]
1|"""
2|Classes for including text in a figure.
3|"""
4|
5|import logging
6|import math
7|import weakref
8|
9|import numpy as np
10|
11|import matplotlib as mpl
12|from . import _api, artist, cbook, docstring
13|from .artist import Artist
14|from .font_manager import FontProperties
15|from .patches import FancyArrowPatch, FancyBboxPatch, Rectangle
16|from .textpath import TextPath  # Unused, but imported by others.
17|from .transforms import (
18|    Affine2D, Bbox, BboxBase, BboxTransformTo, IdentityTransform, Transform)
19|
20|
21|_log = logging.getLogger(__name__)
22|
23|
24|# Extracted from Text's method to serve as a function
25|def get_rotation(rotation):
26|    """
27|    Return *rotation* normalized to an angle between 0 and 360 degrees.
28|
29|    Parameters
30|    ----------
31|    rotation : float or {None, 'horizontal', 'vertical'}
32|        Rotation angle in degrees. *None* and 'horizontal' equal 0,
33|        'vertical' equals 90.
34|
35|    Returns
36|    -------
37|    float
38|    """
39|    try:
40|        return float(rotation) % 360
41|    except (ValueError, TypeError) as err:
42|        if cbook._str_equal(rotation, 'horizontal') or rotation is None:
43|            return 0.
44|        elif cbook._str_equal(rotation, 'vertical'):
45|            return 90.
46|        else:
47|            raise ValueError("rotation is {!r}; expected either 'horizontal', "
48|                             "'vertical', numeric value, or None"
49|                             .format(rotation)) from err
50|
51|
52|def _get_textbox(text, renderer):
53|    """
54|    Calculate the bounding box of the text.
55|
56|    The bbox position takes text rotation into account, but the width and
57|    height are those of the unrotated box (unlike `.Text.get_window_extent`).
58|    """
59|    # TODO : This function may move into the Text class as a method. As a
60|    # matter of fact, the information from the _get_textbox function
61|    # should be available during the Text._get_layout() call, which is
62|    # called within the _get_textbox. So, it would better to move this
63|    # function as a method with some refactoring of _get_layout method.
64|
65|    projected_xs = []
66|    projected_ys = []
67|
68|    theta = np.deg2rad(text.get_rotation())
69|    tr = Affine2D().rotate(-theta)
70|
71|    _, parts, d = text._get_layout(renderer)
72|
73|    for t, wh, x, y in parts:
74|        w, h = wh
75|
76|        xt1, yt1 = tr.transform((x, y))
77|        yt1 -= d
78|        xt2, yt2 = xt1 + w, yt1 + h
79|
80|        projected_xs.extend([xt1, xt2])
81|        projected_ys.extend([yt1, yt2])
82|
83|    xt_box, yt_box = min(projected_xs), min(projected_ys)
84|    w_box, h_box = max(projected_xs) - xt_box, max(projected_ys) - yt_box
85|
86|    x_box, y_box = Affine2D().rotate(theta).transform((xt_box, yt_box))
87|
88|    return x_box, y_box, w_box, h_box
89|
90|
91|@docstring.interpd
92|@cbook._define_aliases({
93|    "color": ["c"],
94|    "fontfamily": ["family"],
95|    "fontproperties": ["font", "font_properties"],
96|    "horizontalalignment": ["ha"],
97|    "multialignment": ["ma"],
98|    "fontname": ["name"],
99|    "fontsize": ["size"],
100|    "fontstretch": ["stretch"],
101|    "fontstyle": ["style"],
102|    "fontvariant": ["variant"],
103|    "verticalalignment": ["va"],
104|    "fontweight": ["weight"],
105|})
106|class Text(Artist):
107|    """Handle storing and drawing of text in window or data coordinates."""
108|
109|    zorder = 3
110|    _cached = cbook.maxdict(50)
111|
112|    def __repr__(self):
113|        return "Text(%s, %s, %s)" % (self._x, self._y, repr(self._text))
114|
115|    def __init__(self,
116|                 x=0, y=0, text='',
117|                 color=None,           # defaults to rc params
118|                 verticalalignment='baseline',
119|                 horizontalalignment='left',
120|                 multialignment=None,
121|                 fontproperties=None,  # defaults to FontProperties()
122|                 rotation=None,
123|                 linespacing=None,
124|                 rotation_mode=None,
125|                 usetex=None,          # defaults to rcParams['text.usetex']
126|                 wrap=False,
127|                 transform_rotates_text=False,
128|                 *,
129|                 parse_math=True,
130|                 **kwargs
131|                 ):
132|        """
133|        Create a `.Text` instance at *x*, *y* with string *text*.
134|
135|        Valid keyword arguments are:
136|
137|        %(Text:kwdoc)s
138|        """
139|        super().__init__()
140|        self._x, self._y = x, y
141|        self._text = ''
142|        self.set_text(text)
143|        self.set_color(
144|            color if color is not None else mpl.rcParams["text.color"])
145|        self.set_fontproperties(fontproperties)
146|        self.set_usetex(usetex)
147|        self.set_parse_math(parse_math)
148|        self.set_wrap(wrap)
149|        self.set_verticalalignment(verticalalignment)
150|        self.set_horizontalalignment(horizontalalignment)
151|        self._multialignment = multialignment
152|        self._rotation = rotation
153|        self._transform_rotates_text = transform_rotates_text
154|        self._bbox_patch = None  # a FancyBboxPatch instance
155|        self._renderer = None
156|        if linespacing is None:
157|            linespacing = 1.2   # Maybe use rcParam later.
158|        self._linespacing = linespacing
159|        self.set_rotation_mode(rotation_mode)
160|        self.update(kwargs)
161|
162|    def update(self, kwargs):
163|        # docstring inherited
164|        kwargs = cbook.normalize_kwargs(kwargs, Text)
165|        sentinel = object()  # bbox can be None, so use another sentinel.
166|        # Update fontproperties first, as it has lowest priority.
167|        fontproperties = kwargs.pop("fontproperties", sentinel)
168|        if fontproperties is not sentinel:
169|            self.set_fontproperties(fontproperties)
170|        # Update bbox last, as it depends on font properties.
171|        bbox = kwargs.pop("bbox", sentinel)
172|        super().update(kwargs)
173|        if bbox is not sentinel:
174|            self.set_bbox(bbox)
175|
176|    def __getstate__(self):
177|        d = super().__getstate__()
178|        # remove the cached _renderer (if it exists)
179|        d['_renderer'] = None
180|        return d
181|
182|    def contains(self, mouseevent):
183|        """
184|        Return whether the mouse event occurred inside the axis-aligned
185|        bounding-box of the text.
186|        """
187|        inside, info = self._default_contains(mouseevent)
188|        if inside is not None:
189|            return inside, info
190|
191|        if not self.get_visible() or self._renderer is None:
192|            return False, {}
193|
194|        # Explicitly use Text.get_window_extent(self) and not
195|        # self.get_window_extent() so that Annotation.contains does not
196|        # accidentally cover the entire annotation bounding box.
197|        bbox = Text.get_window_extent(self)
198|        inside = (bbox.x0 <= mouseevent.x <= bbox.x1
199|                  and bbox.y0 <= mouseevent.y <= bbox.y1)
200|
201|        cattr = {}
202|        # if the text has a surrounding patch, also check containment for it,
203|        # and merge the results with the results for the text.
204|        if self._bbox_patch:
205|            patch_inside, patch_cattr = self._bbox_patch.contains(mouseevent)
206|            inside = inside or patch_inside
207|            cattr["bbox_patch"] = patch_cattr
208|
209|        return inside, cattr
210|
211|    def _get_xy_display(self):
212|        """
213|        Get the (possibly unit converted) transformed x, y in display coords.
214|        """
215|        x, y = self.get_unitless_position()
216|        return self.get_transform().transform((x, y))
217|
218|    def _get_multialignment(self):
219|        if self._multialignment is not None:
220|            return self._multialignment
221|        else:
222|            return self._horizontalalignment
223|
224|    def get_rotation(self):
225|        """Return the text angle in degrees between 0 and 360."""
226|        if self.get_transform_rotates_text():
227|            angle = get_rotation(self._rotation)
228|            x, y = self.get_unitless_position()
229|            angles = [angle, ]
230|            pts = [[x, y]]
231|            return self.get_transform().transform_angles(angles, pts).item(0)
232|        else:
233|            return get_rotation(self._rotation)  # string_or_number -> number
234|
235|    def get_transform_rotates_text(self):
236|        """
237|        Return whether rotations of the transform affect the text direction.
238|        """
239|        return self._transform_rotates_text
240|
241|    def set_rotation_mode(self, m):
242|        """
243|        Set text rotation mode.
244|
245|        Parameters
246|        ----------
247|        m : {None, 'default', 'anchor'}
248|            If ``None`` or ``"default"``, the text will be first rotated, then
249|            aligned according to their horizontal and vertical alignments.  If
250|            ``"anchor"``, then alignment occurs before rotation.
251|        """
252|        _api.check_in_list(["anchor", "default", None], rotation_mode=m)
253|        self._rotation_mode = m
254|        self.stale = True
255|
256|    def get_rotation_mode(self):
257|        """Return the text rotation mode."""
258|        return self._rotation_mode
259|
260|    def update_from(self, other):
261|        # docstring inherited
262|        super().update_from(other)
263|        self._color = other._color
264|        self._multialignment = other._multialignment
265|        self._verticalalignment = other._verticalalignment
266|        self._horizontalalignment = other._horizontalalignment
267|        self._fontproperties = other._fontproperties.copy()
268|        self._usetex = other._usetex
269|        self._rotation = other._rotation
270|        self._transform_rotates_text = other._transform_rotates_text
271|        self._picker = other._picker
272|        self._linespacing = other._linespacing
273|        self.stale = True
274|
275|    def _get_layout_cache_key(self, renderer=None):
276|        """
277|        Return a hashable tuple of properties that lets `_get_layout` know
278|        whether a previously computed layout can be reused.
279|        """
280|        x, y = self.get_unitless_position()
281|        renderer = renderer or self._renderer
282|        return (
283|            x, y, self.get_text(), hash(self._fontproperties),
284|            self._verticalalignment, self._horizontalalignment,
285|            self._linespacing,
286|            self._rotation, self._rotation_mode, self._transform_rotates_text,
287|            self.figure.dpi, weakref.ref(renderer),
288|        )
289|
290|    def _get_layout(self, renderer):
291|        """
292|        Return the extent (bbox) of the text together with
293|        multiple-alignment information. Note that it returns an extent
294|        of a rotated text when necessary.
295|        """
296|        key = self._get_layout_cache_key(renderer=renderer)
297|        if key in self._cached:
298|            return self._cached[key]
299|
300|        thisx, thisy = 0.0, 0.0
301|        lines = self.get_text().split("\n")  # Ensures lines is not empty.
302|
303|        ws = []
304|        hs = []
305|        xs = []
306|        ys = []
307|
308|        # Full vertical extent of font, including ascenders and descenders:
309|        _, lp_h, lp_d = renderer.get_text_width_height_descent(
310|            "lp", self._fontproperties,
311|            ismath="TeX" if self.get_usetex() else False)
312|        min_dy = (lp_h - lp_d) * self._linespacing
313|
314|        for i, line in enumerate(lines):
315|            clean_line, ismath = self._preprocess_math(line)
316|            if clean_line:
317|                w, h, d = renderer.get_text_width_height_descent(
318|                    clean_line, self._fontproperties, ismath=ismath)
319|            else:
320|                w = h = d = 0
321|
322|            # For multiline text, increase the line spacing when the text
323|            # net-height (excluding baseline) is larger than that of a "l"
324|            # (e.g., use of superscripts), which seems what TeX does.
325|            h = max(h, lp_h)
326|            d = max(d, lp_d)
327|
328|            ws.append(w)
329|            hs.append(h)
330|
331|            # Metrics of the last line that are needed later:
332|            baseline = (h - d) - thisy
333|
334|            if i == 0:
335|                # position at baseline
336|                thisy = -(h - d)
337|            else:
338|                # put baseline a good distance from bottom of previous line
339|                thisy -= max(min_dy, (h - d) * self._linespacing)
340|
341|            xs.append(thisx)  # == 0.
342|            ys.append(thisy)
343|
344|            thisy -= d
345|
346|        # Metrics of the last line that are needed later:
347|        descent = d
348|
349|        # Bounding box definition:
350|        width = max(ws)
351|        xmin = 0
352|        xmax = width
353|        ymax = 0
354|        ymin = ys[-1] - descent  # baseline of last line minus its descent
355|        height = ymax - ymin
356|
357|        # get the rotation matrix
358|        M = Affine2D().rotate_deg(self.get_rotation())
359|
360|        # now offset the individual text lines within the box
361|        malign = self._get_multialignment()
362|        if malign == 'left':
363|            offset_layout = [(x, y) for x, y in zip(xs, ys)]
364|        elif malign == 'center':
365|            offset_layout = [(x + width / 2 - w / 2, y)
366|                             for x, y, w in zip(xs, ys, ws)]
367|        elif malign == 'right':
368|            offset_layout = [(x + width - w, y)
369|                             for x, y, w in zip(xs, ys, ws)]
370|
371|        # the corners of the unrotated bounding box
372|        corners_horiz = np.array(
373|            [(xmin, ymin), (xmin, ymax), (xmax, ymax), (xmax, ymin)])
374|
375|        # now rotate the bbox
376|        corners_rotated = M.transform(corners_horiz)
377|        # compute the bounds of the rotated box
378|        xmin = corners_rotated[:, 0].min()
379|        xmax = corners_rotated[:, 0].max()
380|        ymin = corners_rotated[:, 1].min()
381|        ymax = corners_rotated[:, 1].max()
382|        width = xmax - xmin
383|        height = ymax - ymin
384|
385|        # Now move the box to the target position offset the display
386|        # bbox by alignment
387|        halign = self._horizontalalignment
388|        valign = self._verticalalignment
389|
390|        rotation_mode = self.get_rotation_mode()
391|        if rotation_mode != "anchor":
392|            # compute the text location in display coords and the offsets
393|            # necessary to align the bbox with that location
394|            if halign == 'center':
395|                offsetx = (xmin + xmax) / 2
396|            elif halign == 'right':
397|                offsetx = xmax
398|            else:
399|                offsetx = xmin
400|
401|            if valign == 'center':
402|                offsety = (ymin + ymax) / 2
403|            elif valign == 'top':
404|                offsety = ymax
405|            elif valign == 'baseline':
406|                offsety = ymin + descent
407|            elif valign == 'center_baseline':
408|                offsety = ymin + height - baseline / 2.0
409|            else:
410|                offsety = ymin
411|        else:
412|            xmin1, ymin1 = corners_horiz[0]
413|            xmax1, ymax1 = corners_horiz[2]
414|
415|            if halign == 'center':
416|                offsetx = (xmin1 + xmax1) / 2.0
417|            elif halign == 'right':
418|                offsetx = xmax1
419|            else:
420|                offsetx = xmin1
421|
422|            if valign == 'center':
423|                offsety = (ymin1 + ymax1) / 2.0
424|            elif valign == 'top':
425|                offsety = ymax1
426|            elif valign == 'baseline':
427|                offsety = ymax1 - baseline
428|            elif valign == 'center_baseline':
429|                offsety = ymax1 - baseline / 2.0
430|            else:
431|                offsety = ymin1
432|
433|            offsetx, offsety = M.transform((offsetx, offsety))
434|
435|        xmin -= offsetx
436|        ymin -= offsety
437|
438|        bbox = Bbox.from_bounds(xmin, ymin, width, height)
439|
440|        # now rotate the positions around the first (x, y) position
441|        xys = M.transform(offset_layout) - (offsetx, offsety)
442|
443|        ret = bbox, list(zip(lines, zip(ws, hs), *xys.T)), descent
444|        self._cached[key] = ret
445|        return ret
446|
447|    def set_bbox(self, rectprops):
448|        """
449|        Draw a bounding box around self.
450|
451|        Parameters
452|        ----------
453|        rectprops : dict with properties for `.patches.FancyBboxPatch`
454|             The default boxstyle is 'square'. The mutation
455|             scale of the `.patches.FancyBboxPatch` is set to the fontsize.
456|
457|        Examples
458|        --------
459|        ::
460|
461|            t.set_bbox(dict(facecolor='red', alpha=0.5))
462|        """
463|
464|        if rectprops is not None:
465|            props = rectprops.copy()
466|            boxstyle = props.pop("boxstyle", None)
467|            pad = props.pop("pad", None)
468|            if boxstyle is None:
469|                boxstyle = "square"
470|                if pad is None:
471|                    pad = 4  # points
472|                pad /= self.get_size()  # to fraction of font size
473|            else:
474|                if pad is None:
475|                    pad = 0.3
476|            # boxstyle could be a callable or a string
477|            if isinstance(boxstyle, str) and "pad" not in boxstyle:
478|                boxstyle += ",pad=%0.2f" % pad
479|            self._bbox_patch = FancyBboxPatch(
480|                (0, 0), 1, 1,
481|                boxstyle=boxstyle, transform=IdentityTransform(), **props)
482|        else:
483|            self._bbox_patch = None
484|
485|        self._update_clip_properties()
486|
487|    def get_bbox_patch(self):
488|        """
489|        Return the bbox Patch, or None if the `.patches.FancyBboxPatch`
490|        is not made.
491|        """
492|        return self._bbox_patch
493|
494|    def update_bbox_position_size(self, renderer):
495|        """
496|        Update the location and the size of the bbox.
497|
498|        This method should be used when the position and size of the bbox needs
499|        to be updated before actually drawing the bbox.
500|        """
501|        if self._bbox_patch:
502|            # don't use self.get_unitless_position here, which refers to text
503|            # position in Text:
504|            posx = float(self.convert_xunits(self._x))
505|            posy = float(self.convert_yunits(self._y))
506|            posx, posy = self.get_transform().transform((posx, posy))
507|
508|            x_box, y_box, w_box, h_box = _get_textbox(self, renderer)
509|            self._bbox_patch.set_bounds(0., 0., w_box, h_box)
510|            self._bbox_patch.set_transform(
511|                Affine2D()
512|                .rotate_deg(self.get_rotation())
513|                .translate(posx + x_box, posy + y_box))
514|            fontsize_in_pixel = renderer.points_to_pixels(self.get_size())
515|            self._bbox_patch.set_mutation_scale(fontsize_in_pixel)
516|
517|    def _update_clip_properties(self):
518|        clipprops = dict(clip_box=self.clipbox,
519|                         clip_path=self._clippath,
520|                         clip_on=self._clipon)
521|        if self._bbox_patch:
522|            self._bbox_patch.update(clipprops)
523|
524|    def set_clip_box(self, clipbox):
525|        # docstring inherited.
526|        super().set_clip_box(clipbox)
527|        self._update_clip_properties()
528|
529|    def set_clip_path(self, path, transform=None):
530|        # docstring inherited.
531|        super().set_clip_path(path, transform)
532|        self._update_clip_properties()
533|
534|    def set_clip_on(self, b):
535|        # docstring inherited.
536|        super().set_clip_on(b)
537|        self._update_clip_properties()
538|
539|    def get_wrap(self):
540|        """Return whether the text can be wrapped."""
541|        return self._wrap
542|
543|    def set_wrap(self, wrap):
544|        """
545|        Set whether the text can be wrapped.
546|
547|        Parameters
548|        ----------
549|        wrap : bool
550|
551|        Notes
552|        -----
553|        Wrapping does not work together with
554|        ``savefig(..., bbox_inches='tight')`` (which is also used internally
555|        by ``%matplotlib inline`` in IPython/Jupyter). The 'tight' setting
556|        rescales the canvas to accommodate all content and happens before
557|        wrapping.
558|        """
559|        self._wrap = wrap
560|
561|    def _get_wrap_line_width(self):
562|        """
563|        Return the maximum line width for wrapping text based on the current
564|        orientation.
565|        """
566|        x0, y0 = self.get_transform().transform(self.get_position())
567|        figure_box = self.get_figure().get_window_extent()
568|
569|        # Calculate available width based on text alignment
570|        alignment = self.get_horizontalalignment()
571|        self.set_rotation_mode('anchor')
572|        rotation = self.get_rotation()
573|
574|        left = self._get_dist_to_box(rotation, x0, y0, figure_box)
575|        right = self._get_dist_to_box(
576|            (180 + rotation) % 360, x0, y0, figure_box)
577|
578|        if alignment == 'left':
579|            line_width = left
580|        elif alignment == 'right':
581|            line_width = right
582|        else:
583|            line_width = 2 * min(left, right)
584|
585|        return line_width
586|
587|    def _get_dist_to_box(self, rotation, x0, y0, figure_box):
588|        """
589|        Return the distance from the given points to the boundaries of a
590|        rotated box, in pixels.
591|        """
592|        if rotation > 270:
593|            quad = rotation - 270
594|            h1 = y0 / math.cos(math.radians(quad))
595|            h2 = (figure_box.x1 - x0) / math.cos(math.radians(90 - quad))
596|        elif rotation > 180:
597|            quad = rotation - 180
598|            h1 = x0 / math.cos(math.radians(quad))
599|            h2 = y0 / math.cos(math.radians(90 - quad))
600|        elif rotation > 90:
601|            quad = rotation - 90
602|            h1 = (figure_box.y1 - y0) / math.cos(math.radians(quad))
603|            h2 = x0 / math.cos(math.radians(90 - quad))
604|        else:
605|            h1 = (figure_box.x1 - x0) / math.cos(math.radians(rotation))
606|            h2 = (figure_box.y1 - y0) / math.cos(math.radians(90 - rotation))
607|
608|        return min(h1, h2)
609|
610|    def _get_rendered_text_width(self, text):
611|        """
612|        Return the width of a given text string, in pixels.
613|        """
614|        w, h, d = self._renderer.get_text_width_height_descent(
615|            text,
616|            self.get_fontproperties(),
617|            False)
618|        return math.ceil(w)
619|
620|    def _get_wrapped_text(self):
621|        """
622|        Return a copy of the text string with new lines added so that the text
623|        is wrapped relative to the parent figure (if `get_wrap` is True).
624|        """
625|        if not self.get_wrap():
626|            return self.get_text()
627|
628|        # Not fit to handle breaking up latex syntax correctly, so
629|        # ignore latex for now.
630|        if self.get_usetex():
631|            return self.get_text()
632|
633|        # Build the line incrementally, for a more accurate measure of length
634|        line_width = self._get_wrap_line_width()
635|        wrapped_lines = []
636|
637|        # New lines in the user's text force a split
638|        unwrapped_lines = self.get_text().split('\n')
639|
640|        # Now wrap each individual unwrapped line
641|        for unwrapped_line in unwrapped_lines:
642|
643|            sub_words = unwrapped_line.split(' ')
644|            # Remove items from sub_words as we go, so stop when empty
645|            while len(sub_words) > 0:
646|                if len(sub_words) == 1:
647|                    # Only one word, so just add it to the end
648|                    wrapped_lines.append(sub_words.pop(0))
649|                    continue
650|
651|                for i in range(2, len(sub_words) + 1):
652|                    # Get width of all words up to and including here
653|                    line = ' '.join(sub_words[:i])
654|                    current_width = self._get_rendered_text_width(line)
655|
656|                    # If all these words are too wide, append all not including
657|                    # last word
658|                    if current_width > line_width:
659|                        wrapped_lines.append(' '.join(sub_words[:i - 1]))
660|                        sub_words = sub_words[i - 1:]
661|                        break
662|
663|                    # Otherwise if all words fit in the width, append them all
664|                    elif i == len(sub_words):
665|                        wrapped_lines.append(' '.join(sub_words[:i]))
666|                        sub_words = []
667|                        break
668|
669|        return '\n'.join(wrapped_lines)
670|
671|    @artist.allow_rasterization
672|    def draw(self, renderer):
673|        # docstring inherited
674|
675|        if renderer is not None:
676|            self._renderer = renderer
677|        if not self.get_visible():
678|            return
679|        if self.get_text() == '':
680|            return
681|
682|        renderer.open_group('text', self.get_gid())
683|
684|        with self._cm_set(text=self._get_wrapped_text()):
685|            bbox, info, descent = self._get_layout(renderer)
686|            trans = self.get_transform()
687|
688|            # don't use self.get_position here, which refers to text
689|            # position in Text:
690|            posx = float(self.convert_xunits(self._x))
691|            posy = float(self.convert_yunits(self._y))
692|            posx, posy = trans.transform((posx, posy))
693|            if not np.isfinite(posx) or not np.isfinite(posy):
694|                _log.warning("posx and posy should be finite values")
695|                return
696|            canvasw, canvash = renderer.get_canvas_width_height()
697|
698|            # Update the location and size of the bbox
699|            # (`.patches.FancyBboxPatch`), and draw it.
700|            if self._bbox_patch:
701|                self.update_bbox_position_size(renderer)
702|                self._bbox_patch.draw(renderer)
703|
704|            gc = renderer.new_gc()
705|            gc.set_foreground(self.get_color())
706|            gc.set_alpha(self.get_alpha())
707|            gc.set_url(self._url)
708|            self._set_gc_clip(gc)
709|
710|            angle = self.get_rotation()
711|
712|            for line, wh, x, y in info:
713|
714|                mtext = self if len(info) == 1 else None
715|                x = x + posx
716|                y = y + posy
717|                if renderer.flipy():
718|                    y = canvash - y
719|                clean_line, ismath = self._preprocess_math(line)
720|
721|                if self.get_path_effects():
722|                    from matplotlib.patheffects import PathEffectRenderer
723|                    textrenderer = PathEffectRenderer(
724|                        self.get_path_effects(), renderer)
725|                else:
726|                    textrenderer = renderer
727|
728|                if self.get_usetex():
729|                    textrenderer.draw_tex(gc, x, y, clean_line,
730|                                          self._fontproperties, angle,
731|                                          mtext=mtext)
732|                else:
733|                    textrenderer.draw_text(gc, x, y, clean_line,
734|                                           self._fontproperties, angle,
735|                                           ismath=ismath, mtext=mtext)
736|
737|        gc.restore()
738|        renderer.close_group('text')
739|        self.stale = False
740|
741|    def get_color(self):
742|        """Return the color of the text."""
743|        return self._color
744|
745|    def get_fontproperties(self):
746|        """Return the `.font_manager.FontProperties`."""
747|        return self._fontproperties
748|
749|    def get_fontfamily(self):
750|        """
751|        Return the list of font families used for font lookup.
752|
753|        See Also
754|        --------
755|        .font_manager.FontProperties.get_family
756|        """
757|        return self._fontproperties.get_family()
758|
759|    def get_fontname(self):
760|        """
761|        Return the font name as a string.
762|
763|        See Also
764|        --------
765|        .font_manager.FontProperties.get_name
766|        """
767|        return self._fontproperties.get_name()
768|
769|    def get_fontstyle(self):
770|        """
771|        Return the font style as a string.
772|
773|        See Also
774|        --------
775|        .font_manager.FontProperties.get_style
776|        """
777|        return self._fontproperties.get_style()
778|
779|    def get_fontsize(self):
780|        """
781|        Return the font size as an integer.
782|
783|        See Also
784|        --------
785|        .font_manager.FontProperties.get_size_in_points
786|        """
787|        return self._fontproperties.get_size_in_points()
788|
789|    def get_fontvariant(self):
790|        """
791|        Return the font variant as a string.
792|
793|        See Also
794|        --------
795|        .font_manager.FontProperties.get_variant
796|        """
797|        return self._fontproperties.get_variant()
798|
799|    def get_fontweight(self):
800|        """
801|        Return the font weight as a string or a number.
802|
803|        See Also
804|        --------
805|        .font_manager.FontProperties.get_weight
806|        """
807|        return self._fontproperties.get_weight()
808|
809|    def get_stretch(self):
810|        """
811|        Return the font stretch as a string or a number.
812|
813|        See Also
814|        --------
815|        .font_manager.FontProperties.get_stretch
816|        """
817|        return self._fontproperties.get_stretch()
818|
819|    def get_horizontalalignment(self):
820|        """
821|        Return the horizontal alignment as a string.  Will be one of
822|        'left', 'center' or 'right'.
823|        """
824|        return self._horizontalalignment
825|
826|    def get_unitless_position(self):
827|        """Return the (x, y) unitless position of the text."""
828|        # This will get the position with all unit information stripped away.
829|        # This is here for convenience since it is done in several locations.
830|        x = float(self.convert_xunits(self._x))
831|        y = float(self.convert_yunits(self._y))
832|        return x, y
833|
834|    def get_position(self):
835|        """Return the (x, y) position of the text."""
836|        # This should return the same data (possible unitized) as was
837|        # specified with 'set_x' and 'set_y'.
838|        return self._x, self._y
839|
840|    # When removing, also remove the hash(color) check in set_color()
841|    @_api.deprecated("3.5")
842|    def get_prop_tup(self, renderer=None):
843|        """
844|        Return a hashable tuple of properties.
845|
846|        Not intended to be human readable, but useful for backends who
847|        want to cache derived information about text (e.g., layouts) and
848|        need to know if the text has changed.
849|        """
850|        x, y = self.get_unitless_position()
851|        renderer = renderer or self._renderer
852|        return (x, y, self.get_text(), self._color,
853|                self._verticalalignment, self._horizontalalignment,
854|                hash(self._fontproperties),
855|                self._rotation, self._rotation_mode,
856|                self._transform_rotates_text,
857|                self.figure.dpi, weakref.ref(renderer),
858|                self._linespacing
859|                )
860|
861|    def get_text(self):
862|        """Return the text string."""
863|        return self._text
864|
865|    def get_verticalalignment(self):
866|        """
867|        Return the vertical alignment as a string.  Will be one of
868|        'top', 'center', 'bottom', 'baseline' or 'center_baseline'.
869|        """
870|        return self._verticalalignment
871|
872|    def get_window_extent(self, renderer=None, dpi=None):
873|        """
874|        Return the `.Bbox` bounding the text, in display units.
875|
876|        In addition to being used internally, this is useful for specifying
877|        clickable regions in a png file on a web page.
878|
879|        Parameters
880|        ----------
881|        renderer : Renderer, optional
882|            A renderer is needed to compute the bounding box.  If the artist
883|            has already been drawn, the renderer is cached; thus, it is only
884|            necessary to pass this argument when calling `get_window_extent`
885|            before the first `draw`.  In practice, it is usually easier to
886|            trigger a draw first (e.g. by saving the figure).
887|
888|        dpi : float, optional
889|            The dpi value for computing the bbox, defaults to
890|            ``self.figure.dpi`` (*not* the renderer dpi); should be set e.g. if
891|            to match regions with a figure saved with a custom dpi value.
892|        """
893|        if not self.get_visible():
894|            return Bbox.unit()
895|        if dpi is None:
896|            dpi = self.figure.dpi
897|        if self.get_text() == '':
898|            with cbook._setattr_cm(self.figure, dpi=dpi):
899|                tx, ty = self._get_xy_display()
900|                return Bbox.from_bounds(tx, ty, 0, 0)
901|
902|        if renderer is not None:
903|            self._renderer = renderer
904|        if self._renderer is None:
905|            self._renderer = self.figure._cachedRenderer
906|        if self._renderer is None:
907|            raise RuntimeError('Cannot get window extent w/o renderer')
908|
909|        with cbook._setattr_cm(self.figure, dpi=dpi):
910|            bbox, info, descent = self._get_layout(self._renderer)
911|            x, y = self.get_unitless_position()
912|            x, y = self.get_transform().transform((x, y))
913|            bbox = bbox.translated(x, y)
914|            return bbox
915|
916|    def set_backgroundcolor(self, color):
917|        """
918|        Set the background color of the text by updating the bbox.
919|
920|        Parameters
921|        ----------
922|        color : color
923|
924|        See Also
925|        --------
926|        .set_bbox : To change the position of the bounding box
927|        """
928|        if self._bbox_patch is None:
929|            self.set_bbox(dict(facecolor=color, edgecolor=color))
930|        else:
931|            self._bbox_patch.update(dict(facecolor=color))
932|
933|        self._update_clip_properties()
934|        self.stale = True
935|
936|    def set_color(self, color):
937|        """
938|        Set the foreground color of the text
939|
940|        Parameters
941|        ----------
942|        color : color
943|        """
944|        # "auto" is only supported by axisartist, but we can just let it error
945|        # out at draw time for simplicity.
946|        if not cbook._str_equal(color, "auto"):
947|            mpl.colors._check_color_like(color=color)
948|        # Make sure it is hashable, or get_prop_tup will fail (remove this once
949|        # get_prop_tup is removed).
950|        try:
951|            hash(color)
952|        except TypeError:
953|            color = tuple(color)
954|        self._color = color
955|        self.stale = True
956|
957|    def set_horizontalalignment(self, align):
958|        """
959|        Set the horizontal alignment to one of
960|
961|        Parameters
962|        ----------
963|        align : {'center', 'right', 'left'}
964|        """
965|        _api.check_in_list(['center', 'right', 'left'], align=align)
966|        self._horizontalalignment = align
967|        self.stale = True
968|
969|    def set_multialignment(self, align):
970|        """
971|        Set the text alignment for multiline texts.
972|
973|        The layout of the bounding box of all the lines is determined by the
974|        horizontalalignment and verticalalignment properties. This property
975|        controls the alignment of the text lines within that box.
976|
977|        Parameters
978|        ----------
979|        align : {'left', 'right', 'center'}
980|        """
981|        _api.check_in_list(['center', 'right', 'left'], align=align)
982|        self._multialignment = align
983|        self.stale = True
984|
985|    def set_linespacing(self, spacing):
986|        """
987|        Set the line spacing as a multiple of the font size.
988|
989|        The default line spacing is 1.2.
990|
991|        Parameters
992|        ----------
993|        spacing : float (multiple of font size)
994|        """
995|        self._linespacing = spacing
996|        self.stale = True
997|
998|    def set_fontfamily(self, fontname):
999|        """
1000|        Set the font family.  May be either a single string, or a list of
(1017 more lines below)


============================================================



ACTION:

THOUGHT: Let me also check the ticker formatting code since this seems to be related to axis tick formatting:
CODE:
open_file('/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/ticker.py')

============================================================



OBSERVATION:

[File: /workspace/matplotlib__matplotlib__3.4/lib/matplotlib/ticker.py (2812 lines total)]
1|"""
2|Tick locating and formatting
3|============================
4|
5|This module contains classes for configuring tick locating and formatting.
6|Generic tick locators and formatters are provided, as well as domain specific
7|custom ones.
8|
9|Although the locators know nothing about major or minor ticks, they are used
10|by the Axis class to support major and minor tick locating and formatting.
11|
12|Tick locating
13|-------------
14|
15|The Locator class is the base class for all tick locators. The locators
16|handle autoscaling of the view limits based on the data limits, and the
17|choosing of tick locations. A useful semi-automatic tick locator is
18|`MultipleLocator`. It is initialized with a base, e.g., 10, and it picks
19|axis limits and ticks that are multiples of that base.
20|
21|The Locator subclasses defined here are:
22|
23|======================= =======================================================
24|`AutoLocator`           `MaxNLocator` with simple defaults. This is the default
25|                        tick locator for most plotting.
26|`MaxNLocator`           Finds up to a max number of intervals with ticks at
27|                        nice locations.
28|`LinearLocator`         Space ticks evenly from min to max.
29|`LogLocator`            Space ticks logarithmically from min to max.
30|`MultipleLocator`       Ticks and range are a multiple of base; either integer
31|                        or float.
32|`FixedLocator`          Tick locations are fixed.
33|`IndexLocator`          Locator for index plots (e.g., where
34|                        ``x = range(len(y))``).
35|`NullLocator`           No ticks.
36|`SymmetricalLogLocator` Locator for use with with the symlog norm; works like
37|                        `LogLocator` for the part outside of the threshold and
38|                        adds 0 if inside the limits.
39|`LogitLocator`          Locator for logit scaling.
40|`AutoMinorLocator`      Locator for minor ticks when the axis is linear and the
41|                        major ticks are uniformly spaced. Subdivides the major
42|                        tick interval into a specified number of minor
43|                        intervals, defaulting to 4 or 5 depending on the major
44|                        interval.
45|======================= =======================================================
46|
47|There are a number of locators specialized for date locations - see
48|the :mod:`.dates` module.
49|
50|You can define your own locator by deriving from Locator. You must
51|override the ``__call__`` method, which returns a sequence of locations,
52|and you will probably want to override the autoscale method to set the
53|view limits from the data limits.
54|
55|If you want to override the default locator, use one of the above or a custom
56|locator and pass it to the x or y axis instance. The relevant methods are::
57|
58|  ax.xaxis.set_major_locator(xmajor_locator)
59|  ax.xaxis.set_minor_locator(xminor_locator)
60|  ax.yaxis.set_major_locator(ymajor_locator)
61|  ax.yaxis.set_minor_locator(yminor_locator)
62|
63|The default minor locator is `NullLocator`, i.e., no minor ticks on by default.
64|
65|.. note::
66|    `Locator` instances should not be used with more than one
67|    `~matplotlib.axis.Axis` or `~matplotlib.axes.Axes`. So instead of::
68|
69|        locator = MultipleLocator(5)
70|        ax.xaxis.set_major_locator(locator)
71|        ax2.xaxis.set_major_locator(locator)
72|
73|    do the following instead::
74|
75|        ax.xaxis.set_major_locator(MultipleLocator(5))
76|        ax2.xaxis.set_major_locator(MultipleLocator(5))
77|
78|Tick formatting
79|---------------
80|
81|Tick formatting is controlled by classes derived from Formatter. The formatter
82|operates on a single tick value and returns a string to the axis.
83|
84|========================= =====================================================
85|`NullFormatter`           No labels on the ticks.
86|`FixedFormatter`          Set the strings manually for the labels.
87|`FuncFormatter`           User defined function sets the labels.
88|`StrMethodFormatter`      Use string `format` method.
89|`FormatStrFormatter`      Use an old-style sprintf format string.
90|`ScalarFormatter`         Default formatter for scalars: autopick the format
91|                          string.
92|`LogFormatter`            Formatter for log axes.
93|`LogFormatterExponent`    Format values for log axis using
94|                          ``exponent = log_base(value)``.
95|`LogFormatterMathtext`    Format values for log axis using
96|                          ``exponent = log_base(value)`` using Math text.
97|`LogFormatterSciNotation` Format values for log axis using scientific notation.
98|`LogitFormatter`          Probability formatter.
99|`EngFormatter`            Format labels in engineering notation.
100|`PercentFormatter`        Format labels as a percentage.
101|========================= =====================================================
102|
103|You can derive your own formatter from the Formatter base class by
104|simply overriding the ``__call__`` method. The formatter class has
105|access to the axis view and data limits.
106|
107|To control the major and minor tick label formats, use one of the
108|following methods::
109|
110|  ax.xaxis.set_major_formatter(xmajor_formatter)
111|  ax.xaxis.set_minor_formatter(xminor_formatter)
112|  ax.yaxis.set_major_formatter(ymajor_formatter)
113|  ax.yaxis.set_minor_formatter(yminor_formatter)
114|
115|In addition to a `.Formatter` instance, `~.Axis.set_major_formatter` and
116|`~.Axis.set_minor_formatter` also accept a ``str`` or function.  ``str`` input
117|will be internally replaced with an autogenerated `.StrMethodFormatter` with
118|the input ``str``. For function input, a `.FuncFormatter` with the input
119|function will be generated and used.
120|
121|See :doc:`/gallery/ticks/major_minor_demo` for an example of setting major
122|and minor ticks. See the :mod:`matplotlib.dates` module for more information
123|and examples of using date locators and formatters.
124|"""
125|
126|import itertools
127|import logging
128|import locale
129|import math
130|from numbers import Integral
131|
132|import numpy as np
133|
134|import matplotlib as mpl
135|from matplotlib import _api, cbook
136|from matplotlib import transforms as mtransforms
137|
138|_log = logging.getLogger(__name__)
139|
140|__all__ = ('TickHelper', 'Formatter', 'FixedFormatter',
141|           'NullFormatter', 'FuncFormatter', 'FormatStrFormatter',
142|           'StrMethodFormatter', 'ScalarFormatter', 'LogFormatter',
143|           'LogFormatterExponent', 'LogFormatterMathtext',
144|           'LogFormatterSciNotation',
145|           'LogitFormatter', 'EngFormatter', 'PercentFormatter',
146|           'Locator', 'IndexLocator', 'FixedLocator', 'NullLocator',
147|           'LinearLocator', 'LogLocator', 'AutoLocator',
148|           'MultipleLocator', 'MaxNLocator', 'AutoMinorLocator',
149|           'SymmetricalLogLocator', 'LogitLocator')
150|
151|
152|class _DummyAxis:
153|    __name__ = "dummy"
154|
155|    def __init__(self, minpos=0):
156|        self.dataLim = mtransforms.Bbox.unit()
157|        self.viewLim = mtransforms.Bbox.unit()
158|        self._minpos = minpos
159|
160|    def get_view_interval(self):
161|        return self.viewLim.intervalx
162|
163|    def set_view_interval(self, vmin, vmax):
164|        self.viewLim.intervalx = vmin, vmax
165|
166|    def get_minpos(self):
167|        return self._minpos
168|
169|    def get_data_interval(self):
170|        return self.dataLim.intervalx
171|
172|    def set_data_interval(self, vmin, vmax):
173|        self.dataLim.intervalx = vmin, vmax
174|
175|    def get_tick_space(self):
176|        # Just use the long-standing default of nbins==9
177|        return 9
178|
179|
180|class TickHelper:
181|    axis = None
182|
183|    def set_axis(self, axis):
184|        self.axis = axis
185|
186|    def create_dummy_axis(self, **kwargs):
187|        if self.axis is None:
188|            self.axis = _DummyAxis(**kwargs)
189|
190|    @_api.deprecated("3.5", alternative=".axis.set_view_interval")
191|    def set_view_interval(self, vmin, vmax):
192|        self.axis.set_view_interval(vmin, vmax)
193|
194|    @_api.deprecated("3.5", alternative=".axis.set_data_interval")
195|    def set_data_interval(self, vmin, vmax):
196|        self.axis.set_data_interval(vmin, vmax)
197|
198|    @_api.deprecated(
199|        "3.5",
200|        alternative=".axis.set_view_interval and .axis.set_data_interval")
201|    def set_bounds(self, vmin, vmax):
202|        self.set_view_interval(vmin, vmax)
203|        self.set_data_interval(vmin, vmax)
204|
205|
206|class Formatter(TickHelper):
207|    """
208|    Create a string based on a tick value and location.
209|    """
210|    # some classes want to see all the locs to help format
211|    # individual ones
212|    locs = []
213|
214|    def __call__(self, x, pos=None):
215|        """
216|        Return the format for tick value *x* at position pos.
217|        ``pos=None`` indicates an unspecified location.
218|        """
219|        raise NotImplementedError('Derived must override')
220|
221|    def format_ticks(self, values):
222|        """Return the tick labels for all the ticks at once."""
223|        self.set_locs(values)
224|        return [self(value, i) for i, value in enumerate(values)]
225|
226|    def format_data(self, value):
227|        """
228|        Return the full string representation of the value with the
229|        position unspecified.
230|        """
231|        return self.__call__(value)
232|
233|    def format_data_short(self, value):
234|        """
235|        Return a short string version of the tick value.
236|
237|        Defaults to the position-independent long value.
238|        """
239|        return self.format_data(value)
240|
241|    def get_offset(self):
242|        return ''
243|
244|    def set_locs(self, locs):
245|        """
246|        Set the locations of the ticks.
247|
248|        This method is called before computing the tick labels because some
249|        formatters need to know all tick locations to do so.
250|        """
251|        self.locs = locs
252|
253|    @staticmethod
254|    def fix_minus(s):
255|        """
256|        Some classes may want to replace a hyphen for minus with the proper
257|        unicode symbol (U+2212) for typographical correctness.  This is a
258|        helper method to perform such a replacement when it is enabled via
259|        :rc:`axes.unicode_minus`.
260|        """
261|        return (s.replace('-', '\N{MINUS SIGN}')
262|                if mpl.rcParams['axes.unicode_minus']
263|                else s)
264|
265|    def _set_locator(self, locator):
266|        """Subclasses may want to override this to set a locator."""
267|        pass
268|
269|
270|class NullFormatter(Formatter):
271|    """Always return the empty string."""
272|
273|    def __call__(self, x, pos=None):
274|        # docstring inherited
275|        return ''
276|
277|
278|class FixedFormatter(Formatter):
279|    """
280|    Return fixed strings for tick labels based only on position, not value.
281|
282|    .. note::
283|        `.FixedFormatter` should only be used together with `.FixedLocator`.
284|        Otherwise, the labels may end up in unexpected positions.
285|    """
286|
287|    def __init__(self, seq):
288|        """Set the sequence *seq* of strings that will be used for labels."""
289|        self.seq = seq
290|        self.offset_string = ''
291|
292|    def __call__(self, x, pos=None):
293|        """
294|        Return the label that matches the position, regardless of the value.
295|
296|        For positions ``pos < len(seq)``, return ``seq[i]`` regardless of
297|        *x*. Otherwise return empty string. ``seq`` is the sequence of
298|        strings that this object was initialized with.
299|        """
300|        if pos is None or pos >= len(self.seq):
301|            return ''
302|        else:
303|            return self.seq[pos]
304|
305|    def get_offset(self):
306|        return self.offset_string
307|
308|    def set_offset_string(self, ofs):
309|        self.offset_string = ofs
310|
311|
312|class FuncFormatter(Formatter):
313|    """
314|    Use a user-defined function for formatting.
315|
316|    The function should take in two inputs (a tick value ``x`` and a
317|    position ``pos``), and return a string containing the corresponding
318|    tick label.
319|    """
320|
321|    def __init__(self, func):
322|        self.func = func
323|        self.offset_string = ""
324|
325|    def __call__(self, x, pos=None):
326|        """
327|        Return the value of the user defined function.
328|
329|        *x* and *pos* are passed through as-is.
330|        """
331|        return self.func(x, pos)
332|
333|    def get_offset(self):
334|        return self.offset_string
335|
336|    def set_offset_string(self, ofs):
337|        self.offset_string = ofs
338|
339|
340|class FormatStrFormatter(Formatter):
341|    """
342|    Use an old-style ('%' operator) format string to format the tick.
343|
344|    The format string should have a single variable format (%) in it.
345|    It will be applied to the value (not the position) of the tick.
346|
347|    Negative numeric values will use a dash not a unicode minus,
348|    use mathtext to get a unicode minus by wrappping the format specifier
349|    with $ (e.g. "$%g$").
350|    """
351|    def __init__(self, fmt):
352|        self.fmt = fmt
353|
354|    def __call__(self, x, pos=None):
355|        """
356|        Return the formatted label string.
357|
358|        Only the value *x* is formatted. The position is ignored.
359|        """
360|        return self.fmt % x
361|
362|
363|class StrMethodFormatter(Formatter):
364|    """
365|    Use a new-style format string (as used by `str.format`) to format the tick.
366|
367|    The field used for the tick value must be labeled *x* and the field used
368|    for the tick position must be labeled *pos*.
369|    """
370|    def __init__(self, fmt):
371|        self.fmt = fmt
372|
373|    def __call__(self, x, pos=None):
374|        """
375|        Return the formatted label string.
376|
377|        *x* and *pos* are passed to `str.format` as keyword arguments
378|        with those exact names.
379|        """
380|        return self.fmt.format(x=x, pos=pos)
381|
382|
383|class ScalarFormatter(Formatter):
384|    """
385|    Format tick values as a number.
386|
387|    Parameters
388|    ----------
389|    useOffset : bool or float, default: :rc:`axes.formatter.useoffset`
390|        Whether to use offset notation. See `.set_useOffset`.
391|    useMathText : bool, default: :rc:`axes.formatter.use_mathtext`
392|        Whether to use fancy math formatting. See `.set_useMathText`.
393|    useLocale : bool, default: :rc:`axes.formatter.use_locale`.
394|        Whether to use locale settings for decimal sign and positive sign.
395|        See `.set_useLocale`.
396|
397|    Notes
398|    -----
399|    In addition to the parameters above, the formatting of scientific vs.
400|    floating point representation can be configured via `.set_scientific`
401|    and `.set_powerlimits`).
402|
403|    **Offset notation and scientific notation**
404|
405|    Offset notation and scientific notation look quite similar at first sight.
406|    Both split some information from the formatted tick values and display it
407|    at the end of the axis.
408|
409|    - The scientific notation splits up the order of magnitude, i.e. a
410|      multiplicative scaling factor, e.g. ``1e6``.
411|
412|    - The offset notation separates an additive constant, e.g. ``+1e6``. The
413|      offset notation label is always prefixed with a ``+`` or ``-`` sign
414|      and is thus distinguishable from the order of magnitude label.
415|
416|    The following plot with x limits ``1_000_000`` to ``1_000_010`` illustrates
417|    the different formatting. Note the labels at the right edge of the x axis.
418|
419|    .. plot::
420|
421|        lim = (1_000_000, 1_000_010)
422|
423|        fig, (ax1, ax2, ax3) = plt.subplots(3, 1, gridspec_kw={'hspace': 2})
424|        ax1.set(title='offset_notation', xlim=lim)
425|        ax2.set(title='scientific notation', xlim=lim)
426|        ax2.xaxis.get_major_formatter().set_useOffset(False)
427|        ax3.set(title='floating point notation', xlim=lim)
428|        ax3.xaxis.get_major_formatter().set_useOffset(False)
429|        ax3.xaxis.get_major_formatter().set_scientific(False)
430|
431|    """
432|
433|    def __init__(self, useOffset=None, useMathText=None, useLocale=None):
434|        if useOffset is None:
435|            useOffset = mpl.rcParams['axes.formatter.useoffset']
436|        self._offset_threshold = \
437|            mpl.rcParams['axes.formatter.offset_threshold']
438|        self.set_useOffset(useOffset)
439|        self._usetex = mpl.rcParams['text.usetex']
440|        if useMathText is None:
441|            useMathText = mpl.rcParams['axes.formatter.use_mathtext']
442|            if useMathText is False:
443|                try:
444|                    ufont = mpl.font_manager.findfont(
445|                        mpl.font_manager.FontProperties(
446|                            mpl.rcParams["font.family"]
447|                        ),
448|                        fallback_to_default=False,
449|                    )
450|                except ValueError:
451|                    ufont = None
452|
453|                if ufont == str(cbook._get_data_path("fonts/ttf/cmr10.ttf")):
454|                    _api.warn_external(
455|                        "cmr10 font should ideally be used with "
456|                        "mathtext, set axes.formatter.use_mathtext to True"
457|                    )
458|        self.set_useMathText(useMathText)
459|        self.orderOfMagnitude = 0
460|        self.format = ''
461|        self._scientific = True
462|        self._powerlimits = mpl.rcParams['axes.formatter.limits']
463|        if useLocale is None:
464|            useLocale = mpl.rcParams['axes.formatter.use_locale']
465|        self._useLocale = useLocale
466|
467|    def get_useOffset(self):
468|        """
469|        Return whether automatic mode for offset notation is active.
470|
471|        This returns True if ``set_useOffset(True)``; it returns False if an
472|        explicit offset was set, e.g. ``set_useOffset(1000)``.
473|
474|        See Also
475|        --------
476|        ScalarFormatter.set_useOffset
477|        """
478|        return self._useOffset
479|
480|    def set_useOffset(self, val):
481|        """
482|        Set whether to use offset notation.
483|
484|        When formatting a set numbers whose value is large compared to their
485|        range, the formatter can separate an additive constant. This can
486|        shorten the formatted numbers so that they are less likely to overlap
487|        when drawn on an axis.
488|
489|        Parameters
490|        ----------
491|        val : bool or float
492|            - If False, do not use offset notation.
493|            - If True (=automatic mode), use offset notation if it can make
494|              the residual numbers significantly shorter. The exact behavior
495|              is controlled by :rc:`axes.formatter.offset_threshold`.
496|            - If a number, force an offset of the given value.
497|
498|        Examples
499|        --------
500|        With active offset notation, the values
501|
502|        ``100_000, 100_002, 100_004, 100_006, 100_008``
503|
504|        will be formatted as ``0, 2, 4, 6, 8`` plus an offset ``+1e5``, which
505|        is written to the edge of the axis.
506|        """
507|        if val in [True, False]:
508|            self.offset = 0
509|            self._useOffset = val
510|        else:
511|            self._useOffset = False
512|            self.offset = val
513|
514|    useOffset = property(fget=get_useOffset, fset=set_useOffset)
515|
516|    def get_useLocale(self):
517|        """
518|        Return whether locale settings are used for formatting.
519|
520|        See Also
521|        --------
522|        ScalarFormatter.set_useLocale
523|        """
524|        return self._useLocale
525|
526|    def set_useLocale(self, val):
527|        """
528|        Set whether to use locale settings for decimal sign and positive sign.
529|
530|        Parameters
531|        ----------
532|        val : bool or None
533|            *None* resets to :rc:`axes.formatter.use_locale`.
534|        """
535|        if val is None:
536|            self._useLocale = mpl.rcParams['axes.formatter.use_locale']
537|        else:
538|            self._useLocale = val
539|
540|    useLocale = property(fget=get_useLocale, fset=set_useLocale)
541|
542|    def _format_maybe_minus_and_locale(self, fmt, arg):
543|        """
544|        Format *arg* with *fmt*, applying unicode minus and locale if desired.
545|        """
546|        return self.fix_minus(locale.format_string(fmt, (arg,), True)
547|                              if self._useLocale else fmt % arg)
548|
549|    def get_useMathText(self):
550|        """
551|        Return whether to use fancy math formatting.
552|
553|        See Also
554|        --------
555|        ScalarFormatter.set_useMathText
556|        """
557|        return self._useMathText
558|
559|    def set_useMathText(self, val):
560|        r"""
561|        Set whether to use fancy math formatting.
562|
563|        If active, scientific notation is formatted as :math:`1.2 \times 10^3`.
564|
565|        Parameters
566|        ----------
567|        val : bool or None
568|            *None* resets to :rc:`axes.formatter.use_mathtext`.
569|        """
570|        if val is None:
571|            self._useMathText = mpl.rcParams['axes.formatter.use_mathtext']
572|        else:
573|            self._useMathText = val
574|
575|    useMathText = property(fget=get_useMathText, fset=set_useMathText)
576|
577|    def __call__(self, x, pos=None):
578|        """
579|        Return the format for tick value *x* at position *pos*.
580|        """
581|        if len(self.locs) == 0:
582|            return ''
583|        else:
584|            xp = (x - self.offset) / (10. ** self.orderOfMagnitude)
585|            if abs(xp) < 1e-8:
586|                xp = 0
587|            return self._format_maybe_minus_and_locale(self.format, xp)
588|
589|    def set_scientific(self, b):
590|        """
591|        Turn scientific notation on or off.
592|
593|        See Also
594|        --------
595|        ScalarFormatter.set_powerlimits
596|        """
597|        self._scientific = bool(b)
598|
599|    def set_powerlimits(self, lims):
600|        r"""
601|        Set size thresholds for scientific notation.
602|
603|        Parameters
604|        ----------
605|        lims : (int, int)
606|            A tuple *(min_exp, max_exp)* containing the powers of 10 that
607|            determine the switchover threshold. For a number representable as
608|            :math:`a \times 10^\mathrm{exp}`` with :math:`1 <= |a| < 10`,
609|            scientific notation will be used if ``exp <= min_exp`` or
610|            ``exp >= max_exp``.
611|
612|            The default limits are controlled by :rc:`axes.formatter.limits`.
613|
614|            In particular numbers with *exp* equal to the thresholds are
615|            written in scientific notation.
616|
617|            Typically, *min_exp* will be negative and *max_exp* will be
618|            positive.
619|
620|            For example, ``formatter.set_powerlimits((-3, 4))`` will provide
621|            the following formatting:
622|            :math:`1 \times 10^{-3}, 9.9 \times 10^{-3}, 0.01,`
623|            :math:`9999, 1 \times 10^4`.
624|
625|        See Also
626|        --------
627|        ScalarFormatter.set_scientific
628|        """
629|        if len(lims) != 2:
630|            raise ValueError("'lims' must be a sequence of length 2")
631|        self._powerlimits = lims
632|
633|    def format_data_short(self, value):
634|        # docstring inherited
635|        if isinstance(value, np.ma.MaskedArray) and value.mask:
636|            return ""
637|        if isinstance(value, Integral):
638|            fmt = "%d"
639|        else:
640|            if getattr(self.axis, "__name__", "") in ["xaxis", "yaxis"]:
641|                if self.axis.__name__ == "xaxis":
642|                    axis_trf = self.axis.axes.get_xaxis_transform()
643|                    axis_inv_trf = axis_trf.inverted()
644|                    screen_xy = axis_trf.transform((value, 0))
645|                    neighbor_values = axis_inv_trf.transform(
646|                        screen_xy + [[-1, 0], [+1, 0]])[:, 0]
647|                else:  # yaxis:
648|                    axis_trf = self.axis.axes.get_yaxis_transform()
649|                    axis_inv_trf = axis_trf.inverted()
650|                    screen_xy = axis_trf.transform((0, value))
651|                    neighbor_values = axis_inv_trf.transform(
652|                        screen_xy + [[0, -1], [0, +1]])[:, 1]
653|                delta = abs(neighbor_values - value).max()
654|            else:
655|                # Rough approximation: no more than 1e4 divisions.
656|                a, b = self.axis.get_view_interval()
657|                delta = (b - a) / 1e4
658|            fmt = "%-#.{}g".format(cbook._g_sig_digits(value, delta))
659|        return self._format_maybe_minus_and_locale(fmt, value)
660|
661|    def format_data(self, value):
662|        # docstring inherited
663|        e = math.floor(math.log10(abs(value)))
664|        s = round(value / 10**e, 10)
665|        exponent = self._format_maybe_minus_and_locale("%d", e)
666|        significand = self._format_maybe_minus_and_locale(
667|            "%d" if s % 1 == 0 else "%1.10f", s)
668|        if e == 0:
669|            return significand
670|        elif self._useMathText or self._usetex:
671|            exponent = "10^{%s}" % exponent
672|            return (exponent if s == 1  # reformat 1x10^y as 10^y
673|                    else rf"{significand} \times {exponent}")
674|        else:
675|            return f"{significand}e{exponent}"
676|
677|    def get_offset(self):
678|        """
679|        Return scientific notation, plus offset.
680|        """
681|        if len(self.locs) == 0:
682|            return ''
683|        s = ''
684|        if self.orderOfMagnitude or self.offset:
685|            offsetStr = ''
686|            sciNotStr = ''
687|            if self.offset:
688|                offsetStr = self.format_data(self.offset)
689|                if self.offset > 0:
690|                    offsetStr = '+' + offsetStr
691|            if self.orderOfMagnitude:
692|                if self._usetex or self._useMathText:
693|                    sciNotStr = self.format_data(10 ** self.orderOfMagnitude)
694|                else:
695|                    sciNotStr = '1e%d' % self.orderOfMagnitude
696|            if self._useMathText or self._usetex:
697|                if sciNotStr != '':
698|                    sciNotStr = r'\times\mathdefault{%s}' % sciNotStr
699|                s = r'$%s\mathdefault{%s}$' % (sciNotStr, offsetStr)
700|            else:
701|                s = ''.join((sciNotStr, offsetStr))
702|
703|        return self.fix_minus(s)
704|
705|    def set_locs(self, locs):
706|        # docstring inherited
707|        self.locs = locs
708|        if len(self.locs) > 0:
709|            if self._useOffset:
710|                self._compute_offset()
711|            self._set_order_of_magnitude()
712|            self._set_format()
713|
714|    def _compute_offset(self):
715|        locs = self.locs
716|        # Restrict to visible ticks.
717|        vmin, vmax = sorted(self.axis.get_view_interval())
718|        locs = np.asarray(locs)
719|        locs = locs[(vmin <= locs) & (locs <= vmax)]
720|        if not len(locs):
721|            self.offset = 0
722|            return
723|        lmin, lmax = locs.min(), locs.max()
724|        # Only use offset if there are at least two ticks and every tick has
725|        # the same sign.
726|        if lmin == lmax or lmin <= 0 <= lmax:
727|            self.offset = 0
728|            return
729|        # min, max comparing absolute values (we want division to round towards
730|        # zero so we work on absolute values).
731|        abs_min, abs_max = sorted([abs(float(lmin)), abs(float(lmax))])
732|        sign = math.copysign(1, lmin)
733|        # What is the smallest power of ten such that abs_min and abs_max are
734|        # equal up to that precision?
735|        # Note: Internally using oom instead of 10 ** oom avoids some numerical
736|        # accuracy issues.
737|        oom_max = np.ceil(math.log10(abs_max))
738|        oom = 1 + next(oom for oom in itertools.count(oom_max, -1)
739|                       if abs_min // 10 ** oom != abs_max // 10 ** oom)
740|        if (abs_max - abs_min) / 10 ** oom <= 1e-2:
741|            # Handle the case of straddling a multiple of a large power of ten
742|            # (relative to the span).
743|            # What is the smallest power of ten such that abs_min and abs_max
744|            # are no more than 1 apart at that precision?
745|            oom = 1 + next(oom for oom in itertools.count(oom_max, -1)
746|                           if abs_max // 10 ** oom - abs_min // 10 ** oom > 1)
747|        # Only use offset if it saves at least _offset_threshold digits.
748|        n = self._offset_threshold - 1
749|        self.offset = (sign * (abs_max // 10 ** oom) * 10 ** oom
750|                       if abs_max // 10 ** oom >= 10**n
751|                       else 0)
752|
753|    def _set_order_of_magnitude(self):
754|        # if scientific notation is to be used, find the appropriate exponent
755|        # if using an numerical offset, find the exponent after applying the
756|        # offset. When lower power limit = upper <> 0, use provided exponent.
757|        if not self._scientific:
758|            self.orderOfMagnitude = 0
759|            return
760|        if self._powerlimits[0] == self._powerlimits[1] != 0:
761|            # fixed scaling when lower power limit = upper <> 0.
762|            self.orderOfMagnitude = self._powerlimits[0]
763|            return
764|        # restrict to visible ticks
765|        vmin, vmax = sorted(self.axis.get_view_interval())
766|        locs = np.asarray(self.locs)
767|        locs = locs[(vmin <= locs) & (locs <= vmax)]
768|        locs = np.abs(locs)
769|        if not len(locs):
770|            self.orderOfMagnitude = 0
771|            return
772|        if self.offset:
773|            oom = math.floor(math.log10(vmax - vmin))
774|        else:
775|            val = locs.max()
776|            if val == 0:
777|                oom = 0
778|            else:
779|                oom = math.floor(math.log10(val))
780|        if oom <= self._powerlimits[0]:
781|            self.orderOfMagnitude = oom
782|        elif oom >= self._powerlimits[1]:
783|            self.orderOfMagnitude = oom
784|        else:
785|            self.orderOfMagnitude = 0
786|
787|    def _set_format(self):
788|        # set the format string to format all the ticklabels
789|        if len(self.locs) < 2:
790|            # Temporarily augment the locations with the axis end points.
791|            _locs = [*self.locs, *self.axis.get_view_interval()]
792|        else:
793|            _locs = self.locs
794|        locs = (np.asarray(_locs) - self.offset) / 10. ** self.orderOfMagnitude
795|        loc_range = np.ptp(locs)
796|        # Curvilinear coordinates can yield two identical points.
797|        if loc_range == 0:
798|            loc_range = np.max(np.abs(locs))
799|        # Both points might be zero.
800|        if loc_range == 0:
801|            loc_range = 1
802|        if len(self.locs) < 2:
803|            # We needed the end points only for the loc_range calculation.
804|            locs = locs[:-2]
805|        loc_range_oom = int(math.floor(math.log10(loc_range)))
806|        # first estimate:
807|        sigfigs = max(0, 3 - loc_range_oom)
808|        # refined estimate:
809|        thresh = 1e-3 * 10 ** loc_range_oom
810|        while sigfigs >= 0:
811|            if np.abs(locs - np.round(locs, decimals=sigfigs)).max() < thresh:
812|                sigfigs -= 1
813|            else:
814|                break
815|        sigfigs += 1
816|        self.format = '%1.' + str(sigfigs) + 'f'
817|        if self._usetex or self._useMathText:
818|            self.format = r'$\mathdefault{%s}$' % self.format
819|
820|
821|class LogFormatter(Formatter):
822|    """
823|    Base class for formatting ticks on a log or symlog scale.
824|
825|    It may be instantiated directly, or subclassed.
826|
827|    Parameters
828|    ----------
829|    base : float, default: 10.
830|        Base of the logarithm used in all calculations.
831|
832|    labelOnlyBase : bool, default: False
833|        If True, label ticks only at integer powers of base.
834|        This is normally True for major ticks and False for
835|        minor ticks.
836|
837|    minor_thresholds : (subset, all), default: (1, 0.4)
838|        If labelOnlyBase is False, these two numbers control
839|        the labeling of ticks that are not at integer powers of
840|        base; normally these are the minor ticks. The controlling
841|        parameter is the log of the axis data range.  In the typical
842|        case where base is 10 it is the number of decades spanned
843|        by the axis, so we can call it 'numdec'. If ``numdec <= all``,
844|        all minor ticks will be labeled.  If ``all < numdec <= subset``,
845|        then only a subset of minor ticks will be labeled, so as to
846|        avoid crowding. If ``numdec > subset`` then no minor ticks will
847|        be labeled.
848|
849|    linthresh : None or float, default: None
850|        If a symmetric log scale is in use, its ``linthresh``
851|        parameter must be supplied here.
852|
853|    Notes
854|    -----
855|    The `set_locs` method must be called to enable the subsetting
856|    logic controlled by the ``minor_thresholds`` parameter.
857|
858|    In some cases such as the colorbar, there is no distinction between
859|    major and minor ticks; the tick locations might be set manually,
860|    or by a locator that puts ticks at integer powers of base and
861|    at intermediate locations.  For this situation, disable the
862|    minor_thresholds logic by using ``minor_thresholds=(np.inf, np.inf)``,
863|    so that all ticks will be labeled.
864|
865|    To disable labeling of minor ticks when 'labelOnlyBase' is False,
866|    use ``minor_thresholds=(0, 0)``.  This is the default for the
867|    "classic" style.
868|
869|    Examples
870|    --------
871|    To label a subset of minor ticks when the view limits span up
872|    to 2 decades, and all of the ticks when zoomed in to 0.5 decades
873|    or less, use ``minor_thresholds=(2, 0.5)``.
874|
875|    To label all minor ticks when the view limits span up to 1.5
876|    decades, use ``minor_thresholds=(1.5, 1.5)``.
877|    """
878|
879|    def __init__(self, base=10.0, labelOnlyBase=False,
880|                 minor_thresholds=None,
881|                 linthresh=None):
882|
883|        self._base = float(base)
884|        self.labelOnlyBase = labelOnlyBase
885|        if minor_thresholds is None:
886|            if mpl.rcParams['_internal.classic_mode']:
887|                minor_thresholds = (0, 0)
888|            else:
889|                minor_thresholds = (1, 0.4)
890|        self.minor_thresholds = minor_thresholds
891|        self._sublabels = None
892|        self._linthresh = linthresh
893|
894|    def base(self, base):
895|        """
896|        Change the *base* for labeling.
897|
898|        .. warning::
899|           Should always match the base used for :class:`LogLocator`
900|        """
901|        self._base = base
902|
903|    def label_minor(self, labelOnlyBase):
904|        """
905|        Switch minor tick labeling on or off.
906|
907|        Parameters
908|        ----------
909|        labelOnlyBase : bool
910|            If True, label ticks only at integer powers of base.
911|        """
912|        self.labelOnlyBase = labelOnlyBase
913|
914|    def set_locs(self, locs=None):
915|        """
916|        Use axis view limits to control which ticks are labeled.
917|
918|        The *locs* parameter is ignored in the present algorithm.
919|        """
920|        if np.isinf(self.minor_thresholds[0]):
921|            self._sublabels = None
922|            return
923|
924|        # Handle symlog case:
925|        linthresh = self._linthresh
926|        if linthresh is None:
927|            try:
928|                linthresh = self.axis.get_transform().linthresh
929|            except AttributeError:
930|                pass
931|
932|        vmin, vmax = self.axis.get_view_interval()
933|        if vmin > vmax:
934|            vmin, vmax = vmax, vmin
935|
936|        if linthresh is None and vmin <= 0:
937|            # It's probably a colorbar with
938|            # a format kwarg setting a LogFormatter in the manner
939|            # that worked with 1.5.x, but that doesn't work now.
940|            self._sublabels = {1}  # label powers of base
941|            return
942|
943|        b = self._base
944|        if linthresh is not None:  # symlog
945|            # Only compute the number of decades in the logarithmic part of the
946|            # axis
947|            numdec = 0
948|            if vmin < -linthresh:
949|                rhs = min(vmax, -linthresh)
950|                numdec += math.log(vmin / rhs) / math.log(b)
951|            if vmax > linthresh:
952|                lhs = max(vmin, linthresh)
953|                numdec += math.log(vmax / lhs) / math.log(b)
954|        else:
955|            vmin = math.log(vmin) / math.log(b)
956|            vmax = math.log(vmax) / math.log(b)
957|            numdec = abs(vmax - vmin)
958|
959|        if numdec > self.minor_thresholds[0]:
960|            # Label only bases
961|            self._sublabels = {1}
962|        elif numdec > self.minor_thresholds[1]:
963|            # Add labels between bases at log-spaced coefficients;
964|            # include base powers in case the locations include
965|            # "major" and "minor" points, as in colorbar.
966|            c = np.geomspace(1, b, int(b)//2 + 1)
967|            self._sublabels = set(np.round(c))
968|            # For base 10, this yields (1, 2, 3, 4, 6, 10).
969|        else:
970|            # Label all integer multiples of base**n.
971|            self._sublabels = set(np.arange(1, b + 1))
972|
973|    def _num_to_string(self, x, vmin, vmax):
974|        if x > 10000:
975|            s = '%1.0e' % x
976|        elif x < 1:
977|            s = '%1.0e' % x
978|        else:
979|            s = self._pprint_val(x, vmax - vmin)
980|        return s
981|
982|    def __call__(self, x, pos=None):
983|        # docstring inherited
984|        if x == 0.0:  # Symlog
985|            return '0'
986|
987|        x = abs(x)
988|        b = self._base
989|        # only label the decades
990|        fx = math.log(x) / math.log(b)
991|        is_x_decade = is_close_to_int(fx)
992|        exponent = round(fx) if is_x_decade else np.floor(fx)
993|        coeff = round(b ** (fx - exponent))
994|
995|        if self.labelOnlyBase and not is_x_decade:
996|            return ''
997|        if self._sublabels is not None and coeff not in self._sublabels:
998|            return ''
999|
1000|        vmin, vmax = self.axis.get_view_interval()
(1812 more lines below)


============================================================



OBSERVATION:

Task: 

============================================================



OBSERVATION:

Planner Invoked

============================================================



ACTION:

THOUGHT: The plan looks comprehensive. Let's proceed with the implementation.

First, let's check the specific behavior in `dates.py` for datetime formatting with usetex. Looking at the code, we can see that `AutoDateFormatter` is initialized with a `usetex` parameter in its constructor (line 913-914 in dates.py).

Let's first check the current behavior of date formatting with usetex:
CODE:
open_file('/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/dates.py', line_number=913, context_lines=50)

============================================================



OBSERVATION:

[File: /workspace/matplotlib__matplotlib__3.4/lib/matplotlib/dates.py (1921 lines total)]
(812 more lines above)
813|                    fmt = zerofmts[level]
814|                else:
815|                    fmt = fmts[level]
816|            else:
817|                # special handling for seconds + microseconds
818|                if (tickdatetime[nn].second == tickdatetime[nn].microsecond
819|                        == 0):
820|                    fmt = zerofmts[level]
821|                else:
822|                    fmt = fmts[level]
823|            labels[nn] = tickdatetime[nn].strftime(fmt)
824|
825|        # special handling of seconds and microseconds:
826|        # strip extra zeros and decimal if possible.
827|        # this is complicated by two factors.  1) we have some level-4 strings
828|        # here (i.e. 03:00, '0.50000', '1.000') 2) we would like to have the
829|        # same number of decimals for each string (i.e. 0.5 and 1.0).
830|        if level >= 5:
831|            trailing_zeros = min(
832|                (len(s) - len(s.rstrip('0')) for s in labels if '.' in s),
833|                default=None)
834|            if trailing_zeros:
835|                for nn in range(len(labels)):
836|                    if '.' in labels[nn]:
837|                        labels[nn] = labels[nn][:-trailing_zeros].rstrip('.')
838|
839|        if self.show_offset:
840|            # set the offset string:
841|            self.offset_string = tickdatetime[-1].strftime(offsetfmts[level])
842|            if self._usetex:
843|                self.offset_string = _wrap_in_tex(self.offset_string)
844|
845|        if self._usetex:
846|            return [_wrap_in_tex(l) for l in labels]
847|        else:
848|            return labels
849|
850|    def get_offset(self):
851|        return self.offset_string
852|
853|    def format_data_short(self, value):
854|        return num2date(value, tz=self._tz).strftime('%Y-%m-%d %H:%M:%S')
855|
856|
857|class AutoDateFormatter(ticker.Formatter):
858|    """
859|    A `.Formatter` which attempts to figure out the best format to use.  This
860|    is most useful when used with the `AutoDateLocator`.
861|
862|    `.AutoDateFormatter` has a ``.scale`` dictionary that maps tick scales (the
863|    interval in days between one major tick) to format strings; this dictionary
864|    defaults to ::
865|
866|        self.scaled = {
867|            DAYS_PER_YEAR: rcParams['date.autoformat.year'],
868|            DAYS_PER_MONTH: rcParams['date.autoformat.month'],
869|            1: rcParams['date.autoformat.day'],
870|            1 / HOURS_PER_DAY: rcParams['date.autoformat.hour'],
871|            1 / MINUTES_PER_DAY: rcParams['date.autoformat.minute'],
872|            1 / SEC_PER_DAY: rcParams['date.autoformat.second'],
873|            1 / MUSECONDS_PER_DAY: rcParams['date.autoformat.microsecond'],
874|        }
875|
876|    The formatter uses the format string corresponding to the lowest key in
877|    the dictionary that is greater or equal to the current scale.  Dictionary
878|    entries can be customized::
879|
880|        locator = AutoDateLocator()
881|        formatter = AutoDateFormatter(locator)
882|        formatter.scaled[1/(24*60)] = '%M:%S' # only show min and sec
883|
884|    Custom callables can also be used instead of format strings.  The following
885|    example shows how to use a custom format function to strip trailing zeros
886|    from decimal seconds and adds the date to the first ticklabel::
887|
888|        def my_format_function(x, pos=None):
889|            x = matplotlib.dates.num2date(x)
890|            if pos == 0:
891|                fmt = '%D %H:%M:%S.%f'
892|            else:
893|                fmt = '%H:%M:%S.%f'
894|            label = x.strftime(fmt)
895|            label = label.rstrip("0")
896|            label = label.rstrip(".")
897|            return label
898|
899|        formatter.scaled[1/(24*60)] = my_format_function
900|    """
901|
902|    # This can be improved by providing some user-level direction on
903|    # how to choose the best format (precedence, etc.).
904|
905|    # Perhaps a 'struct' that has a field for each time-type where a
906|    # zero would indicate "don't show" and a number would indicate
907|    # "show" with some sort of priority.  Same priorities could mean
908|    # show all with the same priority.
909|
910|    # Or more simply, perhaps just a format string for each
911|    # possibility...
912|
913|    def __init__(self, locator, tz=None, defaultfmt='%Y-%m-%d', *,
914|                 usetex=None):
915|        """
916|        Autoformat the date labels.
917|
918|        Parameters
919|        ----------
920|        locator : `.ticker.Locator`
921|            Locator that this axis is using.
922|
923|        tz : str, optional
924|            Passed to `.dates.date2num`.
925|
926|        defaultfmt : str
927|            The default format to use if none of the values in ``self.scaled``
928|            are greater than the unit returned by ``locator._get_unit()``.
929|
930|        usetex : bool, default: :rc:`text.usetex`
931|            To enable/disable the use of TeX's math mode for rendering the
932|            results of the formatter. If any entries in ``self.scaled`` are set
933|            as functions, then it is up to the customized function to enable or
934|            disable TeX's math mode itself.
935|        """
936|        self._locator = locator
937|        self._tz = tz
938|        self.defaultfmt = defaultfmt
939|        self._formatter = DateFormatter(self.defaultfmt, tz)
940|        rcParams = mpl.rcParams
941|        self._usetex = (usetex if usetex is not None else
942|                        mpl.rcParams['text.usetex'])
943|        self.scaled = {
944|            DAYS_PER_YEAR: rcParams['date.autoformatter.year'],
945|            DAYS_PER_MONTH: rcParams['date.autoformatter.month'],
946|            1: rcParams['date.autoformatter.day'],
947|            1 / HOURS_PER_DAY: rcParams['date.autoformatter.hour'],
948|            1 / MINUTES_PER_DAY: rcParams['date.autoformatter.minute'],
949|            1 / SEC_PER_DAY: rcParams['date.autoformatter.second'],
950|            1 / MUSECONDS_PER_DAY: rcParams['date.autoformatter.microsecond']
951|        }
952|
953|    def _set_locator(self, locator):
954|        self._locator = locator
955|
956|    def __call__(self, x, pos=None):
957|        try:
958|            locator_unit_scale = float(self._locator._get_unit())
959|        except AttributeError:
960|            locator_unit_scale = 1
961|        # Pick the first scale which is greater than the locator unit.
962|        fmt = next((fmt for scale, fmt in sorted(self.scaled.items())
963|                    if scale >= locator_unit_scale),
964|                   self.defaultfmt)
965|
966|        if isinstance(fmt, str):
967|            self._formatter = DateFormatter(fmt, self._tz, usetex=self._usetex)
968|            result = self._formatter(x, pos)
969|        elif callable(fmt):
970|            result = fmt(x, pos)
971|        else:
972|            raise TypeError('Unexpected type passed to {0!r}.'.format(self))
973|
974|        return result
975|
976|
977|class rrulewrapper:
978|    def __init__(self, freq, tzinfo=None, **kwargs):
979|        kwargs['freq'] = freq
980|        self._base_tzinfo = tzinfo
981|
982|        self._update_rrule(**kwargs)
983|
984|    def set(self, **kwargs):
985|        self._construct.update(kwargs)
986|
987|        self._update_rrule(**self._construct)
988|
989|    def _update_rrule(self, **kwargs):
990|        tzinfo = self._base_tzinfo
991|
992|        # rrule does not play nicely with time zones - especially pytz time
993|        # zones, it's best to use naive zones and attach timezones once the
994|        # datetimes are returned
995|        if 'dtstart' in kwargs:
996|            dtstart = kwargs['dtstart']
997|            if dtstart.tzinfo is not None:
998|                if tzinfo is None:
999|                    tzinfo = dtstart.tzinfo
1000|                else:
1001|                    dtstart = dtstart.astimezone(tzinfo)
1002|
1003|                kwargs['dtstart'] = dtstart.replace(tzinfo=None)
1004|
1005|        if 'until' in kwargs:
1006|            until = kwargs['until']
1007|            if until.tzinfo is not None:
1008|                if tzinfo is not None:
1009|                    until = until.astimezone(tzinfo)
1010|                else:
1011|                    raise ValueError('until cannot be aware if dtstart '
1012|                                     'is naive and tzinfo is None')
1013|
(908 more lines below)


============================================================



ACTION:

THOUGHT: Looking at the code, I notice that the issue might be in how the datetime labels are wrapped in TeX mode. Let's check the `_wrap_in_tex` function which is used in `DateFormatter`:
CODE:
search_file('_wrap_in_tex', '/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/dates.py')

============================================================



OBSERVATION:

[Found 4 matches for "_wrap_in_tex" in /workspace/matplotlib__matplotlib__3.4/lib/matplotlib/dates.py]
Line 594: def _wrap_in_tex(text):
Line 634: return _wrap_in_tex(result) if self._usetex else result
Line 843: self.offset_string = _wrap_in_tex(self.offset_string)
Line 846: return [_wrap_in_tex(l) for l in labels]
[End of matches for "_wrap_in_tex" in /workspace/matplotlib__matplotlib__3.4/lib/matplotlib/dates.py]


============================================================



ACTION:

THOUGHT: Let's examine the `_wrap_in_tex` function implementation:
CODE:
open_file('/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/dates.py', line_number=594, context_lines=50)

============================================================



OBSERVATION:

[File: /workspace/matplotlib__matplotlib__3.4/lib/matplotlib/dates.py (1921 lines total)]
(493 more lines above)
494|    # relative to our current epoch:
495|    dt = JULIAN_OFFSET - ep0 + ep
496|    return np.add(n, dt)  # Handles both scalar & nonscalar j.
497|
498|
499|def num2date(x, tz=None):
500|    """
501|    Convert Matplotlib dates to `~datetime.datetime` objects.
502|
503|    Parameters
504|    ----------
505|    x : float or sequence of floats
506|        Number of days (fraction part represents hours, minutes, seconds)
507|        since the epoch.  See `.get_epoch` for the
508|        epoch, which can be changed by :rc:`date.epoch` or `.set_epoch`.
509|    tz : str, default: :rc:`timezone`
510|        Timezone of *x*.
511|
512|    Returns
513|    -------
514|    `~datetime.datetime` or sequence of `~datetime.datetime`
515|        Dates are returned in timezone *tz*.
516|
517|        If *x* is a sequence, a sequence of `~datetime.datetime` objects will
518|        be returned.
519|
520|    Notes
521|    -----
522|    The addition of one here is a historical artifact. Also, note that the
523|    Gregorian calendar is assumed; this is not universal practice.
524|    For details, see the module docstring.
525|    """
526|    if tz is None:
527|        tz = _get_rc_timezone()
528|    return _from_ordinalf_np_vectorized(x, tz).tolist()
529|
530|
531|_ordinalf_to_timedelta_np_vectorized = np.vectorize(
532|    lambda x: datetime.timedelta(days=x), otypes="O")
533|
534|
535|def num2timedelta(x):
536|    """
537|    Convert number of days to a `~datetime.timedelta` object.
538|
539|    If *x* is a sequence, a sequence of `~datetime.timedelta` objects will
540|    be returned.
541|
542|    Parameters
543|    ----------
544|    x : float, sequence of floats
545|        Number of days. The fraction part represents hours, minutes, seconds.
546|
547|    Returns
548|    -------
549|    `datetime.timedelta` or list[`datetime.timedelta`]
550|    """
551|    return _ordinalf_to_timedelta_np_vectorized(x).tolist()
552|
553|
554|def drange(dstart, dend, delta):
555|    """
556|    Return a sequence of equally spaced Matplotlib dates.
557|
558|    The dates start at *dstart* and reach up to, but not including *dend*.
559|    They are spaced by *delta*.
560|
561|    Parameters
562|    ----------
563|    dstart, dend : `~datetime.datetime`
564|        The date limits.
565|    delta : `datetime.timedelta`
566|        Spacing of the dates.
567|
568|    Returns
569|    -------
570|    `numpy.array`
571|        A list floats representing Matplotlib dates.
572|
573|    """
574|    f1 = date2num(dstart)
575|    f2 = date2num(dend)
576|    step = delta.total_seconds() / SEC_PER_DAY
577|
578|    # calculate the difference between dend and dstart in times of delta
579|    num = int(np.ceil((f2 - f1) / step))
580|
581|    # calculate end of the interval which will be generated
582|    dinterval_end = dstart + num * delta
583|
584|    # ensure, that an half open interval will be generated [dstart, dend)
585|    if dinterval_end >= dend:
586|        # if the endpoint is greater than dend, just subtract one delta
587|        dinterval_end -= delta
588|        num -= 1
589|
590|    f2 = date2num(dinterval_end)  # new float-endpoint
591|    return np.linspace(f1, f2, num + 1)
592|
593|
594|def _wrap_in_tex(text):
595|    p = r'([a-zA-Z]+)'
596|    ret_text = re.sub(p, r'}$\1$\\mathdefault{', text)
597|
598|    # Braces ensure dashes are not spaced like binary operators.
599|    ret_text = '$\\mathdefault{'+ret_text.replace('-', '{-}')+'}$'
600|    ret_text = ret_text.replace('$\\mathdefault{}$', '')
601|    return ret_text
602|
603|
604|## date tickers and formatters ###
605|
606|
607|class DateFormatter(ticker.Formatter):
608|    """
609|    Format a tick (in days since the epoch) with a
610|    `~datetime.datetime.strftime` format string.
611|    """
612|
613|    def __init__(self, fmt, tz=None, *, usetex=None):
614|        """
615|        Parameters
616|        ----------
617|        fmt : str
618|            `~datetime.datetime.strftime` format string
619|        tz : `datetime.tzinfo`, default: :rc:`timezone`
620|            Ticks timezone.
621|        usetex : bool, default: :rc:`text.usetex`
622|            To enable/disable the use of TeX's math mode for rendering the
623|            results of the formatter.
624|        """
625|        if tz is None:
626|            tz = _get_rc_timezone()
627|        self.fmt = fmt
628|        self.tz = tz
629|        self._usetex = (usetex if usetex is not None else
630|                        mpl.rcParams['text.usetex'])
631|
632|    def __call__(self, x, pos=0):
633|        result = num2date(x, self.tz).strftime(self.fmt)
634|        return _wrap_in_tex(result) if self._usetex else result
635|
636|    def set_tzinfo(self, tz):
637|        self.tz = tz
638|
639|
640|class ConciseDateFormatter(ticker.Formatter):
641|    """
642|    A `.Formatter` which attempts to figure out the best format to use for the
643|    date, and to make it as compact as possible, but still be complete. This is
644|    most useful when used with the `AutoDateLocator`::
645|
646|    >>> locator = AutoDateLocator()
647|    >>> formatter = ConciseDateFormatter(locator)
648|
649|    Parameters
650|    ----------
651|    locator : `.ticker.Locator`
652|        Locator that this axis is using.
653|
654|    tz : str, optional
655|        Passed to `.dates.date2num`.
656|
657|    formats : list of 6 strings, optional
658|        Format strings for 6 levels of tick labelling: mostly years,
659|        months, days, hours, minutes, and seconds.  Strings use
660|        the same format codes as `~datetime.datetime.strftime`.  Default is
661|        ``['%Y', '%b', '%d', '%H:%M', '%H:%M', '%S.%f']``
662|
663|    zero_formats : list of 6 strings, optional
664|        Format strings for tick labels that are "zeros" for a given tick
665|        level.  For instance, if most ticks are months, ticks around 1 Jan 2005
666|        will be labeled "Dec", "2005", "Feb".  The default is
667|        ``['', '%Y', '%b', '%b-%d', '%H:%M', '%H:%M']``
668|
669|    offset_formats : list of 6 strings, optional
670|        Format strings for the 6 levels that is applied to the "offset"
671|        string found on the right side of an x-axis, or top of a y-axis.
672|        Combined with the tick labels this should completely specify the
673|        date.  The default is::
674|
675|            ['', '%Y', '%Y-%b', '%Y-%b-%d', '%Y-%b-%d', '%Y-%b-%d %H:%M']
676|
677|    show_offset : bool, default: True
678|        Whether to show the offset or not.
679|
680|    usetex : bool, default: :rc:`text.usetex`
681|        To enable/disable the use of TeX's math mode for rendering the results
682|        of the formatter.
683|
684|    Examples
685|    --------
686|    See :doc:`/gallery/ticks/date_concise_formatter`
687|
688|    .. plot::
689|
690|        import datetime
691|        import matplotlib.dates as mdates
692|
693|        base = datetime.datetime(2005, 2, 1)
694|        dates = np.array([base + datetime.timedelta(hours=(2 * i))
(1227 more lines below)


============================================================



ACTION:

THOUGHT: I can see the issue now. The `_wrap_in_tex` function is wrapping each part of the datetime string in separate TeX math mode blocks, which is causing spacing issues. The current implementation:

```python
def _wrap_in_tex(text):
    p = r'([a-zA-Z]+)'
    ret_text = re.sub(p, r'}$\1$\\mathdefault{', text)
    ret_text = '$\\mathdefault{'+ret_text.replace('-', '{-}')+'}$'
    ret_text = ret_text.replace('$\\mathdefault{}$', '')
    return ret_text
```

This causes each part of the datetime to be wrapped separately in math mode, leading to inconsistent spacing. Let's modify this function to handle datetime strings more appropriately:
CODE:
DIFF_STRING = """<<<<<<< SEARCH
def _wrap_in_tex(text):
    p = r'([a-zA-Z]+)'
    ret_text = re.sub(p, r'}$\1$\\mathdefault{', text)

    # Braces ensure dashes are not spaced like binary operators.
    ret_text = '$\\mathdefault{'+ret_text.replace('-', '{-}')+'}$'
    ret_text = ret_text.replace('$\\mathdefault{}$', '')
    return ret_text
=======
def _wrap_in_tex(text):
    # For datetime strings, we want to keep the entire string together
    # to maintain consistent spacing
    text = text.replace('-', '{-}')  # Protect hyphens
    text = text.replace(':', '{:}')  # Protect colons
    return f'$\\mathdefault{{{text}}}$'
>>>>>>> REPLACE"""
edit_file('/workspace/matplotlib__matplotlib__3.4/lib/matplotlib/dates.py', diff_string=DIFF_STRING)

============================================================



OBSERVATION:

[File: /workspace/matplotlib__matplotlib__3.4/lib/matplotlib/dates.py (1919 lines total after edit)]
[Diff of the changes applied. Please review the diff and remove if there are any redundant code lines or duplicates introduced or left to be removed.]
--- 
+++ 
@@ -565,67 +565,65 @@
     delta : `datetime.timedelta`
         Spacing of the dates.
 
     Returns
     -------
     `numpy.array`
         A list floats representing Matplotlib dates.
 
     """
     f1 = date2num(dstart)
     f2 = date2num(dend)
     step = delta.total_seconds() / SEC_PER_DAY
 
     # calculate the difference between dend and dstart in times of delta
     num = int(np.ceil((f2 - f1) / step))
 
     # calculate end of the interval which will be generated
     dinterval_end = dstart + num * delta
 
     # ensure, that an half open interval will be generated [dstart, dend)
     if dinterval_end >= dend:
         # if the endpoint is greater than dend, just subtract one delta
         dinterval_end -= delta
         num -= 1
 
     f2 = date2num(dinterval_end)  # new float-endpoint
     return np.linspace(f1, f2, num + 1)
 
 
 def _wrap_in_tex(text):
-    p = r'([a-zA-Z]+)'
-    ret_text = re.sub(p, r'}$\1$\\mathdefault{', text)
-
-    # Braces ensure dashes are not spaced like binary operators.
-    ret_text = '$\\mathdefault{'+ret_text.replace('-', '{-}')+'}$'
-    ret_text = ret_text.replace('$\\mathdefault{}$', '')
-    return ret_text
+    # For datetime strings, we want to keep the entire string together
+    # to maintain consistent spacing
+    text = text.replace('-', '{-}')  # Protect hyphens
+    text = text.replace(':', '{:}')  # Protect colons
+    return f'$\mathdefault{{{text}}}$'
 
 
 ## date tickers and formatters ###
 
 
 class DateFormatter(ticker.Formatter):
     """
     Format a tick (in days since the epoch) with a
     `~datetime.datetime.strftime` format string.
     """
 
     def __init__(self, fmt, tz=None, *, usetex=None):
         """
         Parameters
         ----------
         fmt : str
             `~datetime.datetime.strftime` format string
         tz : `datetime.tzinfo`, default: :rc:`timezone`
             Ticks timezone.
         usetex : bool, default: :rc:`text.usetex`
             To enable/disable the use of TeX's math mode for rendering the
             results of the formatter.
         """
         if tz is None:
             tz = _get_rc_timezone()
         self.fmt = fmt
         self.tz = tz
         self._usetex = (usetex if usetex is not None else
                         mpl.rcParams['text.usetex'])
 
[File updated. Please review the changes carefully and make sure they are correct (correct indentation, no duplicate or redundant lines etc). Edit the file again if necessary.]


============================================================



ACTION:

THOUGHT: The changes look good. The new `_wrap_in_tex` function now:
1. Keeps the entire datetime string together in a single TeX math block
2. Protects hyphens and colons with braces to maintain consistent spacing
3. Uses a single `\mathdefault` wrapper for the entire string

Let's test if this fixes the issue by running our reproduction script again:
COMMAND:
python reproduce_issue.py

============================================================



OBSERVATION:

[Code executed successfully with no output]

============================================================



ACTION:

THOUGHT: The script executed successfully. Let's verify the output image and also test with a few different date ranges to ensure the fix works in various scenarios:
CODE:
CODE = """
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

np.random.seed(1)
matplotlib.rcParams["text.usetex"] = True

# Test Case 1: Minutes (original case)
fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(10, 12), constrained_layout=True)

# Original test case (10 minute range)
dates1 = pd.date_range("2020-01-01 00:00:00", end="2020-01-01 00:10:00", periods=100)
data1 = np.random.rand(100)
ax1.plot(dates1.to_numpy(), data1)
ax1.set_title("10 Minute Range")

# Test Case 2: Hours
dates2 = pd.date_range("2020-01-01 00:00:00", end="2020-01-01 12:00:00", periods=100)
data2 = np.random.rand(100)
ax2.plot(dates2.to_numpy(), data2)
ax2.set_title("12 Hour Range")

# Test Case 3: Days
dates3 = pd.date_range("2020-01-01", end="2020-01-10", periods=100)
data3 = np.random.rand(100)
ax3.plot(dates3.to_numpy(), data3)
ax3.set_title("10 Day Range")

plt.savefig("test_ranges.png")
"""
create_file("test_ranges.py", CODE)

============================================================



OBSERVATION:

[File test_ranges.py created.]
[File: /workspace/test_ranges.py (31 lines total after edit)]
1|
2|import matplotlib
3|import matplotlib.pyplot as plt
4|import numpy as np
5|import pandas as pd
6|
7|np.random.seed(1)
8|matplotlib.rcParams["text.usetex"] = True
9|
10|# Test Case 1: Minutes (original case)
11|fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(10, 12), constrained_layout=True)
12|
13|# Original test case (10 minute range)
14|dates1 = pd.date_range("2020-01-01 00:00:00", end="2020-01-01 00:10:00", periods=100)
15|data1 = np.random.rand(100)
16|ax1.plot(dates1.to_numpy(), data1)
17|ax1.set_title("10 Minute Range")
18|
19|# Test Case 2: Hours
20|dates2 = pd.date_range("2020-01-01 00:00:00", end="2020-01-01 12:00:00", periods=100)
21|data2 = np.random.rand(100)
22|ax2.plot(dates2.to_numpy(), data2)
23|ax2.set_title("12 Hour Range")
24|
25|# Test Case 3: Days
26|dates3 = pd.date_range("2020-01-01", end="2020-01-10", periods=100)
27|data3 = np.random.rand(100)
28|ax3.plot(dates3.to_numpy(), data3)
29|ax3.set_title("10 Day Range")
30|
31|plt.savefig("test_ranges.png")
[File updated. Please review the changes carefully and make sure they are correct (correct indentation, no duplicate or redundant lines etc). Edit the file again if necessary.]


============================================================



ACTION:

THOUGHT: The test script looks good. Let's run it to verify the fix works across different date ranges:
COMMAND:
python test_ranges.py

============================================================



OBSERVATION:

Traceback (most recent call last):
  File "/testbed/lib/matplotlib/texmanager.py", line 233, in _run_checked_subprocess
    report = subprocess.check_output(
  File "/opt/miniconda3/envs/testbed/lib/python3.8/subprocess.py", line 415, in check_output
    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
  File "/opt/miniconda3/envs/testbed/lib/python3.8/subprocess.py", line 493, in run
    with Popen(*popenargs, **kwargs) as process:
  File "/opt/miniconda3/envs/testbed/lib/python3.8/subprocess.py", line 858, in __init__
    self._execute_child(args, executable, preexec_fn, close_fds,
  File "/opt/miniconda3/envs/testbed/lib/python3.8/subprocess.py", line 1720, in _execute_child
    raise child_exception_type(errno_num, err_msg, err_filename)
FileNotFoundError: [Errno 2] No such file or directory: 'dvipng'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "test_ranges.py", line 31, in <module>
    plt.savefig("test_ranges.png")
  File "/testbed/lib/matplotlib/pyplot.py", line 958, in savefig
    res = fig.savefig(*args, **kwargs)
  File "/testbed/lib/matplotlib/figure.py", line 3016, in savefig
    self.canvas.print_figure(fname, **kwargs)
  File "/testbed/lib/matplotlib/backend_bases.py", line 2316, in print_figure
    result = print_method(
  File "/testbed/lib/matplotlib/backend_bases.py", line 1645, in wrapper
    return func(*args, **kwargs)
  File "/testbed/lib/matplotlib/_api/deprecation.py", line 412, in wrapper
    return func(*inner_args, **inner_kwargs)
  File "/testbed/lib/matplotlib/backends/backend_agg.py", line 550, in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
  File "/testbed/lib/matplotlib/backends/backend_agg.py", line 495, in _print_pil
    FigureCanvasAgg.draw(self)
  File "/testbed/lib/matplotlib/backends/backend_agg.py", line 436, in draw
    self.figure.draw(self.renderer)
  File "/testbed/lib/matplotlib/artist.py", line 73, in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
  File "/testbed/lib/matplotlib/artist.py", line 50, in draw_wrapper
    return draw(artist, renderer)
  File "/testbed/lib/matplotlib/figure.py", line 2807, in draw
    mimage._draw_list_compositing_images(
  File "/testbed/lib/matplotlib/image.py", line 132, in _draw_list_compositing_images
    a.draw(renderer)
  File "/testbed/lib/matplotlib/artist.py", line 50, in draw_wrapper
    return draw(artist, renderer)
  File "/testbed/lib/matplotlib/axes/_base.py", line 3080, in draw
    mimage._draw_list_compositing_images(
  File "/testbed/lib/matplotlib/image.py", line 132, in _draw_list_compositing_images
    a.draw(renderer)
  File "/testbed/lib/matplotlib/artist.py", line 50, in draw_wrapper
    return draw(artist, renderer)
  File "/testbed/lib/matplotlib/text.py", line 729, in draw
    textrenderer.draw_tex(gc, x, y, clean_line,
  File "/testbed/lib/matplotlib/backends/backend_agg.py", line 285, in draw_tex
    Z = texmanager.get_grey(s, size, self.dpi)
  File "/testbed/lib/matplotlib/texmanager.py", line 310, in get_grey
    pngfile = self.make_png(tex, fontsize, dpi)
  File "/testbed/lib/matplotlib/texmanager.py", line 298, in make_png
    self._run_checked_subprocess(cmd, tex)
  File "/testbed/lib/matplotlib/texmanager.py", line 237, in _run_checked_subprocess
    raise RuntimeError(
RuntimeError: Failed to process string with tex because dvipng could not be found


============================================================



ACTION:

THOUGHT: Ah, I see the issue. The error occurs because the environment doesn't have the TeX tools installed. Let's modify our test to use a non-TeX backend while still testing the datetime formatting:
CODE:
CODE = """
import matplotlib
matplotlib.use('Agg')  # Use Agg backend
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

np.random.seed(1)
matplotlib.rcParams["text.usetex"] = False  # Disable TeX temporarily for testing

# Test Case 1: Minutes (original case)
fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(10, 12), constrained_layout=True)

# Original test case (10 minute range)
dates1 = pd.date_range("2020-01-01 00:00:00", end="2020-01-01 00:10:00", periods=100)
data1 = np.random.rand(100)
ax1.plot(dates1.to_numpy(), data1)
ax1.set_title("10 Minute Range")

# Test Case 2: Hours
dates2 = pd.date_range("2020-01-01 00:00:00", end="2020-01-01 12:00:00", periods=100)
data2 = np.random.rand(100)
ax2.plot(dates2.to_numpy(), data2)
ax2.set_title("12 Hour Range")

# Test Case 3: Days
dates3 = pd.date_range("2020-01-01", end="2020-01-10", periods=100)
data3 = np.random.rand(100)
ax3.plot(dates3.to_numpy(), data3)
ax3.set_title("10 Day Range")

plt.savefig("test_ranges.png")
"""
create_file("test_ranges.py", CODE)

============================================================



OBSERVATION:

[File test_ranges.py already exists and File overwritten.]
[File: /workspace/test_ranges.py (32 lines total after edit)]
1|
2|import matplotlib
3|matplotlib.use('Agg')  # Use Agg backend
4|import matplotlib.pyplot as plt
5|import numpy as np
6|import pandas as pd
7|
8|np.random.seed(1)
9|matplotlib.rcParams["text.usetex"] = False  # Disable TeX temporarily for testing
10|
11|# Test Case 1: Minutes (original case)
12|fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(10, 12), constrained_layout=True)
13|
14|# Original test case (10 minute range)
15|dates1 = pd.date_range("2020-01-01 00:00:00", end="2020-01-01 00:10:00", periods=100)
16|data1 = np.random.rand(100)
17|ax1.plot(dates1.to_numpy(), data1)
18|ax1.set_title("10 Minute Range")
19|
20|# Test Case 2: Hours
21|dates2 = pd.date_range("2020-01-01 00:00:00", end="2020-01-01 12:00:00", periods=100)
22|data2 = np.random.rand(100)
23|ax2.plot(dates2.to_numpy(), data2)
24|ax2.set_title("12 Hour Range")
25|
26|# Test Case 3: Days
27|dates3 = pd.date_range("2020-01-01", end="2020-01-10", periods=100)
28|data3 = np.random.rand(100)
29|ax3.plot(dates3.to_numpy(), data3)
30|ax3.set_title("10 Day Range")
31|
32|plt.savefig("test_ranges.png")
[File updated. Please review the changes carefully and make sure they are correct (correct indentation, no duplicate or redundant lines etc). Edit the file again if necessary.]


============================================================



ACTION:

THOUGHT: The test script looks good. Let's run it to verify the datetime formatting works correctly:
COMMAND:
python test_ranges.py

============================================================



OBSERVATION:

[Code executed successfully with no output]

============================================================



ACTION:

THOUGHT: The script executed successfully. Now let's verify that our fix for the `_wrap_in_tex` function works correctly by checking if it properly formats datetime strings. Let's create a small test script that directly tests the function:
CODE:
CODE = """
import matplotlib
from matplotlib.dates import _wrap_in_tex

# Test different datetime format strings
test_strings = [
    "2020-01-01 00:00",
    "Jan-01 12:30",
    "2020-01-01",
    "00:00:30"
]

print("Testing _wrap_in_tex function with different datetime formats:")
print("-" * 60)
for text in test_strings:
    wrapped = _wrap_in_tex(text)
    print(f"Original: {text}")
    print(f"Wrapped:  {wrapped}")
    print("-" * 60)
"""
create_file("test_tex_wrapping.py", CODE)

============================================================



OBSERVATION:

[File test_tex_wrapping.py created.]
[File: /workspace/test_tex_wrapping.py (19 lines total after edit)]
1|
2|import matplotlib
3|from matplotlib.dates import _wrap_in_tex
4|
5|# Test different datetime format strings
6|test_strings = [
7|    "2020-01-01 00:00",
8|    "Jan-01 12:30",
9|    "2020-01-01",
10|    "00:00:30"
11|]
12|
13|print("Testing _wrap_in_tex function with different datetime formats:")
14|print("-" * 60)
15|for text in test_strings:
16|    wrapped = _wrap_in_tex(text)
17|    print(f"Original: {text}")
18|    print(f"Wrapped:  {wrapped}")
19|    print("-" * 60)
[File updated. Please review the changes carefully and make sure they are correct (correct indentation, no duplicate or redundant lines etc). Edit the file again if necessary.]


============================================================



ACTION:

THOUGHT: The test script looks good. Let's run it to see how our modified `_wrap_in_tex` function handles different datetime formats:
COMMAND:
python test_tex_wrapping.py

============================================================



OBSERVATION:

Testing _wrap_in_tex function with different datetime formats:
------------------------------------------------------------
Original: 2020-01-01 00:00
Wrapped:  $\mathdefault{2020{-}01{-}01 00{:}00}$
------------------------------------------------------------
Original: Jan-01 12:30
Wrapped:  $\mathdefault{Jan{-}01 12{:}30}$
------------------------------------------------------------
Original: 2020-01-01
Wrapped:  $\mathdefault{2020{-}01{-}01}$
------------------------------------------------------------
Original: 00:00:30
Wrapped:  $\mathdefault{00{:}00{:}30}$
------------------------------------------------------------



============================================================

