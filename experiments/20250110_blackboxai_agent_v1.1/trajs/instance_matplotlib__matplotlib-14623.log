

TASK:


Inverting an axis using its limits does not work for log scale
### Bug report

**Bug summary**
Starting in matplotlib 3.1.0 it is no longer possible to invert a log axis using its limits.

**Code for reproduction**
```python
import numpy as np
import matplotlib.pyplot as plt


y = np.linspace(1000e2, 1, 100)
x = np.exp(-np.linspace(0, 1, y.size))

for yscale in ('linear', 'log'):
    fig, ax = plt.subplots()
    ax.plot(x, y)
    ax.set_yscale(yscale)
    ax.set_ylim(y.max(), y.min())
```

**Actual outcome**
The yaxis is only inverted for the ``"linear"`` scale.

![linear](https://user-images.githubusercontent.com/9482218/60081191-99245e80-9731-11e9-9e4a-eadb3ef58666.png)

![log](https://user-images.githubusercontent.com/9482218/60081203-9e81a900-9731-11e9-8bae-0be1c9762b16.png)

**Expected outcome**
I would expect the yaxis to be inverted for both the ``"linear"`` and the ``"log"`` scale.

**Matplotlib version**
  * Operating system: Linux and MacOS
  * Matplotlib version: 3.1.0 
  * Python version: 3.7.3
 
Python and matplotlib have been installed using conda.




============================================================



ACTION:

THOUGHT: I'll help you implement the necessary changes following the steps you outlined.

1. First, let's explore the repository structure:
CODE:
get_repo_structure("/workspace/matplotlib__matplotlib__3.1")

============================================================



OBSERVATION:

/workspace/matplotlib__matplotlib__3.1:
INSTALL.rst
LICENSE
MANIFEST.in
README.rst
__pycache__
azure-pipelines.yml
build
build_alllocal.cmd
ci
doc
examples
extern
lib
matplotlibrc.template
pytest.ini
requirements
setup.cfg.template
setup.py
setupext.py
src
tests.py
tools
tox.ini
tutorials
versioneer.py

/workspace/matplotlib__matplotlib__3.1/LICENSE:
LICENSE
LICENSE.PIL
LICENSE_AMSFONTS
LICENSE_BAKOMA
LICENSE_COLORBREWER
LICENSE_CONDA
LICENSE_JQUERY
LICENSE_PAINT
LICENSE_QT4_EDITOR
LICENSE_STIX
LICENSE_YORICK
LICENSE_enthought.txt
Solarized.txt
pnpoly.license

/workspace/matplotlib__matplotlib__3.1/__pycache__:
setupext.cpython-38.pyc
versioneer.cpython-38.pyc

/workspace/matplotlib__matplotlib__3.1/build:
lib.linux-x86_64-cpython-38
temp.linux-x86_64-cpython-38

/workspace/matplotlib__matplotlib__3.1/build/lib.linux-x86_64-cpython-38:
matplotlib

/workspace/matplotlib__matplotlib__3.1/build/lib.linux-x86_64-cpython-38/matplotlib:
_contour.cpython-38-x86_64-linux-gnu.so
_image.cpython-38-x86_64-linux-gnu.so
_path.cpython-38-x86_64-linux-gnu.so
_png.cpython-38-x86_64-linux-gnu.so
_qhull.cpython-38-x86_64-linux-gnu.so
_tri.cpython-38-x86_64-linux-gnu.so
backends
ft2font.cpython-38-x86_64-linux-gnu.so
ttconv.cpython-38-x86_64-linux-gnu.so

/workspace/matplotlib__matplotlib__3.1/build/lib.linux-x86_64-cpython-38/matplotlib/backends:
_backend_agg.cpython-38-x86_64-linux-gnu.so
_tkagg.cpython-38-x86_64-linux-gnu.so

/workspace/matplotlib__matplotlib__3.1/build/temp.linux-x86_64-cpython-38:
extern
src

/workspace/matplotlib__matplotlib__3.1/build/temp.linux-x86_64-cpython-38/extern:
agg24-svn
libqhull
ttconv

/workspace/matplotlib__matplotlib__3.1/build/temp.linux-x86_64-cpython-38/extern/agg24-svn:
src

/workspace/matplotlib__matplotlib__3.1/build/temp.linux-x86_64-cpython-38/extern/agg24-svn/src:
agg_bezier_arc.o
agg_curves.o
agg_image_filters.o
agg_trans_affine.o
agg_vcgen_contour.o
agg_vcgen_dash.o
agg_vcgen_stroke.o
agg_vpgen_segmentator.o

/workspace/matplotlib__matplotlib__3.1/build/temp.linux-x86_64-cpython-38/extern/libqhull:
geom.o
geom2.o
global.o
io.o
libqhull.o
mem.o
merge.o
poly.o
poly2.o
qset.o
random.o
rboxlib.o
stat.o
user.o
usermem.o
userprintf.o
userprintf_rbox.o

/workspace/matplotlib__matplotlib__3.1/build/temp.linux-x86_64-cpython-38/extern/ttconv:
pprdrv_tt.o
pprdrv_tt2.o
ttutil.o

/workspace/matplotlib__matplotlib__3.1/build/temp.linux-x86_64-cpython-38/src:
_backend_agg.o
_backend_agg_wrapper.o
_contour.o
_contour_wrapper.o
_image.o
_image_wrapper.o
_path_wrapper.o
_png.o
_tkagg.o
_ttconv.o
checkdep_freetype2.o
checkdep_libpng.o
ft2font.o
ft2font_wrapper.o
mplutils.o
py_converters.o
qhull_wrap.o
tri

/workspace/matplotlib__matplotlib__3.1/build/temp.linux-x86_64-cpython-38/src/tri:
_tri.o
_tri_wrapper.o

/workspace/matplotlib__matplotlib__3.1/ci:
codecov.yml
silence

/workspace/matplotlib__matplotlib__3.1/doc:
Makefile
README.txt
_static
_templates
api
citing.rst
conf.py
contents.rst
devel
docutils.conf
faq
glossary
index.rst
make.bat
matplotlibrc
resources
sphinxext
thirdpartypackages
users

/workspace/matplotlib__matplotlib__3.1/doc/_static:
John-hunter-crop-2.jpg
adjustText.png
anatomy.png
animatplot.png
basemap_contour1.png
boxplot_explanation.png
brokenaxes.png
cartopy_hurricane_katrina_01_00.png
cm_fontset.png
constrained_layout
contents.png
demo_axes_grid.png
demo_mplot3d.png
eeg_large.png
eeg_small.png
favicon.ico
ggplot.png
holoviews.png
icon.png
logo2.png
logo2.svg
logo_sidebar.png
logo_sidebar_horiz.png
markers
matplotlib_iterm2_demo.png
mpl-scatter-density.png
mpl.css
mpl_template_example.png
navigation.png
numfocus_badge.png
numpngw_animated_example.png
pgf_fonts.pdf
pgf_fonts.png
pgf_preamble.pdf
pgf_preamble.png
pgf_texsystem.pdf
pgf_texsystem.png
plotnine.png
probscale_demo.png
ridge_map_white_mountains.png
seaborn.png
stinkbug.png
stix_fontset.png
stixsans_fontset.png
toolbar.png
transforms.png
wcsaxes.jpg
webagg_screenshot.png
yellowbrick.png

/workspace/matplotlib__matplotlib__3.1/doc/_static/constrained_layout:
CL00.png
CL01.png
CL02.png

/workspace/matplotlib__matplotlib__3.1/doc/_static/markers:
m00.png
m01.png
m02.png
m03.png
m04.png
m05.png
m06.png
m07.png
m08.png
m09.png
m10.png
m11.png
m12.png
m13.png
m14.png
m15.png
m16.png
m17.png
m18.png
m19.png
m20.png
m21.png
m22.png
m23.png
m24.png
m25.png
m26.png
m27.png
m28.png
m29.png
m30.png
m31.png
m32.png
m33.png
m34.png
m35.png
m36.png
m37.png

/workspace/matplotlib__matplotlib__3.1/doc/_templates:
autofunctions.rst
automodule.rst
autosummary.rst
donate_sidebar.html
function.rst
layout.html
pagesource.html
search.html
sidebar_announcement.html

/workspace/matplotlib__matplotlib__3.1/doc/api:
afm_api.rst
animation_api.rst
api_changes.rst
api_changes_old.rst
artist_api.rst
axes_api.rst
axis_api.rst
backend_agg_api.rst
backend_bases_api.rst
backend_cairo_api.rst
backend_gtk3agg_api.rst
backend_gtk3cairo_api.rst
backend_managers_api.rst
backend_mixed_api.rst
backend_nbagg_api.rst
backend_pdf_api.rst
backend_pgf_api.rst
backend_ps_api.rst
backend_qt4agg_api.rst
backend_qt4cairo_api.rst
backend_qt5agg_api.rst
backend_qt5cairo_api.rst
backend_svg_api.rst
backend_tkagg_api.rst
backend_tools_api.rst
backend_webagg_api.rst
backend_wxagg_api.rst
blocking_input_api.rst
category_api.rst
cbook_api.rst
cm_api.rst
collections_api.rst
colorbar_api.rst
colors_api.rst
container_api.rst
contour_api.rst
dates_api.rst
dviread.rst
figure_api.rst
font_manager_api.rst
fontconfig_pattern_api.rst
gridspec_api.rst
image_api.rst
index.rst
index_backend_api.rst
legend_api.rst
legend_handler_api.rst
lines_api.rst
markers_api.rst
mathtext_api.rst
matplotlib_configuration_api.rst
mlab_api.rst
next_api_changes
offsetbox_api.rst
patches_api.rst
path_api.rst
patheffects_api.rst
prev_api_changes
projections_api.rst
pyplot_summary.rst
rcsetup_api.rst
sankey_api.rst
scale_api.rst
spines_api.rst
style_api.rst
table_api.rst
testing_api.rst
text_api.rst
textpath_api.rst
ticker_api.rst
tight_layout_api.rst
toolkits
transformations.rst
tri_api.rst
type1font.rst
units_api.rst
widgets_api.rst

/workspace/matplotlib__matplotlib__3.1/doc/api/next_api_changes:
README.rst

/workspace/matplotlib__matplotlib__3.1/doc/api/prev_api_changes:
api_changes_0.40.rst
api_changes_0.42.rst
api_changes_0.50.rst
api_changes_0.54.3.rst
api_changes_0.54.rst
api_changes_0.60.rst
api_changes_0.61.rst
api_changes_0.63.rst
api_changes_0.65.1.rst
api_changes_0.65.rst
api_changes_0.70.rst
api_changes_0.71.rst
api_changes_0.72.rst
api_changes_0.73.rst
api_changes_0.80.rst
api_changes_0.81.rst
api_changes_0.82.rst
api_changes_0.83.rst
api_changes_0.84.rst
api_changes_0.85.rst
api_changes_0.86.rst
api_changes_0.87.7.rst
api_changes_0.90.0.rst
api_changes_0.90.1.rst
api_changes_0.91.0.rst
api_changes_0.91.2.rst
api_changes_0.98.0.rst
api_changes_0.98.1.rst
api_changes_0.98.x.rst
api_changes_0.99.rst
api_changes_0.99.x.rst
api_changes_1.1.x.rst
api_changes_1.2.x.rst
api_changes_1.3.x.rst
api_changes_1.4.x.rst
api_changes_1.5.0.rst
api_changes_1.5.2.rst
api_changes_1.5.3.rst
api_changes_2.0.0.rst
api_changes_2.0.1.rst
api_changes_2.1.0.rst
api_changes_2.1.1.rst
api_changes_2.1.2.rst
api_changes_2.2.0.rst
api_changes_3.0.0.rst
api_changes_3.0.1.rst
api_changes_3.1.0.rst

/workspace/matplotlib__matplotlib__3.1/doc/api/toolkits:
axes_grid.rst
axes_grid1.rst
axisartist.rst
index.rst
mplot3d
mplot3d.rst

/workspace/matplotlib__matplotlib__3.1/doc/api/toolkits/mplot3d:
faq.rst
index.rst

/workspace/matplotlib__matplotlib__3.1/doc/devel:
MEP
README.txt
add_new_projection.rst
coding_guide.rst
color_changes.rst
contributing.rst
documenting_mpl.rst
gitwash
index.rst
license.rst
min_dep_policy.rst
plot_directive.rst
release_guide.rst
testing.rst

/workspace/matplotlib__matplotlib__3.1/doc/devel/MEP:
MEP08.rst
MEP09.rst
MEP10.rst
MEP11.rst
MEP12.rst
MEP13.rst
MEP14.rst
MEP15.rst
MEP19.rst
MEP21.rst
MEP22.rst
MEP23.rst
MEP24.rst
MEP25.rst
MEP26.rst
MEP27.rst
MEP28.rst
MEP29.rst
README.rst
index.rst
template.rst

/workspace/matplotlib__matplotlib__3.1/doc/devel/gitwash:
branch_dropdown.png
configure_git.rst
development_workflow.rst
dot2_dot3.rst
following_latest.rst
forking_button.png
forking_hell.rst
git_development.rst
git_install.rst
git_intro.rst
git_links.inc
git_resources.rst
index.rst
known_projects.inc
links.inc
maintainer_workflow.rst
patching.rst
pull_button.png
set_up_fork.rst
this_project.inc

/workspace/matplotlib__matplotlib__3.1/doc/faq:
environment_variables_faq.rst
howto_faq.rst
index.rst
installing_faq.rst
troubleshooting_faq.rst
virtualenv_faq.rst

/workspace/matplotlib__matplotlib__3.1/doc/glossary:
index.rst

/workspace/matplotlib__matplotlib__3.1/doc/resources:
index.rst

/workspace/matplotlib__matplotlib__3.1/doc/sphinxext:
__init__.py
custom_roles.py
gallery_order.py
github.py
math_symbol_table.py
mock_gui_toolkits.py
skip_deprecated.py

/workspace/matplotlib__matplotlib__3.1/doc/thirdpartypackages:
index.rst

/workspace/matplotlib__matplotlib__3.1/doc/users:
credits.rst
dflt_style_changes.rst
event_handling.rst
generate_credits.py
github_stats.rst
history.rst
index.rst
installing.rst
interactive.rst
license.rst
navigation_toolbar.rst
next_whats_new
prev_whats_new
shell.rst
whats_new.rst
whats_new_old.rst

/workspace/matplotlib__matplotlib__3.1/doc/users/next_whats_new:
README.rst

/workspace/matplotlib__matplotlib__3.1/doc/users/prev_whats_new:
changelog.rst
github_stats_3.0.2.rst
whats_new_0.98.4.rst
whats_new_0.99.rst
whats_new_1.0.rst
whats_new_1.1.rst
whats_new_1.2.2.rst
whats_new_1.2.rst
whats_new_1.3.rst
whats_new_1.4.rst
whats_new_1.5.rst
whats_new_2.0.0.rst
whats_new_2.1.0.rst
whats_new_2.2.rst
whats_new_3.0.rst
whats_new_3.1.0.rst

/workspace/matplotlib__matplotlib__3.1/examples:
README
README.txt
animation
axes_grid1
axisartist
color
event_handling
frontpage
images_contours_and_fields
lines_bars_and_markers
misc
mplot3d
pie_and_polar_charts
pyplots
recipes
scales
shapes_and_collections
showcase
specialty_plots
statistics
style_sheets
subplots_axes_and_figures
tests
text_labels_and_annotations
ticks_and_spines
units
user_interfaces
userdemo
widgets

/workspace/matplotlib__matplotlib__3.1/examples/animation:
README.txt
animate_decay.py
animated_histogram.py
animation_demo.py
bayes_update.py
double_pendulum_sgskip.py
dynamic_image.py
frame_grabbing_sgskip.py
rain.py
random_walk.py
simple_anim.py
strip_chart.py
unchained.py

/workspace/matplotlib__matplotlib__3.1/examples/axes_grid1:
README.txt
demo_anchored_direction_arrows.py
demo_axes_divider.py
demo_axes_grid.py
demo_axes_grid2.py
demo_axes_hbox_divider.py
demo_axes_rgb.py
demo_colorbar_of_inset_axes.py
demo_colorbar_with_axes_divider.py
demo_colorbar_with_inset_locator.py
demo_edge_colorbar.py
demo_fixed_size_axes.py
demo_imagegrid_aspect.py
inset_locator_demo.py
inset_locator_demo2.py
make_room_for_ylabel_using_axesgrid.py
parasite_simple.py
parasite_simple2.py
scatter_hist_locatable_axes.py
simple_anchored_artists.py
simple_axes_divider1.py
simple_axes_divider2.py
simple_axes_divider3.py
simple_axesgrid.py
simple_axesgrid2.py
simple_axisline4.py
simple_colorbar.py
simple_rgb.py

/workspace/matplotlib__matplotlib__3.1/examples/axisartist:
README.txt
axis_direction_demo_step01.py
axis_direction_demo_step02.py
axis_direction_demo_step03.py
axis_direction_demo_step04.py
demo_axis_direction.py
demo_axisline_style.py
demo_curvelinear_grid.py
demo_curvelinear_grid2.py
demo_floating_axes.py
demo_floating_axis.py
demo_parasite_axes.py
demo_parasite_axes2.py
demo_ticklabel_alignment.py
demo_ticklabel_direction.py
simple_axis_direction01.py
simple_axis_direction03.py
simple_axis_pad.py
simple_axisartist1.py
simple_axisline.py
simple_axisline2.py
simple_axisline3.py

/workspace/matplotlib__matplotlib__3.1/examples/color:
README.txt
color_by_yvalue.py
color_cycle_default.py
color_cycler.py
color_demo.py
colorbar_basics.py
colormap_reference.py
custom_cmap.py
named_colors.py

/workspace/matplotlib__matplotlib__3.1/examples/event_handling:
README.txt
close_event.py
coords_demo.py
data_browser.py
figure_axes_enter_leave.py
ginput_manual_clabel_sgskip.py
image_slices_viewer.py
keypress_demo.py
lasso_demo.py
legend_picking.py
looking_glass.py
path_editor.py
pick_event_demo.py
pick_event_demo2.py
pipong.py
poly_editor.py
pong_sgskip.py
resample.py
timers.py
trifinder_event_demo.py
viewlims.py
zoom_window.py

/workspace/matplotlib__matplotlib__3.1/examples/frontpage:
3D.py
README.txt
contour.py
histogram.py
membrane.py

/workspace/matplotlib__matplotlib__3.1/examples/images_contours_and_fields:
README.txt
affine_image.py
barb_demo.py
barcode_demo.py
contour_corner_mask.py
contour_demo.py
contour_image.py
contour_label_demo.py
contourf_demo.py
contourf_hatching.py
contourf_log.py
demo_bboximage.py
figimage_demo.py
image_annotated_heatmap.py
image_clip_path.py
image_demo.py
image_masked.py
image_nonuniform.py
image_transparency_blend.py
image_zcoord.py
interpolation_methods.py
irregulardatagrid.py
layer_images.py
matshow.py
multi_image.py
pcolor_demo.py
pcolormesh_levels.py
plot_streamplot.py
quadmesh_demo.py
quiver_demo.py
quiver_simple_demo.py
shading_example.py
specgram_demo.py
spy_demos.py
tricontour_demo.py
tricontour_smooth_delaunay.py
tricontour_smooth_user.py
trigradient_demo.py
triinterp_demo.py
tripcolor_demo.py
triplot_demo.py
watermark_image.py

/workspace/matplotlib__matplotlib__3.1/examples/lines_bars_and_markers:
README.txt
bar_stacked.py
barchart.py
barh.py
broken_barh.py
categorical_variables.py
cohere.py
csd_demo.py
errorbar_limits_simple.py
errorbar_subsample.py
eventcollection_demo.py
eventplot_demo.py
fill.py
fill_between_demo.py
fill_betweenx_demo.py
filled_step.py
gradient_bar.py
horizontal_barchart_distribution.py
joinstyle.py
line_demo_dash_control.py
linestyles.py
marker_fillstyle_reference.py
marker_reference.py
markevery_demo.py
markevery_prop_cycle.py
masked_demo.py
multicolored_line.py
nan_test.py
psd_demo.py
scatter_custom_symbol.py
scatter_demo2.py
scatter_hist.py
scatter_masked.py
scatter_piecharts.py
scatter_star_poly.py
scatter_symbol.py
scatter_with_legend.py
simple_plot.py
span_regions.py
spectrum_demo.py
stackplot_demo.py
stem_plot.py
step_demo.py
timeline.py
vline_hline_demo.py
xcorr_acorr_demo.py

/workspace/matplotlib__matplotlib__3.1/examples/misc:
README.txt
agg_buffer.py
agg_buffer_to_array.py
anchored_artists.py
bbox_intersect.py
contour_manual.py
coords_report.py
cursor_demo_sgskip.py
custom_projection.py
customize_rc.py
demo_agg_filter.py
demo_ribbon_box.py
fill_spiral.py
findobj_demo.py
font_indexing.py
ftface_props.py
histogram_path.py
hyperlinks_sgskip.py
image_thumbnail_sgskip.py
keyword_plotting.py
load_converter.py
logos2.py
multipage_pdf.py
multiprocess_sgskip.py
patheffect_demo.py
plotfile_demo.py
print_stdout_sgskip.py
pythonic_matplotlib.py
rasterization_demo.py
set_and_get.py
svg_filter_line.py
svg_filter_pie.py
table_demo.py
transoffset.py
zorder_demo.py

/workspace/matplotlib__matplotlib__3.1/examples/mplot3d:
2dcollections3d.py
3d_bars.py
README.txt
bars3d.py
contour3d.py
contour3d_2.py
contour3d_3.py
contourf3d.py
contourf3d_2.py
custom_shaded_3d_surface.py
hist3d.py
lines3d.py
lorenz_attractor.py
mixed_subplots.py
offset.py
pathpatch3d.py
polys3d.py
quiver3d.py
rotate_axes3d_sgskip.py
scatter3d.py
subplot3d.py
surface3d.py
surface3d_2.py
surface3d_3.py
surface3d_radial.py
text3d.py
tricontour3d.py
tricontourf3d.py
trisurf3d.py
trisurf3d_2.py
voxels.py
voxels_numpy_logo.py
voxels_rgb.py
voxels_torus.py
wire3d.py
wire3d_animation_sgskip.py
wire3d_zero_stride.py

/workspace/matplotlib__matplotlib__3.1/examples/pie_and_polar_charts:
README.txt
bar_of_pie.py
nested_pie.py
pie_and_donut_labels.py
pie_demo2.py
pie_features.py
polar_bar.py
polar_demo.py
polar_legend.py
polar_scatter.py

/workspace/matplotlib__matplotlib__3.1/examples/pyplots:
README.txt
align_ylabels.py
annotate_transform.py
annotation_basic.py
annotation_polar.py
auto_subplots_adjust.py
boxplot_demo_pyplot.py
dollar_ticks.py
fig_axes_customize_simple.py
fig_axes_labels_simple.py
fig_x.py
matplotlibrc
pyplot_formatstr.py
pyplot_mathtext.py
pyplot_scales.py
pyplot_simple.py
pyplot_text.py
pyplot_three.py
pyplot_two_subplots.py
text_commands.py
text_layout.py
whats_new_1_subplot3d.py
whats_new_98_4_fancy.py
whats_new_98_4_fill_between.py
whats_new_98_4_legend.py
whats_new_99_axes_grid.py
whats_new_99_mplot3d.py
whats_new_99_spines.py

/workspace/matplotlib__matplotlib__3.1/examples/recipes:
README.txt
common_date_problems.py
create_subplots.py
fill_between_alpha.py
placing_text_boxes.py
share_axis_lims_views.py

/workspace/matplotlib__matplotlib__3.1/examples/scales:
README.txt
aspect_loglog.py
custom_scale.py
log_bar.py
log_demo.py
log_test.py
power_norm.py
scales.py
symlog_demo.py

/workspace/matplotlib__matplotlib__3.1/examples/shapes_and_collections:
README.txt
arrow_guide.py
artist_reference.py
collections.py
compound_path.py
dolphin.py
donut.py
ellipse_collection.py
ellipse_demo.py
fancybox_demo.py
hatch_demo.py
line_collection.py
marker_path.py
patch_collection.py
path_patch.py
quad_bezier.py
scatter.py

/workspace/matplotlib__matplotlib__3.1/examples/showcase:
README.txt
anatomy.py
bachelors_degrees_by_gender.py
firefox.py
integral.py
mandelbrot.py
xkcd.py

/workspace/matplotlib__matplotlib__3.1/examples/specialty_plots:
README.txt
advanced_hillshading.py
anscombe.py
hinton_demo.py
leftventricle_bulleye.py
mri_demo.py
mri_with_eeg.py
radar_chart.py
sankey_basics.py
sankey_links.py
sankey_rankine.py
skewt.py
topographic_hillshading.py

/workspace/matplotlib__matplotlib__3.1/examples/statistics:
README.txt
barchart_demo.py
boxplot.py
boxplot_color.py
boxplot_demo.py
boxplot_vs_violin.py
bxp.py
confidence_ellipse.py
customized_violin.py
errorbar.py
errorbar_features.py
errorbar_limits.py
errorbars_and_boxes.py
hexbin_demo.py
hist.py
histogram_cumulative.py
histogram_features.py
histogram_histtypes.py
histogram_multihist.py
multiple_histograms_side_by_side.py
violinplot.py

/workspace/matplotlib__matplotlib__3.1/examples/style_sheets:
README.txt
bmh.py
dark_background.py
fivethirtyeight.py
ggplot.py
grayscale.py
plot_solarizedlight2.py
style_sheets_reference.py

/workspace/matplotlib__matplotlib__3.1/examples/subplots_axes_and_figures:
README.txt
align_labels_demo.py
axes_demo.py
axes_margins.py
axes_props.py
axes_zoom_effect.py
axhspan_demo.py
axis_equal_demo.py
broken_axis.py
colorbar_placement.py
custom_figure_class.py
demo_constrained_layout.py
demo_tight_layout.py
fahrenheit_celsius_scales.py
figure_title.py
ganged_plots.py
geo_demo.py
gridspec_and_subplots.py
gridspec_multicolumn.py
gridspec_nested.py
invert_axes.py
multiple_figs_demo.py
secondary_axis.py
shared_axis_demo.py
subplot.py
subplot_demo.py
subplot_toolbar.py
subplots_adjust.py
subplots_demo.py
two_scales.py
zoom_inset_axes.py

/workspace/matplotlib__matplotlib__3.1/examples/tests:
backend_driver_sgskip.py

/workspace/matplotlib__matplotlib__3.1/examples/text_labels_and_annotations:
README.txt
accented_text.py
annotation_demo.py
arrow_demo.py
arrow_simple_demo.py
autowrap.py
custom_legends.py
dashpointlabel.py
date.py
date_index_formatter.py
demo_annotation_box.py
demo_text_path.py
demo_text_rotation_mode.py
dfrac_demo.py
engineering_formatter.py
fancyarrow_demo.py
fancytextbox_demo.py
figlegend_demo.py
font_family_rc_sgskip.py
font_file.py
font_table.py
fonts_demo.py
fonts_demo_kw.py
legend.py
legend_demo.py
line_with_text.py
mathtext_asarray.py
mathtext_demo.py
mathtext_examples.py
multiline.py
rainbow_text.py
stix_fonts_demo.py
tex_demo.py
text_alignment.py
text_fontdict.py
text_rotation.py
text_rotation_relative_to_line.py
titles_demo.py
unicode_minus.py
usetex_baseline_test.py
usetex_demo.py
usetex_fonteffects.py
watermark_text.py

/workspace/matplotlib__matplotlib__3.1/examples/ticks_and_spines:
README.txt
auto_ticks.py
centered_ticklabels.py
colorbar_tick_labelling_demo.py
custom_ticker1.py
date_concise_formatter.py
date_demo_convert.py
date_demo_rrule.py
date_index_formatter2.py
major_minor_demo.py
multiple_yaxis_with_spines.py
scalarformatter.py
spine_placement_demo.py
spines.py
spines_bounds.py
spines_dropped.py
tick-formatters.py
tick-locators.py
tick_label_right.py
tick_labels_from_values.py
tick_xlabel_top.py
ticklabels_rotation.py

/workspace/matplotlib__matplotlib__3.1/examples/units:
README.txt
annotate_with_units.py
artist_tests.py
bar_demo2.py
bar_unit_demo.py
basic_units.py
ellipse_with_units.py
evans_test.py
radian_demo.py
units_sample.py
units_scatter.py

/workspace/matplotlib__matplotlib__3.1/examples/user_interfaces:
README.txt
README.wx
canvasagg.py
embedding_in_gtk3_panzoom_sgskip.py
embedding_in_gtk3_sgskip.py
embedding_in_qt_sgskip.py
embedding_in_tk_sgskip.py
embedding_in_wx2_sgskip.py
embedding_in_wx3_sgskip.py
embedding_in_wx4_sgskip.py
embedding_in_wx5_sgskip.py
embedding_webagg_sgskip.py
fourier_demo_wx_sgskip.py
gtk_spreadsheet_sgskip.py
mathtext_wx_sgskip.py
mpl_with_glade3.glade
mpl_with_glade3_sgskip.py
pylab_with_gtk_sgskip.py
svg_histogram_sgskip.py
svg_tooltip_sgskip.py
toolmanager_sgskip.py
wxcursor_demo_sgskip.py

/workspace/matplotlib__matplotlib__3.1/examples/userdemo:
README.txt
anchored_box01.py
anchored_box02.py
anchored_box03.py
anchored_box04.py
annotate_explain.py
annotate_simple01.py
annotate_simple02.py
annotate_simple03.py
annotate_simple04.py
annotate_simple_coord01.py
annotate_simple_coord02.py
annotate_simple_coord03.py
annotate_text_arrow.py
colormap_normalizations.py
colormap_normalizations_bounds.py
colormap_normalizations_custom.py
colormap_normalizations_diverging.py
colormap_normalizations_lognorm.py
colormap_normalizations_power.py
colormap_normalizations_symlognorm.py
connect_simple01.py
connectionstyle_demo.py
custom_boxstyle01.py
custom_boxstyle02.py
demo_gridspec01.py
demo_gridspec03.py
demo_gridspec06.py
pgf_fonts.py
pgf_preamble_sgskip.py
pgf_texsystem.py
simple_annotate01.py
simple_legend01.py
simple_legend02.py

/workspace/matplotlib__matplotlib__3.1/examples/widgets:
README.txt
buttons.py
check_buttons.py
cursor.py
lasso_selector_demo_sgskip.py
menu.py
multicursor.py
polygon_selector_demo.py
radio_buttons.py
rectangle_selector.py
slider_demo.py
span_selector.py
textbox.py

/workspace/matplotlib__matplotlib__3.1/extern:
agg24-svn
libqhull
ttconv

/workspace/matplotlib__matplotlib__3.1/extern/agg24-svn:
include
src

/workspace/matplotlib__matplotlib__3.1/extern/agg24-svn/include:
agg_alpha_mask_u8.h
agg_arc.h
agg_array.h
agg_arrowhead.h
agg_basics.h
agg_bezier_arc.h
agg_bitset_iterator.h
agg_blur.h
agg_bounding_rect.h
agg_bspline.h
agg_clip_liang_barsky.h
agg_color_gray.h
agg_color_rgba.h
agg_config.h
agg_conv_adaptor_vcgen.h
agg_conv_adaptor_vpgen.h
agg_conv_bspline.h
agg_conv_clip_polygon.h
agg_conv_clip_polyline.h
agg_conv_close_polygon.h
agg_conv_concat.h
agg_conv_contour.h
agg_conv_curve.h
agg_conv_dash.h
agg_conv_gpc.h
agg_conv_marker.h
agg_conv_marker_adaptor.h
agg_conv_segmentator.h
agg_conv_shorten_path.h
agg_conv_smooth_poly1.h
agg_conv_stroke.h
agg_conv_transform.h
agg_conv_unclose_polygon.h
agg_curves.h
agg_dda_line.h
agg_ellipse.h
agg_ellipse_bresenham.h
agg_embedded_raster_fonts.h
agg_font_cache_manager.h
agg_font_cache_manager2.h
agg_gamma_functions.h
agg_gamma_lut.h
agg_glyph_raster_bin.h
agg_gradient_lut.h
agg_gsv_text.h
agg_image_accessors.h
agg_image_filters.h
agg_line_aa_basics.h
agg_math.h
agg_math_stroke.h
agg_path_length.h
agg_path_storage.h
agg_path_storage_integer.h
agg_pattern_filters_rgba.h
agg_pixfmt_amask_adaptor.h
agg_pixfmt_base.h
agg_pixfmt_gray.h
agg_pixfmt_rgb.h
agg_pixfmt_rgb_packed.h
agg_pixfmt_rgba.h
agg_pixfmt_transposer.h
agg_rasterizer_cells_aa.h
agg_rasterizer_compound_aa.h
agg_rasterizer_outline.h
agg_rasterizer_outline_aa.h
agg_rasterizer_scanline_aa.h
agg_rasterizer_scanline_aa_nogamma.h
agg_rasterizer_sl_clip.h
agg_renderer_base.h
agg_renderer_markers.h
agg_renderer_mclip.h
agg_renderer_outline_aa.h
agg_renderer_outline_image.h
agg_renderer_primitives.h
agg_renderer_raster_text.h
agg_renderer_scanline.h
agg_rendering_buffer.h
agg_rendering_buffer_dynarow.h
agg_rounded_rect.h
agg_scanline_bin.h
agg_scanline_boolean_algebra.h
agg_scanline_p.h
agg_scanline_storage_aa.h
agg_scanline_storage_bin.h
agg_scanline_u.h
agg_shorten_path.h
agg_simul_eq.h
agg_span_allocator.h
agg_span_converter.h
agg_span_gouraud.h
agg_span_gouraud_gray.h
agg_span_gouraud_rgba.h
agg_span_gradient.h
agg_span_gradient_alpha.h
agg_span_gradient_contour.h
agg_span_gradient_image.h
agg_span_image_filter.h
agg_span_image_filter_gray.h
agg_span_image_filter_rgb.h
agg_span_image_filter_rgba.h
agg_span_interpolator_adaptor.h
agg_span_interpolator_linear.h
agg_span_interpolator_persp.h
agg_span_interpolator_trans.h
agg_span_pattern_gray.h
agg_span_pattern_rgb.h
agg_span_pattern_rgba.h
agg_span_solid.h
agg_span_subdiv_adaptor.h
agg_trans_affine.h
agg_trans_bilinear.h
agg_trans_double_path.h
agg_trans_perspective.h
agg_trans_single_path.h
agg_trans_viewport.h
agg_trans_warp_magnifier.h
agg_vcgen_bspline.h
agg_vcgen_contour.h
agg_vcgen_dash.h
agg_vcgen_markers_term.h
agg_vcgen_smooth_poly1.h
agg_vcgen_stroke.h
agg_vcgen_vertex_sequence.h
agg_vertex_sequence.h
agg_vpgen_clip_polygon.h
agg_vpgen_clip_polyline.h
agg_vpgen_segmentator.h
ctrl
platform
util

/workspace/matplotlib__matplotlib__3.1/extern/agg24-svn/include/ctrl:
agg_bezier_ctrl.h
agg_cbox_ctrl.h
agg_ctrl.h
agg_gamma_ctrl.h
agg_gamma_spline.h
agg_polygon_ctrl.h
agg_rbox_ctrl.h
agg_scale_ctrl.h
agg_slider_ctrl.h
agg_spline_ctrl.h

/workspace/matplotlib__matplotlib__3.1/extern/agg24-svn/include/platform:
agg_platform_support.h
mac
win32

/workspace/matplotlib__matplotlib__3.1/extern/agg24-svn/include/platform/mac:
agg_mac_pmap.h

/workspace/matplotlib__matplotlib__3.1/extern/agg24-svn/include/platform/win32:
agg_win32_bmp.h

/workspace/matplotlib__matplotlib__3.1/extern/agg24-svn/include/util:
agg_color_conv.h
agg_color_conv_rgb16.h
agg_color_conv_rgb8.h

/workspace/matplotlib__matplotlib__3.1/extern/agg24-svn/src:
ChangeLog
agg_arc.cpp
agg_arrowhead.cpp
agg_bezier_arc.cpp
agg_bspline.cpp
agg_color_rgba.cpp
agg_curves.cpp
agg_embedded_raster_fonts.cpp
agg_gsv_text.cpp
agg_image_filters.cpp
agg_line_aa_basics.cpp
agg_line_profile_aa.cpp
agg_rounded_rect.cpp
agg_sqrt_tables.cpp
agg_trans_affine.cpp
agg_trans_double_path.cpp
agg_trans_single_path.cpp
agg_trans_warp_magnifier.cpp
agg_vcgen_bspline.cpp
agg_vcgen_contour.cpp
agg_vcgen_dash.cpp
agg_vcgen_markers_term.cpp
agg_vcgen_smooth_poly1.cpp
agg_vcgen_stroke.cpp
agg_vpgen_clip_polygon.cpp
agg_vpgen_clip_polyline.cpp
agg_vpgen_segmentator.cpp
authors
copying
ctrl
platform

/workspace/matplotlib__matplotlib__3.1/extern/agg24-svn/src/ctrl:
agg_bezier_ctrl.cpp
agg_cbox_ctrl.cpp
agg_gamma_ctrl.cpp
agg_gamma_spline.cpp
agg_polygon_ctrl.cpp
agg_rbox_ctrl.cpp
agg_scale_ctrl.cpp
agg_slider_ctrl.cpp
agg_spline_ctrl.cpp

/workspace/matplotlib__matplotlib__3.1/extern/agg24-svn/src/platform:
AmigaOS
BeOS
X11
mac
sdl
win32

/workspace/matplotlib__matplotlib__3.1/extern/agg24-svn/src/platform/AmigaOS:
agg_platform_support.cpp

/workspace/matplotlib__matplotlib__3.1/extern/agg24-svn/src/platform/BeOS:
agg_platform_support.cpp

/workspace/matplotlib__matplotlib__3.1/extern/agg24-svn/src/platform/X11:
agg_platform_support.cpp

/workspace/matplotlib__matplotlib__3.1/extern/agg24-svn/src/platform/mac:
agg_mac_pmap.cpp
agg_platform_support.cpp

/workspace/matplotlib__matplotlib__3.1/extern/agg24-svn/src/platform/sdl:
agg_platform_support.cpp

/workspace/matplotlib__matplotlib__3.1/extern/agg24-svn/src/platform/win32:
agg_platform_support.cpp
agg_win32_bmp.cpp

/workspace/matplotlib__matplotlib__3.1/extern/libqhull:
COPYING.txt
geom.c
geom.h
geom2.c
global.c
io.c
io.h
libqhull.c
libqhull.h
mem.c
mem.h
merge.c
merge.h
poly.c
poly.h
poly2.c
qhull_a.h
qset.c
qset.h
random.c
random.h
rboxlib.c
stat.c
stat.h
user.c
user.h
usermem.c
userprintf.c
userprintf_rbox.c

/workspace/matplotlib__matplotlib__3.1/extern/ttconv:
global_defines.h
pprdrv.h
pprdrv_tt.cpp
pprdrv_tt2.cpp
truetype.h
ttutil.cpp

/workspace/matplotlib__matplotlib__3.1/lib:
matplotlib
matplotlib.egg-info
mpl_toolkits
pylab.py

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib:
__init__.py
_animation_data.py
_cm.py
_cm_listed.py
_color_data.py
_constrained_layout.py
_contour.cpython-38-x86_64-linux-gnu.so
_image.cpython-38-x86_64-linux-gnu.so
_layoutbox.py
_mathtext_data.py
_path.cpython-38-x86_64-linux-gnu.so
_png.cpython-38-x86_64-linux-gnu.so
_pylab_helpers.py
_qhull.cpython-38-x86_64-linux-gnu.so
_tri.cpython-38-x86_64-linux-gnu.so
_version.py
afm.py
animation.py
artist.py
axes
axis.py
backend_bases.py
backend_managers.py
backend_tools.py
backends
bezier.py
blocking_input.py
category.py
cbook
cm.py
collections.py
colorbar.py
colors.py
compat
container.py
contour.py
dates.py
docstring.py
dviread.py
figure.py
font_manager.py
fontconfig_pattern.py
ft2font.cpython-38-x86_64-linux-gnu.so
gridspec.py
hatch.py
image.py
legend.py
legend_handler.py
lines.py
markers.py
mathtext.py
mlab.py
mpl-data
offsetbox.py
patches.py
path.py
patheffects.py
projections
pylab.py
pyplot.py
quiver.py
rcsetup.py
sankey.py
scale.py
sphinxext
spines.py
stackplot.py
streamplot.py
style
table.py
testing
tests
texmanager.py
text.py
textpath.py
ticker.py
tight_bbox.py
tight_layout.py
transforms.py
tri
ttconv.cpython-38-x86_64-linux-gnu.so
type1font.py
units.py
widgets.py

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/axes:
__init__.py
_axes.py
_base.py
_secondary_axes.py
_subplots.py

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/backends:
__init__.py
_backend_agg.cpython-38-x86_64-linux-gnu.so
_backend_pdf_ps.py
_backend_tk.py
_tkagg.cpython-38-x86_64-linux-gnu.so
backend_agg.py
backend_cairo.py
backend_gtk3.py
backend_gtk3agg.py
backend_gtk3cairo.py
backend_macosx.py
backend_mixed.py
backend_nbagg.py
backend_pdf.py
backend_pgf.py
backend_ps.py
backend_qt4.py
backend_qt4agg.py
backend_qt4cairo.py
backend_qt5.py
backend_qt5agg.py
backend_qt5cairo.py
backend_svg.py
backend_template.py
backend_tkagg.py
backend_tkcairo.py
backend_webagg.py
backend_webagg_core.py
backend_wx.py
backend_wxagg.py
backend_wxcairo.py
qt_compat.py
qt_editor
tkagg.py
web_backend
windowing.py
wx_compat.py

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/backends/qt_editor:
__init__.py
_formlayout.py
figureoptions.py
formlayout.py
formsubplottool.py

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/backends/web_backend:
all_figures.html
css
ipython_inline_figure.html
jquery
jquery-ui-1.12.1
js
nbagg_uat.ipynb
single_figure.html

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/backends/web_backend/css:
boilerplate.css
fbm.css
page.css

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/backends/web_backend/jquery:
js

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/backends/web_backend/jquery/js:
jquery.js
jquery.min.js

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/backends/web_backend/jquery-ui-1.12.1:
AUTHORS.txt
LICENSE.txt
external
images
index.html
jquery-ui.css
jquery-ui.js
jquery-ui.min.css
jquery-ui.min.js
jquery-ui.structure.css
jquery-ui.structure.min.css
jquery-ui.theme.css
jquery-ui.theme.min.css
package.json

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/backends/web_backend/jquery-ui-1.12.1/external:
jquery

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/backends/web_backend/jquery-ui-1.12.1/external/jquery:
jquery.js

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/backends/web_backend/jquery-ui-1.12.1/images:
ui-icons_444444_256x240.png
ui-icons_555555_256x240.png
ui-icons_777620_256x240.png
ui-icons_777777_256x240.png
ui-icons_cc0000_256x240.png
ui-icons_ffffff_256x240.png

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/backends/web_backend/js:
mpl.js
mpl_tornado.js
nbagg_mpl.js

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/cbook:
__init__.py
deprecation.py

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/compat:
__init__.py
subprocess.py

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/mpl-data:
fonts
images
matplotlibrc
sample_data
stylelib

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/mpl-data/fonts:
afm
pdfcorefonts
ttf

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/mpl-data/fonts/afm:
cmex10.afm
cmmi10.afm
cmr10.afm
cmsy10.afm
cmtt10.afm
pagd8a.afm
pagdo8a.afm
pagk8a.afm
pagko8a.afm
pbkd8a.afm
pbkdi8a.afm
pbkl8a.afm
pbkli8a.afm
pcrb8a.afm
pcrbo8a.afm
pcrr8a.afm
pcrro8a.afm
phvb8a.afm
phvb8an.afm
phvbo8a.afm
phvbo8an.afm
phvl8a.afm
phvlo8a.afm
phvr8a.afm
phvr8an.afm
phvro8a.afm
phvro8an.afm
pncb8a.afm
pncbi8a.afm
pncr8a.afm
pncri8a.afm
pplb8a.afm
pplbi8a.afm
pplr8a.afm
pplri8a.afm
psyr.afm
ptmb8a.afm
ptmbi8a.afm
ptmr8a.afm
ptmri8a.afm
putb8a.afm
putbi8a.afm
putr8a.afm
putri8a.afm
pzcmi8a.afm
pzdr.afm

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/mpl-data/fonts/pdfcorefonts:
Courier-Bold.afm
Courier-BoldOblique.afm
Courier-Oblique.afm
Courier.afm
Helvetica-Bold.afm
Helvetica-BoldOblique.afm
Helvetica-Oblique.afm
Helvetica.afm
Symbol.afm
Times-Bold.afm
Times-BoldItalic.afm
Times-Italic.afm
Times-Roman.afm
ZapfDingbats.afm
readme.txt

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/mpl-data/fonts/ttf:
DejaVuSans-Bold.ttf
DejaVuSans-BoldOblique.ttf
DejaVuSans-Oblique.ttf
DejaVuSans.ttf
DejaVuSansDisplay.ttf
DejaVuSansMono-Bold.ttf
DejaVuSansMono-BoldOblique.ttf
DejaVuSansMono-Oblique.ttf
DejaVuSansMono.ttf
DejaVuSerif-Bold.ttf
DejaVuSerif-BoldItalic.ttf
DejaVuSerif-Italic.ttf
DejaVuSerif.ttf
DejaVuSerifDisplay.ttf
LICENSE_DEJAVU
LICENSE_STIX
STIXGeneral.ttf
STIXGeneralBol.ttf
STIXGeneralBolIta.ttf
STIXGeneralItalic.ttf
STIXNonUni.ttf
STIXNonUniBol.ttf
STIXNonUniBolIta.ttf
STIXNonUniIta.ttf
STIXSizFiveSymReg.ttf
STIXSizFourSymBol.ttf
STIXSizFourSymReg.ttf
STIXSizOneSymBol.ttf
STIXSizOneSymReg.ttf
STIXSizThreeSymBol.ttf
STIXSizThreeSymReg.ttf
STIXSizTwoSymBol.ttf
STIXSizTwoSymReg.ttf
cmb10.ttf
cmex10.ttf
cmmi10.ttf
cmr10.ttf
cmss10.ttf
cmsy10.ttf
cmtt10.ttf

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/mpl-data/images:
back.gif
back.pdf
back.png
back.svg
back_large.gif
back_large.png
filesave.gif
filesave.pdf
filesave.png
filesave.svg
filesave_large.gif
filesave_large.png
forward.gif
forward.pdf
forward.png
forward.svg
forward_large.gif
forward_large.png
hand.gif
hand.pdf
hand.png
hand.svg
hand_large.gif
help.pdf
help.png
help.ppm
help.svg
help_large.png
help_large.ppm
home.gif
home.pdf
home.png
home.svg
home_large.gif
home_large.png
matplotlib.pdf
matplotlib.png
matplotlib.ppm
matplotlib.svg
matplotlib_large.png
move.gif
move.pdf
move.png
move.svg
move_large.gif
move_large.png
qt4_editor_options.pdf
qt4_editor_options.png
qt4_editor_options.svg
qt4_editor_options_large.png
subplots.gif
subplots.pdf
subplots.png
subplots.svg
subplots_large.gif
subplots_large.png
zoom_to_rect.gif
zoom_to_rect.pdf
zoom_to_rect.png
zoom_to_rect.svg
zoom_to_rect_large.gif
zoom_to_rect_large.png

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/mpl-data/sample_data:
Minduka_Present_Blue_Pack.png
None_vs_nearest-pdf.png
README.txt
aapl.npz
ada.png
axes_grid
ct.raw.gz
data_x_x2_x3.csv
demodata.csv
eeg.dat
embedding_in_wx3.xrc
goog.npz
grace_hopper.jpg
grace_hopper.png
jacksboro_fault_dem.npz
logo2.png
membrane.dat
msft.csv
percent_bachelors_degrees_women_usa.csv
s1045.ima.gz
topobathy.npz

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/mpl-data/sample_data/axes_grid:
bivariate_normal.npy

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/mpl-data/stylelib:
Solarize_Light2.mplstyle
_classic_test.mplstyle
bmh.mplstyle
classic.mplstyle
dark_background.mplstyle
fast.mplstyle
fivethirtyeight.mplstyle
ggplot.mplstyle
grayscale.mplstyle
seaborn-bright.mplstyle
seaborn-colorblind.mplstyle
seaborn-dark-palette.mplstyle
seaborn-dark.mplstyle
seaborn-darkgrid.mplstyle
seaborn-deep.mplstyle
seaborn-muted.mplstyle
seaborn-notebook.mplstyle
seaborn-paper.mplstyle
seaborn-pastel.mplstyle
seaborn-poster.mplstyle
seaborn-talk.mplstyle
seaborn-ticks.mplstyle
seaborn-white.mplstyle
seaborn-whitegrid.mplstyle
seaborn.mplstyle
tableau-colorblind10.mplstyle

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/projections:
__init__.py
geo.py
polar.py

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/sphinxext:
__init__.py
mathmpl.py
plot_directive.py
tests

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/sphinxext/tests:
__init__.py
conftest.py
test_tinypages.py
tinypages

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/sphinxext/tests/tinypages:
README.md
_static
conf.py
index.rst
range4.py
range6.py
some_plots.rst

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/sphinxext/tests/tinypages/_static:
README.txt

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/style:
__init__.py
core.py

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/testing:
__init__.py
compare.py
conftest.py
decorators.py
determinism.py
disable_internet.py
exceptions.py
jpl_units

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/testing/jpl_units:
Duration.py
Epoch.py
EpochConverter.py
StrConverter.py
UnitDbl.py
UnitDblConverter.py
UnitDblFormatter.py
__init__.py

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/tests:
README
__init__.py
baseline_images
cmr10.pfb
conftest.py
mpltest.ttf
test_afm.py
test_agg.py
test_agg_filter.py
test_animation.py
test_arrow_patches.py
test_artist.py
test_axes.py
test_backend_bases.py
test_backend_cairo.py
test_backend_nbagg.py
test_backend_pdf.py
test_backend_pgf.py
test_backend_ps.py
test_backend_qt.py
test_backend_svg.py
test_backend_tools.py
test_backends_interactive.py
test_basic.py
test_bbox_tight.py
test_category.py
test_cbook.py
test_collections.py
test_colorbar.py
test_colors.py
test_compare_images.py
test_constrainedlayout.py
test_container.py
test_contour.py
test_cycles.py
test_dates.py
test_dviread.py
test_figure.py
test_font_manager.py
test_gridspec.py
test_image.py
test_legend.py
test_lines.py
test_marker.py
test_mathtext.py
test_matplotlib.py
test_mlab.py
test_nbagg_01.ipynb
test_offsetbox.py
test_patches.py
test_path.py
test_patheffects.py
test_pickle.py
test_png.py
test_preprocess_data.py
test_pyplot.py
test_quiver.py
test_rcparams.py
test_rcparams.rc
test_sankey.py
test_scale.py
test_simplification.py
test_skew.py
test_spines.py
test_streamplot.py
test_style.py
test_subplots.py
test_table.py
test_texmanager.py
test_text.py
test_ticker.py
test_tightlayout.py
test_transforms.py
test_triangulation.py
test_ttconv.py
test_type1font.py
test_units.py
test_usetex.py
test_utf32_be_rcparams.rc
test_widgets.py

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/tests/baseline_images:
dviread
pngsuite
test_agg
test_agg_filter
test_arrow_patches
test_artist
test_axes
test_backend_pdf
test_backend_pgf
test_backend_ps
test_backend_svg
test_bbox_tight
test_collections
test_colorbar
test_colors
test_compare_images
test_constrainedlayout
test_contour
test_cycles
test_dates
test_figure
test_image
test_legend
test_lines
test_mathtext
test_offsetbox
test_patches
test_path
test_patheffects
test_pickle
test_png
test_quiver
test_scale
test_simplification
test_skew
test_spines
test_streamplot
test_subplots
test_table
test_text
test_tightlayout
test_transforms
test_triangulation
test_ttconv
test_units
test_usetex
test_widgets

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/tests/baseline_images/dviread:
test.dvi
test.json
test.map
test.tex

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/tests/baseline_images/pngsuite:
basn0g01.png
basn0g02.png
basn0g04.png
basn0g08.png
basn0g16.png
basn2c08.png
basn2c16.png
basn3p01.png
basn3p02.png
basn3p04.png
basn3p08.png
basn4a08.png
basn4a16.png
basn6a08.png
basn6a16.png

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/tests/baseline_images/test_agg:
agg_filter.png

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/tests/baseline_images/test_agg_filter:
agg_filter_alpha.pdf
agg_filter_alpha.png

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/tests/baseline_images/test_arrow_patches:
arrow_styles.png
boxarrow_test_image.png
connection_styles.png
fancyarrow_dash.png
fancyarrow_dpi_cor_100dpi.png
fancyarrow_dpi_cor_200dpi.png
fancyarrow_test_image.pdf
fancyarrow_test_image.png
fancyarrow_test_image.svg

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/tests/baseline_images/test_artist:
clip_path_clipping.pdf
clip_path_clipping.png
clip_path_clipping.svg
default_edges.png
hatching.pdf
hatching.png
hatching.svg

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/tests/baseline_images/test_axes:
acorr.png
angle_spectrum_freqs.png
angle_spectrum_noise.png
annotate_across_transforms.png
arc_angles.png
arc_ellipse.pdf
arc_ellipse.png
arc_ellipse.svg
arrow_simple.png
auto_numticks.png
auto_numticks_log.png
autoscale_tiny_range.pdf
autoscale_tiny_range.png
autoscale_tiny_range.svg
axhspan_epoch.pdf
axhspan_epoch.png
axhspan_epoch.svg
axisbelow.png
axvspan_epoch.pdf
axvspan_epoch.png
axvspan_epoch.svg
bar_tick_label_multiple.png
bar_tick_label_multiple_old_label_alignment.png
bar_tick_label_single.png
barh_tick_label.png
boxplot.pdf
boxplot.png
boxplot.svg
boxplot_autorange_false_whiskers.png
boxplot_autorange_true_whiskers.png
boxplot_mod_artists_after_plotting.png
boxplot_no_inverted_whisker.png
boxplot_rc_parameters.pdf
boxplot_rc_parameters.png
boxplot_rc_parameters.svg
boxplot_sym.png
boxplot_sym2.png
boxplot_with_CIarray.png
bxp_baseline.png
bxp_custombox.png
bxp_customcap.png
bxp_custommedian.png
bxp_customoutlier.png
bxp_custompatchartist.png
bxp_custompositions.png
bxp_customwhisker.png
bxp_customwidths.png
bxp_horizontal.png
bxp_no_flier_stats.png
bxp_nobox.png
bxp_nocaps.png
bxp_patchartist.png
bxp_precentilewhis.png
bxp_rangewhis.png
bxp_scalarwidth.png
bxp_with_xlabels.png
bxp_with_ylabels.png
bxp_withmean_custompoint.png
bxp_withmean_line.png
bxp_withmean_point.png
bxp_withnotch.png
canonical.pdf
canonical.png
canonical.svg
const_xy.pdf
const_xy.png
const_xy.svg
contour_colorbar.pdf
contour_colorbar.png
contour_colorbar.svg
contour_hatching.pdf
contour_hatching.png
contour_hatching.svg
csd_freqs.png
csd_noise.png
dash_offset.pdf
dash_offset.png
dash_offset.svg
date_timezone_x.png
date_timezone_x_and_y.png
date_timezone_y.png
errorbar_basic.pdf
errorbar_basic.png
errorbar_basic.svg
errorbar_limits.pdf
errorbar_limits.png
errorbar_limits.svg
errorbar_mixed.pdf
errorbar_mixed.png
errorbar_mixed.svg
errorbar_with_prop_cycle.png
errorbar_zorder.pdf
errorbar_zorder.png
errorbar_zorder.svg
eventplot.pdf
eventplot.png
eventplot.svg
fill_between_interpolate.pdf
fill_between_interpolate.png
fill_between_interpolate.svg
fill_between_interpolate_decreasing.pdf
fill_between_interpolate_decreasing.png
fill_between_interpolate_decreasing.svg
fill_units.png
formatter_ticker_001.pdf
formatter_ticker_001.png
formatter_ticker_001.svg
formatter_ticker_002.pdf
formatter_ticker_002.png
formatter_ticker_002.svg
formatter_ticker_003.pdf
formatter_ticker_003.png
formatter_ticker_003.svg
formatter_ticker_004.pdf
formatter_ticker_004.png
formatter_ticker_004.svg
formatter_ticker_005.pdf
formatter_ticker_005.png
formatter_ticker_005.svg
hexbin_empty.png
hexbin_extent.png
hexbin_log.png
hist2d.pdf
hist2d.png
hist2d.svg
hist2d_transpose.pdf
hist2d_transpose.png
hist2d_transpose.svg
hist_bar_empty.png
hist_density.png
hist_log.pdf
hist_log.png
hist_log.svg
hist_offset.pdf
hist_offset.png
hist_offset.svg
hist_stacked.png
hist_stacked_bar.pdf
hist_stacked_bar.png
hist_stacked_bar.svg
hist_stacked_normed.pdf
hist_stacked_normed.png
hist_stacked_normed.svg
hist_stacked_step.pdf
hist_stacked_step.png
hist_stacked_step.svg
hist_stacked_stepfilled.pdf
hist_stacked_stepfilled.png
hist_stacked_stepfilled.svg
hist_stacked_stepfilled_alpha.pdf
hist_stacked_stepfilled_alpha.png
hist_stacked_stepfilled_alpha.svg
hist_stacked_weights.pdf
hist_stacked_weights.png
hist_stacked_weights.svg
hist_step.png
hist_step_bottom.png
hist_step_empty.png
hist_step_filled.png
hist_step_horiz.png
hist_step_log_bottom.png
hist_steplog.pdf
hist_steplog.png
hist_steplog.svg
hlines_basic.png
hlines_masked.png
hlines_with_nan.png
imshow.pdf
imshow.png
imshow.svg
imshow_clip.pdf
imshow_clip.png
imshow_clip.svg
log_scales.pdf
log_scales.png
log_scales.svg
loglog.png
magnitude_spectrum_freqs_dB.png
magnitude_spectrum_freqs_linear.png
magnitude_spectrum_noise_dB.png
magnitude_spectrum_noise_linear.png
marker_edges.pdf
marker_edges.png
marker_edges.svg
marker_styles.png
markevery.pdf
markevery.png
markevery.svg
markevery_line.pdf
markevery_line.png
markevery_line.svg
markevery_linear_scales.pdf
markevery_linear_scales.png
markevery_linear_scales.svg
markevery_linear_scales_zoomed.pdf
markevery_linear_scales_zoomed.png
markevery_linear_scales_zoomed.svg
markevery_log_scales.pdf
markevery_log_scales.png
markevery_log_scales.svg
markevery_polar.pdf
markevery_polar.png
markevery_polar.svg
matshow.png
mixed_collection.pdf
mixed_collection.png
mixed_collection.svg
mollweide_grid.pdf
mollweide_grid.png
mollweide_grid.svg
nonfinite_limits.pdf
nonfinite_limits.png
nonfinite_limits.svg
o_marker_path_snap.png
offset_points.pdf
offset_points.png
offset_points.svg
pcolor_datetime_axis.png
pcolormesh.pdf
pcolormesh.png
pcolormesh.svg
pcolormesh_datetime_axis.png
phase_spectrum_freqs.png
phase_spectrum_noise.png
pie_ccw_true.png
pie_center_radius.png
pie_default.png
pie_frame_grid.png
pie_linewidth_0.png
pie_linewidth_2.png
pie_no_label.png
pie_rotatelabels_true.png
polar_alignment.png
polar_axes.pdf
polar_axes.png
polar_axes.svg
polar_coords.pdf
polar_coords.png
polar_coords.svg
polar_invertedylim.png
polar_invertedylim_rorigin.png
polar_negative_rmin.pdf
polar_negative_rmin.png
polar_negative_rmin.svg
polar_rlabel_position.pdf
polar_rlabel_position.png
polar_rlabel_position.svg
polar_rmin.pdf
polar_rmin.png
polar_rmin.svg
polar_rorigin.pdf
polar_rorigin.png
polar_rorigin.svg
polar_theta_position.pdf
polar_theta_position.png
polar_theta_position.svg
polar_theta_wedge.pdf
polar_theta_wedge.png
polar_theta_wedge.svg
polar_units.pdf
polar_units.png
polar_units.svg
polar_units_2.pdf
polar_units_2.png
polar_units_2.svg
polar_wrap_180.pdf
polar_wrap_180.png
polar_wrap_180.svg
polar_wrap_360.pdf
polar_wrap_360.png
polar_wrap_360.svg
polycollection_joinstyle.pdf
polycollection_joinstyle.png
polycollection_joinstyle.svg
psd_freqs.png
psd_noise.png
rc_grid.png
rc_markerfill.png
rc_spines.png
retain_tick_visibility.png
rgba_markers.pdf
rgba_markers.png
rgba_markers.svg
scatter.pdf
scatter.png
scatter.svg
scatter_2D.png
scatter_marker.png
secondary_xy.png
set_get_ticklabels.png
shaped_data.pdf
shaped_data.png
shaped_data.svg
single_date.png
single_point.pdf
single_point.png
single_point.svg
specgram_angle_freqs.png
specgram_angle_noise.png
specgram_freqs.png
specgram_freqs_linear.png
specgram_magnitude_freqs.png
specgram_magnitude_freqs_linear.png
specgram_magnitude_noise.png
specgram_magnitude_noise_linear.png
specgram_noise.png
specgram_noise_linear.png
specgram_phase_freqs.png
specgram_phase_noise.png
spy.png
stackplot_test_baseline.pdf
stackplot_test_baseline.png
stackplot_test_baseline.svg
stackplot_test_image.pdf
stackplot_test_image.png
stackplot_test_image.svg
stem.png
step_linestyle.pdf
step_linestyle.png
step_linestyle.svg
symlog.pdf
symlog2.pdf
test_alpha.pdf
test_alpha.png
test_alpha.svg
test_eventplot_defaults.png
test_eventplot_problem_kwargs.png
test_loglog_nonpos.png
titletwiny.png
transparent_markers.pdf
transparent_markers.png
transparent_markers.svg
twin_autoscale.png
twin_axis_locators_formatters.pdf
twin_axis_locators_formatters.png
twin_axis_locators_formatters.svg
twin_spines.png
twin_spines_on_top.png
vertex_markers.png
violinplot_horiz_baseline.png
violinplot_horiz_custompoints_10.png
violinplot_horiz_custompoints_200.png
violinplot_horiz_showall.png
violinplot_horiz_showextrema.png
violinplot_horiz_showmeans.png
violinplot_horiz_showmedians.png
violinplot_vert_baseline.png
violinplot_vert_custompoints_10.png
violinplot_vert_custompoints_200.png
violinplot_vert_showall.png
violinplot_vert_showextrema.png
violinplot_vert_showmeans.png
violinplot_vert_showmedians.png
vline_hline_zorder.pdf
vline_hline_zorder.png
vline_hline_zorder.svg
vlines_basic.png
vlines_masked.png
vlines_with_nan.png

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/tests/baseline_images/test_backend_pdf:
grayscale_alpha.pdf
hatching_legend.pdf
pdf_use14corefonts.pdf

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/tests/baseline_images/test_backend_pgf:
pgf_bbox_inches.pdf
pgf_mixedmode.pdf
pgf_pdflatex.pdf
pgf_rcupdate1.pdf
pgf_rcupdate2.pdf
pgf_xelatex.pdf

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/tests/baseline_images/test_backend_ps:
empty.pdf

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/tests/baseline_images/test_backend_svg:
bold_font_output.svg
bold_font_output_with_none_fonttype.svg
fill_black_with_alpha.svg
noscale.pdf
noscale.png
noscale.svg

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/tests/baseline_images/test_bbox_tight:
bbox_inches_tight.pdf
bbox_inches_tight.png
bbox_inches_tight.svg
bbox_inches_tight_clipping.pdf
bbox_inches_tight_clipping.png
bbox_inches_tight_clipping.svg
bbox_inches_tight_raster.pdf
bbox_inches_tight_raster.png
bbox_inches_tight_raster.svg
bbox_inches_tight_suptile_legend.pdf
bbox_inches_tight_suptile_legend.png
bbox_inches_tight_suptile_legend.svg

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/tests/baseline_images/test_collections:
EllipseCollection_test_image.png
EventCollection_plot__add_positions.pdf
EventCollection_plot__add_positions.png
EventCollection_plot__add_positions.svg
EventCollection_plot__append_positions.pdf
EventCollection_plot__append_positions.png
EventCollection_plot__append_positions.svg
EventCollection_plot__default.pdf
EventCollection_plot__default.png
EventCollection_plot__default.svg
EventCollection_plot__extend_positions.pdf
EventCollection_plot__extend_positions.png
EventCollection_plot__extend_positions.svg
EventCollection_plot__set_color.pdf
EventCollection_plot__set_color.png
EventCollection_plot__set_color.svg
EventCollection_plot__set_linelength.pdf
EventCollection_plot__set_linelength.png
EventCollection_plot__set_linelength.svg
EventCollection_plot__set_lineoffset.pdf
EventCollection_plot__set_lineoffset.png
EventCollection_plot__set_lineoffset.svg
EventCollection_plot__set_linestyle.pdf
EventCollection_plot__set_linestyle.png
EventCollection_plot__set_linestyle.svg
EventCollection_plot__set_linewidth.pdf
EventCollection_plot__set_linewidth.png
EventCollection_plot__set_linewidth.svg
EventCollection_plot__set_ls_dash.pdf
EventCollection_plot__set_ls_dash.png
EventCollection_plot__set_ls_dash.svg
EventCollection_plot__set_orientation.pdf
EventCollection_plot__set_orientation.png
EventCollection_plot__set_orientation.svg
EventCollection_plot__set_positions.pdf
EventCollection_plot__set_positions.png
EventCollection_plot__set_positions.svg
EventCollection_plot__switch_orientation.pdf
EventCollection_plot__switch_orientation.png
EventCollection_plot__switch_orientation.svg
EventCollection_plot__switch_orientation__2x.pdf
EventCollection_plot__switch_orientation__2x.png
EventCollection_plot__switch_orientation__2x.svg
cap_and_joinstyle.png
polycollection_close.png
regularpolycollection_rotate.png
regularpolycollection_scale.png
scatter_post_alpha.png
size_in_xy.png

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/tests/baseline_images/test_colorbar:
cbar_locationing.png
cbar_sharing.png
cbar_with_orientation.png
cbar_with_subplots_adjust.png
colorbar_closed_patch.pdf
colorbar_closed_patch.png
colorbar_closed_patch.svg
colorbar_extensions_proportional.png
colorbar_extensions_shape_proportional.png
colorbar_extensions_shape_uniform.png
colorbar_extensions_uniform.png
colorbar_single_scatter.png
double_cbar.png

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/tests/baseline_images/test_colors:
levels_and_colors.png
light_source_shading_topo.png

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/tests/baseline_images/test_compare_images:
all127.png
all128.png
basn3p02-1px-offset.png
basn3p02-half-1px-offset.png
basn3p02-minorchange.png
basn3p02-scrambled.png
basn3p02.png
simple.pdf
simple.png
simple.svg

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/tests/baseline_images/test_constrainedlayout:
constrained_layout1.png
constrained_layout10.png
constrained_layout11.png
constrained_layout11rat.png
constrained_layout12.png
constrained_layout13.png
constrained_layout14.png
constrained_layout15.png
constrained_layout16.png
constrained_layout17.png
constrained_layout2.png
constrained_layout3.png
constrained_layout4.pdf
constrained_layout4.png
constrained_layout4.svg
constrained_layout5.png
constrained_layout6.png
constrained_layout8.png
constrained_layout9.png
test_colorbar_location.png

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/tests/baseline_images/test_contour:
contour_addlines.png
contour_corner_mask_False.png
contour_corner_mask_True.png
contour_datetime_axis.png
contour_labels_size_color.png
contour_log_extension.png
contour_manual_colors_and_levels.png
contour_manual_labels.pdf
contour_manual_labels.png
contour_manual_labels.svg
contour_test_label_transforms.png

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/tests/baseline_images/test_cycles:
color_cycle_basic.png
fill_cycle_basic.png
fill_cycle_ignore.png
lineprop_cycle_basic.png
marker_cycle.png
property_collision_fill.png
property_collision_plot.png

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/tests/baseline_images/test_dates:
DateFormatter_fractionalSeconds.png
RRuleLocator_bounds.png
date_axhline.png
date_axhspan.png
date_axvline.png
date_axvspan.png
date_empty.png
date_inverted_limit.png

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/tests/baseline_images/test_figure:
alpha_background.png
alpha_background.svg
figure_align_labels.pdf
figure_align_labels.png
figure_align_labels.svg
figure_legend.pdf
figure_legend.png
figure_legend.svg
figure_suptitle.pdf
figure_suptitle.png
figure_suptitle.svg
figure_today.pdf
figure_today.png
figure_today.svg

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/tests/baseline_images/test_image:
bbox_image_inverted.pdf
bbox_image_inverted.png
bbox_image_inverted.svg
figimage-0.pdf
figimage-0.png
figimage-1.pdf
figimage-1.png
image_alpha.pdf
image_alpha.png
image_alpha.svg
image_clip.pdf
image_clip.png
image_clip.svg
image_cliprect.pdf
image_cliprect.png
image_cliprect.svg
image_composite_alpha.pdf
image_composite_alpha.png
image_composite_alpha.svg
image_composite_background.pdf
image_composite_background.png
image_composite_background.svg
image_interps.pdf
image_interps.png
image_interps.svg
image_shift.pdf
image_shift.svg
imshow.pdf
imshow.png
imshow.svg
imshow_bignumbers.png
imshow_bignumbers_real.png
imshow_endianess.png
imshow_flatfield.png
imshow_masked_interpolation.pdf
imshow_masked_interpolation.png
imshow_masked_interpolation.svg
interp_alpha.png
interp_nearest_vs_none.pdf
interp_nearest_vs_none.svg
log_scale_image.pdf
log_scale_image.png
log_scale_image.svg
mask_image.pdf
mask_image.png
mask_image.svg
mask_image_over_under.png
no_interpolation_origin.pdf
no_interpolation_origin.png
no_interpolation_origin.svg
rasterize_10dpi.pdf
rasterize_10dpi.svg
rotate_image.pdf
rotate_image.png
rotate_image.svg
uint16.tif
zoom_and_clip_upper_origin.png

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/tests/baseline_images/test_legend:
fancy.pdf
fancy.png
fancy.svg
framealpha.pdf
framealpha.png
framealpha.svg
hatching.pdf
hatching.png
hatching.svg
legend_auto1.pdf
legend_auto1.png
legend_auto1.svg
legend_auto2.pdf
legend_auto2.png
legend_auto2.svg
legend_auto3.pdf
legend_auto3.png
legend_auto3.svg
legend_expand.pdf
legend_expand.png
legend_expand.svg
legend_labels_first.png
legend_multiple_keys.png
legend_stackplot.png
legend_various_labels.pdf
legend_various_labels.png
legend_various_labels.svg
not_covering_scatter.png
not_covering_scatter_transform.png
rcparam_alpha.png
rgba_alpha.png
scatter_rc1.pdf
scatter_rc1.png
scatter_rc1.svg
scatter_rc3.pdf
scatter_rc3.png
scatter_rc3.svg

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/tests/baseline_images/test_lines:
drawstyle_variants.png
line_collection_dashes.pdf
line_collection_dashes.png
line_collection_dashes.svg
line_dashes.pdf
line_dashes.png
line_dashes.svg
marker_fill_styles.png
scaled_lines.pdf
scaled_lines.png
scaled_lines.svg

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/tests/baseline_images/test_mathtext:
mathfont_cm_00.png
mathfont_cm_01.png
mathfont_cm_02.png
mathfont_cm_03.png
mathfont_cm_04.png
mathfont_cm_05.png
mathfont_cm_06.png
mathfont_cm_07.png
mathfont_cm_08.png
mathfont_cm_09.png
mathfont_cm_10.png
mathfont_cm_11.png
mathfont_cm_12.png
mathfont_cm_13.png
mathfont_cm_14.png
mathfont_cm_15.png
mathfont_cm_16.png
mathfont_cm_17.png
mathfont_cm_18.png
mathfont_cm_19.png
mathfont_cm_20.png
mathfont_cm_21.png
mathfont_cm_22.png
mathfont_cm_23.png
mathfont_cm_24.png
mathfont_cm_25.png
mathfont_cm_26.png
mathfont_cm_27.png
mathfont_cm_28.png
mathfont_cm_29.png
mathfont_cm_30.png
mathfont_cm_31.png
mathfont_cm_32.png
mathfont_cm_33.png
mathfont_cm_34.png
mathfont_cm_35.png
mathfont_cm_36.png
mathfont_cm_37.png
mathfont_cm_38.png
mathfont_cm_39.png
mathfont_cm_40.png
mathfont_cm_41.png
mathfont_cm_42.png
mathfont_cm_43.png
mathfont_cm_44.png
mathfont_cm_45.png
mathfont_cm_46.png
mathfont_cm_47.png
mathfont_cm_48.png
mathfont_cm_49.png
mathfont_cm_50.png
mathfont_cm_51.png
mathfont_cm_52.png
mathfont_cm_53.png
mathfont_cm_54.png
mathfont_cm_55.png
mathfont_cm_56.png
mathfont_cm_57.png
mathfont_cm_58.png
mathfont_cm_59.png
mathfont_dejavusans_00.png
mathfont_dejavusans_01.png
mathfont_dejavusans_02.png
mathfont_dejavusans_03.png
mathfont_dejavusans_04.png
mathfont_dejavusans_05.png
mathfont_dejavusans_06.png
mathfont_dejavusans_07.png
mathfont_dejavusans_08.png
mathfont_dejavusans_09.png
mathfont_dejavusans_10.png
mathfont_dejavusans_11.png
mathfont_dejavusans_12.png
mathfont_dejavusans_13.png
mathfont_dejavusans_14.png
mathfont_dejavusans_15.png
mathfont_dejavusans_16.png
mathfont_dejavusans_17.png
mathfont_dejavusans_18.png
mathfont_dejavusans_19.png
mathfont_dejavusans_20.png
mathfont_dejavusans_21.png
mathfont_dejavusans_22.png
mathfont_dejavusans_23.png
mathfont_dejavusans_24.png
mathfont_dejavusans_25.png
mathfont_dejavusans_26.png
mathfont_dejavusans_27.png
mathfont_dejavusans_28.png
mathfont_dejavusans_29.png
mathfont_dejavusans_30.png
mathfont_dejavusans_31.png
mathfont_dejavusans_32.png
mathfont_dejavusans_33.png
mathfont_dejavusans_34.png
mathfont_dejavusans_35.png
mathfont_dejavusans_36.png
mathfont_dejavusans_37.png
mathfont_dejavusans_38.png
mathfont_dejavusans_39.png
mathfont_dejavusans_40.png
mathfont_dejavusans_41.png
mathfont_dejavusans_42.png
mathfont_dejavusans_43.png
mathfont_dejavusans_44.png
mathfont_dejavusans_45.png
mathfont_dejavusans_46.png
mathfont_dejavusans_47.png
mathfont_dejavusans_48.png
mathfont_dejavusans_49.png
mathfont_dejavusans_50.png
mathfont_dejavusans_51.png
mathfont_dejavusans_52.png
mathfont_dejavusans_53.png
mathfont_dejavusans_54.png
mathfont_dejavusans_55.png
mathfont_dejavusans_56.png
mathfont_dejavusans_57.png
mathfont_dejavusans_58.png
mathfont_dejavusans_59.png
mathfont_dejavuserif_00.png
mathfont_dejavuserif_01.png
mathfont_dejavuserif_02.png
mathfont_dejavuserif_03.png
mathfont_dejavuserif_04.png
mathfont_dejavuserif_05.png
mathfont_dejavuserif_06.png
mathfont_dejavuserif_07.png
mathfont_dejavuserif_08.png
mathfont_dejavuserif_09.png
mathfont_dejavuserif_10.png
mathfont_dejavuserif_11.png
mathfont_dejavuserif_12.png
mathfont_dejavuserif_13.png
mathfont_dejavuserif_14.png
mathfont_dejavuserif_15.png
mathfont_dejavuserif_16.png
mathfont_dejavuserif_17.png
mathfont_dejavuserif_18.png
mathfont_dejavuserif_19.png
mathfont_dejavuserif_20.png
mathfont_dejavuserif_21.png
mathfont_dejavuserif_22.png
mathfont_dejavuserif_23.png
mathfont_dejavuserif_24.png
mathfont_dejavuserif_25.png
mathfont_dejavuserif_26.png
mathfont_dejavuserif_27.png
mathfont_dejavuserif_28.png
mathfont_dejavuserif_29.png
mathfont_dejavuserif_30.png
mathfont_dejavuserif_31.png
mathfont_dejavuserif_32.png
mathfont_dejavuserif_33.png
mathfont_dejavuserif_34.png
mathfont_dejavuserif_35.png
mathfont_dejavuserif_36.png
mathfont_dejavuserif_37.png
mathfont_dejavuserif_38.png
mathfont_dejavuserif_39.png
mathfont_dejavuserif_40.png
mathfont_dejavuserif_41.png
mathfont_dejavuserif_42.png
mathfont_dejavuserif_43.png
mathfont_dejavuserif_44.png
mathfont_dejavuserif_45.png
mathfont_dejavuserif_46.png
mathfont_dejavuserif_47.png
mathfont_dejavuserif_48.png
mathfont_dejavuserif_49.png
mathfont_dejavuserif_50.png
mathfont_dejavuserif_51.png
mathfont_dejavuserif_52.png
mathfont_dejavuserif_53.png
mathfont_dejavuserif_54.png
mathfont_dejavuserif_55.png
mathfont_dejavuserif_56.png
mathfont_dejavuserif_57.png
mathfont_dejavuserif_58.png
mathfont_dejavuserif_59.png
mathfont_stix_00.png
mathfont_stix_01.png
mathfont_stix_02.png
mathfont_stix_03.png
mathfont_stix_04.png
mathfont_stix_05.png
mathfont_stix_06.png
mathfont_stix_07.png
mathfont_stix_08.png
mathfont_stix_09.png
mathfont_stix_10.png
mathfont_stix_11.png
mathfont_stix_12.png
mathfont_stix_13.png
mathfont_stix_14.png
mathfont_stix_15.png
mathfont_stix_16.png
mathfont_stix_17.png
mathfont_stix_18.png
mathfont_stix_19.png
mathfont_stix_20.png
mathfont_stix_21.png
mathfont_stix_22.png
mathfont_stix_23.png
mathfont_stix_24.png
mathfont_stix_25.png
mathfont_stix_26.png
mathfont_stix_27.png
mathfont_stix_28.png
mathfont_stix_29.png
mathfont_stix_30.png
mathfont_stix_31.png
mathfont_stix_32.png
mathfont_stix_33.png
mathfont_stix_34.png
mathfont_stix_35.png
mathfont_stix_36.png
mathfont_stix_37.png
mathfont_stix_38.png
mathfont_stix_39.png
mathfont_stix_40.png
mathfont_stix_41.png
mathfont_stix_42.png
mathfont_stix_43.png
mathfont_stix_44.png
mathfont_stix_45.png
mathfont_stix_46.png
mathfont_stix_47.png
mathfont_stix_48.png
mathfont_stix_49.png
mathfont_stix_50.png
mathfont_stix_51.png
mathfont_stix_52.png
mathfont_stix_53.png
mathfont_stix_54.png
mathfont_stix_55.png
mathfont_stix_56.png
mathfont_stix_57.png
mathfont_stix_58.png
mathfont_stix_59.png
mathfont_stixsans_00.png
mathfont_stixsans_01.png
mathfont_stixsans_02.png
mathfont_stixsans_03.png
mathfont_stixsans_04.png
mathfont_stixsans_05.png
mathfont_stixsans_06.png
mathfont_stixsans_07.png
mathfont_stixsans_08.png
mathfont_stixsans_09.png
mathfont_stixsans_10.png
mathfont_stixsans_11.png
mathfont_stixsans_12.png
mathfont_stixsans_13.png
mathfont_stixsans_14.png
mathfont_stixsans_15.png
mathfont_stixsans_16.png
mathfont_stixsans_17.png
mathfont_stixsans_18.png
mathfont_stixsans_19.png
mathfont_stixsans_20.png
mathfont_stixsans_21.png
mathfont_stixsans_22.png
mathfont_stixsans_23.png
mathfont_stixsans_24.png
mathfont_stixsans_25.png
mathfont_stixsans_26.png
mathfont_stixsans_27.png
mathfont_stixsans_28.png
mathfont_stixsans_29.png
mathfont_stixsans_30.png
mathfont_stixsans_31.png
mathfont_stixsans_32.png
mathfont_stixsans_33.png
mathfont_stixsans_34.png
mathfont_stixsans_35.png
mathfont_stixsans_36.png
mathfont_stixsans_37.png
mathfont_stixsans_38.png
mathfont_stixsans_39.png
mathfont_stixsans_40.png
mathfont_stixsans_41.png
mathfont_stixsans_42.png
mathfont_stixsans_43.png
mathfont_stixsans_44.png
mathfont_stixsans_45.png
mathfont_stixsans_46.png
mathfont_stixsans_47.png
mathfont_stixsans_48.png
mathfont_stixsans_49.png
mathfont_stixsans_50.png
mathfont_stixsans_51.png
mathfont_stixsans_52.png
mathfont_stixsans_53.png
mathfont_stixsans_54.png
mathfont_stixsans_55.png
mathfont_stixsans_56.png
mathfont_stixsans_57.png
mathfont_stixsans_58.png
mathfont_stixsans_59.png
mathtext_cm_00.pdf
mathtext_cm_00.png
mathtext_cm_00.svg
mathtext_cm_01.pdf
mathtext_cm_01.png
mathtext_cm_01.svg
mathtext_cm_02.pdf
mathtext_cm_02.png
mathtext_cm_02.svg
mathtext_cm_03.pdf
mathtext_cm_03.png
mathtext_cm_03.svg
mathtext_cm_04.pdf
mathtext_cm_04.png
mathtext_cm_04.svg
mathtext_cm_05.pdf
mathtext_cm_05.png
mathtext_cm_05.svg
mathtext_cm_06.pdf
mathtext_cm_06.png
mathtext_cm_06.svg
mathtext_cm_07.pdf
mathtext_cm_07.png
mathtext_cm_07.svg
mathtext_cm_08.pdf
mathtext_cm_08.png
mathtext_cm_08.svg
mathtext_cm_09.pdf
mathtext_cm_09.png
mathtext_cm_09.svg
mathtext_cm_10.pdf
mathtext_cm_10.png
mathtext_cm_10.svg
mathtext_cm_11.pdf
mathtext_cm_11.png
mathtext_cm_11.svg
mathtext_cm_12.pdf
mathtext_cm_12.png
mathtext_cm_12.svg
mathtext_cm_13.pdf
mathtext_cm_13.png
mathtext_cm_13.svg
mathtext_cm_14.pdf
mathtext_cm_14.png
mathtext_cm_14.svg
mathtext_cm_15.pdf
mathtext_cm_15.png
mathtext_cm_15.svg
mathtext_cm_16.pdf
mathtext_cm_16.png
mathtext_cm_16.svg
mathtext_cm_17.pdf
mathtext_cm_17.png
mathtext_cm_17.svg
mathtext_cm_18.pdf
mathtext_cm_18.png
mathtext_cm_18.svg
mathtext_cm_19.pdf
mathtext_cm_19.png
mathtext_cm_19.svg
mathtext_cm_20.pdf
mathtext_cm_20.png
mathtext_cm_20.svg
mathtext_cm_21.pdf
mathtext_cm_21.png
mathtext_cm_21.svg
mathtext_cm_22.pdf
mathtext_cm_22.png
mathtext_cm_22.svg
mathtext_cm_23.pdf
mathtext_cm_23.png
mathtext_cm_23.svg
mathtext_cm_24.pdf
mathtext_cm_24.png
mathtext_cm_24.svg
mathtext_cm_25.pdf
mathtext_cm_25.png
mathtext_cm_25.svg
mathtext_cm_26.pdf
mathtext_cm_26.png
mathtext_cm_26.svg
mathtext_cm_27.pdf
mathtext_cm_27.png
mathtext_cm_27.svg
mathtext_cm_28.pdf
mathtext_cm_28.png
mathtext_cm_28.svg
mathtext_cm_29.pdf
mathtext_cm_29.png
mathtext_cm_29.svg
mathtext_cm_30.pdf
mathtext_cm_30.png
mathtext_cm_30.svg
mathtext_cm_31.pdf
mathtext_cm_31.png
mathtext_cm_31.svg
mathtext_cm_32.pdf
mathtext_cm_32.png
mathtext_cm_32.svg
mathtext_cm_33.pdf
mathtext_cm_33.png
mathtext_cm_33.svg
mathtext_cm_34.pdf
mathtext_cm_34.png
mathtext_cm_34.svg
mathtext_cm_35.pdf
mathtext_cm_35.png
mathtext_cm_35.svg
mathtext_cm_36.pdf
mathtext_cm_36.png
mathtext_cm_36.svg
mathtext_cm_37.pdf
mathtext_cm_37.png
mathtext_cm_37.svg
mathtext_cm_38.pdf
mathtext_cm_38.png
mathtext_cm_38.svg
mathtext_cm_39.pdf
mathtext_cm_39.png
mathtext_cm_39.svg
mathtext_cm_40.pdf
mathtext_cm_40.png
mathtext_cm_40.svg
mathtext_cm_41.pdf
mathtext_cm_41.png
mathtext_cm_41.svg
mathtext_cm_42.pdf
mathtext_cm_42.png
mathtext_cm_42.svg
mathtext_cm_43.pdf
mathtext_cm_43.png
mathtext_cm_43.svg
mathtext_cm_44.pdf
mathtext_cm_44.png
mathtext_cm_44.svg
mathtext_cm_45.pdf
mathtext_cm_45.png
mathtext_cm_45.svg
mathtext_cm_46.pdf
mathtext_cm_46.png
mathtext_cm_46.svg
mathtext_cm_47.pdf
mathtext_cm_47.png
mathtext_cm_47.svg
mathtext_cm_48.pdf
mathtext_cm_48.png
mathtext_cm_48.svg
mathtext_cm_49.pdf
mathtext_cm_49.png
mathtext_cm_49.svg
mathtext_cm_50.pdf
mathtext_cm_50.png
mathtext_cm_50.svg
mathtext_cm_51.pdf
mathtext_cm_51.png
mathtext_cm_51.svg
mathtext_cm_52.pdf
mathtext_cm_52.png
mathtext_cm_52.svg
mathtext_cm_53.pdf
mathtext_cm_53.png
mathtext_cm_53.svg
mathtext_cm_54.pdf
mathtext_cm_54.png
mathtext_cm_54.svg
mathtext_cm_55.pdf
mathtext_cm_55.png
mathtext_cm_55.svg
mathtext_cm_56.pdf
mathtext_cm_56.png
mathtext_cm_56.svg
mathtext_cm_57.pdf
mathtext_cm_57.png
mathtext_cm_57.svg
mathtext_cm_58.pdf
mathtext_cm_58.png
mathtext_cm_58.svg
mathtext_cm_59.pdf
mathtext_cm_59.png
mathtext_cm_59.svg
mathtext_cm_60.pdf
mathtext_cm_60.png
mathtext_cm_60.svg
mathtext_cm_61.pdf
mathtext_cm_61.png
mathtext_cm_61.svg
mathtext_cm_62.pdf
mathtext_cm_62.png
mathtext_cm_62.svg
mathtext_cm_63.pdf
mathtext_cm_63.png
mathtext_cm_63.svg
mathtext_cm_64.pdf
mathtext_cm_64.png
mathtext_cm_64.svg
mathtext_cm_65.pdf
mathtext_cm_65.png
mathtext_cm_65.svg
mathtext_cm_66.pdf
mathtext_cm_66.png
mathtext_cm_66.svg
mathtext_cm_67.pdf
mathtext_cm_67.png
mathtext_cm_67.svg
mathtext_cm_68.pdf
mathtext_cm_68.png
mathtext_cm_68.svg
mathtext_cm_69.pdf
mathtext_cm_69.png
mathtext_cm_69.svg
mathtext_cm_70.pdf
mathtext_cm_70.png
mathtext_cm_70.svg
mathtext_cm_71.pdf
mathtext_cm_71.png
mathtext_cm_71.svg
mathtext_cm_72.pdf
mathtext_cm_72.png
mathtext_cm_72.svg
mathtext_cm_73.pdf
mathtext_cm_73.png
mathtext_cm_73.svg
mathtext_cm_74.pdf
mathtext_cm_74.png
mathtext_cm_74.svg
mathtext_cm_75.pdf
mathtext_cm_75.png
mathtext_cm_75.svg
mathtext_cm_76.pdf
mathtext_cm_76.png
mathtext_cm_76.svg
mathtext_cm_77.pdf
mathtext_cm_77.png
mathtext_cm_77.svg
mathtext_cm_78.pdf
mathtext_cm_78.png
mathtext_cm_78.svg
mathtext_cm_79.pdf
mathtext_cm_79.png
mathtext_cm_79.svg
mathtext_cm_80.pdf
mathtext_cm_80.png
mathtext_cm_80.svg
mathtext_cm_81.pdf
mathtext_cm_81.png
mathtext_cm_81.svg
mathtext_cm_82.pdf
mathtext_cm_82.png
mathtext_cm_82.svg
mathtext_dejavusans_00.pdf
mathtext_dejavusans_00.png
mathtext_dejavusans_00.svg
mathtext_dejavusans_01.pdf
mathtext_dejavusans_01.png
mathtext_dejavusans_01.svg
mathtext_dejavusans_02.pdf
mathtext_dejavusans_02.png
mathtext_dejavusans_02.svg
mathtext_dejavusans_03.pdf
mathtext_dejavusans_03.png
mathtext_dejavusans_03.svg
mathtext_dejavusans_04.pdf
mathtext_dejavusans_04.png
mathtext_dejavusans_04.svg
mathtext_dejavusans_05.pdf
mathtext_dejavusans_05.png
mathtext_dejavusans_05.svg
mathtext_dejavusans_06.pdf
mathtext_dejavusans_06.png
mathtext_dejavusans_06.svg
mathtext_dejavusans_07.pdf
mathtext_dejavusans_07.png
mathtext_dejavusans_07.svg
mathtext_dejavusans_08.pdf
mathtext_dejavusans_08.png
mathtext_dejavusans_08.svg
mathtext_dejavusans_09.pdf
mathtext_dejavusans_09.png
mathtext_dejavusans_09.svg
mathtext_dejavusans_10.pdf
mathtext_dejavusans_10.png
mathtext_dejavusans_10.svg
mathtext_dejavusans_11.pdf
mathtext_dejavusans_11.png
mathtext_dejavusans_11.svg
mathtext_dejavusans_12.pdf
mathtext_dejavusans_12.png
mathtext_dejavusans_12.svg
mathtext_dejavusans_13.pdf
mathtext_dejavusans_13.png
mathtext_dejavusans_13.svg
mathtext_dejavusans_14.pdf
mathtext_dejavusans_14.png
mathtext_dejavusans_14.svg
mathtext_dejavusans_15.pdf
mathtext_dejavusans_15.png
mathtext_dejavusans_15.svg
mathtext_dejavusans_16.pdf
mathtext_dejavusans_16.png
mathtext_dejavusans_16.svg
mathtext_dejavusans_17.pdf
mathtext_dejavusans_17.png
mathtext_dejavusans_17.svg
mathtext_dejavusans_18.pdf
mathtext_dejavusans_18.png
mathtext_dejavusans_18.svg
mathtext_dejavusans_19.pdf
mathtext_dejavusans_19.png
mathtext_dejavusans_19.svg
mathtext_dejavusans_20.pdf
mathtext_dejavusans_20.png
mathtext_dejavusans_20.svg
mathtext_dejavusans_21.pdf
mathtext_dejavusans_21.png
mathtext_dejavusans_21.svg
mathtext_dejavusans_22.pdf
mathtext_dejavusans_22.png
mathtext_dejavusans_22.svg
mathtext_dejavusans_23.pdf
mathtext_dejavusans_23.png
mathtext_dejavusans_23.svg
mathtext_dejavusans_24.pdf
mathtext_dejavusans_24.png
mathtext_dejavusans_24.svg
mathtext_dejavusans_25.pdf
mathtext_dejavusans_25.png
mathtext_dejavusans_25.svg
mathtext_dejavusans_26.pdf
mathtext_dejavusans_26.png
mathtext_dejavusans_26.svg
mathtext_dejavusans_27.pdf
mathtext_dejavusans_27.png
mathtext_dejavusans_27.svg
mathtext_dejavusans_28.pdf
mathtext_dejavusans_28.png
mathtext_dejavusans_28.svg
mathtext_dejavusans_29.pdf
mathtext_dejavusans_29.png
mathtext_dejavusans_29.svg
mathtext_dejavusans_30.pdf
mathtext_dejavusans_30.png
mathtext_dejavusans_30.svg
mathtext_dejavusans_31.pdf
mathtext_dejavusans_31.png
mathtext_dejavusans_31.svg
mathtext_dejavusans_32.pdf
mathtext_dejavusans_32.png
mathtext_dejavusans_32.svg
mathtext_dejavusans_33.pdf
mathtext_dejavusans_33.png
mathtext_dejavusans_33.svg
mathtext_dejavusans_34.pdf
mathtext_dejavusans_34.png
mathtext_dejavusans_34.svg
mathtext_dejavusans_35.pdf
mathtext_dejavusans_35.png
mathtext_dejavusans_35.svg
mathtext_dejavusans_36.pdf
mathtext_dejavusans_36.png
mathtext_dejavusans_36.svg
mathtext_dejavusans_37.pdf
mathtext_dejavusans_37.png
mathtext_dejavusans_37.svg
mathtext_dejavusans_38.pdf
mathtext_dejavusans_38.png
mathtext_dejavusans_38.svg
mathtext_dejavusans_39.pdf
mathtext_dejavusans_39.png
mathtext_dejavusans_39.svg
mathtext_dejavusans_40.pdf
mathtext_dejavusans_40.png
mathtext_dejavusans_40.svg
mathtext_dejavusans_41.pdf
mathtext_dejavusans_41.png
mathtext_dejavusans_41.svg
mathtext_dejavusans_42.pdf
mathtext_dejavusans_42.png
mathtext_dejavusans_42.svg
mathtext_dejavusans_43.pdf
mathtext_dejavusans_43.png
mathtext_dejavusans_43.svg
mathtext_dejavusans_44.pdf
mathtext_dejavusans_44.png
mathtext_dejavusans_44.svg
mathtext_dejavusans_45.pdf
mathtext_dejavusans_45.png
mathtext_dejavusans_45.svg
mathtext_dejavusans_46.pdf
mathtext_dejavusans_46.png
mathtext_dejavusans_46.svg
mathtext_dejavusans_47.pdf
mathtext_dejavusans_47.png
mathtext_dejavusans_47.svg
mathtext_dejavusans_48.pdf
mathtext_dejavusans_48.png
mathtext_dejavusans_48.svg
mathtext_dejavusans_49.pdf
mathtext_dejavusans_49.png
mathtext_dejavusans_49.svg
mathtext_dejavusans_50.pdf
mathtext_dejavusans_50.png
mathtext_dejavusans_50.svg
mathtext_dejavusans_51.pdf
mathtext_dejavusans_51.png
mathtext_dejavusans_51.svg
mathtext_dejavusans_52.pdf
mathtext_dejavusans_52.png
mathtext_dejavusans_52.svg
mathtext_dejavusans_53.pdf
mathtext_dejavusans_53.png
mathtext_dejavusans_53.svg
mathtext_dejavusans_54.pdf
mathtext_dejavusans_54.png
mathtext_dejavusans_54.svg
mathtext_dejavusans_55.pdf
mathtext_dejavusans_55.png
mathtext_dejavusans_55.svg
mathtext_dejavusans_56.pdf
mathtext_dejavusans_56.png
mathtext_dejavusans_56.svg
mathtext_dejavusans_57.pdf
mathtext_dejavusans_57.png
mathtext_dejavusans_57.svg
mathtext_dejavusans_58.pdf
mathtext_dejavusans_58.png
mathtext_dejavusans_58.svg
mathtext_dejavusans_59.pdf
mathtext_dejavusans_59.png
mathtext_dejavusans_59.svg
mathtext_dejavusans_60.pdf
mathtext_dejavusans_60.png
mathtext_dejavusans_60.svg
mathtext_dejavusans_61.pdf
mathtext_dejavusans_61.png
mathtext_dejavusans_61.svg
mathtext_dejavusans_62.pdf
mathtext_dejavusans_62.png
mathtext_dejavusans_62.svg
mathtext_dejavusans_63.pdf
mathtext_dejavusans_63.png
mathtext_dejavusans_63.svg
mathtext_dejavusans_64.pdf
mathtext_dejavusans_64.png
mathtext_dejavusans_64.svg
mathtext_dejavusans_65.pdf
mathtext_dejavusans_65.png
mathtext_dejavusans_65.svg
mathtext_dejavusans_66.pdf
mathtext_dejavusans_66.png
mathtext_dejavusans_66.svg
mathtext_dejavusans_67.pdf
mathtext_dejavusans_67.png
mathtext_dejavusans_67.svg
mathtext_dejavusans_68.pdf
mathtext_dejavusans_68.png
mathtext_dejavusans_68.svg
mathtext_dejavusans_69.pdf
mathtext_dejavusans_69.png
mathtext_dejavusans_69.svg
mathtext_dejavusans_70.pdf
mathtext_dejavusans_70.png
mathtext_dejavusans_70.svg
mathtext_dejavusans_71.pdf
mathtext_dejavusans_71.png
mathtext_dejavusans_71.svg
mathtext_dejavusans_72.pdf
mathtext_dejavusans_72.png
mathtext_dejavusans_72.svg
mathtext_dejavusans_73.pdf
mathtext_dejavusans_73.png
mathtext_dejavusans_73.svg
mathtext_dejavusans_74.pdf
mathtext_dejavusans_74.png
mathtext_dejavusans_74.svg
mathtext_dejavusans_75.pdf
mathtext_dejavusans_75.png
mathtext_dejavusans_75.svg
mathtext_dejavusans_76.pdf
mathtext_dejavusans_76.png
mathtext_dejavusans_76.svg
mathtext_dejavusans_77.pdf
mathtext_dejavusans_77.png
mathtext_dejavusans_77.svg
mathtext_dejavusans_78.pdf
mathtext_dejavusans_78.png
mathtext_dejavusans_78.svg
mathtext_dejavusans_79.pdf
mathtext_dejavusans_79.png
mathtext_dejavusans_79.svg
mathtext_dejavusans_80.pdf
mathtext_dejavusans_80.png
mathtext_dejavusans_80.svg
mathtext_dejavusans_81.pdf
mathtext_dejavusans_81.png
mathtext_dejavusans_81.svg
mathtext_dejavusans_82.pdf
mathtext_dejavusans_82.png
mathtext_dejavusans_82.svg
mathtext_dejavuserif_00.pdf
mathtext_dejavuserif_00.png
mathtext_dejavuserif_00.svg
mathtext_dejavuserif_01.pdf
mathtext_dejavuserif_01.png
mathtext_dejavuserif_01.svg
mathtext_dejavuserif_02.pdf
mathtext_dejavuserif_02.png
mathtext_dejavuserif_02.svg
mathtext_dejavuserif_03.pdf
mathtext_dejavuserif_03.png
mathtext_dejavuserif_03.svg
mathtext_dejavuserif_04.pdf
mathtext_dejavuserif_04.png
mathtext_dejavuserif_04.svg
mathtext_dejavuserif_05.pdf
mathtext_dejavuserif_05.png
mathtext_dejavuserif_05.svg
mathtext_dejavuserif_06.pdf
mathtext_dejavuserif_06.png
mathtext_dejavuserif_06.svg
mathtext_dejavuserif_07.pdf
mathtext_dejavuserif_07.png
mathtext_dejavuserif_07.svg
mathtext_dejavuserif_08.pdf
mathtext_dejavuserif_08.png
mathtext_dejavuserif_08.svg
mathtext_dejavuserif_09.pdf
mathtext_dejavuserif_09.png
mathtext_dejavuserif_09.svg
mathtext_dejavuserif_10.pdf
mathtext_dejavuserif_10.png
mathtext_dejavuserif_10.svg
mathtext_dejavuserif_11.pdf
mathtext_dejavuserif_11.png
mathtext_dejavuserif_11.svg
mathtext_dejavuserif_12.pdf
mathtext_dejavuserif_12.png
mathtext_dejavuserif_12.svg
mathtext_dejavuserif_13.pdf
mathtext_dejavuserif_13.png
mathtext_dejavuserif_13.svg
mathtext_dejavuserif_14.pdf
mathtext_dejavuserif_14.png
mathtext_dejavuserif_14.svg
mathtext_dejavuserif_15.pdf
mathtext_dejavuserif_15.png
mathtext_dejavuserif_15.svg
mathtext_dejavuserif_16.pdf
mathtext_dejavuserif_16.png
mathtext_dejavuserif_16.svg
mathtext_dejavuserif_17.pdf
mathtext_dejavuserif_17.png
mathtext_dejavuserif_17.svg
mathtext_dejavuserif_18.pdf
mathtext_dejavuserif_18.png
mathtext_dejavuserif_18.svg
mathtext_dejavuserif_19.pdf
mathtext_dejavuserif_19.png
mathtext_dejavuserif_19.svg
mathtext_dejavuserif_20.pdf
mathtext_dejavuserif_20.png
mathtext_dejavuserif_20.svg
mathtext_dejavuserif_21.pdf
mathtext_dejavuserif_21.png
mathtext_dejavuserif_21.svg
mathtext_dejavuserif_22.pdf
mathtext_dejavuserif_22.png
mathtext_dejavuserif_22.svg
mathtext_dejavuserif_23.pdf
mathtext_dejavuserif_23.png
mathtext_dejavuserif_23.svg
mathtext_dejavuserif_24.pdf
mathtext_dejavuserif_24.png
mathtext_dejavuserif_24.svg
mathtext_dejavuserif_25.pdf
mathtext_dejavuserif_25.png
mathtext_dejavuserif_25.svg
mathtext_dejavuserif_26.pdf
mathtext_dejavuserif_26.png
mathtext_dejavuserif_26.svg
mathtext_dejavuserif_27.pdf
mathtext_dejavuserif_27.png
mathtext_dejavuserif_27.svg
mathtext_dejavuserif_28.pdf
mathtext_dejavuserif_28.png
mathtext_dejavuserif_28.svg
mathtext_dejavuserif_29.pdf
mathtext_dejavuserif_29.png
mathtext_dejavuserif_29.svg
mathtext_dejavuserif_30.pdf
mathtext_dejavuserif_30.png
mathtext_dejavuserif_30.svg
mathtext_dejavuserif_31.pdf
mathtext_dejavuserif_31.png
mathtext_dejavuserif_31.svg
mathtext_dejavuserif_32.pdf
mathtext_dejavuserif_32.png
mathtext_dejavuserif_32.svg
mathtext_dejavuserif_33.pdf
mathtext_dejavuserif_33.png
mathtext_dejavuserif_33.svg
mathtext_dejavuserif_34.pdf
mathtext_dejavuserif_34.png
mathtext_dejavuserif_34.svg
mathtext_dejavuserif_35.pdf
mathtext_dejavuserif_35.png
mathtext_dejavuserif_35.svg
mathtext_dejavuserif_36.pdf
mathtext_dejavuserif_36.png
mathtext_dejavuserif_36.svg
mathtext_dejavuserif_37.pdf
mathtext_dejavuserif_37.png
mathtext_dejavuserif_37.svg
mathtext_dejavuserif_38.pdf
mathtext_dejavuserif_38.png
mathtext_dejavuserif_38.svg
mathtext_dejavuserif_39.pdf
mathtext_dejavuserif_39.png
mathtext_dejavuserif_39.svg
mathtext_dejavuserif_40.pdf
mathtext_dejavuserif_40.png
mathtext_dejavuserif_40.svg
mathtext_dejavuserif_41.pdf
mathtext_dejavuserif_41.png
mathtext_dejavuserif_41.svg
mathtext_dejavuserif_42.pdf
mathtext_dejavuserif_42.png
mathtext_dejavuserif_42.svg
mathtext_dejavuserif_43.pdf
mathtext_dejavuserif_43.png
mathtext_dejavuserif_43.svg
mathtext_dejavuserif_44.pdf
mathtext_dejavuserif_44.png
mathtext_dejavuserif_44.svg
mathtext_dejavuserif_45.pdf
mathtext_dejavuserif_45.png
mathtext_dejavuserif_45.svg
mathtext_dejavuserif_46.pdf
mathtext_dejavuserif_46.png
mathtext_dejavuserif_46.svg
mathtext_dejavuserif_47.pdf
mathtext_dejavuserif_47.png
mathtext_dejavuserif_47.svg
mathtext_dejavuserif_48.pdf
mathtext_dejavuserif_48.png
mathtext_dejavuserif_48.svg
mathtext_dejavuserif_49.pdf
mathtext_dejavuserif_49.png
mathtext_dejavuserif_49.svg
mathtext_dejavuserif_50.pdf
mathtext_dejavuserif_50.png
mathtext_dejavuserif_50.svg
mathtext_dejavuserif_51.pdf
mathtext_dejavuserif_51.png
mathtext_dejavuserif_51.svg
mathtext_dejavuserif_52.pdf
mathtext_dejavuserif_52.png
mathtext_dejavuserif_52.svg
mathtext_dejavuserif_53.pdf
mathtext_dejavuserif_53.png
mathtext_dejavuserif_53.svg
mathtext_dejavuserif_54.pdf
mathtext_dejavuserif_54.png
mathtext_dejavuserif_54.svg
mathtext_dejavuserif_55.pdf
mathtext_dejavuserif_55.png
mathtext_dejavuserif_55.svg
mathtext_dejavuserif_56.pdf
mathtext_dejavuserif_56.png
mathtext_dejavuserif_56.svg
mathtext_dejavuserif_57.pdf
mathtext_dejavuserif_57.png
mathtext_dejavuserif_57.svg
mathtext_dejavuserif_58.pdf
mathtext_dejavuserif_58.png
mathtext_dejavuserif_58.svg
mathtext_dejavuserif_59.pdf
mathtext_dejavuserif_59.png
mathtext_dejavuserif_59.svg
mathtext_dejavuserif_60.pdf
mathtext_dejavuserif_60.png
mathtext_dejavuserif_60.svg
mathtext_dejavuserif_61.pdf
mathtext_dejavuserif_61.png
mathtext_dejavuserif_61.svg
mathtext_dejavuserif_62.pdf
mathtext_dejavuserif_62.png
mathtext_dejavuserif_62.svg
mathtext_dejavuserif_63.pdf
mathtext_dejavuserif_63.png
mathtext_dejavuserif_63.svg
mathtext_dejavuserif_64.pdf
mathtext_dejavuserif_64.png
mathtext_dejavuserif_64.svg
mathtext_dejavuserif_65.pdf
mathtext_dejavuserif_65.png
mathtext_dejavuserif_65.svg
mathtext_dejavuserif_66.pdf
mathtext_dejavuserif_66.png
mathtext_dejavuserif_66.svg
mathtext_dejavuserif_67.pdf
mathtext_dejavuserif_67.png
mathtext_dejavuserif_67.svg
mathtext_dejavuserif_68.pdf
mathtext_dejavuserif_68.png
mathtext_dejavuserif_68.svg
mathtext_dejavuserif_69.pdf
mathtext_dejavuserif_69.png
mathtext_dejavuserif_69.svg
mathtext_dejavuserif_70.pdf
mathtext_dejavuserif_70.png
mathtext_dejavuserif_70.svg
mathtext_dejavuserif_71.pdf
mathtext_dejavuserif_71.png
mathtext_dejavuserif_71.svg
mathtext_dejavuserif_72.pdf
mathtext_dejavuserif_72.png
mathtext_dejavuserif_72.svg
mathtext_dejavuserif_73.pdf
mathtext_dejavuserif_73.png
mathtext_dejavuserif_73.svg
mathtext_dejavuserif_74.pdf
mathtext_dejavuserif_74.png
mathtext_dejavuserif_74.svg
mathtext_dejavuserif_75.pdf
mathtext_dejavuserif_75.png
mathtext_dejavuserif_75.svg
mathtext_dejavuserif_76.pdf
mathtext_dejavuserif_76.png
mathtext_dejavuserif_76.svg
mathtext_dejavuserif_77.pdf
mathtext_dejavuserif_77.png
mathtext_dejavuserif_77.svg
mathtext_dejavuserif_78.pdf
mathtext_dejavuserif_78.png
mathtext_dejavuserif_78.svg
mathtext_dejavuserif_79.pdf
mathtext_dejavuserif_79.png
mathtext_dejavuserif_79.svg
mathtext_dejavuserif_80.pdf
mathtext_dejavuserif_80.png
mathtext_dejavuserif_80.svg
mathtext_dejavuserif_81.pdf
mathtext_dejavuserif_81.png
mathtext_dejavuserif_81.svg
mathtext_dejavuserif_82.pdf
mathtext_dejavuserif_82.png
mathtext_dejavuserif_82.svg
mathtext_stix_00.pdf
mathtext_stix_00.png
mathtext_stix_00.svg
mathtext_stix_01.pdf
mathtext_stix_01.png
mathtext_stix_01.svg
mathtext_stix_02.pdf
mathtext_stix_02.png
mathtext_stix_02.svg
mathtext_stix_03.pdf
mathtext_stix_03.png
mathtext_stix_03.svg
mathtext_stix_04.pdf
mathtext_stix_04.png
mathtext_stix_04.svg
mathtext_stix_05.pdf
mathtext_stix_05.png
mathtext_stix_05.svg
mathtext_stix_06.pdf
mathtext_stix_06.png
mathtext_stix_06.svg
mathtext_stix_07.pdf
mathtext_stix_07.png
mathtext_stix_07.svg
mathtext_stix_08.pdf
mathtext_stix_08.png
mathtext_stix_08.svg
mathtext_stix_09.pdf
mathtext_stix_09.png
mathtext_stix_09.svg
mathtext_stix_10.pdf
mathtext_stix_10.png
mathtext_stix_10.svg
mathtext_stix_11.pdf
mathtext_stix_11.png
mathtext_stix_11.svg
mathtext_stix_12.pdf
mathtext_stix_12.png
mathtext_stix_12.svg
mathtext_stix_13.pdf
mathtext_stix_13.png
mathtext_stix_13.svg
mathtext_stix_14.pdf
mathtext_stix_14.png
mathtext_stix_14.svg
mathtext_stix_15.pdf
mathtext_stix_15.png
mathtext_stix_15.svg
mathtext_stix_16.pdf
mathtext_stix_16.png
mathtext_stix_16.svg
mathtext_stix_17.pdf
mathtext_stix_17.png
mathtext_stix_17.svg
mathtext_stix_18.pdf
mathtext_stix_18.png
mathtext_stix_18.svg
mathtext_stix_19.pdf
mathtext_stix_19.png
mathtext_stix_19.svg
mathtext_stix_20.pdf
mathtext_stix_20.png
mathtext_stix_20.svg
mathtext_stix_21.pdf
mathtext_stix_21.png
mathtext_stix_21.svg
mathtext_stix_22.pdf
mathtext_stix_22.png
mathtext_stix_22.svg
mathtext_stix_23.pdf
mathtext_stix_23.png
mathtext_stix_23.svg
mathtext_stix_24.pdf
mathtext_stix_24.png
mathtext_stix_24.svg
mathtext_stix_25.pdf
mathtext_stix_25.png
mathtext_stix_25.svg
mathtext_stix_26.pdf
mathtext_stix_26.png
mathtext_stix_26.svg
mathtext_stix_27.pdf
mathtext_stix_27.png
mathtext_stix_27.svg
mathtext_stix_28.pdf
mathtext_stix_28.png
mathtext_stix_28.svg
mathtext_stix_29.pdf
mathtext_stix_29.png
mathtext_stix_29.svg
mathtext_stix_30.pdf
mathtext_stix_30.png
mathtext_stix_30.svg
mathtext_stix_31.pdf
mathtext_stix_31.png
mathtext_stix_31.svg
mathtext_stix_32.pdf
mathtext_stix_32.png
mathtext_stix_32.svg
mathtext_stix_33.pdf
mathtext_stix_33.png
mathtext_stix_33.svg
mathtext_stix_34.pdf
mathtext_stix_34.png
mathtext_stix_34.svg
mathtext_stix_35.pdf
mathtext_stix_35.png
mathtext_stix_35.svg
mathtext_stix_36.pdf
mathtext_stix_36.png
mathtext_stix_36.svg
mathtext_stix_37.pdf
mathtext_stix_37.png
mathtext_stix_37.svg
mathtext_stix_38.pdf
mathtext_stix_38.png
mathtext_stix_38.svg
mathtext_stix_39.pdf
mathtext_stix_39.png
mathtext_stix_39.svg
mathtext_stix_40.pdf
mathtext_stix_40.png
mathtext_stix_40.svg
mathtext_stix_41.pdf
mathtext_stix_41.png
mathtext_stix_41.svg
mathtext_stix_42.pdf
mathtext_stix_42.png
mathtext_stix_42.svg
mathtext_stix_43.pdf
mathtext_stix_43.png
mathtext_stix_43.svg
mathtext_stix_44.pdf
mathtext_stix_44.png
mathtext_stix_44.svg
mathtext_stix_45.pdf
mathtext_stix_45.png
mathtext_stix_45.svg
mathtext_stix_46.pdf
mathtext_stix_46.png
mathtext_stix_46.svg
mathtext_stix_47.pdf
mathtext_stix_47.png
mathtext_stix_47.svg
mathtext_stix_48.pdf
mathtext_stix_48.png
mathtext_stix_48.svg
mathtext_stix_49.pdf
mathtext_stix_49.png
mathtext_stix_49.svg
mathtext_stix_50.pdf
mathtext_stix_50.png
mathtext_stix_50.svg
mathtext_stix_51.pdf
mathtext_stix_51.png
mathtext_stix_51.svg
mathtext_stix_52.pdf
mathtext_stix_52.png
mathtext_stix_52.svg
mathtext_stix_53.pdf
mathtext_stix_53.png
mathtext_stix_53.svg
mathtext_stix_54.pdf
mathtext_stix_54.png
mathtext_stix_54.svg
mathtext_stix_55.pdf
mathtext_stix_55.png
mathtext_stix_55.svg
mathtext_stix_56.pdf
mathtext_stix_56.png
mathtext_stix_56.svg
mathtext_stix_57.pdf
mathtext_stix_57.png
mathtext_stix_57.svg
mathtext_stix_58.pdf
mathtext_stix_58.png
mathtext_stix_58.svg
mathtext_stix_59.pdf
mathtext_stix_59.png
mathtext_stix_59.svg
mathtext_stix_60.pdf
mathtext_stix_60.png
mathtext_stix_60.svg
mathtext_stix_61.pdf
mathtext_stix_61.png
mathtext_stix_61.svg
mathtext_stix_62.pdf
mathtext_stix_62.png
mathtext_stix_62.svg
mathtext_stix_63.pdf
mathtext_stix_63.png
mathtext_stix_63.svg
mathtext_stix_64.pdf
mathtext_stix_64.png
mathtext_stix_64.svg
mathtext_stix_65.pdf
mathtext_stix_65.png
mathtext_stix_65.svg
mathtext_stix_66.pdf
mathtext_stix_66.png
mathtext_stix_66.svg
mathtext_stix_67.pdf
mathtext_stix_67.png
mathtext_stix_67.svg
mathtext_stix_68.pdf
mathtext_stix_68.png
mathtext_stix_68.svg
mathtext_stix_69.pdf
mathtext_stix_69.png
mathtext_stix_69.svg
mathtext_stix_70.pdf
mathtext_stix_70.png
mathtext_stix_70.svg
mathtext_stix_71.pdf
mathtext_stix_71.png
mathtext_stix_71.svg
mathtext_stix_72.pdf
mathtext_stix_72.png
mathtext_stix_72.svg
mathtext_stix_73.pdf
mathtext_stix_73.png
mathtext_stix_73.svg
mathtext_stix_74.pdf
mathtext_stix_74.png
mathtext_stix_74.svg
mathtext_stix_75.pdf
mathtext_stix_75.png
mathtext_stix_75.svg
mathtext_stix_76.pdf
mathtext_stix_76.png
mathtext_stix_76.svg
mathtext_stix_77.pdf
mathtext_stix_77.png
mathtext_stix_77.svg
mathtext_stix_78.pdf
mathtext_stix_78.png
mathtext_stix_78.svg
mathtext_stix_79.pdf
mathtext_stix_79.png
mathtext_stix_79.svg
mathtext_stix_80.pdf
mathtext_stix_80.png
mathtext_stix_80.svg
mathtext_stix_81.pdf
mathtext_stix_81.png
mathtext_stix_81.svg
mathtext_stix_82.pdf
mathtext_stix_82.png
mathtext_stix_82.svg
mathtext_stixsans_00.pdf
mathtext_stixsans_00.png
mathtext_stixsans_00.svg
mathtext_stixsans_01.pdf
mathtext_stixsans_01.png
mathtext_stixsans_01.svg
mathtext_stixsans_02.pdf
mathtext_stixsans_02.png
mathtext_stixsans_02.svg
mathtext_stixsans_03.pdf
mathtext_stixsans_03.png
mathtext_stixsans_03.svg
mathtext_stixsans_04.pdf
mathtext_stixsans_04.png
mathtext_stixsans_04.svg
mathtext_stixsans_05.pdf
mathtext_stixsans_05.png
mathtext_stixsans_05.svg
mathtext_stixsans_06.pdf
mathtext_stixsans_06.png
mathtext_stixsans_06.svg
mathtext_stixsans_07.pdf
mathtext_stixsans_07.png
mathtext_stixsans_07.svg
mathtext_stixsans_08.pdf
mathtext_stixsans_08.png
mathtext_stixsans_08.svg
mathtext_stixsans_09.pdf
mathtext_stixsans_09.png
mathtext_stixsans_09.svg
mathtext_stixsans_10.pdf
mathtext_stixsans_10.png
mathtext_stixsans_10.svg
mathtext_stixsans_11.pdf
mathtext_stixsans_11.png
mathtext_stixsans_11.svg
mathtext_stixsans_12.pdf
mathtext_stixsans_12.png
mathtext_stixsans_12.svg
mathtext_stixsans_13.pdf
mathtext_stixsans_13.png
mathtext_stixsans_13.svg
mathtext_stixsans_14.pdf
mathtext_stixsans_14.png
mathtext_stixsans_14.svg
mathtext_stixsans_15.pdf
mathtext_stixsans_15.png
mathtext_stixsans_15.svg
mathtext_stixsans_16.pdf
mathtext_stixsans_16.png
mathtext_stixsans_16.svg
mathtext_stixsans_17.pdf
mathtext_stixsans_17.png
mathtext_stixsans_17.svg
mathtext_stixsans_18.pdf
mathtext_stixsans_18.png
mathtext_stixsans_18.svg
mathtext_stixsans_19.pdf
mathtext_stixsans_19.png
mathtext_stixsans_19.svg
mathtext_stixsans_20.pdf
mathtext_stixsans_20.png
mathtext_stixsans_20.svg
mathtext_stixsans_21.pdf
mathtext_stixsans_21.png
mathtext_stixsans_21.svg
mathtext_stixsans_22.pdf
mathtext_stixsans_22.png
mathtext_stixsans_22.svg
mathtext_stixsans_23.pdf
mathtext_stixsans_23.png
mathtext_stixsans_23.svg
mathtext_stixsans_24.pdf
mathtext_stixsans_24.png
mathtext_stixsans_24.svg
mathtext_stixsans_25.pdf
mathtext_stixsans_25.png
mathtext_stixsans_25.svg
mathtext_stixsans_26.pdf
mathtext_stixsans_26.png
mathtext_stixsans_26.svg
mathtext_stixsans_27.pdf
mathtext_stixsans_27.png
mathtext_stixsans_27.svg
mathtext_stixsans_28.pdf
mathtext_stixsans_28.png
mathtext_stixsans_28.svg
mathtext_stixsans_29.pdf
mathtext_stixsans_29.png
mathtext_stixsans_29.svg
mathtext_stixsans_30.pdf
mathtext_stixsans_30.png
mathtext_stixsans_30.svg
mathtext_stixsans_31.pdf
mathtext_stixsans_31.png
mathtext_stixsans_31.svg
mathtext_stixsans_32.pdf
mathtext_stixsans_32.png
mathtext_stixsans_32.svg
mathtext_stixsans_33.pdf
mathtext_stixsans_33.png
mathtext_stixsans_33.svg
mathtext_stixsans_34.pdf
mathtext_stixsans_34.png
mathtext_stixsans_34.svg
mathtext_stixsans_35.pdf
mathtext_stixsans_35.png
mathtext_stixsans_35.svg
mathtext_stixsans_36.pdf
mathtext_stixsans_36.png
mathtext_stixsans_36.svg
mathtext_stixsans_37.pdf
mathtext_stixsans_37.png
mathtext_stixsans_37.svg
mathtext_stixsans_38.pdf
mathtext_stixsans_38.png
mathtext_stixsans_38.svg
mathtext_stixsans_39.pdf
mathtext_stixsans_39.png
mathtext_stixsans_39.svg
mathtext_stixsans_40.pdf
mathtext_stixsans_40.png
mathtext_stixsans_40.svg
mathtext_stixsans_41.pdf
mathtext_stixsans_41.png
mathtext_stixsans_41.svg
mathtext_stixsans_42.pdf
mathtext_stixsans_42.png
mathtext_stixsans_42.svg
mathtext_stixsans_43.pdf
mathtext_stixsans_43.png
mathtext_stixsans_43.svg
mathtext_stixsans_44.pdf
mathtext_stixsans_44.png
mathtext_stixsans_44.svg
mathtext_stixsans_45.pdf
mathtext_stixsans_45.png
mathtext_stixsans_45.svg
mathtext_stixsans_46.pdf
mathtext_stixsans_46.png
mathtext_stixsans_46.svg
mathtext_stixsans_47.pdf
mathtext_stixsans_47.png
mathtext_stixsans_47.svg
mathtext_stixsans_48.pdf
mathtext_stixsans_48.png
mathtext_stixsans_48.svg
mathtext_stixsans_49.pdf
mathtext_stixsans_49.png
mathtext_stixsans_49.svg
mathtext_stixsans_50.pdf
mathtext_stixsans_50.png
mathtext_stixsans_50.svg
mathtext_stixsans_51.pdf
mathtext_stixsans_51.png
mathtext_stixsans_51.svg
mathtext_stixsans_52.pdf
mathtext_stixsans_52.png
mathtext_stixsans_52.svg
mathtext_stixsans_53.pdf
mathtext_stixsans_53.png
mathtext_stixsans_53.svg
mathtext_stixsans_54.pdf
mathtext_stixsans_54.png
mathtext_stixsans_54.svg
mathtext_stixsans_55.pdf
mathtext_stixsans_55.png
mathtext_stixsans_55.svg
mathtext_stixsans_56.pdf
mathtext_stixsans_56.png
mathtext_stixsans_56.svg
mathtext_stixsans_57.pdf
mathtext_stixsans_57.png
mathtext_stixsans_57.svg
mathtext_stixsans_58.pdf
mathtext_stixsans_58.png
mathtext_stixsans_58.svg
mathtext_stixsans_59.pdf
mathtext_stixsans_59.png
mathtext_stixsans_59.svg
mathtext_stixsans_60.pdf
mathtext_stixsans_60.png
mathtext_stixsans_60.svg
mathtext_stixsans_61.pdf
mathtext_stixsans_61.png
mathtext_stixsans_61.svg
mathtext_stixsans_62.pdf
mathtext_stixsans_62.png
mathtext_stixsans_62.svg
mathtext_stixsans_63.pdf
mathtext_stixsans_63.png
mathtext_stixsans_63.svg
mathtext_stixsans_64.pdf
mathtext_stixsans_64.png
mathtext_stixsans_64.svg
mathtext_stixsans_65.pdf
mathtext_stixsans_65.png
mathtext_stixsans_65.svg
mathtext_stixsans_66.pdf
mathtext_stixsans_66.png
mathtext_stixsans_66.svg
mathtext_stixsans_67.pdf
mathtext_stixsans_67.png
mathtext_stixsans_67.svg
mathtext_stixsans_68.pdf
mathtext_stixsans_68.png
mathtext_stixsans_68.svg
mathtext_stixsans_69.pdf
mathtext_stixsans_69.png
mathtext_stixsans_69.svg
mathtext_stixsans_70.pdf
mathtext_stixsans_70.png
mathtext_stixsans_70.svg
mathtext_stixsans_71.pdf
mathtext_stixsans_71.png
mathtext_stixsans_71.svg
mathtext_stixsans_72.pdf
mathtext_stixsans_72.png
mathtext_stixsans_72.svg
mathtext_stixsans_73.pdf
mathtext_stixsans_73.png
mathtext_stixsans_73.svg
mathtext_stixsans_74.pdf
mathtext_stixsans_74.png
mathtext_stixsans_74.svg
mathtext_stixsans_75.pdf
mathtext_stixsans_75.png
mathtext_stixsans_75.svg
mathtext_stixsans_76.pdf
mathtext_stixsans_76.png
mathtext_stixsans_76.svg
mathtext_stixsans_77.pdf
mathtext_stixsans_77.png
mathtext_stixsans_77.svg
mathtext_stixsans_78.pdf
mathtext_stixsans_78.png
mathtext_stixsans_78.svg
mathtext_stixsans_79.pdf
mathtext_stixsans_79.png
mathtext_stixsans_79.svg
mathtext_stixsans_80.pdf
mathtext_stixsans_80.png
mathtext_stixsans_80.svg
mathtext_stixsans_81.pdf
mathtext_stixsans_81.png
mathtext_stixsans_81.svg
mathtext_stixsans_82.pdf
mathtext_stixsans_82.png
mathtext_stixsans_82.svg

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/tests/baseline_images/test_offsetbox:
offsetbox_clipping.pdf
offsetbox_clipping.png
offsetbox_clipping.svg

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/tests/baseline_images/test_patches:
clip_to_bbox.pdf
clip_to_bbox.png
clip_to_bbox.svg
connection_patch.png
multi_color_hatch.pdf
multi_color_hatch.png
multi_color_hatch.svg
patch_alpha_coloring.pdf
patch_alpha_coloring.png
patch_alpha_coloring.svg
patch_alpha_override.pdf
patch_alpha_override.png
patch_alpha_override.svg
patch_custom_linestyle.pdf
patch_custom_linestyle.png
patch_custom_linestyle.svg
units_rectangle.png
wedge_range.pdf
wedge_range.png
wedge_range.svg

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/tests/baseline_images/test_path:
arrow_contains_point.png
marker_paths.pdf
nan_path.eps
nan_path.pdf
nan_path.png
nan_path.svg
path_clipping.svg
semi_log_with_zero.png
xkcd.png
xkcd_marker.png

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/tests/baseline_images/test_patheffects:
collection.pdf
collection.png
collection.svg
patheffect1.pdf
patheffect1.png
patheffect1.svg
patheffect2.pdf
patheffect2.png
patheffect2.svg
patheffect3.pdf
patheffect3.png
patheffect3.svg
stroked_text.png

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/tests/baseline_images/test_pickle:
multi_pickle.png

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/tests/baseline_images/test_png:
pngsuite.png
uint16.png

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/tests/baseline_images/test_quiver:
barbs_pivot_test_image.png
barbs_test_flip.png
barbs_test_image.png
quiver_animated_test_image.png
quiver_key_pivot.png
quiver_key_xy.png
quiver_single_test_image.png
quiver_with_key_test_image.png
quiver_xy.png

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/tests/baseline_images/test_scale:
function_scales.png
logit_scales.png
logscale_mask.png
logscale_nonpos_values.png

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/tests/baseline_images/test_simplification:
clipper_edge.pdf
clipper_edge.png
clipper_edge.svg
clipping.pdf
clipping.png
clipping.svg
clipping_diamond.pdf
clipping_diamond.png
clipping_diamond.svg
clipping_with_nans.pdf
clipping_with_nans.png
clipping_with_nans.svg
fft_peaks.pdf
fft_peaks.png
fft_peaks.svg
hatch_simplify.pdf
hatch_simplify.png
hatch_simplify.svg
overflow.pdf
overflow.png
overflow.svg
para_equal_perp.pdf
para_equal_perp.png
para_equal_perp.svg
simplify_curve.pdf
simplify_curve.png
simplify_curve.svg

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/tests/baseline_images/test_skew:
skew_axes.pdf
skew_axes.png
skew_axes.svg
skew_rects.pdf
skew_rects.png
skew_rects.svg

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/tests/baseline_images/test_spines:
spines_axes_positions.pdf
spines_axes_positions.png
spines_axes_positions.svg
spines_capstyle.pdf
spines_capstyle.png
spines_capstyle.svg
spines_data_positions.pdf
spines_data_positions.png
spines_data_positions.svg

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/tests/baseline_images/test_streamplot:
streamplot_colormap.pdf
streamplot_colormap.png
streamplot_colormap.svg
streamplot_direction.png
streamplot_linewidth.pdf
streamplot_linewidth.png
streamplot_linewidth.svg
streamplot_masks_and_nans.pdf
streamplot_masks_and_nans.png
streamplot_masks_and_nans.svg
streamplot_maxlength.png
streamplot_startpoints.pdf
streamplot_startpoints.png
streamplot_startpoints.svg

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/tests/baseline_images/test_subplots:
subplots_offset_text.pdf
subplots_offset_text.png
subplots_offset_text.svg

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/tests/baseline_images/test_table:
table_auto_column.png
table_cell_manipulation.png
table_labels.png
table_zorder.png

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/tests/baseline_images/test_text:
agg_text_clip.png
annotation_negative_ax_coords.png
annotation_negative_fig_coords.png
antialiased.png
axes_titles.png
basictext_wrap.png
font_scaling.pdf
font_styles.pdf
font_styles.png
font_styles.svg
fonttext_wrap.png
large_subscript_title.png
multiline.pdf
multiline.png
multiline.svg
multiline2.pdf
multiline2.png
multiline2.svg
text_alignment.pdf
text_alignment.png
text_alignment.svg
text_as_path_opacity.svg
text_as_text_opacity.svg
text_bboxclip.pdf
text_bboxclip.png
text_bboxclip.svg
text_contains.png
titles.pdf
titles.png
titles.svg

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/tests/baseline_images/test_tightlayout:
tight_layout1.pdf
tight_layout1.png
tight_layout1.svg
tight_layout2.pdf
tight_layout2.png
tight_layout2.svg
tight_layout3.pdf
tight_layout3.png
tight_layout3.svg
tight_layout4.pdf
tight_layout4.png
tight_layout4.svg
tight_layout5.pdf
tight_layout5.png
tight_layout5.svg
tight_layout6.pdf
tight_layout6.png
tight_layout6.svg
tight_layout7.pdf
tight_layout7.png
tight_layout7.svg
tight_layout8.pdf
tight_layout8.png
tight_layout8.svg
tight_layout9.pdf
tight_layout9.png
tight_layout9.svg
tight_layout_offsetboxes1.pdf
tight_layout_offsetboxes1.png
tight_layout_offsetboxes1.svg
tight_layout_offsetboxes2.pdf
tight_layout_offsetboxes2.png
tight_layout_offsetboxes2.svg

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/tests/baseline_images/test_transforms:
pre_transform_data.pdf
pre_transform_data.png
pre_transform_data.svg

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/tests/baseline_images/test_triangulation:
tri_smooth_contouring.png
tri_smooth_gradient.png
tripcolor1.png

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/tests/baseline_images/test_ttconv:
truetype-conversion.pdf

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/tests/baseline_images/test_units:
jpl_bar_units.png
jpl_barh_units.png
plot_masked_units.png
plot_pint.png

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/tests/baseline_images/test_usetex:
test_usetex.pdf
test_usetex.png

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/tests/baseline_images/test_widgets:
check_bunch_of_radio_buttons.png
check_radio_buttons.png

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/tri:
__init__.py
triangulation.py
tricontour.py
trifinder.py
triinterpolate.py
tripcolor.py
triplot.py
trirefine.py
tritools.py

/workspace/matplotlib__matplotlib__3.1/lib/matplotlib.egg-info:
PKG-INFO
SOURCES.txt
dependency_links.txt
namespace_packages.txt
not-zip-safe
requires.txt
top_level.txt

/workspace/matplotlib__matplotlib__3.1/lib/mpl_toolkits:
__init__.py
axes_grid
axes_grid1
axisartist
mplot3d
tests

/workspace/matplotlib__matplotlib__3.1/lib/mpl_toolkits/axes_grid:
__init__.py
anchored_artists.py
angle_helper.py
axes_divider.py
axes_grid.py
axes_rgb.py
axes_size.py
axis_artist.py
axisline_style.py
axislines.py
clip_path.py
colorbar.py
floating_axes.py
grid_finder.py
grid_helper_curvelinear.py
inset_locator.py
parasite_axes.py

/workspace/matplotlib__matplotlib__3.1/lib/mpl_toolkits/axes_grid1:
__init__.py
anchored_artists.py
axes_divider.py
axes_grid.py
axes_rgb.py
axes_size.py
colorbar.py
inset_locator.py
mpl_axes.py
parasite_axes.py

/workspace/matplotlib__matplotlib__3.1/lib/mpl_toolkits/axisartist:
__init__.py
angle_helper.py
axes_divider.py
axes_grid.py
axes_rgb.py
axis_artist.py
axisline_style.py
axislines.py
clip_path.py
floating_axes.py
grid_finder.py
grid_helper_curvelinear.py
parasite_axes.py

/workspace/matplotlib__matplotlib__3.1/lib/mpl_toolkits/mplot3d:
__init__.py
art3d.py
axes3d.py
axis3d.py
proj3d.py

/workspace/matplotlib__matplotlib__3.1/lib/mpl_toolkits/tests:
__init__.py
baseline_images
conftest.py
test_axes_grid.py
test_axes_grid1.py
test_axisartist_angle_helper.py
test_axisartist_axis_artist.py
test_axisartist_axislines.py
test_axisartist_clip_path.py
test_axisartist_floating_axes.py
test_axisartist_grid_finder.py
test_axisartist_grid_helper_curvelinear.py
test_mplot3d.py

/workspace/matplotlib__matplotlib__3.1/lib/mpl_toolkits/tests/baseline_images:
test_axes_grid
test_axes_grid1
test_axisartist_axis_artist
test_axisartist_axislines
test_axisartist_clip_path
test_axisartist_floating_axes
test_axisartist_grid_helper_curvelinear
test_mplot3d

/workspace/matplotlib__matplotlib__3.1/lib/mpl_toolkits/tests/baseline_images/test_axes_grid:
imagegrid_cbar_mode.png

/workspace/matplotlib__matplotlib__3.1/lib/mpl_toolkits/tests/baseline_images/test_axes_grid1:
anchored_direction_arrows.png
anchored_direction_arrows_many_args.png
divider_append_axes.pdf
divider_append_axes.png
divider_append_axes.svg
fill_facecolor.png
image_grid.png
inset_axes.png
inset_locator.png
inverted_zoomed_axes.png
twin_axes_empty_and_removed.png
zoomed_axes.png

/workspace/matplotlib__matplotlib__3.1/lib/mpl_toolkits/tests/baseline_images/test_axisartist_axis_artist:
axis_artist.png
axis_artist_labelbase.png
axis_artist_ticklabels.png
axis_artist_ticks.png

/workspace/matplotlib__matplotlib__3.1/lib/mpl_toolkits/tests/baseline_images/test_axisartist_axislines:
ParasiteAxesAuxTrans_meshplot.png
Subplot.png
SubplotZero.png

/workspace/matplotlib__matplotlib__3.1/lib/mpl_toolkits/tests/baseline_images/test_axisartist_clip_path:
clip_path.png

/workspace/matplotlib__matplotlib__3.1/lib/mpl_toolkits/tests/baseline_images/test_axisartist_floating_axes:
curvelinear3.png
curvelinear4.png

/workspace/matplotlib__matplotlib__3.1/lib/mpl_toolkits/tests/baseline_images/test_axisartist_grid_helper_curvelinear:
axis_direction.png
custom_transform.png
polar_box.png

/workspace/matplotlib__matplotlib__3.1/lib/mpl_toolkits/tests/baseline_images/test_mplot3d:
axes3d_cla.png
axes3d_labelpad.png
axes3d_ortho.pdf
axes3d_ortho.png
axes3d_ortho.svg
bar3d.pdf
bar3d.png
bar3d.svg
bar3d_notshaded.png
bar3d_shaded.png
contour3d.pdf
contour3d.png
contour3d.svg
contourf3d.pdf
contourf3d.png
contourf3d.svg
contourf3d_fill.pdf
contourf3d_fill.png
contourf3d_fill.svg
lines3d.pdf
lines3d.png
lines3d.svg
mixedsubplot.pdf
mixedsubplot.png
mixedsubplot.svg
plot_3d_from_2d.png
poly3dcollection_alpha.png
poly3dcollection_closed.pdf
poly3dcollection_closed.png
poly3dcollection_closed.svg
proj3d_axes_cube.png
proj3d_axes_cube_ortho.png
proj3d_lines_dists.png
quiver3d.pdf
quiver3d.png
quiver3d.svg
quiver3d_empty.pdf
quiver3d_empty.png
quiver3d_empty.svg
quiver3d_masked.pdf
quiver3d_masked.png
quiver3d_masked.svg
quiver3d_pivot_middle.png
quiver3d_pivot_tail.png
scatter3d.pdf
scatter3d.png
scatter3d.svg
scatter3d_color.png
surface3d.pdf
surface3d.png
surface3d.svg
surface3d_shaded.png
text3d.pdf
text3d.png
text3d.svg
tricontour.png
trisurf3d.pdf
trisurf3d.png
trisurf3d.svg
trisurf3d_shaded.png
voxels-alpha.png
voxels-edge-style.png
voxels-named-colors.png
voxels-rgb-data.png
voxels-simple.png
voxels-xyz.png
wireframe3d.pdf
wireframe3d.png
wireframe3d.svg
wireframe3dzerocstride.png
wireframe3dzerorstride.png

/workspace/matplotlib__matplotlib__3.1/requirements:
doc
testing

/workspace/matplotlib__matplotlib__3.1/requirements/doc:
doc-requirements.txt

/workspace/matplotlib__matplotlib__3.1/requirements/testing:
travis36.txt
travis36minver.txt
travis_all.txt
travis_flake8.txt

/workspace/matplotlib__matplotlib__3.1/src:
_backend_agg.cpp
_backend_agg.h
_backend_agg_basic_types.h
_backend_agg_wrapper.cpp
_contour.cpp
_contour.h
_contour_wrapper.cpp
_image.cpp
_image.h
_image_resample.h
_image_wrapper.cpp
_macosx.m
_path.h
_path_wrapper.cpp
_png.cpp
_tkagg.cpp
_tkmini.h
_ttconv.cpp
agg_workaround.h
array.h
checkdep_freetype2.c
checkdep_libpng.c
doc
file_compat.h
ft2font.cpp
ft2font.h
ft2font_wrapper.cpp
mplutils.cpp
mplutils.h
numpy_cpp.h
path_converters.h
py_adaptors.h
py_converters.cpp
py_converters.h
py_exceptions.h
qhull_wrap.c
tri

/workspace/matplotlib__matplotlib__3.1/src/doc:
segment_intersects_rectangle.svg

/workspace/matplotlib__matplotlib__3.1/src/tri:
_tri.cpp
_tri.h
_tri_wrapper.cpp

/workspace/matplotlib__matplotlib__3.1/tools:
README.txt
boilerplate.py
compare_backend_driver_results.py
create_DejaVuDisplay.sh
gh_api.py
github_stats.py
make_icons.py
memleak.py
subset.py
triage_tests.py
visualize_tests.py

/workspace/matplotlib__matplotlib__3.1/tutorials:
README.txt
advanced
colors
intermediate
introductory
text
toolkits

/workspace/matplotlib__matplotlib__3.1/tutorials/advanced:
README.txt
path_tutorial.py
patheffects_guide.py
transforms_tutorial.py

/workspace/matplotlib__matplotlib__3.1/tutorials/colors:
README.txt
colorbar_only.py
colormap-manipulation.py
colormapnorms.py
colormaps.py
colors.py

/workspace/matplotlib__matplotlib__3.1/tutorials/intermediate:
README.txt
artists.py
color_cycle.py
constrainedlayout_guide.py
gridspec.py
imshow_extent.py
legend_guide.py
tight_layout_guide.py

/workspace/matplotlib__matplotlib__3.1/tutorials/introductory:
README.txt
customizing.py
images.py
lifecycle.py
pyplot.py
sample_plots.py
usage.py

/workspace/matplotlib__matplotlib__3.1/tutorials/text:
README.txt
annotations.py
mathtext.py
pgf.py
text_intro.py
text_props.py
usetex.py

/workspace/matplotlib__matplotlib__3.1/tutorials/toolkits:
README.txt
axes_grid.py
axisartist.py
mplot3d.py

[Select the relevant files and use repo map to get highlevel representation and structure of repo]


============================================================



ACTION:

THOUGHT: Let me first create a script to reproduce the error as mentioned in the PR description:
CODE:
CODE = """
import numpy as np
import matplotlib.pyplot as plt

y = np.linspace(1000e2, 1, 100)
x = np.exp(-np.linspace(0, 1, y.size))

for yscale in ('linear', 'log'):
    fig, ax = plt.subplots()
    ax.plot(x, y)
    ax.set_yscale(yscale)
    ax.set_ylim(y.max(), y.min())
    plt.savefig(f'{yscale}_scale.png')
    plt.close()
"""
create_file('reproduce_bug.py', CODE)

============================================================



OBSERVATION:

[File reproduce_bug.py created.]
[File: /workspace/reproduce_bug.py (14 lines total after edit)]
1|
2|import numpy as np
3|import matplotlib.pyplot as plt
4|
5|y = np.linspace(1000e2, 1, 100)
6|x = np.exp(-np.linspace(0, 1, y.size))
7|
8|for yscale in ('linear', 'log'):
9|    fig, ax = plt.subplots()
10|    ax.plot(x, y)
11|    ax.set_yscale(yscale)
12|    ax.set_ylim(y.max(), y.min())
13|    plt.savefig(f'{yscale}_scale.png')
14|    plt.close()
[File updated. Please review the changes carefully and make sure they are correct (correct indentation, no duplicate or redundant lines etc). Edit the file again if necessary.]


============================================================



ACTION:

THOUGHT: Let's run the script to reproduce the issue:
COMMAND:
python3 reproduce_bug.py

============================================================



OBSERVATION:

[Code executed successfully with no output]

============================================================



ACTION:

THOUGHT: The script has generated two images. Let me verify the issue by checking if the y-axis is inverted correctly in both cases.

The issue seems to be that when using log scale, setting ylim(max, min) doesn't invert the axis as expected. This likely means we need to investigate the axis inversion logic in matplotlib's scale transformation code.

Let me look at the relevant files. Based on the repository structure, the scale transformations and axis handling would likely be in the core matplotlib library under lib/matplotlib/:
CODE:
open_file('/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/scale.py')

============================================================



OBSERVATION:

[File: /workspace/matplotlib__matplotlib__3.1/lib/matplotlib/scale.py (777 lines total)]
1|import inspect
2|import textwrap
3|
4|import numpy as np
5|from numpy import ma
6|
7|from matplotlib import cbook, docstring, rcParams
8|from matplotlib.ticker import (
9|    NullFormatter, ScalarFormatter, LogFormatterSciNotation, LogitFormatter,
10|    NullLocator, LogLocator, AutoLocator, AutoMinorLocator,
11|    SymmetricalLogLocator, LogitLocator)
12|from matplotlib.transforms import Transform, IdentityTransform
13|
14|
15|class ScaleBase(object):
16|    """
17|    The base class for all scales.
18|
19|    Scales are separable transformations, working on a single dimension.
20|
21|    Any subclasses will want to override:
22|
23|      - :attr:`name`
24|      - :meth:`get_transform`
25|      - :meth:`set_default_locators_and_formatters`
26|
27|    And optionally:
28|      - :meth:`limit_range_for_scale`
29|    """
30|
31|    def __init__(self, axis, **kwargs):
32|        r"""
33|        Construct a new scale.
34|
35|        Notes
36|        -----
37|        The following note is for scale implementors.
38|
39|        For back-compatibility reasons, scales take an `~matplotlib.axis.Axis`
40|        object as first argument.  However, this argument should not
41|        be used: a single scale object should be usable by multiple
42|        `~matplotlib.axis.Axis`\es at the same time.
43|        """
44|
45|    def get_transform(self):
46|        """
47|        Return the :class:`~matplotlib.transforms.Transform` object
48|        associated with this scale.
49|        """
50|        raise NotImplementedError()
51|
52|    def set_default_locators_and_formatters(self, axis):
53|        """
54|        Set the :class:`~matplotlib.ticker.Locator` and
55|        :class:`~matplotlib.ticker.Formatter` objects on the given
56|        axis to match this scale.
57|        """
58|        raise NotImplementedError()
59|
60|    def limit_range_for_scale(self, vmin, vmax, minpos):
61|        """
62|        Returns the range *vmin*, *vmax*, possibly limited to the
63|        domain supported by this scale.
64|
65|        *minpos* should be the minimum positive value in the data.
66|         This is used by log scales to determine a minimum value.
67|        """
68|        return vmin, vmax
69|
70|
71|class LinearScale(ScaleBase):
72|    """
73|    The default linear scale.
74|    """
75|
76|    name = 'linear'
77|
78|    def __init__(self, axis, **kwargs):
79|        # This method is present only to prevent inheritance of the base class'
80|        # constructor docstring, which would otherwise end up interpolated into
81|        # the docstring of Axis.set_scale.
82|        """
83|        """
84|        super().__init__(axis, **kwargs)
85|
86|    def set_default_locators_and_formatters(self, axis):
87|        """
88|        Set the locators and formatters to reasonable defaults for
89|        linear scaling.
90|        """
91|        axis.set_major_locator(AutoLocator())
92|        axis.set_major_formatter(ScalarFormatter())
93|        axis.set_minor_formatter(NullFormatter())
94|        # update the minor locator for x and y axis based on rcParams
95|        if (axis.axis_name == 'x' and rcParams['xtick.minor.visible']
96|            or axis.axis_name == 'y' and rcParams['ytick.minor.visible']):
97|            axis.set_minor_locator(AutoMinorLocator())
98|        else:
99|            axis.set_minor_locator(NullLocator())
100|
101|    def get_transform(self):
102|        """
103|        The transform for linear scaling is just the
104|        :class:`~matplotlib.transforms.IdentityTransform`.
105|        """
106|        return IdentityTransform()
107|
108|
109|class FuncTransform(Transform):
110|    """
111|    A simple transform that takes and arbitrary function for the
112|    forward and inverse transform.
113|    """
114|
115|    input_dims = 1
116|    output_dims = 1
117|    is_separable = True
118|    has_inverse = True
119|
120|    def __init__(self, forward, inverse):
121|        """
122|        Parameters
123|        ----------
124|
125|        forward : callable
126|            The forward function for the transform.  This function must have
127|            an inverse and, for best behavior, be monotonic.
128|            It must have the signature::
129|
130|               def forward(values: array-like) -> array-like
131|
132|        inverse : callable
133|            The inverse of the forward function.  Signature as ``forward``.
134|        """
135|        super().__init__()
136|        if callable(forward) and callable(inverse):
137|            self._forward = forward
138|            self._inverse = inverse
139|        else:
140|            raise ValueError('arguments to FuncTransform must '
141|                             'be functions')
142|
143|    def transform_non_affine(self, values):
144|        return self._forward(values)
145|
146|    def inverted(self):
147|        return FuncTransform(self._inverse, self._forward)
148|
149|
150|class FuncScale(ScaleBase):
151|    """
152|    Provide an arbitrary scale with user-supplied function for the axis.
153|    """
154|
155|    name = 'function'
156|
157|    def __init__(self, axis, functions):
158|        """
159|        Parameters
160|        ----------
161|
162|        axis: the axis for the scale
163|
164|        functions : (callable, callable)
165|            two-tuple of the forward and inverse functions for the scale.
166|            The forward function must be monotonic.
167|
168|            Both functions must have the signature::
169|
170|               def forward(values: array-like) -> array-like
171|        """
172|        forward, inverse = functions
173|        transform = FuncTransform(forward, inverse)
174|        self._transform = transform
175|
176|    def get_transform(self):
177|        """
178|        The transform for arbitrary scaling
179|        """
180|        return self._transform
181|
182|    def set_default_locators_and_formatters(self, axis):
183|        """
184|        Set the locators and formatters to the same defaults as the
185|        linear scale.
186|        """
187|        axis.set_major_locator(AutoLocator())
188|        axis.set_major_formatter(ScalarFormatter())
189|        axis.set_minor_formatter(NullFormatter())
190|        # update the minor locator for x and y axis based on rcParams
191|        if (axis.axis_name == 'x' and rcParams['xtick.minor.visible']
192|            or axis.axis_name == 'y' and rcParams['ytick.minor.visible']):
193|            axis.set_minor_locator(AutoMinorLocator())
194|        else:
195|            axis.set_minor_locator(NullLocator())
196|
197|
198|@cbook.deprecated("3.1", alternative="LogTransform")
199|class LogTransformBase(Transform):
200|    input_dims = 1
201|    output_dims = 1
202|    is_separable = True
203|    has_inverse = True
204|
205|    def __init__(self, nonpos='clip'):
206|        Transform.__init__(self)
207|        self._clip = {"clip": True, "mask": False}[nonpos]
208|
209|    def transform_non_affine(self, a):
210|        return LogTransform.transform_non_affine(self, a)
211|
212|    def __str__(self):
213|        return "{}({!r})".format(
214|            type(self).__name__, "clip" if self._clip else "mask")
215|
216|
217|@cbook.deprecated("3.1", alternative="InvertedLogTransform")
218|class InvertedLogTransformBase(Transform):
219|    input_dims = 1
220|    output_dims = 1
221|    is_separable = True
222|    has_inverse = True
223|
224|    def transform_non_affine(self, a):
225|        return ma.power(self.base, a)
226|
227|    def __str__(self):
228|        return "{}()".format(type(self).__name__)
229|
230|
231|@cbook.deprecated("3.1", alternative="LogTransform")
232|class Log10Transform(LogTransformBase):
233|    base = 10.0
234|
235|    def inverted(self):
236|        return InvertedLog10Transform()
237|
238|
239|@cbook.deprecated("3.1", alternative="InvertedLogTransform")
240|class InvertedLog10Transform(InvertedLogTransformBase):
241|    base = 10.0
242|
243|    def inverted(self):
244|        return Log10Transform()
245|
246|
247|@cbook.deprecated("3.1", alternative="LogTransform")
248|class Log2Transform(LogTransformBase):
249|    base = 2.0
250|
251|    def inverted(self):
252|        return InvertedLog2Transform()
253|
254|
255|@cbook.deprecated("3.1", alternative="InvertedLogTransform")
256|class InvertedLog2Transform(InvertedLogTransformBase):
257|    base = 2.0
258|
259|    def inverted(self):
260|        return Log2Transform()
261|
262|
263|@cbook.deprecated("3.1", alternative="LogTransform")
264|class NaturalLogTransform(LogTransformBase):
265|    base = np.e
266|
267|    def inverted(self):
268|        return InvertedNaturalLogTransform()
269|
270|
271|@cbook.deprecated("3.1", alternative="InvertedLogTransform")
272|class InvertedNaturalLogTransform(InvertedLogTransformBase):
273|    base = np.e
274|
275|    def inverted(self):
276|        return NaturalLogTransform()
277|
278|
279|class LogTransform(Transform):
280|    input_dims = 1
281|    output_dims = 1
282|    is_separable = True
283|    has_inverse = True
284|
285|    def __init__(self, base, nonpos='clip'):
286|        Transform.__init__(self)
287|        self.base = base
288|        self._clip = {"clip": True, "mask": False}[nonpos]
289|
290|    def __str__(self):
291|        return "{}(base={}, nonpos={!r})".format(
292|            type(self).__name__, self.base, "clip" if self._clip else "mask")
293|
294|    def transform_non_affine(self, a):
295|        # Ignore invalid values due to nans being passed to the transform.
296|        with np.errstate(divide="ignore", invalid="ignore"):
297|            log = {np.e: np.log, 2: np.log2, 10: np.log10}.get(self.base)
298|            if log:  # If possible, do everything in a single call to Numpy.
299|                out = log(a)
300|            else:
301|                out = np.log(a)
302|                out /= np.log(self.base)
303|            if self._clip:
304|                # SVG spec says that conforming viewers must support values up
305|                # to 3.4e38 (C float); however experiments suggest that
306|                # Inkscape (which uses cairo for rendering) runs into cairo's
307|                # 24-bit limit (which is apparently shared by Agg).
308|                # Ghostscript (used for pdf rendering appears to overflow even
309|                # earlier, with the max value around 2 ** 15 for the tests to
310|                # pass. On the other hand, in practice, we want to clip beyond
311|                #     np.log10(np.nextafter(0, 1)) ~ -323
312|                # so 1000 seems safe.
313|                out[a <= 0] = -1000
314|        return out
315|
316|    def inverted(self):
317|        return InvertedLogTransform(self.base)
318|
319|
320|class InvertedLogTransform(InvertedLogTransformBase):
321|    input_dims = 1
322|    output_dims = 1
323|    is_separable = True
324|    has_inverse = True
325|
326|    def __init__(self, base):
327|        Transform.__init__(self)
328|        self.base = base
329|
330|    def __str__(self):
331|        return "{}(base={})".format(type(self).__name__, self.base)
332|
333|    def transform_non_affine(self, a):
334|        return ma.power(self.base, a)
335|
336|    def inverted(self):
337|        return LogTransform(self.base)
338|
339|
340|class LogScale(ScaleBase):
341|    """
342|    A standard logarithmic scale.  Care is taken to only plot positive values.
343|    """
344|    name = 'log'
345|
346|    # compatibility shim
347|    LogTransformBase = LogTransformBase
348|    Log10Transform = Log10Transform
349|    InvertedLog10Transform = InvertedLog10Transform
350|    Log2Transform = Log2Transform
351|    InvertedLog2Transform = InvertedLog2Transform
352|    NaturalLogTransform = NaturalLogTransform
353|    InvertedNaturalLogTransform = InvertedNaturalLogTransform
354|    LogTransform = LogTransform
355|    InvertedLogTransform = InvertedLogTransform
356|
357|    def __init__(self, axis, **kwargs):
358|        """
359|        *basex*/*basey*:
360|           The base of the logarithm
361|
362|        *nonposx*/*nonposy*: {'mask', 'clip'}
363|          non-positive values in *x* or *y* can be masked as
364|          invalid, or clipped to a very small positive number
365|
366|        *subsx*/*subsy*:
367|           Where to place the subticks between each major tick.
368|           Should be a sequence of integers.  For example, in a log10
369|           scale: ``[2, 3, 4, 5, 6, 7, 8, 9]``
370|
371|           will place 8 logarithmically spaced minor ticks between
372|           each major tick.
373|        """
374|        if axis.axis_name == 'x':
375|            base = kwargs.pop('basex', 10.0)
376|            subs = kwargs.pop('subsx', None)
377|            nonpos = kwargs.pop('nonposx', 'clip')
378|            cbook._check_in_list(['mask', 'clip'], nonposx=nonpos)
379|        else:
380|            base = kwargs.pop('basey', 10.0)
381|            subs = kwargs.pop('subsy', None)
382|            nonpos = kwargs.pop('nonposy', 'clip')
383|            cbook._check_in_list(['mask', 'clip'], nonposy=nonpos)
384|
385|        if len(kwargs):
386|            raise ValueError(("provided too many kwargs, can only pass "
387|                              "{'basex', 'subsx', nonposx'} or "
388|                              "{'basey', 'subsy', nonposy'}.  You passed ") +
389|                             "{!r}".format(kwargs))
390|
391|        if base <= 0 or base == 1:
392|            raise ValueError('The log base cannot be <= 0 or == 1')
393|
394|        self._transform = self.LogTransform(base, nonpos)
395|        self.subs = subs
396|
397|    @property
398|    def base(self):
399|        return self._transform.base
400|
401|    def set_default_locators_and_formatters(self, axis):
402|        """
403|        Set the locators and formatters to specialized versions for
404|        log scaling.
405|        """
406|        axis.set_major_locator(LogLocator(self.base))
407|        axis.set_major_formatter(LogFormatterSciNotation(self.base))
408|        axis.set_minor_locator(LogLocator(self.base, self.subs))
409|        axis.set_minor_formatter(
410|            LogFormatterSciNotation(self.base,
411|                                    labelOnlyBase=(self.subs is not None)))
412|
413|    def get_transform(self):
414|        """
415|        Return a :class:`~matplotlib.transforms.Transform` instance
416|        appropriate for the given logarithm base.
417|        """
418|        return self._transform
419|
420|    def limit_range_for_scale(self, vmin, vmax, minpos):
421|        """
422|        Limit the domain to positive values.
423|        """
424|        if not np.isfinite(minpos):
425|            minpos = 1e-300  # This value should rarely if ever
426|                             # end up with a visible effect.
427|
428|        return (minpos if vmin <= 0 else vmin,
429|                minpos if vmax <= 0 else vmax)
430|
431|
432|class FuncScaleLog(LogScale):
433|    """
434|    Provide an arbitrary scale with user-supplied function for the axis and
435|    then put on a logarithmic axes.
436|    """
437|
438|    name = 'functionlog'
439|
440|    def __init__(self, axis, functions, base=10):
441|        """
442|        Parameters
443|        ----------
444|
445|        axis: the axis for the scale
446|
447|        functions : (callable, callable)
448|            two-tuple of the forward and inverse functions for the scale.
449|            The forward function must be monotonic.
450|
451|            Both functions must have the signature::
452|
453|                def forward(values: array-like) -> array-like
454|
455|        base : float
456|            logarithmic base of the scale (default = 10)
457|
458|        """
459|        forward, inverse = functions
460|        self.subs = None
461|        self._transform = FuncTransform(forward, inverse) + LogTransform(base)
462|
463|    @property
464|    def base(self):
465|        return self._transform._b.base  # Base of the LogTransform.
466|
467|    def get_transform(self):
468|        """
469|        The transform for arbitrary scaling
470|        """
471|        return self._transform
472|
473|
474|class SymmetricalLogTransform(Transform):
475|    input_dims = 1
476|    output_dims = 1
477|    is_separable = True
478|    has_inverse = True
479|
480|    def __init__(self, base, linthresh, linscale):
481|        Transform.__init__(self)
482|        self.base = base
483|        self.linthresh = linthresh
484|        self.linscale = linscale
485|        self._linscale_adj = (linscale / (1.0 - self.base ** -1))
486|        self._log_base = np.log(base)
487|
488|    def transform_non_affine(self, a):
489|        abs_a = np.abs(a)
490|        with np.errstate(divide="ignore", invalid="ignore"):
491|            out = np.sign(a) * self.linthresh * (
492|                self._linscale_adj +
493|                np.log(abs_a / self.linthresh) / self._log_base)
494|            inside = abs_a <= self.linthresh
495|        out[inside] = a[inside] * self._linscale_adj
496|        return out
497|
498|    def inverted(self):
499|        return InvertedSymmetricalLogTransform(self.base, self.linthresh,
500|                                               self.linscale)
501|
502|
503|class InvertedSymmetricalLogTransform(Transform):
504|    input_dims = 1
505|    output_dims = 1
506|    is_separable = True
507|    has_inverse = True
508|
509|    def __init__(self, base, linthresh, linscale):
510|        Transform.__init__(self)
511|        symlog = SymmetricalLogTransform(base, linthresh, linscale)
512|        self.base = base
513|        self.linthresh = linthresh
514|        self.invlinthresh = symlog.transform(linthresh)
515|        self.linscale = linscale
516|        self._linscale_adj = (linscale / (1.0 - self.base ** -1))
517|
518|    def transform_non_affine(self, a):
519|        abs_a = np.abs(a)
520|        with np.errstate(divide="ignore", invalid="ignore"):
521|            out = np.sign(a) * self.linthresh * (
522|                np.power(self.base,
523|                         abs_a / self.linthresh - self._linscale_adj))
524|            inside = abs_a <= self.invlinthresh
525|        out[inside] = a[inside] / self._linscale_adj
526|        return out
527|
528|    def inverted(self):
529|        return SymmetricalLogTransform(self.base,
530|                                       self.linthresh, self.linscale)
531|
532|
533|class SymmetricalLogScale(ScaleBase):
534|    """
535|    The symmetrical logarithmic scale is logarithmic in both the
536|    positive and negative directions from the origin.
537|
538|    Since the values close to zero tend toward infinity, there is a
539|    need to have a range around zero that is linear.  The parameter
540|    *linthresh* allows the user to specify the size of this range
541|    (-*linthresh*, *linthresh*).
542|
543|    Parameters
544|    ----------
545|    basex, basey : float
546|        The base of the logarithm. Defaults to 10.
547|
548|    linthreshx, linthreshy : float
549|        Defines the range ``(-x, x)``, within which the plot is linear.
550|        This avoids having the plot go to infinity around zero. Defaults to 2.
551|
552|    subsx, subsy : sequence of int
553|        Where to place the subticks between each major tick.
554|        For example, in a log10 scale: ``[2, 3, 4, 5, 6, 7, 8, 9]`` will place
555|        8 logarithmically spaced minor ticks between each major tick.
556|
557|    linscalex, linscaley : float, optional
558|        This allows the linear range ``(-linthresh, linthresh)`` to be
559|        stretched relative to the logarithmic range. Its value is the number of
560|        decades to use for each half of the linear range. For example, when
561|        *linscale* == 1.0 (the default), the space used for the positive and
562|        negative halves of the linear range will be equal to one decade in
563|        the logarithmic range.
564|    """
565|    name = 'symlog'
566|    # compatibility shim
567|    SymmetricalLogTransform = SymmetricalLogTransform
568|    InvertedSymmetricalLogTransform = InvertedSymmetricalLogTransform
569|
570|    def __init__(self, axis, **kwargs):
571|        if axis.axis_name == 'x':
572|            base = kwargs.pop('basex', 10.0)
573|            linthresh = kwargs.pop('linthreshx', 2.0)
574|            subs = kwargs.pop('subsx', None)
575|            linscale = kwargs.pop('linscalex', 1.0)
576|        else:
577|            base = kwargs.pop('basey', 10.0)
578|            linthresh = kwargs.pop('linthreshy', 2.0)
579|            subs = kwargs.pop('subsy', None)
580|            linscale = kwargs.pop('linscaley', 1.0)
581|
582|        if base <= 1.0:
583|            raise ValueError("'basex/basey' must be larger than 1")
584|        if linthresh <= 0.0:
585|            raise ValueError("'linthreshx/linthreshy' must be positive")
586|        if linscale <= 0.0:
587|            raise ValueError("'linscalex/linthreshy' must be positive")
588|
589|        self._transform = self.SymmetricalLogTransform(base,
590|                                                       linthresh,
591|                                                       linscale)
592|
593|        self.base = base
594|        self.linthresh = linthresh
595|        self.linscale = linscale
596|        self.subs = subs
597|
598|    def set_default_locators_and_formatters(self, axis):
599|        """
600|        Set the locators and formatters to specialized versions for
601|        symmetrical log scaling.
602|        """
603|        axis.set_major_locator(SymmetricalLogLocator(self.get_transform()))
604|        axis.set_major_formatter(LogFormatterSciNotation(self.base))
605|        axis.set_minor_locator(SymmetricalLogLocator(self.get_transform(),
606|                                                     self.subs))
607|        axis.set_minor_formatter(NullFormatter())
608|
609|    def get_transform(self):
610|        """
611|        Return a :class:`SymmetricalLogTransform` instance.
612|        """
613|        return self._transform
614|
615|
616|class LogitTransform(Transform):
617|    input_dims = 1
618|    output_dims = 1
619|    is_separable = True
620|    has_inverse = True
621|
622|    def __init__(self, nonpos='mask'):
623|        Transform.__init__(self)
624|        self._nonpos = nonpos
625|        self._clip = {"clip": True, "mask": False}[nonpos]
626|
627|    def transform_non_affine(self, a):
628|        """logit transform (base 10), masked or clipped"""
629|        with np.errstate(divide="ignore", invalid="ignore"):
630|            out = np.log10(a / (1 - a))
631|        if self._clip:  # See LogTransform for choice of clip value.
632|            out[a <= 0] = -1000
633|            out[1 <= a] = 1000
634|        return out
635|
636|    def inverted(self):
637|        return LogisticTransform(self._nonpos)
638|
639|    def __str__(self):
640|        return "{}({!r})".format(type(self).__name__,
641|            "clip" if self._clip else "mask")
642|
643|
644|class LogisticTransform(Transform):
645|    input_dims = 1
646|    output_dims = 1
647|    is_separable = True
648|    has_inverse = True
649|
650|    def __init__(self, nonpos='mask'):
651|        Transform.__init__(self)
652|        self._nonpos = nonpos
653|
654|    def transform_non_affine(self, a):
655|        """logistic transform (base 10)"""
656|        return 1.0 / (1 + 10**(-a))
657|
658|    def inverted(self):
659|        return LogitTransform(self._nonpos)
660|
661|    def __str__(self):
662|        return "{}({!r})".format(type(self).__name__, self._nonpos)
663|
664|
665|class LogitScale(ScaleBase):
666|    """
667|    Logit scale for data between zero and one, both excluded.
668|
669|    This scale is similar to a log scale close to zero and to one, and almost
670|    linear around 0.5. It maps the interval ]0, 1[ onto ]-infty, +infty[.
671|    """
672|    name = 'logit'
673|
674|    def __init__(self, axis, nonpos='mask'):
675|        """
676|        *nonpos*: {'mask', 'clip'}
677|          values beyond ]0, 1[ can be masked as invalid, or clipped to a number
678|          very close to 0 or 1
679|        """
680|        cbook._check_in_list(['mask', 'clip'], nonpos=nonpos)
681|        self._transform = LogitTransform(nonpos)
682|
683|    def get_transform(self):
684|        """
685|        Return a :class:`LogitTransform` instance.
686|        """
687|        return self._transform
688|
689|    def set_default_locators_and_formatters(self, axis):
690|        # ..., 0.01, 0.1, 0.5, 0.9, 0.99, ...
691|        axis.set_major_locator(LogitLocator())
692|        axis.set_major_formatter(LogitFormatter())
693|        axis.set_minor_locator(LogitLocator(minor=True))
694|        axis.set_minor_formatter(LogitFormatter())
695|
696|    def limit_range_for_scale(self, vmin, vmax, minpos):
697|        """
698|        Limit the domain to values between 0 and 1 (excluded).
699|        """
700|        if not np.isfinite(minpos):
701|            minpos = 1e-7    # This value should rarely if ever
702|                             # end up with a visible effect.
703|        return (minpos if vmin <= 0 else vmin,
704|                1 - minpos if vmax >= 1 else vmax)
705|
706|
707|_scale_mapping = {
708|    'linear': LinearScale,
709|    'log':    LogScale,
710|    'symlog': SymmetricalLogScale,
711|    'logit':  LogitScale,
712|    'function': FuncScale,
713|    'functionlog': FuncScaleLog,
714|    }
715|
716|
717|def get_scale_names():
718|    return sorted(_scale_mapping)
719|
720|
721|def scale_factory(scale, axis, **kwargs):
722|    """
723|    Return a scale class by name.
724|
725|    Parameters
726|    ----------
727|    scale : {%(names)s}
728|    axis : Axis
729|    """
730|    scale = scale.lower()
731|    if scale not in _scale_mapping:
732|        raise ValueError("Unknown scale type '%s'" % scale)
733|    return _scale_mapping[scale](axis, **kwargs)
734|
735|if scale_factory.__doc__:
736|    scale_factory.__doc__ = scale_factory.__doc__ % {
737|        "names": ", ".join(get_scale_names())}
738|
739|
740|def register_scale(scale_class):
741|    """
742|    Register a new kind of scale.
743|
744|    *scale_class* must be a subclass of :class:`ScaleBase`.
745|    """
746|    _scale_mapping[scale_class.name] = scale_class
747|
748|
749|@cbook.deprecated(
750|    '3.1', message='get_scale_docs() is considered private API since '
751|                   '3.1 and will be removed from the public API in 3.3.')
752|def get_scale_docs():
753|    """
754|    Helper function for generating docstrings related to scales.
755|    """
756|    return _get_scale_docs()
757|
758|
759|def _get_scale_docs():
760|    """
761|    Helper function for generating docstrings related to scales.
762|    """
763|    docs = []
764|    for name, scale_class in _scale_mapping.items():
765|        docs.extend([
766|            f"    {name!r}",
767|            "",
768|            textwrap.indent(inspect.getdoc(scale_class.__init__), " " * 8),
769|            ""
770|        ])
771|    return "\n".join(docs)
772|
773|
774|docstring.interpd.update(
775|    scale=' | '.join([repr(x) for x in get_scale_names()]),
776|    scale_docs=_get_scale_docs().rstrip(),
777|    )


============================================================



ACTION:

THOUGHT: Let me also check the LogScale implementation in the same file by scrolling down:
CODE:
search_file("class LogScale", "/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/scale.py")

============================================================



OBSERVATION:

[Found 1 matches for "class LogScale" in /workspace/matplotlib__matplotlib__3.1/lib/matplotlib/scale.py]
Line 340: class LogScale(ScaleBase):
[End of matches for "class LogScale" in /workspace/matplotlib__matplotlib__3.1/lib/matplotlib/scale.py]


============================================================



ACTION:

THOUGHT: Let me examine the LogScale class implementation:
CODE:
open_file('/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/scale.py', line_number=340, context_lines=200)

============================================================



OBSERVATION:

[File: /workspace/matplotlib__matplotlib__3.1/lib/matplotlib/scale.py (777 lines total)]
(239 more lines above)
240|class InvertedLog10Transform(InvertedLogTransformBase):
241|    base = 10.0
242|
243|    def inverted(self):
244|        return Log10Transform()
245|
246|
247|@cbook.deprecated("3.1", alternative="LogTransform")
248|class Log2Transform(LogTransformBase):
249|    base = 2.0
250|
251|    def inverted(self):
252|        return InvertedLog2Transform()
253|
254|
255|@cbook.deprecated("3.1", alternative="InvertedLogTransform")
256|class InvertedLog2Transform(InvertedLogTransformBase):
257|    base = 2.0
258|
259|    def inverted(self):
260|        return Log2Transform()
261|
262|
263|@cbook.deprecated("3.1", alternative="LogTransform")
264|class NaturalLogTransform(LogTransformBase):
265|    base = np.e
266|
267|    def inverted(self):
268|        return InvertedNaturalLogTransform()
269|
270|
271|@cbook.deprecated("3.1", alternative="InvertedLogTransform")
272|class InvertedNaturalLogTransform(InvertedLogTransformBase):
273|    base = np.e
274|
275|    def inverted(self):
276|        return NaturalLogTransform()
277|
278|
279|class LogTransform(Transform):
280|    input_dims = 1
281|    output_dims = 1
282|    is_separable = True
283|    has_inverse = True
284|
285|    def __init__(self, base, nonpos='clip'):
286|        Transform.__init__(self)
287|        self.base = base
288|        self._clip = {"clip": True, "mask": False}[nonpos]
289|
290|    def __str__(self):
291|        return "{}(base={}, nonpos={!r})".format(
292|            type(self).__name__, self.base, "clip" if self._clip else "mask")
293|
294|    def transform_non_affine(self, a):
295|        # Ignore invalid values due to nans being passed to the transform.
296|        with np.errstate(divide="ignore", invalid="ignore"):
297|            log = {np.e: np.log, 2: np.log2, 10: np.log10}.get(self.base)
298|            if log:  # If possible, do everything in a single call to Numpy.
299|                out = log(a)
300|            else:
301|                out = np.log(a)
302|                out /= np.log(self.base)
303|            if self._clip:
304|                # SVG spec says that conforming viewers must support values up
305|                # to 3.4e38 (C float); however experiments suggest that
306|                # Inkscape (which uses cairo for rendering) runs into cairo's
307|                # 24-bit limit (which is apparently shared by Agg).
308|                # Ghostscript (used for pdf rendering appears to overflow even
309|                # earlier, with the max value around 2 ** 15 for the tests to
310|                # pass. On the other hand, in practice, we want to clip beyond
311|                #     np.log10(np.nextafter(0, 1)) ~ -323
312|                # so 1000 seems safe.
313|                out[a <= 0] = -1000
314|        return out
315|
316|    def inverted(self):
317|        return InvertedLogTransform(self.base)
318|
319|
320|class InvertedLogTransform(InvertedLogTransformBase):
321|    input_dims = 1
322|    output_dims = 1
323|    is_separable = True
324|    has_inverse = True
325|
326|    def __init__(self, base):
327|        Transform.__init__(self)
328|        self.base = base
329|
330|    def __str__(self):
331|        return "{}(base={})".format(type(self).__name__, self.base)
332|
333|    def transform_non_affine(self, a):
334|        return ma.power(self.base, a)
335|
336|    def inverted(self):
337|        return LogTransform(self.base)
338|
339|
340|class LogScale(ScaleBase):
341|    """
342|    A standard logarithmic scale.  Care is taken to only plot positive values.
343|    """
344|    name = 'log'
345|
346|    # compatibility shim
347|    LogTransformBase = LogTransformBase
348|    Log10Transform = Log10Transform
349|    InvertedLog10Transform = InvertedLog10Transform
350|    Log2Transform = Log2Transform
351|    InvertedLog2Transform = InvertedLog2Transform
352|    NaturalLogTransform = NaturalLogTransform
353|    InvertedNaturalLogTransform = InvertedNaturalLogTransform
354|    LogTransform = LogTransform
355|    InvertedLogTransform = InvertedLogTransform
356|
357|    def __init__(self, axis, **kwargs):
358|        """
359|        *basex*/*basey*:
360|           The base of the logarithm
361|
362|        *nonposx*/*nonposy*: {'mask', 'clip'}
363|          non-positive values in *x* or *y* can be masked as
364|          invalid, or clipped to a very small positive number
365|
366|        *subsx*/*subsy*:
367|           Where to place the subticks between each major tick.
368|           Should be a sequence of integers.  For example, in a log10
369|           scale: ``[2, 3, 4, 5, 6, 7, 8, 9]``
370|
371|           will place 8 logarithmically spaced minor ticks between
372|           each major tick.
373|        """
374|        if axis.axis_name == 'x':
375|            base = kwargs.pop('basex', 10.0)
376|            subs = kwargs.pop('subsx', None)
377|            nonpos = kwargs.pop('nonposx', 'clip')
378|            cbook._check_in_list(['mask', 'clip'], nonposx=nonpos)
379|        else:
380|            base = kwargs.pop('basey', 10.0)
381|            subs = kwargs.pop('subsy', None)
382|            nonpos = kwargs.pop('nonposy', 'clip')
383|            cbook._check_in_list(['mask', 'clip'], nonposy=nonpos)
384|
385|        if len(kwargs):
386|            raise ValueError(("provided too many kwargs, can only pass "
387|                              "{'basex', 'subsx', nonposx'} or "
388|                              "{'basey', 'subsy', nonposy'}.  You passed ") +
389|                             "{!r}".format(kwargs))
390|
391|        if base <= 0 or base == 1:
392|            raise ValueError('The log base cannot be <= 0 or == 1')
393|
394|        self._transform = self.LogTransform(base, nonpos)
395|        self.subs = subs
396|
397|    @property
398|    def base(self):
399|        return self._transform.base
400|
401|    def set_default_locators_and_formatters(self, axis):
402|        """
403|        Set the locators and formatters to specialized versions for
404|        log scaling.
405|        """
406|        axis.set_major_locator(LogLocator(self.base))
407|        axis.set_major_formatter(LogFormatterSciNotation(self.base))
408|        axis.set_minor_locator(LogLocator(self.base, self.subs))
409|        axis.set_minor_formatter(
410|            LogFormatterSciNotation(self.base,
411|                                    labelOnlyBase=(self.subs is not None)))
412|
413|    def get_transform(self):
414|        """
415|        Return a :class:`~matplotlib.transforms.Transform` instance
416|        appropriate for the given logarithm base.
417|        """
418|        return self._transform
419|
420|    def limit_range_for_scale(self, vmin, vmax, minpos):
421|        """
422|        Limit the domain to positive values.
423|        """
424|        if not np.isfinite(minpos):
425|            minpos = 1e-300  # This value should rarely if ever
426|                             # end up with a visible effect.
427|
428|        return (minpos if vmin <= 0 else vmin,
429|                minpos if vmax <= 0 else vmax)
430|
431|
432|class FuncScaleLog(LogScale):
433|    """
434|    Provide an arbitrary scale with user-supplied function for the axis and
435|    then put on a logarithmic axes.
436|    """
437|
438|    name = 'functionlog'
439|
440|    def __init__(self, axis, functions, base=10):
(337 more lines below)


============================================================



ACTION:

THOUGHT: After analyzing the code, I understand the issue. The problem occurs because the LogTransform class doesn't properly handle axis inversion when setting limits. Let me also check the axis.py file since it handles the limit setting:
CODE:
open_file('/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/axis.py')

============================================================



OBSERVATION:

[File: /workspace/matplotlib__matplotlib__3.1/lib/matplotlib/axis.py (2486 lines total)]
1|"""
2|Classes for the ticks and x and y axis.
3|"""
4|
5|import datetime
6|import logging
7|
8|import numpy as np
9|
10|from matplotlib import rcParams
11|import matplotlib.artist as martist
12|import matplotlib.cbook as cbook
13|import matplotlib.font_manager as font_manager
14|import matplotlib.lines as mlines
15|import matplotlib.scale as mscale
16|import matplotlib.text as mtext
17|import matplotlib.ticker as mticker
18|import matplotlib.transforms as mtransforms
19|import matplotlib.units as munits
20|
21|_log = logging.getLogger(__name__)
22|
23|GRIDLINE_INTERPOLATION_STEPS = 180
24|
25|# This list is being used for compatibility with Axes.grid, which
26|# allows all Line2D kwargs.
27|_line_AI = martist.ArtistInspector(mlines.Line2D)
28|_line_param_names = _line_AI.get_setters()
29|_line_param_aliases = [list(d)[0] for d in _line_AI.aliasd.values()]
30|_gridline_param_names = ['grid_' + name
31|                         for name in _line_param_names + _line_param_aliases]
32|
33|
34|class Tick(martist.Artist):
35|    """
36|    Abstract base class for the axis ticks, grid lines and labels.
37|
38|    Ticks mark a position on an Axis. They contain two lines as markers and
39|    two labels; one each for the bottom and top positions (in case of an
40|    `.XAxis`) or for the left and right positions (in case of a `.YAxis`).
41|
42|    Attributes
43|    ----------
44|    tick1line : `.Line2D`
45|        The left/bottom tick marker.
46|    tick2line : `.Line2D`
47|        The right/top tick marker.
48|    gridline : `.Line2D`
49|        The grid line associated with the label position.
50|    label1 : `.Text`
51|        The left/bottom tick label.
52|    label2 : `.Text`
53|        The right/top tick label.
54|
55|    """
56|    def __init__(self, axes, loc, label,
57|                 size=None,  # points
58|                 width=None,
59|                 color=None,
60|                 tickdir=None,
61|                 pad=None,
62|                 labelsize=None,
63|                 labelcolor=None,
64|                 zorder=None,
65|                 gridOn=None,  # defaults to axes.grid depending on
66|                               # axes.grid.which
67|                 tick1On=True,
68|                 tick2On=True,
69|                 label1On=True,
70|                 label2On=False,
71|                 major=True,
72|                 labelrotation=0,
73|                 grid_color=None,
74|                 grid_linestyle=None,
75|                 grid_linewidth=None,
76|                 grid_alpha=None,
77|                 **kw  # Other Line2D kwargs applied to gridlines.
78|                 ):
79|        """
80|        bbox is the Bound2D bounding box in display coords of the Axes
81|        loc is the tick location in data coords
82|        size is the tick size in points
83|        """
84|        martist.Artist.__init__(self)
85|
86|        if gridOn is None:
87|            if major and (rcParams['axes.grid.which'] in ('both', 'major')):
88|                gridOn = rcParams['axes.grid']
89|            elif (not major) and (rcParams['axes.grid.which']
90|                                  in ('both', 'minor')):
91|                gridOn = rcParams['axes.grid']
92|            else:
93|                gridOn = False
94|
95|        self.set_figure(axes.figure)
96|        self.axes = axes
97|
98|        name = self.__name__.lower()
99|        self._name = name
100|
101|        self._loc = loc
102|
103|        if size is None:
104|            if major:
105|                size = rcParams['%s.major.size' % name]
106|            else:
107|                size = rcParams['%s.minor.size' % name]
108|        self._size = size
109|
110|        if width is None:
111|            if major:
112|                width = rcParams['%s.major.width' % name]
113|            else:
114|                width = rcParams['%s.minor.width' % name]
115|        self._width = width
116|
117|        if color is None:
118|            color = rcParams['%s.color' % name]
119|        self._color = color
120|
121|        if pad is None:
122|            if major:
123|                pad = rcParams['%s.major.pad' % name]
124|            else:
125|                pad = rcParams['%s.minor.pad' % name]
126|        self._base_pad = pad
127|
128|        if labelcolor is None:
129|            labelcolor = rcParams['%s.color' % name]
130|        self._labelcolor = labelcolor
131|
132|        if labelsize is None:
133|            labelsize = rcParams['%s.labelsize' % name]
134|        self._labelsize = labelsize
135|
136|        self._set_labelrotation(labelrotation)
137|
138|        if zorder is None:
139|            if major:
140|                zorder = mlines.Line2D.zorder + 0.01
141|            else:
142|                zorder = mlines.Line2D.zorder
143|        self._zorder = zorder
144|
145|        self._grid_color = (rcParams['grid.color']
146|                            if grid_color is None else grid_color)
147|        self._grid_linestyle = (rcParams['grid.linestyle']
148|                                if grid_linestyle is None else grid_linestyle)
149|        self._grid_linewidth = (rcParams['grid.linewidth']
150|                                if grid_linewidth is None else grid_linewidth)
151|        self._grid_alpha = (rcParams['grid.alpha']
152|                            if grid_alpha is None else grid_alpha)
153|
154|        self._grid_kw = {k[5:]: v for k, v in kw.items()}
155|
156|        self.apply_tickdir(tickdir)
157|
158|        self.tick1line = self._get_tick1line()
159|        self.tick2line = self._get_tick2line()
160|        self.gridline = self._get_gridline()
161|        self.label1 = self._get_text1()
162|        self.label2 = self._get_text2()
163|
164|        self.gridline.set_visible(gridOn)
165|        self.tick1line.set_visible(tick1On)
166|        self.tick2line.set_visible(tick2On)
167|        self.label1.set_visible(label1On)
168|        self.label2.set_visible(label2On)
169|
170|        self.update_position(loc)
171|
172|    for _old_name, _new_name in [
173|            ("gridOn", "gridline"),
174|            ("tick1On", "tick1line"),
175|            ("tick2On", "tick2line"),
176|            ("label1On", "label1"),
177|            ("label2On", "label2")]:
178|        locals()[_old_name] = property(
179|            cbook.deprecated(
180|                "3.1",
181|                name=_old_name,
182|                alternative="Tick.{}.get_visible".format(_new_name))(
183|                    lambda self, _new_name=_new_name:
184|                        getattr(self, _new_name).get_visible()),
185|            cbook.deprecated(
186|                "3.1",
187|                name=_old_name,
188|                alternative="Tick.{}.set_visible".format(_new_name))(
189|                    lambda self, value, _new_name=_new_name:
190|                        getattr(self, _new_name).set_visible(value)))
191|    del _old_name, _new_name
192|
193|    @property
194|    @cbook.deprecated("3.1", alternative="Tick.label1", pending=True)
195|    def label(self):
196|        return self.label1
197|
198|    def _set_labelrotation(self, labelrotation):
199|        if isinstance(labelrotation, str):
200|            mode = labelrotation
201|            angle = 0
202|        elif isinstance(labelrotation, (tuple, list)):
203|            mode, angle = labelrotation
204|        else:
205|            mode = 'default'
206|            angle = labelrotation
207|        cbook._check_in_list(['auto', 'default'], labelrotation=mode)
208|        self._labelrotation = (mode, angle)
209|
210|    def apply_tickdir(self, tickdir):
211|        """Calculate self._pad and self._tickmarkers."""
212|
213|    def get_tickdir(self):
214|        return self._tickdir
215|
216|    def get_tick_padding(self):
217|        """Get the length of the tick outside of the axes."""
218|        padding = {
219|            'in': 0.0,
220|            'inout': 0.5,
221|            'out': 1.0
222|        }
223|        return self._size * padding[self._tickdir]
224|
225|    def get_children(self):
226|        children = [self.tick1line, self.tick2line,
227|                    self.gridline, self.label1, self.label2]
228|        return children
229|
230|    def set_clip_path(self, clippath, transform=None):
231|        # docstring inherited
232|        martist.Artist.set_clip_path(self, clippath, transform)
233|        self.gridline.set_clip_path(clippath, transform)
234|        self.stale = True
235|
236|    def get_pad_pixels(self):
237|        return self.figure.dpi * self._base_pad / 72
238|
239|    def contains(self, mouseevent):
240|        """
241|        Test whether the mouse event occurred in the Tick marks.
242|
243|        This function always returns false.  It is more useful to test if the
244|        axis as a whole contains the mouse rather than the set of tick marks.
245|        """
246|        if self._contains is not None:
247|            return self._contains(self, mouseevent)
248|        return False, {}
249|
250|    def set_pad(self, val):
251|        """
252|        Set the tick label pad in points
253|
254|        Parameters
255|        ----------
256|        val : float
257|        """
258|        self._apply_params(pad=val)
259|        self.stale = True
260|
261|    def get_pad(self):
262|        'Get the value of the tick label pad in points'
263|        return self._base_pad
264|
265|    def _get_text1(self):
266|        'Get the default Text 1 instance'
267|        pass
268|
269|    def _get_text2(self):
270|        'Get the default Text 2 instance'
271|        pass
272|
273|    def _get_tick1line(self):
274|        'Get the default line2D instance for tick1'
275|        pass
276|
277|    def _get_tick2line(self):
278|        'Get the default line2D instance for tick2'
279|        pass
280|
281|    def _get_gridline(self):
282|        'Get the default grid Line2d instance for this tick'
283|        pass
284|
285|    def get_loc(self):
286|        'Return the tick location (data coords) as a scalar'
287|        return self._loc
288|
289|    @martist.allow_rasterization
290|    def draw(self, renderer):
291|        if not self.get_visible():
292|            self.stale = False
293|            return
294|        renderer.open_group(self.__name__)
295|        for artist in [self.gridline, self.tick1line, self.tick2line,
296|                       self.label1, self.label2]:
297|            artist.draw(renderer)
298|        renderer.close_group(self.__name__)
299|        self.stale = False
300|
301|    def set_label1(self, s):
302|        """
303|        Set the label1 text.
304|
305|        Parameters
306|        ----------
307|        s : str
308|        """
309|        self.label1.set_text(s)
310|        self.stale = True
311|
312|    set_label = set_label1
313|
314|    def set_label2(self, s):
315|        """
316|        Set the label2 text.
317|
318|        Parameters
319|        ----------
320|        s : str
321|        """
322|        self.label2.set_text(s)
323|        self.stale = True
324|
325|    def _set_artist_props(self, a):
326|        a.set_figure(self.figure)
327|
328|    def get_view_interval(self):
329|        'return the view Interval instance for the axis this tick is ticking'
330|        raise NotImplementedError('Derived must override')
331|
332|    def _apply_params(self, **kw):
333|        for name, target in [("gridOn", self.gridline),
334|                               ("tick1On", self.tick1line),
335|                               ("tick2On", self.tick2line),
336|                               ("label1On", self.label1),
337|                               ("label2On", self.label2)]:
338|            if name in kw:
339|                target.set_visible(kw.pop(name))
340|        if any(k in kw for k in ['size', 'width', 'pad', 'tickdir']):
341|            self._size = kw.pop('size', self._size)
342|            # Width could be handled outside this block, but it is
343|            # convenient to leave it here.
344|            self._width = kw.pop('width', self._width)
345|            self._base_pad = kw.pop('pad', self._base_pad)
346|            # apply_tickdir uses _size and _base_pad to make _pad,
347|            # and also makes _tickmarkers.
348|            self.apply_tickdir(kw.pop('tickdir', self._tickdir))
349|            self.tick1line.set_marker(self._tickmarkers[0])
350|            self.tick2line.set_marker(self._tickmarkers[1])
351|            for line in (self.tick1line, self.tick2line):
352|                line.set_markersize(self._size)
353|                line.set_markeredgewidth(self._width)
354|            # _get_text1_transform uses _pad from apply_tickdir.
355|            trans = self._get_text1_transform()[0]
356|            self.label1.set_transform(trans)
357|            trans = self._get_text2_transform()[0]
358|            self.label2.set_transform(trans)
359|        tick_kw = {k: v for k, v in kw.items() if k in ['color', 'zorder']}
360|        self.tick1line.set(**tick_kw)
361|        self.tick2line.set(**tick_kw)
362|        for k, v in tick_kw.items():
363|            setattr(self, '_' + k, v)
364|
365|        if 'labelrotation' in kw:
366|            self._set_labelrotation(kw.pop('labelrotation'))
367|            self.label1.set(rotation=self._labelrotation[1])
368|            self.label2.set(rotation=self._labelrotation[1])
369|
370|        label_kw = {k[5:]: v for k, v in kw.items()
371|                    if k in ['labelsize', 'labelcolor']}
372|        self.label1.set(**label_kw)
373|        self.label2.set(**label_kw)
374|        for k, v in label_kw.items():
375|            # for labelsize the text objects covert str ('small')
376|            # -> points. grab the integer from the `Text` object
377|            # instead of saving the string representation
378|            v = getattr(self.label1, 'get_' + k)()
379|            setattr(self, '_label' + k, v)
380|
381|        grid_kw = {k[5:]: v for k, v in kw.items()
382|                   if k in _gridline_param_names}
383|        self.gridline.set(**grid_kw)
384|        for k, v in grid_kw.items():
385|            setattr(self, '_grid_' + k, v)
386|
387|    def update_position(self, loc):
388|        'Set the location of tick in data coords with scalar *loc*'
389|        raise NotImplementedError('Derived must override')
390|
391|    def _get_text1_transform(self):
392|        raise NotImplementedError('Derived must override')
393|
394|    def _get_text2_transform(self):
395|        raise NotImplementedError('Derived must override')
396|
397|
398|class XTick(Tick):
399|    """
400|    Contains all the Artists needed to make an x tick - the tick line,
401|    the label text and the grid line
402|    """
403|    __name__ = 'xtick'
404|
405|    def _get_text1_transform(self):
406|        return self.axes.get_xaxis_text1_transform(self._pad)
407|
408|    def _get_text2_transform(self):
409|        return self.axes.get_xaxis_text2_transform(self._pad)
410|
411|    def apply_tickdir(self, tickdir):
412|        if tickdir is None:
413|            tickdir = rcParams['%s.direction' % self._name]
414|        self._tickdir = tickdir
415|
416|        if self._tickdir == 'in':
417|            self._tickmarkers = (mlines.TICKUP, mlines.TICKDOWN)
418|        elif self._tickdir == 'inout':
419|            self._tickmarkers = ('|', '|')
420|        else:
421|            self._tickmarkers = (mlines.TICKDOWN, mlines.TICKUP)
422|        self._pad = self._base_pad + self.get_tick_padding()
423|        self.stale = True
424|
425|    def _get_text1(self):
426|        'Get the default Text instance'
427|        # the y loc is 3 points below the min of y axis
428|        # get the affine as an a,b,c,d,tx,ty list
429|        # x in data coords, y in axes coords
430|        trans, vert, horiz = self._get_text1_transform()
431|        t = mtext.Text(
432|            x=0, y=0,
433|            fontproperties=font_manager.FontProperties(size=self._labelsize),
434|            color=self._labelcolor,
435|            verticalalignment=vert,
436|            horizontalalignment=horiz,
437|            )
438|        t.set_transform(trans)
439|        self._set_artist_props(t)
440|        return t
441|
442|    def _get_text2(self):
443|
444|        'Get the default Text 2 instance'
445|        # x in data coords, y in axes coords
446|        trans, vert, horiz = self._get_text2_transform()
447|        t = mtext.Text(
448|            x=0, y=1,
449|            fontproperties=font_manager.FontProperties(size=self._labelsize),
450|            color=self._labelcolor,
451|            verticalalignment=vert,
452|            horizontalalignment=horiz,
453|            )
454|        t.set_transform(trans)
455|        self._set_artist_props(t)
456|        return t
457|
458|    def _get_tick1line(self):
459|        'Get the default line2D instance'
460|        # x in data coords, y in axes coords
461|        l = mlines.Line2D(xdata=(0,), ydata=(0,), color=self._color,
462|                          linestyle='None', marker=self._tickmarkers[0],
463|                          markersize=self._size,
464|                          markeredgewidth=self._width, zorder=self._zorder)
465|        l.set_transform(self.axes.get_xaxis_transform(which='tick1'))
466|        self._set_artist_props(l)
467|        return l
468|
469|    def _get_tick2line(self):
470|        'Get the default line2D instance'
471|        # x in data coords, y in axes coords
472|        l = mlines.Line2D(xdata=(0,), ydata=(1,),
473|                          color=self._color,
474|                          linestyle='None',
475|                          marker=self._tickmarkers[1],
476|                          markersize=self._size,
477|                          markeredgewidth=self._width,
478|                          zorder=self._zorder)
479|
480|        l.set_transform(self.axes.get_xaxis_transform(which='tick2'))
481|        self._set_artist_props(l)
482|        return l
483|
484|    def _get_gridline(self):
485|        'Get the default line2D instance'
486|        # x in data coords, y in axes coords
487|        l = mlines.Line2D(xdata=(0.0, 0.0), ydata=(0, 1.0),
488|                          color=self._grid_color,
489|                          linestyle=self._grid_linestyle,
490|                          linewidth=self._grid_linewidth,
491|                          alpha=self._grid_alpha,
492|                          markersize=0,
493|                          **self._grid_kw)
494|        l.set_transform(self.axes.get_xaxis_transform(which='grid'))
495|        l.get_path()._interpolation_steps = GRIDLINE_INTERPOLATION_STEPS
496|        self._set_artist_props(l)
497|
498|        return l
499|
500|    def update_position(self, loc):
501|        """Set the location of tick in data coords with scalar *loc*."""
502|        self.tick1line.set_xdata((loc,))
503|        self.tick2line.set_xdata((loc,))
504|        self.gridline.set_xdata((loc,))
505|        self.label1.set_x(loc)
506|        self.label2.set_x(loc)
507|        self._loc = loc
508|        self.stale = True
509|
510|    def get_view_interval(self):
511|        # docstring inherited
512|        return self.axes.viewLim.intervalx
513|
514|
515|class YTick(Tick):
516|    """
517|    Contains all the Artists needed to make a Y tick - the tick line,
518|    the label text and the grid line
519|    """
520|    __name__ = 'ytick'
521|
522|    def _get_text1_transform(self):
523|        return self.axes.get_yaxis_text1_transform(self._pad)
524|
525|    def _get_text2_transform(self):
526|        return self.axes.get_yaxis_text2_transform(self._pad)
527|
528|    def apply_tickdir(self, tickdir):
529|        if tickdir is None:
530|            tickdir = rcParams['%s.direction' % self._name]
531|        self._tickdir = tickdir
532|
533|        if self._tickdir == 'in':
534|            self._tickmarkers = (mlines.TICKRIGHT, mlines.TICKLEFT)
535|        elif self._tickdir == 'inout':
536|            self._tickmarkers = ('_', '_')
537|        else:
538|            self._tickmarkers = (mlines.TICKLEFT, mlines.TICKRIGHT)
539|        self._pad = self._base_pad + self.get_tick_padding()
540|        self.stale = True
541|
542|    # how far from the y axis line the right of the ticklabel are
543|    def _get_text1(self):
544|        'Get the default Text instance'
545|        # x in axes coords, y in data coords
546|        trans, vert, horiz = self._get_text1_transform()
547|        t = mtext.Text(
548|            x=0, y=0,
549|            fontproperties=font_manager.FontProperties(size=self._labelsize),
550|            color=self._labelcolor,
551|            verticalalignment=vert,
552|            horizontalalignment=horiz,
553|            )
554|        t.set_transform(trans)
555|        self._set_artist_props(t)
556|        return t
557|
558|    def _get_text2(self):
559|        'Get the default Text instance'
560|        # x in axes coords, y in data coords
561|        trans, vert, horiz = self._get_text2_transform()
562|        t = mtext.Text(
563|            x=1, y=0,
564|            fontproperties=font_manager.FontProperties(size=self._labelsize),
565|            color=self._labelcolor,
566|            verticalalignment=vert,
567|            horizontalalignment=horiz,
568|            )
569|        t.set_transform(trans)
570|        self._set_artist_props(t)
571|        return t
572|
573|    def _get_tick1line(self):
574|        'Get the default line2D instance'
575|        # x in axes coords, y in data coords
576|
577|        l = mlines.Line2D((0,), (0,),
578|                          color=self._color,
579|                          marker=self._tickmarkers[0],
580|                          linestyle='None',
581|                          markersize=self._size,
582|                          markeredgewidth=self._width,
583|                          zorder=self._zorder)
584|        l.set_transform(self.axes.get_yaxis_transform(which='tick1'))
585|        self._set_artist_props(l)
586|        return l
587|
588|    def _get_tick2line(self):
589|        'Get the default line2D instance'
590|        # x in axes coords, y in data coords
591|        l = mlines.Line2D((1,), (0,),
592|                          color=self._color,
593|                          marker=self._tickmarkers[1],
594|                          linestyle='None',
595|                          markersize=self._size,
596|                          markeredgewidth=self._width,
597|                          zorder=self._zorder)
598|        l.set_transform(self.axes.get_yaxis_transform(which='tick2'))
599|        self._set_artist_props(l)
600|        return l
601|
602|    def _get_gridline(self):
603|        'Get the default line2D instance'
604|        # x in axes coords, y in data coords
605|        l = mlines.Line2D(xdata=(0, 1), ydata=(0, 0),
606|                          color=self._grid_color,
607|                          linestyle=self._grid_linestyle,
608|                          linewidth=self._grid_linewidth,
609|                          alpha=self._grid_alpha,
610|                          markersize=0,
611|                          **self._grid_kw)
612|        l.set_transform(self.axes.get_yaxis_transform(which='grid'))
613|        l.get_path()._interpolation_steps = GRIDLINE_INTERPOLATION_STEPS
614|        self._set_artist_props(l)
615|        return l
616|
617|    def update_position(self, loc):
618|        """Set the location of tick in data coords with scalar *loc*."""
619|        self.tick1line.set_ydata((loc,))
620|        self.tick2line.set_ydata((loc,))
621|        self.gridline.set_ydata((loc,))
622|        self.label1.set_y(loc)
623|        self.label2.set_y(loc)
624|        self._loc = loc
625|        self.stale = True
626|
627|    def get_view_interval(self):
628|        """Return the Interval instance for this axis view limits."""
629|        return self.axes.viewLim.intervaly
630|
631|
632|class Ticker(object):
633|    """
634|    A container for the objects defining tick position and format.
635|
636|    Attributes
637|    ----------
638|    locator : `matplotlib.ticker.Locator` subclass
639|        Determines the positions of the ticks.
640|    formatter : `matplotlib.ticker.Formatter` subclass
641|        Determines the format of the tick labels.
642|    """
643|    locator = None
644|    formatter = None
645|
646|
647|class _LazyTickList(object):
648|    """
649|    A descriptor for lazy instantiation of tick lists.
650|
651|    See comment above definition of the ``majorTicks`` and ``minorTicks``
652|    attributes.
653|    """
654|
655|    def __init__(self, major):
656|        self._major = major
657|
658|    def __get__(self, instance, cls):
659|        if instance is None:
660|            return self
661|        else:
662|            # instance._get_tick() can itself try to access the majorTicks
663|            # attribute (e.g. in certain projection classes which override
664|            # e.g. get_xaxis_text1_transform).  In order to avoid infinite
665|            # recursion, first set the majorTicks on the instance to an empty
666|            # list, then create the tick and append it.
667|            if self._major:
668|                instance.majorTicks = []
669|                tick = instance._get_tick(major=True)
670|                instance.majorTicks.append(tick)
671|                return instance.majorTicks
672|            else:
673|                instance.minorTicks = []
674|                tick = instance._get_tick(major=False)
675|                instance.minorTicks.append(tick)
676|                return instance.minorTicks
677|
678|
679|class Axis(martist.Artist):
680|    """
681|    Base class for `.XAxis` and `.YAxis`.
682|
683|    Attributes
684|    ----------
685|    isDefault_label : bool
686|
687|    axes : `matplotlib.axes.Axes`
688|        The `~.axes.Axes` to which the Axis belongs.
689|    major : `matplotlib.axis.Ticker`
690|        Determines the major tick positions and their label format.
691|    minor : `matplotlib.axis.Ticker`
692|        Determines the minor tick positions and their label format.
693|    callbacks : `matplotlib.cbook.CallbackRegistry`
694|
695|    label : `.Text`
696|        The axis label.
697|    labelpad : float
698|        The distance between the axis label and the tick labels.
699|        Defaults to :rc:`axes.labelpad` = 4.
700|    offsetText : `.Text`
701|        A `.Text` object containing the data offset of the ticks (if any).
702|    pickradius : float
703|        The acceptance radius for containment tests. See also `.Axis.contains`.
704|    majorTicks : list of `.Tick`
705|        The major ticks.
706|    minorTicks : list of `.Tick`
707|        The minor ticks.
708|    """
709|    OFFSETTEXTPAD = 3
710|
711|    def __str__(self):
712|        return self.__class__.__name__ \
713|            + "(%f,%f)" % tuple(self.axes.transAxes.transform_point((0, 0)))
714|
715|    def __init__(self, axes, pickradius=15):
716|        """
717|        Parameters
718|        ----------
719|        axes : `matplotlib.axes.Axes`
720|            The `~.axes.Axes` to which the created Axis belongs.
721|        pickradius : float
722|            The acceptance radius for containment tests. See also
723|            `.Axis.contains`.
724|        """
725|        martist.Artist.__init__(self)
726|        self._remove_overlapping_locs = True
727|
728|        self.set_figure(axes.figure)
729|
730|        self.isDefault_label = True
731|
732|        self.axes = axes
733|        self.major = Ticker()
734|        self.minor = Ticker()
735|        self.callbacks = cbook.CallbackRegistry()
736|
737|        self._autolabelpos = True
738|        self._smart_bounds = False
739|
740|        self.label = self._get_label()
741|        self.labelpad = rcParams['axes.labelpad']
742|        self.offsetText = self._get_offset_text()
743|
744|        self.pickradius = pickradius
745|
746|        # Initialize here for testing; later add API
747|        self._major_tick_kw = dict()
748|        self._minor_tick_kw = dict()
749|
750|        self.cla()
751|        self._set_scale('linear')
752|
753|    # During initialization, Axis objects often create ticks that are later
754|    # unused; this turns out to be a very slow step.  Instead, use a custom
755|    # descriptor to make the tick lists lazy and instantiate them as needed.
756|    majorTicks = _LazyTickList(major=True)
757|    minorTicks = _LazyTickList(major=False)
758|
759|    def get_remove_overlapping_locs(self):
760|        return self._remove_overlapping_locs
761|
762|    def set_remove_overlapping_locs(self, val):
763|        self._remove_overlapping_locs = bool(val)
764|
765|    remove_overlapping_locs = property(
766|        get_remove_overlapping_locs, set_remove_overlapping_locs,
767|        doc=('If minor ticker locations that overlap with major '
768|             'ticker locations should be trimmed.'))
769|
770|    def set_label_coords(self, x, y, transform=None):
771|        """
772|        Set the coordinates of the label.
773|
774|        By default, the x coordinate of the y label is determined by the tick
775|        label bounding boxes, but this can lead to poor alignment of multiple
776|        ylabels if there are multiple axes.  Ditto for the y coordinate of
777|        the x label.
778|
779|        You can also specify the coordinate system of the label with
780|        the transform.  If None, the default coordinate system will be
781|        the axes coordinate system (0,0) is (left,bottom), (0.5, 0.5)
782|        is middle, etc
783|        """
784|        self._autolabelpos = False
785|        if transform is None:
786|            transform = self.axes.transAxes
787|
788|        self.label.set_transform(transform)
789|        self.label.set_position((x, y))
790|        self.stale = True
791|
792|    def get_transform(self):
793|        return self._scale.get_transform()
794|
795|    def get_scale(self):
796|        return self._scale.name
797|
798|    def _set_scale(self, value, **kwargs):
799|        self._scale = mscale.scale_factory(value, self, **kwargs)
800|        self._scale.set_default_locators_and_formatters(self)
801|
802|        self.isDefault_majloc = True
803|        self.isDefault_minloc = True
804|        self.isDefault_majfmt = True
805|        self.isDefault_minfmt = True
806|
807|    def limit_range_for_scale(self, vmin, vmax):
808|        return self._scale.limit_range_for_scale(vmin, vmax, self.get_minpos())
809|
810|    def get_children(self):
811|        children = [self.label, self.offsetText]
812|        majorticks = self.get_major_ticks()
813|        minorticks = self.get_minor_ticks()
814|
815|        children.extend(majorticks)
816|        children.extend(minorticks)
817|        return children
818|
819|    def cla(self):
820|        'clear the current axis'
821|
822|        self.label.set_text('')  # self.set_label_text would change isDefault_
823|
824|        self._set_scale('linear')
825|
826|        # Clear the callback registry for this axis, or it may "leak"
827|        self.callbacks = cbook.CallbackRegistry()
828|
829|        # whether the grids are on
830|        self._gridOnMajor = (rcParams['axes.grid'] and
831|                             rcParams['axes.grid.which'] in ('both', 'major'))
832|        self._gridOnMinor = (rcParams['axes.grid'] and
833|                             rcParams['axes.grid.which'] in ('both', 'minor'))
834|
835|        self.reset_ticks()
836|
837|        self.converter = None
838|        self.units = None
839|        self.set_units(None)
840|        self.stale = True
841|
842|    def reset_ticks(self):
843|        """
844|        Re-initialize the major and minor Tick lists.
845|
846|        Each list starts with a single fresh Tick.
847|        """
848|        # Restore the lazy tick lists.
849|        try:
850|            del self.majorTicks
851|        except AttributeError:
852|            pass
853|        try:
854|            del self.minorTicks
855|        except AttributeError:
856|            pass
857|        try:
858|            self.set_clip_path(self.axes.patch)
859|        except AttributeError:
860|            pass
861|
862|    def set_tick_params(self, which='major', reset=False, **kw):
863|        """
864|        Set appearance parameters for ticks, ticklabels, and gridlines.
865|
866|        For documentation of keyword arguments, see
867|        :meth:`matplotlib.axes.Axes.tick_params`.
868|        """
869|        dicts = []
870|        if which == 'major' or which == 'both':
871|            dicts.append(self._major_tick_kw)
872|        if which == 'minor' or which == 'both':
873|            dicts.append(self._minor_tick_kw)
874|        kwtrans = self._translate_tick_kw(kw)
875|
876|        # this stashes the parameter changes so any new ticks will
877|        # automatically get them
878|        for d in dicts:
879|            if reset:
880|                d.clear()
881|            d.update(kwtrans)
882|
883|        if reset:
884|            self.reset_ticks()
885|        else:
886|            # apply the new kwargs to the existing ticks
887|            if which == 'major' or which == 'both':
888|                for tick in self.majorTicks:
889|                    tick._apply_params(**kwtrans)
890|            if which == 'minor' or which == 'both':
891|                for tick in self.minorTicks:
892|                    tick._apply_params(**kwtrans)
893|            # special-case label color to also apply to the offset
894|            # text
895|            if 'labelcolor' in kwtrans:
896|                self.offsetText.set_color(kwtrans['labelcolor'])
897|
898|        self.stale = True
899|
900|    @staticmethod
901|    def _translate_tick_kw(kw):
902|        # The following lists may be moved to a more accessible location.
903|        kwkeys = ['size', 'width', 'color', 'tickdir', 'pad',
904|                  'labelsize', 'labelcolor', 'zorder', 'gridOn',
905|                  'tick1On', 'tick2On', 'label1On', 'label2On',
906|                  'length', 'direction', 'left', 'bottom', 'right', 'top',
907|                  'labelleft', 'labelbottom', 'labelright', 'labeltop',
908|                  'labelrotation'] + _gridline_param_names
909|        kwtrans = {}
910|        if 'length' in kw:
911|            kwtrans['size'] = kw.pop('length')
912|        if 'direction' in kw:
913|            kwtrans['tickdir'] = kw.pop('direction')
914|        if 'rotation' in kw:
915|            kwtrans['labelrotation'] = kw.pop('rotation')
916|        if 'left' in kw:
917|            kwtrans['tick1On'] = kw.pop('left')
918|        if 'bottom' in kw:
919|            kwtrans['tick1On'] = kw.pop('bottom')
920|        if 'right' in kw:
921|            kwtrans['tick2On'] = kw.pop('right')
922|        if 'top' in kw:
923|            kwtrans['tick2On'] = kw.pop('top')
924|        if 'labelleft' in kw:
925|            kwtrans['label1On'] = kw.pop('labelleft')
926|        if 'labelbottom' in kw:
927|            kwtrans['label1On'] = kw.pop('labelbottom')
928|        if 'labelright' in kw:
929|            kwtrans['label2On'] = kw.pop('labelright')
930|        if 'labeltop' in kw:
931|            kwtrans['label2On'] = kw.pop('labeltop')
932|        if 'colors' in kw:
933|            c = kw.pop('colors')
934|            kwtrans['color'] = c
935|            kwtrans['labelcolor'] = c
936|        # Maybe move the checking up to the caller of this method.
937|        for key in kw:
938|            if key not in kwkeys:
939|                raise ValueError(
940|                    "keyword %s is not recognized; valid keywords are %s"
941|                    % (key, kwkeys))
942|            kwtrans.update(kw)
943|        return kwtrans
944|
945|    def set_clip_path(self, clippath, transform=None):
946|        martist.Artist.set_clip_path(self, clippath, transform)
947|        for child in self.majorTicks + self.minorTicks:
948|            child.set_clip_path(clippath, transform)
949|        self.stale = True
950|
951|    def get_view_interval(self):
952|        """Return the Interval instance for this axis view limits."""
953|        raise NotImplementedError('Derived must override')
954|
955|    def set_view_interval(self, vmin, vmax, ignore=False):
956|        """
957|        Set the axis view limits.  This method is for internal use; Matplotlib
958|        users should typically use e.g. `~Axes.set_xlim` and `~Axes.set_ylim`.
959|
960|        If *ignore* is False (the default), this method will never reduce the
961|        preexisting view limits, only expand them if *vmin* or *vmax* are not
962|        within them.  Moreover, the order of *vmin* and *vmax* does not matter;
963|        the orientation of the axis will not change.
964|
965|        If *ignore* is True, the view limits will be set exactly to ``(vmin,
966|        vmax)`` in that order.
967|        """
968|        raise NotImplementedError('Derived must override')
969|
970|    def get_data_interval(self):
971|        """Return the Interval instance for this axis data limits."""
972|        raise NotImplementedError('Derived must override')
973|
974|    def set_data_interval(self, vmin, vmax, ignore=False):
975|        """
976|        Set the axis data limits.  This method is for internal use.
977|
978|        If *ignore* is False (the default), this method will never reduce the
979|        preexisting data limits, only expand them if *vmin* or *vmax* are not
980|        within them.  Moreover, the order of *vmin* and *vmax* does not matter;
981|        the orientation of the axis will not change.
982|
983|        If *ignore* is True, the data limits will be set exactly to ``(vmin,
984|        vmax)`` in that order.
985|        """
986|        raise NotImplementedError('Derived must override')
987|
988|    def get_inverted(self):
989|        """
990|        Return whether the axis is oriented in the "inverse" direction.
991|
992|        The "normal" direction is increasing to the right for the x-axis and to
993|        the top for the y-axis; the "inverse" direction is increasing to the
994|        left for the x-axis and to the bottom for the y-axis.
995|        """
996|        low, high = self.get_view_interval()
997|        return high < low
998|
999|    def set_inverted(self, inverted):
1000|        """
(1486 more lines below)


============================================================



ACTION:

THOUGHT: Let me also check the transforms.py file since it handles the coordinate transformations:
CODE:
open_file('/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/transforms.py')

============================================================



OBSERVATION:

[File: /workspace/matplotlib__matplotlib__3.1/lib/matplotlib/transforms.py (2943 lines total)]
1|"""
2|matplotlib includes a framework for arbitrary geometric
3|transformations that is used determine the final position of all
4|elements drawn on the canvas.
5|
6|Transforms are composed into trees of :class:`TransformNode` objects
7|whose actual value depends on their children.  When the contents of
8|children change, their parents are automatically invalidated.  The
9|next time an invalidated transform is accessed, it is recomputed to
10|reflect those changes.  This invalidation/caching approach prevents
11|unnecessary recomputations of transforms, and contributes to better
12|interactive performance.
13|
14|For example, here is a graph of the transform tree used to plot data
15|to the graph:
16|
17|.. image:: ../_static/transforms.png
18|
19|The framework can be used for both affine and non-affine
20|transformations.  However, for speed, we want use the backend
21|renderers to perform affine transformations whenever possible.
22|Therefore, it is possible to perform just the affine or non-affine
23|part of a transformation on a set of data.  The affine is always
24|assumed to occur after the non-affine.  For any transform::
25|
26|  full transform == non-affine part + affine part
27|
28|The backends are not expected to handle non-affine transformations
29|themselves.
30|"""
31|
32|# Note: There are a number of places in the code where we use `np.min` or
33|# `np.minimum` instead of the builtin `min`, and likewise for `max`.  This is
34|# done so that `nan`s are propagated, instead of being silently dropped.
35|
36|import re
37|import weakref
38|
39|import numpy as np
40|from numpy.linalg import inv
41|
42|from matplotlib import cbook
43|from matplotlib._path import (
44|    affine_transform, count_bboxes_overlapping_bbox, update_path_extents)
45|from .path import Path
46|
47|DEBUG = False
48|
49|
50|def _indent_str(obj):  # textwrap.indent(str(obj), 4) on Py3.
51|    return re.sub("(^|\n)", r"\1    ", str(obj))
52|
53|
54|class TransformNode(object):
55|    """
56|    :class:`TransformNode` is the base class for anything that
57|    participates in the transform tree and needs to invalidate its
58|    parents or be invalidated.  This includes classes that are not
59|    really transforms, such as bounding boxes, since some transforms
60|    depend on bounding boxes to compute their values.
61|    """
62|    _gid = 0
63|
64|    # Invalidation may affect only the affine part.  If the
65|    # invalidation was "affine-only", the _invalid member is set to
66|    # INVALID_AFFINE_ONLY
67|    INVALID_NON_AFFINE = 1
68|    INVALID_AFFINE = 2
69|    INVALID = INVALID_NON_AFFINE | INVALID_AFFINE
70|
71|    # Some metadata about the transform, used to determine whether an
72|    # invalidation is affine-only
73|    is_affine = False
74|    is_bbox = False
75|
76|    pass_through = False
77|    """
78|    If pass_through is True, all ancestors will always be
79|    invalidated, even if 'self' is already invalid.
80|    """
81|
82|    def __init__(self, shorthand_name=None):
83|        """
84|        Creates a new :class:`TransformNode`.
85|
86|        Parameters
87|        ----------
88|        shorthand_name : str
89|            A string representing the "name" of the transform. The name carries
90|            no significance other than to improve the readability of
91|            ``str(transform)`` when DEBUG=True.
92|        """
93|        self._parents = {}
94|
95|        # TransformNodes start out as invalid until their values are
96|        # computed for the first time.
97|        self._invalid = 1
98|        self._shorthand_name = shorthand_name or ''
99|
100|    if DEBUG:
101|        def __str__(self):
102|            # either just return the name of this TransformNode, or its repr
103|            return self._shorthand_name or repr(self)
104|
105|    def __getstate__(self):
106|        # turn the dictionary with weak values into a normal dictionary
107|        return {**self.__dict__,
108|                '_parents': {k: v() for k, v in self._parents.items()}}
109|
110|    def __setstate__(self, data_dict):
111|        self.__dict__ = data_dict
112|        # turn the normal dictionary back into a dictionary with weak values
113|        # The extra lambda is to provide a callback to remove dead
114|        # weakrefs from the dictionary when garbage collection is done.
115|        self._parents = {k: weakref.ref(v, lambda ref, sid=k,
116|                                                  target=self._parents:
117|                                                        target.pop(sid))
118|                         for k, v in self._parents.items() if v is not None}
119|
120|    def __copy__(self, *args):
121|        raise NotImplementedError(
122|            "TransformNode instances can not be copied. "
123|            "Consider using frozen() instead.")
124|    __deepcopy__ = __copy__
125|
126|    def invalidate(self):
127|        """
128|        Invalidate this :class:`TransformNode` and triggers an
129|        invalidation of its ancestors.  Should be called any
130|        time the transform changes.
131|        """
132|        value = self.INVALID
133|        if self.is_affine:
134|            value = self.INVALID_AFFINE
135|        return self._invalidate_internal(value, invalidating_node=self)
136|
137|    def _invalidate_internal(self, value, invalidating_node):
138|        """
139|        Called by :meth:`invalidate` and subsequently ascends the transform
140|        stack calling each TransformNode's _invalidate_internal method.
141|        """
142|        # determine if this call will be an extension to the invalidation
143|        # status. If not, then a shortcut means that we needn't invoke an
144|        # invalidation up the transform stack as it will already have been
145|        # invalidated.
146|
147|        # N.B This makes the invalidation sticky, once a transform has been
148|        # invalidated as NON_AFFINE, then it will always be invalidated as
149|        # NON_AFFINE even when triggered with a AFFINE_ONLY invalidation.
150|        # In most cases this is not a problem (i.e. for interactive panning and
151|        # zooming) and the only side effect will be on performance.
152|        status_changed = self._invalid < value
153|
154|        if self.pass_through or status_changed:
155|            self._invalid = value
156|
157|            for parent in list(self._parents.values()):
158|                # Dereference the weak reference
159|                parent = parent()
160|                if parent is not None:
161|                    parent._invalidate_internal(
162|                        value=value, invalidating_node=self)
163|
164|    def set_children(self, *children):
165|        """
166|        Set the children of the transform, to let the invalidation
167|        system know which transforms can invalidate this transform.
168|        Should be called from the constructor of any transforms that
169|        depend on other transforms.
170|        """
171|        # Parents are stored as weak references, so that if the
172|        # parents are destroyed, references from the children won't
173|        # keep them alive.
174|        for child in children:
175|            # Use weak references so this dictionary won't keep obsolete nodes
176|            # alive; the callback deletes the dictionary entry. This is a
177|            # performance improvement over using WeakValueDictionary.
178|            ref = weakref.ref(self, lambda ref, sid=id(self),
179|                                        target=child._parents: target.pop(sid))
180|            child._parents[id(self)] = ref
181|
182|    if DEBUG:
183|        _set_children = set_children
184|
185|        def set_children(self, *children):
186|            self._set_children(*children)
187|            self._children = children
188|        set_children.__doc__ = _set_children.__doc__
189|
190|    def frozen(self):
191|        """
192|        Returns a frozen copy of this transform node.  The frozen copy
193|        will not update when its children change.  Useful for storing
194|        a previously known state of a transform where
195|        ``copy.deepcopy()`` might normally be used.
196|        """
197|        return self
198|
199|    if DEBUG:
200|        def write_graphviz(self, fobj, highlight=[]):
201|            """
202|            For debugging purposes.
203|
204|            Writes the transform tree rooted at 'self' to a graphviz "dot"
205|            format file.  This file can be run through the "dot" utility
206|            to produce a graph of the transform tree.
207|
208|            Affine transforms are marked in blue.  Bounding boxes are
209|            marked in yellow.
210|
211|            *fobj*: A Python file-like object
212|
213|            Once the "dot" file has been created, it can be turned into a
214|            png easily with::
215|
216|                $> dot -Tpng -o $OUTPUT_FILE $DOT_FILE
217|
218|            """
219|            seen = set()
220|
221|            def recurse(root):
222|                if root in seen:
223|                    return
224|                seen.add(root)
225|                props = {}
226|                label = root.__class__.__name__
227|                if root._invalid:
228|                    label = '[%s]' % label
229|                if root in highlight:
230|                    props['style'] = 'bold'
231|                props['shape'] = 'box'
232|                props['label'] = '"%s"' % label
233|                props = ' '.join(map('{0[0]}={0[1]}'.format, props.items()))
234|
235|                fobj.write('%s [%s];\n' % (hash(root), props))
236|
237|                if hasattr(root, '_children'):
238|                    for child in root._children:
239|                        name = next((key for key, val in root.__dict__.items()
240|                                     if val is child), '?')
241|                        fobj.write('"%s" -> "%s" [label="%s", fontsize=10];\n'
242|                                    % (hash(root),
243|                                    hash(child),
244|                                    name))
245|                        recurse(child)
246|
247|            fobj.write("digraph G {\n")
248|            recurse(self)
249|            fobj.write("}\n")
250|
251|
252|class BboxBase(TransformNode):
253|    """
254|    This is the base class of all bounding boxes, and provides
255|    read-only access to its data.  A mutable bounding box is provided
256|    by the :class:`Bbox` class.
257|
258|    The canonical representation is as two points, with no
259|    restrictions on their ordering.  Convenience properties are
260|    provided to get the left, bottom, right and top edges and width
261|    and height, but these are not stored explicitly.
262|    """
263|    is_bbox = True
264|    is_affine = True
265|
266|    if DEBUG:
267|        def _check(points):
268|            if isinstance(points, np.ma.MaskedArray):
269|                cbook._warn_external("Bbox bounds are a masked array.")
270|            points = np.asarray(points)
271|            if (points[1, 0] - points[0, 0] == 0 or
272|                points[1, 1] - points[0, 1] == 0):
273|                cbook._warn_external("Singular Bbox.")
274|        _check = staticmethod(_check)
275|
276|    def frozen(self):
277|        return Bbox(self.get_points().copy())
278|    frozen.__doc__ = TransformNode.__doc__
279|
280|    def __array__(self, *args, **kwargs):
281|        return self.get_points()
282|
283|    def is_unit(self):
284|        """Return whether this is the unit box (from (0, 0) to (1, 1))."""
285|        return self.get_points().tolist() == [[0., 0.], [1., 1.]]
286|
287|    @property
288|    def x0(self):
289|        """
290|        The first of the pair of *x* coordinates that define the bounding box.
291|
292|        This is not guaranteed to be less than :attr:`x1` (for that, use
293|        :attr:`xmin`).
294|        """
295|        return self.get_points()[0, 0]
296|
297|    @property
298|    def y0(self):
299|        """
300|        The first of the pair of *y* coordinates that define the bounding box.
301|
302|        This is not guaranteed to be less than :attr:`y1` (for that, use
303|        :attr:`ymin`).
304|        """
305|        return self.get_points()[0, 1]
306|
307|    @property
308|    def x1(self):
309|        """
310|        The second of the pair of *x* coordinates that define the bounding box.
311|
312|        This is not guaranteed to be greater than :attr:`x0` (for that, use
313|        :attr:`xmax`).
314|        """
315|        return self.get_points()[1, 0]
316|
317|    @property
318|    def y1(self):
319|        """
320|        The second of the pair of *y* coordinates that define the bounding box.
321|
322|        This is not guaranteed to be greater than :attr:`y0` (for that, use
323|        :attr:`ymax`).
324|        """
325|        return self.get_points()[1, 1]
326|
327|    @property
328|    def p0(self):
329|        """
330|        The first pair of (*x*, *y*) coordinates that define the bounding box.
331|
332|        This is not guaranteed to be the bottom-left corner (for that, use
333|        :attr:`min`).
334|        """
335|        return self.get_points()[0]
336|
337|    @property
338|    def p1(self):
339|        """
340|        The second pair of (*x*, *y*) coordinates that define the bounding box.
341|
342|        This is not guaranteed to be the top-right corner (for that, use
343|        :attr:`max`).
344|        """
345|        return self.get_points()[1]
346|
347|    @property
348|    def xmin(self):
349|        """The left edge of the bounding box."""
350|        return np.min(self.get_points()[:, 0])
351|
352|    @property
353|    def ymin(self):
354|        """The bottom edge of the bounding box."""
355|        return np.min(self.get_points()[:, 1])
356|
357|    @property
358|    def xmax(self):
359|        """The right edge of the bounding box."""
360|        return np.max(self.get_points()[:, 0])
361|
362|    @property
363|    def ymax(self):
364|        """The top edge of the bounding box."""
365|        return np.max(self.get_points()[:, 1])
366|
367|    @property
368|    def min(self):
369|        """The bottom-left corner of the bounding box."""
370|        return np.min(self.get_points(), axis=0)
371|
372|    @property
373|    def max(self):
374|        """The top-right corner of the bounding box."""
375|        return np.max(self.get_points(), axis=0)
376|
377|    @property
378|    def intervalx(self):
379|        """
380|        The pair of *x* coordinates that define the bounding box.
381|
382|        This is not guaranteed to be sorted from left to right.
383|        """
384|        return self.get_points()[:, 0]
385|
386|    @property
387|    def intervaly(self):
388|        """
389|        The pair of *y* coordinates that define the bounding box.
390|
391|        This is not guaranteed to be sorted from bottom to top.
392|        """
393|        return self.get_points()[:, 1]
394|
395|    @property
396|    def width(self):
397|        """The (signed) width of the bounding box."""
398|        points = self.get_points()
399|        return points[1, 0] - points[0, 0]
400|
401|    @property
402|    def height(self):
403|        """The (signed) height of the bounding box."""
404|        points = self.get_points()
405|        return points[1, 1] - points[0, 1]
406|
407|    @property
408|    def size(self):
409|        """The (signed) width and height of the bounding box."""
410|        points = self.get_points()
411|        return points[1] - points[0]
412|
413|    @property
414|    def bounds(self):
415|        """Return (:attr:`x0`, :attr:`y0`, :attr:`width`, :attr:`height`)."""
416|        (x0, y0), (x1, y1) = self.get_points()
417|        return (x0, y0, x1 - x0, y1 - y0)
418|
419|    @property
420|    def extents(self):
421|        """Return (:attr:`x0`, :attr:`y0`, :attr:`x1`, :attr:`y1`)."""
422|        return self.get_points().flatten()  # flatten returns a copy.
423|
424|    def get_points(self):
425|        raise NotImplementedError
426|
427|    def containsx(self, x):
428|        """
429|        Return whether *x* is in the closed (:attr:`x0`, :attr:`x1`) interval.
430|        """
431|        x0, x1 = self.intervalx
432|        return x0 <= x <= x1 or x0 >= x >= x1
433|
434|    def containsy(self, y):
435|        """
436|        Return whether *y* is in the closed (:attr:`y0`, :attr:`y1`) interval.
437|        """
438|        y0, y1 = self.intervaly
439|        return y0 <= y <= y1 or y0 >= y >= y1
440|
441|    def contains(self, x, y):
442|        """
443|        Return whether ``(x, y)`` is in the bounding box or on its edge.
444|        """
445|        return self.containsx(x) and self.containsy(y)
446|
447|    def overlaps(self, other):
448|        """
449|        Return whether this bounding box overlaps with the other bounding box.
450|
451|        Parameters
452|        ----------
453|        other : BboxBase
454|        """
455|        ax1, ay1, ax2, ay2 = self.extents
456|        bx1, by1, bx2, by2 = other.extents
457|        if ax2 < ax1:
458|            ax2, ax1 = ax1, ax2
459|        if ay2 < ay1:
460|            ay2, ay1 = ay1, ay2
461|        if bx2 < bx1:
462|            bx2, bx1 = bx1, bx2
463|        if by2 < by1:
464|            by2, by1 = by1, by2
465|        return ax1 <= bx2 and bx1 <= ax2 and ay1 <= by2 and by1 <= ay2
466|
467|    def fully_containsx(self, x):
468|        """
469|        Return whether *x* is in the open (:attr:`x0`, :attr:`x1`) interval.
470|        """
471|        x0, x1 = self.intervalx
472|        return x0 < x < x1 or x0 > x > x1
473|
474|    def fully_containsy(self, y):
475|        """
476|        Return whether *y* is in the open (:attr:`y0`, :attr:`y1`) interval.
477|        """
478|        y0, y1 = self.intervaly
479|        return y0 < y < y1 or y0 > y > y1
480|
481|    def fully_contains(self, x, y):
482|        """
483|        Return whether ``x, y`` is in the bounding box, but not on its edge.
484|        """
485|        return self.fully_containsx(x) and self.fully_containsy(y)
486|
487|    def fully_overlaps(self, other):
488|        """
489|        Return whether this bounding box overlaps with the other bounding box,
490|        not including the edges.
491|
492|        Parameters
493|        ----------
494|        other : BboxBase
495|        """
496|        ax1, ay1, ax2, ay2 = self.extents
497|        bx1, by1, bx2, by2 = other.extents
498|        if ax2 < ax1:
499|            ax2, ax1 = ax1, ax2
500|        if ay2 < ay1:
501|            ay2, ay1 = ay1, ay2
502|        if bx2 < bx1:
503|            bx2, bx1 = bx1, bx2
504|        if by2 < by1:
505|            by2, by1 = by1, by2
506|        return ax1 < bx2 and bx1 < ax2 and ay1 < by2 and by1 < ay2
507|
508|    def transformed(self, transform):
509|        """
510|        Construct a `Bbox` by statically transforming this one by *transform*.
511|        """
512|        pts = self.get_points()
513|        ll, ul, lr = transform.transform(np.array([pts[0],
514|            [pts[0, 0], pts[1, 1]], [pts[1, 0], pts[0, 1]]]))
515|        return Bbox([ll, [lr[0], ul[1]]])
516|
517|    def inverse_transformed(self, transform):
518|        """
519|        Construct a `Bbox` by statically transforming this one by the inverse
520|        of *transform*.
521|        """
522|        return self.transformed(transform.inverted())
523|
524|    coefs = {'C':  (0.5, 0.5),
525|             'SW': (0, 0),
526|             'S':  (0.5, 0),
527|             'SE': (1.0, 0),
528|             'E':  (1.0, 0.5),
529|             'NE': (1.0, 1.0),
530|             'N':  (0.5, 1.0),
531|             'NW': (0, 1.0),
532|             'W':  (0, 0.5)}
533|
534|    def anchored(self, c, container=None):
535|        """
536|        Return a copy of the :class:`Bbox`, shifted to position *c*
537|        within a container.
538|
539|        Parameters
540|        ----------
541|        c : (float, float) or str
542|            May be either:
543|
544|            * A sequence (*cx*, *cy*) where *cx* and *cy* range from 0
545|              to 1, where 0 is left or bottom and 1 is right or top
546|
547|            * a string:
548|              - 'C' for centered
549|              - 'S' for bottom-center
550|              - 'SE' for bottom-left
551|              - 'E' for left
552|              - etc.
553|
554|        container : Bbox, optional
555|            The box within which the :class:`Bbox` is positioned; it defaults
556|            to the initial :class:`Bbox`.
557|        """
558|        if container is None:
559|            container = self
560|        l, b, w, h = container.bounds
561|        if isinstance(c, str):
562|            cx, cy = self.coefs[c]
563|        else:
564|            cx, cy = c
565|        L, B, W, H = self.bounds
566|        return Bbox(self._points +
567|                    [(l + cx * (w - W)) - L,
568|                     (b + cy * (h - H)) - B])
569|
570|    def shrunk(self, mx, my):
571|        """
572|        Return a copy of the :class:`Bbox`, shrunk by the factor *mx*
573|        in the *x* direction and the factor *my* in the *y* direction.
574|        The lower left corner of the box remains unchanged.  Normally
575|        *mx* and *my* will be less than 1, but this is not enforced.
576|        """
577|        w, h = self.size
578|        return Bbox([self._points[0],
579|                    self._points[0] + [mx * w, my * h]])
580|
581|    def shrunk_to_aspect(self, box_aspect, container=None, fig_aspect=1.0):
582|        """
583|        Return a copy of the :class:`Bbox`, shrunk so that it is as
584|        large as it can be while having the desired aspect ratio,
585|        *box_aspect*.  If the box coordinates are relative---that
586|        is, fractions of a larger box such as a figure---then the
587|        physical aspect ratio of that figure is specified with
588|        *fig_aspect*, so that *box_aspect* can also be given as a
589|        ratio of the absolute dimensions, not the relative dimensions.
590|        """
591|        if box_aspect <= 0 or fig_aspect <= 0:
592|            raise ValueError("'box_aspect' and 'fig_aspect' must be positive")
593|        if container is None:
594|            container = self
595|        w, h = container.size
596|        H = w * box_aspect / fig_aspect
597|        if H <= h:
598|            W = w
599|        else:
600|            W = h * fig_aspect / box_aspect
601|            H = h
602|        return Bbox([self._points[0],
603|                     self._points[0] + (W, H)])
604|
605|    def splitx(self, *args):
606|        """
607|        Return a list of new `Bbox` objects formed by splitting the original
608|        one with vertical lines at fractional positions given by *args*.
609|        """
610|        xf = [0, *args, 1]
611|        x0, y0, x1, y1 = self.extents
612|        w = x1 - x0
613|        return [Bbox([[x0 + xf0 * w, y0], [x0 + xf1 * w, y1]])
614|                for xf0, xf1 in zip(xf[:-1], xf[1:])]
615|
616|    def splity(self, *args):
617|        """
618|        Return a list of new `Bbox` objects formed by splitting the original
619|        one with horizontal lines at fractional positions given by *args*.
620|        """
621|        yf = [0, *args, 1]
622|        x0, y0, x1, y1 = self.extents
623|        h = y1 - y0
624|        return [Bbox([[x0, y0 + yf0 * h], [x1, y0 + yf1 * h]])
625|                for yf0, yf1 in zip(yf[:-1], yf[1:])]
626|
627|    def count_contains(self, vertices):
628|        """
629|        Count the number of vertices contained in the :class:`Bbox`.
630|        Any vertices with a non-finite x or y value are ignored.
631|
632|        Parameters
633|        ----------
634|        vertices : Nx2 Numpy array.
635|        """
636|        if len(vertices) == 0:
637|            return 0
638|        vertices = np.asarray(vertices)
639|        with np.errstate(invalid='ignore'):
640|            return (((self.min < vertices) &
641|                     (vertices < self.max)).all(axis=1).sum())
642|
643|    def count_overlaps(self, bboxes):
644|        """
645|        Count the number of bounding boxes that overlap this one.
646|
647|        Parameters
648|        ----------
649|        bboxes : sequence of :class:`BboxBase` objects
650|        """
651|        return count_bboxes_overlapping_bbox(
652|            self, np.atleast_3d([np.array(x) for x in bboxes]))
653|
654|    def expanded(self, sw, sh):
655|        """
656|        Construct a `Bbox` by expanding this one around its center by the
657|        factors *sw* and *sh*.
658|        """
659|        width = self.width
660|        height = self.height
661|        deltaw = (sw * width - width) / 2.0
662|        deltah = (sh * height - height) / 2.0
663|        a = np.array([[-deltaw, -deltah], [deltaw, deltah]])
664|        return Bbox(self._points + a)
665|
666|    def padded(self, p):
667|        """Construct a `Bbox` by padding this one on all four sides by *p*."""
668|        points = self.get_points()
669|        return Bbox(points + [[-p, -p], [p, p]])
670|
671|    def translated(self, tx, ty):
672|        """Construct a `Bbox` by translating this one by *tx* and *ty*."""
673|        return Bbox(self._points + (tx, ty))
674|
675|    def corners(self):
676|        """
677|        Return the corners of this rectangle as an array of points.
678|
679|        Specifically, this returns the array
680|        ``[[x0, y0], [x0, y1], [x1, y0], [x1, y1]]``.
681|        """
682|        (x0, y0), (x1, y1) = self.get_points()
683|        return np.array([[x0, y0], [x0, y1], [x1, y0], [x1, y1]])
684|
685|    def rotated(self, radians):
686|        """
687|        Return a new bounding box that bounds a rotated version of
688|        this bounding box by the given radians.  The new bounding box
689|        is still aligned with the axes, of course.
690|        """
691|        corners = self.corners()
692|        corners_rotated = Affine2D().rotate(radians).transform(corners)
693|        bbox = Bbox.unit()
694|        bbox.update_from_data_xy(corners_rotated, ignore=True)
695|        return bbox
696|
697|    @staticmethod
698|    def union(bboxes):
699|        """Return a `Bbox` that contains all of the given *bboxes*."""
700|        if not len(bboxes):
701|            raise ValueError("'bboxes' cannot be empty")
702|        x0 = np.min([bbox.xmin for bbox in bboxes])
703|        x1 = np.max([bbox.xmax for bbox in bboxes])
704|        y0 = np.min([bbox.ymin for bbox in bboxes])
705|        y1 = np.max([bbox.ymax for bbox in bboxes])
706|        return Bbox([[x0, y0], [x1, y1]])
707|
708|    @staticmethod
709|    def intersection(bbox1, bbox2):
710|        """
711|        Return the intersection of *bbox1* and *bbox2* if they intersect, or
712|        None if they don't.
713|        """
714|        x0 = np.maximum(bbox1.xmin, bbox2.xmin)
715|        x1 = np.minimum(bbox1.xmax, bbox2.xmax)
716|        y0 = np.maximum(bbox1.ymin, bbox2.ymin)
717|        y1 = np.minimum(bbox1.ymax, bbox2.ymax)
718|        return Bbox([[x0, y0], [x1, y1]]) if x0 <= x1 and y0 <= y1 else None
719|
720|
721|class Bbox(BboxBase):
722|    """
723|    A mutable bounding box.
724|    """
725|
726|    def __init__(self, points, **kwargs):
727|        """
728|        Parameters
729|        ----------
730|        points : ndarray
731|            A 2x2 numpy array of the form ``[[x0, y0], [x1, y1]]``.
732|
733|        Notes
734|        -----
735|        If you need to create a :class:`Bbox` object from another form
736|        of data, consider the static methods :meth:`unit`,
737|        :meth:`from_bounds` and :meth:`from_extents`.
738|        """
739|        BboxBase.__init__(self, **kwargs)
740|        points = np.asarray(points, float)
741|        if points.shape != (2, 2):
742|            raise ValueError('Bbox points must be of the form '
743|                             '"[[x0, y0], [x1, y1]]".')
744|        self._points = points
745|        self._minpos = np.array([np.inf, np.inf])
746|        self._ignore = True
747|        # it is helpful in some contexts to know if the bbox is a
748|        # default or has been mutated; we store the orig points to
749|        # support the mutated methods
750|        self._points_orig = self._points.copy()
751|    if DEBUG:
752|        ___init__ = __init__
753|
754|        def __init__(self, points, **kwargs):
755|            self._check(points)
756|            self.___init__(points, **kwargs)
757|
758|        def invalidate(self):
759|            self._check(self._points)
760|            TransformNode.invalidate(self)
761|
762|    @staticmethod
763|    def unit():
764|        """
765|        (staticmethod) Create a new unit :class:`Bbox` from (0, 0) to
766|        (1, 1).
767|        """
768|        return Bbox(np.array([[0.0, 0.0], [1.0, 1.0]], float))
769|
770|    @staticmethod
771|    def null():
772|        """
773|        (staticmethod) Create a new null :class:`Bbox` from (inf, inf) to
774|        (-inf, -inf).
775|        """
776|        return Bbox(np.array([[np.inf, np.inf], [-np.inf, -np.inf]], float))
777|
778|    @staticmethod
779|    def from_bounds(x0, y0, width, height):
780|        """
781|        (staticmethod) Create a new :class:`Bbox` from *x0*, *y0*,
782|        *width* and *height*.
783|
784|        *width* and *height* may be negative.
785|        """
786|        return Bbox.from_extents(x0, y0, x0 + width, y0 + height)
787|
788|    @staticmethod
789|    def from_extents(*args):
790|        """
791|        (staticmethod) Create a new Bbox from *left*, *bottom*,
792|        *right* and *top*.
793|
794|        The *y*-axis increases upwards.
795|        """
796|        points = np.array(args, dtype=float).reshape(2, 2)
797|        return Bbox(points)
798|
799|    def __format__(self, fmt):
800|        return (
801|            'Bbox(x0={0.x0:{1}}, y0={0.y0:{1}}, x1={0.x1:{1}}, y1={0.y1:{1}})'.
802|            format(self, fmt))
803|
804|    def __str__(self):
805|        return format(self, '')
806|
807|    def __repr__(self):
808|        return 'Bbox([[{0.x0}, {0.y0}], [{0.x1}, {0.y1}]])'.format(self)
809|
810|    def ignore(self, value):
811|        """
812|        Set whether the existing bounds of the box should be ignored
813|        by subsequent calls to :meth:`update_from_data_xy`.
814|
815|        value : bool
816|           - When ``True``, subsequent calls to :meth:`update_from_data_xy`
817|             will ignore the existing bounds of the :class:`Bbox`.
818|
819|           - When ``False``, subsequent calls to :meth:`update_from_data_xy`
820|             will include the existing bounds of the :class:`Bbox`.
821|        """
822|        self._ignore = value
823|
824|    def update_from_path(self, path, ignore=None, updatex=True, updatey=True):
825|        """
826|        Update the bounds of the :class:`Bbox` based on the passed in
827|        data.  After updating, the bounds will have positive *width*
828|        and *height*; *x0* and *y0* will be the minimal values.
829|
830|        Parameters
831|        ----------
832|        path : :class:`~matplotlib.path.Path`
833|
834|        ignore : bool, optional
835|           - when ``True``, ignore the existing bounds of the :class:`Bbox`.
836|           - when ``False``, include the existing bounds of the :class:`Bbox`.
837|           - when ``None``, use the last value passed to :meth:`ignore`.
838|
839|        updatex, updatey : bool, optional
840|            When ``True``, update the x/y values.
841|        """
842|        if ignore is None:
843|            ignore = self._ignore
844|
845|        if path.vertices.size == 0:
846|            return
847|
848|        points, minpos, changed = update_path_extents(
849|            path, None, self._points, self._minpos, ignore)
850|
851|        if changed:
852|            self.invalidate()
853|            if updatex:
854|                self._points[:, 0] = points[:, 0]
855|                self._minpos[0] = minpos[0]
856|            if updatey:
857|                self._points[:, 1] = points[:, 1]
858|                self._minpos[1] = minpos[1]
859|
860|    def update_from_data_xy(self, xy, ignore=None, updatex=True, updatey=True):
861|        """
862|        Update the bounds of the :class:`Bbox` based on the passed in
863|        data.  After updating, the bounds will have positive *width*
864|        and *height*; *x0* and *y0* will be the minimal values.
865|
866|        Parameters
867|        ----------
868|        xy : ndarray
869|            A numpy array of 2D points.
870|
871|        ignore : bool, optional
872|           - When ``True``, ignore the existing bounds of the :class:`Bbox`.
873|           - When ``False``, include the existing bounds of the :class:`Bbox`.
874|           - When ``None``, use the last value passed to :meth:`ignore`.
875|
876|        updatex, updatey : bool, optional
877|            When ``True``, update the x/y values.
878|        """
879|        if len(xy) == 0:
880|            return
881|
882|        path = Path(xy)
883|        self.update_from_path(path, ignore=ignore,
884|                              updatex=updatex, updatey=updatey)
885|
886|    @BboxBase.x0.setter
887|    def x0(self, val):
888|        self._points[0, 0] = val
889|        self.invalidate()
890|
891|    @BboxBase.y0.setter
892|    def y0(self, val):
893|        self._points[0, 1] = val
894|        self.invalidate()
895|
896|    @BboxBase.x1.setter
897|    def x1(self, val):
898|        self._points[1, 0] = val
899|        self.invalidate()
900|
901|    @BboxBase.y1.setter
902|    def y1(self, val):
903|        self._points[1, 1] = val
904|        self.invalidate()
905|
906|    @BboxBase.p0.setter
907|    def p0(self, val):
908|        self._points[0] = val
909|        self.invalidate()
910|
911|    @BboxBase.p1.setter
912|    def p1(self, val):
913|        self._points[1] = val
914|        self.invalidate()
915|
916|    @BboxBase.intervalx.setter
917|    def intervalx(self, interval):
918|        self._points[:, 0] = interval
919|        self.invalidate()
920|
921|    @BboxBase.intervaly.setter
922|    def intervaly(self, interval):
923|        self._points[:, 1] = interval
924|        self.invalidate()
925|
926|    @BboxBase.bounds.setter
927|    def bounds(self, bounds):
928|        l, b, w, h = bounds
929|        points = np.array([[l, b], [l + w, b + h]], float)
930|        if np.any(self._points != points):
931|            self._points = points
932|            self.invalidate()
933|
934|    @property
935|    def minpos(self):
936|        return self._minpos
937|
938|    @property
939|    def minposx(self):
940|        return self._minpos[0]
941|
942|    @property
943|    def minposy(self):
944|        return self._minpos[1]
945|
946|    def get_points(self):
947|        """
948|        Get the points of the bounding box directly as a numpy array
949|        of the form: ``[[x0, y0], [x1, y1]]``.
950|        """
951|        self._invalid = 0
952|        return self._points
953|
954|    def set_points(self, points):
955|        """
956|        Set the points of the bounding box directly from a numpy array
957|        of the form: ``[[x0, y0], [x1, y1]]``.  No error checking is
958|        performed, as this method is mainly for internal use.
959|        """
960|        if np.any(self._points != points):
961|            self._points = points
962|            self.invalidate()
963|
964|    def set(self, other):
965|        """
966|        Set this bounding box from the "frozen" bounds of another
967|        :class:`Bbox`.
968|        """
969|        if np.any(self._points != other.get_points()):
970|            self._points = other.get_points()
971|            self.invalidate()
972|
973|    def mutated(self):
974|        'Return whether the bbox has changed since init.'
975|        return self.mutatedx() or self.mutatedy()
976|
977|    def mutatedx(self):
978|        'Return whether the x-limits have changed since init.'
979|        return (self._points[0, 0] != self._points_orig[0, 0] or
980|                self._points[1, 0] != self._points_orig[1, 0])
981|
982|    def mutatedy(self):
983|        'Return whether the y-limits have changed since init.'
984|        return (self._points[0, 1] != self._points_orig[0, 1] or
985|                self._points[1, 1] != self._points_orig[1, 1])
986|
987|
988|class TransformedBbox(BboxBase):
989|    """
990|    A :class:`Bbox` that is automatically transformed by a given
991|    transform.  When either the child bounding box or transform
992|    changes, the bounds of this bbox will update accordingly.
993|    """
994|    def __init__(self, bbox, transform, **kwargs):
995|        """
996|        Parameters
997|        ----------
998|        bbox : :class:`Bbox`
999|
1000|        transform : :class:`Transform`
(1943 more lines below)


============================================================



ACTION:

THOUGHT: After analyzing the code, I understand the issue. The problem is in the LogTransform class's handling of axis inversion. When setting ylim(max, min), the axis should be inverted, but this isn't working for log scale. Let me check the axis inversion logic:
CODE:
search_file("class YAxis", "/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/axis.py")

============================================================



OBSERVATION:

[Found 1 matches for "class YAxis" in /workspace/matplotlib__matplotlib__3.1/lib/matplotlib/axis.py]
Line 2188: class YAxis(Axis):
[End of matches for "class YAxis" in /workspace/matplotlib__matplotlib__3.1/lib/matplotlib/axis.py]


============================================================



ACTION:

THOUGHT: Let me examine the YAxis class implementation:
CODE:
open_file('/workspace/matplotlib__matplotlib__3.1/lib/matplotlib/axis.py', line_number=2188, context_lines=200)

============================================================



OBSERVATION:

[File: /workspace/matplotlib__matplotlib__3.1/lib/matplotlib/axis.py (2486 lines total)]
(2087 more lines above)
2088|        both sets the ticks to appear on both positions, but does not
2089|        change the tick labels.  'default' resets the tick positions to
2090|        the default: ticks on both positions, labels at bottom.  'none'
2091|        can be used if you don't want any ticks. 'none' and 'both'
2092|        affect only the ticks, not the labels.
2093|
2094|        Parameters
2095|        ----------
2096|        position : {'top', 'bottom', 'both', 'default', 'none'}
2097|        """
2098|        if position == 'top':
2099|            self.set_tick_params(which='both', top=True, labeltop=True,
2100|                                 bottom=False, labelbottom=False)
2101|        elif position == 'bottom':
2102|            self.set_tick_params(which='both', top=False, labeltop=False,
2103|                                 bottom=True, labelbottom=True)
2104|        elif position == 'both':
2105|            self.set_tick_params(which='both', top=True,
2106|                                 bottom=True)
2107|        elif position == 'none':
2108|            self.set_tick_params(which='both', top=False,
2109|                                 bottom=False)
2110|        elif position == 'default':
2111|            self.set_tick_params(which='both', top=True, labeltop=False,
2112|                                 bottom=True, labelbottom=True)
2113|        else:
2114|            raise ValueError("invalid position: %s" % position)
2115|        self.stale = True
2116|
2117|    def tick_top(self):
2118|        """
2119|        Move ticks and ticklabels (if present) to the top of the axes.
2120|        """
2121|        label = True
2122|        if 'label1On' in self._major_tick_kw:
2123|            label = (self._major_tick_kw['label1On']
2124|                     or self._major_tick_kw['label2On'])
2125|        self.set_ticks_position('top')
2126|        # If labels were turned off before this was called, leave them off.
2127|        self.set_tick_params(which='both', labeltop=label)
2128|
2129|    def tick_bottom(self):
2130|        """
2131|        Move ticks and ticklabels (if present) to the bottom of the axes.
2132|        """
2133|        label = True
2134|        if 'label1On' in self._major_tick_kw:
2135|            label = (self._major_tick_kw['label1On']
2136|                     or self._major_tick_kw['label2On'])
2137|        self.set_ticks_position('bottom')
2138|        # If labels were turned off before this was called, leave them off.
2139|        self.set_tick_params(which='both', labelbottom=label)
2140|
2141|    def get_ticks_position(self):
2142|        """
2143|        Return the ticks position ("top", "bottom", "default", or "unknown").
2144|        """
2145|        return {1: "bottom", 2: "top",
2146|                "default": "default", "unknown": "unknown"}[
2147|                    self._get_ticks_position()]
2148|
2149|    get_view_interval, set_view_interval = _make_getset_interval(
2150|        "view", "viewLim", "intervalx")
2151|    get_data_interval, set_data_interval = _make_getset_interval(
2152|        "data", "dataLim", "intervalx")
2153|
2154|    def get_minpos(self):
2155|        return self.axes.dataLim.minposx
2156|
2157|    def set_default_intervals(self):
2158|        # docstring inherited
2159|        xmin, xmax = 0., 1.
2160|        dataMutated = self.axes.dataLim.mutatedx()
2161|        viewMutated = self.axes.viewLim.mutatedx()
2162|        if not dataMutated or not viewMutated:
2163|            if self.converter is not None:
2164|                info = self.converter.axisinfo(self.units, self)
2165|                if info.default_limits is not None:
2166|                    valmin, valmax = info.default_limits
2167|                    xmin = self.converter.convert(valmin, self.units, self)
2168|                    xmax = self.converter.convert(valmax, self.units, self)
2169|            if not dataMutated:
2170|                self.axes.dataLim.intervalx = xmin, xmax
2171|            if not viewMutated:
2172|                self.axes.viewLim.intervalx = xmin, xmax
2173|        self.stale = True
2174|
2175|    def get_tick_space(self):
2176|        ends = self.axes.transAxes.transform([[0, 0], [1, 0]])
2177|        length = ((ends[1][0] - ends[0][0]) / self.axes.figure.dpi) * 72
2178|        tick = self._get_tick(True)
2179|        # There is a heuristic here that the aspect ratio of tick text
2180|        # is no more than 3:1
2181|        size = tick.label1.get_size() * 3
2182|        if size > 0:
2183|            return int(np.floor(length / size))
2184|        else:
2185|            return 2**31 - 1
2186|
2187|
2188|class YAxis(Axis):
2189|    __name__ = 'yaxis'
2190|    axis_name = 'y'
2191|
2192|    def contains(self, mouseevent):
2193|        """Test whether the mouse event occurred in the y axis.
2194|
2195|        Returns *True* | *False*
2196|        """
2197|        if self._contains is not None:
2198|            return self._contains(self, mouseevent)
2199|
2200|        x, y = mouseevent.x, mouseevent.y
2201|        try:
2202|            trans = self.axes.transAxes.inverted()
2203|            xaxes, yaxes = trans.transform_point((x, y))
2204|        except ValueError:
2205|            return False, {}
2206|        l, b = self.axes.transAxes.transform_point((0, 0))
2207|        r, t = self.axes.transAxes.transform_point((1, 1))
2208|        inaxis = 0 <= yaxes <= 1 and (
2209|            l - self.pickradius < x < l or
2210|            r < x < r + self.pickradius)
2211|        return inaxis, {}
2212|
2213|    def _get_tick(self, major):
2214|        if major:
2215|            tick_kw = self._major_tick_kw
2216|        else:
2217|            tick_kw = self._minor_tick_kw
2218|        return YTick(self.axes, 0, '', major=major, **tick_kw)
2219|
2220|    def _get_label(self):
2221|        # x in display coords (updated by _update_label_position)
2222|        # y in axes coords
2223|        label = mtext.Text(x=0, y=0.5,
2224|                           # todo: get the label position
2225|                           fontproperties=font_manager.FontProperties(
2226|                               size=rcParams['axes.labelsize'],
2227|                               weight=rcParams['axes.labelweight']),
2228|                           color=rcParams['axes.labelcolor'],
2229|                           verticalalignment='bottom',
2230|                           horizontalalignment='center',
2231|                           rotation='vertical',
2232|                           rotation_mode='anchor')
2233|        label.set_transform(mtransforms.blended_transform_factory(
2234|            mtransforms.IdentityTransform(), self.axes.transAxes))
2235|
2236|        self._set_artist_props(label)
2237|        self.label_position = 'left'
2238|        return label
2239|
2240|    def _get_offset_text(self):
2241|        # x in display coords, y in axes coords (to be updated at draw time)
2242|        offsetText = mtext.Text(x=0, y=0.5,
2243|                                fontproperties=font_manager.FontProperties(
2244|                                    size=rcParams['ytick.labelsize']
2245|                                ),
2246|                                color=rcParams['ytick.color'],
2247|                                verticalalignment='baseline',
2248|                                horizontalalignment='left')
2249|        offsetText.set_transform(mtransforms.blended_transform_factory(
2250|            self.axes.transAxes, mtransforms.IdentityTransform())
2251|        )
2252|        self._set_artist_props(offsetText)
2253|        self.offset_text_position = 'left'
2254|        return offsetText
2255|
2256|    def set_label_position(self, position):
2257|        """
2258|        Set the label position (left or right)
2259|
2260|        Parameters
2261|        ----------
2262|        position : {'left', 'right'}
2263|        """
2264|        self.label.set_rotation_mode('anchor')
2265|        self.label.set_horizontalalignment('center')
2266|        if position == 'left':
2267|            self.label.set_verticalalignment('bottom')
2268|        elif position == 'right':
2269|            self.label.set_verticalalignment('top')
2270|        else:
2271|            raise ValueError("Position accepts only 'left' or 'right'")
2272|        self.label_position = position
2273|        self.stale = True
2274|
2275|    def _get_tick_boxes_siblings(self, renderer):
2276|        """
2277|        Get the bounding boxes for this `.axis` and its siblings
2278|        as set by `.Figure.align_xlabels` or  `.Figure.align_ylablels`.
2279|
2280|        By default it just gets bboxes for self.
2281|        """
2282|        bboxes = []
2283|        bboxes2 = []
2284|        # get the Grouper that keeps track of y-label groups for this figure
2285|        grp = self.figure._align_ylabel_grp
2286|        # if we want to align labels from other axes:
2287|        for axx in grp.get_siblings(self.axes):
2288|            ticks_to_draw = axx.yaxis._update_ticks()
(198 more lines below)


============================================================



ACTION:

Planner Invoked

============================================================



OBSERVATION:

[File: /workspace/matplotlib__matplotlib__3.1/lib/matplotlib/scale.py (780 lines total after edit)]
[Diff of the changes applied. Please review the diff and remove if there are any redundant code lines or duplicates introduced or left to be removed.]
--- 
+++ 
@@ -284,60 +284,63 @@
 
     def __init__(self, base, nonpos='clip'):
         Transform.__init__(self)
         self.base = base
         self._clip = {"clip": True, "mask": False}[nonpos]
 
     def __str__(self):
         return "{}(base={}, nonpos={!r})".format(
             type(self).__name__, self.base, "clip" if self._clip else "mask")
 
     def transform_non_affine(self, a):
         # Ignore invalid values due to nans being passed to the transform.
         with np.errstate(divide="ignore", invalid="ignore"):
             log = {np.e: np.log, 2: np.log2, 10: np.log10}.get(self.base)
             if log:  # If possible, do everything in a single call to Numpy.
                 out = log(a)
             else:
                 out = np.log(a)
                 out /= np.log(self.base)
             if self._clip:
                 # SVG spec says that conforming viewers must support values up
                 # to 3.4e38 (C float); however experiments suggest that
                 # Inkscape (which uses cairo for rendering) runs into cairo's
                 # 24-bit limit (which is apparently shared by Agg).
                 # Ghostscript (used for pdf rendering appears to overflow even
                 # earlier, with the max value around 2 ** 15 for the tests to
                 # pass. On the other hand, in practice, we want to clip beyond
                 #     np.log10(np.nextafter(0, 1)) ~ -323
                 # so 1000 seems safe.
                 out[a <= 0] = -1000
+            # Handle axis inversion by checking if the input array is in descending order
+            if len(a) > 1 and a[0] > a[-1]:
+                out = -out
         return out
 
     def inverted(self):
         return InvertedLogTransform(self.base)
 
 
 class InvertedLogTransform(InvertedLogTransformBase):
     input_dims = 1
     output_dims = 1
     is_separable = True
     has_inverse = True
 
     def __init__(self, base):
         Transform.__init__(self)
         self.base = base
 
     def __str__(self):
         return "{}(base={})".format(type(self).__name__, self.base)
 
     def transform_non_affine(self, a):
         return ma.power(self.base, a)
 
     def inverted(self):
         return LogTransform(self.base)
 
 
 class LogScale(ScaleBase):
     """
     A standard logarithmic scale.  Care is taken to only plot positive values.
     """
[File updated. Please review the changes carefully and make sure they are correct (correct indentation, no duplicate or redundant lines etc). Edit the file again if necessary.]


============================================================



ACTION:

THOUGHT: The changes look correct. Let's test the fix by running the reproduction script again:
COMMAND:
python3 reproduce_bug.py

============================================================



OBSERVATION:

[Code executed successfully with no output]

============================================================



ACTION:

THOUGHT: Let me verify the generated images to ensure both linear and log scales are properly inverted. I'll also create a more comprehensive test script that includes different test cases:
CODE:
CODE = """
import numpy as np
import matplotlib.pyplot as plt

# Test Case 1: Original reproduction case
y = np.linspace(1000e2, 1, 100)
x = np.exp(-np.linspace(0, 1, y.size))

for yscale in ('linear', 'log'):
    fig, ax = plt.subplots()
    ax.plot(x, y)
    ax.set_yscale(yscale)
    ax.set_ylim(y.max(), y.min())
    plt.title(f'{yscale} scale - Basic inversion')
    plt.savefig(f'{yscale}_scale_test1.png')
    plt.close()

# Test Case 2: Different log bases
y = np.logspace(0, 3, 100)
x = np.linspace(0, 1, 100)

for base in [2, np.e, 10]:
    fig, ax = plt.subplots()
    ax.plot(x, y)
    ax.set_yscale('log', basey=base)
    ax.set_ylim(y.max(), y.min())
    plt.title(f'Log scale (base {base}) - Inverted')
    plt.savefig(f'log_base_{base}_test2.png')
    plt.close()

# Test Case 3: Very small and large numbers
y = np.logspace(-10, 10, 100)
x = np.linspace(0, 1, 100)

fig, ax = plt.subplots()
ax.plot(x, y)
ax.set_yscale('log')
ax.set_ylim(y.max(), y.min())
plt.title('Log scale - Large range inversion')
plt.savefig('log_scale_test3.png')
plt.close()
"""
create_file('comprehensive_test.py', CODE)

============================================================



OBSERVATION:

[File comprehensive_test.py created.]
[File: /workspace/comprehensive_test.py (41 lines total after edit)]
1|
2|import numpy as np
3|import matplotlib.pyplot as plt
4|
5|# Test Case 1: Original reproduction case
6|y = np.linspace(1000e2, 1, 100)
7|x = np.exp(-np.linspace(0, 1, y.size))
8|
9|for yscale in ('linear', 'log'):
10|    fig, ax = plt.subplots()
11|    ax.plot(x, y)
12|    ax.set_yscale(yscale)
13|    ax.set_ylim(y.max(), y.min())
14|    plt.title(f'{yscale} scale - Basic inversion')
15|    plt.savefig(f'{yscale}_scale_test1.png')
16|    plt.close()
17|
18|# Test Case 2: Different log bases
19|y = np.logspace(0, 3, 100)
20|x = np.linspace(0, 1, 100)
21|
22|for base in [2, np.e, 10]:
23|    fig, ax = plt.subplots()
24|    ax.plot(x, y)
25|    ax.set_yscale('log', basey=base)
26|    ax.set_ylim(y.max(), y.min())
27|    plt.title(f'Log scale (base {base}) - Inverted')
28|    plt.savefig(f'log_base_{base}_test2.png')
29|    plt.close()
30|
31|# Test Case 3: Very small and large numbers
32|y = np.logspace(-10, 10, 100)
33|x = np.linspace(0, 1, 100)
34|
35|fig, ax = plt.subplots()
36|ax.plot(x, y)
37|ax.set_yscale('log')
38|ax.set_ylim(y.max(), y.min())
39|plt.title('Log scale - Large range inversion')
40|plt.savefig('log_scale_test3.png')
41|plt.close()
[File updated. Please review the changes carefully and make sure they are correct (correct indentation, no duplicate or redundant lines etc). Edit the file again if necessary.]


============================================================



ACTION:

THOUGHT: The test script looks good. Let's run it to verify all test cases:
COMMAND:
python3 comprehensive_test.py

============================================================



OBSERVATION:

[Code executed successfully with no output]

============================================================



ACTION:

THOUGHT: Let me verify that all test images were generated and check if they show the correct behavior:
COMMAND:
ls -l *test*.png

============================================================



OBSERVATION:

-rw-r--r-- 1 root root 24670 Jan  7 18:47 linear_scale_test1.png
-rw-r--r-- 1 root root 21483 Jan  7 18:47 log_base_10_test2.png
-rw-r--r-- 1 root root 31571 Jan  7 18:47 log_base_2.718281828459045_test2.png
-rw-r--r-- 1 root root 20700 Jan  7 18:47 log_base_2_test2.png
-rw-r--r-- 1 root root 13108 Jan  7 18:47 log_scale_test1.png
-rw-r--r-- 1 root root 22436 Jan  7 18:47 log_scale_test3.png



============================================================

