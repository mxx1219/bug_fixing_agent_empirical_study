diff --git a/django/forms/models.py b/django/forms/models.py
index 5edbbd376f..e5c7d9dcac 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -46,10 +46,10 @@ def construct_instance(form, instance, fields=None, exclude=None):
             continue
         if exclude and f.name in exclude:
             continue
-        # Leave defaults for fields that aren't in POST data, except for
-        # checkbox inputs because they don't appear in POST data if not checked.
+        # Only skip if the field has a default AND is not in cleaned_data
         if (f.has_default() and
-                form[f.name].field.widget.value_omitted_from_data(form.data, form.files, form.add_prefix(f.name))):
+                form[f.name].field.widget.value_omitted_from_data(form.data, form.files, form.add_prefix(f.name)) and
+                f.name not in cleaned_data):
             continue
         # Defer saving file-type fields until after the other fields, so a
         # callable upload_to can use the values from other fields.
@@ -64,6 +64,7 @@ def construct_instance(form, instance, fields=None, exclude=None):
     return instance
 
 
+
 # ModelForms #################################################################
 
 def model_to_dict(instance, fields=None, exclude=None):
@@ -1356,3 +1357,4 @@ def modelform_defines_fields(form_class):
         form_class._meta.fields is not None or
         form_class._meta.exclude is not None
     )
+
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..788d593611
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,40 @@
+from django.conf import settings
+settings.configure(
+    INSTALLED_APPS=['django.contrib.contenttypes'],
+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+    SECRET_KEY='dummy-key-for-test',
+)
+
+import django
+django.setup()
+
+from django.db import models
+from django import forms
+
+# Create a model with a field that has a default value
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    status = models.BooleanField(default=True)
+
+    class Meta:
+        app_label = 'testapp'
+
+# Create a form for the model
+class TestForm(forms.ModelForm):
+    class Meta:
+        model = TestModel
+        fields = ['name', 'status']
+        
+    def clean(self):
+        cleaned_data = super().clean()
+        # Try to override the default value in clean()
+        cleaned_data['status'] = False
+        return cleaned_data
+
+# Test the form
+form = TestForm({'name': 'test'})  # Note: status not in input data
+if form.is_valid():
+    instance = form.save(commit=False)  # Don't save to DB since we don't have migrations
+    print(f"Instance status: {instance.status}")  # Should be False (from clean()) but would be True (default) before our fix
+else:
+    print("Form is invalid:", form.errors)
