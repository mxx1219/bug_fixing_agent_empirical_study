diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py
index bf9c2acd26..71b7639771 100644
--- a/django/db/migrations/autodetector.py
+++ b/django/db/migrations/autodetector.py
@@ -824,8 +824,9 @@ class MigrationAutodetector:
         for app_label, model_name, field_name in sorted(self.new_field_keys - self.old_field_keys):
             old_model_name = self.renamed_models.get((app_label, model_name), model_name)
             old_model_state = self.from_state.models[app_label, old_model_name]
-            new_model_state = self.to_state.models[app_label, old_model_name]
+            new_model_state = self.to_state.models[app_label, model_name]
             field = new_model_state.get_field(field_name)
+
             # Scan to see if this is actually a rename!
             field_dec = self.deep_deconstruct(field)
             for rem_app_label, rem_model_name, rem_field_name in sorted(self.old_field_keys - self.new_field_keys):
@@ -1394,3 +1395,4 @@ class MigrationAutodetector:
         if match:
             return int(match[0])
         return None
+
diff --git a/test_migrations.py b/test_migrations.py
new file mode 100644
index 0000000000..480a73b27d
--- /dev/null
+++ b/test_migrations.py
@@ -0,0 +1,82 @@
+import django
+from django.conf import settings
+
+settings.configure(
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    }
+)
+
+django.setup()
+
+from django.db import migrations, models
+from django.db.migrations.state import ProjectState
+from django.db.migrations.autodetector import MigrationAutodetector
+from django.db.migrations.questioner import MigrationQuestioner
+from django.db.migrations.graph import MigrationGraph
+
+class QuietQuestioner(MigrationQuestioner):
+    def ask_rename(self, model_name, old_name, new_name, field=None):
+        return True
+    
+    def ask_rename_model(self, old_model_state, new_model_state):
+        return True
+    
+    def ask_initial(self, app_label):
+        return True
+
+# Create states
+before_state = ProjectState()
+after_state = ProjectState()
+
+# Add a model to the old state
+before_state.add_model(migrations.state.ModelState(
+    "test_one",
+    "MyModel",
+    [
+        ("id", models.AutoField(primary_key=True)),
+        ("name", models.CharField(max_length=50)),
+    ]
+))
+
+# Add renamed model to new state
+after_state.add_model(migrations.state.ModelState(
+    "test_one",
+    "MyModel2",
+    [
+        ("id", models.AutoField(primary_key=True)),
+        ("new_name", models.CharField(max_length=50)),
+    ]
+))
+
+# Create empty graph
+graph = MigrationGraph()
+
+# Run autodetector
+autodetector = MigrationAutodetector(
+    before_state,
+    after_state,
+    questioner=QuietQuestioner()
+)
+
+# This should not raise KeyError anymore
+changes = autodetector.changes(graph)
+
+# Print the operations to verify
+for app_label, migrations in changes.items():
+    print(f"\nApp: {app_label}")
+    for migration in migrations:
+        print("\nOperations:")
+        for operation in migration.operations:
+            print(f"  {operation}")
+        print("\nDependencies:")
+        for dependency in migration.dependencies:
+            print(f"  {dependency}")
+
