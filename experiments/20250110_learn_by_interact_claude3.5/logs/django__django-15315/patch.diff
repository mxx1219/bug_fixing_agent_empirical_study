diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 88c9ca9f28..c781625cb5 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -542,11 +542,8 @@ class Field(RegisterLookupMixin):
         return NotImplemented
 
     def __hash__(self):
-        return hash((
-            self.creation_counter,
-            self.model._meta.app_label if hasattr(self, 'model') else None,
-            self.model._meta.model_name if hasattr(self, 'model') else None,
-        ))
+        return hash(self.creation_counter)
+
 
     def __deepcopy__(self, memodict):
         # We don't have to deepcopy very much here, since most things are not
@@ -2538,3 +2535,4 @@ class SmallAutoField(AutoFieldMixin, SmallIntegerField):
 
     def rel_db_type(self, connection):
         return SmallIntegerField().db_type(connection=connection)
+
diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 0000000000..86e1fa9987
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,36 @@
+from django.conf import settings
+settings.configure()
+
+import django
+django.setup()
+
+from django.db import models
+
+def test_hash_stability():
+    f = models.CharField(max_length=200)
+    d = {f: 1}
+    print(f"Initial hash of f: {hash(f)}")
+    print(f"Initial f.__dict__:", f.__dict__)
+
+    class Book(models.Model):
+        title = f
+        class Meta:
+            app_label = '_test'
+
+    print(f"Hash of f after assignment: {hash(f)}")
+    print(f"f.__dict__ after assignment:", f.__dict__)
+    print(f"Is f still in d? {f in d}")
+    assert f in d
+
+    # Try to create another model using the same field
+    class AnotherBook(models.Model):
+        name = f
+        class Meta:
+            app_label = '_test'
+
+    print(f"Hash of f after second assignment: {hash(f)}")
+    print(f"Is f still in d? {f in d}")
+    assert f in d
+
+test_hash_stability()
+
