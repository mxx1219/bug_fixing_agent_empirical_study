diff --git a/django/views/generic/base.py b/django/views/generic/base.py
index db1842e3e5..d16d4567f0 100644
--- a/django/views/generic/base.py
+++ b/django/views/generic/base.py
@@ -148,7 +148,12 @@ class View:
             request.path,
             extra={"status_code": 405, "request": request},
         )
-        return HttpResponseNotAllowed(self._allowed_methods())
+        response = HttpResponseNotAllowed(self._allowed_methods())
+        if self.view_is_async:
+            async def func():
+                return response
+            return func()
+        return response
 
     def options(self, request, *args, **kwargs):
         """Handle responding to requests for the OPTIONS HTTP verb."""
@@ -273,3 +278,4 @@ class RedirectView(View):
 
     def patch(self, request, *args, **kwargs):
         return self.get(request, *args, **kwargs)
+
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..d3d12c931d
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,56 @@
+import os
+import django
+import asyncio
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='dummy-key-for-testing',
+        ROOT_URLCONF=__name__,
+        MIDDLEWARE=[],
+        ALLOWED_HOSTS=['*'],
+    )
+    django.setup()
+
+from django.urls import path
+from django.views import View
+from django.http import HttpResponse
+from django.core.asgi import get_asgi_application
+from django.test import AsyncClient
+
+class Demo(View):
+    """This basic view supports only POST requests"""
+    async def post(self, request):
+        return HttpResponse("ok")
+
+urlpatterns = [
+    path("demo", Demo.as_view()),
+]
+
+app = get_asgi_application()
+
+async def test_requests():
+    client = AsyncClient()
+    
+    # Test GET (should return 405)
+    print("\nTesting GET request:")
+    response = await client.get('/demo')
+    print(f"Response status code: {response.status_code}")
+    print(f"Response headers: {response.headers}")
+    
+    # Test PUT (should return 405)
+    print("\nTesting PUT request:")
+    response = await client.put('/demo')
+    print(f"Response status code: {response.status_code}")
+    print(f"Response headers: {response.headers}")
+    
+    # Test POST (should succeed)
+    print("\nTesting POST request:")
+    response = await client.post('/demo')
+    print(f"Response status code: {response.status_code}")
+    print(f"Response content: {response.content.decode()}")
+
+if __name__ == '__main__':
+    asyncio.run(test_requests())
+
