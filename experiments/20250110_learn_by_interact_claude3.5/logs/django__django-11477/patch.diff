diff --git a/django/urls/base.py b/django/urls/base.py
index 0e1c3d909c..16db2c20e8 100644
--- a/django/urls/base.py
+++ b/django/urls/base.py
@@ -170,11 +170,15 @@ def translate_url(url, lang_code):
         pass
     else:
         to_be_reversed = "%s:%s" % (match.namespace, match.url_name) if match.namespace else match.url_name
+        # Filter out None values from kwargs to handle optional named groups
+        kwargs = {k: v for k, v in match.kwargs.items() if v is not None}
         with override(lang_code):
             try:
-                url = reverse(to_be_reversed, args=match.args, kwargs=match.kwargs)
+                url = reverse(to_be_reversed, args=match.args, kwargs=kwargs)
             except NoReverseMatch:
                 pass
             else:
                 url = urlunsplit((parsed.scheme, parsed.netloc, url, parsed.query, parsed.fragment))
     return url
+
+
diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
index af0508f94e..e16ddb31b7 100644
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -151,13 +151,14 @@ class RegexPattern(CheckURLMixin):
         match = self.regex.search(path)
         if match:
             # If there are any named groups, use those as kwargs, ignoring
-            # non-named groups. Otherwise, pass all non-named arguments as
-            # positional arguments.
-            kwargs = match.groupdict()
+            # non-named groups and None values. Otherwise, pass all non-named
+            # arguments as positional arguments.
+            kwargs = {k: v for k, v in match.groupdict().items() if v is not None}
             args = () if kwargs else match.groups()
             return path[match.end():], args, kwargs
         return None
 
+
     def check(self):
         warnings = []
         warnings.extend(self._check_pattern_startswith_slash())
@@ -667,3 +668,4 @@ class URLResolver:
                 "a valid view function or pattern name." % {'view': lookup_view_s}
             )
         raise NoReverseMatch(msg)
+
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..486cdd28c4
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,59 @@
+from django.conf import settings
+from django.urls import path, translate_url, include, re_path
+from django.http import HttpResponse
+from django.conf.urls.i18n import i18n_patterns
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    ROOT_URLCONF=__name__,
+    SECRET_KEY='dummy',
+    USE_I18N=True,
+    LANGUAGE_CODE='en',
+    LANGUAGES=[('en', 'English'), ('es', 'Spanish')],
+    MIDDLEWARE=[
+        'django.middleware.locale.LocaleMiddleware',
+    ],
+)
+
+# Create a view
+def test_view(request, article, section=None):
+    return HttpResponse(f"Article: {article}, Section: {section}")
+
+# URL patterns with optional named group using regex pattern
+# This better demonstrates the issue with optional parameters
+urlpatterns = [
+    re_path(r'^articles/(?P<article>[\w-]+)(?:/(?P<section>[\w-]+))?/$', test_view, name='article'),
+]
+
+if __name__ == '__main__':
+    import django
+    django.setup()
+    
+    # Test case 1: URL without optional parameter
+    url = '/articles/my-article/'
+    translated = translate_url(url, 'es')
+    print(f"\nTest 1 - URL without optional parameter:")
+    print(f"Original: {url}")
+    print(f"Translated: {translated}")
+    print(f"Section in kwargs: {url} -> ", end='')
+    try:
+        from django.urls import resolve
+        match = resolve(url)
+        print(f"section={match.kwargs.get('section')}")
+    except:
+        print("Failed to resolve")
+    
+    # Test case 2: URL with optional parameter
+    url = '/articles/my-article/intro/'
+    translated = translate_url(url, 'es')
+    print(f"\nTest 2 - URL with optional parameter:")
+    print(f"Original: {url}")
+    print(f"Translated: {translated}")
+    print(f"Section in kwargs: {url} -> ", end='')
+    try:
+        match = resolve(url)
+        print(f"section={match.kwargs.get('section')}")
+    except:
+        print("Failed to resolve")
+
