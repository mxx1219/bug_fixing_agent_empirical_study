diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py
index 494890cc23..536dff0205 100644
--- a/django/contrib/staticfiles/storage.py
+++ b/django/contrib/staticfiles/storage.py
@@ -220,6 +220,8 @@ class HashedFilesMixin:
 
         # where to store the new paths
         hashed_files = {}
+        # Track which files have been yielded
+        yielded_files = set()
 
         # build a list of adjustable files
         adjustable_paths = [
@@ -229,14 +231,18 @@ class HashedFilesMixin:
         # Do a single pass first. Post-process all files once, then repeat for
         # adjustable files.
         for name, hashed_name, processed, _ in self._post_process(paths, adjustable_paths, hashed_files):
-            yield name, hashed_name, processed
+            if processed and name not in yielded_files:
+                yield name, hashed_name, processed
+                yielded_files.add(name)
 
         paths = {path: paths[path] for path in adjustable_paths}
 
         for i in range(self.max_post_process_passes):
             substitutions = False
             for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):
-                yield name, hashed_name, processed
+                if processed and subst and name not in yielded_files:
+                    yield name, hashed_name, processed
+                    yielded_files.add(name)
                 substitutions = substitutions or subst
 
             if not substitutions:
@@ -439,3 +445,4 @@ class ConfiguredStorage(LazyObject):
 
 
 staticfiles_storage = ConfiguredStorage()
+
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..c7c74256f7
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,40 @@
+from django.conf import settings
+from django.contrib.staticfiles.storage import HashedFilesMixin, FileSystemStorage
+from django.core.files.base import ContentFile
+import os
+
+# Configure Django settings
+settings.configure(
+    DEBUG=False,
+    STATIC_URL='/static/',
+    STATIC_ROOT=os.path.join(os.getcwd(), 'static_root')
+)
+
+class TestStorage(HashedFilesMixin, FileSystemStorage):
+    def __init__(self, *args, **kwargs):
+        kwargs['location'] = settings.STATIC_ROOT
+        super().__init__(*args, **kwargs)
+
+# Create test directory and file
+os.makedirs(os.path.join(settings.STATIC_ROOT, 'admin/css'), exist_ok=True)
+css_path = os.path.join(settings.STATIC_ROOT, 'admin/css/base.css')
+with open(css_path, 'w') as f:
+    f.write("""
+body {
+    background: url("../img/bg.png");
+    font-family: sans-serif;
+}
+""")
+
+# Initialize storage
+storage = TestStorage()
+
+# Simulate collectstatic's behavior
+paths = {
+    'admin/css/base.css': (storage, 'admin/css/base.css')
+}
+
+print("Processing files:")
+for name, hashed_name, processed in storage.post_process(paths):
+    if processed:
+        print(f"Post-processed '{name}' as '{hashed_name}'")
diff --git a/static_root/admin/css/base.css b/static_root/admin/css/base.css
new file mode 100644
index 0000000000..482f3ec732
--- /dev/null
+++ b/static_root/admin/css/base.css
@@ -0,0 +1,5 @@
+
+body {
+    background: url("../img/bg.png");
+    font-family: sans-serif;
+}
diff --git a/static_root/admin/css/base.d67623fcd704.css b/static_root/admin/css/base.d67623fcd704.css
new file mode 100644
index 0000000000..482f3ec732
--- /dev/null
+++ b/static_root/admin/css/base.d67623fcd704.css
@@ -0,0 +1,5 @@
+
+body {
+    background: url("../img/bg.png");
+    font-family: sans-serif;
+}
