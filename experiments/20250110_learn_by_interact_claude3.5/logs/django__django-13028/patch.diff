diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index ce18098fd2..e81fe2e571 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1124,11 +1124,12 @@ class Query(BaseExpression):
 
     def check_filterable(self, expression):
         """Raise an error if expression cannot be used in a WHERE clause."""
-        if not getattr(expression, 'filterable', True):
+        if not getattr(expression, '_filterable', True):
             raise NotSupportedError(
                 expression.__class__.__name__ + ' is disallowed in the filter '
                 'clause.'
             )
+
         if hasattr(expression, 'get_source_expressions'):
             for expr in expression.get_source_expressions():
                 self.check_filterable(expr)
@@ -2412,3 +2413,4 @@ class JoinPromoter:
         query.promote_joins(to_promote)
         query.demote_joins(to_demote)
         return to_demote
+
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..4e12ee8a3b
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,39 @@
+# Setup minimal Django environment first
+from django.conf import settings
+settings.configure(
+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+    INSTALLED_APPS=['__main__'],
+    MIDDLEWARE=[],
+)
+import django
+django.setup()
+
+from django.db import models
+from django.utils import timezone
+
+class ProductMetaDataType(models.Model):
+    label = models.CharField(max_length=255, unique=True, blank=False, null=False)
+    filterable = models.BooleanField(default=False)
+
+    def __str__(self):
+        return self.label
+
+class ProductMetaData(models.Model):
+    id = models.BigAutoField(primary_key=True)
+    value = models.TextField(null=False, blank=False)
+    metadata_type = models.ForeignKey(ProductMetaDataType, null=False, blank=False, on_delete=models.CASCADE)
+
+# Create database tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(ProductMetaDataType)
+    schema_editor.create_model(ProductMetaData)
+
+# Create test data
+metadata_type = ProductMetaDataType.objects.create(label="test", filterable=False)
+ProductMetaData.objects.create(value="test value", metadata_type=metadata_type)
+
+# Try the filter that causes the error
+print("Testing filter...")
+ProductMetaData.objects.filter(metadata_type=metadata_type)
+print("Filter successful!")
