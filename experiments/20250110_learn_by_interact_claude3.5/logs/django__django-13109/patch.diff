diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py
index d517d7269b..f89aff117c 100644
--- a/django/db/models/fields/related.py
+++ b/django/db/models/fields/related.py
@@ -914,9 +914,17 @@ class ForeignKey(ForeignObject):
             return
 
         using = router.db_for_read(self.remote_field.model, instance=model_instance)
-        qs = self.remote_field.model._default_manager.using(using).filter(
+        qs = self.remote_field.model._base_manager.using(using).filter(
             **{self.remote_field.field_name: value}
         )
+
+
+
+
+
+
+
+
         qs = qs.complex_filter(self.get_limit_choices_to())
         if not qs.exists():
             raise exceptions.ValidationError(
@@ -1690,3 +1698,12 @@ class ManyToManyField(RelatedField):
 
     def db_parameters(self, connection):
         return {"type": None, "check": None}
+
+
+
+
+
+
+
+
+
diff --git "a/django/db/models/fields/related.py\"" "b/django/db/models/fields/related.py\""
new file mode 100644
index 0000000000..9d66705ec2
--- /dev/null
+++ "b/django/db/models/fields/related.py\""
@@ -0,0 +1,4 @@
+using = router.db_for_read(self.remote_field.model, instance=model_instance)
+        qs = self.remote_field.model._base_manager.using(using).filter(
+            **{self.remote_field.field_name: value}
+        )
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..4f00e2a357
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,62 @@
+from django.db import models
+from django import forms
+from django.conf import settings
+import os
+import django
+
+# Configure Django settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=['django.contrib.contenttypes'],
+)
+django.setup()
+
+# Define the models
+class ArticleManager(models.Manager):
+    def get_queryset(self):
+        qs = super().get_queryset()
+        return qs.filter(archived=False)
+
+class Article(models.Model):
+    title = models.CharField(max_length=100)
+    archived = models.BooleanField(default=False)
+    # Don't include archived articles by default
+    objects = ArticleManager()
+    class Meta:
+        app_label = 'reproduce'
+
+class FavoriteArticle(models.Model):
+    article = models.ForeignKey(Article, on_delete=models.CASCADE)
+    class Meta:
+        app_label = 'reproduce'
+
+class FavoriteArticleForm(forms.ModelForm):
+    class Meta:
+        model = FavoriteArticle
+        fields = '__all__'
+
+    def __init__(self, *args, **kwargs):
+        super().__init__(*args, **kwargs)
+        # Use the base manager instead of the default manager to allow archived articles
+        self.fields['article'].queryset = Article._base_manager.all()
+
+# Create tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Article)
+    schema_editor.create_model(FavoriteArticle)
+
+# Create test data
+article = Article.objects.create(title="Test Article", archived=True)
+
+# Test form validation
+form_data = {'article': article.id}
+form = FavoriteArticleForm(data=form_data)
+print(f"Form is valid: {form.is_valid()}")  # Should print False with current code
+if not form.is_valid():
+    print(f"Form errors: {form.errors}")
