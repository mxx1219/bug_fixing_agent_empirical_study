diff --git a/django/core/validators.py b/django/core/validators.py
index a385819510..c8e2f35389 100644
--- a/django/core/validators.py
+++ b/django/core/validators.py
@@ -101,11 +101,15 @@ class URLValidator(RegexValidator):
     def __call__(self, value):
         if not isinstance(value, str):
             raise ValidationError(self.message, code=self.code, params={'value': value})
+        # Check for newlines, carriage returns, and tabs that would be stripped by urlsplit in Python 3.10+
+        if '\n' in value or '\r' in value or '\t' in value:
+            raise ValidationError(self.message, code=self.code, params={'value': value})
         # Check if the scheme is valid.
         scheme = value.split('://')[0].lower()
         if scheme not in self.schemes:
             raise ValidationError(self.message, code=self.code, params={'value': value})
 
+
         # Then check full URL
         try:
             super().__call__(value)
@@ -559,3 +563,4 @@ class ProhibitNullCharactersValidator:
             self.message == other.message and
             self.code == other.code
         )
+
diff --git a/test_url_validator.py b/test_url_validator.py
new file mode 100644
index 0000000000..f4fe840e25
--- /dev/null
+++ b/test_url_validator.py
@@ -0,0 +1,23 @@
+from django.core.validators import URLValidator
+from django.core.exceptions import ValidationError
+
+def test_url_with_newline():
+    validator = URLValidator()
+    
+    # Test URLs with newlines that should raise ValidationError
+    problematic_urls = [
+        'http://www.djangoproject.com/\n',
+        'http://[::ffff:192.9.5.5]\n',
+        'http://example.com/\r',
+        'http://example.com/\t'
+    ]
+    
+    for url in problematic_urls:
+        try:
+            validator(url)
+            print(f"FAIL: ValidationError not raised for {repr(url)}")
+        except ValidationError:
+            print(f"PASS: ValidationError raised for {repr(url)}")
+
+if __name__ == '__main__':
+    test_url_with_newline()
