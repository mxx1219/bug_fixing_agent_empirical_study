diff --git a/django/core/management/base.py b/django/core/management/base.py
index 0c3a981290..259e6d75c9 100644
--- a/django/core/management/base.py
+++ b/django/core/management/base.py
@@ -286,9 +286,14 @@ class BaseCommand:
             '--force-color', action='store_true',
             help='Force colorization of the command output.',
         )
+        parser.add_argument(
+            '--skip-checks', action='store_true',
+            help='Skip system checks.',
+        )
         self.add_arguments(parser)
         return parser
 
+
     def add_arguments(self, parser):
         """
         Entry point for subclassed commands to add custom arguments.
@@ -546,3 +551,4 @@ class LabelCommand(BaseCommand):
         string as given on the command line.
         """
         raise NotImplementedError('subclasses of LabelCommand must provide a handle_label() method')
+
diff --git a/django/core/management/commands/runserver.py b/django/core/management/commands/runserver.py
index f501e995e0..88dc7149d9 100644
--- a/django/core/management/commands/runserver.py
+++ b/django/core/management/commands/runserver.py
@@ -112,13 +112,14 @@ class Command(BaseCommand):
         # 'shutdown_message' is a stealth option.
         shutdown_message = options.get('shutdown_message', '')
         quit_command = 'CTRL-BREAK' if sys.platform == 'win32' else 'CONTROL-C'
-
         self.stdout.write("Performing system checks...\n\n")
-        self.check(display_num_errors=True)
-        # Need to check migrations here, so can't use the
-        # requires_migrations_check attribute.
-        self.check_migrations()
+        if not options.get('skip_checks'):
+            self.check(display_num_errors=True)
+            # Need to check migrations here, so can't use the
+            # requires_migrations_check attribute.
+            self.check_migrations()
         now = datetime.now().strftime('%B %d, %Y - %X')
+
         self.stdout.write(now)
         self.stdout.write((
             "Django version %(version)s, using settings %(settings)r\n"
@@ -159,3 +160,4 @@ class Command(BaseCommand):
 
 # Kept for backward compatibility
 BaseRunserverCommand = Command
+
diff --git a/test_management.py b/test_management.py
new file mode 100644
index 0000000000..5a7bc32980
--- /dev/null
+++ b/test_management.py
@@ -0,0 +1,28 @@
+import os
+import django
+from django.core.management import ManagementUtility
+import sys
+
+# Set up minimal Django environment
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')
+
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        ALLOWED_HOSTS=['*'],
+        DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+        INSTALLED_APPS=[],
+    )
+
+django.setup()
+
+# Test with runserver command which normally performs checks
+test_args = ['django-admin', 'runserver', '--skip-checks', '--noreload']
+sys.argv = test_args
+
+# Run the command
+utility = ManagementUtility(test_args)
+utility.execute()
+
+
