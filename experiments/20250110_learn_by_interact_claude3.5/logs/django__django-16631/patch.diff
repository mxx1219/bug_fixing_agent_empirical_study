diff --git a/django/contrib/sessions/backends/signed_cookies.py b/django/contrib/sessions/backends/signed_cookies.py
index dc41c6f12b..6c24b38eb7 100644
--- a/django/contrib/sessions/backends/signed_cookies.py
+++ b/django/contrib/sessions/backends/signed_cookies.py
@@ -1,3 +1,4 @@
+from django.conf import settings
 from django.contrib.sessions.backends.base import SessionBase
 from django.core import signing
 
@@ -16,6 +17,7 @@ class SessionStore(SessionBase):
                 # This doesn't handle non-default expiry dates, see #19201
                 max_age=self.get_session_cookie_age(),
                 salt="django.contrib.sessions.backends.signed_cookies",
+                fallback_keys=settings.SECRET_KEY_FALLBACKS,
             )
         except Exception:
             # BadSignature, ValueError, or unpickling exceptions. If any of
@@ -74,8 +76,10 @@ class SessionStore(SessionBase):
             compress=True,
             salt="django.contrib.sessions.backends.signed_cookies",
             serializer=self.serializer,
+            fallback_keys=settings.SECRET_KEY_FALLBACKS,
         )
 
     @classmethod
     def clear_expired(cls):
         pass
+
diff --git a/django/utils/crypto.py b/django/utils/crypto.py
index 1c0e7001c6..f8effc78a5 100644
--- a/django/utils/crypto.py
+++ b/django/utils/crypto.py
@@ -25,23 +25,37 @@ def salted_hmac(key_salt, value, secret=None, *, algorithm="sha1"):
     """
     if secret is None:
         secret = settings.SECRET_KEY
+        secrets = [secret] + list(settings.SECRET_KEY_FALLBACKS)
+    else:
+        secrets = [secret]
 
     key_salt = force_bytes(key_salt)
-    secret = force_bytes(secret)
     try:
         hasher = getattr(hashlib, algorithm)
     except AttributeError as e:
         raise InvalidAlgorithm(
             "%r is not an algorithm accepted by the hashlib module." % algorithm
         ) from e
-    # We need to generate a derived key from our base key.  We can do this by
-    # passing the key_salt and our base key through a pseudo-random function.
-    key = hasher(key_salt + secret).digest()
-    # If len(key_salt + secret) > block size of the hash algorithm, the above
-    # line is redundant and could be replaced by key = key_salt + secret, since
-    # the hmac module does the same thing for keys longer than the block size.
-    # However, we need to ensure that we *always* do this.
-    return hmac.new(key, msg=force_bytes(value), digestmod=hasher)
+    
+    # Try each secret key until one works
+    for key in secrets:
+        key = force_bytes(key)
+        # We need to generate a derived key from our base key.  We can do this by
+        # passing the key_salt and our base key through a pseudo-random function.
+        derived_key = hasher(key_salt + key).digest()
+        # If len(key_salt + key) > block size of the hash algorithm, the above
+        # line is redundant and could be replaced by key = key_salt + key, since
+        # the hmac module does the same thing for keys longer than the block size.
+        # However, we need to ensure that we *always* do this.
+        try:
+            return hmac.new(derived_key, msg=force_bytes(value), digestmod=hasher)
+        except Exception:
+            continue
+
+    # If no secret worked, use the current secret
+    key = force_bytes(secret)
+    derived_key = hasher(key_salt + key).digest()
+    return hmac.new(derived_key, msg=force_bytes(value), digestmod=hasher)
 
 
 RANDOM_STRING_CHARS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
@@ -74,3 +88,4 @@ def pbkdf2(password, salt, iterations, dklen=0, digest=None):
     password = force_bytes(password)
     salt = force_bytes(salt)
     return hashlib.pbkdf2_hmac(digest().name, password, salt, iterations, dklen)
+
diff --git a/reproduce_session.py b/reproduce_session.py
new file mode 100644
index 0000000000..ab8819400a
--- /dev/null
+++ b/reproduce_session.py
@@ -0,0 +1,53 @@
+from django.conf import settings
+from django.contrib.sessions.backends.signed_cookies import SessionStore
+from django.core.signing import SignatureExpired
+from django.test.utils import override_settings
+import os
+
+# Configure Django settings
+settings.configure(
+    SECRET_KEY='new-key',
+    SECRET_KEY_FALLBACKS=['old-key'],
+    SESSION_ENGINE='django.contrib.sessions.backends.signed_cookies'
+)
+
+def test_session_with_keys(main_key, fallback_keys, session_data=None):
+    """Test session with specific keys"""
+    with override_settings(SECRET_KEY=main_key, SECRET_KEY_FALLBACKS=fallback_keys):
+        session = SessionStore(session_data)
+        if session_data is None:
+            session['test'] = 'value'
+            data = session.save()
+            print(f"Created session with key '{main_key}': {data}")
+            return data
+        else:
+            try:
+                data = session.load()
+                print(f"Successfully loaded session with key '{main_key}' (fallbacks={fallback_keys}): {data}")
+                return True
+            except Exception as e:
+                print(f"Failed to load with key '{main_key}' (fallbacks={fallback_keys}): {e}")
+                return False
+
+# Test cases
+print("\nTest 1: Create session with old key")
+session_data = test_session_with_keys('old-key', [])
+
+print("\nTest 2: Try to read with new key + old key in fallbacks")
+test_session_with_keys('new-key', ['old-key'], session_data)
+
+print("\nTest 3: Try to read with new key + wrong fallback")
+test_session_with_keys('new-key', ['wrong-key'], session_data)
+
+print("\nTest 4: Try to read with multiple fallbacks")
+test_session_with_keys('new-key', ['wrong-key', 'old-key'], session_data)
+
+print("\nTest 5: Try to read with empty fallbacks")
+test_session_with_keys('new-key', [], session_data)
+
+print("\nTest 6: Create new session after key rotation")
+new_session_data = test_session_with_keys('new-key', ['old-key'])
+
+print("\nTest 7: Read new session with old key")
+test_session_with_keys('old-key', [], new_session_data)
+
