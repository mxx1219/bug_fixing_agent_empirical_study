diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 880a2cc17b..ebcfb048b3 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -2115,34 +2115,50 @@ class InlineModelAdmin(BaseModelAdmin):
         if self.opts.auto_created:
             # We're checking the rights to an auto-created intermediate model,
             # which doesn't have its own individual permissions. The user needs
-            # to have the view permission for the related model in order to
-            # be able to do anything with the intermediate model.
-            return self.has_view_permission(request, obj)
+            # to have the change permission for the related model in order to
+            # be able to add intermediate model instances.
+            opts = self.opts
+            # Find the target model that's not the parent model
+            for field in opts.fields:
+                if field.remote_field and field.remote_field.model != self.parent_model:
+                    opts = field.remote_field.model._meta
+                    break
+            return request.user.has_perm(
+                '%s.%s' % (opts.app_label, get_permission_codename('change', opts))
+            )
         return super().has_add_permission(request)
 
     def has_change_permission(self, request, obj=None):
         if self.opts.auto_created:
             # We're checking the rights to an auto-created intermediate model,
             # which doesn't have its own individual permissions. The user needs
-            # to have the view permission for the related model in order to
-            # be able to do anything with the intermediate model.
-            return self.has_view_permission(request, obj)
+            # to have the change permission for the related model in order to
+            # be able to change intermediate model instances.
+            opts = self.opts
+            # Find the target model that's not the parent model
+            for field in opts.fields:
+                if field.remote_field and field.remote_field.model != self.parent_model:
+                    opts = field.remote_field.model._meta
+                    break
+            return request.user.has_perm(
+                '%s.%s' % (opts.app_label, get_permission_codename('change', opts))
+            )
         return super().has_change_permission(request)
 
     def has_delete_permission(self, request, obj=None):
         if self.opts.auto_created:
             # We're checking the rights to an auto-created intermediate model,
             # which doesn't have its own individual permissions. The user needs
-            # to have the view permission for the related model in order to
-            # be able to do anything with the intermediate model.
-            return self.has_view_permission(request, obj)
+            # to have the change permission for the related model in order to
+            # be able to delete intermediate model instances.
+            return self.has_change_permission(request, obj)
         return super().has_delete_permission(request, obj)
 
     def has_view_permission(self, request, obj=None):
         if self.opts.auto_created:
             opts = self.opts
             # The model was auto-created as intermediary for a many-to-many
-            # Many-relationship; find the target model.
+            # relationship; find the target model.
             for field in opts.fields:
                 if field.remote_field and field.remote_field.model != self.parent_model:
                     opts = field.remote_field.model._meta
@@ -2154,9 +2170,11 @@ class InlineModelAdmin(BaseModelAdmin):
         return super().has_view_permission(request)
 
 
+
 class StackedInline(InlineModelAdmin):
     template = 'admin/edit_inline/stacked.html'
 
 
 class TabularInline(InlineModelAdmin):
     template = 'admin/edit_inline/tabular.html'
+
diff --git a/reproduce_m2m.py b/reproduce_m2m.py
new file mode 100644
index 0000000000..835ae72744
--- /dev/null
+++ b/reproduce_m2m.py
@@ -0,0 +1,89 @@
+import os
+import django
+from django.conf import settings
+
+# Configure settings before importing any other Django modules
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:'
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.auth',
+        'django.contrib.contenttypes',
+        'django.contrib.admin',
+    ],
+    ROOT_URLCONF='__main__',  # This module is the URLconf
+    MIDDLEWARE=[
+        'django.contrib.sessions.middleware.SessionMiddleware',
+        'django.contrib.auth.middleware.AuthenticationMiddleware',
+    ]
+)
+django.setup()
+
+# Now we can import Django modules
+from django.contrib.auth import get_user_model
+from django.contrib.auth.models import Permission
+from django.contrib.contenttypes.models import ContentType
+from django.db import models
+from django.contrib import admin
+from django.test import RequestFactory
+from django.core.management import call_command
+
+# Test models
+class Photo(models.Model):
+    class Meta:
+        app_label = 'admin'
+
+class Report(models.Model):
+    photos = models.ManyToManyField(Photo)
+    class Meta:
+        app_label = 'admin'
+
+# Admin class
+class ReportPhotoInline(admin.TabularInline):
+    model = Report.photos.through
+    show_change_link = True
+
+def run_test():
+    # Run migrations first
+    call_command('migrate', verbosity=0)
+
+    # Create test models
+    from django.db import connection
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(Photo)
+        schema_editor.create_model(Report)
+
+    # Create test user with view permission only
+    User = get_user_model()
+    user = User.objects.create_user('testuser', 'test@example.com', 'password')
+    ct = ContentType.objects.get_for_model(Photo)
+    view_perm = Permission.objects.get_or_create(
+        codename='view_photo',
+        name='Can view photo',
+        content_type=ct
+    )[0]
+    user.user_permissions.add(view_perm)
+
+    # Create test objects
+    photo = Photo.objects.create()
+    report = Report.objects.create()
+
+    # Create inline instance
+    inline = ReportPhotoInline(Report, admin.site)
+    request = RequestFactory().get('/')
+    request.user = user
+
+    print("\nTesting permissions for user with only view permission:")
+    print("View permission (should be True):", inline.has_view_permission(request))
+    print("Add permission (should be False):", inline.has_add_permission(request, None))
+    print("Change permission (should be False):", inline.has_change_permission(request, None))
+    print("Delete permission (should be False):", inline.has_delete_permission(request, None))
+
+if __name__ == '__main__':
+    run_test()
+
