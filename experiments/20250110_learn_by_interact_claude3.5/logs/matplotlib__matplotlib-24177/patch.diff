diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py
index 2412f815cd..c71325a34e 100644
--- a/lib/matplotlib/axes/_axes.py
+++ b/lib/matplotlib/axes/_axes.py
@@ -6735,10 +6735,12 @@ such objects
                 np.concatenate(x), bins, bin_range, _w)
         else:
             hist_kwargs['range'] = bin_range
-
         density = bool(density)
         if density and not stacked:
-            hist_kwargs['density'] = density
+            hist_kwargs['density'] = True
+            # Always ensure range is respected when density=True
+            if bin_range is not None:
+                hist_kwargs['range'] = bin_range
 
         # List to store all the top coordinates of the histograms
         tops = []  # Will have shape (n_datasets, n_bins).
@@ -6747,9 +6749,15 @@ such objects
             # this will automatically overwrite bins,
             # so that each histogram uses the same bins
             m, bins = np.histogram(x[i], bins, weights=w[i], **hist_kwargs)
+            # When using step plots with density, ensure proper scaling
+            if density and histtype.startswith('step') and not stacked:
+                db = np.diff(bins)
+                # Scale by the total area to maintain density=True normalization
+                m = m / np.sum(m * db)
             tops.append(m)
         tops = np.array(tops, float)  # causes problems later if it's an int
         bins = np.array(bins, float)  # causes problems if float16
+
         if stacked:
             tops = tops.cumsum(axis=0)
             # If a stacked density plot, normalize so the area of all the
@@ -8243,3 +8251,10 @@ such objects
         ll, ur = self.get_position() * figure_size
         width, height = ur - ll
         return height / (width * self.get_data_ratio())
+
+
+
+
+
+
+
