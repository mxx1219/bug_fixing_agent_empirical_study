diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py
index ae0f886107..0f25f10be0 100644
--- a/django/db/models/query_utils.py
+++ b/django/db/models/query_utils.py
@@ -84,19 +84,16 @@ class Q(tree.Node):
         path = '%s.%s' % (self.__class__.__module__, self.__class__.__name__)
         if path.startswith('django.db.models.query_utils'):
             path = path.replace('django.db.models.query_utils', 'django.db.models')
-        args, kwargs = (), {}
-        if len(self.children) == 1 and not isinstance(self.children[0], Q):
-            child = self.children[0]
-            kwargs = {child[0]: child[1]}
-        else:
-            args = tuple(self.children)
-            if self.connector != self.default:
-                kwargs = {'_connector': self.connector}
+        args = tuple(self.children)
+        kwargs = {}
+        if self.connector != self.default:
+            kwargs['_connector'] = self.connector
         if self.negated:
             kwargs['_negated'] = True
         return path, args, kwargs
 
 
+
 class DeferredAttribute:
     """
     A wrapper for a deferred-loading field. When the value is read from this
@@ -322,3 +319,4 @@ class FilteredRelation:
         query = compiler.query
         where = query.build_filtered_relation_q(self.condition, reuse=set(self.path))
         return compiler.compile(where)
+
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..deb3e6508f
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,29 @@
+from django.conf import settings
+from django.db.models import Q, Exists
+
+# Configure minimal settings
+settings.configure(
+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3'}},
+    INSTALLED_APPS=[
+        'django.contrib.auth',
+        'django.contrib.contenttypes',
+    ]
+)
+
+# Initialize Django
+import django
+django.setup()
+
+from django.contrib.auth import get_user_model
+
+# Test 1: Simple Q object with one child
+q1 = Q(x=1)
+print("Test 1:", q1.deconstruct())
+
+# Test 2: Q object with multiple children
+q2 = Q(x=1, y=2)
+print("Test 2:", q2.deconstruct())
+
+# Test 3: Q object with non-subscriptable child
+q3 = Q(Exists(get_user_model().objects.filter(username='jim')))
+print("Test 3:", q3.deconstruct())
