diff --git a/django/db/models/base.py b/django/db/models/base.py
index 8ea6c05ef9..b22701346b 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -200,11 +200,20 @@ class ModelBase(type):
             # Skip concrete parent classes.
             if base != new_class and not base._meta.abstract:
                 continue
-            # Locate OneToOneField instances.
+            # Locate OneToOneField instances marked as parent links
+            parent_links_count = {}
             for field in base._meta.local_fields:
-                if isinstance(field, OneToOneField):
+                if isinstance(field, OneToOneField) and getattr(field.remote_field, 'parent_link', False):
                     related = resolve_relation(new_class, field.remote_field.model)
-                    parent_links[make_model_tuple(related)] = field
+                    related_tuple = make_model_tuple(related)
+                    parent_links_count[related_tuple] = parent_links_count.get(related_tuple, 0) + 1
+                    if parent_links_count[related_tuple] > 1:
+                        raise ValueError(
+                            "Multiple parent links found for '%s' - only one link "
+                            "can be marked as parent_link=True" % related.__name__
+                        )
+                    parent_links[related_tuple] = field
+
 
         # Track fields inherited from base models.
         inherited_attributes = set()
@@ -1913,3 +1922,5 @@ def model_unpickle(model_id):
 
 
 model_unpickle.__safe_for_unpickle__ = True
+
+
diff --git "a/django/db/models/base.py\"" "b/django/db/models/base.py\""
new file mode 100644
index 0000000000..a134692239
--- /dev/null
+++ "b/django/db/models/base.py\""
@@ -0,0 +1,13 @@
+# Locate OneToOneField instances marked as parent links
+            parent_links_count = {}
+            for field in base._meta.local_fields:
+                if isinstance(field, OneToOneField) and getattr(field.remote_field, 'parent_link', False):
+                    related = resolve_relation(new_class, field.remote_field.model)
+                    related_tuple = make_model_tuple(related)
+                    parent_links_count[related_tuple] = parent_links_count.get(related_tuple, 0) + 1
+                    if parent_links_count[related_tuple] > 1:
+                        raise ValueError(
+                            "Multiple parent links found for '%s' - only one link "
+                            "can be marked as parent_link=True" % related.__name__
+                        )
+                    parent_links[related_tuple] = field
diff --git a/test_mti.py b/test_mti.py
new file mode 100644
index 0000000000..bbcc83180c
--- /dev/null
+++ b/test_mti.py
@@ -0,0 +1,34 @@
+from django.db import models
+from django.conf import settings
+import django
+import os
+
+# Configure minimal Django settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+    ],
+)
+django.setup()
+
+# Define the models that demonstrate the issue
+class Document(models.Model):
+    class Meta:
+        app_label = 'django.contrib.contenttypes'
+
+class Picking(Document):
+    # Multiple fields with parent_link=True should raise an error
+    document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')
+    origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT, parent_link=True)
+    
+    class Meta:
+        app_label = 'django.contrib.contenttypes'
+
+print("Model created successfully")
+
