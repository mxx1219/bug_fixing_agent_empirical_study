diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index 850734709d..c9c623a005 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -126,10 +126,11 @@ class SQLCompiler:
             for col in cols:
                 expressions.append(col)
         for expr, (sql, params, is_ref) in order_by:
-            # Skip References to the select clause, as all expressions in the
-            # select clause are already part of the group by.
-            if not is_ref:
+            # Skip References to the select clause and Meta.ordering expressions,
+            # as they should not be part of the group by.
+            if not is_ref and not hasattr(self, '_meta_ordering'):
                 expressions.extend(expr.get_group_by_cols())
+
         having_group_by = self.having.get_group_by_cols() if self.having else ()
         for expr in having_group_by:
             expressions.append(expr)
@@ -1623,3 +1624,4 @@ def cursor_iter(cursor, sentinel, col_count, itersize):
             yield rows if col_count is None else [r[:col_count] for r in rows]
     finally:
         cursor.close()
+
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..661992bff4
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,61 @@
+import os
+import django
+from django.db import models
+from django.db.models import Count
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.settings')
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=['django.contrib.contenttypes'],
+        SECRET_KEY='dummy'
+    )
+django.setup()
+
+# Define models
+class Author(models.Model):
+    name = models.CharField(max_length=100)
+    status = models.CharField(max_length=100, default='active')
+    
+    class Meta:
+        ordering = ['name']
+        app_label = 'contenttypes'
+
+class Book(models.Model):
+    author = models.ForeignKey(Author, on_delete=models.CASCADE)
+    genre = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'contenttypes'
+
+# Create tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Author)
+    schema_editor.create_model(Book)
+
+# Create test data
+a1 = Author.objects.create(name='Author 1', status='active')
+a2 = Author.objects.create(name='Author 2', status='active')
+Book.objects.create(author=a1, genre='Sci-fi')
+Book.objects.create(author=a1, genre='Fantasy')
+Book.objects.create(author=a2, genre='Mystery')
+
+# Run queries and show the issue
+print("\nQuery 1 (grouping by status, but Meta.ordering adds name to GROUP BY):")
+query = Author.objects.values('status').annotate(count=Count('id'))
+print("SQL:", query.query)
+print("Results:", list(query))
+
+print("\nQuery 2 (explicit values() so Meta.ordering doesn't affect GROUP BY):")
+query = Author.objects.values('status', 'name').annotate(count=Count('id')).values('status', 'count')
+print("SQL:", query.query)
+print("Results:", list(query))
+
