diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py
index f269d9e17f..186433885b 100644
--- a/django/db/models/fields/related.py
+++ b/django/db/models/fields/related.py
@@ -975,6 +975,11 @@ class ForeignKey(ForeignObject):
             raise ValueError("Cannot create form field for %r yet, because "
                              "its related model %r has not been loaded yet" %
                              (self.name, self.remote_field.model))
+        
+        # If this is a RadioSelect and blank=False, we don't want an empty option
+        if kwargs.get('widget') and isinstance(kwargs['widget'], forms.RadioSelect) and not self.blank:
+            kwargs['empty_label'] = None
+            
         return super().formfield(**{
             'form_class': forms.ModelChoiceField,
             'queryset': self.remote_field.model._default_manager.using(using),
@@ -1671,3 +1676,6 @@ class ManyToManyField(RelatedField):
 
     def db_parameters(self, connection):
         return {"type": None, "check": None}
+
+
+
diff --git "a/django/db/models/fields/related.py\"" "b/django/db/models/fields/related.py\""
new file mode 100644
index 0000000000..d6635b74ca
--- /dev/null
+++ "b/django/db/models/fields/related.py\""
@@ -0,0 +1,16 @@
+def formfield(self, *, using=None, **kwargs):
+        if isinstance(self.remote_field.model, str):
+            raise ValueError("Cannot create form field for %r yet, because "
+                             "its related model %r has not been loaded yet" %
+                             (self.name, self.remote_field.model))
+        
+        # If this is a RadioSelect and blank=False, we don't want an empty option
+        if kwargs.get('widget') and isinstance(kwargs['widget'], forms.RadioSelect) and not self.blank:
+            kwargs['empty_label'] = None
+            
+        return super().formfield(**{
+            'form_class': forms.ModelChoiceField,
+            'queryset': self.remote_field.model._default_manager.using(using),
+            'to_field_name': self.remote_field.field_name,
+            **kwargs,
+        })
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..44df723b46
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,49 @@
+import os
+from django.conf import settings
+
+# Configure Django settings first
+if not settings.configured:
+    settings.configure(
+        DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+        INSTALLED_APPS=['django.contrib.contenttypes', '__main__'],
+        SECRET_KEY='dummy-key-for-test'
+    )
+
+import django
+django.setup()
+
+from django.db import models
+from django.forms import ModelForm, RadioSelect
+
+# Test models
+class BatchData(models.Model):
+    name = models.CharField(max_length=100)
+    
+    def __str__(self):
+        return self.name
+
+class TestRun(models.Model):
+    data_file = models.ForeignKey(BatchData, on_delete=models.SET_NULL, null=True, blank=False)
+
+# Test form
+class TestRunForm(ModelForm):
+    class Meta:
+        model = TestRun
+        fields = ['data_file']
+        widgets = {'data_file': RadioSelect()}
+
+if __name__ == '__main__':
+    # Create database tables
+    from django.db import connection
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(BatchData)
+        schema_editor.create_model(TestRun)
+    
+    # Create a test batch data
+    batch = BatchData.objects.create(name='First Data File')
+    
+    # Create and render the form
+    form = TestRunForm()
+    print("Form HTML:")
+    print(form.as_ul())
+
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..23ef7bd332
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,12 @@
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+]
+
+SECRET_KEY = 'dummy-key-for-test'
