diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py
index e19c881cda..aaec057ac6 100644
--- a/django/db/migrations/serializer.py
+++ b/django/db/migrations/serializer.py
@@ -273,9 +273,10 @@ class TupleSerializer(BaseSequenceSerializer):
 class TypeSerializer(BaseSerializer):
     def serialize(self):
         special_cases = [
-            (models.Model, "models.Model", []),
+            (models.Model, "models.Model", ["from django.db import models"]),
             (type(None), 'type(None)', []),
         ]
+
         for case, string, imports in special_cases:
             if case is self.value:
                 return string, set(imports)
@@ -355,3 +356,4 @@ def serializer_factory(value):
         "migration files.\nFor more, see https://docs.djangoproject.com/en/%s/"
         "topics/migrations/#migration-serializing" % (value, get_docs_version())
     )
+
diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 0000000000..039a6697e5
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,58 @@
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=['django.contrib.contenttypes'],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+    )
+
+import django
+django.setup()
+
+from django.db import models
+from django.db.migrations.writer import MigrationWriter
+from django.db.migrations import Migration
+from django.db.migrations import operations
+
+class MyField(models.TextField):
+    pass
+
+class MyBaseModel(models.Model):
+    class Meta:
+        abstract = True
+        app_label = 'contenttypes'
+
+class MyMixin:
+    pass
+
+class MyModel(MyMixin, MyBaseModel):
+    name = MyField(primary_key=True)
+    class Meta:
+        app_label = 'contenttypes'
+
+# Create a migration operation manually
+operation = operations.CreateModel(
+    name='MyModel',
+    fields=[('name', MyField(primary_key=True))],
+    options={'abstract': False},
+    bases=(MyMixin, models.Model),
+)
+
+# Create proper migration class
+class TestMigration(Migration):
+    dependencies = []
+    operations = [operation]
+    replaces = []
+
+writer = MigrationWriter(TestMigration('contenttypes', 'test'))
+print("Migration file contents:")
+print("=" * 40)
+print(writer.as_string())
+print("=" * 40)
+
