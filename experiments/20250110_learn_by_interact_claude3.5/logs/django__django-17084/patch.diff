diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 280cb967b4..315a2e75b9 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -1697,9 +1697,9 @@ class OrderBy(Expression):
 class Window(SQLiteNumericMixin, Expression):
     template = "%(expression)s OVER (%(window)s)"
     # Although the main expression may either be an aggregate or an
-    # expression with an aggregate function, the GROUP BY that will
-    # be introduced in the query as a result is not desired.
-    contains_aggregate = False
+    # expression with an aggregate function, we need contains_aggregate = True
+    # to allow aggregating over window functions in Django 4.2+
+    contains_aggregate = True
     contains_over_clause = True
 
     def __init__(
@@ -1888,3 +1888,4 @@ class ValueRange(WindowFrame):
 
     def window_frame_start_end(self, connection, start, end):
         return connection.ops.window_frame_range_start_end(start, end)
+
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..c130349539
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,57 @@
+from django.db import models, connection
+from django.db.models import F, Sum, Window
+from django.db.models.functions import Coalesce
+from django.conf import settings
+import os
+from datetime import date
+
+# Configure Django settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[],
+)
+import django
+django.setup()
+
+# Create a model
+class MyModel(models.Model):
+    DJR = models.FloatField()
+    date = models.DateField()
+    
+    class Meta:
+        app_label = 'test'
+        managed = True
+
+# Create the table
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(MyModel)
+
+# Add test data
+MyModel.objects.create(DJR=10.0, date=date(2024, 1, 1))
+MyModel.objects.create(DJR=20.0, date=date(2024, 1, 2))
+MyModel.objects.create(DJR=30.0, date=date(2024, 1, 3))
+
+try:
+    # Create the query that demonstrates the issue
+    queryset = MyModel.objects.all()
+    queryset = queryset.annotate(
+        cumul_DJR=Coalesce(Window(Sum("DJR"), order_by=F("date").asc()), 0.0)
+    )
+    aggregate = queryset.aggregate(
+        DJR_total=Sum("DJR"),
+        cumul_DJR_total=Sum("cumul_DJR")
+    )
+    print("Success! Query executed without error")
+    print("Results:", aggregate)
+except Exception as e:
+    print("Error occurred:", str(e))
+    print("\nThis error occurs because Window.contains_aggregate = False")
+    print("Current Window class attributes:")
+    print("contains_aggregate =", Window.contains_aggregate)
+    print("contains_over_clause =", Window.contains_over_clause)
+
