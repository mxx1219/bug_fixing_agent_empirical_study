diff --git a/django/contrib/contenttypes/management/__init__.py b/django/contrib/contenttypes/management/__init__.py
index 2b5f688136..4d0843aadc 100644
--- a/django/contrib/contenttypes/management/__init__.py
+++ b/django/contrib/contenttypes/management/__init__.py
@@ -24,7 +24,7 @@ class RenameContentType(migrations.RunPython):
             content_type.model = new_model
             try:
                 with transaction.atomic(using=db):
-                    content_type.save(update_fields={'model'})
+                    content_type.save(using=db, update_fields=['model'])
             except IntegrityError:
                 # Gracefully fallback if a stale content type causes a
                 # conflict as remove_stale_contenttypes will take care of
@@ -132,3 +132,4 @@ def create_contenttypes(app_config, verbosity=2, interactive=True, using=DEFAULT
     if verbosity >= 2:
         for ct in cts:
             print("Adding content type '%s | %s'" % (ct.app_label, ct.model))
+
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..a183da27fc
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,74 @@
+import os
+import django
+from django.conf import settings
+from django.db import connections
+
+if not settings.configured:
+    # Configure Django settings
+    TEST_DB = 'test_other.db'
+    if os.path.exists(TEST_DB):
+        os.remove(TEST_DB)
+
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',  # This DB won't be used
+            },
+            'other': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': TEST_DB,
+            },
+        },
+        INSTALLED_APPS=['django.contrib.contenttypes'],
+    )
+    django.setup()
+
+# Create a test router
+class TestRouter:
+    def allow_migrate(self, db, app_label, model_name=None, **hints):
+        return True
+    
+    def db_for_write(self, model, **hints):
+        return 'other'
+    
+    def db_for_read(self, model, **hints):
+        return 'other'
+
+from django.contrib.contenttypes.management import RenameContentType
+from django.db.migrations.state import ProjectState
+from django.contrib.contenttypes.models import ContentType
+
+# Create the content types table in the test database
+with connections['other'].cursor() as cursor:
+    cursor.execute("""
+        CREATE TABLE IF NOT EXISTS django_content_type (
+            id INTEGER PRIMARY KEY AUTOINCREMENT,
+            app_label varchar(100) NOT NULL,
+            model varchar(100) NOT NULL,
+            UNIQUE(app_label, model)
+        )
+    """)
+
+# Add a test content type
+ContentType.objects.using('other').create(app_label='testapp', model='oldmodel')
+
+# Set up a mock schema editor for the 'other' database
+class MockSchemaEditor:
+    def __init__(self):
+        self.connection = connections['other']
+
+# Perform the rename operation
+schema_editor = MockSchemaEditor()
+rename_op = RenameContentType('testapp', 'oldmodel', 'newmodel')
+state = ProjectState()
+rename_op._rename(django.apps.apps, schema_editor, 'oldmodel', 'newmodel')
+
+# Verify which database was used
+print("\nContent types in 'other' database:")
+for ct in ContentType.objects.using('other').all():
+    print(f"app_label={ct.app_label}, model={ct.model}")
+
+# Clean up
+os.remove(TEST_DB)
+
