diff --git a/django/db/models/functions/math.py b/django/db/models/functions/math.py
index 8b5fd79c3a..439aa8dd5c 100644
--- a/django/db/models/functions/math.py
+++ b/django/db/models/functions/math.py
@@ -1,7 +1,7 @@
 import math
 
 from django.db.models.expressions import Func, Value
-from django.db.models.fields import FloatField, IntegerField
+from django.db.models.fields import DecimalField, FloatField, IntegerField
 from django.db.models.functions import Cast
 from django.db.models.functions.mixins import (
     FixDecimalInputMixin,
@@ -122,9 +122,21 @@ class Log(FixDecimalInputMixin, NumericOutputFieldMixin, Func):
 
 
 class Mod(FixDecimalInputMixin, NumericOutputFieldMixin, Func):
+    """
+    Return the modulo of one field by another, preserving Decimal precision
+    when combining Decimal and Integer fields.
+    """
     function = "MOD"
     arity = 2
 
+    def _resolve_output_field(self):
+        # If any source is Decimal, output should be Decimal
+        source_fields = self.get_source_fields()
+        if any(isinstance(s, DecimalField) for s in source_fields):
+            return DecimalField()
+        # Otherwise follow the standard numeric output resolution
+        return super()._resolve_output_field()
+
 
 class Pi(NumericOutputFieldMixin, Func):
     function = "PI"
@@ -210,3 +222,4 @@ class Sqrt(NumericOutputFieldMixin, Transform):
 class Tan(NumericOutputFieldMixin, Transform):
     function = "TAN"
     lookup_name = "tan"
+
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..efc6045a29
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,47 @@
+import os
+import django
+from decimal import Decimal
+
+# Set up Django
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=['django.contrib.contenttypes'],
+    )
+    django.setup()
+
+from django.db.models import F, Value
+from django.db.models.functions import Mod
+from django.db import models
+
+class TestModel(models.Model):
+    decimal_field = models.DecimalField(max_digits=10, decimal_places=2)
+    integer_field = models.IntegerField()
+
+    class Meta:
+        app_label = 'testapp'
+
+# Create expressions with different numeric types
+decimal_value = Value(Decimal('10.5'))
+integer_value = Value(3)
+
+# Test Mod with decimal and integer
+expr1 = Mod(decimal_value, integer_value)
+print(f"Mod(Decimal, Integer) output field type: {type(expr1.output_field)}")
+
+# Test Mod with integer and decimal
+expr2 = Mod(integer_value, decimal_value)
+print(f"Mod(Integer, Decimal) output field type: {type(expr2.output_field)}")
+
+# Test Mod with integer and integer
+expr3 = Mod(integer_value, integer_value)
+print(f"Mod(Integer, Integer) output field type: {type(expr3.output_field)}")
+
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..0eb7b3f5ff
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,12 @@
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+INSTALLED_APPS = [
+    'testapp',
+]
+
+SECRET_KEY = 'dummy'
