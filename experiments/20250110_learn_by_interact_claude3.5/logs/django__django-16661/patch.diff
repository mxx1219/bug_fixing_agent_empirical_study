diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 5240b07cd6..595c3bc582 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -461,10 +461,14 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):
                 # Lookups on nonexistent fields are ok, since they're ignored
                 # later.
                 break
+
+            # OneToOneField primary_key should be treated as a regular relation
+            is_pk_onetoone = isinstance(field, models.OneToOneField) and field.primary_key
+
             # It is allowed to filter on values that would be found from local
             # model anyways. For example, if you filter on employee__department__id,
             # then the id value would be found already from employee__department_id.
-            if not prev_field or (
+            if not prev_field or is_pk_onetoone or (
                 prev_field.is_relation
                 and field not in prev_field.path_infos[-1].target_fields
             ):
@@ -496,6 +500,7 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):
             LOOKUP_SEP.join(relation_parts + [part]),
         }.isdisjoint(valid_lookups)
 
+
     def to_field_allowed(self, request, to_field):
         """
         Return True if the model associated with this admin should be
@@ -2511,3 +2516,4 @@ class StackedInline(InlineModelAdmin):
 
 class TabularInline(InlineModelAdmin):
     template = "admin/edit_inline/tabular.html"
+
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..dfc8fba9ad
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,43 @@
+from django.conf import settings
+settings.configure(
+    INSTALLED_APPS=['django.contrib.admin', 'django.contrib.contenttypes'],
+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+)
+
+import django
+django.setup()
+
+from django.contrib.admin import ModelAdmin
+from django.contrib.admin.sites import AdminSite
+from django.db import models
+
+class Country(models.Model):
+    name = models.CharField(max_length=256)
+    class Meta:
+        app_label = 'admin'
+
+class Place(models.Model):
+    country = models.ForeignKey(Country, models.CASCADE)
+    class Meta:
+        app_label = 'admin'
+
+class Restaurant(models.Model):
+    place = models.OneToOneField(Place, models.CASCADE, primary_key=True)
+    class Meta:
+        app_label = 'admin'
+
+class Waiter(models.Model):
+    restaurant = models.ForeignKey(Restaurant, models.CASCADE)
+    class Meta:
+        app_label = 'admin'
+
+class WaiterAdmin(ModelAdmin):
+    list_filter = [
+        'restaurant__place__country',
+    ]
+
+site = AdminSite()
+ma = WaiterAdmin(Waiter, site)
+result = ma.lookup_allowed('restaurant__place__country', 'test_value')
+print(f"Lookup allowed: {result}")  # Should be True but is False
+
