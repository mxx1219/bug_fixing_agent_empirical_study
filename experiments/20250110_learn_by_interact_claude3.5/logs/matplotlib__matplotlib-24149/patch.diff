diff --git a/edge_cases.py b/edge_cases.py
new file mode 100644
index 0000000000..20389c3f5f
--- /dev/null
+++ b/edge_cases.py
@@ -0,0 +1,21 @@
+import numpy as np
+import matplotlib.pyplot as plt
+
+print("Testing edge cases...")
+
+# Test 1: Original case - all NaN
+f, ax = plt.subplots()
+ax.bar([np.nan], [np.nan])
+print("Test 1 (all NaN): Passed")
+
+# Test 2: NaN x with finite height
+f, ax = plt.subplots()
+ax.bar([np.nan], [0])
+print("Test 2 (NaN x, finite height): Passed")
+
+# Test 3: Finite x with NaN height
+f, ax = plt.subplots()
+ax.bar([0], [np.nan])
+print("Test 3 (finite x, NaN height): Passed")
+
+plt.close('all')
diff --git a/lib/matplotlib/cbook/__init__.py b/lib/matplotlib/cbook/__init__.py
index 34c6ddb861..a86b178bc9 100644
--- a/lib/matplotlib/cbook/__init__.py
+++ b/lib/matplotlib/cbook/__init__.py
@@ -1737,16 +1737,21 @@ def _safe_first_finite(obj, *, skip_nonfinite=True):
             except TypeError:
                 pass
             raise RuntimeError("matplotlib does not support generators "
-                               "as input")
+                              "as input")
         return next(iter(obj))
     elif isinstance(obj, np.flatiter):
         # TODO do the finite filtering on this
         return obj[0]
     elif isinstance(obj, collections.abc.Iterator):
         raise RuntimeError("matplotlib does not "
-                           "support generators as input")
+                          "support generators as input")
     else:
-        return next(val for val in obj if safe_isfinite(val))
+        try:
+            return next(val for val in obj if safe_isfinite(val))
+        except StopIteration:
+            # If no finite values found, return the first value
+            return next(iter(obj))
+
 
 
 def sanitize_sequence(data):
@@ -2363,3 +2368,4 @@ def _auto_format_str(fmt, value):
         return fmt % (value,)
     except (TypeError, ValueError):
         return fmt.format(value)
+
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..2c22ad1cfa
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,6 @@
+import numpy as np
+import matplotlib.pyplot as plt
+
+f, ax = plt.subplots()
+ax.bar([np.nan], [np.nan])
+plt.show()
