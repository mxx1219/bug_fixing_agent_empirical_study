diff --git a/astropy/nddata/mixins/ndarithmetic.py b/astropy/nddata/mixins/ndarithmetic.py
index 4153dfccb2..e94fe861eb 100644
--- a/astropy/nddata/mixins/ndarithmetic.py
+++ b/astropy/nddata/mixins/ndarithmetic.py
@@ -483,11 +483,10 @@ class NDArithmeticMixin:
             )
 
     def _arithmetic_mask(self, operation, operand, handle_mask, axis=None, **kwds):
-        """
-        Calculate the resulting mask.
+        """Calculate the resulting mask.
 
-        This is implemented as the piecewise ``or`` operation if both have a
-        mask.
+        If only one operand has a mask, that mask is copied to the result.
+        If both operands have masks, they are combined using handle_mask.
 
         Parameters
         ----------
@@ -500,31 +499,34 @@ class NDArithmeticMixin:
             self.
 
         handle_mask : callable
-            see :meth:`NDArithmeticMixin.add`
-
-        kwds :
-            Additional parameters given to ``handle_mask``.
+            Callable that takes the two masks and returns a new mask.
 
         Returns
         -------
-        result_mask : any type
-            If only one mask was present this mask is returned.
+        result_mask : ndarray or None
             If neither had a mask ``None`` is returned. Otherwise
             ``handle_mask`` must create (and copy) the returned mask.
         """
-        # If only one mask is present we need not bother about any type checks
-        if (
-            self.mask is None and operand is not None and operand.mask is None
-        ) or handle_mask is None:
+        # If handle_mask is None, return None
+        if handle_mask is None:
+            return None
+            
+        # If operand is None or not an NDData (e.g., a scalar), use only self.mask
+        if operand is None or not hasattr(operand, 'mask'):
+            return deepcopy(self.mask)
+            
+        # If neither has a mask, return None
+        if self.mask is None and operand.mask is None:
             return None
-        elif self.mask is None and operand is not None:
-            # Make a copy so there is no reference in the result.
+            
+        # If only one has a mask, return a copy of that mask
+        if self.mask is None:
             return deepcopy(operand.mask)
-        elif operand is None:
+        if operand.mask is None:
             return deepcopy(self.mask)
-        else:
-            # Now lets calculate the resulting mask (operation enforces copy)
-            return handle_mask(self.mask, operand.mask, **kwds)
+            
+        # If both have masks, apply handle_mask
+        return handle_mask(self.mask, operand.mask, **kwds)
 
     def _arithmetic_wcs(self, operation, operand, compare_wcs, **kwds):
         """
@@ -748,3 +750,4 @@ class NDArithmeticMixin:
 
         # Return a new class based on the result
         return cls(result, **init_kwds)
+
