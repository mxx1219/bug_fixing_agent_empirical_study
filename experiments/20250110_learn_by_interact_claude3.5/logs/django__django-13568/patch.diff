diff --git a/django/contrib/auth/checks.py b/django/contrib/auth/checks.py
index 65fc266f7e..7ddf12133f 100644
--- a/django/contrib/auth/checks.py
+++ b/django/contrib/auth/checks.py
@@ -4,6 +4,7 @@ from types import MethodType
 from django.apps import apps
 from django.conf import settings
 from django.core import checks
+from django.db import models
 
 from .management import _get_builtin_permissions
 
@@ -50,9 +51,17 @@ def check_user_model(app_configs=None, **kwargs):
                 id='auth.E002',
             )
         )
+    # Check that the username field is unique or has a UniqueConstraint
+    field = cls._meta.get_field(cls.USERNAME_FIELD)
+    has_unique_field = field.unique
+    has_unique_constraint = any(
+        isinstance(constraint, models.UniqueConstraint) and 
+        constraint.fields == (cls.USERNAME_FIELD,) and
+        constraint.condition is None  # Skip conditional constraints
+        for constraint in cls._meta.constraints
+    )
 
-    # Check that the username field is unique
-    if not cls._meta.get_field(cls.USERNAME_FIELD).unique:
+    if not (has_unique_field or has_unique_constraint):
         if (settings.AUTHENTICATION_BACKENDS ==
                 ['django.contrib.auth.backends.ModelBackend']):
             errors.append(
@@ -64,6 +73,7 @@ def check_user_model(app_configs=None, **kwargs):
                     id='auth.E003',
                 )
             )
+
         else:
             errors.append(
                 checks.Warning(
@@ -205,3 +215,5 @@ def check_models_permissions(app_configs=None, **kwargs):
             codenames.add(codename)
 
     return errors
+
+
diff --git a/myapp/apps.py b/myapp/apps.py
new file mode 100644
index 0000000000..59fe69bc28
--- /dev/null
+++ b/myapp/apps.py
@@ -0,0 +1,4 @@
+from django.apps import AppConfig
+
+class MyAppConfig(AppConfig):
+    name = 'myapp'
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..952196970d
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,58 @@
+import os
+from django.conf import settings
+
+# Configure settings first
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=['django.contrib.auth', 'django.contrib.contenttypes'],
+    AUTH_USER_MODEL='auth.User',  # Use the default User model for now
+)
+
+import django
+django.setup()
+
+from django.contrib.auth.base_user import AbstractBaseUser
+from django.db import models
+import django.contrib.auth.checks as auth_checks
+
+# Define the model to test the check function directly
+class TestUser(AbstractBaseUser):
+    username = models.CharField(max_length=30)
+    USERNAME_FIELD = "username"
+    REQUIRED_FIELDS = []
+    
+    class Meta:
+        # This is just for testing, not actually registering the model
+        app_label = 'auth'
+        constraints = [
+            models.UniqueConstraint(fields=["username"], name="user_username_unq")
+        ]
+
+# Run the check directly on our test model
+errors = auth_checks.check_user_model()
+print("\nTest with default User model:")
+print("Errors found:", errors)
+
+# Now test our check function directly with our test model
+print("\nTest with our test model:")
+errors = []
+field = TestUser._meta.get_field(TestUser.USERNAME_FIELD)
+has_unique_field = field.unique
+has_unique_constraint = any(
+    isinstance(constraint, models.UniqueConstraint) and 
+    constraint.fields == (TestUser.USERNAME_FIELD,) and
+    constraint.condition is None
+    for constraint in TestUser._meta.constraints
+)
+print(f"Has unique field: {has_unique_field}")
+print(f"Has unique constraint: {has_unique_constraint}")
+if not (has_unique_field or has_unique_constraint):
+    print("Would raise auth.E003")
+else:
+    print("Passes uniqueness check")
+
