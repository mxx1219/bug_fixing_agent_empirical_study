diff --git a/colorbar_bug.png b/colorbar_bug.png
new file mode 100644
index 0000000000..7af07b1b3f
Binary files /dev/null and b/colorbar_bug.png differ
diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py
index c59b0ac815..7b32c4c2fd 100644
--- a/lib/matplotlib/colorbar.py
+++ b/lib/matplotlib/colorbar.py
@@ -651,8 +651,15 @@ class Colorbar:
             if not self.drawedges:
                 if len(self._y) >= self.n_rasterize:
                     self.solids.set_rasterized(True)
-        self.dividers.set_segments(
-            np.dstack([X, Y])[1:-1] if self.drawedges else [])
+        segments = np.dstack([X, Y])
+        if self.drawedges:
+            # Include extension edges when extend is used
+            if self._extend_lower() or self._extend_upper():
+                segments = segments[:]  # Include all segments
+            else:
+                segments = segments[1:-1]  # Original behavior
+        self.dividers.set_segments(segments if self.drawedges else [])
+
 
     def _add_solids_patches(self, X, Y, C, mappable):
         hatches = mappable.hatches * len(C)  # Have enough hatches.
@@ -727,13 +734,16 @@ class Colorbar:
             val = -1 if self._long_axis().get_inverted() else 0
             color = self.cmap(self.norm(self._values[val]))
             patch = mpatches.PathPatch(
-                mpath.Path(xy), facecolor=color, linewidth=0,
+                mpath.Path(xy), facecolor=color, 
+                linewidth=1 if self.drawedges else 0,
+                edgecolor='black' if self.drawedges else None,
                 antialiased=False, transform=self.ax.transAxes,
                 hatch=hatches[0], clip_on=False,
                 # Place it right behind the standard patches, which is
                 # needed if we updated the extends
                 zorder=np.nextafter(self.ax.patch.zorder, -np.inf))
             self.ax.add_patch(patch)
+
             self._extend_patches.append(patch)
         if self._extend_upper():
             if not self.extendrect:
@@ -1635,3 +1645,7 @@ def make_axes_gridspec(parent, *, location=None, orientation=None,
         pad=pad)
 
     return cax, kwargs
+
+
+
+
diff --git "a/lib/matplotlib/colorbar.py\"" "b/lib/matplotlib/colorbar.py\""
new file mode 100644
index 0000000000..5d0d599ec8
--- /dev/null
+++ "b/lib/matplotlib/colorbar.py\""
@@ -0,0 +1,11 @@
+if not self.drawedges:
+                if len(self._y) >= self.n_rasterize:
+                    self.solids.set_rasterized(True)
+        segments = np.dstack([X, Y])
+        if self.drawedges:
+            # Include extension edges when extend is used
+            if self._extend_lower() or self._extend_upper():
+                segments = segments[:]  # Include all segments
+            else:
+                segments = segments[1:-1]  # Original behavior
+        self.dividers.set_segments(segments if self.drawedges else [])
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..c2609a1804
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,17 @@
+import matplotlib as mpl
+import numpy as np
+import matplotlib.pyplot as plt
+from matplotlib.colors import from_levels_and_colors
+
+my_cmap = mpl.cm.viridis
+bounds = np.arange(10)
+nb_colors = len(bounds) + 1
+colors = my_cmap(np.linspace(100, 255, nb_colors).astype(int))
+my_cmap, my_norm = from_levels_and_colors(bounds, colors, extend='both')
+
+plt.figure(figsize=(5, 1))
+ax = plt.subplot(111)
+cbar = mpl.colorbar.ColorbarBase(ax, cmap=my_cmap, norm=my_norm, orientation='horizontal', drawedges=True)
+plt.subplots_adjust(left=0.05, bottom=0.4, right=0.95, top=0.9)
+plt.savefig('colorbar_bug.png')
+plt.close()
