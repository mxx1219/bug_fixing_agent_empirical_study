diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index ea51912e8b..c107712cab 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1059,6 +1059,8 @@ class Query(BaseExpression):
         elif isinstance(value, (list, tuple)):
             # The items of the iterable may be expressions and therefore need
             # to be resolved independently.
+            # Store the original type to preserve it
+            original_type = type(value)
             resolved_values = []
             for sub_value in value:
                 if hasattr(sub_value, 'resolve_expression'):
@@ -1073,9 +1075,11 @@ class Query(BaseExpression):
                         ))
                 else:
                     resolved_values.append(sub_value)
-            value = tuple(resolved_values)
+            # Reconstruct the value using the original type
+            value = original_type(resolved_values)
         return value
 
+
     def solve_lookup_type(self, lookup):
         """
         Solve the lookup type from the lookup (e.g.: 'foobar__id__icontains').
@@ -2360,3 +2364,4 @@ class JoinPromoter:
         query.promote_joins(to_promote)
         query.demote_joins(to_demote)
         return to_demote
+
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..4bd4bfbbb8
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,76 @@
+from django.conf import settings
+from django.db import models
+from django.core.exceptions import ImproperlyConfigured
+
+# Configure minimal Django settings
+settings.configure(
+    DATABASES = {
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS = ['django.contrib.contenttypes'],
+)
+
+import django
+django.setup()
+
+# Create a model with type-checking fields
+from django.db import models
+
+class ListField(models.Field):
+    def get_prep_value(self, value):
+        if not isinstance(value, list):
+            raise ValueError(f"Expected list, got {type(value)}")
+        return value
+
+class TupleField(models.Field):
+    def get_prep_value(self, value):
+        if not isinstance(value, tuple):
+            raise ValueError(f"Expected tuple, got {type(value)}")
+        return value
+
+class TestModel(models.Model):
+    list_data = ListField()
+    tuple_data = TupleField()
+    
+    class Meta:
+        app_label = 'django_test'
+
+# Create the database
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(TestModel)
+
+def test_case(description, field_name, value):
+    print(f"\nTest: {description}")
+    try:
+        TestModel.objects.filter(**{field_name: value})
+        print(f"Success - {type(value).__name__} type preserved")
+        return True
+    except ValueError as e:
+        print(f"Error - {str(e)}")
+        return False
+
+# Test cases
+print("Testing type preservation...")
+
+# 1. List with ListField (should succeed)
+test_case("List with ListField", "list_data", [1, 2, 3])
+
+# 2. Tuple with TupleField (should succeed)
+test_case("Tuple with TupleField", "tuple_data", (1, 2, 3))
+
+# 3. List with TupleField (should fail)
+test_case("List with TupleField", "tuple_data", [1, 2, 3])
+
+# 4. Tuple with ListField (should fail)
+test_case("Tuple with ListField", "list_data", (1, 2, 3))
+
+# 5. Empty list with ListField (should succeed)
+test_case("Empty list with ListField", "list_data", [])
+
+# 6. Empty tuple with TupleField (should succeed)
+test_case("Empty tuple with TupleField", "tuple_data", ())
+
