diff --git a/lib/mpl_toolkits/axes_grid1/inset_locator.py b/lib/mpl_toolkits/axes_grid1/inset_locator.py
index 9d35051074..779fbd7936 100644
--- a/lib/mpl_toolkits/axes_grid1/inset_locator.py
+++ b/lib/mpl_toolkits/axes_grid1/inset_locator.py
@@ -70,6 +70,21 @@ class AnchoredLocatorBase(AnchoredOffsetbox):
 
     def __call__(self, ax, renderer):
         self.axes = ax
+        if renderer is None:
+            # Try to get renderer from figure canvas
+            if hasattr(ax.figure, 'canvas'):
+                renderer = ax.figure.canvas.get_renderer()
+            # Try to get cached renderer
+            if renderer is None and hasattr(ax.figure, '_cachedRenderer'):
+                renderer = ax.figure._cachedRenderer
+            # Create a temporary renderer if none available
+            if renderer is None:
+                from matplotlib.backends.backend_agg import RendererAgg
+                dpi = ax.figure.dpi if hasattr(ax.figure, 'dpi') else 100
+                figsize = ax.figure.get_size_inches()
+                width, height = (int(figsize[0] * dpi), int(figsize[1] * dpi))
+                renderer = RendererAgg(width, height, dpi)
+        
         bbox = self.get_window_extent(renderer)
         px, py = self.get_offset(bbox.width, bbox.height, 0, 0, renderer)
         bbox_canvas = Bbox.from_bounds(px, py, bbox.width, bbox.height)
@@ -77,6 +92,7 @@ class AnchoredLocatorBase(AnchoredOffsetbox):
         return TransformedBbox(bbox_canvas, tr)
 
 
+
 class AnchoredSizeLocator(AnchoredLocatorBase):
     def __init__(self, bbox_to_anchor, x_size, y_size, loc,
                  borderpad=0.5, bbox_transform=None):
@@ -556,3 +572,4 @@ def mark_inset(parent_axes, inset_axes, loc1, loc2, **kwargs):
     p2.set_clip_on(False)
 
     return pp, p1, p2
+
diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 0000000000..291e160318
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,16 @@
+import matplotlib.pyplot as plt
+from mpl_toolkits.axes_grid1.inset_locator import inset_axes
+from matplotlib.backends.backend_agg import FigureCanvasAgg
+
+# Create figure without a canvas
+fig = plt.Figure(figsize=[5.5, 2.8])
+ax = fig.add_subplot(121)
+ax2 = fig.add_subplot(122)
+
+# Try to create inset axes before renderer is available
+axins = inset_axes(ax, width=1.3, height=0.9)
+
+# Now add canvas and display
+canvas = FigureCanvasAgg(fig)
+fig.canvas.draw()
+
