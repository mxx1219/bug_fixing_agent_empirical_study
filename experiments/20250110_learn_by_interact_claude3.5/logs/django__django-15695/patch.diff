diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index d17232e4ec..b646776c7f 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -962,9 +962,17 @@ class RenameIndex(IndexOperation):
             old_index = from_model_state.get_index_by_name(self.old_name)
 
         to_model_state = to_state.models[app_label, self.model_name_lower]
-        new_index = to_model_state.get_index_by_name(self.new_name)
+        # Create new index with same fields as old index but with new name
+        new_index = models.Index(fields=old_index.fields, name=self.new_name)
+        # Update the state with the renamed index
+        to_model_state.options['indexes'] = [
+            index if index.name != old_index.name else new_index 
+            for index in to_model_state.options.get('indexes', [])
+        ]
         schema_editor.rename_index(model, old_index, new_index)
 
+
+
     def database_backwards(self, app_label, schema_editor, from_state, to_state):
         if self.old_fields:
             # Backward operation with unnamed index is a no-op.
@@ -1103,3 +1111,5 @@ class RemoveConstraint(IndexOperation):
     @property
     def migration_name_fragment(self):
         return "remove_%s_%s" % (self.model_name_lower, self.name.lower())
+
+
diff --git a/tests/migrations/test_rename_index_crash.py b/tests/migrations/test_rename_index_crash.py
new file mode 100644
index 0000000000..469bc4c944
--- /dev/null
+++ b/tests/migrations/test_rename_index_crash.py
@@ -0,0 +1,80 @@
+import django
+from django.db import connection, migrations, models
+from django.db.migrations.state import ProjectState
+from django.test.utils import CaptureQueriesContext
+
+# Set up Django settings before importing models
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth'],
+        USE_TZ=False,
+    )
+    django.setup()
+
+def test_rename_index_crash():
+    # Create initial state with a model that has an index
+    project_state = ProjectState()
+    model_state = migrations.state.ModelState(
+        "test_app",
+        "Pony",
+        [
+            ("id", models.AutoField(primary_key=True)),
+            ("weight", models.IntegerField()),
+            ("pink", models.IntegerField()),
+        ],
+        {"indexes": [models.Index(fields=["weight", "pink"], name="initial_index")]}
+    )
+    project_state.add_model(model_state)
+
+    # Create table and initial index
+    create_table = migrations.CreateModel(
+        name="Pony",
+        fields=[
+            ("id", models.AutoField(primary_key=True)),
+            ("weight", models.IntegerField()),
+            ("pink", models.IntegerField()),
+        ],
+    )
+    
+    add_index = migrations.AddIndex(
+        model_name="Pony",
+        index=models.Index(fields=["weight", "pink"], name="initial_index"),
+    )
+
+    # Create rename operation
+    rename_op = migrations.RenameIndex(
+        model_name="Pony",
+        old_name="initial_index",
+        new_name="new_pony_test_idx"
+    )
+
+    with connection.schema_editor() as editor:
+        # Create table and add initial index
+        create_table.database_forwards("test_app", editor, ProjectState(), project_state)
+        add_index.database_forwards("test_app", editor, project_state, project_state)
+
+        # Clone state for rename operation
+        new_state = project_state.clone()
+        
+        # Apply forward operation
+        print("\nApplying forward operation...")
+        rename_op.database_forwards("test_app", editor, project_state, new_state)
+        
+        # Apply backward operation
+        print("\nApplying backward operation...")
+        rename_op.database_backwards("test_app", editor, new_state, project_state)
+        
+        # Re-apply forward operation (this was crashing before)
+        print("\nRe-applying forward operation...")
+        rename_op.database_forwards("test_app", editor, project_state, new_state)
+
+if __name__ == "__main__":
+    test_rename_index_crash()
+    print("\nTest completed successfully!")
