diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index b99f03cd88..de198fb610 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1338,8 +1338,9 @@ class Query(BaseExpression):
             if isinstance(child, Node):
                 child_clause, needed_inner = self._add_q(
                     child, used_aliases, branch_negated,
-                    current_negated, allow_joins, split_subq)
+                    current_negated, allow_joins, split_subq, simple_col=simple_col)
                 joinpromoter.add_votes(needed_inner)
+
             else:
                 child_clause, needed_inner = self.build_filter(
                     child, can_reuse=used_aliases, branch_negated=branch_negated,
@@ -2300,3 +2301,4 @@ class JoinPromoter:
         query.promote_joins(to_promote)
         query.demote_joins(to_demote)
         return to_demote
+
diff --git "a/django/db/models/sql/query.py\"" "b/django/db/models/sql/query.py\""
new file mode 100644
index 0000000000..65fa1e7764
--- /dev/null
+++ "b/django/db/models/sql/query.py\""
@@ -0,0 +1,4 @@
+child_clause, needed_inner = self._add_q(
+                    child, used_aliases, branch_negated,
+                    current_negated, allow_joins, split_subq, simple_col=simple_col)
+                joinpromoter.add_votes(needed_inner)
diff --git a/test_constraint.py b/test_constraint.py
new file mode 100644
index 0000000000..6fb57e1a7f
--- /dev/null
+++ b/test_constraint.py
@@ -0,0 +1,81 @@
+from django.conf import settings
+from django.db import models
+from django.db.migrations.operations.models import CreateModel, AddConstraint
+from django.db.migrations.state import ProjectState
+from django.db.migrations.migration import Migration
+from django.db.backends.sqlite3.schema import DatabaseSchemaEditor
+from django.db.backends.sqlite3.base import DatabaseWrapper
+
+# Configure Django settings before importing models
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+                'TIME_ZONE': None,
+                'CONN_MAX_AGE': 0,
+                'OPTIONS': {},
+                'AUTOCOMMIT': True,
+            }
+        },
+        INSTALLED_APPS=['django.contrib.contenttypes'],
+        MIDDLEWARE=[],
+        TIME_ZONE=None,
+        USE_TZ=False,
+    )
+    import django
+    django.setup()
+
+class TestConstraint(models.Model):
+    field_1 = models.IntegerField(blank=True, null=True)
+    flag = models.BooleanField(blank=False, null=False)
+    
+    class Meta:
+        app_label = 'testapp'
+        constraints = [
+            models.CheckConstraint(
+                check=models.Q(flag__exact=True, field_1__isnull=False) | models.Q(flag__exact=False),
+                name='field_1_has_value_if_flag_set'
+            ),
+        ]
+
+# Set up migration
+migration = Migration('testapp', '0002_test')
+migration.operations = [
+    CreateModel(
+        name='TestConstraint',
+        fields=[
+            ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+            ('field_1', models.IntegerField(blank=True, null=True)),
+            ('flag', models.BooleanField()),
+        ],
+    ),
+    AddConstraint(
+        model_name='testconstraint',
+        constraint=models.CheckConstraint(
+            check=models.Q(models.Q(('field_1__isnull', False), ('flag__exact', True)), ('flag__exact', False), _connector='OR'),
+            name='field_1_has_value_if_flag_set'
+        ),
+    ),
+]
+
+# Create database connection
+connection = DatabaseWrapper({
+    'NAME': ':memory:',
+    'TIME_ZONE': None,
+    'CONN_MAX_AGE': 0,
+    'OPTIONS': {},
+    'AUTOCOMMIT': True,
+    'ENGINE': 'django.db.backends.sqlite3',
+})
+
+# Apply migration
+project_state = ProjectState()
+with connection.schema_editor() as schema_editor:
+    try:
+        migration.apply(project_state, schema_editor)
+        print("Migration successful!")
+    except Exception as e:
+        print(f"Migration failed: {str(e)}")
+
