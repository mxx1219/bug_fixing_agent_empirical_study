diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 4648daf395..32de336795 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1077,10 +1077,16 @@ class Query(BaseExpression):
         elif isinstance(value, (list, tuple)):
             # The items of the iterable may be expressions and therefore need
             # to be resolved independently.
-            return type(value)(
+            resolved_values = [
                 self.resolve_lookup_value(sub_value, can_reuse, allow_joins)
                 for sub_value in value
-            )
+            ]
+            # Named tuples require unpacking of values as positional arguments
+            if hasattr(value, '_fields'):
+                # Input is a named tuple
+                return type(value)(*resolved_values)
+            # Regular tuples and lists
+            return type(value)(resolved_values)
         return value
 
     def solve_lookup_type(self, lookup):
@@ -2467,3 +2473,4 @@ class JoinPromoter:
         query.promote_joins(to_promote)
         query.demote_joins(to_demote)
         return to_demote
+
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..0cb0fee439
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,64 @@
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')
+
+from django.conf import settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=['django.contrib.contenttypes']
+)
+
+import django
+django.setup()
+
+from collections import namedtuple
+from django.db import models
+from django.db.models.sql.query import Query
+
+# Create a named tuple type
+Range = namedtuple('Range', ['near', 'far'])
+
+# Create a simple model
+class TestModel(models.Model):
+    value = models.IntegerField()
+    
+    class Meta:
+        app_label = 'django.contrib.contenttypes'
+
+# Create a Query instance
+query = Query(TestModel)
+
+# Test cases:
+def test_case(description, value):
+    print(f"\nTest: {description}")
+    try:
+        resolved = query.resolve_lookup_value(value, can_reuse=None, allow_joins=True)
+        print("Success:", resolved)
+        return True
+    except Exception as e:
+        print("Error:", str(e))
+        return False
+
+# 1. Regular named tuple
+test_case("Regular named tuple", Range(near=1, far=10))
+
+# 2. Empty named tuple
+EmptyRange = namedtuple('EmptyRange', [])
+test_case("Empty named tuple", EmptyRange())
+
+# 3. Regular tuple
+test_case("Regular tuple", (1, 2))
+
+# 4. Regular list
+test_case("Regular list", [1, 2])
+
+# 5. Empty list
+test_case("Empty list", [])
+
+# 6. Single value
+test_case("Single value", 42)
+
