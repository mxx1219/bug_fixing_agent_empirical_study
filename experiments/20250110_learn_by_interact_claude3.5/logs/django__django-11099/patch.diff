diff --git a/django/contrib/auth/validators.py b/django/contrib/auth/validators.py
index b4878cfd45..dd15050813 100644
--- a/django/contrib/auth/validators.py
+++ b/django/contrib/auth/validators.py
@@ -7,7 +7,7 @@ from django.utils.translation import gettext_lazy as _
 
 @deconstructible
 class ASCIIUsernameValidator(validators.RegexValidator):
-    regex = r'^[\w.@+-]+$'
+    regex = r'\A[\w.@+-]+\Z'
     message = _(
         'Enter a valid username. This value may contain only English letters, '
         'numbers, and @/./+/-/_ characters.'
@@ -17,9 +17,10 @@ class ASCIIUsernameValidator(validators.RegexValidator):
 
 @deconstructible
 class UnicodeUsernameValidator(validators.RegexValidator):
-    regex = r'^[\w.@+-]+$'
+    regex = r'\A[\w.@+-]+\Z'
     message = _(
         'Enter a valid username. This value may contain only letters, '
         'numbers, and @/./+/-/_ characters.'
     )
     flags = 0
+
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..6401522983
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,20 @@
+from django.contrib.auth.validators import ASCIIUsernameValidator, UnicodeUsernameValidator
+
+def test_validator(validator, username):
+    try:
+        validator(username)
+        print(f"'{username}' (len={len(username)}) was accepted")
+    except:
+        print(f"'{username}' (len={len(username)}) was rejected")
+
+# Create validators
+ascii_validator = ASCIIUsernameValidator()
+unicode_validator = UnicodeUsernameValidator()
+
+print("Testing ASCII validator:")
+test_validator(ascii_validator, "normal_user")
+test_validator(ascii_validator, "normal_user\n")
+
+print("\nTesting Unicode validator:")
+test_validator(unicode_validator, "normal_user")
+test_validator(unicode_validator, "normal_user\n")
