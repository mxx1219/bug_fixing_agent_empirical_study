diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index 5289ef34a0..78756839ef 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -498,6 +498,15 @@ def safeseq(value):
     return [mark_safe(obj) for obj in value]
 
 
+@register.filter(is_safe=True)
+def escapeseq(value):
+    """
+    A filter for sequences that escapes each element. Convert each element in the sequence
+    to a string and apply HTML escaping. Return a list with the results.
+    """
+    return [conditional_escape(obj) for obj in value]
+
+
 @register.filter(is_safe=True)
 @stringfilter
 def striptags(value):
@@ -981,3 +990,4 @@ def pprint(value):
         return pformat(value)
     except Exception as e:
         return "Error in formatting: %s: %s" % (e.__class__.__name__, e)
+
diff --git a/test_escapeseq.py b/test_escapeseq.py
new file mode 100644
index 0000000000..943dfa2c50
--- /dev/null
+++ b/test_escapeseq.py
@@ -0,0 +1,48 @@
+from django.template import Template, Context
+from django.utils.html import escape
+from django.conf import settings
+import django
+
+if not settings.configured:
+    settings.configure(
+        TEMPLATES=[{
+            'BACKEND': 'django.template.backends.django.DjangoTemplates',
+            'DIRS': [],
+            'APP_DIRS': True,
+            'OPTIONS': {
+                'context_processors': [],
+            },
+        }]
+    )
+    django.setup()
+
+# Test cases
+test_cases = [
+    # Basic HTML content
+    (['<b>bold</b>', 'normal', '<i>italic</i>'], '&lt;b&gt;bold&lt;/b&gt;,normal,&lt;i&gt;italic&lt;/i&gt;'),
+    
+    # Already escaped content (should escape again in escapeseq)
+    (['&lt;b&gt;', '<p>'], '&amp;lt;b&amp;gt;,&lt;p&gt;'),
+    
+    # Mixed content
+    (['Hello <world>', '& "quotes"'], 'Hello &lt;world&gt;,&amp; &quot;quotes&quot;'),
+    
+    # Empty sequence
+    ([], ''),
+    
+    # Non-string types
+    ([1, 2, '<3>'], '1,2,&lt;3&gt;'),
+]
+
+# Test each case with autoescape off (since that's the main use case)
+template = Template('{% autoescape off %}{{ value|escapeseq|join:"," }}{% endautoescape %}')
+
+for test_input, expected in test_cases:
+    context = Context({'value': test_input})
+    result = template.render(context)
+    if result != expected:
+        print(f'FAIL: input={test_input!r}')
+        print(f'  expected={expected!r}')
+        print(f'  got     ={result!r}')
+    else:
+        print(f'PASS: {test_input!r}')
