diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index ee45bb941e..94eb16768b 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -763,8 +763,11 @@ class Field(RegisterLookupMixin):
             if not getattr(cls, self.attname, None):
                 setattr(cls, self.attname, self.descriptor_class(self))
         if self.choices is not None:
-            setattr(cls, 'get_%s_display' % self.name,
-                    partialmethod(cls._get_FIELD_display, field=self))
+            display_method_name = 'get_%s_display' % self.name
+            if not hasattr(cls, display_method_name):
+                setattr(cls, display_method_name,
+                        partialmethod(cls._get_FIELD_display, field=self))
+
 
     def get_filter_kwargs_for_object(self, obj):
         """
@@ -2419,3 +2422,4 @@ class SmallAutoField(AutoFieldMixin, SmallIntegerField):
 
     def rel_db_type(self, connection):
         return SmallIntegerField().db_type(connection=connection)
+
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..8740951e85
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,40 @@
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'reproduce_settings')
+
+from django.conf import settings
+from django.apps import AppConfig
+
+if not settings.configured:
+    settings.configure(
+        DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+        INSTALLED_APPS=['django.contrib.contenttypes'],
+        MIDDLEWARE=[],
+        USE_TZ=False,
+    )
+
+    # Create a custom app
+    class ReproduceConfig(AppConfig):
+        name = 'reproduce'
+
+    import django
+    django.setup()
+
+from django.db import models
+
+class FooBar(models.Model):
+    class Meta:
+        app_label = 'reproduce'
+        
+    foo_bar = models.CharField("foo", max_length=10, choices=[(1, 'foo'), (2, 'bar')])
+    
+    def __str__(self):
+        return self.get_foo_bar_display()
+        
+    def get_foo_bar_display(self):
+        return "something"
+
+# Create instance and test
+obj = FooBar(foo_bar=1)
+print("Result:", obj.__str__())
+print("Expected: something")
+
