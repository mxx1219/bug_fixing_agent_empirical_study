diff --git a/django/core/cache/backends/db.py b/django/core/cache/backends/db.py
index 33c79c5a14..cd1dfabf0f 100644
--- a/django/core/cache/backends/db.py
+++ b/django/core/cache/backends/db.py
@@ -267,9 +267,12 @@ class DatabaseCache(BaseDatabaseCache):
                 cursor.execute(
                     connection.ops.cache_key_culling_sql() % table,
                     [cull_num])
-                cursor.execute("DELETE FROM %s "
-                               "WHERE cache_key < %%s" % table,
-                               [cursor.fetchone()[0]])
+                result = cursor.fetchone()
+                if result:
+                    cursor.execute("DELETE FROM %s "
+                                 "WHERE cache_key < %%s" % table,
+                                 [result[0]])
+
 
     def clear(self):
         db = router.db_for_write(self.cache_model_class)
@@ -277,3 +280,4 @@ class DatabaseCache(BaseDatabaseCache):
         table = connection.ops.quote_name(self._table)
         with connection.cursor() as cursor:
             cursor.execute('DELETE FROM %s' % table)
+
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..a9dde199bf
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,45 @@
+from django.conf import settings
+from django.core.cache import cache
+from django.db import connections
+import os
+import django
+import time
+
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        CACHES={
+            'default': {
+                'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
+                'LOCATION': 'my_cache_table',
+                'OPTIONS': {
+                    'MAX_ENTRIES': 1,  # Very small to force culling
+                    'CULL_FREQUENCY': 2,
+                }
+            }
+        },
+        INSTALLED_APPS=['django.contrib.contenttypes']
+    )
+
+django.setup()
+
+# Create the cache table
+from django.core.management import call_command
+call_command('createcachetable')
+
+try:
+    # Set many values rapidly to trigger culling
+    for i in range(10):
+        cache.set(f'key{i}', f'value{i}')
+        print(f"Set key{i}")
+        time.sleep(0.1)  # Small delay to ensure different timestamps
+except Exception as e:
+    print(f"Error occurred: {str(e)}")
+    import traceback
+    traceback.print_exc()
+
