diff --git a/django/core/servers/basehttp.py b/django/core/servers/basehttp.py
index 14dab517c9..ef050dceb7 100644
--- a/django/core/servers/basehttp.py
+++ b/django/core/servers/basehttp.py
@@ -81,6 +81,17 @@ class ThreadedWSGIServer(socketserver.ThreadingMixIn, WSGIServer):
     """A threaded version of the WSGIServer"""
     daemon_threads = True
 
+    def process_request_thread(self, request, client_address):
+        """Handle requests in a separate thread."""
+        try:
+            self.finish_request(request, client_address)
+        except Exception:
+            self.handle_error(request, client_address)
+        finally:
+            self.close_request(request)
+            # Close database connections after each request
+            from django.db import connections
+            connections.close_all()
 
 class ServerHandler(simple_server.ServerHandler):
     http_version = '1.1'
@@ -99,10 +110,17 @@ class ServerHandler(simple_server.ServerHandler):
         super().__init__(LimitedStream(stdin, content_length), stdout, stderr, environ, **kwargs)
 
     def cleanup_headers(self):
+
         super().cleanup_headers()
         # HTTP/1.1 requires support for persistent connections. Send 'close' if
+
         # the content length is unknown to prevent clients from reusing the
         # connection.
+
+
+        # connection.
+
+
         if 'Content-Length' not in self.headers:
             self.headers['Connection'] = 'close'
         # Persistent connections require threading server.
@@ -213,3 +231,24 @@ def run(addr, port, wsgi_handler, ipv6=False, threading=False, server_cls=WSGISe
         httpd.daemon_threads = True
     httpd.set_app(wsgi_handler)
     httpd.serve_forever()
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
diff --git a/django/test/testcases.py b/django/test/testcases.py
index 92f566b7b0..6e5e4fdc6e 100644
--- a/django/test/testcases.py
+++ b/django/test/testcases.py
@@ -1417,8 +1417,10 @@ class FSFilesHandler(WSGIHandler):
         * the host is provided as part of the base_url
         * the request's path isn't under the media path (or equal)
         """
+        path = path.decode() if isinstance(path, bytes) else path
         return path.startswith(self.base_url[2]) and not self.base_url[1]
 
+
     def file_path(self, url):
         """Return the relative path to the file on disk for the given URL."""
         relative_url = url[len(self.base_url[2]):]
@@ -1630,3 +1632,4 @@ class SerializeMixin:
     def tearDownClass(cls):
         super().tearDownClass()
         cls._lockfile.close()
+
diff --git a/test_db.sqlite3 b/test_db.sqlite3
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_liveserver_db.py b/test_liveserver_db.py
new file mode 100644
index 0000000000..2145c8b049
--- /dev/null
+++ b/test_liveserver_db.py
@@ -0,0 +1,57 @@
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')
+
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': 'test_db.sqlite3',
+            }
+        },
+        INSTALLED_APPS=['django.contrib.auth', 'django.contrib.contenttypes'],
+        SECRET_KEY='dummy',
+        ROOT_URLCONF=__name__,
+    )
+
+import django
+django.setup()
+
+from django.http import HttpResponse
+from django.urls import path
+from django.test import LiveServerTestCase
+from django.db import connections
+import threading
+import urllib.request
+
+def view(request):
+    return HttpResponse("OK")
+
+urlpatterns = [
+    path('', view),
+]
+
+class DatabaseLeakTest(LiveServerTestCase):
+    def test_connection_leak(self):
+        # Make multiple concurrent requests to create threads
+        def make_request():
+            urllib.request.urlopen(f"{self.live_server_url}/")
+        
+        threads = []
+        for i in range(3):
+            t = threading.Thread(target=make_request)
+            t.start()
+            threads.append(t)
+        
+        for t in threads:
+            t.join()
+        
+        # Get count of open connections
+        conn_count = len(connections.all())
+        print(f"Active connections after requests: {conn_count}")
+
+if __name__ == '__main__':
+    import unittest
+    unittest.main(verbosity=2)
+
