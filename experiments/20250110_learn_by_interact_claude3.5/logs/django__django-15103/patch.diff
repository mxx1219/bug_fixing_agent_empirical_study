diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index 5ccef38048..b4900608e7 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -83,7 +83,7 @@ def escapejs_filter(value):
 
 
 @register.filter(is_safe=True)
-def json_script(value, element_id):
+def json_script(value, element_id=None):
     """
     Output value JSON-encoded, wrapped in a <script type="application/json">
     tag.
@@ -942,3 +942,4 @@ def pprint(value):
         return pformat(value)
     except Exception as e:
         return "Error in formatting: %s: %s" % (e.__class__.__name__, e)
+
diff --git a/django/utils/html.py b/django/utils/html.py
index da1b5675ec..e541f3802d 100644
--- a/django/utils/html.py
+++ b/django/utils/html.py
@@ -61,7 +61,7 @@ _json_script_escapes = {
 }
 
 
-def json_script(value, element_id):
+def json_script(value, element_id=None):
     """
     Escape all the HTML/XML special characters with their unicode escapes, so
     value is safe to be output anywhere except for inside a tag attribute. Wrap
@@ -69,12 +69,18 @@ def json_script(value, element_id):
     """
     from django.core.serializers.json import DjangoJSONEncoder
     json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)
+    if element_id is None:
+        return format_html(
+            '<script type="application/json">{}</script>',
+            mark_safe(json_str)
+        )
     return format_html(
         '<script id="{}" type="application/json">{}</script>',
         element_id, mark_safe(json_str)
     )
 
 
+
 def conditional_escape(text):
     """
     Similar to escape(), except that it doesn't operate on pre-escaped strings.
@@ -402,3 +408,4 @@ def html_safe(klass):
     klass.__str__ = lambda self: mark_safe(klass_str(self))
     klass.__html__ = lambda self: str(self)
     return klass
+
