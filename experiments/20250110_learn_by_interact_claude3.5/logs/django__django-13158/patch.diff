diff --git a/django/db/models/query.py b/django/db/models/query.py
index 07d6ffd4ca..caa0040280 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -920,8 +920,13 @@ class QuerySet:
         """Return an empty QuerySet."""
         clone = self._chain()
         clone.query.set_empty()
+        # Reset combinator attributes to ensure the QuerySet is truly empty
+        clone.query.combinator = None
+        clone.query.combinator_all = False
+        clone.query.combined_queries = ()
         return clone
 
+
     ##################################################################
     # PUBLIC METHODS THAT ALTER ATTRIBUTES AND RETURN A NEW QUERYSET #
     ##################################################################
@@ -1977,3 +1982,4 @@ def get_related_populators(klass_info, select, db):
         rel_cls = RelatedPopulator(rel_klass_info, select, db)
         iterators.append(rel_cls)
     return iterators
+
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..ee64ffb910
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,45 @@
+from django.conf import settings
+from django.db import models
+
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=['__main__'],
+    )
+
+import django
+django.setup()
+
+# Define test models
+class Publication(models.Model):
+    name = models.CharField(max_length=100)
+    class Meta:
+        app_label = 'main'
+
+# Create tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Publication)
+
+# Create test data
+Publication.objects.create(id=1, name="Pub1")
+Publication.objects.create(id=3, name="Pub3")
+Publication.objects.create(id=6, name="Pub6")
+Publication.objects.create(id=7, name="Pub7")
+
+# Test the issue
+q1 = Publication.objects.filter(id__lt=2)
+q2 = Publication.objects.filter(id__gt=5)
+
+# Test with OR
+combined_or = (q1 | q2).none()
+print("OR none() results:", list(combined_or))
+
+# Test with union
+combined_union = q1.union(q2).none()
+print("Union none() results:", list(combined_union))
