diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py
index 7a99b12691..1b49a49ee1 100644
--- a/django/db/models/fields/files.py
+++ b/django/db/models/fields/files.py
@@ -295,10 +295,13 @@ class FileField(Field):
         if kwargs.get("max_length") == 100:
             del kwargs["max_length"]
         kwargs["upload_to"] = self.upload_to
-        if self.storage is not default_storage:
-            kwargs["storage"] = getattr(self, "_storage_callable", self.storage)
+        if hasattr(self, "_storage_callable"):
+            kwargs["storage"] = self._storage_callable
+        elif self.storage is not default_storage:
+            kwargs["storage"] = self.storage
         return name, path, args, kwargs
 
+
     def get_internal_type(self):
         return "FileField"
 
@@ -508,3 +511,4 @@ class ImageField(FileField):
                 **kwargs,
             }
         )
+
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..5a0a4838fd
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,41 @@
+from django.conf import settings
+from django.core.files.storage import FileSystemStorage, default_storage
+from django.db import models
+import random
+
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+        ],
+        STORAGES={
+            'default': {
+                'BACKEND': 'django.core.files.storage.FileSystemStorage',
+                'OPTIONS': {
+                    'location': '/media/default',
+                },
+            },
+        }
+    )
+    import django
+    django.setup()
+
+other_storage = FileSystemStorage(location='/media/other')
+
+def get_storage():
+    return random.choice([default_storage, other_storage])
+
+class MyModel(models.Model):
+    my_file = models.FileField(storage=get_storage)
+    
+    class Meta:
+        app_label = 'myapp'
+
+# Get the field instance and test its deconstruct behavior
+field = MyModel._meta.get_field('my_file')
+for i in range(5):
+    name, path, args, kwargs = field.deconstruct()
+    print(f"Run {i + 1}: 'storage' in kwargs = {('storage' in kwargs)}, storage is default = {field.storage is default_storage}")
+    # Force re-evaluation of storage
+    field.storage = field._storage_callable()
+
