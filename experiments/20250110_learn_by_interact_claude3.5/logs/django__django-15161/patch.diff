diff --git a/django/db/models/__init__.py b/django/db/models/__init__.py
index a583af2aff..19e2476705 100644
--- a/django/db/models/__init__.py
+++ b/django/db/models/__init__.py
@@ -12,8 +12,8 @@ from django.db.models.enums import *  # NOQA
 from django.db.models.enums import __all__ as enums_all
 from django.db.models.expressions import (
     Case, Exists, Expression, ExpressionList, ExpressionWrapper, F, Func,
-    OrderBy, OuterRef, RowRange, Subquery, Value, ValueRange, When, Window,
-    WindowFrame,
+    OrderBy, OuterRef, RawSQL, Ref, RowRange, Subquery, Value, ValueRange,
+    When, Window, WindowFrame,
 )
 from django.db.models.fields import *  # NOQA
 from django.db.models.fields import __all__ as fields_all
@@ -41,12 +41,12 @@ __all__ += [
     'CASCADE', 'DO_NOTHING', 'PROTECT', 'RESTRICT', 'SET', 'SET_DEFAULT',
     'SET_NULL', 'ProtectedError', 'RestrictedError',
     'Case', 'Exists', 'Expression', 'ExpressionList', 'ExpressionWrapper', 'F',
-    'Func', 'OrderBy', 'OuterRef', 'RowRange', 'Subquery', 'Value',
-    'ValueRange', 'When',
-    'Window', 'WindowFrame',
+    'Func', 'OrderBy', 'OuterRef', 'RawSQL', 'Ref', 'RowRange', 'Subquery',
+    'Value', 'ValueRange', 'When', 'Window', 'WindowFrame',
     'FileField', 'ImageField', 'JSONField', 'OrderWrt', 'Lookup', 'Transform',
     'Manager', 'Prefetch', 'Q', 'QuerySet', 'prefetch_related_objects',
     'DEFERRED', 'Model', 'FilteredRelation',
     'ForeignKey', 'ForeignObject', 'OneToOneField', 'ManyToManyField',
     'ForeignObjectRel', 'ManyToOneRel', 'ManyToManyRel', 'OneToOneRel',
 ]
+
diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 8642e1f151..b9d1c42be1 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -730,9 +730,10 @@ class Func(SQLiteNumericMixin, Expression):
         copy.extra = self.extra.copy()
         return copy
 
-
+@deconstructible(path='django.db.models.Value')
 class Value(SQLiteNumericMixin, Expression):
     """Represent a wrapped value as a node within an expression."""
+
     # Provide a default value for `for_save` in order to allow unresolved
     # instances to be compiled until a decision is taken in #25425.
     for_save = False
@@ -806,8 +807,11 @@ class Value(SQLiteNumericMixin, Expression):
     def empty_result_set_value(self):
         return self.value
 
-
+@deconstructible(path='django.db.models.RawSQL')
 class RawSQL(Expression):
+    """An SQL literal."""
+
+
     def __init__(self, sql, params, output_field=None):
         if output_field is None:
             output_field = fields.Field()
@@ -1051,8 +1055,10 @@ class When(Expression):
             cols.extend(source.get_group_by_cols())
         return cols
 
-
+@deconstructible(path='django.db.models.Case')
 class Case(SQLiteNumericMixin, Expression):
+    """A CASE SQL expression."""
+
     """
     An SQL searched CASE expression:
 
@@ -1190,8 +1196,13 @@ class Subquery(BaseExpression, Combinable):
         return self.query.get_group_by_cols()
 
 
+@deconstructible(path='django.db.models.Exists')
 class Exists(Subquery):
+    """
+    An SQL EXISTS() expression.
+    """
     template = 'EXISTS(%(subquery)s)'
+
     output_field = fields.BooleanField()
 
     def __init__(self, queryset, negated=False, **kwargs):
@@ -1483,3 +1494,8 @@ class ValueRange(WindowFrame):
 
     def window_frame_start_end(self, connection, start, end):
         return connection.ops.window_frame_range_start_end(start, end)
+
+
+
+
+
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..890bb626a1
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,32 @@
+from django.conf import settings
+from django.db.models import F, Value, Exists, Case, When, Q
+from django.db.models.expressions import RawSQL
+
+# Configure minimal settings
+settings.configure(
+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3'}},
+    INSTALLED_APPS=[
+        'django.contrib.auth',
+        'django.contrib.contenttypes',
+    ]
+)
+
+# Initialize Django
+import django
+django.setup()
+
+from django.contrib.auth import get_user_model
+
+# Test various expression deconstructions
+expressions = [
+    F('name'),  # Should deconstruct to django.db.models.F
+    Value(42),  # Should deconstruct to django.db.models.Value
+    RawSQL('SELECT 1', []),  # Should deconstruct to django.db.models.RawSQL
+    Exists(get_user_model().objects.all()),  # Should deconstruct to django.db.models.Exists
+    Case(When(Q(active=True), then=Value(1)))  # Should deconstruct to django.db.models.Case
+]
+
+print("Deconstructing expressions:")
+for expr in expressions:
+    path, args, kwargs = expr.deconstruct()
+    print(f"{expr.__class__.__name__}: {path}")
