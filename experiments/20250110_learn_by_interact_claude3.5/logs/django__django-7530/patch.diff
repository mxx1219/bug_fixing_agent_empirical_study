diff --git a/django/core/management/commands/makemigrations.py b/django/core/management/commands/makemigrations.py
index 0b39536f5b..ea12697442 100644
--- a/django/core/management/commands/makemigrations.py
+++ b/django/core/management/commands/makemigrations.py
@@ -105,10 +105,11 @@ class Command(BaseCommand):
                     # At least one model must be migrated to the database.
                     router.allow_migrate(connection.alias, app_label, model_name=model._meta.object_name)
                     for app_label in consistency_check_labels
-                    for model in apps.get_models(app_label)
+                    for model in apps.get_app_config(app_label).get_models()
             )):
                 loader.check_consistent_history(connection)
 
+
         # Before anything else, see if there's conflicting apps and drop out
         # hard if there are any and they don't want to merge
         conflicts = loader.detect_conflicts()
@@ -320,3 +321,6 @@ class Command(BaseCommand):
                         "Full merge migrations file '%s':" % writer.filename) + "\n"
                     )
                     self.stdout.write("%s\n" % writer.as_string())
+
+
+
diff --git "a/django/core/management/commands/makemigrations.py\"" "b/django/core/management/commands/makemigrations.py\""
new file mode 100644
index 0000000000..aa89ba9a3c
--- /dev/null
+++ "b/django/core/management/commands/makemigrations.py\""
@@ -0,0 +1,7 @@
+if (connection.settings_dict['ENGINE'] != 'django.db.backends.dummy' and any(
+                    # At least one model must be migrated to the database.
+                    router.allow_migrate(connection.alias, app_label, model_name=model._meta.object_name)
+                    for app_label in consistency_check_labels
+                    for model in apps.get_app_config(app_label).get_models()
+            )):
+                loader.check_consistent_history(connection)
