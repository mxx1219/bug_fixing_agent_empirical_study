diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 2b59dd301a..1e3df78106 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -552,11 +552,19 @@ class ResolvedOuterRef(F):
     """
     contains_aggregate = False
 
-    def as_sql(self, *args, **kwargs):
-        raise ValueError(
-            'This queryset contains a reference to an outer query and may '
-            'only be used in a subquery.'
-        )
+    def as_sql(self, compiler, connection):
+        # Get the actual field name from the outer query's model
+        # First try direct parent_query, then try to get root query
+        query = compiler.query
+        while hasattr(query, 'parent_query'):
+            query = query.parent_query
+        if not hasattr(query, 'model'):
+            raise ValueError(
+                'This queryset contains a reference to an outer query and may '
+                'only be used in a subquery.'
+            )
+        return '%s.%s' % (query.get_initial_alias(), query.model._meta.pk.get_attname_column()[1]), []
+
 
     def relabeled_clone(self, relabels):
         return self
@@ -1356,3 +1364,5 @@ class ValueRange(WindowFrame):
 
     def window_frame_start_end(self, connection, start, end):
         return connection.ops.window_frame_range_start_end(start, end)
+
+
diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 35f3c5e1ea..20f917362d 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1704,15 +1704,27 @@ class Query(BaseExpression):
         filter_lhs, filter_rhs = filter_expr
         if isinstance(filter_rhs, F):
             filter_expr = (filter_lhs, OuterRef(filter_rhs.name))
-        # Generate the inner query.
+        # Generate the inner query with the same initial alias as the outer query
+        # to ensure proper OuterRef resolution
         query = Query(self.model)
         query._filtered_relations = self._filtered_relations
+        # Preserve the outer query's context for proper alias resolution
+        query.alias_prefix = self.alias_prefix
+        query.external_aliases = {self.get_initial_alias()}
+        query.parent_query = self  # Set parent query for proper OuterRef resolution
         query.add_filter(filter_expr)
         query.clear_ordering(True)
         # Try to have as simple as possible subquery -> trim leading joins from
         # the subquery.
         trimmed_prefix, contains_louter = query.trim_start(names_with_path)
 
+
+
+        # Try to have as simple as possible subquery -> trim leading joins from
+        # the subquery.
+        trimmed_prefix, contains_louter = query.trim_start(names_with_path)
+
+
         # Add extra check to make sure the selected field will not be null
         # since we are adding an IN <subquery> clause. This prevents the
         # database from tripping over IN (...,NULL,...) selects and returning
@@ -2353,3 +2365,18 @@ class JoinPromoter:
         query.promote_joins(to_promote)
         query.demote_joins(to_demote)
         return to_demote
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
diff --git "a/django/db/models/sql/query.py\"" "b/django/db/models/sql/query.py\""
new file mode 100644
index 0000000000..0c5027938b
--- /dev/null
+++ "b/django/db/models/sql/query.py\""
@@ -0,0 +1,11 @@
+filter_lhs, filter_rhs = filter_expr
+        if isinstance(filter_rhs, F):
+            filter_expr = (filter_lhs, OuterRef(filter_rhs.name))
+        # Generate the inner query.
+        # Clone the current query with annotations to preserve OuterRef context
+        query = self.clone()
+        query.add_filter(filter_expr)
+        query.clear_ordering(True)
+        # Try to have as simple as possible subquery -> trim leading joins from
+        # the subquery.
+        trimmed_prefix, contains_louter = query.trim_start(names_with_path)
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..27d137b17c
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,70 @@
+from django.conf import settings
+
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth'],
+)
+
+import django
+django.setup()
+
+from django.db import models
+from django.db.models import Exists, OuterRef, Q
+
+# Define test models
+class Number(models.Model):
+    num = models.IntegerField()
+    class Meta:
+        app_label = 'testapp'
+
+class Tag(models.Model):
+    category = models.ForeignKey(Number, on_delete=models.CASCADE)
+    class Meta:
+        app_label = 'testapp'
+
+class Item(models.Model):
+    tags = models.ManyToManyField(Tag)
+    class Meta:
+        app_label = 'testapp'
+
+def run_test():
+    # Create tables
+    from django.db import connection
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(Number)
+        schema_editor.create_model(Tag)
+        schema_editor.create_model(Item)
+
+    # Test cases
+    print("Testing filter() - should work:")
+    qs = Number.objects.annotate(
+        foo=Exists(
+            Item.objects.filter(tags__category_id=OuterRef('pk'))
+        )
+    ).filter(foo=True)
+    print(str(qs.query))
+
+    print("\nTesting exclude() - should work but fails:")
+    qs = Number.objects.annotate(
+        foo=Exists(
+            Item.objects.exclude(tags__category_id=OuterRef('pk'))
+        )
+    ).filter(foo=True)
+    print(str(qs.query))
+
+    print("\nTesting filter(~Q()) - should work but fails:")
+    qs = Number.objects.annotate(
+        foo=Exists(
+            Item.objects.filter(~Q(tags__category_id=OuterRef('pk')))
+        )
+    ).filter(foo=True)
+    print(str(qs.query))
+
+if __name__ == '__main__':
+    run_test()
