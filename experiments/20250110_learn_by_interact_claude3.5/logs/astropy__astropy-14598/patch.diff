diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py
index 1b3285ddce..eafdac384e 100644
--- a/astropy/io/fits/card.py
+++ b/astropy/io/fits/card.py
@@ -859,10 +859,12 @@ class Card(_Verify):
                     return kw, vc
 
                 value = m.group("strg") or ""
-                value = value.rstrip().replace("''", "'")
+                # Don't replace double quotes here as they need to be preserved
+                # until they're processed by _parse_value
                 if value and value[-1] == "&":
                     value = value[:-1]
                 values.append(value)
+
                 comment = m.group("comm")
                 if comment:
                     comments.append(comment.rstrip())
@@ -1274,10 +1276,21 @@ def _format_value(value):
             return "''"
         else:
             exp_val_str = value.replace("'", "''")
-            val_str = f"'{exp_val_str:8}'"
-            return f"{val_str:20}"
+            # For regex pattern r"\'(?P<strg>([ -~]+?|\'\'|) *?)\'(?=$|/| )"
+            # We must preserve double quotes and always add exactly one space after
+            # the closing quote to match the pattern
+            val_str = f"'{exp_val_str}'"
+            
+            # Always add exactly one space after the closing quote
+            # Don't do any additional padding for strings that would exceed 20 chars
+            # This ensures double quotes are preserved exactly
+            return val_str + " " if len(val_str) >= 19 else f"{val_str:<19}" + " "
+
+
+
 
     # must be before int checking since bool is also int
+
     elif isinstance(value, (bool, np.bool_)):
         return f"{repr(value)[0]:>20}"  # T or F
 
@@ -1330,3 +1343,17 @@ def _pad(input):
     else:
         strlen = _len % Card.length
         return input + " " * (Card.length - strlen)
+
+
+
+
+
+
+
+
+
+
+
+
+
+
diff --git "a/astropy/io/fits/card.py\"" "b/astropy/io/fits/card.py\""
new file mode 100644
index 0000000000..fff1f692b2
--- /dev/null
+++ "b/astropy/io/fits/card.py\""
@@ -0,0 +1,15 @@
+if isinstance(value, str):
+        if value == "":
+            return "''"
+        else:
+            exp_val_str = value.replace("'", "''")
+            # For strings ending in double quotes or containing double quotes followed by text,
+            # we need to preserve them exactly and ensure proper spacing
+            val_str = f"'{exp_val_str}'"
+            
+            # Always ensure at least one space after the closing quote
+            # but don't exceed 20 chars total if possible
+            if len(val_str) >= 19:  # 19 to leave room for one space
+                return val_str + " "
+            else:
+                return f"{val_str:20}"
