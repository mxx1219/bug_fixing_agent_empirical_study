diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py
index 5203e3232c..6592a4e5da 100644
--- a/lib/matplotlib/axes/_base.py
+++ b/lib/matplotlib/axes/_base.py
@@ -2863,12 +2863,16 @@ class _AxesBase(martist.Artist):
                 return  # nothing to do...
 
             shared = shared_axes.get_siblings(self)
-            # Base autoscaling on finite data limits when there is at least one
-            # finite data limit among all the shared_axes and intervals.
-            values = [val for ax in shared
-                      for val in getattr(ax.dataLim, f"interval{name}")
-                      if np.isfinite(val)]
+            # For y-axis on twinned axes, only use the current axis's data limits
+            if name == 'y' and self in self._twinned_axes:
+                values = [val for val in self.dataLim.intervaly if np.isfinite(val)]
+            else:
+                # Otherwise use all shared axes data limits
+                values = [val for ax in shared
+                          for val in getattr(ax.dataLim, f"interval{name}")
+                          if np.isfinite(val)]
             if values:
+
                 x0, x1 = (min(values), max(values))
             elif getattr(self._viewLim, f"mutated{name}")():
                 # No data, but explicit viewLims already set:
@@ -4383,7 +4387,6 @@ class _AxesBase(martist.Artist):
         bbox_artists = bbox_extra_artists
         if bbox_artists is None:
             bbox_artists = self.get_default_bbox_extra_artists()
-
         for a in bbox_artists:
             bbox = a.get_tightbbox(renderer)
             if (bbox is not None
@@ -4408,11 +4411,97 @@ class _AxesBase(martist.Artist):
                 self.get_position(True), *args, **kwargs,
                 axes_locator=_TransformedBoundsLocator(
                     [0, 0, 1, 1], self.transAxes))
+
+        # Initialize data limits to prevent inf values
+        twin.dataLim = mtransforms.Bbox.unit()
+        if kwargs.get("sharex", None) is self:
+            twin.dataLim.intervalx = self.dataLim.intervalx
+            twin.dataLim.minposx = self.dataLim.minposx
+
+        self.set_adjustable('datalim')
+        twin.set_adjustable('datalim')
+        self._twinned_axes.join(self, twin)
+        return twin
+
+
+        twin.dataLim = mtransforms.Bbox.unit()
+        if kwargs.get("sharex", None) is self:
+            twin.dataLim.intervalx = self.dataLim.intervalx
+            twin.dataLim.minposx = self.dataLim.minposx
+
+        self.set_adjustable('datalim')
+        twin.set_adjustable('datalim')
+        self._twinned_axes.join(self, twin)
+        return twin
+
+
+        twin.dataLim = mtransforms.Bbox.unit()
+        # Copy x-axis limits if sharing x
+        if kwargs.get("sharex", None) is self:
+            twin.dataLim.intervalx = self.dataLim.intervalx
+            twin.dataLim.minposx = self.dataLim.minposx
+
+        self.set_adjustable('datalim')
+        twin.set_adjustable('datalim')
+        self._twinned_axes.join(self, twin)
+        return twin
+
+        twin.dataLim = mtransforms.Bbox.unit()
+        # Copy x-axis limits if sharing x
+        if kwargs.get("sharex", None) is self:
+            twin.dataLim.intervalx = self.dataLim.intervalx
+            twin.dataLim.minposx = self.dataLim.minposx
+
+        self.set_adjustable('datalim')
+        twin.set_adjustable('datalim')
+        self._twinned_axes.join(self, twin)
+        return twin
+
+        twin.dataLim = mtransforms.Bbox.unit()
+        # Copy x-axis limits if sharing x
+        if kwargs.get("sharex", None) is self:
+            twin.dataLim.intervalx = self.dataLim.intervalx
+            twin.dataLim.minposx = self.dataLim.minposx
+
+        self.set_adjustable('datalim')
+        twin.set_adjustable('datalim')
+        self._twinned_axes.join(self, twin)
+        return twin
+
+
         self.set_adjustable('datalim')
         twin.set_adjustable('datalim')
         self._twinned_axes.join(self, twin)
         return twin
 
+
+        twin.dataLim = mtransforms.Bbox.unit()
+        # Copy x-axis limits if sharing x
+        if kwargs.get("sharex", None) is self:
+            twin.dataLim.intervalx = self.dataLim.intervalx
+            twin.dataLim.minposx = self.dataLim.minposx
+        twin.ignore_existing_data_limits = True
+
+        twin.ignore_existing_data_limits = True
+        
+        self.set_adjustable('datalim')
+        twin.set_adjustable('datalim')
+        self._twinned_axes.join(self, twin)
+        return twin
+
+        twin.ignore_existing_data_limits = True
+        self.set_adjustable('datalim')
+        twin.set_adjustable('datalim')
+        self._twinned_axes.join(self, twin)
+        return twin
+
+        
+        self.set_adjustable('datalim')
+        twin.set_adjustable('datalim')
+        self._twinned_axes.join(self, twin)
+        return twin
+
+
     def twinx(self):
         """
         Create a twin Axes sharing the xaxis.
@@ -4438,8 +4527,11 @@ class _AxesBase(martist.Artist):
         ax2.yaxis.set_label_position('right')
         ax2.yaxis.set_offset_position('right')
         ax2.set_autoscalex_on(self.get_autoscalex_on())
+        # Set initial y limits to prevent inf/-inf
+        ax2.dataLim.intervaly = (0, 1)
         self.yaxis.tick_left()
         ax2.xaxis.set_visible(False)
+
         ax2.patch.set_visible(False)
         return ax2
 
@@ -4589,3 +4681,20 @@ def _draw_rasterized(figure, artists, renderer):
                 a.draw(renderer)
 
     return _MinimalArtist(figure, artists).draw(renderer)
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 0000000000..2b8fb03ba4
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,23 @@
+import matplotlib.pyplot as plt
+
+def print_datalim(*ax):
+    for ax_ in ax:
+        print(ax_.dataLim.intervaly, end=' / ')
+    print()
+
+df1_index = ['16 May', '17 May']  # == df2_index
+df1_values = [-22.717708333333402, 26.584999999999937]
+df2_values = [-0.08501399999999998, -2.9833019999999966]
+
+fig, ax1 = plt.subplots()
+
+ax1.stackplot(df1_index, df1_values)
+print_datalim(ax1)
+
+ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis
+print_datalim(ax1, ax2)
+
+ax2.plot(df1_index, df2_values)
+print_datalim(ax1, ax2)
+
+plt.show()
