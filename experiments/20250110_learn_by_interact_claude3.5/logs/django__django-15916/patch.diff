diff --git a/django/forms/models.py b/django/forms/models.py
index 192d9fad94..bca824b659 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -253,17 +253,24 @@ class ModelFormOptions:
         self.help_texts = getattr(options, "help_texts", None)
         self.error_messages = getattr(options, "error_messages", None)
         self.field_classes = getattr(options, "field_classes", None)
-
+        self.formfield_callback = getattr(options, "formfield_callback", None)
 
 class ModelFormMetaclass(DeclarativeFieldsMetaclass):
     def __new__(mcs, name, bases, attrs):
+        # Get formfield_callback from base class's Meta
         base_formfield_callback = None
         for b in bases:
             if hasattr(b, "Meta") and hasattr(b.Meta, "formfield_callback"):
                 base_formfield_callback = b.Meta.formfield_callback
                 break
 
-        formfield_callback = attrs.pop("formfield_callback", base_formfield_callback)
+        # Get Meta class from attrs
+        meta = attrs.get('Meta')
+        meta_callback = getattr(meta, 'formfield_callback', None) if meta else None
+        
+        # Use first non-None value in order: explicit callback, Meta callback, base callback
+        formfield_callback = attrs.pop("formfield_callback", None) or meta_callback or base_formfield_callback
+
 
         new_class = super().__new__(mcs, name, bases, attrs)
 
@@ -1664,3 +1671,5 @@ def modelform_defines_fields(form_class):
     return hasattr(form_class, "_meta") and (
         form_class._meta.fields is not None or form_class._meta.exclude is not None
     )
+
+
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..657268f2bc
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,49 @@
+import os
+import django
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        DATABASE_ENGINE='django.db.backends.sqlite3',
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:'
+            }
+        }
+    )
+    django.setup()
+
+from django import forms
+from django.db import models
+
+class MyModel(models.Model):
+    active = models.BooleanField()
+    name = models.CharField(max_length=64, blank=True, null=True)
+    
+    class Meta:
+        app_label = 'myapp'
+
+def all_required(field, **kwargs):
+    formfield = field.formfield(**kwargs)
+    formfield.required = True
+    return formfield
+
+class MyForm(forms.ModelForm):
+    class Meta:
+        model = MyModel
+        formfield_callback = all_required
+        fields = ['active', 'name']
+
+FactoryForm = forms.modelform_factory(MyModel, form=MyForm)
+
+# Test the forms
+my_form = MyForm()
+factory_form = FactoryForm()
+
+print("MyForm name field required:", my_form.fields['name'].required)
+print("FactoryForm name field required:", factory_form.fields['name'].required)
