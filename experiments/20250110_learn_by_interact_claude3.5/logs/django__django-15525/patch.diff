diff --git a/django/core/serializers/base.py b/django/core/serializers/base.py
index da85cb4b92..64081c6c14 100644
--- a/django/core/serializers/base.py
+++ b/django/core/serializers/base.py
@@ -329,21 +329,26 @@ def build_instance(Model, data, db):
     If the model instance doesn't have a primary key and the model supports
     natural keys, try to retrieve it from the database.
     """
-    default_manager = Model._meta.default_manager
+    default_manager = Model._meta.default_manager.db_manager(db)
     pk = data.get(Model._meta.pk.attname)
     if (
         pk is None
         and hasattr(default_manager, "get_by_natural_key")
         and hasattr(Model, "natural_key")
     ):
-        natural_key = Model(**data).natural_key()
+        instance = Model(**data)
+        instance._state.db = db  # Set the database before natural key generation
+        natural_key = instance.natural_key()
         try:
             data[Model._meta.pk.attname] = Model._meta.pk.to_python(
-                default_manager.db_manager(db).get_by_natural_key(*natural_key).pk
+                default_manager.get_by_natural_key(*natural_key).pk
             )
         except Model.DoesNotExist:
             pass
-    return Model(**data)
+    instance = Model(**data)
+    instance._state.db = db
+    return instance
+
 
 
 def deserialize_m2m_values(field, field_value, using, handle_forward_references):
@@ -406,3 +411,4 @@ def deserialize_fk_value(field, field_value, using, handle_forward_references):
             value = value.pk
         return value
     return model._meta.get_field(field_name).to_python(field_value)
+
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..0e18360096
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,89 @@
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        },
+        'other': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=['django.contrib.contenttypes'],
+    MIDDLEWARE=[],
+)
+django.setup()
+
+from django.db import models, connection
+from django.core import serializers
+
+# Define models
+class AuthorManager(models.Manager):
+    def get_by_natural_key(self, name):
+        return self.get(name=name)
+
+class Author(models.Model):
+    name = models.CharField(max_length=255, unique=True)
+    objects = AuthorManager()
+    
+    def natural_key(self):
+        return (self.name,)
+    
+    class Meta:
+        app_label = 'contenttypes'
+
+class Book(models.Model):
+    title = models.CharField(max_length=255)
+    author = models.ForeignKey(Author, models.DO_NOTHING, related_name="books")
+    objects = models.Manager()
+    
+    def natural_key(self):
+        return (self.title,) + self.author.natural_key()
+    
+    natural_key.dependencies = ['contenttypes.author']
+    
+    class Meta:
+        app_label = 'contenttypes'
+        unique_together = [['title', 'author']]
+
+def run_test():
+    # Create tables
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(Author)
+        schema_editor.create_model(Book)
+    
+    # Create test data
+    author = Author.objects.create(name="JR Tolkien")
+    book = Book.objects.create(title="The Ring", author=author)
+    
+    # Serialize data
+    data = serializers.serialize('json', [author, book], 
+                               use_natural_foreign_keys=True,
+                               use_natural_primary_keys=True)
+    print("Serialized data:", data)
+    
+    # Try to load into other database
+    from django.db import connections
+    with connections['other'].schema_editor() as schema_editor:
+        schema_editor.create_model(Author)
+        schema_editor.create_model(Book)
+    
+    Author.objects.using('other').all().delete()
+    Book.objects.using('other').all().delete()
+    
+    try:
+        for obj in serializers.deserialize('json', data, using='other'):
+            obj.save()
+        print("Successfully loaded data into other database")
+    except Exception as e:
+        print(f"Error during deserialization: {e}")
+        raise
+
+if __name__ == '__main__':
+    run_test()
