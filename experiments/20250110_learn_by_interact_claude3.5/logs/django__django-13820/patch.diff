diff --git a/django/db/migrations/loader.py b/django/db/migrations/loader.py
index 95a5062ec9..3f9f18b42e 100644
--- a/django/db/migrations/loader.py
+++ b/django/db/migrations/loader.py
@@ -90,9 +90,10 @@ class MigrationLoader:
             else:
                 # Empty directories are namespaces.
                 # getattr() needed on PY36 and older (replace w/attribute access).
-                if getattr(module, '__file__', None) is None:
+                if getattr(module, '__file__', None) is None and not isinstance(getattr(module, '__path__', None), list):
                     self.unmigrated_apps.add(app_config.label)
                     continue
+
                 # Module is not a package (e.g. migrations.py).
                 if not hasattr(module, '__path__'):
                     self.unmigrated_apps.add(app_config.label)
@@ -347,3 +348,4 @@ class MigrationLoader:
                     state = migration.unapply(state, schema_editor, collect_sql=True)
             statements.extend(schema_editor.collected_sql)
         return statements
+
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..2517f31c79
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,42 @@
+import sys
+import types
+from collections.abc import Sequence
+
+# Create a mock module without __file__ but with a list __path__
+mock_migrations = types.ModuleType("migrations")
+mock_migrations.__path__ = ["/some/path"]  # Regular package has list __path__
+
+# Create a mock module without __file__ and with a custom __path__ (namespace package)
+class NamespacePath(Sequence):  # Using Sequence instead of list
+    def __init__(self, paths):
+        self._paths = paths
+    def __len__(self):
+        return len(self._paths)
+    def __getitem__(self, i):
+        return self._paths[i]
+
+mock_namespace = types.ModuleType("namespace_migrations")
+mock_namespace.__path__ = NamespacePath(["/some/path"])  # Namespace package has custom __path__
+
+print("Regular package without __file__:")
+print("- has __file__:", hasattr(mock_migrations, "__file__"))
+print("- __path__ type:", type(mock_migrations.__path__))
+print("- __path__ is list:", isinstance(mock_migrations.__path__, list))
+
+print("\nNamespace package:")
+print("- has __file__:", hasattr(mock_namespace, "__file__"))
+print("- __path__ type:", type(mock_namespace.__path__))
+print("- __path__ is list:", isinstance(mock_namespace.__path__, list))
+
+# Test current Django behavior
+print("\nCurrent Django check would reject both:")
+print("Regular package:", getattr(mock_migrations, '__file__', None) is None)
+print("Namespace package:", getattr(mock_namespace, '__file__', None) is None)
+
+# Test proposed fix
+print("\nProposed fix would correctly distinguish them:")
+print("Regular package:", 
+      getattr(mock_migrations, '__file__', None) is None and not isinstance(getattr(mock_migrations, '__path__', None), list))
+print("Namespace package:",
+      getattr(mock_namespace, '__file__', None) is None and not isinstance(getattr(mock_namespace, '__path__', None), list))
+
