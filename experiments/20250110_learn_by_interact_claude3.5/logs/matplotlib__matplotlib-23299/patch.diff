diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py
index c268a56724..88958c6985 100644
--- a/lib/matplotlib/__init__.py
+++ b/lib/matplotlib/__init__.py
@@ -1089,6 +1089,8 @@ def rc_context(rc=None, fname=None):
     """
     orig = rcParams.copy()
     try:
+        # Store current backend to preserve it during context
+        current_backend = rcParams._get_backend_or_none()
         if fname:
             rc_file(fname)
         if rc:
@@ -1096,6 +1098,30 @@ def rc_context(rc=None, fname=None):
         yield
     finally:
         dict.update(rcParams, orig)  # Revert to the original rcs.
+        if current_backend is not None:  # Only restore if we had a valid backend
+            rcParams['backend'] = current_backend  # Restore the current backend
+
+
+
+
+        rcParams['backend'] = current_backend  # Restore the current backend
+
+
+        rcParams['backend'] = current_backend  # Restore the current backend
+
+
+
+
+
+        dict.update(rcParams, orig)  # Revert to the original rcs.
+        rcParams['backend'] = current_backend  # Restore the current backend
+
+        dict.update(rcParams, orig)  # Revert to the original rcs.
+
+        orig_backend = orig['backend']
+        dict.update(rcParams, orig)  # Revert to the original rcs.
+        if current_backend != orig_backend:
+            rcParams['backend'] = current_backend  # Restore the current backend
 
 
 def use(backend, *, force=True):
@@ -1175,7 +1201,10 @@ def get_backend():
     --------
     matplotlib.use
     """
-    return rcParams['backend']
+    backend = rcParams._get_backend_or_none()
+    return backend if backend is not None else rcParams['backend']
+
+
 
 
 def interactive(b):
@@ -1457,3 +1486,33 @@ _log.debug('platform is %s', sys.platform)
 # colormap creation depends on rcParams
 from matplotlib.cm import _colormaps as colormaps
 from matplotlib.colors import _color_sequences as color_sequences
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
diff --git "a/lib/matplotlib/__init__.py\"" "b/lib/matplotlib/__init__.py\""
new file mode 100644
index 0000000000..c4282b4d31
--- /dev/null
+++ "b/lib/matplotlib/__init__.py\""
@@ -0,0 +1,14 @@
+orig = rcParams.copy()
+    try:
+        # Store current backend to preserve it during context
+        current_backend = rcParams._get_backend_or_none()
+        if fname:
+            rc_file(fname)
+        if rc:
+            rcParams.update(rc)
+        yield
+    finally:
+        backend = rcParams._get_backend_or_none()  # Get current backend before restoring
+        dict.update(rcParams, orig)  # Revert to the original rcs.
+        if backend:  # Only restore if we had a backend
+            rcParams['backend'] = backend  # Restore the current backend
diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 0000000000..d5a97d7122
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,14 @@
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+
+# fig1 = plt.figure()  # <- UNCOMMENT THIS LINE AND IT WILL WORK
+# plt.ion()            # <- ALTERNATIVELY, UNCOMMENT THIS LINE AND IT WILL ALSO WORK
+with rc_context():
+    fig2 = plt.figure()
+before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'
+get_backend()
+after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'
+
+print("Before:", before)
+print("After:", after)
+assert before == after, '\n' + before + '\n' + after
