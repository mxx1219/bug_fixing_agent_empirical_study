diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index ffc3a7fda5..135fa07d2f 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -1160,9 +1160,16 @@ class Exists(Subquery):
         clone.negated = not self.negated
         return clone
 
+    def __rand__(self, other):
+        if getattr(other, 'conditional', False):
+            return Q(other) & Q(self)
+        return NotImplemented
+
     def as_sql(self, compiler, connection, template=None, **extra_context):
         query = self.query.exists(using=connection.alias)
         sql, params = super().as_sql(
+
+
             compiler,
             connection,
             template=template,
@@ -1440,3 +1447,6 @@ class ValueRange(WindowFrame):
 
     def window_frame_start_end(self, connection, start, end):
         return connection.ops.window_frame_range_start_end(start, end)
+
+
+
diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py
index c957ffa564..ef1075888a 100644
--- a/django/db/models/query_utils.py
+++ b/django/db/models/query_utils.py
@@ -41,6 +41,13 @@ class Q(tree.Node):
 
     def _combine(self, other, conn):
         if not isinstance(other, Q):
+            if getattr(other, 'conditional', False):
+                # Create a new Q with both expressions as direct children
+                obj = type(self)()
+                obj.connector = conn
+                obj.add(self, conn)
+                obj.children.append(other)
+                return obj
             raise TypeError(other)
 
         # If the other Q() is empty, ignore it and just use `self`.
@@ -322,3 +329,4 @@ class FilteredRelation:
         query = compiler.query
         where = query.build_filtered_relation_q(self.condition, reuse=set(self.path))
         return compiler.compile(where)
+
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..271bed6ec1
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,43 @@
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'settings')
+
+from django.conf import settings
+from django.apps import apps
+
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:'
+            }
+        }
+    )
+
+import django
+django.setup()
+
+from django.db.models import Q
+from django.db.models.expressions import Exists
+from django.db import models
+
+# Create a simple model for testing
+class Product(models.Model):
+    name = models.CharField(max_length=100)
+    class Meta:
+        app_label = 'reproduce'
+
+# Test both directions
+print("Testing Exists & Q:")
+print(Exists(Product.objects.all()) & Q())
+
+print("\nTesting Q & Exists:")
+try:
+    print(Q() & Exists(Product.objects.all()))
+except TypeError as e:
+    print(f"TypeError occurred as expected: {e}")
+
