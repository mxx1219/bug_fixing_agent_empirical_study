diff --git a/example.svg b/example.svg
new file mode 100644
index 0000000000..cabc212778
Binary files /dev/null and b/example.svg differ
diff --git a/lib/matplotlib/backends/backend_svg.py b/lib/matplotlib/backends/backend_svg.py
index 03b376a698..5fc32726f3 100644
--- a/lib/matplotlib/backends/backend_svg.py
+++ b/lib/matplotlib/backends/backend_svg.py
@@ -956,6 +956,11 @@ class RendererSVG(RendererBase):
         if w == 0 or h == 0:
             return
 
+        gid = gc.get_gid()
+        if gid:
+            # If there's a gid, wrap everything in a group with that gid
+            self.writer.start('g', id=gid)
+
         clip_attrs = self._get_clip_attrs(gc)
         if clip_attrs:
             # Can't apply clip-path directly to the image because the image has
@@ -967,25 +972,22 @@ class RendererSVG(RendererBase):
             self.writer.start('a', attrib={'xlink:href': url})
 
         attrib = {}
-        oid = gc.get_gid()
+        oid = self._make_id('image', im)
         if mpl.rcParams['svg.image_inline']:
             buf = BytesIO()
             Image.fromarray(im).save(buf, format="png")
-            oid = oid or self._make_id('image', buf.getvalue())
             attrib['xlink:href'] = (
                 "data:image/png;base64,\n" +
                 base64.b64encode(buf.getvalue()).decode('ascii'))
         else:
             if self.basename is None:
                 raise ValueError("Cannot save image data to filesystem when "
-                                 "writing SVG to an in-memory buffer")
+                                "writing SVG to an in-memory buffer")
             filename = '{}.image{}.png'.format(
                 self.basename, next(self._image_counter))
             _log.info('Writing image file for inclusion: %s', filename)
             Image.fromarray(im).save(filename)
-            oid = oid or 'Im_' + self._make_id('image', filename)
             attrib['xlink:href'] = filename
-        attrib['id'] = oid
 
         if transform is None:
             w = 72.0 * w / self.image_dpi
@@ -1026,6 +1028,8 @@ class RendererSVG(RendererBase):
             self.writer.end('a')
         if clip_attrs:
             self.writer.end('g')
+        if gid:
+            self.writer.end('g')
 
     def _update_glyph_map_defs(self, glyph_map_new):
         """
@@ -1407,3 +1411,4 @@ svgProlog = """\
 class _BackendSVG(_Backend):
     backend_version = mpl.__version__
     FigureCanvas = FigureCanvasSVG
+
diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py
index efa34dd078..b3ad2e2a1e 100644
--- a/lib/matplotlib/offsetbox.py
+++ b/lib/matplotlib/offsetbox.py
@@ -1367,7 +1367,23 @@ or callable, default: value of *xycoords*
             children.append(self.arrow_patch)
         return children
 
+    def set_gid(self, gid):
+        """
+        Set the group id.
+
+        Parameters
+        ----------
+        gid : str
+            The group id.
+        """
+        super().set_gid(gid)
+        # Propagate gid to children
+        for child in self.get_children():
+            child.set_gid(gid)
+        self.stale = True
+
     def set_figure(self, fig):
+
         if self.arrow_patch is not None:
             self.arrow_patch.set_figure(fig)
         self.offsetbox.set_figure(fig)
@@ -1611,3 +1627,4 @@ class DraggableAnnotation(DraggableBase):
         ann = self.annotation
         ann.xyann = ann.get_transform().inverted().transform(
             (self.ox + dx, self.oy + dy))
+
diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 0000000000..17f611c97c
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,28 @@
+import matplotlib.pyplot as plt
+from matplotlib.offsetbox import OffsetImage, AnnotationBbox
+import numpy as np
+
+# Create a simple image for testing
+arr_img = np.zeros((10, 10))
+arr_img[4:7, 4:7] = 1  # White square in middle
+
+fig, ax = plt.subplots()
+xy = [0.3, 0.55]
+
+imagebox = OffsetImage(arr_img, zoom=0.1)
+imagebox.image.axes = ax
+
+ab = AnnotationBbox(imagebox, xy,
+                   xybox=(120., -80.),
+                   xycoords='data',
+                   boxcoords="offset points",
+                   pad=0.5,
+                   arrowprops=dict(
+                       arrowstyle="->",
+                       connectionstyle="angle,angleA=0,angleB=90,rad=3")
+                   )
+ab.set_gid('My_label')
+ax.add_artist(ab)
+
+print(f"GID = {ab.get_gid()}")
+plt.savefig("example.svg", format="svg")
