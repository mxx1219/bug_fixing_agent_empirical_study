diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py
index d32c891284..4ab5df95b8 100644
--- a/django/db/models/lookups.py
+++ b/django/db/models/lookups.py
@@ -485,17 +485,13 @@ class Range(FieldGetDbPrepValueIterableMixin, BuiltinLookup):
 
 
 @Field.register_lookup
-class IsNull(BuiltinLookup):
+class IsNull(Transform):
     lookup_name = 'isnull'
+    output_field = BooleanField()
     prepare_rhs = False
 
     def as_sql(self, compiler, connection):
         if not isinstance(self.rhs, bool):
-            # When the deprecation ends, replace with:
-            # raise ValueError(
-            #     'The QuerySet value for an isnull lookup must be True or '
-            #     'False.'
-            # )
             warnings.warn(
                 'Using a non-boolean value for an isnull lookup is '
                 'deprecated, use True or False instead.',
@@ -636,3 +632,12 @@ class UUIDEndsWith(UUIDTextMixin, EndsWith):
 @UUIDField.register_lookup
 class UUIDIEndsWith(UUIDTextMixin, IEndsWith):
     pass
+
+
+
+
+
+
+
+
+
diff --git "a/django/db/models/lookups.py\"" "b/django/db/models/lookups.py\""
new file mode 100644
index 0000000000..fb7f0ff7a5
--- /dev/null
+++ "b/django/db/models/lookups.py\""
@@ -0,0 +1,17 @@
+class IsNull(Transform):
+    lookup_name = 'isnull'
+    output_field = BooleanField()
+    prepare_rhs = False
+
+    def as_sql(self, compiler, connection):
+        if not isinstance(self.rhs, bool):
+            warnings.warn(
+                'Using a non-boolean value for an isnull lookup is '
+                'deprecated, use True or False instead.',
+                RemovedInDjango40Warning,
+            )
+        sql, params = compiler.compile(self.lhs)
+        if self.rhs:
+            return "%s IS NULL" % sql, params
+        else:
+            return "%s IS NOT NULL" % sql, params
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..96d25fa526
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,36 @@
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        INSTALLED_APPS=['django.contrib.contenttypes'],
+        DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+    )
+
+    import django
+    django.setup()
+
+from django.db import models
+
+class Product(models.Model):
+    parent = models.ForeignKey('self', models.CASCADE, null=True)
+
+    class Meta:
+        app_label = 'contenttypes'
+
+class Supply(models.Model):
+    product = models.ForeignKey(Product, on_delete=models.CASCADE)
+
+    class Meta:
+        app_label = 'contenttypes'
+
+class Stock(models.Model):
+    supply = models.ForeignKey(Supply, on_delete=models.CASCADE)
+
+    class Meta:
+        app_label = 'contenttypes'
+        ordering = ['supply__product__parent__isnull']
+
+if __name__ == '__main__':
+    from django.core import management
+    management.call_command('check')
