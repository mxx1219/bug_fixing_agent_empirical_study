diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py
index ae82d26340..2e086fded6 100644
--- a/django/db/models/deletion.py
+++ b/django/db/models/deletion.py
@@ -1,13 +1,19 @@
-from collections import Counter
+"""
+Utility classes for any Model.delete() implementation.
+"""
+from collections import Counter, OrderedDict
 from itertools import chain
 from operator import attrgetter
 
 from django.db import IntegrityError, connections, transaction
 from django.db.models import signals, sql
+from django.db.models.sql.where import AND, OR
+from django.db.models.sql.query import Query
 
 
 class ProtectedError(IntegrityError):
     def __init__(self, msg, protected_objects):
+
         self.protected_objects = protected_objects
         super().__init__(msg, protected_objects)
 
@@ -309,17 +315,46 @@ class Collector:
                         sender=model, instance=obj, using=self.using
                     )
 
-            # fast deletes
+            # Group fast deletes by model and execute
+            fast_deletes_by_model = {}
             for qs in self.fast_deletes:
-                count = qs._raw_delete(using=self.using)
-                deleted_counter[qs.model._meta.label] += count
+                model = qs.model
+                if model not in fast_deletes_by_model:
+                    fast_deletes_by_model[model] = []
+                fast_deletes_by_model[model].append(qs)
+
+            # Execute fast deletes, combining queries for the same model
+            for model, querysets in fast_deletes_by_model.items():
+                if len(querysets) > 1:
+                    # Combine WHERE clauses with OR for same model deletes
+                    query = sql.DeleteQuery(model)
+                    query.get_initial_alias()
+                    
+                    # Create combined WHERE clause
+                    for i, qs in enumerate(querysets):
+                        if i == 0:
+                            query.where = qs.query.where
+                        else:
+                            query.where.add(qs.query.where, OR)
+                    
+                    # Execute combined delete
+                    count = query.do_query(model._meta.db_table, query.where, self.using)
+                    deleted_counter[model._meta.label] += count
+                else:
+                    # Single DELETE query
+                    count = querysets[0].delete()[0]
+                    deleted_counter[model._meta.label] += count
+
+                    # Single DELETE query
+                    count = querysets[0]._raw_delete(using=self.using)
+                    deleted_counter[model._meta.label] += count
 
             # update fields
             for model, instances_for_fieldvalues in self.field_updates.items():
                 for (field, value), instances in instances_for_fieldvalues.items():
                     query = sql.UpdateQuery(model)
                     query.update_batch([obj.pk for obj in instances],
-                                       {field.name: value}, self.using)
+                                     {field.name: value}, self.using)
 
             # reverse instance collections
             for instances in self.data.values():
@@ -332,6 +367,7 @@ class Collector:
                 count = query.delete_batch(pk_list, self.using)
                 deleted_counter[model._meta.label] += count
 
+
                 if not model._meta.auto_created:
                     for obj in instances:
                         signals.post_delete.send(
@@ -347,3 +383,7 @@ class Collector:
             for instance in instances:
                 setattr(instance, model._meta.pk.attname, None)
         return sum(deleted_counter.values()), dict(deleted_counter)
+
+
+
+
diff --git "a/django/db/models/deletion.py\"" "b/django/db/models/deletion.py\""
new file mode 100644
index 0000000000..d81b0d7a00
--- /dev/null
+++ "b/django/db/models/deletion.py\""
@@ -0,0 +1,10 @@
+"""
+Utility classes for any Model.delete() implementation.
+"""
+from collections import Counter, OrderedDict
+from itertools import chain
+from operator import attrgetter
+
+from django.db import IntegrityError, connections, transaction
+from django.db.models import signals, sql
+from django.db.models.sql.where import AND, OR, WhereNode
diff --git a/test_delete.py b/test_delete.py
new file mode 100644
index 0000000000..43b6e136fd
--- /dev/null
+++ b/test_delete.py
@@ -0,0 +1,54 @@
+from django.conf import settings
+from django.db import models, connection
+
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=['django.contrib.contenttypes'],
+    USE_TZ=False,
+)
+
+import django
+django.setup()
+
+# Test models
+class User(models.Model):
+    class Meta:
+        app_label = 'contenttypes'
+
+class Entry(models.Model):
+    created_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name='created_entries')
+    updated_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name='updated_entries')
+    class Meta:
+        app_label = 'contenttypes'
+
+# Create tables
+with connection.schema_editor() as schema_editor:
+    # Drop tables if they exist
+    with connection.cursor() as cursor:
+        cursor.execute("DROP TABLE IF EXISTS contenttypes_entry")
+        cursor.execute("DROP TABLE IF EXISTS contenttypes_user")
+    
+    # Create tables
+    schema_editor.create_model(User)
+    schema_editor.create_model(Entry)
+
+# Create test data
+user = User.objects.create()
+entry1 = Entry.objects.create(created_by=user, updated_by=user)
+entry2 = Entry.objects.create(created_by=user, updated_by=user)
+
+# Enable query logging
+connection.force_debug_cursor = True
+
+print("\nDeleting user:")
+user.delete()
+print("\nQueries executed:")
+for query in connection.queries:
+    print(query['sql'])
+
diff --git "a/test_delete.py\"" "b/test_delete.py\""
new file mode 100644
index 0000000000..07c3e29142
--- /dev/null
+++ "b/test_delete.py\""
@@ -0,0 +1,74 @@
+from django.conf import settings
+from django.db import models, connection
+
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=['django.contrib.contenttypes'],
+    USE_TZ=False,
+)
+
+import django
+django.setup()
+
+# Test models
+class Person(models.Model):
+    friends = models.ManyToManyField('self')
+    class Meta:
+        app_label = 'contenttypes'
+
+class User(models.Model):
+    class Meta:
+        app_label = 'contenttypes'
+
+class Entry(models.Model):
+    created_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name='created_entries')
+    updated_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name='updated_entries')
+    class Meta:
+        app_label = 'contenttypes'
+
+# Create tables
+with connection.schema_editor() as schema_editor:
+    # Drop tables if they exist
+    with connection.cursor() as cursor:
+        cursor.execute("DROP TABLE IF EXISTS contenttypes_person_friends")
+        cursor.execute("DROP TABLE IF EXISTS contenttypes_entry")
+        cursor.execute("DROP TABLE IF EXISTS contenttypes_user")
+        cursor.execute("DROP TABLE IF EXISTS contenttypes_person")
+    
+    # Create tables
+    schema_editor.create_model(Person)
+    schema_editor.create_model(User)
+    schema_editor.create_model(Entry)
+    schema_editor.create_model(Person._meta.get_field('friends').remote_field.through)
+
+# Create test data
+user = User.objects.create()
+entry1 = Entry.objects.create(created_by=user, updated_by=user)
+entry2 = Entry.objects.create(created_by=user, updated_by=user)
+
+person1 = Person.objects.create()
+person2 = Person.objects.create()
+person1.friends.add(person2)
+
+# Enable query logging
+connection.force_debug_cursor = True
+
+print("\nDeleting user:")
+user.delete()
+print("\nQueries executed:")
+for query in connection.queries:
+    print(query['sql'])
+
+connection.queries_log.clear()
+
+print("\nDeleting person1:")
+person1.delete()
+print("\nQueries executed:")
+for query in connection.queries:
+    print(query['sql'])
