diff --git a/django/core/files/locks.py b/django/core/files/locks.py
index c46b00b905..f26b03f67f 100644
--- a/django/core/files/locks.py
+++ b/django/core/files/locks.py
@@ -107,9 +107,16 @@ else:
             return True
     else:
         def lock(f, flags):
-            ret = fcntl.flock(_fd(f), flags)
-            return ret == 0
+            try:
+                fcntl.flock(_fd(f), flags)
+                return True
+            except OSError:
+                return False
 
         def unlock(f):
-            ret = fcntl.flock(_fd(f), fcntl.LOCK_UN)
-            return ret == 0
+            try:
+                fcntl.flock(_fd(f), fcntl.LOCK_UN)
+                return True
+            except OSError:
+                return False
+
diff --git a/test_lock.py b/test_lock.py
new file mode 100644
index 0000000000..3bac22675d
--- /dev/null
+++ b/test_lock.py
@@ -0,0 +1,29 @@
+import os
+import tempfile
+from django.core.files import locks
+
+def test_file_locking():
+    # Create a temporary file
+    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
+        temp_path = temp_file.name
+    
+    # Try to acquire a lock in non-blocking mode
+    with open(temp_path, 'w') as f1:
+        # First lock should succeed
+        result1 = locks.lock(f1, locks.LOCK_EX | locks.LOCK_NB)
+        print(f"First lock attempt: {result1}")  # Should be True
+        
+        # Try to acquire another lock on the same file
+        with open(temp_path, 'r') as f2:
+            result2 = locks.lock(f2, locks.LOCK_EX | locks.LOCK_NB)
+            print(f"Second lock attempt: {result2}")  # Should be False
+            
+        # Unlock the first file
+        unlock_result = locks.unlock(f1)
+        print(f"Unlock result: {unlock_result}")  # Should be True
+
+    # Clean up
+    os.unlink(temp_path)
+
+if __name__ == "__main__":
+    test_file_locking()
