diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index 59a5d6abbb..30b4e19146 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -1809,13 +1809,26 @@ class SQLUpdateCompiler(SQLCompiler):
         finally:
             if cursor:
                 cursor.close()
+
         for query in self.query.get_related_updates():
+            # For multi-table inheritance updates, we need to use correct parent links
+            if hasattr(query, 'parent_link'):
+                # Get the correct parent records through the parent link field
+                parent_ids = self.query.model.objects.filter(
+                    pk__in=query.child_ids
+                ).values_list(query.parent_link.attname, flat=True)
+                query.clear_where()  # Use clear_where() instead of setting where=None
+                query.add_filter('pk__in', list(parent_ids))
+
             aux_rows = query.get_compiler(self.using).execute_sql(result_type)
             if is_empty and aux_rows:
                 rows = aux_rows
                 is_empty = False
         return rows
 
+        return rows
+
+
     def pre_sql_setup(self):
         """
         If the update depends on results from other tables, munge the "where"
@@ -1896,3 +1909,6 @@ def cursor_iter(cursor, sentinel, col_count, itersize):
             yield rows if col_count is None else [r[:col_count] for r in rows]
     finally:
         cursor.close()
+
+
+
diff --git "a/django/db/models/sql/compiler.py\"" "b/django/db/models/sql/compiler.py\""
new file mode 100644
index 0000000000..7963bc38a4
--- /dev/null
+++ "b/django/db/models/sql/compiler.py\""
@@ -0,0 +1,14 @@
+for query in self.query.get_related_updates():
+            # For multi-table inheritance updates, we need to use correct parent links
+            if hasattr(query, 'parent_link'):
+                # Get the correct parent records through the parent link field
+                parent_ids = self.query.model.objects.filter(
+                    pk__in=query.child_ids
+                ).values_list(query.parent_link.attname, flat=True)
+                query.clear_where()  # Use clear_where() instead of setting where=None
+                query.add_filter('pk__in', list(parent_ids))
+
+            aux_rows = query.get_compiler(self.using).execute_sql(result_type)
+            if is_empty and aux_rows:
+                rows = aux_rows
+                is_empty = False
diff --git a/django/db/models/sql/subqueries.py b/django/db/models/sql/subqueries.py
index 04063f73bc..9d186ef320 100644
--- a/django/db/models/sql/subqueries.py
+++ b/django/db/models/sql/subqueries.py
@@ -134,11 +134,27 @@ class UpdateQuery(Query):
             query = UpdateQuery(model)
             query.values = values
             if self.related_ids is not None:
-                query.add_filter("pk__in", self.related_ids)
+                # For multi-table inheritance, we need to find the link field from child to parent
+                meta = self.get_meta()
+                parent_link = next(
+                    f for f in meta.fields 
+                    if getattr(f, 'one_to_one', False) 
+                    and f.remote_field.model == model
+                )
+                # Filter parent records using the link field's column
+                query.clear_where()
+                query.add_filter(
+                    'pk__in',
+                    self.model.objects.filter(pk__in=self.related_ids).values_list(
+                        parent_link.column, flat=True
+                    )
+                )
             result.append(query)
         return result
 
 
+
+
 class InsertQuery(Query):
     compiler = "SQLInsertCompiler"
 
@@ -169,3 +185,7 @@ class AggregateQuery(Query):
     def __init__(self, model, inner_query):
         self.inner_query = inner_query
         super().__init__(model)
+
+
+
+
