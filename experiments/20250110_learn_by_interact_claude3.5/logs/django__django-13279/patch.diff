diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py
index b5453160a5..209c0f20fa 100644
--- a/django/contrib/sessions/backends/base.py
+++ b/django/contrib/sessions/backends/base.py
@@ -108,6 +108,12 @@ class SessionBase:
 
     def encode(self, session_dict):
         "Return the given session dictionary serialized and encoded as a string."
+        from django.conf import settings
+        if getattr(settings, 'DEFAULT_HASHING_ALGORITHM', None) == 'sha1':
+            # RemovedInDjango40Warning: pre-Django 3.1 format will be invalid
+            serialized = self.serializer().dumps(session_dict)
+            hash = self._hash(serialized)
+            return base64.b64encode(hash.encode() + b':' + serialized).decode('ascii')
         return signing.dumps(
             session_dict, salt=self.key_salt, serializer=self.serializer,
             compress=True,
@@ -375,3 +381,4 @@ class SessionBase:
         a built-in expiration mechanism, it should be a no-op.
         """
         raise NotImplementedError('This backend does not support clear_expired().')
+
diff --git a/reproduce_session.py b/reproduce_session.py
new file mode 100644
index 0000000000..7c74d15f29
--- /dev/null
+++ b/reproduce_session.py
@@ -0,0 +1,42 @@
+from django.conf import settings
+from django.contrib.sessions.backends.base import SessionBase
+import os
+
+def test_session_compatibility():
+    # Test 1: Basic compatibility
+    settings.configure(
+        SECRET_KEY='dummy',
+        DEFAULT_HASHING_ALGORITHM='sha1',
+        SESSION_SERIALIZER='django.contrib.sessions.serializers.JSONSerializer'
+    )
+    
+    session = SessionBase()
+    test_data = {'test': 'value', 'number': 42}
+    
+    encoded = session.encode(test_data)
+    print("\nTest 1: Basic compatibility")
+    print(f"Encoded data (legacy format): {encoded}")
+    print(f"Decode matches original: {session.decode(encoded) == test_data}")
+    print(f"Legacy decode matches: {session._legacy_decode(encoded) == test_data}")
+
+    # Test 2: Empty dictionary
+    empty_data = {}
+    encoded_empty = session.encode(empty_data)
+    print("\nTest 2: Empty dictionary")
+    print(f"Empty decode matches: {session.decode(encoded_empty) == empty_data}")
+    
+    # Test 3: Special characters
+    special_data = {'special': '!@#$%^&*()', 'unicode': '你好世界'}
+    encoded_special = session.encode(special_data)
+    print("\nTest 3: Special characters")
+    print(f"Special chars decode matches: {session.decode(encoded_special) == special_data}")
+    
+    # Test 4: Nested structures
+    nested_data = {'nested': {'list': [1,2,3], 'dict': {'a': 1}}}
+    encoded_nested = session.encode(nested_data)
+    print("\nTest 4: Nested structures")
+    print(f"Nested decode matches: {session.decode(encoded_nested) == nested_data}")
+
+if __name__ == '__main__':
+    test_session_compatibility()
+
