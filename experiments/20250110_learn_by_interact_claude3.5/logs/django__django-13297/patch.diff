diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py
index 8a105d4f35..5396b6e80d 100644
--- a/django/db/backends/sqlite3/base.py
+++ b/django/db/backends/sqlite3/base.py
@@ -75,6 +75,15 @@ Database.register_converter("datetime", decoder(parse_datetime))
 Database.register_converter("timestamp", decoder(parse_datetime))
 
 Database.register_adapter(decimal.Decimal, str)
+# Register adapter for SimpleLazyObject
+from django.utils.functional import SimpleLazyObject
+def adapt_lazy_object(obj):
+    if hasattr(obj, '_wrapped'):
+        if not obj._wrapped:
+            obj._setup()
+        return str(obj._wrapped)
+    return str(obj)
+Database.register_adapter(SimpleLazyObject, adapt_lazy_object)
 
 
 class DatabaseWrapper(BaseDatabaseWrapper):
@@ -599,3 +608,4 @@ def _sqlite_lpad(text, length, fill_text):
 @none_guard
 def _sqlite_rpad(text, length, fill_text):
     return (text + fill_text * length)[:length]
+
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..834137a0f1
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,74 @@
+from django.conf import settings
+settings.configure(
+    DEBUG=True,
+    SECRET_KEY='dummy-key-for-test',
+    ROOT_URLCONF=__name__,
+    MIDDLEWARE=[
+        'django.middleware.common.CommonMiddleware',
+    ],
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    TEMPLATES=[{
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'APP_DIRS': True,
+    }],
+)
+
+import django
+django.setup()
+
+# Create test models and views
+from django.db import models
+from django.views.generic import TemplateView
+from django.shortcuts import get_object_or_404
+from django.urls import path
+from django.utils.functional import SimpleLazyObject
+
+class Account(models.Model):
+    slug = models.SlugField(unique=True)
+    
+    class Meta:
+        app_label = 'testapp'
+
+class OfferView(TemplateView):
+    template_name = "offers/offer.html"
+    def get_context_data(self, **kwargs):
+        offer_slug = kwargs.get("offer_slug", "")
+        # This will fail with SimpleLazyObject
+        offer = get_object_or_404(Account, slug=offer_slug)
+        return {"offer": offer, "offer_slug": offer_slug}
+
+# URL configuration
+urlpatterns = [
+    path('offers/<slug:offer_slug>/', OfferView.as_view(), name='offer_view'),
+]
+
+if __name__ == '__main__':
+    # Create test database
+    from django.db import connection
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(Account)
+    
+    # Create test account
+    Account.objects.create(slug='test-offer')
+    
+    # Create a SimpleLazyObject that will be passed as a URL parameter
+    lazy_slug = SimpleLazyObject(lambda: 'test-offer')
+    
+    # Simulate a view call with the lazy object
+    view = OfferView()
+    try:
+        context = view.get_context_data(offer_slug=lazy_slug)
+        print("Success! Context:", context)
+    except Exception as e:
+        print(f"Error occurred: {str(e)}")
+        import traceback
+        traceback.print_exc()
