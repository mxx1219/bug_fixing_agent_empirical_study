diff --git a/django/contrib/admin/helpers.py b/django/contrib/admin/helpers.py
index dd154f72ee..9b752f7ec6 100644
--- a/django/contrib/admin/helpers.py
+++ b/django/contrib/admin/helpers.py
@@ -209,11 +209,12 @@ class AdminReadonlyField:
             remote_field.model._meta.model_name,
         )
         try:
-            url = reverse(url_name, args=[quote(remote_obj.pk)])
+            url = reverse(url_name, args=[quote(remote_obj.pk)], current_app=self.model_admin.admin_site.name)
             return format_html('<a href="{}">{}</a>', url, remote_obj)
         except NoReverseMatch:
             return str(remote_obj)
 
+
     def contents(self):
         from django.contrib.admin.templatetags.admin_list import _boolean_icon
         field, obj, model_admin = self.field['field'], self.form.instance, self.model_admin
@@ -439,3 +440,4 @@ class AdminErrorList(forms.utils.ErrorList):
                 self.extend(inline_formset.non_form_errors())
                 for errors_in_inline_form in inline_formset.errors:
                     self.extend(errors_in_inline_form.values())
+
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..689632ede4
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,117 @@
+import os
+import django
+from django.conf import settings
+from django.core.management import call_command
+
+# Configure Django settings first
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:'
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.admin',
+        'django.contrib.auth',
+        'django.contrib.contenttypes',
+        'django.contrib.sessions',
+        'django.contrib.messages',
+        'django.contrib.staticfiles',
+        '__main__',  # Add this module as an app
+    ],
+    MIDDLEWARE=[
+        'django.middleware.security.SecurityMiddleware',
+        'django.contrib.sessions.middleware.SessionMiddleware',
+        'django.middleware.common.CommonMiddleware',
+        'django.middleware.csrf.CsrfViewMiddleware',
+        'django.contrib.auth.middleware.AuthenticationMiddleware',
+        'django.contrib.messages.middleware.MessageMiddleware',
+    ],
+    ROOT_URLCONF=__name__,
+)
+
+django.setup()
+
+from django.contrib.admin import AdminSite
+from django.contrib.admin.helpers import AdminReadonlyField
+from django.db import models, connection
+from django.forms import ModelForm
+from django.urls import path, include
+
+# Create test models
+class Author(models.Model):
+    name = models.CharField(max_length=100)
+    
+    def __str__(self):
+        return self.name
+
+    class Meta:
+        app_label = 'main'
+
+class Book(models.Model):
+    title = models.CharField(max_length=100)
+    author = models.ForeignKey(Author, on_delete=models.CASCADE)
+    
+    def __str__(self):
+        return self.title
+
+    class Meta:
+        app_label = 'main'
+
+# Create custom admin site
+class CustomAdminSite(AdminSite):
+    site_url = '/custom-admin/'
+    name = 'custom_admin'
+
+# Create model admin
+from django.contrib import admin
+
+class BookAdmin(admin.ModelAdmin):
+    readonly_fields = ('author',)
+
+# Set up environment
+custom_admin = CustomAdminSite()
+custom_admin.register(Book, BookAdmin)
+custom_admin.register(Author)
+
+# URL patterns
+urlpatterns = [
+    path('custom-admin/', custom_admin.urls),
+]
+
+if __name__ == '__main__':
+    # Create database tables directly
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(Author)
+        schema_editor.create_model(Book)
+    
+    # Create test data
+    author = Author.objects.create(name='Test Author')
+    book = Book.objects.create(title='Test Book', author=author)
+    
+    # Create form instance
+    class BookForm(ModelForm):
+        class Meta:
+            model = Book
+            fields = ['title', 'author']
+    
+    # Get model admin
+    book_admin = custom_admin._registry[Book]
+    
+    # Create readonly field
+    form = BookForm(instance=book)
+    readonly_field = AdminReadonlyField(form, 'author', is_first=True, model_admin=book_admin)
+    
+    # Test URL generation
+    print("\nTesting URL generation:")
+    url = readonly_field.get_admin_url(book._meta.get_field('author').remote_field, author)
+    print(f"Generated URL HTML: {url}")
+    
+    # Verify the URL contains custom-admin
+    if '/custom-admin/' in str(url):
+        print("\nSuccess: URL contains custom admin prefix")
+    else:
+        print("\nFail: URL does not contain custom admin prefix")
+
