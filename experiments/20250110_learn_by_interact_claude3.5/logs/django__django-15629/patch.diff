diff --git a/django/db/backends/mysql/schema.py b/django/db/backends/mysql/schema.py
index 562b209eef..e3e9b80801 100644
--- a/django/db/backends/mysql/schema.py
+++ b/django/db/backends/mysql/schema.py
@@ -101,8 +101,13 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):
         return super()._column_default_sql(field)
 
     def add_field(self, model, field):
+        if field.remote_field and field.db_constraint:
+            target_collation = field.target_field.db_parameters(connection=self.connection).get('collation')
+            if target_collation:
+                field.db_collation = target_collation
         super().add_field(model, field)
 
+
         # Simulate the effect of a one-off default.
         # field.default may be unhashable, so a set isn't used for "in" check.
         if self.skip_default(field) and field.default not in (None, NOT_PROVIDED):
@@ -166,9 +171,15 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):
         return new_type
 
     def _alter_column_type_sql(self, model, old_field, new_field, new_type):
+        if new_field.remote_field and new_field.db_constraint:
+            target_collation = new_field.target_field.db_parameters(connection=self.connection).get('collation')
+            if target_collation:
+                new_type += f" COLLATE {target_collation}"
         new_type = self._set_field_new_type_null_status(old_field, new_type)
         return super()._alter_column_type_sql(model, old_field, new_field, new_type)
 
     def _rename_field_sql(self, table, old_field, new_field, new_type):
         new_type = self._set_field_new_type_null_status(old_field, new_type)
         return super()._rename_field_sql(table, old_field, new_field, new_type)
+
+
diff --git a/test.py b/test.py
new file mode 100644
index 0000000000..adbee46484
--- /dev/null
+++ b/test.py
@@ -0,0 +1,61 @@
+from django.conf import settings
+settings.configure(DATABASES={'default':{'ENGINE':'django.db.backends.sqlite3','NAME':':memory:'}})
+import django; django.setup()
+from django.db import models
+from django.db.backends.mysql.schema import DatabaseSchemaEditor
+
+class Account(models.Model):
+    id = models.CharField(max_length=22, primary_key=True, db_collation='utf8_bin')
+    class Meta: app_label = 'test'
+
+class Profile(models.Model):
+    account = models.ForeignKey(Account, on_delete=models.CASCADE)
+    class Meta: app_label = 'test'
+
+# Mock operations
+class MockOps:
+    def quote_name(self, x): return f'`{x}`'
+    def field_cast_sql(self): return '%s'
+    def pk_default_value(self): return 'DEFAULT'
+    def validate_autopk_value(self, value): return value
+    def adapt_datefield_value(self, value): return value
+    def adapt_datetimefield_value(self, value): return value
+    def adapt_timefield_value(self, value): return value
+    def max_name_length(self): return 64
+    def adapt_decimalfield_value(self, value, max_digits=None, decimal_places=None): return value
+
+# Mock connection
+conn = type('Connection', (), {
+    'features': type('Features', (), {
+        'supports_foreign_keys': True,
+        'can_rollback_ddl': True,
+        'requires_literal_defaults': False,
+    })(),
+    'mysql_version': (8, 0, 0),
+    'mysql_is_mariadb': False,
+    'ensure_connection': lambda self: None,
+    'cursor': lambda self: None,
+    'ops': MockOps(),
+    'data_types': {
+        'AutoField': 'integer AUTO_INCREMENT',
+        'CharField': 'varchar(%(max_length)s)',
+        'TextField': 'longtext',
+        'IntegerField': 'integer',
+        'BigIntegerField': 'bigint',
+        'ForeignKey': 'varchar(%(max_length)s)',
+    },
+    'data_type_check_constraints': {
+        'AutoField': '',
+        'CharField': '',
+        'TextField': '',
+        'IntegerField': '',
+        'BigIntegerField': '',
+        'ForeignKey': '',
+    },
+})()
+
+schema_editor = DatabaseSchemaEditor(conn)
+field = Profile._meta.get_field('account')
+sql, _ = schema_editor._alter_column_type_sql(Profile, field, field, 'varchar(22)')
+print(f"SQL: {sql}")
+
diff --git a/test_collation.py b/test_collation.py
new file mode 100644
index 0000000000..00f3603060
--- /dev/null
+++ b/test_collation.py
@@ -0,0 +1,189 @@
+from django.conf import settings
+settings.configure(
+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}}
+)
+
+import django
+django.setup()
+
+from django.db import models, migrations, connection
+from django.db.migrations.state import ProjectState
+from django.db.migrations.autodetector import MigrationAutodetector
+from django.db.migrations.loader import MigrationLoader
+from django.db.backends.mysql.schema import DatabaseSchemaEditor
+from django.db.migrations.questioner import MigrationQuestioner
+
+# Create a mock MySQL connection
+class MockConnection:
+    features = type('Features', (), {'supports_foreign_keys': True})()
+    mysql_version = (8, 0, 0)
+    mysql_is_mariadb = False
+    def ensure_connection(self): pass
+    def cursor(self): return None
+    introspection = type('Introspection', (), {'get_storage_engine': lambda *args: 'InnoDB'})()
+
+# Create schema editor
+schema_editor = DatabaseSchemaEditor(MockConnection())
+schema_editor.deferred_sql = []
+schema_editor.quote_name = lambda x: f'`{x}`'
+
+# First state - no models
+old_state = ProjectState()
+
+# New state - with our models
+class Account(models.Model):
+    id = models.CharField(max_length=22, primary_key=True, db_collation='utf8_bin')
+    
+    class Meta:
+        app_label = 'testapp'
+
+class Profile(models.Model):
+    id = models.CharField(max_length=22, primary_key=True, db_collation='utf8_bin')
+    account = models.ForeignKey(Account, on_delete=models.CASCADE)
+    
+    class Meta:
+        app_label = 'testapp'
+
+# Create a schema editor
+schema_editor = DatabaseSchemaEditor(connection)
+
+# Print the SQL that would be generated for creating these models
+print("SQL for creating models:")
+print(schema_editor.sql_create_table % {
+    'table': 'testapp_account',
+    'definition': 'id varchar(22) COLLATE utf8_bin PRIMARY KEY'
+})
+
+print("\nSQL for foreign key:")
+print(schema_editor.sql_create_column % {
+    'table': 'testapp_profile',
+    'column': 'account_id',
+    'definition': 'varchar(22)'  # Should include COLLATE utf8_bin
+})
+
+# Create new state
+new_state = ProjectState()
+new_state.add_model(Account._meta.clone())
+new_state.add_model(Profile._meta.clone())
+
+# Get the migration operations
+autodetector = MigrationAutodetector(
+    old_state,
+    new_state,
+    questioner=MigrationQuestioner({"ask_initial": True}),
+)
+
+changes = autodetector.changes()
+
+# Print the generated operations
+print("Generated migration operations:")
+for app_label, migrations in changes.items():
+    print(f"\nApp: {app_label}")
+    for migration in migrations:
+        print("\nOperations:")
+        for operation in migration.operations:
+            print(f"  {operation}")
+            
+            # If this is a CreateModel operation, show the complete field definitions
+            if isinstance(operation, migrations.CreateModel):
+                print("\nFields:")
+                for name, field in operation.fields:
+                    print(f"  {name}: {field}")
+
+# Now let's show the actual SQL that would be generated
+print("\nGenerated SQL for MySQL:")
+mysql_connection = type('Connection', (), {
+    'features': type('Features', (), {'supports_foreign_keys': True}),
+    'mysql_version': (8, 0, 0),
+    'mysql_is_mariadb': False,
+    'introspection': type('Introspection', (), {'get_storage_engine': lambda *args: 'InnoDB'}),
+})()
+
+schema_editor = DatabaseSchemaEditor(mysql_connection)
+schema_editor.deferred_sql = []
+schema_editor.quote_name = lambda x: f'`{x}`'
+
+for app_label, migrations in changes.items():
+    for migration in migrations:
+        for operation in migration.operations:
+            if isinstance(operation, migrations.CreateModel):
+                table_name = f'testapp_{operation.name.lower()}'
+                print(f"\n-- Creating table {table_name}")
+                
+                # Build column definitions
+                columns = []
+                for name, field in operation.fields:
+                    db_params = field.db_parameters(connection=mysql_connection)
+                    col_type = db_params['type']
+                    if field.primary_key:
+                        col_type += ' PRIMARY KEY'
+                    if db_params.get('collation'):
+                        col_type += f" COLLATE {db_params['collation']}"
+                    columns.append(f'`{name}` {col_type}')
+                
+                # Handle foreign keys
+                for name, field in operation.fields:
+                    if field.remote_field and field.db_constraint:
+                        # This is a foreign key - get its SQL
+                        to_table = field.remote_field.model._meta.db_table
+                        columns.append(
+                            f'CONSTRAINT `fk_{table_name}_{name}` FOREIGN KEY (`{name}`) '
+                            f'REFERENCES `{to_table}` (`id`)'
+                        )
+                
+                sql = f'CREATE TABLE `{table_name}` (\n  ' + ',\n  '.join(columns) + '\n);'
+                print(sql)
+
+# Test Case 1: Original behavior (no collation propagation)
+print("\nTest Case 1: Original behavior (no collation propagation)")
+
+# Build column definitions for Account
+print("\n-- Creating Account table")
+account_cols = []
+for field in Account._meta.fields:
+    db_params = field.db_parameters(connection=mysql_connection)
+    col_type = db_params['type']
+    if field.primary_key:
+        col_type += ' PRIMARY KEY'
+    if db_params.get('collation'):
+        col_type += f" COLLATE {db_params['collation']}"
+    account_cols.append(f'`{field.column}` {col_type}')
+print(f'CREATE TABLE `testapp_account` (\n  ' + ',\n  '.join(account_cols) + '\n);')
+
+# Build column definitions for Profile
+print("\n-- Creating Profile table")
+profile_cols = []
+for field in Profile._meta.fields:
+    db_params = field.db_parameters(connection=mysql_connection)
+    col_type = db_params['type']
+    if field.primary_key:
+        col_type += ' PRIMARY KEY'
+    if db_params.get('collation'):
+        col_type += f" COLLATE {db_params['collation']}"
+    profile_cols.append(f'`{field.column}` {col_type}')
+
+# Add foreign key constraint
+profile_cols.append(
+    'CONSTRAINT `fk_profile_account` FOREIGN KEY (`account_id`) '
+    'REFERENCES `testapp_account` (`id`)'
+)
+print(f'CREATE TABLE `testapp_profile` (\n  ' + ',\n  '.join(profile_cols) + '\n);')
+
+print("\nProblem: The account_id column in Profile table doesn't inherit the collation from Account's id field")
+print("This causes foreign key constraint errors in MySQL")
+
+print("\nRequired fix:")
+print("1. Modify django/db/backends/mysql/schema.py to propagate collation")
+print("2. Need to add collation to foreign key fields when they reference a field with specific collation")
+
+# Test field type SQL generation
+account_field = Account._meta.get_field('id')
+profile_field = Profile._meta.get_field('account')
+
+sql, params = schema_editor._alter_column_type_sql(
+    Profile, profile_field, profile_field, 'varchar(22)'
+)
+print("\nGenerated SQL for foreign key field:")
+print(sql)
+print("\nShould include COLLATE utf8_bin to match Account.id's collation")
+
