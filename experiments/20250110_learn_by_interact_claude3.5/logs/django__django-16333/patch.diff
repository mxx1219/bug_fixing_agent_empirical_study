diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py
index d73d1c8495..29d627e3df 100644
--- a/django/contrib/auth/forms.py
+++ b/django/contrib/auth/forms.py
@@ -141,9 +141,11 @@ class UserCreationForm(forms.ModelForm):
         user.set_password(self.cleaned_data["password1"])
         if commit:
             user.save()
+            self.save_m2m()
         return user
 
 
+
 class UserChangeForm(forms.ModelForm):
     password = ReadOnlyPasswordHashField(
         label=_("Password"),
@@ -485,3 +487,4 @@ class AdminPasswordChangeForm(forms.Form):
             if name not in data:
                 return []
         return ["password"]
+
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..cac17d3a38
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,55 @@
+import os
+import django
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        SECRET_KEY='dummy-key-for-tests',
+    )
+    django.setup()
+
+from django.core.management import call_command
+from django.contrib.auth.models import User, Group
+from django.contrib.auth.forms import UserCreationForm
+
+# Run migrations
+call_command('migrate', verbosity=0)
+
+# Create a test group
+group = Group.objects.create(name='test_group')
+print(f"Created group with id: {group.id}")
+
+# Create a custom form that includes groups
+class CustomUserCreationForm(UserCreationForm):
+    class Meta(UserCreationForm.Meta):
+        model = User
+        fields = UserCreationForm.Meta.fields + ('groups',)
+
+# Create form data
+form_data = {
+    'username': 'testuser',
+    'password1': 'testpass123',
+    'password2': 'testpass123',
+    'groups': [group.id],
+}
+
+# Create and validate form
+form = CustomUserCreationForm(data=form_data)
+if form.is_valid():
+    print("Form data before save:", form.cleaned_data.get('groups', []))
+    user = form.save()
+    print(f"User created with username: {user.username}")
+    print(f"User groups: {[g.name for g in user.groups.all()]}")
+else:
+    print("Form validation failed:", form.errors)
+
