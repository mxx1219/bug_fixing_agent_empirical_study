diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py
index e10a5bb6d9..3852e80d6b 100644
--- a/django/db/models/fields/files.py
+++ b/django/db/models/fields/files.py
@@ -227,19 +227,24 @@ class FileField(Field):
     def __init__(self, verbose_name=None, name=None, upload_to='', storage=None, **kwargs):
         self._primary_key_set_explicitly = 'primary_key' in kwargs
 
-        self.storage = storage or default_storage
-        if callable(self.storage):
-            self.storage = self.storage()
-            if not isinstance(self.storage, Storage):
-                raise TypeError(
-                    "%s.storage must be a subclass/instance of %s.%s"
-                    % (self.__class__.__qualname__, Storage.__module__, Storage.__qualname__)
-                )
+        # Store the original callable without evaluating it
+        self._original_storage = storage
+
+        # Set up the actual storage for use
+        storage_to_use = storage or default_storage
+        actual_storage = storage_to_use() if callable(storage_to_use) else storage_to_use
+        if not isinstance(actual_storage, Storage):
+            raise TypeError(
+                "%s.storage must be a subclass/instance of %s.%s"
+                % (self.__class__.__qualname__, Storage.__module__, Storage.__qualname__)
+            )
+        self.storage = actual_storage
         self.upload_to = upload_to
 
         kwargs.setdefault('max_length', 100)
         super().__init__(verbose_name, name, **kwargs)
 
+
     def check(self, **kwargs):
         return [
             *super().check(**kwargs),
@@ -278,8 +283,8 @@ class FileField(Field):
         if kwargs.get("max_length") == 100:
             del kwargs["max_length"]
         kwargs['upload_to'] = self.upload_to
-        if self.storage is not default_storage:
-            kwargs['storage'] = self.storage
+        if self._original_storage is not None and self._original_storage is not default_storage:
+            kwargs['storage'] = self._original_storage
         return name, path, args, kwargs
 
     def get_internal_type(self):
@@ -475,3 +480,26 @@ class ImageField(FileField):
             'form_class': forms.ImageField,
             **kwargs,
         })
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..01c69fd129
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,41 @@
+from django.conf import settings
+from django.core.files.storage import Storage, default_storage
+from django.db.models import FileField
+import random
+
+if not settings.configured:
+    settings.configure()
+
+class TestStorage(Storage):
+    def _open(self, name, mode='rb'):
+        pass
+    
+    def _save(self, name, content):
+        pass
+    
+    def get_valid_name(self, name):
+        return name
+
+def get_storage():
+    return TestStorage()
+
+# Create a FileField with callable storage
+field = FileField(storage=get_storage)
+
+# Get the deconstructed form
+name, path, args, kwargs = field.deconstruct()
+
+print("Test 1: Basic callable preservation")
+print("Original storage function:", get_storage)
+print("Original storage was callable:", callable(get_storage))
+print("Deconstructed storage:", kwargs.get('storage'))
+print("Deconstructed storage is callable:", callable(kwargs.get('storage')))
+print("Storage type:", type(kwargs.get('storage')))
+print()
+
+print("Test 2: Migration-like reconstruction")
+reconstructed = FileField(**kwargs)
+print("Kwargs being passed:", kwargs)
+print("Reconstructed field's storage is callable:", callable(getattr(reconstructed, '_storage_input', None)))
+print("Reconstructed field's storage type:", type(reconstructed.storage))
+
