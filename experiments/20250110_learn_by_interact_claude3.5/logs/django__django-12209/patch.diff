diff --git a/django/db/models/base.py b/django/db/models/base.py
index e3b14a41a0..1db5f63052 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -847,14 +847,29 @@ class Model(metaclass=ModelBase):
         if not pk_set and (force_update or update_fields):
             raise ValueError("Cannot force an update in save() with no primary key.")
         updated = False
-        # Skip an UPDATE when adding an instance and primary key has a default.
+        # Skip an UPDATE when adding an instance with no explicit PK value and primary key has a default.
         if (
             not force_insert and
             self._state.adding and
             self._meta.pk.default and
-            self._meta.pk.default is not NOT_PROVIDED
+            self._meta.pk.default is not NOT_PROVIDED and
+            pk_val is None
         ):
             force_insert = True
+
+
+
+
+
+
+
+
+
+            force_insert = True
+
+            force_insert = True
+
+
         # If possible, try an UPDATE. If that doesn't update anything, do an INSERT.
         if pk_set and not force_insert:
             base_qs = cls._base_manager.using(using)
@@ -1909,3 +1924,16 @@ def model_unpickle(model_id):
 
 
 model_unpickle.__safe_for_unpickle__ = True
+
+
+
+
+
+
+
+
+
+
+
+
+
diff --git "a/django/db/models/base.py\"" "b/django/db/models/base.py\""
new file mode 100644
index 0000000000..45db38e3c4
--- /dev/null
+++ "b/django/db/models/base.py\""
@@ -0,0 +1,8 @@
+# Skip an UPDATE when adding an instance with no explicit PK value and primary key has a default.
+        if (
+            not force_insert and
+            self._state.adding and
+            self._meta.pk.default and
+            self._meta.pk.default is not NOT_PROVIDED and
+            pk_val is None
+        ):
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..9f604b4570
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,51 @@
+from uuid import uuid4
+from django.db import models
+from django.conf import settings
+import os
+
+# Configure minimal Django settings
+BASE_DIR = os.path.dirname(os.path.abspath(__file__))
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+)
+
+import django
+django.setup()
+
+# Create test model
+class Sample(models.Model):
+    id = models.UUIDField(primary_key=True, default=uuid4)
+    name = models.CharField(blank=True, max_length=100)
+
+    class Meta:
+        # This tells Django this is a temporary model
+        abstract = False
+        app_label = 'django.contrib.contenttypes'
+
+# Create tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Sample)
+
+# Reproduce the issue
+s0 = Sample.objects.create()
+print(f"Created s0 with id: {s0.pk}")
+
+s1 = Sample(pk=s0.pk, name='Test 1')
+print(f"Created s1 with same id: {s1.pk}")
+
+try:
+    s1.save()
+    print("Save successful!")
+except Exception as e:
+    print(f"Save failed with: {e}")
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..e7db6f2666
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,47 @@
+from uuid import uuid4
+from django.db import models
+from django.conf import settings
+import os
+
+# Configure minimal Django settings
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+)
+
+import django
+django.setup()
+
+class Sample(models.Model):
+    id = models.UUIDField(primary_key=True, default=uuid4)
+    name = models.CharField(blank=True, max_length=100)
+
+    class Meta:
+        app_label = 'django.contrib.contenttypes'
+
+# Create tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Sample)
+
+# Test the fix
+s0 = Sample.objects.create()
+print(f"Created s0 with id: {s0.pk}")
+
+s1 = Sample(pk=s0.pk, name='Test 1')
+print(f"Created s1 with same id: {s1.pk}")
+
+try:
+    s1.save()
+    print("Save successful! Fix works!")
+except Exception as e:
+    print(f"Save failed with: {e}")
