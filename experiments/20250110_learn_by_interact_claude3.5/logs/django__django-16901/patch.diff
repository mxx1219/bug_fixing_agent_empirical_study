diff --git a/django/db/models/sql/where.py b/django/db/models/sql/where.py
index aaab1730b7..73c6a3f4f7 100644
--- a/django/db/models/sql/where.py
+++ b/django/db/models/sql/where.py
@@ -129,17 +129,18 @@ class WhereNode(tree.Node):
             # Convert if the database doesn't support XOR:
             #   a XOR b XOR c XOR ...
             # to:
-            #   (a OR b OR c OR ...) AND (a + b + c + ...) == 1
+            #   (a OR b OR c OR ...) AND MOD(a + b + c + ..., 2) = 1
             lhs = self.__class__(self.children, OR)
             rhs_sum = reduce(
                 operator.add,
                 (Case(When(c, then=1), default=0) for c in self.children),
             )
-            rhs = Exact(1, rhs_sum)
+            rhs = Exact(1, rhs_sum % 2)  # Changed to use modulo 2 for odd parity
             return self.__class__([lhs, rhs], AND, self.negated).as_sql(
                 compiler, connection
             )
 
+
         for child in self.children:
             try:
                 sql, params = compiler.compile(child)
@@ -353,3 +354,4 @@ class SubqueryConstraint:
         query.set_values(self.targets)
         query_compiler = query.get_compiler(connection=connection)
         return query_compiler.as_subquery_condition(self.alias, self.columns, compiler)
+
diff --git a/reproduce_xor.py b/reproduce_xor.py
new file mode 100644
index 0000000000..e427e883a6
--- /dev/null
+++ b/reproduce_xor.py
@@ -0,0 +1,46 @@
+from django.conf import settings
+
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+    ],
+    DEFAULT_AUTO_FIELD='django.db.models.AutoField',
+)
+
+import django
+django.setup()
+
+from django.db import models
+from django.db.models import Q
+
+# Create test model
+class Client(models.Model):
+    class Meta:
+        managed = True
+        app_label = 'django.contrib.contenttypes'
+
+# Create tables
+from django.core.management import call_command
+call_command('migrate', run_syncdb=True, verbosity=0)
+
+# Create a test client
+client = Client.objects.create(id=37)
+
+# Test XOR operations
+tests = [
+    Q(id=37),
+    Q(id=37) ^ Q(id=37),
+    Q(id=37) ^ Q(id=37) ^ Q(id=37),
+    Q(id=37) ^ Q(id=37) ^ Q(id=37) ^ Q(id=37),
+    Q(id=37) ^ Q(id=37) ^ Q(id=37) ^ Q(id=37) ^ Q(id=37)
+]
+
+print("Testing XOR operations (should be: 1,0,1,0,1)")
+for i, q in enumerate(tests, 1):
+    print(f"Test {i}: {Client.objects.filter(q).count()}")
diff --git a/test_xor.py b/test_xor.py
new file mode 100644
index 0000000000..2f33b416d1
--- /dev/null
+++ b/test_xor.py
@@ -0,0 +1,51 @@
+from django.conf import settings
+settings.configure()
+
+from django.db.models.sql.where import WhereNode
+from django.db.models.lookups import Exact
+
+class DummyCompiler:
+    def compile(self, node):
+        if isinstance(node, Exact):
+            return f"id = {node.rhs}", []
+        return node.as_sql(self, DummyConnection())
+
+class DummyConnection:
+    class features:
+        supports_logical_xor = False
+
+# Create test lookups
+tests = [
+    [Exact("id", 1)],
+    [Exact("id", 1), Exact("id", 1)],
+    [Exact("id", 1), Exact("id", 1), Exact("id", 1)],
+]
+
+print("Testing XOR SQL generation (should handle odd/even parity)")
+compiler = DummyCompiler()
+
+for i, children in enumerate(tests, 1):
+    node = WhereNode(children, "XOR")
+    print(f"\nTest {i} ({len(children)} terms):")
+    sql, params = node.as_sql(compiler, DummyConnection())
+    print(f"SQL: {sql}")
+    print(f"Params: {params}")
+
+def test_xor(values):
+    """Test XOR behavior with given values (True/False)"""
+    nodes = [Exact("id", v) for v in values]
+    node = WhereNode(nodes, "XOR")
+    sql, _ = node.as_sql(DummyCompiler(), DummyConnection())
+    print(f"\nTest with {values}:")
+    print(f"SQL: {sql}")
+    # Count number of true values
+    true_count = sum(1 for v in values if v)
+    print(f"Expected result (odd number of true): {true_count % 2 == 1}")
+
+# Test different combinations
+test_xor([True])  # Should be true (1 true)
+test_xor([True, True])  # Should be false (2 true)
+test_xor([True, True, True])  # Should be true (3 true)
+test_xor([True, False, True])  # Should be false (2 true)
+test_xor([True, False, False])  # Should be true (1 true)
+
