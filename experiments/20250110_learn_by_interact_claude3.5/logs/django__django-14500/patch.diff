diff --git a/django/db/migrations/executor.py b/django/db/migrations/executor.py
index 57042a8690..e1d7a4b4f7 100644
--- a/django/db/migrations/executor.py
+++ b/django/db/migrations/executor.py
@@ -254,8 +254,11 @@ class MigrationExecutor:
         if migration.replaces:
             for app_label, name in migration.replaces:
                 self.recorder.record_unapplied(app_label, name)
+            # Also record the squashed migration as unapplied
+            self.recorder.record_unapplied(migration.app_label, migration.name)
         else:
             self.recorder.record_unapplied(migration.app_label, migration.name)
+
         # Report progress
         if self.progress_callback:
             self.progress_callback("unapply_success", migration, fake)
@@ -371,3 +374,4 @@ class MigrationExecutor:
         # If we get this far and we found at least one CreateModel or AddField migration,
         # the migration is considered implicitly applied.
         return (found_create_model_migration or found_add_field_migration), after_state
+
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..962e00d055
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,53 @@
+from django.conf import settings
+settings.configure(
+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+    INSTALLED_APPS=['django.db.migrations'],
+)
+
+import django
+django.setup()
+
+from django.db import connection
+from django.db.migrations.executor import MigrationExecutor
+from django.db.migrations.recorder import MigrationRecorder
+from django.db.migrations.state import ProjectState
+
+# Create a mock migration class
+class MockMigration:
+    def __init__(self, app_label, name, replaces=None):
+        self.app_label = app_label
+        self.name = name
+        self.replaces = replaces or []
+        self.atomic = True
+
+    def unapply(self, project_state, schema_editor):
+        return project_state
+
+# Create executor and recorder
+executor = MigrationExecutor(connection)
+recorder = executor.recorder
+
+# Ensure schema exists
+recorder.ensure_schema()
+
+# Create mock migration that replaces others
+squashed_migration = MockMigration('testapp', 'squashed_0001', replaces=[
+    ('testapp', '0001_initial'),
+    ('testapp', '0002_change'),
+])
+
+# Record the replaced migrations as applied
+recorder.record_applied('testapp', '0001_initial')
+recorder.record_applied('testapp', '0002_change')
+recorder.record_applied('testapp', 'squashed_0001')
+
+print("Before unapply:")
+print("Applied migrations:", recorder.applied_migrations())
+
+# Unapply the squashed migration
+state = ProjectState()
+executor.unapply_migration(state, squashed_migration)
+
+print("\nAfter unapply:")
+print("Applied migrations:", recorder.applied_migrations())
+
