diff --git a/django/contrib/auth/backends.py b/django/contrib/auth/backends.py
index f4b1722757..f8e7e818f3 100644
--- a/django/contrib/auth/backends.py
+++ b/django/contrib/auth/backends.py
@@ -39,7 +39,10 @@ class ModelBackend(BaseBackend):
     def authenticate(self, request, username=None, password=None, **kwargs):
         if username is None:
             username = kwargs.get(UserModel.USERNAME_FIELD)
+        if username is None or password is None:
+            return None
         try:
+
             user = UserModel._default_manager.get_by_natural_key(username)
         except UserModel.DoesNotExist:
             # Run the default password hasher once to reduce the timing
@@ -206,3 +209,4 @@ class RemoteUserBackend(ModelBackend):
 class AllowAllUsersRemoteUserBackend(RemoteUserBackend):
     def user_can_authenticate(self, user):
         return True
+
diff --git a/repro.py b/repro.py
new file mode 100644
index 0000000000..eee77b478f
--- /dev/null
+++ b/repro.py
@@ -0,0 +1,32 @@
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')
+
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+        INSTALLED_APPS=['django.contrib.auth', 'django.contrib.contenttypes'],
+        SECRET_KEY='dummy'
+    )
+
+import django
+django.setup()
+
+# Create the database tables
+from django.core.management import call_command
+call_command('migrate', verbosity=0, interactive=False)
+
+from django.contrib.auth import authenticate
+from django.contrib.auth.models import User
+from django.db import connection
+from django.test.utils import CaptureQueriesContext
+
+# Test with None credentials
+print("\nTest 1: None credentials")
+with CaptureQueriesContext(connection) as queries:
+    user = authenticate(request=None, username=None, password=None)
+    print(f"Number of queries: {len(queries)}")
+    print(f"Authentication result: {user}")
+    for q in queries:
+        print(f"Query: {q['sql']}")
+
