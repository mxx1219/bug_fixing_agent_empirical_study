diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py
index 5f2e64761e..b84ed00fb4 100644
--- a/django/core/management/__init__.py
+++ b/django/core/management/__init__.py
@@ -136,7 +136,17 @@ def call_command(command_name, *args, **options):
         '{}={}'.format(min(opt.option_strings), arg_options[opt.dest])
         for opt in parser_actions if opt.required and opt.dest in options
     ]
+    # Handle required mutually exclusive groups
+    for group in parser._mutually_exclusive_groups:
+        if group.required:
+            group_options = [opt.dest for opt in group._group_actions if opt.dest in options]
+            if len(group_options) > 1:
+                raise CommandError(f"Arguments {', '.join(group_options)} are mutually exclusive")
+            elif len(group_options) == 1:
+                opt = next(opt for opt in group._group_actions if opt.dest == group_options[0])
+                parse_args.append('{}={}'.format(min(opt.option_strings), arg_options[opt.dest]))
     defaults = parser.parse_args(args=parse_args)
+
     defaults = dict(defaults._get_kwargs(), **arg_options)
     # Raise an error if any unknown options were passed.
     stealth_options = set(command.base_stealth_options + command.stealth_options)
@@ -391,3 +401,4 @@ def execute_from_command_line(argv=None):
     """Run a ManagementUtility."""
     utility = ManagementUtility(argv)
     utility.execute()
+
diff --git a/django_test/__init__.py b/django_test/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/django_test/management/__init__.py b/django_test/management/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/django_test/management/commands/__init__.py b/django_test/management/commands/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/django_test/management/commands/my_command.py b/django_test/management/commands/my_command.py
new file mode 100644
index 0000000000..d889f2e304
--- /dev/null
+++ b/django_test/management/commands/my_command.py
@@ -0,0 +1,11 @@
+
+from django.core.management.base import BaseCommand
+
+class Command(BaseCommand):
+    def add_arguments(self, parser):
+        shop = parser.add_mutually_exclusive_group(required=True)
+        shop.add_argument('--shop-id', nargs='?', type=int, default=None, dest='shop_id')
+        shop.add_argument('--shop', nargs='?', type=str, default=None, dest='shop_name')
+
+    def handle(self, *args, **options):
+        print(f"Received options: {options}")
diff --git a/repro.py b/repro.py
new file mode 100644
index 0000000000..2c054ebe67
--- /dev/null
+++ b/repro.py
@@ -0,0 +1,99 @@
+import os
+import sys
+from django.conf import settings
+
+# Configure settings before importing django
+if not settings.configured:
+    settings.configure(
+        SECRET_KEY='dummy-key-for-test',
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+    )
+
+import django
+django.setup()
+
+from django.core.management import BaseCommand, CommandError, call_command
+from django.core.management.base import CommandParser
+import django.core.management
+
+# Create a test command directly
+class Command(BaseCommand):
+    def add_arguments(self, parser):
+        shop = parser.add_mutually_exclusive_group(required=True)
+        shop.add_argument('--shop-id', nargs='?', type=int, default=None, dest='shop_id')
+        shop.add_argument('--shop', nargs='?', type=str, default=None, dest='shop_name')
+
+    def handle(self, *args, **options):
+        print(f"Received options: {options}")
+
+# Create a management directory structure
+os.makedirs('django_test/management/commands', exist_ok=True)
+with open('django_test/__init__.py', 'w') as f:
+    pass
+with open('django_test/management/__init__.py', 'w') as f:
+    pass
+with open('django_test/management/commands/__init__.py', 'w') as f:
+    pass
+with open('django_test/management/commands/my_command.py', 'w') as f:
+    f.write('''
+from django.core.management.base import BaseCommand
+
+class Command(BaseCommand):
+    def add_arguments(self, parser):
+        shop = parser.add_mutually_exclusive_group(required=True)
+        shop.add_argument('--shop-id', nargs='?', type=int, default=None, dest='shop_id')
+        shop.add_argument('--shop', nargs='?', type=str, default=None, dest='shop_name')
+
+    def handle(self, *args, **options):
+        print(f"Received options: {options}")
+''')
+
+# Register the command by monkey patching get_commands
+original_get_commands = django.core.management.get_commands
+def mock_get_commands():
+    commands = original_get_commands()
+    commands['my_command'] = Command()
+    return commands
+django.core.management.get_commands = mock_get_commands
+
+# Test with kwargs (should work with our fix)
+print("\nTesting with kwargs:")
+try:
+    call_command('my_command', shop_id=1)
+    print("Success!")
+except Exception as e:
+    print(f"Failed with error: {e}")
+
+# Test with command line style args (should work)
+print("\nTesting with command line args:")
+try:
+    call_command('my_command', '--shop-id=1')
+    print("Success!")
+except Exception as e:
+    print(f"Failed with error: {e}")
+
+# Test with both mutually exclusive args (should fail)
+print("\nTesting with both mutually exclusive args:")
+try:
+    call_command('my_command', shop_id=1, shop_name='test')
+    print("Failed: Should have raised an error")
+except Exception as e:
+    print(f"Success! Got expected error: {e}")
+
+# Test with no args from required group (should fail)
+print("\nTesting with no args from required group:")
+try:
+    call_command('my_command')
+    print("Failed: Should have raised an error")
+except Exception as e:
+    print(f"Success! Got expected error: {e}")
+
