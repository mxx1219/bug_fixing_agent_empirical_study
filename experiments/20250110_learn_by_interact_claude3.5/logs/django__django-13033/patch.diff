diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..0b9441b641
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,63 @@
+import os
+import django
+from django.db import models
+from django.db.models import F
+
+# Set up Django
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.test_sqlite')
+django.setup()
+
+# Define the models
+class OneModel(models.Model):
+    class Meta:
+        ordering = ("-id",)
+        app_label = 'reproduce_issue'
+
+    id = models.BigAutoField(primary_key=True)
+    root = models.ForeignKey("self", on_delete=models.CASCADE, null=True)
+    oneval = models.BigIntegerField(null=True)
+
+class TwoModel(models.Model):
+    class Meta:
+        app_label = 'reproduce_issue'
+
+    id = models.BigAutoField(primary_key=True)
+    record = models.ForeignKey(OneModel, on_delete=models.CASCADE)
+    twoval = models.BigIntegerField(null=True)
+
+# Create test data and demonstrate the issue
+if __name__ == '__main__':
+    # Create and run migrations
+    from django.core.management import execute_from_command_line
+    execute_from_command_line(['manage.py', 'makemigrations', 'reproduce_issue'])
+    execute_from_command_line(['manage.py', 'migrate'])
+
+    # Create test data
+    root = OneModel.objects.create(oneval=1)
+    child1 = OneModel.objects.create(root=root, oneval=2)
+    child2 = OneModel.objects.create(root=root, oneval=3)
+    
+    TwoModel.objects.create(record=root, twoval=100)
+    TwoModel.objects.create(record=child1, twoval=200)
+    TwoModel.objects.create(record=child2, twoval=300)
+
+    print("\nTest 1: order_by('record__root_id')")
+    qs = TwoModel.objects.filter(record__oneval__in=[1,2,3])
+    qs = qs.order_by("record__root_id")
+    print(qs.query)
+
+    print("\nTest 2: order_by('record__root__id')")
+    qs = TwoModel.objects.filter(record__oneval__in=[1,2,3])
+    qs = qs.order_by("record__root__id")
+    print(qs.query)
+
+    print("\nTest 3: Using annotation")
+    qs = TwoModel.objects.filter(record__oneval__in=[1,2,3])
+    qs = qs.annotate(root_id=F("record__root_id"))
+    qs = qs.order_by("root_id")
+    print(qs.query)
+
+    print("\nTest 4: order_by('-record__root_id')")
+    qs = TwoModel.objects.filter(record__oneval__in=[1,2,3])
+    qs = qs.order_by("-record__root_id")
+    print(qs.query)
