diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 64be087bf1..539c3cd6a8 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -269,7 +269,8 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):
                         "class": get_ul_class(self.radio_fields[db_field.name]),
                     }
                 )
-                kwargs["empty_label"] = _("None") if db_field.blank else None
+                kwargs['empty_label'] = (kwargs.get('empty_label') or _('None')) if db_field.blank else None
+
 
         if "queryset" not in kwargs:
             queryset = self.get_field_queryset(db, db_field, request)
@@ -2501,3 +2502,4 @@ class StackedInline(InlineModelAdmin):
 
 class TabularInline(InlineModelAdmin):
     template = "admin/edit_inline/tabular.html"
+
diff --git a/test_empty_label.py b/test_empty_label.py
new file mode 100644
index 0000000000..7c7440ae54
--- /dev/null
+++ b/test_empty_label.py
@@ -0,0 +1,54 @@
+import os
+import django
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.admin',
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+            'django.contrib.sessions',
+            'django.contrib.messages',
+            'testapp',
+        ],
+        SECRET_KEY='dummy-key-for-test'
+    )
+    django.setup()
+
+from django.contrib import admin
+from django.db import models
+from django.contrib.admin.sites import AdminSite
+
+class MyModel(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'testapp'
+    
+class RelatedModel(models.Model):
+    myfield = models.ForeignKey(MyModel, on_delete=models.CASCADE, blank=True, null=True)
+    
+    class Meta:
+        app_label = 'testapp'
+
+class MyModelAdmin(admin.ModelAdmin):
+    radio_fields = {'myfield': admin.VERTICAL}
+    
+    def formfield_for_foreignkey(self, db_field, *args, **kwargs):
+        if db_field.name == 'myfield':
+            kwargs['empty_label'] = "I WANT TO SET MY OWN EMPTY LABEL"
+        return super().formfield_for_foreignkey(db_field, *args, **kwargs)
+
+if __name__ == '__main__':
+    site = AdminSite()
+    admin_instance = MyModelAdmin(RelatedModel, site)
+    db_field = RelatedModel._meta.get_field('myfield')
+    formfield = admin_instance.formfield_for_foreignkey(db_field, None)
+    print(f"Empty label: {formfield.empty_label}")
diff --git a/testapp/apps.py b/testapp/apps.py
new file mode 100644
index 0000000000..612df8e765
--- /dev/null
+++ b/testapp/apps.py
@@ -0,0 +1,5 @@
+from django.apps import AppConfig
+
+class TestappConfig(AppConfig):
+    name = 'testapp'
+    default_auto_field = 'django.db.models.AutoField'
