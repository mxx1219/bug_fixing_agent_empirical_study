diff --git a/reproduce_lag.py b/reproduce_lag.py
new file mode 100644
index 0000000000..144db3e07d
--- /dev/null
+++ b/reproduce_lag.py
@@ -0,0 +1,61 @@
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:'
+            }
+        },
+        INSTALLED_APPS=[],
+        DEFAULT_AUTO_FIELD='django.db.models.AutoField',
+    )
+
+import django
+django.setup()
+
+from django.db import models, connection
+from django.db.models import F
+from django.db.models.functions import Lag
+from django.db.models import Window
+
+# Create test table directly using SQL
+with connection.cursor() as cursor:
+    cursor.execute("""
+        CREATE TABLE test_lag (
+            id INTEGER PRIMARY KEY AUTOINCREMENT,
+            modified DATE,
+            data FLOAT,
+            amount DECIMAL(7,4)
+        )
+    """)
+    cursor.execute("""
+        INSERT INTO test_lag (modified, data, amount) VALUES
+        ('2024-01-01', 1.0, 10.1234),
+        ('2024-01-01', 2.0, 20.5678),
+        ('2024-01-01', 3.0, 30.9012)
+    """)
+
+# Create a model
+class LagTest(models.Model):
+    modified = models.DateField()
+    data = models.FloatField()
+    amount = models.DecimalField(decimal_places=4, max_digits=7)
+
+    class Meta:
+        app_label = '__fake__'
+        managed = False
+        db_table = 'test_lag'
+
+# Test the query that caused the issue
+w = Window(expression=Lag('amount', 7), partition_by=[F('modified')], order_by=F('modified').asc())
+q = LagTest.objects.all().annotate(w=w)
+
+try:
+    print("Generated SQL:")
+    print(q.query)
+    print("\nExecuting query...")
+    list(q)
+except Exception as e:
+    print(f"\nError: {e}")
