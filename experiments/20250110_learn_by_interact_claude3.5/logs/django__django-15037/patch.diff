diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py
index f9b4bfb477..f6a66c4260 100644
--- a/django/core/management/commands/inspectdb.py
+++ b/django/core/management/commands/inspectdb.py
@@ -124,11 +124,16 @@ class Command(BaseCommand):
                             "self" if relations[column_name][1] == table_name
                             else table2model(relations[column_name][1])
                         )
+                        # Add to_field parameter if the foreign key references a non-pk field
+                        referenced_field = relations[column_name][0]
+                        if referenced_field != 'id':
+                            extra_params['to_field'] = "'%s'" % referenced_field
                         if rel_to in known_models:
                             field_type = '%s(%s' % (rel_type, rel_to)
                         else:
                             field_type = "%s('%s'" % (rel_type, rel_to)
                     else:
+
                         # Calling `get_field_type` to get the field type string and any
                         # additional parameters and notes.
                         field_type, field_params, field_notes = self.get_field_type(connection, table_name, row)
@@ -297,3 +302,4 @@ class Command(BaseCommand):
             tup = '(' + ', '.join(unique_together) + ',)'
             meta += ["        unique_together = %s" % tup]
         return meta
+
diff --git a/django/db/backends/postgresql/introspection.py b/django/db/backends/postgresql/introspection.py
index 4e35cb9e97..187a873337 100644
--- a/django/db/backends/postgresql/introspection.py
+++ b/django/db/backends/postgresql/introspection.py
@@ -139,6 +139,22 @@ class DatabaseIntrospection(BaseDatabaseIntrospection):
         """, [table_name])
         return cursor.fetchall()
 
+        cursor.execute("""
+            SELECT a1.attname, c2.relname, a2.attname
+            FROM pg_constraint con
+            LEFT JOIN pg_class c1 ON con.conrelid = c1.oid
+            LEFT JOIN pg_class c2 ON con.confrelid = c2.oid
+            LEFT JOIN pg_attribute a1 ON c1.oid = a1.attrelid AND a1.attnum = con.conkey[1]
+            LEFT JOIN pg_attribute a2 ON c2.oid = a2.attrelid AND a2.attnum = con.confkey[1]
+            WHERE
+                c1.relname = %s AND
+                con.contype = 'f' AND
+                c1.relnamespace = c2.relnamespace AND
+                pg_catalog.pg_table_is_visible(c1.oid)
+        """, [table_name])
+        return cursor.fetchall()
+
+
     def get_constraints(self, cursor, table_name):
         """
         Retrieve any constraints or keys (unique, pk, fk, check, index) across
@@ -232,3 +248,6 @@ class DatabaseIntrospection(BaseDatabaseIntrospection):
                     "options": options,
                 }
         return constraints
+
+
+
