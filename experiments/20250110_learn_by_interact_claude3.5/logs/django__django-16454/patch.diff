diff --git a/django/core/management/base.py b/django/core/management/base.py
index abc6f79a15..a22d3c86bb 100644
--- a/django/core/management/base.py
+++ b/django/core/management/base.py
@@ -71,6 +71,37 @@ class CommandParser(ArgumentParser):
         else:
             raise CommandError("Error: %s" % message)
 
+    def add_subparsers(self, **kwargs):
+        """
+        Custom add_subparsers that ensures our CommandParser settings are preserved
+        """
+        subparsers = super().add_subparsers(**kwargs)
+        original_add_parser = subparsers.add_parser
+
+        def add_parser_with_settings(name, **kwargs):
+            # Inherit formatter class and prog name from parent
+            kwargs.setdefault('formatter_class', self.formatter_class)
+            kwargs.setdefault('prog', '%s %s' % (self.prog, name))
+            
+            # Create parser with the same error handling settings
+            parser = CommandParser(
+                missing_args_message=self.missing_args_message,
+                called_from_command_line=self.called_from_command_line,
+                **kwargs
+            )
+            
+            # Register the parser in the subparsers
+            subparsers._name_parser_map[name] = parser
+            
+            # Add the parser to the choices to properly show help
+            if subparsers._choices_actions:
+                subparsers._choices_actions[0].choices[name] = parser
+            
+            return parser
+
+        subparsers.add_parser = add_parser_with_settings
+        return subparsers
+
 
 def handle_default_options(options):
     """
@@ -676,3 +707,4 @@ class LabelCommand(BaseCommand):
         raise NotImplementedError(
             "subclasses of LabelCommand must provide a handle_label() method"
         )
+
