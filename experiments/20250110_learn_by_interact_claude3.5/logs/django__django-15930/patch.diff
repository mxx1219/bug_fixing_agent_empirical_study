diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 822968ef56..5f2ce026de 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -1258,8 +1258,9 @@ class When(Expression):
                 "When() supports a Q object, a boolean expression, or lookups "
                 "as a condition."
             )
-        if isinstance(condition, Q) and not condition:
+        if isinstance(condition, Q) and not condition and not condition.negated:
             raise ValueError("An empty Q() can't be used as a When() condition.")
+
         super().__init__(output_field=None)
         self.condition = condition
         self.result = self._parse_expressions(then)[0]
@@ -1286,9 +1287,27 @@ class When(Expression):
         c = self.copy()
         c.is_summary = summarize
         if hasattr(c.condition, "resolve_expression"):
-            c.condition = c.condition.resolve_expression(
-                query, allow_joins, reuse, summarize, False
-            )
+            if isinstance(c.condition, Q) and not c.condition.children and c.condition.negated:
+                from django.db.models import Value
+                # Convert negated empty Q to SQL literal 1 for WHEN 1=1 THEN ...
+                c.condition = Value(1)
+            else:
+                c.condition = c.condition.resolve_expression(
+                    query, allow_joins, reuse, summarize, False
+                )
+
+
+
+
+
+
+
+
+
+
+
+
+
         c.result = c.result.resolve_expression(
             query, allow_joins, reuse, summarize, for_save
         )
@@ -1298,15 +1317,29 @@ class When(Expression):
         connection.ops.check_expression_support(self)
         template_params = extra_context
         sql_params = []
+
+        # Handle Value(1) condition from negated empty Q objects
+        if isinstance(self.condition, Value) and self.condition.value == 1:
+            template_params["condition"] = "1=1"  # Always true condition
+        else:
+            condition_sql, condition_params = compiler.compile(self.condition)
+            template_params["condition"] = condition_sql
+            sql_params.extend(condition_params)
+
+        sql_params = []
+
         condition_sql, condition_params = compiler.compile(self.condition)
-        template_params["condition"] = condition_sql
+        template_params["condition"] = condition_sql 
         sql_params.extend(condition_params)
+
         result_sql, result_params = compiler.compile(self.result)
         template_params["result"] = result_sql
         sql_params.extend(result_params)
         template = template or self.template
         return template % template_params, sql_params
 
+
+
     def get_group_by_cols(self, alias=None):
         # This is not a complete expression and cannot be used in GROUP BY.
         cols = []
@@ -1801,3 +1834,25 @@ class ValueRange(WindowFrame):
 
     def window_frame_start_end(self, connection, start, end):
         return connection.ops.window_frame_range_start_end(start, end)
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..44b130dd81
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,63 @@
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+import django
+from django.conf import settings
+from django.db import models, connection
+
+# Configure minimal settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=['django.contrib.contenttypes'],
+    )
+    django.setup()
+
+# Create a test model
+class User(models.Model):
+    class Meta:
+        app_label = 'reproduce'
+
+# Set up the database
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(User)
+
+# Create some test data
+User.objects.create()
+User.objects.create()
+
+# Reproduce the issue
+from django.db.models import Case, When, Value, BooleanField, Q
+
+# First try with a direct condition
+print("Test 1: Direct condition")
+query1 = User.objects.annotate(
+    _a=Case(
+        When(Value(1, output_field=BooleanField()), then=Value(True)),
+        default=Value(False),
+        output_field=BooleanField(),
+    )
+).order_by("-_a").values("pk")
+print("SQL:", query1.query)
+print("Executing...")
+list(query1)
+print("Success!\n")
+
+# Now try with our negated empty Q
+print("Test 2: Negated empty Q")
+query2 = User.objects.annotate(
+    _a=Case(
+        When(~Q(pk__in=[]), then=Value(True)),
+        default=Value(False),
+        output_field=BooleanField(),
+    )
+).order_by("-_a").values("pk")
+print("SQL:", query2.query)
+print("Executing...")
+list(query2)
+
