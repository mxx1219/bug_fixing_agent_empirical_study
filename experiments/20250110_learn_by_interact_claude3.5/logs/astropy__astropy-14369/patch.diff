diff --git a/astropy/io/ascii/cds.py b/astropy/io/ascii/cds.py
index 7a83fc39be..19226bdead 100644
--- a/astropy/io/ascii/cds.py
+++ b/astropy/io/ascii/cds.py
@@ -130,11 +130,17 @@ class CdsHeader(core.BaseHeader):
                 if unit == "---":
                     col.unit = None  # "---" is the marker for no unit in CDS/MRT table
                 else:
+                    # For CDS format, handle unit divisions with parentheses
+                    parts = unit.split('/')
+                    if len(parts) > 1:
+                        denom = '.'.join(parts[1:])
+                        unit = f"{parts[0]}/({denom})"
                     col.unit = Unit(unit, format="cds", parse_strict="warn")
                 col.description = (match.group("descr") or "").strip()
                 col.raw_type = match.group("format")
                 col.type = self.get_col_type(col)
 
+
                 match = re.match(
                     # Matches limits specifier (eg []) that may or may not be
                     # present
@@ -355,3 +361,7 @@ class Cds(core.BaseReader):
                     return table
         else:
             return super().read(table)
+
+
+
+
diff --git "a/astropy/io/ascii/cds.py\"" "b/astropy/io/ascii/cds.py\""
new file mode 100644
index 0000000000..e5470c359a
--- /dev/null
+++ "b/astropy/io/ascii/cds.py\""
@@ -0,0 +1,12 @@
+if unit == "---":
+                    col.unit = None  # "---" is the marker for no unit in CDS/MRT table
+                else:
+                    # For CDS format, handle unit divisions with parentheses
+                    parts = unit.split('/')
+                    if len(parts) > 1:
+                        denom = '.'.join(parts[1:])
+                        unit = f"{parts[0]}/({denom})"
+                    col.unit = Unit(unit, format="cds", parse_strict="warn")
+                col.description = (match.group("descr") or "").strip()
+                col.raw_type = match.group("format")
+                col.type = self.get_col_type(col)
diff --git a/astropy/units/format/cds.py b/astropy/units/format/cds.py
index 307e987ed6..d214cfcbd7 100644
--- a/astropy/units/format/cds.py
+++ b/astropy/units/format/cds.py
@@ -165,31 +165,41 @@ class CDS(Base):
         def p_combined_units(p):
             """
             combined_units : product_of_units
-                           | division_of_units
+                         | division_of_units
+                         | unit_expression
             """
             p[0] = p[1]
 
         def p_product_of_units(p):
             """
             product_of_units : unit_expression PRODUCT combined_units
-                             | unit_expression
+                           | unit_expression
             """
             if len(p) == 4:
                 p[0] = p[1] * p[3]
             else:
                 p[0] = p[1]
-
         def p_division_of_units(p):
             """
             division_of_units : DIVISION unit_expression
-                              | unit_expression DIVISION combined_units
+                             | unit_expression DIVISION unit_expression
+                             | division_of_units DIVISION unit_expression
             """
             if len(p) == 3:
+                # Case: /unit
                 p[0] = p[2] ** -1
             else:
+                # All divisions should be processed strictly left-to-right
+                # For example:
+                # J/m/s/kpc2 -> (((J/m)/s)/kpc2)
+                # This matches CDS standard where units are processed left-to-right
                 p[0] = p[1] / p[3]
 
+
+
+
         def p_unit_expression(p):
+
             """
             unit_expression : unit_with_power
                             | OPEN_PAREN combined_units CLOSE_PAREN
@@ -318,9 +328,14 @@ class CDS(Base):
         for base, power in units:
             if power == 1:
                 out.append(cls._get_unit_name(base))
-            else:
+            elif power > 0:
                 out.append(f"{cls._get_unit_name(base)}{int(power)}")
-        return ".".join(out)
+            else:
+                # For negative powers, we use division
+                out.append(f"/{cls._get_unit_name(base)}")
+                if power < -1:
+                    out[-1] += str(abs(int(power)))
+        return "".join(out)
 
     @classmethod
     def to_string(cls, unit):
@@ -348,11 +363,18 @@ class CDS(Base):
 
             pairs = list(zip(unit.bases, unit.powers))
             if len(pairs) > 0:
-                pairs.sort(key=operator.itemgetter(1), reverse=True)
-
+                # Don't sort by power - preserve order for divisions
                 s += cls._format_unit_list(pairs)
 
         elif isinstance(unit, core.NamedUnit):
             s = cls._get_unit_name(unit)
 
         return s
+
+
+
+
+
+
+
+
diff --git a/test.mrt b/test.mrt
new file mode 100644
index 0000000000..2791ea247c
--- /dev/null
+++ b/test.mrt
@@ -0,0 +1,17 @@
+Title:
+Authors:
+Table:
+================================================================================
+Byte-by-byte Description of file: tab.txt
+--------------------------------------------------------------------------------
+   Bytes Format Units                   Label      Explanations
+--------------------------------------------------------------------------------
+   1- 10 A10    ---                    ID         ID
+  12- 21 F10.5  10+3J/m/s/kpc2         SBCONT     Cont surface brightness
+  23- 32 F10.5  10-7J/s/kpc2           SBLINE     Line surface brightness
+--------------------------------------------------------------------------------
+ID0001     70.99200   38.51040      
+ID0001     13.05120   28.19240      
+ID0001     3.83610    10.98370      
+ID0001     1.99101    6.78822       
+ID0001     1.31142    5.01932
