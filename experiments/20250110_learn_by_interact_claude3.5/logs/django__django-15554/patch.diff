diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py
index fde686b2cd..d4d0c6635d 100644
--- a/django/db/models/query_utils.py
+++ b/django/db/models/query_utils.py
@@ -310,6 +310,8 @@ class FilteredRelation:
             raise ValueError("condition argument must be a Q() instance.")
         self.condition = condition
         self.path = []
+        # Add a unique identifier to ensure each filtered relation gets its own join
+        self._unique_id = id(self)
 
     def __eq__(self, other):
         if not isinstance(other, self.__class__):
@@ -318,12 +320,15 @@ class FilteredRelation:
             self.relation_name == other.relation_name
             and self.alias == other.alias
             and self.condition == other.condition
+            and self._unique_id == other._unique_id
         )
 
     def clone(self):
         clone = FilteredRelation(self.relation_name, condition=self.condition)
         clone.alias = self.alias
         clone.path = self.path[:]
+        # Create new unique ID for the clone
+        clone._unique_id = id(clone)
         return clone
 
     def resolve_expression(self, *args, **kwargs):
@@ -338,3 +343,5 @@ class FilteredRelation:
         query = compiler.query
         where = query.build_filtered_relation_q(self.condition, reuse=set(self.path))
         return compiler.compile(where)
+
+
diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 54f3258eac..1dcbfa623a 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1570,7 +1570,12 @@ class Query(BaseExpression):
         return target_clause
 
     def add_filtered_relation(self, filtered_relation, alias):
+        """Add a FilteredRelation object to the current filter."""
+        # Create a unique alias for this filtered relation to ensure separate joins
+        filtered_relation = filtered_relation.clone()
         filtered_relation.alias = alias
+        filtered_relation.path = []  # Reset path for new join
+        
         lookups = dict(get_children_from_q(filtered_relation.condition))
         relation_lookup_parts, relation_field_parts, _ = self.solve_lookup_type(
             filtered_relation.relation_name
@@ -1595,10 +1600,11 @@ class Query(BaseExpression):
                 else:
                     raise ValueError(
                         "FilteredRelation's condition doesn't support nested "
-                        "relations deeper than the relation_name (got %r for "
-                        "%r)." % (lookup, filtered_relation.relation_name)
+                        "relations deeper than the %r (got %r)."
+                        % (filtered_relation.relation_name, lookup)
                     )
-        self._filtered_relations[filtered_relation.alias] = filtered_relation
+        # Store the filtered relation with the original alias
+        self._filtered_relations[alias] = filtered_relation
 
     def names_to_path(self, names, opts, allow_many=True, fail_on_missing=False):
         """
@@ -1630,10 +1636,21 @@ class Query(BaseExpression):
             except FieldDoesNotExist:
                 if name in self.annotation_select:
                     field = self.annotation_select[name].output_field
+                # Handle filtered relations at the start of the names
                 elif name in self._filtered_relations and pos == 0:
-                    filtered_relation = self._filtered_relations[name]
+                    filtered_relation = self._filtered_relations[name].clone()
+                    field = opts.get_field(filtered_relation.relation_name)
+                    # Create a unique join alias for each filtered relation
+                    filtered_relation.alias = f"{name}_{id(filtered_relation)}"
+                    filtered_relation.path = []  # Reset path for new join
+                    return [], field, (field,), names[pos + 1:]
+                elif LOOKUP_SEP in name:
+
                     if LOOKUP_SEP in filtered_relation.relation_name:
+
                         parts = filtered_relation.relation_name.split(LOOKUP_SEP)
+
+
                         filtered_relation_path, field, _, _ = self.names_to_path(
                             parts,
                             opts,
@@ -1800,10 +1817,13 @@ class Query(BaseExpression):
         for join in path:
             if join.filtered_relation:
                 filtered_relation = join.filtered_relation.clone()
+                # Create a unique alias based on the original alias and filtered relation's id
+                filtered_relation.alias = f"{filtered_relation.alias}_{id(filtered_relation)}"
                 table_alias = filtered_relation.alias
             else:
                 filtered_relation = None
                 table_alias = None
+
             opts = join.to_opts
             if join.direct:
                 nullable = self.is_nullable(join.join_field)
@@ -2662,3 +2682,20 @@ class JoinPromoter:
         query.promote_joins(to_promote)
         query.demote_joins(to_demote)
         return to_demote
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
diff --git "a/django/db/models/sql/query.py\"" "b/django/db/models/sql/query.py\""
new file mode 100644
index 0000000000..1257d4ceb8
--- /dev/null
+++ "b/django/db/models/sql/query.py\""
@@ -0,0 +1,6 @@
+if hasattr(field, "path_infos"):
+                if filtered_relation:
+                    # Create unique path info for each filtered relation 
+                    pathinfos = field.get_path_info(filtered_relation)
+                else:
+                    pathinfos = field.path_infos
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..123f445674
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,90 @@
+import os
+import django
+from django.conf import settings
+from django.db import models
+from django.db.models import Q, F, Case, When, FilteredRelation, Value
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    DEFAULT_AUTO_FIELD='django.db.models.AutoField',
+    USE_TZ=False,
+    INSTALLED_APPS=['django.contrib.contenttypes']
+)
+
+django.setup()
+
+# Define the models
+class Zone(models.Model):
+    name = models.CharField(max_length=100)
+    class Meta:
+        app_label = 'contenttypes'
+
+class Product(models.Model):
+    name = models.CharField(max_length=100)
+    zone = models.ForeignKey(Zone, on_delete=models.CASCADE, null=True)
+    class Meta:
+        app_label = 'contenttypes'
+
+class PriceRule(models.Model):
+    product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name='price_rules')
+    zone = models.ForeignKey(Zone, on_delete=models.CASCADE, null=True)
+    is_all = models.BooleanField(default=False)
+    price = models.DecimalField(max_digits=10, decimal_places=2)
+    class Meta:
+        app_label = 'contenttypes'
+
+def run_test():
+    # Create tables
+    from django.db import connection
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(Zone)
+        schema_editor.create_model(Product)
+        schema_editor.create_model(PriceRule)
+
+    # Create test data
+    zone = Zone.objects.create(name="Zone A")
+    product = Product.objects.create(name="Test Product", zone=zone)
+    PriceRule.objects.create(product=product, is_all=True, price=100)
+    PriceRule.objects.create(product=product, zone=zone, price=90)
+
+    # Test the query
+    qs = Product.objects.annotate(
+        price_rule_zone=FilteredRelation(
+            'price_rules',
+            condition=Q(price_rules__zone=F('zone'))
+        ),
+        price_rule_all=FilteredRelation(
+            'price_rules',
+            condition=Q(price_rules__is_all=True)
+        )
+    ).annotate(
+        price_zone=F('price_rule_zone__price'),
+        price_all=F('price_rule_all__price'),
+    ).annotate(
+        price_final=Case(
+            When(price_zone__isnull=False, then=F('price_zone')),
+            default=F('price_all')
+        )
+    )
+    
+    # Print the query and results
+    print("\nSQL Query:")
+    print(str(qs.query))
+    print("\nResults:")
+    results = list(qs)  # Force query execution
+    for p in results:
+        print(f"Product: {p.name}")
+        print(f"- Zone Price: {p.price_zone}")
+        print(f"- All Price: {p.price_all}")
+        print(f"- Final Price: {p.price_final}")
+
+if __name__ == '__main__':
+    run_test()
+
