diff --git a/django/forms/models.py b/django/forms/models.py
index d157c291ef..b397d6836b 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -83,10 +83,11 @@ def model_to_dict(instance, fields=None, exclude=None):
     for f in chain(opts.concrete_fields, opts.private_fields, opts.many_to_many):
         if not getattr(f, 'editable', False):
             continue
-        if fields and f.name not in fields:
+        if fields is not None and f.name not in fields:
             continue
         if exclude and f.name in exclude:
             continue
+
         data[f.name] = f.value_from_object(instance)
     return data
 
@@ -1356,3 +1357,4 @@ def modelform_defines_fields(form_class):
         form_class._meta.fields is not None or
         form_class._meta.exclude is not None
     )
+
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..23d6454218
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,33 @@
+# Mock classes to test model_to_dict
+class MockOpts:
+    def __init__(self):
+        self.concrete_fields = [MockField('name'), MockField('age')]
+        self.private_fields = []
+        self.many_to_many = []
+
+class MockField:
+    def __init__(self, name):
+        self.name = name
+        self.editable = True
+
+    def value_from_object(self, instance):
+        return getattr(instance, self.name)
+
+class MockInstance:
+    def __init__(self):
+        self._meta = MockOpts()
+        self.name = 'test'
+        self.age = 25
+
+# Import and test model_to_dict
+from django.forms.models import model_to_dict
+
+instance = MockInstance()
+
+# Test with fields=[]
+result1 = model_to_dict(instance, fields=[])
+print(f"Result with fields=[]: {result1}")  # Should be empty dict but returns all fields
+
+# Test with fields=None (should return all fields)
+result2 = model_to_dict(instance, fields=None)
+print(f"Result with fields=None: {result2}")  # Should return all fields
