diff --git a/django/forms/formsets.py b/django/forms/formsets.py
index a89c35599f..b81846138d 100644
--- a/django/forms/formsets.py
+++ b/django/forms/formsets.py
@@ -333,9 +333,10 @@ class BaseFormSet:
         self._non_form_errors.
         """
         self._errors = []
-        self._non_form_errors = self.error_class()
+        self._non_form_errors = self.error_class(error_class='nonform')
         empty_forms_count = 0
 
+
         if not self.is_bound:  # Stop further processing.
             return
 
@@ -380,7 +381,8 @@ class BaseFormSet:
             # Give self.clean() a chance to do cross-form validation.
             self.clean()
         except ValidationError as e:
-            self._non_form_errors = self.error_class(e.error_list)
+            self._non_form_errors = self.error_class(e.error_list, error_class='nonform')
+
 
     def clean(self):
         """
@@ -494,3 +496,5 @@ def all_valid(formsets):
     """Validate every formset and return True if all are valid."""
     # List comprehension ensures is_valid() is called for all formsets.
     return all([formset.is_valid() for formset in formsets])
+
+
diff --git a/test_formset.py b/test_formset.py
new file mode 100644
index 0000000000..41aa75c918
--- /dev/null
+++ b/test_formset.py
@@ -0,0 +1,18 @@
+from django.conf import settings
+settings.configure(USE_I18N=False)
+
+from django import forms
+from django.forms import formset_factory
+
+class SimpleForm(forms.Form):
+    field = forms.CharField()
+
+class CustomFormSet(forms.BaseFormSet):
+    def clean(self):
+        raise forms.ValidationError("Test formset error")
+
+FormSet = formset_factory(SimpleForm, formset=CustomFormSet)
+formset = FormSet(data={'form-TOTAL_FORMS': '1', 'form-INITIAL_FORMS': '0'})
+print("Is valid:", formset.is_valid())
+print("Non-form errors:", formset.non_form_errors())
+print("Non-form errors HTML:", formset.non_form_errors().as_ul())
