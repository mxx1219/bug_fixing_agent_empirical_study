diff --git a/django/db/models/base.py b/django/db/models/base.py
index 844c01e95e..27ee15e121 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -802,30 +802,43 @@ class Model(metaclass=ModelBase):
         """Save all the parents of cls using values from self."""
         meta = cls._meta
         inserted = False
+        
+        # If PK is None or _state.adding is True, we want to force insert new records
+        force_insert = self.pk is None or getattr(self._state, 'adding', False)
+        
         for parent, field in meta.parents.items():
-            # Make sure the link fields are synced between parent and self.
+            # Clear parent links if forcing insert
+            if force_insert and field:
+                # Clear both parent and child PKs
+                setattr(self, parent._meta.pk.attname, None)
+                setattr(self, meta.pk.attname, None)
+                # Clear any cached relationships
+                if field.is_cached(self):
+                    field.delete_cached_value(self)
+                # Remove existing link
+                setattr(self, field.attname, None)
+                    
+            # Make sure the link fields are synced between parent and self
             if (field and getattr(self, parent._meta.pk.attname) is None and
                     getattr(self, field.attname) is not None):
                 setattr(self, parent._meta.pk.attname, getattr(self, field.attname))
+                
             parent_inserted = self._save_parents(cls=parent, using=using, update_fields=update_fields)
             updated = self._save_table(
                 cls=parent, using=using, update_fields=update_fields,
-                force_insert=parent_inserted,
+                force_insert=force_insert,  # Always force insert if PK is None
             )
             if not updated:
                 inserted = True
-            # Set the parent's PK value to self.
+
             if field:
+                # Link the child to the new parent
                 setattr(self, field.attname, self._get_pk_val(parent._meta))
-                # Since we didn't have an instance of the parent handy set
-                # attname directly, bypassing the descriptor. Invalidate
-                # the related object cache, in case it's been accidentally
-                # populated. A fresh instance will be re-built from the
-                # database if necessary.
                 if field.is_cached(self):
                     field.delete_cached_value(self)
         return inserted
 
+
     def _save_table(self, raw=False, cls=None, force_insert=False,
                     force_update=False, using=None, update_fields=None):
         """
@@ -847,17 +860,21 @@ class Model(metaclass=ModelBase):
         if not pk_set and (force_update or update_fields):
             raise ValueError("Cannot force an update in save() with no primary key.")
         updated = False
-        # Skip an UPDATE when adding an instance and primary key has a default.
+        # Skip an UPDATE when adding an instance and primary key has a default,
+        # or when primary key was explicitly set to None.
         if (
             not raw and
             not force_insert and
-            self._state.adding and
+            (self._state.adding or pk_val is None) and
             self._meta.pk.default and
             self._meta.pk.default is not NOT_PROVIDED
         ):
             force_insert = True
+
         # If possible, try an UPDATE. If that doesn't update anything, do an INSERT.
-        if pk_set and not force_insert:
+        # However, if PK was explicitly set to None, always do INSERT
+        if pk_set and not force_insert and pk_val is not None:
+
             base_qs = cls._base_manager.using(using)
             values = [(f, None, (getattr(self, f.attname) if raw else f.pre_save(self, False)))
                       for f in non_pks]
@@ -1910,3 +1927,8 @@ def model_unpickle(model_id):
 
 
 model_unpickle.__safe_for_unpickle__ = True
+
+
+
+
+
