diff --git a/django/contrib/contenttypes/fields.py b/django/contrib/contenttypes/fields.py
index ed98ecb48c..f3e3f9af3f 100644
--- a/django/contrib/contenttypes/fields.py
+++ b/django/contrib/contenttypes/fields.py
@@ -2,7 +2,8 @@ from collections import defaultdict
 
 from django.contrib.contenttypes.models import ContentType
 from django.core import checks
-from django.core.exceptions import FieldDoesNotExist, ObjectDoesNotExist
+from django.core.exceptions import FieldDoesNotExist, ObjectDoesNotExist, ValidationError
+
 from django.db import DEFAULT_DB_ALIAS, models, router, transaction
 from django.db.models import DO_NOTHING
 from django.db.models.base import ModelBase, make_foreign_order_accessors
@@ -191,7 +192,16 @@ class GenericForeignKey(FieldCacheMixin):
         for ct_id, fkeys in fk_dict.items():
             instance = instance_dict[ct_id]
             ct = self.get_content_type(id=ct_id, using=instance._state.db)
-            ret_val.extend(ct.get_all_objects_for_this_type(pk__in=fkeys))
+            model = ct.model_class()
+            # Try to convert each key to the correct type
+            valid_fkeys = set()
+            for fk in fkeys:
+                try:
+                    valid_fkeys.add(model._meta.pk.to_python(fk))
+                except (ValidationError, ValueError):
+                    continue
+            if valid_fkeys:
+                ret_val.extend(ct.get_all_objects_for_this_type(pk__in=valid_fkeys))
 
         # For doing the join in Python, we have to match both the FK val and the
         # content type, so we use a callable that returns a (fk, class) pair.
@@ -202,11 +212,25 @@ class GenericForeignKey(FieldCacheMixin):
             else:
                 model = self.get_content_type(id=ct_id,
                                               using=obj._state.db).model_class()
-                return (model._meta.pk.get_prep_value(getattr(obj, self.fk_field)),
-                        model)
-
+                # Convert the fk value to Python type before preparing it
+                try:
+                    fk_val = model._meta.pk.to_python(getattr(obj, self.fk_field))
+                    return (model._meta.pk.get_prep_value(fk_val), model)
+                except (ValidationError, ValueError):
+                    # If the value can't be converted to the correct type,
+                    # treat it as a non-match
+                    return None
+
+        return (ret_val,
+            lambda obj: (obj.pk, obj.__class__),
+            gfk_key,
+            True,
+            self.name,
+            True,
+        )
         return (
             ret_val,
+
             lambda obj: (obj.pk, obj.__class__),
             gfk_key,
             True,
@@ -214,7 +238,15 @@ class GenericForeignKey(FieldCacheMixin):
             True,
         )
 
+
+
+
+
+
+
+
     def __get__(self, instance, cls=None):
+
         if instance is None:
             return self
 
@@ -686,3 +718,21 @@ def create_generic_related_manager(superclass, rel):
         update_or_create.alters_data = True
 
     return GenericRelatedObjectManager
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
diff --git "a/django/contrib/contenttypes/fields.py\"" "b/django/contrib/contenttypes/fields.py\""
new file mode 100644
index 0000000000..4031b72f93
--- /dev/null
+++ "b/django/contrib/contenttypes/fields.py\""
@@ -0,0 +1,11 @@
+if ct_id is None:
+                return None
+            else:
+                model = self.get_content_type(id=ct_id,
+                                              using=obj._state.db).model_class()
+                # Convert the fk value to Python type before preparing it
+                try:
+                    fk_val = model._meta.pk.to_python(getattr(obj, self.fk_field))
+                    return (model._meta.pk.get_prep_value(fk_val), model)
+                except (ValidationError, ValueError):
+                    return None
diff --git a/reproduce_gfk_uuid.py b/reproduce_gfk_uuid.py
new file mode 100644
index 0000000000..d01e438c6a
--- /dev/null
+++ b/reproduce_gfk_uuid.py
@@ -0,0 +1,73 @@
+import os
+import django
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',  # needed for contenttypes migrations
+        ],
+    )
+    django.setup()
+
+import uuid
+from django.db import models, connection
+from django.contrib.contenttypes.fields import GenericForeignKey
+from django.contrib.contenttypes.models import ContentType
+from django.core.management import call_command
+
+class Foo(models.Model):
+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
+    name = models.CharField(max_length=100)
+    class Meta:
+        app_label = 'contenttypes'
+
+class Bar(models.Model):
+    foo_content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE, null=True)
+    foo_object_id = models.CharField(max_length=255, null=True)
+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')
+    name = models.CharField(max_length=100)
+    class Meta:
+        app_label = 'contenttypes'
+
+# Create the tables manually
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(ContentType)
+    schema_editor.create_model(Foo)
+    schema_editor.create_model(Bar)
+
+# Test 1: Normal case with valid UUID
+foo = Foo.objects.create(name='test foo')
+print(f"\nTest 1 - Created Foo with ID: {foo.id}")
+bar = Bar.objects.create(
+    foo_content_type=ContentType.objects.get_for_model(Foo),
+    foo_object_id=str(foo.id),
+    name='test bar'
+)
+result = list(Bar.objects.filter(id=bar.id).prefetch_related('foo'))
+print(f"Bar object's foo: {result[0].foo}")
+print(f"Bar object's foo_object_id: {result[0].foo_object_id}")
+
+# Test 2: NULL case
+bar_none = Bar.objects.create(name='test bar none')
+print(f"\nTest 2 - Testing with NULL values:")
+result = list(Bar.objects.filter(id=bar_none.id).prefetch_related('foo'))
+print(f"Bar object with None FK foo: {result[0].foo}")
+
+# Test 3: Invalid UUID case
+bar_invalid = Bar.objects.create(
+    foo_content_type=ContentType.objects.get_for_model(Foo),
+    foo_object_id='invalid-uuid',
+    name='test bar invalid'
+)
+print(f"\nTest 3 - Testing with invalid UUID:")
+result = list(Bar.objects.filter(id=bar_invalid.id).prefetch_related('foo'))
+print(f"Bar object with invalid UUID foo: {result[0].foo}")
+
