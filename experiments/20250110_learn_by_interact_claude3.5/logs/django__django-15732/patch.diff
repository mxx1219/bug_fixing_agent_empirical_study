diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..ddc9eb1646
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,71 @@
+from django.db import models, migrations
+from django.db.backends.base.schema import BaseDatabaseSchemaEditor
+from django.db.migrations.state import ProjectState
+from django.db.backends.postgresql.base import DatabaseWrapper
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.postgresql',
+                'NAME': 'test_db',
+                'USER': 'django',
+                'PASSWORD': 'django',
+                'HOST': 'localhost',
+                'PORT': '5432',
+            }
+        },
+        INSTALLED_APPS=[],
+        DEFAULT_AUTO_FIELD='django.db.models.AutoField',
+    )
+
+# Create initial model state with unique_together on primary key
+class TestModel(models.Model):
+    id = models.AutoField(primary_key=True)
+
+    class Meta:
+        unique_together = (('id',),)
+        app_label = 'testapp'
+
+# Create operations
+create_model = migrations.CreateModel(
+    name='TestModel',
+    fields=[
+        ('id', models.AutoField(primary_key=True)),
+    ],
+    options={
+        'unique_together': {('id',)},
+    },
+)
+
+alter_unique = migrations.AlterUniqueTogether(
+    name='TestModel',
+    unique_together=set(),  # Remove unique_together
+)
+
+# Run the migration
+try:
+    state = ProjectState()
+    create_model.state_forwards('testapp', state)
+
+    connection = DatabaseWrapper({
+        'NAME': 'test_db',
+        'USER': 'django',
+        'PASSWORD': 'django',
+        'HOST': 'localhost',
+        'PORT': '5432',
+    })
+
+    with connection.schema_editor() as schema_editor:
+        create_model.database_forwards('testapp', schema_editor, ProjectState(), state)
+        try:
+            alter_unique.database_forwards('testapp', schema_editor, state, ProjectState())
+            print("Success: Unique together constraint dropped!")
+        except Exception as e:
+            print(f"Error dropping unique_together: {e}")
+        finally:
+            create_model.database_backwards('testapp', schema_editor, state, ProjectState())
+
+except Exception as e:
+    print(f"Error: {e}")
