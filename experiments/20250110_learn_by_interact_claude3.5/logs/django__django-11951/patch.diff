diff --git a/django/db/models/query.py b/django/db/models/query.py
index 794e0faae7..fe789aac18 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -1209,7 +1209,9 @@ class QuerySet:
         if ignore_conflicts and not connections[self.db].features.supports_ignore_conflicts:
             raise NotSupportedError('This database backend does not support ignoring conflicts.')
         ops = connections[self.db].ops
-        batch_size = (batch_size or max(ops.bulk_batch_size(fields, objs), 1))
+        max_batch_size = max(ops.bulk_batch_size(fields, objs), 1)
+        batch_size = min(batch_size, max_batch_size) if batch_size else max_batch_size
+
         inserted_rows = []
         bulk_return = connections[self.db].features.can_return_rows_from_bulk_insert
         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
@@ -1920,3 +1922,4 @@ def get_related_populators(klass_info, select, db):
         rel_cls = RelatedPopulator(rel_klass_info, select, db)
         iterators.append(rel_cls)
     return iterators
+
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..631c82cad4
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,36 @@
+from django.db import models
+from django.conf import settings
+
+# Configure Django settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=['django.contrib.contenttypes']
+)
+
+import django
+django.setup()
+
+# Create test model
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'reproduce'
+
+# Create the tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(TestModel)
+
+# Create objects
+objects = [TestModel(name=f'test{i}') for i in range(1000)]
+
+# Test bulk_create with different batch sizes
+print("Testing bulk_create with batch_size=2000:")
+TestModel.objects.bulk_create(objects, batch_size=2000)
+print("Objects created:", TestModel.objects.count())
