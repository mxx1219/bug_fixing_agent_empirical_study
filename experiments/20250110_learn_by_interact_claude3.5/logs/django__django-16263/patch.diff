diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 9735ce10c8..3218164a65 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -550,9 +550,18 @@ class Query(BaseExpression):
         Perform a COUNT() query using the current filter constraints.
         """
         obj = self.clone()
+        
+        # Strip annotations that aren't used in filters or ordering
+        if obj.annotations and not obj.has_filters() and not obj.order_by:
+            obj.annotations = {}
+            obj.annotation_select_mask = None
+            obj._annotation_select_cache = None
+
         obj.add_annotation(Count("*"), alias="__count", is_summary=True)
         return obj.get_aggregation(using, ["__count"])["__count"]
 
+        return obj.get_aggregation(using, ["__count"])["__count"]
+
     def has_filters(self):
         return self.where
 
@@ -563,6 +572,11 @@ class Query(BaseExpression):
                 q.add_fields(
                     (f.attname for f in self.model._meta.concrete_fields), False
                 )
+
+
+
+
+
                 # Disable GROUP BY aliases to avoid orphaning references to the
                 # SELECT clause which is about to be cleared.
                 q.set_group_by(allow_aliases=False)
@@ -2669,3 +2683,16 @@ class JoinPromoter:
         query.promote_joins(to_promote)
         query.demote_joins(to_demote)
         return to_demote
+
+
+
+
+
+
+
+
+
+
+
+
+
diff --git "a/django/db/models/sql/query.py\"" "b/django/db/models/sql/query.py\""
new file mode 100644
index 0000000000..37592a6838
--- /dev/null
+++ "b/django/db/models/sql/query.py\""
@@ -0,0 +1,15 @@
+def get_count(self, using):
+        """
+        Perform a COUNT() query using the current filter constraints.
+        """
+        obj = self.clone()
+        
+        # Strip annotations that aren't used in filters or ordering
+        if obj.annotations and not obj.has_filters() and not obj.order_by:
+            obj.annotations = {}
+            obj.annotation_select_mask = None
+            obj._annotation_select_cache = None
+        
+        obj.add_annotation(Count("*"), alias="__count", is_summary=True)
+        return obj.get_aggregation(using, ["__count"])["__count"]
+
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..e79b6f4782
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,96 @@
+from django.conf import settings
+from django.db import models, connection
+from django.db.models import Count
+import django
+import os
+
+# Configure Django settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+    DEBUG=True,
+)
+django.setup()
+
+# Define models
+class Chapter(models.Model):
+    title = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'testapp'
+
+class Book(models.Model):
+    title = models.CharField(max_length=100)
+    chapters = models.ManyToManyField(Chapter)
+    
+    class Meta:
+        app_label = 'testapp'
+
+# Create tables using migrations
+from django.core.management import call_command
+from django.db.migrations.state import ProjectState
+from django.db.migrations.loader import MigrationLoader
+from django.db.migrations import Migration
+from django.db.migrations.operations.fields import AddField
+from django.db.migrations.operations.models import CreateModel
+
+# Create migrations for our models
+loader = MigrationLoader(None, ignore_no_migrations=True)
+project_state = ProjectState()
+
+# Create migrations
+migration = Migration('initial', 'testapp')
+migration.operations = [
+    CreateModel(
+        'Chapter',
+        [('id', models.AutoField(primary_key=True)),
+         ('title', models.CharField(max_length=100))],
+        options={'app_label': 'testapp'},
+    ),
+    CreateModel(
+        'Book',
+        [('id', models.AutoField(primary_key=True)),
+         ('title', models.CharField(max_length=100))],
+        options={'app_label': 'testapp'},
+    ),
+    AddField(
+        model_name='Book',
+        name='chapters',
+        field=models.ManyToManyField(to='testapp.Chapter'),
+    ),
+]
+
+# Apply migrations
+with connection.schema_editor() as schema_editor:
+    project_state = migration.apply(project_state, schema_editor)
+
+# Create test data
+chapter1 = Chapter.objects.create(title='Chapter 1')
+chapter2 = Chapter.objects.create(title='Chapter 2')
+book = Book.objects.create(title='Test Book')
+book.chapters.add(chapter1, chapter2)
+
+# Enable query logging and clear previous queries
+connection.queries_log.clear()
+
+# Execute query with unused annotation
+print("\nExecuting: Book.objects.annotate(chapter_count=Count('chapters')).count()")
+qs = Book.objects.annotate(chapter_count=Count('chapters')).count()
+print("Query with unused annotation:")
+print(connection.queries[-1]['sql'])
+
+# Execute query without annotation
+connection.queries_log.clear()
+print("\nExecuting: Book.objects.count()")
+qs = Book.objects.count()
+print("Query without annotation:")
+print(connection.queries[-1]['sql'])
+
