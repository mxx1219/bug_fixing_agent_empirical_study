diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 28374272f4..05221a2b39 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -516,17 +516,30 @@ class Field(RegisterLookupMixin):
     def __eq__(self, other):
         # Needed for @total_ordering
         if isinstance(other, Field):
-            return self.creation_counter == other.creation_counter
+            if not hasattr(self, 'model') or not hasattr(other, 'model'):
+                return self.creation_counter == other.creation_counter
+            return (
+                self.creation_counter == other.creation_counter and
+                self.model == other.model
+            )
         return NotImplemented
 
     def __lt__(self, other):
         # This is needed because bisect does not take a comparison function.
         if isinstance(other, Field):
-            return self.creation_counter < other.creation_counter
+            # Order by creation_counter first for backwards compatibility
+            if self.creation_counter != other.creation_counter:
+                return self.creation_counter < other.creation_counter
+            # If creation_counter is equal, order by model
+            if hasattr(self, 'model') and hasattr(other, 'model'):
+                return str(self.model) < str(other.model)
+            return False
         return NotImplemented
 
     def __hash__(self):
-        return hash(self.creation_counter)
+        model_hash = hash(self.model) if hasattr(self, 'model') else 0
+        return hash((self.creation_counter, model_hash))
+
 
     def __deepcopy__(self, memodict):
         # We don't have to deepcopy very much here, since most things are not
@@ -2454,3 +2467,4 @@ class SmallAutoField(AutoFieldMixin, SmallIntegerField):
 
     def rel_db_type(self, connection):
         return SmallIntegerField().db_type(connection=connection)
+
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..4e04e3d0a7
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,37 @@
+from django.conf import settings
+
+# Configure Django settings first
+settings.configure(
+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3'}},
+    INSTALLED_APPS=['django.contrib.contenttypes'],
+    USE_TZ=False
+)
+
+import django
+django.setup()
+
+from django.db import models
+
+class A(models.Model):
+    class Meta:
+        abstract = True
+        app_label = 'testapp'
+    myfield = models.IntegerField()
+
+class B(A):
+    class Meta:
+        app_label = 'testapp'
+    pass
+
+class C(A):
+    class Meta:
+        app_label = 'testapp'
+    pass
+
+# Demonstrate the issue
+field_b = B._meta.get_field('myfield')
+field_c = C._meta.get_field('myfield')
+
+print("Fields from different models compare equal:", field_b == field_c)
+print("Set deduplicates fields:", len({field_b, field_c}))
+print("Hash values:", hash(field_b), hash(field_c))
