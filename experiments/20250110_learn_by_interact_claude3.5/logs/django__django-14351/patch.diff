diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..282573de10
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,88 @@
+from django.conf import settings
+from django.db import models
+from django.db.models import Q, Count
+from django.test.utils import override_settings
+
+# Configure Django settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+    ],
+    DEFAULT_AUTO_FIELD='django.db.models.AutoField'
+)
+
+import django
+django.setup()
+
+# Define test models
+class PropertyGroup(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'testapp'
+        managed = False
+
+class ManagementAgent(models.Model):
+    property_groups = models.ManyToManyField(PropertyGroup)
+    
+    class Meta:
+        app_label = 'testapp'
+        managed = False
+
+class TestItem(models.Model):
+    agent = models.ForeignKey(ManagementAgent, on_delete=models.CASCADE)
+    
+    class Meta:
+        app_label = 'testapp'
+        managed = False
+
+# Create tables
+from django.core.management.color import no_style
+from django.db import connection
+
+# Create tables manually since we're not using a real app
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(PropertyGroup)
+    schema_editor.create_model(ManagementAgent)
+    schema_editor.create_model(TestItem)
+    schema_editor.create_model(ManagementAgent.property_groups.through)
+
+def reproduce_issue():
+    # Create test data
+    pg1 = PropertyGroup.objects.create(name='Group 1')
+    pg2 = PropertyGroup.objects.create(name='Group 2')
+    agent = ManagementAgent.objects.create()
+    agent.property_groups.add(pg1)
+    TestItem.objects.create(agent=agent)
+
+    try:
+        # Case 1: This works (using id__in)
+        qs1 = TestItem.objects.annotate(Count('agent__property_groups')).filter(
+            Q(agent__property_groups__id__in=PropertyGroup.objects.values_list('id', flat=True)) |
+            Q(agent__property_groups__count=0)
+        ).distinct()
+        print("\nWorking Query (using id__in):")
+        print(qs1.query)
+        list(qs1)  # Force query execution
+        print("Query 1 succeeded")
+
+        # Case 2: This fails (using __in directly)
+        qs2 = TestItem.objects.annotate(Count('agent__property_groups')).filter(
+            Q(agent__property_groups__in=PropertyGroup.objects.all()) |
+            Q(agent__property_groups__count=0)
+        ).distinct()
+        print("\nFailing Query (using __in):")
+        print(qs2.query)
+        list(qs2)  # Force query execution
+        print("Query 2 unexpectedly succeeded")
+    except Exception as e:
+        print(f"\nError occurred as expected: {str(e)}")
+
+if __name__ == '__main__':
+    reproduce_issue()
