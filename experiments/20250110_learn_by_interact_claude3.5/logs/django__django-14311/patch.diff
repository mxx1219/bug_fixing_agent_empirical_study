diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py
index b6af5f5491..7bd0227790 100644
--- a/django/utils/autoreload.py
+++ b/django/utils/autoreload.py
@@ -223,8 +223,13 @@ def get_child_arguments():
     # __spec__ is set when the server was started with the `-m` option,
     # see https://docs.python.org/3/reference/import.html#main-spec
     # __spec__ may not exist, e.g. when running in a Conda env.
-    if getattr(__main__, '__spec__', None) is not None and __main__.__spec__.parent:
-        args += ['-m', __main__.__spec__.parent]
+    if getattr(__main__, '__spec__', None) is not None:
+        # Get the full module path when using python -m
+        module_path = __main__.__spec__.name
+        # Remove .__main__ suffix from the module path
+        if module_path.endswith('.__main__'):
+            module_path = module_path[:-9]
+        args += ['-m', module_path]
         args += sys.argv[1:]
     elif not py_script.exists():
         # sys.argv[0] may not exist for several reasons on Windows.
@@ -243,6 +248,7 @@ def get_child_arguments():
     return args
 
 
+
 def trigger_reload(filename):
     logger.info('%s changed, reloading.', filename)
     sys.exit(3)
@@ -637,3 +643,4 @@ def run_with_reloader(main_func, *args, **kwargs):
             sys.exit(exit_code)
     except KeyboardInterrupt:
         pass
+
diff --git a/test_autoreload.py b/test_autoreload.py
new file mode 100644
index 0000000000..c2127b9843
--- /dev/null
+++ b/test_autoreload.py
@@ -0,0 +1,25 @@
+import os
+import sys
+from django.utils.autoreload import get_child_arguments
+import __main__
+
+# Mock __main__ to simulate running with -m
+class MockSpec:
+    def __init__(self, name):
+        self.name = name
+        self.parent = name.rsplit('.', 1)[0]
+
+# Test case 1: module with __main__.py
+__main__.__spec__ = MockSpec('custom_module.bar.__main__')
+args = get_child_arguments()
+print("Test 1 - With __main__.py:")
+print("Args:", args)
+assert 'custom_module.bar' in args, "Should keep parent module path for __main__.py"
+
+# Test case 2: dotted module path
+__main__.__spec__ = MockSpec('custom_module.bar.baz')
+args = get_child_arguments()
+print("\nTest 2 - With dotted module path:")
+print("Args:", args)
+assert 'custom_module.bar.baz' in args, "Should keep full module path for dotted imports"
+print("\nAll tests passed!")
