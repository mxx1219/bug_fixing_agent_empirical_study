diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py
index b8efb9f881..ab5f9134af 100644
--- a/django/utils/autoreload.py
+++ b/django/utils/autoreload.py
@@ -216,36 +216,40 @@ def get_child_arguments():
     executable is reported to not have the .exe extension which can cause bugs
     on reloading.
     """
-    import django.__main__
-    django_main_path = Path(django.__main__.__file__)
+    import __main__
     py_script = Path(sys.argv[0])
 
     args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]
-    if py_script == django_main_path:
-        # The server was started with `python -m django runserver`.
-        args += ['-m', 'django']
+    # __spec__ is set when the server was started with the `-m` option,
+    # see https://docs.python.org/3/reference/import.html#main-spec
+    if hasattr(__main__, '__spec__') and __main__.__spec__ is not None:
+        # The server was started with `python -m some_package`.
+        # __main__.__spec__.parent is the package name that was used with -m
+        if __main__.__spec__.parent:  # Skip if parent is empty string (directory/zip case)
+            args += ['-m', __main__.__spec__.parent]
+            args += sys.argv[1:]  # Only add remaining args
+            return args
+        # Directory/zip case - just pass through the original arguments
         args += sys.argv[1:]
-    elif not py_script.exists():
+        return args
+
+    # Not launched with -m, handle normal script execution
+    if not py_script.exists():
         # sys.argv[0] may not exist for several reasons on Windows.
         # It may exist with a .exe extension or have a -script.py suffix.
         exe_entrypoint = py_script.with_suffix('.exe')
         if exe_entrypoint.exists():
-            # Should be executed directly, ignoring sys.executable.
-            # TODO: Remove str() when dropping support for PY37.
-            # args parameter accepts path-like on Windows from Python 3.8.
             return [str(exe_entrypoint), *sys.argv[1:]]
         script_entrypoint = py_script.with_name('%s-script.py' % py_script.name)
         if script_entrypoint.exists():
-            # Should be executed as usual.
-            # TODO: Remove str() when dropping support for PY37.
-            # args parameter accepts path-like on Windows from Python 3.8.
             return [*args, str(script_entrypoint), *sys.argv[1:]]
         raise RuntimeError('Script %s does not exist.' % py_script)
-    else:
-        args += sys.argv
+    args += sys.argv
     return args
 
 
+
+
 def trigger_reload(filename):
     logger.info('%s changed, reloading.', filename)
     sys.exit(3)
@@ -640,3 +644,6 @@ def run_with_reloader(main_func, *args, **kwargs):
             sys.exit(exit_code)
     except KeyboardInterrupt:
         pass
+
+
+
diff --git a/test_pkg/__init__.py b/test_pkg/__init__.py
new file mode 100644
index 0000000000..8074dd034f
--- /dev/null
+++ b/test_pkg/__init__.py
@@ -0,0 +1 @@
+# Package initialization
