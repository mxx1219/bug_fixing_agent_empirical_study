diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
index 9b00e24509..8f9d874459 100644
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -45,12 +45,31 @@ class ResolverMatch:
         self.namespaces = [x for x in namespaces if x] if namespaces else []
         self.namespace = ':'.join(self.namespaces)
 
-        if not hasattr(func, '__name__'):
-            # A class-based view
-            self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__
+        # Handle partial functions
+        if isinstance(func, functools.partial):
+            # Get the original function
+            original_func = func.func
+            # Build partial arguments string
+            partial_args = []
+            if func.args:
+                partial_args.extend(repr(arg) for arg in func.args)
+            if func.keywords:
+                partial_args.extend(f"{k}={repr(v)}" for k, v in func.keywords.items())
+            partial_suffix = f"[{', '.join(partial_args)}]" if partial_args else ""
+            # Use the original function's module and name
+            if not hasattr(original_func, '__name__'):
+                # A class-based view
+                self._func_path = original_func.__class__.__module__ + '.' + original_func.__class__.__name__ + partial_suffix
+            else:
+                # A function-based view
+                self._func_path = original_func.__module__ + '.' + original_func.__name__ + partial_suffix
         else:
-            # A function-based view
-            self._func_path = func.__module__ + '.' + func.__name__
+            if not hasattr(func, '__name__'):
+                # A class-based view
+                self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__
+            else:
+                # A function-based view
+                self._func_path = func.__module__ + '.' + func.__name__
 
         view_path = url_name or self._func_path
         self.view_name = ':'.join(self.namespaces + [view_path])
@@ -692,3 +711,4 @@ class URLResolver:
                 "a valid view function or pattern name." % {'view': lookup_view_s}
             )
         raise NoReverseMatch(msg)
+
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..caacca8342
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,60 @@
+from django.conf import settings
+from django.urls import ResolverMatch
+import functools
+
+def configure():
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='dummy-key',
+    )
+
+def view_func(request, param1, param2="default"):
+    return f"param1={param1}, param2={param2}"
+
+class ClassBasedView:
+    def __call__(self, request):
+        return "class based view"
+
+if __name__ == "__main__":
+    configure()
+    
+    print("Test Case 1: Partial function with keyword args")
+    partial_view = functools.partial(view_func, param2="preset")
+    match = ResolverMatch(
+        func=partial_view,
+        args=(),
+        kwargs={'param1': 'test'},
+        url_name='test-view'
+    )
+    print(repr(match))
+    
+    print("\nTest Case 2: Partial function with positional args")
+    partial_view2 = functools.partial(view_func, "fixed-param1")
+    match2 = ResolverMatch(
+        func=partial_view2,
+        args=(),
+        kwargs={'param2': 'test'},
+        url_name='test-view'
+    )
+    print(repr(match2))
+    
+    print("\nTest Case 3: Partial of class-based view")
+    class_view = ClassBasedView()
+    partial_class_view = functools.partial(class_view, extra="stuff")
+    match3 = ResolverMatch(
+        func=partial_class_view,
+        args=(),
+        kwargs={},
+        url_name='test-view'
+    )
+    print(repr(match3))
+    
+    print("\nTest Case 4: Regular function (non-partial)")
+    match4 = ResolverMatch(
+        func=view_func,
+        args=(),
+        kwargs={'param1': 'test', 'param2': 'value'},
+        url_name='test-view'
+    )
+    print(repr(match4))
+
