diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py
index 7d226955d5..5029b620b7 100644
--- a/django/db/migrations/serializer.py
+++ b/django/db/migrations/serializer.py
@@ -258,7 +258,7 @@ class TupleSerializer(BaseSequenceSerializer):
 class TypeSerializer(BaseSerializer):
     def serialize(self):
         special_cases = [
-            (models.Model, "models.Model", []),
+            (models.Model, "models.Model", ["from django.db import models"]),  # Add the import
             (type(None), 'type(None)', []),
         ]
         for case, string, imports in special_cases:
@@ -269,7 +269,8 @@ class TypeSerializer(BaseSerializer):
             if module == builtins.__name__:
                 return self.value.__name__, set()
             else:
-                return "%s.%s" % (module, self.value.__name__), {"import %s" % module}
+                # Use __qualname__ instead of __name__ to preserve the full path to inner classes
+                return "%s.%s" % (module, self.value.__qualname__), {"import %s" % module}
 
 
 class UUIDSerializer(BaseSerializer):
@@ -338,3 +339,4 @@ def serializer_factory(value):
         "migration files.\nFor more, see https://docs.djangoproject.com/en/%s/"
         "topics/migrations/#migration-serializing" % (value, get_docs_version())
     )
+
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..1422340416
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1 @@
+from test1.models import *
diff --git a/reproduce/apps.py b/reproduce/apps.py
new file mode 100644
index 0000000000..6a39804489
--- /dev/null
+++ b/reproduce/apps.py
@@ -0,0 +1,4 @@
+from django.apps import AppConfig
+
+class ReproduceConfig(AppConfig):
+    name = 'reproduce'
diff --git a/reproduce/models.py b/reproduce/models.py
new file mode 100644
index 0000000000..c4ad43ab10
--- /dev/null
+++ b/reproduce/models.py
@@ -0,0 +1,11 @@
+from django.db import models
+
+class Outer(object):
+    class Inner(models.CharField):
+        pass
+
+class A(models.Model):
+    field = Outer.Inner(max_length=20)
+    
+    class Meta:
+        app_label = 'reproduce'
diff --git a/reproduce_settings.py b/reproduce_settings.py
new file mode 100644
index 0000000000..f480333c65
--- /dev/null
+++ b/reproduce_settings.py
@@ -0,0 +1,12 @@
+
+SECRET_KEY = 'dummy'
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'reproduce',
+]
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
diff --git a/test1/__init__.py b/test1/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test1/migrations/__init__.py b/test1/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test1/models.py b/test1/models.py
new file mode 100644
index 0000000000..67e434f9c4
--- /dev/null
+++ b/test1/models.py
@@ -0,0 +1,58 @@
+import os
+from django.conf import settings
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'test1',  # Match the example module name
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+)
+
+import django
+django.setup()
+
+from django.db import models
+from django.db.migrations.writer import MigrationWriter
+from django.db.migrations import Migration
+from django.db.migrations import operations
+
+# The exact example from the issue
+class Outer(object):
+    class Inner(models.CharField):
+        pass
+
+class A(models.Model):
+    field = Outer.Inner(max_length=20)
+    class Meta:
+        app_label = 'test1'  # Match the example module name
+
+# Show the actual class path
+print(f"Actual class path: {A._meta.get_field('field').__class__.__module__}.{A._meta.get_field('field').__class__.__qualname__}")
+
+# Create migration
+operation = operations.CreateModel(
+    name='A',
+    fields=[
+        ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+        ('field', A._meta.get_field('field')),
+    ],
+)
+
+migration = Migration('0001_initial', 'test1')
+migration.operations = [operation]
+
+# Generate migration content
+writer = MigrationWriter(migration)
+print("\nGenerated migration content:")
+print("=" * 40)
+print(writer.as_string())
+print("=" * 40)
+
