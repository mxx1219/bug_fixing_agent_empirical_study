diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py
index 2e283a3193..7578b85b8d 100644
--- a/django/db/backends/base/operations.py
+++ b/django/db/backends/base/operations.py
@@ -579,8 +579,56 @@ class BaseDatabaseOperations:
         return []
 
     def convert_durationfield_value(self, value, expression, connection):
-        if value is not None:
-            return datetime.timedelta(0, 0, value)
+        if value is None:
+            return None
+        if isinstance(value, str):
+            try:
+                # Try parsing as microseconds first (most common case)
+                value = int(value)
+            except ValueError:
+                try:
+                    # Handle scientific notation
+                    value = int(decimal.Decimal(value))
+                except (decimal.InvalidOperation, ValueError):
+                    # Handle human-readable format (e.g. "1 day, 10:11:12")
+                    if ' day' in value:
+                        days, rest = value.split(' day', 1)
+                        days = int(days)
+                        if rest.startswith('s'):  # Handle plural
+                            rest = rest[1:]
+                        if rest.startswith(', '):  # Handle optional comma
+                            rest = rest[2:]
+                        time_part = rest
+                    else:
+                        days = 0
+                        time_part = value
+
+                    hours = minutes = seconds = microseconds = 0
+                    if time_part:
+                        time_parts = time_part.split(':')
+                        if len(time_parts) == 3:
+                            hours, minutes, seconds = map(float, time_parts)
+                        elif len(time_parts) == 2:
+                            hours, minutes = map(float, time_parts)
+                        else:
+                            hours = float(time_parts[0])
+                        
+                        # Handle microseconds in seconds part
+                        if '.' in str(seconds):
+                            seconds, micro = str(seconds).split('.')
+                            microseconds = int((micro + '000000')[:6])
+                            seconds = int(seconds)
+                        else:
+                            seconds = int(seconds)
+
+                    return datetime.timedelta(
+                        days=days,
+                        hours=int(hours),
+                        minutes=int(minutes),
+                        seconds=seconds,
+                        microseconds=microseconds
+                    )
+        return datetime.timedelta(0, 0, value)
 
     def check_expression_support(self, expression):
         """
@@ -702,3 +750,4 @@ class BaseDatabaseOperations:
 
     def ignore_conflicts_suffix_sql(self, ignore_conflicts=None):
         return ''
+
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..f858bfcb1e
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,42 @@
+from django.conf import settings
+from django.db import models
+from django.db.models import F
+import datetime
+
+# Configure Django settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=['django.contrib.contenttypes'],
+)
+
+import django
+django.setup()
+
+# Define the model
+class Experiment(models.Model):
+    estimated_time = models.DurationField()
+    
+    class Meta:
+        app_label = 'testapp'
+
+# Create tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Experiment)
+
+# Create test data
+exp = Experiment.objects.create(
+    estimated_time=datetime.timedelta(days=1)
+)
+
+# Try the problematic query
+try:
+    delta = datetime.timedelta(days=1)
+    list(Experiment.objects.annotate(duration=F('estimated_time') + delta))
+except Exception as e:
+    print(f"Error: {e}")
