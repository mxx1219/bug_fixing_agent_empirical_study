diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..9ab99d06c8
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,90 @@
+from django.conf import settings
+from django.db import models
+from django.db.models import Prefetch
+
+# Configure Django settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+    ],
+    DEFAULT_AUTO_FIELD='django.db.models.AutoField'
+)
+
+# Import django.setup() before models
+import django
+django.setup()
+
+# Define test models
+class User(models.Model):
+    email = models.EmailField()
+    kind = models.CharField(
+        max_length=10, choices=[("ADMIN", "Admin"), ("REGULAR", "Regular")]
+    )
+
+    class Meta:
+        app_label = 'testapp'
+
+class Profile(models.Model):
+    full_name = models.CharField(max_length=255)
+    user = models.OneToOneField(User, on_delete=models.CASCADE)
+
+    class Meta:
+        app_label = 'testapp'
+
+def reproduce_issue():
+    # Create the tables
+    from django.db import connection
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(User)
+        schema_editor.create_model(Profile)
+
+    # Create test data
+    user = User.objects.create(
+        email="test@example.com",
+        kind="ADMIN",
+    )
+    Profile.objects.create(user=user, full_name="Test Tester")
+    
+    # Execute the problematic query
+    queryset = User.objects.only("email").prefetch_related(
+        Prefetch(
+            "profile",
+            queryset=Profile.objects.prefetch_related(
+                Prefetch("user", queryset=User.objects.only("kind"))
+            ),
+        )
+    )
+    
+    # Log queries
+    from django.db import connection, reset_queries
+    from django.conf import settings
+    settings.DEBUG = True
+    reset_queries()
+    
+    print("\nExecuting first query...")
+    user = queryset.first()
+    print(f"Number of queries: {len(connection.queries)}")
+    for i, q in enumerate(connection.queries, 1):
+        print(f"\nQuery {i}:")
+        print(q['sql'])
+    
+    print("\nAccessing user.profile.user.kind...")
+    reset_queries()
+    kind = user.profile.user.kind
+    print(f"\nNumber of additional queries: {len(connection.queries)}")
+    for i, q in enumerate(connection.queries, 1):
+        print(f"\nQuery {i}:")
+        print(q['sql'])
+
+    # Also print deferred fields
+    print("\nDeferred fields of user.profile.user:")
+    print(user.profile.user.get_deferred_fields())
+
+if __name__ == '__main__':
+    reproduce_issue()
