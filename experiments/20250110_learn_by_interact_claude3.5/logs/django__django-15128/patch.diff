diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index aaf35ee37c..32e41d5f03 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -761,7 +761,18 @@ class Query(BaseExpression):
 
         # Create a new alias for this table.
         if alias_list:
-            alias = '%s%d' % (self.alias_prefix, len(self.alias_map) + 1)
+            # Find the highest numbered alias with this prefix to avoid collisions
+            max_suffix = 0
+            prefix_len = len(self.alias_prefix)
+            for existing_alias in self.alias_map:
+                if existing_alias.startswith(self.alias_prefix):
+                    try:
+                        suffix = int(existing_alias[prefix_len:])
+                        max_suffix = max(max_suffix, suffix)
+                    except ValueError:
+                        continue
+            # Create new alias with next available number
+            alias = '%s%d' % (self.alias_prefix, max_suffix + 1)
             alias_list.append(alias)
         else:
             # The first occurrence of a table uses the table name directly.
@@ -770,6 +781,7 @@ class Query(BaseExpression):
         self.alias_refcount[alias] = 1
         return alias, True
 
+
     def ref_alias(self, alias):
         """Increases the reference count for this alias."""
         self.alias_refcount[alias] += 1
@@ -2476,3 +2488,4 @@ class JoinPromoter:
         query.promote_joins(to_promote)
         query.demote_joins(to_demote)
         return to_demote
+
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..4b2519d6db
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,56 @@
+from django.conf import settings
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ]
+)
+
+import django
+django.setup()
+
+from django.db import models
+from django.db.models import Q
+
+# Define models
+class Baz(models.Model):
+    class Meta:
+        app_label = 'auth'
+
+class Qux(models.Model):
+    bazes = models.ManyToManyField(Baz, related_name="quxes")
+    class Meta:
+        app_label = 'auth'
+
+class Foo(models.Model):
+    qux = models.ForeignKey(Qux, on_delete=models.CASCADE, related_name="foos")
+    class Meta:
+        app_label = 'auth'
+
+class Bar(models.Model):
+    foo = models.ForeignKey(Foo, on_delete=models.CASCADE, related_name="bars")
+    another_foo = models.ForeignKey(Foo, on_delete=models.CASCADE, related_name="other_bars")
+    baz = models.ForeignKey(Baz, on_delete=models.CASCADE, related_name="bars")
+    class Meta:
+        app_label = 'auth'
+
+# Create test data and run queries
+qux = Qux.objects.create()
+qs1 = qux.foos.all()
+qs2 = Foo.objects.filter(
+    Q(bars__baz__in=qux.bazes.all()) | Q(other_bars__baz__in=qux.bazes.all())
+)
+
+print("Testing qs2 | qs1...")
+print(str(qs2 | qs1))
+print("\nTesting qs1 | qs2...")  # This should raise AssertionError
+print(str(qs1 | qs2))
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..6d46445763
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,65 @@
+from django.conf import settings
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth']
+)
+
+import django
+django.setup()
+
+from django.db import models, connection
+from django.db.models import Q
+
+# Define models
+class Baz(models.Model):
+    class Meta:
+        app_label = 'auth'
+
+class Qux(models.Model):
+    bazes = models.ManyToManyField(Baz, related_name="quxes")
+    class Meta:
+        app_label = 'auth'
+
+class Foo(models.Model):
+    qux = models.ForeignKey(Qux, on_delete=models.CASCADE, related_name="foos")
+    class Meta:
+        app_label = 'auth'
+
+class Bar(models.Model):
+    foo = models.ForeignKey(Foo, on_delete=models.CASCADE, related_name="bars")
+    another_foo = models.ForeignKey(Foo, on_delete=models.CASCADE, related_name="other_bars")
+    baz = models.ForeignKey(Baz, on_delete=models.CASCADE, related_name="bars")
+    class Meta:
+        app_label = 'auth'
+
+# Create tables
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Baz)
+    schema_editor.create_model(Qux)
+    schema_editor.create_model(Foo)
+    schema_editor.create_model(Bar)
+
+# Test both combinations of OR operations
+qux = Qux()
+qux.save()
+qs1 = qux.foos.all()
+qs2 = Foo.objects.filter(
+    Q(bars__baz__in=qux.bazes.all()) | Q(other_bars__baz__in=qux.bazes.all())
+)
+
+print("Testing qs2 | qs1...")
+print(str(qs2 | qs1))
+print("Success!")
+
+print("\nTesting qs1 | qs2...")  # This would have failed before
+print(str(qs1 | qs2))
+print("Success!")
+
