diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 81f8f79c71..48b6a5a24f 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -1210,17 +1210,28 @@ class Exists(Subquery):
         return clone
 
     def as_sql(self, compiler, connection, template=None, **extra_context):
-        query = self.query.exists(using=connection.alias)
-        sql, params = super().as_sql(
-            compiler,
-            connection,
-            template=template,
-            query=query,
-            **extra_context,
-        )
-        if self.negated:
-            sql = 'NOT {}'.format(sql)
-        return sql, params
+        try:
+            query = self.query.exists(using=connection.alias)
+            sql, params = super().as_sql(
+                compiler,
+                connection,
+                template=template,
+                query=query,
+                **extra_context,
+            )
+            if self.negated:
+                sql = 'NOT {}'.format(sql)
+            return sql, params
+        except EmptyResultSet:
+            # For empty querysets:
+            # - Exists() should evaluate to FALSE
+            # - ~Exists() should evaluate to TRUE
+            if self.negated:
+                sql = '(1=1)'  # TRUE
+            else:
+                sql = '(1=0)'  # FALSE
+            return sql, []
+
 
     def select_format(self, compiler, sql, params):
         # Wrap EXISTS() with a CASE WHEN expression if a database backend
@@ -1490,3 +1501,4 @@ class ValueRange(WindowFrame):
 
     def window_frame_start_end(self, connection, start, end):
         return connection.ops.window_frame_range_start_end(start, end)
+
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..01ae69285b
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,33 @@
+from django.db import models
+from django.conf import settings
+
+# Configure Django settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=['django.contrib.contenttypes'],
+)
+
+import django
+django.setup()
+
+# Create test model
+class MyModel(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'myapp'
+
+# Set up database
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(MyModel)
+
+# Reproduce the issue
+qs = MyModel.objects.filter(~models.Exists(MyModel.objects.none()), name='test')
+print("QuerySet:", qs)
+print("SQL Query:", qs.query)
