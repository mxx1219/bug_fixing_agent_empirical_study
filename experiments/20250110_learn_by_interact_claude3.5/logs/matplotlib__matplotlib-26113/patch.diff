diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py
index 5369eadbde..2987a909d3 100644
--- a/lib/matplotlib/axes/_axes.py
+++ b/lib/matplotlib/axes/_axes.py
@@ -5014,7 +5014,7 @@ default: :rc:`scatter.edgecolors`
             if mincnt is None:
                 mincnt = 0
             accum = np.array(
-                [reduce_C_function(acc) if len(acc) > mincnt else np.nan
+                [reduce_C_function(acc) if len(acc) >= mincnt else np.nan
                  for Cs_at_i in [Cs_at_i1, Cs_at_i2]
                  for acc in Cs_at_i[1:]],  # [1:] drops out-of-range points.
                 float)
@@ -8449,3 +8449,4 @@ such objects
         ll, ur = self.get_position() * figure_size
         width, height = ur - ll
         return height / (width * self.get_data_ratio())
+
diff --git a/reproduce/hexbin_bug.py b/reproduce/hexbin_bug.py
new file mode 100644
index 0000000000..87925ad97b
--- /dev/null
+++ b/reproduce/hexbin_bug.py
@@ -0,0 +1,42 @@
+import matplotlib.pyplot as plt
+import numpy as np
+
+np.random.seed(42)
+
+X, Y = np.random.multivariate_normal([0.0, 0.0], [[1.0, 0.1], [0.1, 1.0]], size=250).T
+Z = np.ones_like(X)
+
+extent = [-3., 3., -3., 3.]
+gridsize = (7, 7)
+
+# Test Case 1: mincnt=1, no C argument (original test)
+fig, ax = plt.subplots(1, 1)
+hb1 = ax.hexbin(X, Y, mincnt=1, extent=extent, gridsize=gridsize)
+counts1 = hb1.get_array()
+plt.close()
+print("Test 1 - mincnt=1, no C: Number of non-zero bins:", np.sum(counts1 > 0))
+
+# Test Case 2: mincnt=1, with C argument (original test)
+fig, ax = plt.subplots(1, 1)
+hb2 = ax.hexbin(X, Y, C=Z, reduce_C_function=np.sum, mincnt=1, 
+                extent=extent, gridsize=gridsize)
+counts2 = hb2.get_array()
+plt.close()
+print("Test 2 - mincnt=1, with C: Number of non-zero bins:", np.sum(counts2 > 0))
+
+# Test Case 3: Edge case - mincnt=0
+fig, ax = plt.subplots(1, 1)
+hb3 = ax.hexbin(X, Y, C=Z, reduce_C_function=np.sum, mincnt=0,
+                extent=extent, gridsize=gridsize)
+counts3 = hb3.get_array()
+plt.close()
+print("Test 3 - mincnt=0, with C: Number of non-zero bins:", np.sum(counts3 > 0))
+
+# Test Case 4: Edge case - mincnt=2
+fig, ax = plt.subplots(1, 1)
+hb4 = ax.hexbin(X, Y, C=Z, reduce_C_function=np.sum, mincnt=2,
+                extent=extent, gridsize=gridsize)
+counts4 = hb4.get_array()
+plt.close()
+print("Test 4 - mincnt=2, with C: Number of non-zero bins:", np.sum(counts4 > 0))
+
