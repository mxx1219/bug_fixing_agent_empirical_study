diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py
index 617ac95907..456cc5a543 100644
--- a/django/db/backends/base/operations.py
+++ b/django/db/backends/base/operations.py
@@ -573,8 +573,37 @@ class BaseDatabaseOperations:
         return []
 
     def convert_durationfield_value(self, value, expression, connection):
-        if value is not None:
-            return datetime.timedelta(0, 0, value)
+        if value is None:
+            return None
+        if isinstance(value, str):
+            try:
+                # Try parsing as integer microseconds
+                value = int(value)
+            except ValueError:
+                try:
+                    # Handle scientific notation
+                    value = int(float(value))
+                except ValueError:
+                    # Parse human-readable format (e.g. "1 day, 10:11:12")
+                    days = hours = minutes = seconds = microseconds = 0
+                    if 'day' in value:
+                        day_parts = value.split(' day')
+                        days = int(day_parts[0])
+                        time_part = day_parts[1][2:] if day_parts[1] else '0:00:00'
+                    else:
+                        time_part = value
+
+                    if ':' in time_part:
+                        time_parts = time_part.split(':')
+                        hours, minutes, seconds = map(int, time_parts)
+                    
+                    return datetime.timedelta(
+                        days=days,
+                        hours=hours,
+                        minutes=minutes,
+                        seconds=seconds
+                    )
+        return datetime.timedelta(0, 0, value)
 
     def check_expression_support(self, expression):
         """
@@ -696,3 +725,4 @@ class BaseDatabaseOperations:
 
     def ignore_conflicts_suffix_sql(self, ignore_conflicts=None):
         return ''
+
diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index d913658291..9fbb0f1e14 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -63,9 +63,22 @@ class Combinable:
             )
             other = Value(other, output_field=output_field)
 
+        output_field = None
+        # Check if this is a temporal operation that should result in a duration
+        try:
+            lhs_type = self.output_field.get_internal_type() if reversed else getattr(self, 'output_field', None)
+            rhs_type = getattr(other, 'output_field', None) if reversed else other.output_field.get_internal_type()
+            if lhs_type in {'DateTimeField', 'DateField'} and lhs_type == rhs_type and connector == self.SUB:
+                return TemporalSubtraction(other, self) if reversed else TemporalSubtraction(self, other)
+            # If either operand is a DurationField, the result is a DurationField
+            if 'DurationField' in {lhs_type, rhs_type}:
+                output_field = fields.DurationField()
+        except (AttributeError, FieldError):
+            pass
+
         if reversed:
-            return CombinedExpression(other, connector, self)
-        return CombinedExpression(self, connector, other)
+            return CombinedExpression(other, connector, self, output_field=output_field)
+        return CombinedExpression(self, connector, other, output_field=output_field)
 
     #############
     # OPERATORS #
@@ -425,6 +438,9 @@ class Expression(BaseExpression, Combinable):
 class CombinedExpression(SQLiteNumericMixin, Expression):
 
     def __init__(self, lhs, connector, rhs, output_field=None):
+        # If we're combining a temporal subtraction with a duration, use DurationField
+        if output_field is None and isinstance(lhs, TemporalSubtraction):
+            output_field = fields.DurationField()
         super().__init__(output_field=output_field)
         self.connector = connector
         self.lhs = lhs
@@ -460,6 +476,7 @@ class CombinedExpression(SQLiteNumericMixin, Expression):
         datetime_fields = {'DateField', 'DateTimeField', 'TimeField'}
         if self.connector == self.SUB and lhs_type in datetime_fields and lhs_type == rhs_type:
             return TemporalSubtraction(self.lhs, self.rhs).as_sql(compiler, connection)
+
         expressions = []
         expression_params = []
         sql, params = compiler.compile(self.lhs)
@@ -1359,3 +1376,7 @@ class ValueRange(WindowFrame):
 
     def window_frame_start_end(self, connection, start, end):
         return connection.ops.window_frame_range_start_end(start, end)
+
+
+
+
