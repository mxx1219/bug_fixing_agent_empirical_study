diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py
index cf4df76882..a48e442889 100644
--- a/django/db/backends/postgresql/client.py
+++ b/django/db/backends/postgresql/client.py
@@ -30,6 +30,18 @@ class DatabaseClient(BaseDatabaseClient):
         subprocess_env = os.environ.copy()
         if passwd:
             subprocess_env['PGPASSWORD'] = str(passwd)
+            
+        # Add SSL parameters
+        ssl_params = {
+            'sslmode': 'PGSSLMODE',
+            'sslcert': 'PGSSLCERT',
+            'sslkey': 'PGSSLKEY',
+            'sslrootcert': 'PGSSLROOTCERT',
+        }
+        for param, env_var in ssl_params.items():
+            if param in conn_params:
+                subprocess_env[env_var] = str(conn_params[param])
+                
         try:
             # Allow SIGINT to pass to psql to abort queries.
             signal.signal(signal.SIGINT, signal.SIG_IGN)
@@ -40,3 +52,4 @@ class DatabaseClient(BaseDatabaseClient):
 
     def runshell(self):
         DatabaseClient.runshell_db(self.connection.get_connection_params())
+
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..1c949b391f
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,53 @@
+import os
+os.environ['DJANGO_SETTINGS_MODULE'] = 'reproduce_settings'
+
+# Create settings file
+with open('reproduce_settings.py', 'w') as f:
+    f.write('''
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.postgresql',
+        'NAME': 'testdb',
+        'USER': 'testuser',
+        'HOST': 'localhost',
+        'PORT': '5432',
+        'OPTIONS': {
+            'sslmode': 'verify-ca',
+            'sslrootcert': 'ca.crt',
+            'sslcert': 'client_cert_chain.crt',
+            'sslkey': 'client_key.key'
+        }
+    }
+}
+SECRET_KEY = 'dummy'
+    ''')
+
+# Debug: print connection params and environment variables
+from django.db import connections
+connection = connections['default']
+params = connection.get_connection_params()
+print("\nConnection Parameters:")
+for param in ['sslmode', 'sslrootcert', 'sslcert', 'sslkey']:
+    if param in params:
+        print(f"{param}: {params[param]}")
+
+# Get environment variables that would be set
+subprocess_env = os.environ.copy()
+ssl_params = {
+    'sslmode': 'PGSSLMODE',
+    'sslcert': 'PGSSLCERT',
+    'sslkey': 'PGSSLKEY',
+    'sslrootcert': 'PGSSLROOTCERT',
+}
+for param, env_var in ssl_params.items():
+    if param in params:
+        subprocess_env[env_var] = str(params[param])
+
+print("\nEnvironment Variables:")
+for env_var in ['PGSSLMODE', 'PGSSLCERT', 'PGSSLKEY', 'PGSSLROOTCERT']:
+    if env_var in subprocess_env:
+        print(f"{env_var}: {subprocess_env[env_var]}")
+
+from django.core.management import execute_from_command_line
+execute_from_command_line(['manage.py', 'dbshell'])
+
diff --git a/reproduce_settings.py b/reproduce_settings.py
new file mode 100644
index 0000000000..3b14b3c01e
--- /dev/null
+++ b/reproduce_settings.py
@@ -0,0 +1,18 @@
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.postgresql',
+        'NAME': 'testdb',
+        'USER': 'testuser',
+        'HOST': 'localhost',
+        'PORT': '5432',
+        'OPTIONS': {
+            'sslmode': 'verify-ca',
+            'sslrootcert': 'ca.crt',
+            'sslcert': 'client_cert_chain.crt',
+            'sslkey': 'client_key.key'
+        }
+    }
+}
+SECRET_KEY = 'dummy'
+    
\ No newline at end of file
