diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 08d7faf194..b0dc64f989 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1773,6 +1773,10 @@ class Query(BaseExpression):
         """
         self.select = ()
         self.values_select = ()
+        # Also clear select fields on combined queries to ensure proper column selection
+        if getattr(self, 'combined_queries', None):
+            for q in self.combined_queries:
+                q.clear_select_fields()
 
     def set_select(self, cols):
         self.default_cols = False
@@ -2041,6 +2045,34 @@ class Query(BaseExpression):
             field_names = []
             extra_names = []
             annotation_names = []
+            # If this is a combined query, propagate the values selection to component queries
+            if getattr(self, 'combined_queries', None):
+                for q in self.combined_queries:
+                    q.clear_select_fields()
+                    if hasattr(q, 'values_select'):
+                        q.values_select = None
+
+            if not self.extra and not self.annotations:
+                # Shortcut - if there are no extra or annotations, then
+                # the values() clause must be just field names.
+                field_names = list(fields)
+            else:
+                self.default_cols = False
+                for f in fields:
+                    if f in self.extra_select:
+                        extra_names.append(f)
+                    elif f in self.annotation_select:
+                        annotation_names.append(f)
+                    else:
+                        field_names.append(f)
+                self.set_extra_mask(extra_names)
+                self.set_annotation_mask(annotation_names)
+            if getattr(self, 'combined_queries', None):
+                for q in self.combined_queries:
+                    q.clear_select_fields()
+                    if hasattr(q, 'values_select'):
+                        q.values_select = None
+
             if not self.extra and not self.annotations:
                 # Shortcut - if there are no extra or annotations, then
                 # the values() clause must be just field names.
@@ -2054,16 +2086,18 @@ class Query(BaseExpression):
                         annotation_names.append(f)
                     else:
                         field_names.append(f)
-            self.set_extra_mask(extra_names)
-            self.set_annotation_mask(annotation_names)
+                self.set_extra_mask(extra_names)
+                self.set_annotation_mask(annotation_names)
         else:
             field_names = [f.attname for f in self.model._meta.concrete_fields]
 
         self.values_select = tuple(field_names)
         self.add_fields(field_names, True)
 
+
     @property
     def annotation_select(self):
+
         """
         Return the dictionary of aggregate columns that are not masked and
         should be used in the SELECT clause. Cache this result for performance.
@@ -2305,3 +2339,15 @@ class JoinPromoter:
         query.promote_joins(to_promote)
         query.demote_joins(to_demote)
         return to_demote
+
+
+
+
+
+
+
+
+
+
+
+
diff --git "a/django/db/models/sql/query.py\"" "b/django/db/models/sql/query.py\""
new file mode 100644
index 0000000000..4030f1be50
--- /dev/null
+++ "b/django/db/models/sql/query.py\""
@@ -0,0 +1,32 @@
+if fields:
+            field_names = []
+            extra_names = []
+            annotation_names = []
+            # If this is a combined query, propagate the values selection to component queries
+            if getattr(self, 'combined_queries', None):
+                for q in self.combined_queries:
+                    q.clear_select_fields()
+                    if hasattr(q, 'values_select'):
+                        q.values_select = None
+
+            if not self.extra and not self.annotations:
+                # Shortcut - if there are no extra or annotations, then
+                # the values() clause must be just field names.
+                field_names = list(fields)
+            else:
+                self.default_cols = False
+                for f in fields:
+                    if f in self.extra_select:
+                        extra_names.append(f)
+                    elif f in self.annotation_select:
+                        annotation_names.append(f)
+                    else:
+                        field_names.append(f)
+                self.set_extra_mask(extra_names)
+                self.set_annotation_mask(annotation_names)
+        else:
+            field_names = [f.attname for f in self.model._meta.concrete_fields]
+
+        self.values_select = tuple(field_names)
+        self.add_fields(field_names, True)
+
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..9c237a2169
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,42 @@
+from django.conf import settings
+from django.db import models
+from django.test import TestCase
+
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ]
+)
+
+import django
+django.setup()
+
+class ReservedName(models.Model):
+    name = models.CharField(max_length=100)
+    order = models.IntegerField()
+
+    class Meta:
+        app_label = 'testapp'
+        db_table = 'testapp_reservedname'
+
+# Create tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(ReservedName)
+
+# Create test data
+ReservedName.objects.create(name='a', order=2)
+
+# Reproduce the issue
+qs1 = ReservedName.objects.all()
+print("First query with name and order:")
+print(qs1.union(qs1).values_list('name', 'order').get())
+print("\nSecond query with just order:")
+print(qs1.union(qs1).values_list('order').get())
