diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index 982816be3a..ee0fd5e901 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -320,12 +320,18 @@ class RenameModel(ModelOperation):
         new_model = to_state.apps.get_model(app_label, self.new_name)
         if self.allow_migrate_model(schema_editor.connection.alias, new_model):
             old_model = from_state.apps.get_model(app_label, self.old_name)
+            # Skip database operations if the table name isn't actually changing
+            old_db_table = old_model._meta.db_table
+            new_db_table = new_model._meta.db_table
+            if old_db_table == new_db_table:
+                return
             # Move the main table
             schema_editor.alter_db_table(
                 new_model,
                 old_model._meta.db_table,
                 new_model._meta.db_table,
             )
+
             # Alter the fields pointing to us
             for related_object in old_model._meta.related_objects:
                 if related_object.related_model == old_model:
@@ -882,3 +888,4 @@ class RemoveConstraint(IndexOperation):
     @property
     def migration_name_fragment(self):
         return 'remove_%s_%s' % (self.model_name_lower, self.name.lower())
+
diff --git a/reproduce_rename.py b/reproduce_rename.py
new file mode 100644
index 0000000000..ff821e0440
--- /dev/null
+++ b/reproduce_rename.py
@@ -0,0 +1,65 @@
+from django.conf import settings
+settings.configure()
+
+from django.db import migrations
+from django.db.migrations.state import ProjectState
+from django.db.backends.base.schema import BaseDatabaseSchemaEditor
+from django.db.migrations.operations.models import RenameModel
+
+class FakeSchemaEditor(BaseDatabaseSchemaEditor):
+    def __init__(self):
+        self.collected_sql = []
+        self.connection = type('Connection', (), {'alias': 'default'})
+
+    def execute(self, sql, params=()):
+        self.collected_sql.append(sql)
+        
+    def alter_db_table(self, model, old_db_table, new_db_table):
+        self.execute(f'ALTER TABLE {old_db_table} RENAME TO {new_db_table}')
+
+class Meta:
+    def can_migrate(self, connection):
+        return True
+
+class FakeModel:
+    def __init__(self, name, db_table):
+        self._meta = Meta()
+        self._meta.db_table = db_table
+        self._meta.related_objects = []
+        self._meta.model_name = name.lower()
+        self._meta.app_label = 'myapp'
+        self._meta.local_many_to_many = []
+
+class FakeApps:
+    def __init__(self, old_table, new_table):
+        self.old_table = old_table
+        self.new_table = new_table
+        
+    def get_model(self, app_label, model_name):
+        if model_name.lower() == 'oldname':
+            return FakeModel('OldName', self.old_table)
+        return FakeModel('NewName', self.new_table)
+
+class FakeState:
+    def __init__(self):
+        self.apps = None  # Will be set by test_rename
+
+def test_rename(old_table, new_table):
+    operation = RenameModel('OldName', 'NewName')
+    schema_editor = FakeSchemaEditor()
+    from_state = FakeState()
+    from_state.apps = FakeApps(old_table, new_table)
+    to_state = FakeState()
+    to_state.apps = FakeApps(old_table, new_table)
+    
+    operation.database_forwards('myapp', schema_editor, from_state, to_state)
+    return schema_editor.collected_sql
+
+# Test case 1: Same table name (should be no-op)
+print("Test case 1 - Same table name:")
+print(f"SQL executed: {test_rename('same_table', 'same_table')}")
+
+# Test case 2: Different table names (should execute ALTER TABLE)
+print("\nTest case 2 - Different table names:")
+print(f"SQL executed: {test_rename('old_table', 'new_table')}")
+
