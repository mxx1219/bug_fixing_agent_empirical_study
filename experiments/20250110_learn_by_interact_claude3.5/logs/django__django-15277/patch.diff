diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index f30b523346..ef07d1d2d5 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -1010,7 +1010,9 @@ class CharField(Field):
     def __init__(self, *args, db_collation=None, **kwargs):
         super().__init__(*args, **kwargs)
         self.db_collation = db_collation
-        self.validators.append(validators.MaxLengthValidator(self.max_length))
+        if self.max_length is not None:
+            self.validators.append(validators.MaxLengthValidator(self.max_length))
+
 
     def check(self, **kwargs):
         databases = kwargs.get('databases') or []
@@ -2537,3 +2539,4 @@ class SmallAutoField(AutoFieldMixin, SmallIntegerField):
 
     def rel_db_type(self, connection):
         return SmallIntegerField().db_type(connection=connection)
+
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..0c86bf868e
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,21 @@
+from django.db.models import Value
+import timeit
+
+def test_resolve():
+    x = Value('test')
+    y = x._resolve_output_field()
+    print("Validators:", y.validators)
+    try:
+        y.clean('1', model_instance=None)
+    except TypeError as e:
+        print("TypeError as expected:", e)
+
+if __name__ == '__main__':
+    print("Running test_resolve():")
+    test_resolve()
+    
+    print("\nTiming _resolve_output_field():")
+    setup = "from django.db.models import Value; x = Value('test')"
+    stmt = "x._resolve_output_field()"
+    timing = timeit.timeit(stmt, setup=setup, number=100000)
+    print(f"Average time: {timing/100000*1e6:.2f} Âµs per loop")
