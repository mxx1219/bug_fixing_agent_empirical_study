diff --git a/django/contrib/auth/tokens.py b/django/contrib/auth/tokens.py
index 93e2d71af2..d45225cb59 100644
--- a/django/contrib/auth/tokens.py
+++ b/django/contrib/auth/tokens.py
@@ -85,6 +85,8 @@ class PasswordResetTokenGenerator:
            same password is chosen, due to password salting).
         2. The last_login field will usually be updated very shortly after
            a password reset.
+        3. The email field (if the user has one) will invalidate the token if
+           changed.
         Failing those things, settings.PASSWORD_RESET_TIMEOUT eventually
         invalidates the token.
 
@@ -94,7 +96,10 @@ class PasswordResetTokenGenerator:
         # Truncate microseconds so that tokens are consistent even if the
         # database doesn't support microseconds.
         login_timestamp = '' if user.last_login is None else user.last_login.replace(microsecond=0, tzinfo=None)
-        return str(user.pk) + user.password + str(login_timestamp) + str(timestamp)
+        # Get the user's email field value if it exists
+        email_field_name = user.get_email_field_name() if hasattr(user, 'get_email_field_name') else 'email'
+        email = getattr(user, email_field_name, '') or ''
+        return str(user.pk) + user.password + str(login_timestamp) + str(timestamp) + email
 
     def _num_seconds(self, dt):
         return int((dt - datetime(2001, 1, 1)).total_seconds())
@@ -105,3 +110,4 @@ class PasswordResetTokenGenerator:
 
 
 default_token_generator = PasswordResetTokenGenerator()
+
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..af7e366d19
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,42 @@
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')
+
+from django.conf import settings
+settings.configure(
+    SECRET_KEY='test-key-not-for-production',
+    PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],
+    INSTALLED_APPS=[
+        'django.contrib.auth',
+        'django.contrib.contenttypes',
+    ],
+    USE_TZ=False,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    }
+)
+
+import django
+django.setup()
+
+from django.contrib.auth import get_user_model
+from django.contrib.auth.tokens import default_token_generator
+
+# Create a test user
+User = get_user_model()
+user = User()
+user.pk = 1
+user.password = 'test_password'
+user.email = 'foo@example.com'
+
+# Generate password reset token
+token = default_token_generator.make_token(user)
+print(f"Generated token: {token}")
+print(f"Token valid before email change: {default_token_generator.check_token(user, token)}")
+
+# Change email
+user.email = 'bar@example.com'
+print(f"Token valid after email change: {default_token_generator.check_token(user, token)}")
+
