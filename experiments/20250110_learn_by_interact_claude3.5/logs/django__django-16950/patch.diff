diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..f7c7af4261
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,89 @@
+import uuid
+from django.db import models
+from django.contrib import admin
+from django.conf import settings
+import os
+
+# Configure minimal Django settings
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+        'django.contrib.admin',
+        'django.contrib.sessions',
+    ],
+    SECRET_KEY='dummy',
+)
+
+import django
+django.setup()
+
+# Create test models
+class UUIDModel(models.Model):
+    pkid = models.BigAutoField(primary_key=True, editable=False)
+    id = models.UUIDField(default=uuid.uuid4, editable=False, unique=True)
+    
+    class Meta:
+        abstract = True
+        app_label = 'django.contrib.contenttypes'
+
+class Thing(UUIDModel):
+    name = models.CharField(max_length=191)
+
+    class Meta:
+        app_label = 'django.contrib.contenttypes'
+
+class SubThing(models.Model):
+    name = models.CharField(max_length=191)
+    thing = models.ForeignKey(
+        Thing,
+        to_field='id',
+        on_delete=models.CASCADE,
+        related_name='subthings',
+    )
+
+    class Meta:
+        app_label = 'django.contrib.contenttypes'
+
+# Create tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Thing)
+    schema_editor.create_model(SubThing)
+
+# Reproduce the issue
+thing = Thing.objects.create(name="Test Thing")
+print(f"Created Thing with name={thing.name}, id={thing.id}")
+
+# Create an inline formset to simulate admin behavior
+from django.forms.models import inlineformset_factory
+ThingFormSet = inlineformset_factory(Thing, SubThing, fields=('name',))
+
+# Create a formset with initial data
+formset = ThingFormSet(instance=thing, data={
+    'subthings-TOTAL_FORMS': '1',
+    'subthings-INITIAL_FORMS': '0',
+    'subthings-MIN_NUM_FORMS': '0',
+    'subthings-MAX_NUM_FORMS': '1000',
+    'subthings-0-name': 'Test SubThing',
+})
+
+print("Validating formset...")
+if formset.is_valid():
+    print("Formset is valid, saving...")
+    try:
+        instances = formset.save()
+        print(f"Saved successfully! Created {len(instances)} SubThings")
+        for subthing in instances:
+            print(f"SubThing name={subthing.name}, thing_id={subthing.thing.id}")
+    except Exception as e:
+        print(f"Error saving formset: {e}")
+else:
+    print(f"Formset errors: {formset.errors}")
