diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index 7a5b28d159..181b3fa5f2 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -151,13 +151,17 @@ def floatformat(text, arg=-1):
             use_l10n = False
             arg = arg[:-1] or -1
     try:
-        input_val = repr(text)
-        d = Decimal(input_val)
+        if isinstance(text, Decimal):
+            d = text
+        else:
+            input_val = repr(text)
+            d = Decimal(input_val)
     except InvalidOperation:
         try:
             d = Decimal(str(float(text)))
         except (ValueError, InvalidOperation, TypeError):
             return ""
+
     try:
         p = int(arg)
     except ValueError:
@@ -976,3 +980,4 @@ def pprint(value):
         return pformat(value)
     except Exception as e:
         return "Error in formatting: %s: %s" % (e.__class__.__name__, e)
+
diff --git a/reproduce_decimal.py b/reproduce_decimal.py
new file mode 100644
index 0000000000..5d5392a0da
--- /dev/null
+++ b/reproduce_decimal.py
@@ -0,0 +1,28 @@
+from decimal import Decimal
+from django import setup
+from django.conf import settings
+from django.template import Template, Context
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+    },
+]
+settings.configure(TEMPLATES=TEMPLATES)
+setup()
+
+# Test cases
+tests = [
+    ('42.12345678901234567890', 20),  # Original case
+    ('123.456789012345678901', 20),    # Different number
+    ('0.000000000000000001', 20),      # Very small number
+    ('9999999999.999999999999999', 15),# Large number
+    ('1.23', 5),                       # Fewer decimal places than specified
+]
+
+for value, precision in tests:
+    t = Template('{{ value|floatformat:' + str(precision) + ' }}')
+    c = Context({'value': Decimal(value)})
+    print(f"\nInput: {value}")
+    print(f"Output with precision {precision}: {t.render(c)}")
+
