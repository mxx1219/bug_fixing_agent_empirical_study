diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py
index 30616c0172..b66000e9f0 100644
--- a/django/db/migrations/autodetector.py
+++ b/django/db/migrations/autodetector.py
@@ -352,6 +352,23 @@ class MigrationAutodetector:
                             if self.check_dependency(op2, dep):
                                 dependency_graph[op].add(op2)
 
+            # Special case: if this is a CreateModel operation for a subclass,
+            # and there's a RemoveField operation for the same field name in the parent,
+            # make sure the RemoveField happens after CreateModel
+            for op in ops:
+                if isinstance(op, operations.CreateModel) and op.bases:
+
+                    for base in op.bases:
+                        if isinstance(base, str) and "." in base:
+
+                            base_app_label, base_name = base.split(".", 1)
+                            if base_app_label == app_label:
+                                for op2 in ops:
+                                    if (isinstance(op2, operations.RemoveField) and
+                                            op2.model_name.lower() == base_name.lower()):
+                                        # Add dependency from RemoveField to CreateModel
+                                        dependency_graph[op2].add(op)
+
             # we use a stable sort for deterministic tests & general behavior
             self.generated_operations[app_label] = stable_topological_sort(ops, dependency_graph)
 
@@ -1327,3 +1344,6 @@ class MigrationAutodetector:
         if match:
             return int(match[0])
         return None
+
+
+
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..99c2db9741
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,82 @@
+from django.conf import settings
+from django.db import models, migrations
+from django.core.management import execute_from_command_line
+from django.db.migrations.state import ProjectState
+from django.db.migrations.autodetector import MigrationAutodetector
+from django.db.migrations.loader import MigrationLoader
+from django.db.migrations.graph import MigrationGraph
+from django.db.migrations.questioner import MigrationQuestioner
+import os
+
+class QuietQuestioner(MigrationQuestioner):
+    def ask_rename(self, model_name, old_name, new_name, field=None):
+        return True
+
+    def ask_rename_model(self, old_model_state, new_model_state):
+        return True
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=['django.contrib.contenttypes'],
+        USE_TZ=False,
+    )
+
+import django
+django.setup()
+
+# Create models
+class Readable(models.Model):
+    title = models.CharField(max_length=200)
+    
+    class Meta:
+        app_label = 'myapp'
+
+# Create the second state where field is moved to subclass
+class NewReadable(models.Model):
+    class Meta:
+        app_label = 'myapp'
+
+class Book(NewReadable):
+    title = models.CharField(max_length=200)
+    
+    class Meta:
+        app_label = 'myapp'
+
+# Create project states
+before_state = ProjectState()
+before_state.add_model(migrations.state.ModelState.from_model(Readable))
+
+after_state = ProjectState()
+after_state.add_model(migrations.state.ModelState.from_model(NewReadable))
+after_state.add_model(migrations.state.ModelState.from_model(Book))
+
+# Create empty migration graph
+graph = MigrationGraph()
+
+# Run autodetector
+loader = MigrationLoader(None, ignore_no_migrations=True)
+autodetector = MigrationAutodetector(
+    from_state=before_state,
+    to_state=after_state,
+    questioner=QuietQuestioner(),
+)
+
+# Get the changes
+changes = autodetector.changes(graph)
+
+# Print the operations to see their order
+print("Generated operations:")
+for app_label, migrations_list in changes.items():
+    for migration in migrations_list:
+        print("\nMigration:", migration.name)
+        for operation in migration.operations:
+            print(" -", operation.__class__.__name__)
+            print("   ", operation)
+
