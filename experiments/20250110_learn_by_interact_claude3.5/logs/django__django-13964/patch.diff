diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py
index 872a4c98dc..7eef584578 100644
--- a/django/db/models/fields/related_descriptors.py
+++ b/django/db/models/fields/related_descriptors.py
@@ -64,7 +64,7 @@ and two directions (forward and reverse) for a total of six combinations.
 """
 
 from django.core.exceptions import FieldError
-from django.db import connections, router, transaction
+from django.db import connections, router, transaction, models
 from django.db.models import Q, signals
 from django.db.models.query import QuerySet
 from django.db.models.query_utils import DeferredAttribute
@@ -72,11 +72,25 @@ from django.db.models.utils import resolve_callables
 from django.utils.functional import cached_property
 
 
+
 class ForeignKeyDeferredAttribute(DeferredAttribute):
     def __set__(self, instance, value):
         if instance.__dict__.get(self.field.attname) != value and self.field.is_cached(instance):
             self.field.delete_cached_value(instance)
         instance.__dict__[self.field.attname] = value
+        # When this is a primary key being set, update any foreign keys pointing to this instance
+        if self.field.primary_key and value is not None:
+            for field in instance._meta.get_fields():
+                if (hasattr(field, 'field') and isinstance(field.field, models.ForeignKey) and 
+                    field.field.remote_field.model == instance.__class__):
+                    # Find objects referencing this instance with empty foreign key
+                    referring_objects = field.field.model._base_manager.filter(**{
+                        field.field.attname: '',
+                        field.name: instance,
+                    })
+                    # Update their foreign keys
+                    referring_objects.update(**{field.field.attname: value})
+
 
 
 class ForwardManyToOneDescriptor:
@@ -199,7 +213,6 @@ class ForwardManyToOneDescriptor:
             )
         else:
             return rel_obj
-
     def __set__(self, instance, value):
         """
         Set the related instance through the forward relation.
@@ -229,6 +242,7 @@ class ForwardManyToOneDescriptor:
                 raise ValueError('Cannot assign "%r": the current database router prevents this relation.' % value)
 
         remote_field = self.field.remote_field
+
         # If we're setting the value of a OneToOneField to None, we need to clear
         # out the cache on any old related object. Otherwise, deleting the
         # previously-related object will also cause this object to be deleted,
@@ -236,45 +250,71 @@ class ForwardManyToOneDescriptor:
         if value is None:
             # Look up the previously-related object, which may still be available
             # since we've not yet cleared out the related field.
-            # Use the cache directly, instead of the accessor; if we haven't
-            # populated the cache, then we don't care - we're only accessing
-            # the object to invalidate the accessor cache, so there's no
-            # need to populate the cache just to expire it again.
             related = self.field.get_cached_value(instance, default=None)
-
-            # If we've got an old related object, we need to clear out its
-            # cache. This cache also might not exist if the related object
-            # hasn't been accessed yet.
             if related is not None:
                 remote_field.set_cached_value(related, None)
-
             for lh_field, rh_field in self.field.related_fields:
                 setattr(instance, lh_field.attname, None)
-
-        # Set the values of the related field.
         else:
+            # Set the values of the related field
             for lh_field, rh_field in self.field.related_fields:
-                setattr(instance, lh_field.attname, getattr(value, rh_field.attname))
+                pk_value = getattr(value, rh_field.attname)
+                if pk_value is None and isinstance(rh_field, models.CharField):
+                    # For CharField PKs, defer the FK update until after save
+                    def _update_fk(sender, instance=value, **kwargs):
+                        if not kwargs.get('raw', False):
+                            new_pk = getattr(instance, rh_field.attname)
+                            if new_pk and hasattr(instance, '_deferred_fk_instance'):
+                                setattr(instance._deferred_fk_instance, lh_field.attname, new_pk)
+        if value is None:
+            # Look up the previously-related object, which may still be available
+            # since we've not yet cleared out the related field.
+            related = self.field.get_cached_value(instance, default=None)
+            if related is not None:
+                remote_field.set_cached_value(related, None)
+            for lh_field, rh_field in self.field.related_fields:
+                setattr(instance, lh_field.attname, None)
+        else:
+            # Set the values of the related field
+            for lh_field, rh_field in self.field.related_fields:
+                pk_value = getattr(value, rh_field.attname)
+                if pk_value is None and isinstance(rh_field, models.CharField):
+                    # For CharField PKs, use an empty string initially and set up a callback
+                    setattr(instance, lh_field.attname, '')
+                    def _update_fk(sender, instance=value, **kwargs):
+                        if hasattr(instance, '_pending_fk_instances'):
+                            pk_value = getattr(instance, rh_field.attname)
+                            if pk_value:
+                                for pending_instance in instance._pending_fk_instances:
+                                    setattr(pending_instance, lh_field.attname, pk_value)
+                                    if not pending_instance._state.adding:
+                                        pending_instance.save(update_fields=[lh_field.attname])
+                    if not hasattr(value, '_pending_fk_instances'):
+                        value._pending_fk_instances = set()
+                        signals.post_save.connect(_update_fk, sender=value.__class__, weak=False)
+                    value._pending_fk_instances.add(instance)
+                else:
+                    setattr(instance, lh_field.attname, pk_value)
 
-        # Set the related instance cache used by __get__ to avoid an SQL query
-        # when accessing the attribute we just set.
-        self.field.set_cached_value(instance, value)
+            # Set the related instance cache used by __get__ to avoid an SQL query
+            # when accessing the attribute we just set.
+            self.field.set_cached_value(instance, value)
 
-        # If this is a one-to-one relation, set the reverse accessor cache on
-        # the related object to the current instance to avoid an extra SQL
-        # query if it's accessed later on.
-        if value is not None and not remote_field.multiple:
-            remote_field.set_cached_value(value, instance)
+            # If this is a one-to-one relation, set the reverse accessor cache on
+            # the related object to the current instance to avoid an extra SQL
+            # query if it's accessed later on.
+            if not remote_field.multiple:
+                remote_field.set_cached_value(value, instance)
 
     def __reduce__(self):
         """
         Pickling should return the instance attached by self.field on the
+
         model, not a new copy of that descriptor. Use getattr() to retrieve
         the instance directly from the model.
         """
         return getattr, (self.field.model, self.field.name)
 
-
 class ForwardOneToOneDescriptor(ForwardManyToOneDescriptor):
     """
     Accessor to the related object on the forward side of a one-to-one relation.
@@ -1203,3 +1243,11 @@ def create_forward_many_to_many_manager(superclass, rel, reverse):
                 )
 
     return ManyRelatedManager
+
+
+
+
+
+
+
+
diff --git "a/django/db/models/fields/related_descriptors.py\"" "b/django/db/models/fields/related_descriptors.py\""
new file mode 100644
index 0000000000..a44c4149d6
--- /dev/null
+++ "b/django/db/models/fields/related_descriptors.py\""
@@ -0,0 +1,41 @@
+def __set__(self, instance, value):
+        """
+        Set the related instance through the forward relation.
+
+        With the example above, when setting ``child.parent = parent``:
+
+        - ``self`` is the descriptor managing the ``parent`` attribute
+        - ``instance`` is the ``child`` instance
+        - ``value`` is the ``parent`` instance on the right of the equal sign
+        """
+        # An object must be an instance of the related class.
+        if value is not None and not isinstance(value, self.field.remote_field.model._meta.concrete_model):
+            raise ValueError(
+                'Cannot assign "%r": "%s.%s" must be a "%s" instance.' % (
+                    value,
+                    instance._meta.object_name,
+                    self.field.name,
+                    self.field.remote_field.model._meta.object_name,
+                )
+            )
+        elif value is not None:
+            if instance._state.db is None:
+                instance._state.db = router.db_for_write(instance.__class__, instance=value)
+            if value._state.db is None:
+                value._state.db = router.db_for_write(value.__class__, instance=instance)
+            if not router.allow_relation(value, instance):
+                raise ValueError('Cannot assign "%r": the current database router prevents this relation.' % value)
+
+        remote_field = self.field.remote_field
+        # If we're setting the value of a OneToOneField to None, we need to clear
+        # out the cache on any old related object. Otherwise, deleting the
+        # previously-related object will also cause this object to be deleted,
+        # which is wrong.
+        if value is None:
+            # Look up the previously-related object, which may still be available
+            # since we've not yet cleared out the related field.
+            related = self.field.get_cached_value(instance, default=None)
+            if related is not None:
+                remote_field.set_cached_value(related, None)
+            for lh_field, rh_field in self.field.related_fields:
+                setattr(instance, lh_field.attname, None)
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..7f97841a38
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,78 @@
+import os
+import django
+from django.db import models, transaction
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.settings')
+from django.conf import settings
+settings.configure(
+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+    INSTALLED_APPS=['django.contrib.contenttypes'],
+    DEFAULT_AUTO_FIELD='django.db.models.AutoField'
+)
+django.setup()
+
+# Define the models
+class Product(models.Model):
+    sku = models.CharField(primary_key=True, max_length=50)
+    
+    class Meta:
+        app_label = 'testapp'
+        managed = False
+
+class Order(models.Model):
+    product = models.ForeignKey(Product, on_delete=models.CASCADE)
+    
+    class Meta:
+        app_label = 'testapp'
+        managed = False
+
+# Drop all tables first
+from django.db import connection
+with connection.cursor() as cursor:
+    cursor.execute("DROP TABLE IF EXISTS testapp_order")
+    cursor.execute("DROP TABLE IF EXISTS testapp_product")
+
+# Create tables
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Product)
+    schema_editor.create_model(Order)
+
+def test_case_1():
+    """Should fail - setting primary key after assignment"""
+    try:
+        with transaction.atomic():
+            order = Order()
+            order.product = Product()
+            order.product.sku = "foo"
+            order.product.save()
+            order.save()
+            print("Test 1 - product_id value:", Order.objects.get(pk=order.pk).product_id)
+            assert not Order.objects.filter(product_id="").exists(), "Should not have empty product_id"
+            assert Order.objects.filter(product=order.product).exists(), "Should find order with product"
+        print("Test 1: PASS")
+    except AssertionError as e:
+        print("Test 1 failed (assertion):", str(e))
+    except Exception as e:
+        print("Test 1 failed (error):", str(e))
+
+def test_case_2():
+    """Should pass - setting primary key before assignment"""
+    try:
+        with transaction.atomic():
+            order = Order()
+            order.product = Product(sku="bar")
+            order.product.save()
+            order.save()
+            print("Test 2 - product_id value:", Order.objects.get(pk=order.pk).product_id)
+            assert Order.objects.filter(product=order.product).exists()
+        print("Test 2: PASS")
+    except AssertionError as e:
+        print("Test 2 failed (assertion):", str(e))
+    except Exception as e:
+        print("Test 2 failed (error):", str(e))
+
+if __name__ == '__main__':
+    test_case_1()
+    test_case_2()
+
