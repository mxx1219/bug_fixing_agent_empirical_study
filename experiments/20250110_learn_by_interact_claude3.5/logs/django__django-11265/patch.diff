diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index d69c24419b..80bdc5f1df 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1665,7 +1665,8 @@ class Query(BaseExpression):
         if isinstance(filter_rhs, F):
             filter_expr = (filter_lhs, OuterRef(filter_rhs.name))
         # Generate the inner query.
-        query = Query(self.model)
+        # Clone the current query with annotations
+        query = self.clone()
         query.add_filter(filter_expr)
         query.clear_ordering(True)
         # Try to have as simple as possible subquery -> trim leading joins from
@@ -2300,3 +2301,4 @@ class JoinPromoter:
         query.promote_joins(to_promote)
         query.demote_joins(to_demote)
         return to_demote
+
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..72ea500b36
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,57 @@
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth'],
+    MIDDLEWARE=[],
+)
+django.setup()
+
+from django.db import models, connection
+from django.db.models import Q, FilteredRelation
+
+# Define models
+class Author(models.Model):
+    name = models.CharField(max_length=100)
+    class Meta:
+        app_label = 'auth'
+
+class Book(models.Model):
+    author = models.ForeignKey(Author, on_delete=models.CASCADE, related_name='book')
+    title = models.CharField(max_length=100)
+    class Meta:
+        app_label = 'auth'
+
+def run_test():
+    # Create tables
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(Author)
+        schema_editor.create_model(Book)
+    
+    # Create test data
+    author1 = Author.objects.create(name="Author 1")
+    book1 = Book.objects.create(author=author1, title="Poem by Alice")
+    
+    # Test exclude
+    try:
+        result = Author.objects.annotate(
+            book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice'))
+        ).exclude(book_alice__isnull=False)
+        print("Query:", str(result.query))
+        print("Result:", list(result))
+    except Exception as e:
+        print("Error:", str(e))
+        raise
+
+if __name__ == '__main__':
+    run_test()
+
