diff --git a/django/db/models/base.py b/django/db/models/base.py
index 4038859cfa..cd22b0af22 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -1297,28 +1297,43 @@ class Model(metaclass=ModelBase):
 
     @classmethod
     def _check_default_pk(cls):
-        if (
-            cls._meta.pk.auto_created and
-            not settings.is_overridden('DEFAULT_AUTO_FIELD') and
-            not cls._meta.app_config._is_default_auto_field_overridden
-        ):
-            return [
-                checks.Warning(
-                    f"Auto-created primary key used when not defining a "
-                    f"primary key type, by default "
-                    f"'{settings.DEFAULT_AUTO_FIELD}'.",
-                    hint=(
-                        f"Configure the DEFAULT_AUTO_FIELD setting or the "
-                        f"{cls._meta.app_config.__class__.__qualname__}."
-                        f"default_auto_field attribute to point to a subclass "
-                        f"of AutoField, e.g. 'django.db.models.BigAutoField'."
+
+        if cls._meta.pk.auto_created:
+            # Check if we inherit primary key from a parent model
+            for parent in cls._meta.get_parent_list():
+                if (
+                    not parent._meta.abstract and  # Only check concrete models
+                    any(f.primary_key for f in parent._meta.local_fields)  # Has explicit PK
+                ):
+                    # Primary key is inherited from parent - no warning needed
+                    return []
+
+
+            # No parent defines primary key, check if we need to warn
+            if (
+                not settings.is_overridden('DEFAULT_AUTO_FIELD') and
+                not cls._meta.app_config._is_default_auto_field_overridden
+            ):
+                return [
+                    checks.Warning(
+                        f"Auto-created primary key used when not defining a "
+                        f"primary key type, by default "
+                        f"'{settings.DEFAULT_AUTO_FIELD}'.",
+                        hint=(
+                            f"Configure the DEFAULT_AUTO_FIELD setting or the "
+                            f"{cls._meta.app_config.__class__.__qualname__}."
+                            f"default_auto_field attribute to point to a subclass "
+                            f"of AutoField, e.g. 'django.db.models.BigAutoField'."
+                        ),
+                        obj=cls,
+                        id='models.W042',
                     ),
-                    obj=cls,
-                    id='models.W042',
-                ),
-            ]
+                ]
         return []
 
+
+
+
     @classmethod
     def _check_swappable(cls):
         """Check if the swapped model exists."""
@@ -2137,3 +2152,21 @@ def model_unpickle(model_id):
 
 
 model_unpickle.__safe_for_unpickle__ = True
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
diff --git "a/django/db/models/base.py\"" "b/django/db/models/base.py\""
new file mode 100644
index 0000000000..b910aa14d5
--- /dev/null
+++ "b/django/db/models/base.py\""
@@ -0,0 +1,34 @@
+    @classmethod
+    def _check_default_pk(cls):
+        if cls._meta.pk.auto_created:
+            # Check if we inherit primary key from a parent model
+            for parent in cls._meta.get_parent_list():
+                if (
+                    not parent._meta.abstract and  # Only check concrete models
+                    any(f.primary_key for f in parent._meta.local_fields)  # Has explicit PK
+                ):
+                    # Primary key is inherited from parent - no warning needed
+                    return []
+
+            # No parent defines primary key, check if we need to warn
+            if (
+                not settings.is_overridden('DEFAULT_AUTO_FIELD') and
+                not cls._meta.app_config._is_default_auto_field_overridden
+            ):
+                return [
+                    checks.Warning(
+                        f"Auto-created primary key used when not defining a "
+                        f"primary key type, by default "
+                        f"'{settings.DEFAULT_AUTO_FIELD}'.",
+                        hint=(
+                            f"Configure the DEFAULT_AUTO_FIELD setting or the "
+                            f"{cls._meta.app_config.__class__.__qualname__}."
+                            f"default_auto_field attribute to point to a subclass "
+                            f"of AutoField, e.g. 'django.db.models.BigAutoField'."
+                        ),
+                        obj=cls,
+                        id='models.W042',
+                    ),
+                ]
+        return []
+
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..119ec18b07
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,42 @@
+from django.conf import settings
+from django.apps import apps
+
+settings.configure(
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:'
+        }
+    }
+)
+
+import django
+django.setup()
+
+from django.db import models
+from django.core import checks
+
+# Parent model with explicit primary key
+class Entity(models.Model):
+    id = models.AutoField(primary_key=True)
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'testapp'
+
+# Child model that should inherit primary key
+class User(Entity):
+    email = models.EmailField()
+    
+    class Meta:
+        app_label = 'testapp'
+
+# Run model checks
+print("Running model checks...")
+issues = checks.run_checks()
+for issue in issues:
+    if isinstance(issue.obj, type) and issubclass(issue.obj, models.Model):
+        print(f"{issue.obj.__name__}: {issue.msg} (ID: {issue.id})")
