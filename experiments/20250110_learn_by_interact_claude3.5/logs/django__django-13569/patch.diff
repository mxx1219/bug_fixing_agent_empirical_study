diff --git a/django/db/models/functions/math.py b/django/db/models/functions/math.py
index 304e112225..15d6939b90 100644
--- a/django/db/models/functions/math.py
+++ b/django/db/models/functions/math.py
@@ -145,6 +145,11 @@ class Random(NumericOutputFieldMixin, Func):
     function = 'RANDOM'
     arity = 0
 
+    def get_group_by_cols(self, alias=None):
+        # Random expressions should not be included in GROUP BY
+        return []
+
+
     def as_mysql(self, compiler, connection, **extra_context):
         return super().as_sql(compiler, connection, function='RAND', **extra_context)
 
@@ -178,3 +183,4 @@ class Sqrt(NumericOutputFieldMixin, Transform):
 class Tan(NumericOutputFieldMixin, Transform):
     function = 'TAN'
     lookup_name = 'tan'
+
diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index 04e430a42e..c7f1954174 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -126,10 +126,11 @@ class SQLCompiler:
             for col in cols:
                 expressions.append(col)
         for expr, (sql, params, is_ref) in order_by:
-            # Skip References to the select clause, as all expressions in the
-            # select clause are already part of the group by.
-            if not is_ref:
+            # Skip References to the select clause and Random expressions,
+            # as they should not be part of the group by.
+            if not is_ref and not isinstance(expr, Random):
                 expressions.extend(expr.get_group_by_cols())
+
         having_group_by = self.having.get_group_by_cols() if self.having else ()
         for expr in having_group_by:
             expressions.append(expr)
@@ -1611,3 +1612,4 @@ def cursor_iter(cursor, sentinel, col_count, itersize):
             yield rows if col_count is None else [r[:col_count] for r in rows]
     finally:
         cursor.close()
+
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..886ebee960
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,55 @@
+import os
+import django
+from django.db import models
+from django.db.models import Count
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.settings')
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=['django.contrib.contenttypes']
+    )
+django.setup()
+
+# Define models
+class Thing(models.Model):
+    class Meta:
+        app_label = 'contenttypes'
+
+class Related(models.Model):
+    thing = models.ForeignKey(Thing, on_delete=models.CASCADE)
+    class Meta:
+        app_label = 'contenttypes'
+
+# Create tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Thing)
+    schema_editor.create_model(Related)
+
+# Create test data
+t = Thing.objects.create()
+rs = [Related.objects.create(thing=t) for _ in range(2)]
+
+# Run queries
+print("\nQuery 1 (expected behavior):")
+result = list(Thing.objects.annotate(rc=Count('related')).order_by('rc').values('id', 'rc'))
+print(result)
+
+print("\nQuery 2 (expected behavior):")
+result = list(Thing.objects.annotate(rc=Count('related')).order_by('related').values('id', 'rc'))
+print(result)
+
+print("\nQuery 3 (problematic behavior):")
+result = list(Thing.objects.annotate(rc=Count('related')).order_by('?').values('id', 'rc'))
+print(result)
+
+print("\nSQL for problematic query:")
+print(Thing.objects.annotate(rc=Count('related')).order_by('?').values('id', 'rc').query)
