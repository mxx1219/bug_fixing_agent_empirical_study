diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index c1a76584f0..2928634eff 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -866,6 +866,12 @@ class ExpressionWrapper(Expression):
     def as_sql(self, compiler, connection):
         return self.expression.as_sql(compiler, connection)
 
+    def get_group_by_cols(self, alias=None):
+        # Skip constant expressions in GROUP BY clause
+        if isinstance(self.expression, Value):
+            return []
+        return self.expression.get_group_by_cols(alias)
+
     def __repr__(self):
         return "{}({})".format(self.__class__.__name__, self.expression)
 
@@ -1355,3 +1361,4 @@ class ValueRange(WindowFrame):
 
     def window_frame_start_end(self, connection, start, end):
         return connection.ops.window_frame_range_start_end(start, end)
+
diff --git a/test_expression_wrapper.py b/test_expression_wrapper.py
new file mode 100644
index 0000000000..e9a01908e5
--- /dev/null
+++ b/test_expression_wrapper.py
@@ -0,0 +1,50 @@
+from django.conf import settings
+from django.db import models, connection
+from django.db.models import IntegerField, Value, Sum, ExpressionWrapper
+
+# Configure Django settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[],
+)
+
+import django
+django.setup()
+
+# Create test model
+class MyModel(models.Model):
+    column_a = models.CharField(max_length=100)
+    column_b = models.IntegerField()
+    
+    class Meta:
+        app_label = 'test_app'
+
+# Create the table
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(MyModel)
+
+# Test data
+MyModel.objects.create(column_a='test1', column_b=10)
+MyModel.objects.create(column_a='test1', column_b=20)
+MyModel.objects.create(column_a='test2', column_b=30)
+
+# Function that demonstrates the issue
+def exec_query(expr):
+    expr = ExpressionWrapper(expr, output_field=IntegerField())
+    qs = MyModel.objects.annotate(expr_res=expr).values('expr_res', 'column_a').annotate(sum=Sum('column_b'))
+    print("SQL:", qs.query)
+    return qs
+
+# Test with wrapped constant
+print("\nTest with wrapped constant:")
+qs1 = exec_query(Value(3))
+
+# Test without wrapper (known working case)
+print("\nTest without wrapper (known working case):")
+qs2 = MyModel.objects.annotate(expr_res=Value(3, output_field=IntegerField())).values('expr_res', 'column_a').annotate(sum=Sum('column_b'))
+print("SQL:", qs2.query)
