diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 137e6faa0f..0f54deba87 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -1631,9 +1631,10 @@ class ModelAdmin(BaseModelAdmin):
 
     def _get_edited_object_pks(self, request, prefix):
         """Return POST data values of list_editable primary keys."""
-        pk_pattern = re.compile(r'{}-\d+-{}$'.format(prefix, self.model._meta.pk.name))
+        pk_pattern = re.compile(r'{}-\d+-{}$'.format(re.escape(prefix), self.model._meta.pk.name))
         return [value for key, value in request.POST.items() if pk_pattern.match(key)]
 
+
     def _get_list_editable_queryset(self, request, prefix):
         """
         Based on POST data, return a queryset of the objects that were edited
@@ -2167,3 +2168,4 @@ class StackedInline(InlineModelAdmin):
 
 class TabularInline(InlineModelAdmin):
     template = 'admin/edit_inline/tabular.html'
+
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..5a3107dfb7
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,59 @@
+import re
+from django.conf import settings
+settings.configure(
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+)
+
+import django
+django.setup()
+
+from django.contrib.admin.options import ModelAdmin
+from django.db import models
+from django.http import HttpRequest
+
+# Create a simple model for testing
+class TestModel(models.Model):
+    id = models.AutoField(primary_key=True)
+    name = models.CharField(max_length=100)
+    class Meta:
+        abstract = True
+
+# Create an instance of ModelAdmin
+admin = ModelAdmin(TestModel, admin_site=None)
+
+# Create a mock request with POST data
+request = HttpRequest()
+
+# Test with different problematic prefixes
+test_cases = [
+    '(.*)',           # matches any string
+    'form[0-9]+',     # matches any digit
+    'my+form',        # matches one or more y's
+    'test.form',      # matches any character
+]
+
+for prefix in test_cases:
+    print(f"\nTesting with prefix: {prefix}")
+    # Add multiple POST items with similar patterns
+    request.POST = {
+        f'{prefix}-0-id': '1',          # Should match
+        'someotherform-0-id': '2',      # Should not match
+        f'{prefix}extra-0-id': '3',     # Should not match
+        f'pre{prefix}-0-id': '4',       # Should not match
+    }
+    
+    try:
+        pks = admin._get_edited_object_pks(request, prefix)
+        print("Got PKs:", pks)
+        # Check if we got any unintended matches
+        if len(pks) > 1:
+            print("WARNING: Got unintended matches!")
+    except re.error as e:
+        print("Regex error occurred:", str(e))
+    except Exception as e:
+        print("Other error occurred:", str(e))
+
