diff --git a/lib/matplotlib/mlab.py b/lib/matplotlib/mlab.py
index 3552904c3d..ce3b6b57ae 100644
--- a/lib/matplotlib/mlab.py
+++ b/lib/matplotlib/mlab.py
@@ -395,12 +395,17 @@ def _spectral_helper(x, y=None, NFFT=None, Fs=None, detrend_func=None,
     elif mode == 'psd':
         result = np.conj(result) * result
     elif mode == 'magnitude':
-        result = np.abs(result) / np.abs(window).sum()
+        result = np.abs(result) / window.sum()
     elif mode == 'angle' or mode == 'phase':
         # we unwrap the phase later to handle the onesided vs. twosided case
         result = np.angle(result)
     elif mode == 'complex':
-        result /= np.abs(window).sum()
+        result /= window.sum()
+
+
+
+
+
 
     if mode == 'psd':
 
@@ -424,10 +429,15 @@ def _spectral_helper(x, y=None, NFFT=None, Fs=None, detrend_func=None,
             result /= Fs
             # Scale the spectrum by the norm of the window to compensate for
             # windowing loss; see Bendat & Piersol Sec 11.5.2.
-            result /= (np.abs(window)**2).sum()
+            result /= (window**2).sum()
         else:
             # In this case, preserve power in the segment, not amplitude
-            result /= np.abs(window).sum()**2
+            result /= (window**2).sum()
+
+
+
+
+
 
     t = np.arange(NFFT/2, len(x) - NFFT/2 + 1, NFFT - noverlap)/Fs
 
@@ -985,3 +995,18 @@ class GaussianKDE:
         return result
 
     __call__ = evaluate
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..5f2d9e01ab
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,4 @@
+import numpy as np
+from scipy import signal
+window = signal.windows.flattop(512)
+print(np.abs(window).sum()**2-window.sum()**2)
diff --git a/reproduce_test.py b/reproduce_test.py
new file mode 100644
index 0000000000..c6fd229106
--- /dev/null
+++ b/reproduce_test.py
@@ -0,0 +1,25 @@
+import numpy as np
+from scipy import signal
+import matplotlib
+import os
+print(f"Using matplotlib from: {matplotlib.__file__}")
+print(f"PYTHONPATH: {os.environ.get('PYTHONPATH', 'Not set')}")
+import matplotlib.mlab as mlab
+
+# Test 1: Original issue with window sum
+window = signal.windows.flattop(512)
+print("\nTest 1 - Window sum difference (should be 0):")
+print((window**2).sum() - window.sum()**2)  # This should be non-zero for flattop window
+
+# Test 2: Direct test of _spectral_helper
+# Generate test data with known frequency
+t = np.linspace(0, 1, 1000)
+x = np.sin(2*np.pi*10*t)  # 10 Hz sine wave
+
+# Compare with scipy's implementation
+f_scipy, Pxx_scipy = signal.welch(x, window='flattop', nperseg=512)
+result, freqs, _ = mlab._spectral_helper(x, NFFT=512, window=window, mode='psd')
+
+print("\nTest 2 - Max difference between scipy and matplotlib results:")
+print(np.max(np.abs(Pxx_scipy - result.flatten())))
+
