diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 0fd69059ee..7ad1d15104 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -1499,14 +1499,20 @@ class DecimalField(Field):
             return value
         if isinstance(value, float):
             return self.context.create_decimal_from_float(value)
-        try:
-            return decimal.Decimal(value)
-        except decimal.InvalidOperation:
-            raise exceptions.ValidationError(
-                self.error_messages['invalid'],
-                code='invalid',
-                params={'value': value},
-            )
+        if isinstance(value, (str, int, decimal.Decimal)):
+            try:
+                return decimal.Decimal(value)
+            except decimal.InvalidOperation:
+                raise exceptions.ValidationError(
+                    self.error_messages['invalid'],
+                    code='invalid',
+                    params={'value': value},
+                )
+        raise exceptions.ValidationError(
+            self.error_messages['invalid'],
+            code='invalid',
+            params={'value': value},
+        )
 
     def get_db_prep_save(self, value, connection):
         return connection.ops.adapt_decimalfield_value(self.to_python(value), self.max_digits, self.decimal_places)
@@ -2454,3 +2460,4 @@ class SmallAutoField(AutoFieldMixin, SmallIntegerField):
 
     def rel_db_type(self, connection):
         return SmallIntegerField().db_type(connection=connection)
+
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..ea4563ebb8
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,40 @@
+from django.conf import settings
+settings.configure(
+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+    INSTALLED_APPS=['django.contrib.contenttypes'],
+)
+
+import django
+django.setup()
+
+from django.db import models
+from django.core.exceptions import ValidationError
+from decimal import Decimal
+
+# Create a model with a DecimalField
+class TestModel(models.Model):
+    amount = models.DecimalField(max_digits=10, decimal_places=2)
+    class Meta:
+        app_label = 'testapp'
+
+def test_value(value):
+    try:
+        field = TestModel._meta.get_field('amount')
+        result = field.to_python(value)
+        print(f"Success converting {type(value).__name__}({value}) -> {type(result).__name__}({result})")
+    except Exception as e:
+        print(f"Converting {type(value).__name__}({value}):")
+        print(f"  Exception type: {type(e).__name__}")
+        print(f"  Exception message: {str(e)}")
+
+# Test cases
+print("\nTesting various inputs:")
+test_value({'invalid': 'dict'})  # Should raise ValidationError
+test_value([1, 2, 3])  # Should raise ValidationError
+test_value("123.45")  # Should work
+test_value(123.45)  # Should work
+test_value(123)  # Should work
+test_value(Decimal("123.45"))  # Should work
+test_value(None)  # Should work
+test_value("invalid")  # Should raise ValidationError with proper message
+
