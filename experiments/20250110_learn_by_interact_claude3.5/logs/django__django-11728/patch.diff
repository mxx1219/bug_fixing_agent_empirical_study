diff --git a/django/contrib/admindocs/utils.py b/django/contrib/admindocs/utils.py
index 1ce4594501..ba5f3b2ff5 100644
--- a/django/contrib/admindocs/utils.py
+++ b/django/contrib/admindocs/utils.py
@@ -166,27 +166,32 @@ def replace_named_groups(pattern):
     for start, end, group_name in named_group_indices:
         # Handle nested parentheses, e.g. '^(?P<a>(x|y))/b'.
         unmatched_open_brackets, prev_char = 1, None
+        # Default to the rest of the pattern if no closing parenthesis is found
+        group_end = len(pattern)
+        
         for idx, val in enumerate(pattern[end:]):
-            # If brackets are balanced, the end of the string for the current
-            # named capture group pattern has been reached.
-            if unmatched_open_brackets == 0:
-                group_pattern_and_name.append((pattern[start:end + idx], group_name))
-                break
-
             # Check for unescaped `(` and `)`. They mark the start and end of a
             # nested group.
             if val == '(' and prev_char != '\\':
                 unmatched_open_brackets += 1
             elif val == ')' and prev_char != '\\':
                 unmatched_open_brackets -= 1
+                if unmatched_open_brackets == 0:
+                    group_end = end + idx + 1
+                    break
             prev_char = val
+        
+        group_pattern_and_name.append((pattern[start:group_end], group_name))
 
     # Replace the string for named capture groups with their group names.
+    # Sort by length descending to handle nested groups correctly
+    group_pattern_and_name.sort(key=lambda x: len(x[0]), reverse=True)
     for group_pattern, group_name in group_pattern_and_name:
         pattern = pattern.replace(group_pattern, group_name)
     return pattern
 
 
+
 def replace_unnamed_groups(pattern):
     r"""
     Find unnamed groups in `pattern` and replace them with '<var>'. E.g.,
@@ -235,3 +240,4 @@ def replace_unnamed_groups(pattern):
         return ''.join(final_pattern)
     else:
         return pattern
+
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..545b5e4a38
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,29 @@
+from django.contrib.admindocs.utils import replace_named_groups, named_group_matcher
+
+def test_replace_named_groups():
+    test_cases = [
+        # Original test cases
+        r'entries/(?P<pk>[^/.]+)/relationships/(?P<related_field>\w+)',
+        r'entries/(?P<pk>[^/.]+)/relationships/(?P<related_field>\w+)/',
+        r'entries/(?P<name>\w+)',
+        r'entries/(?P<pk>[^/.]+)/(?P<slug>[\w-]+)/(?P<field>\d+)',
+        r'entries/(?P<complex>(foo|bar)+)/(?P<name>\w+)',
+        # Additional edge cases
+        r'(?P<start>^\w+)',  # Named group at start
+        r'(?P<a>\w+)(?P<b>\w+)(?P<c>\w+)',  # Adjacent groups
+        r'(?P<outer>foo/(?P<inner>\w+)/bar)',  # Nested named groups
+        r'(?P<a>foo\(bar\))/(?P<b>\w+)',  # Escaped parentheses
+        r'(?P<empty>)',  # Empty group
+    ]
+    
+    for pattern in test_cases:
+        print(f"\nInput pattern:  {pattern}")
+        result = replace_named_groups(pattern)
+        print(f"Result:         {result}")
+        # Check if all named groups were replaced
+        remaining_groups = [m.group(1) for m in named_group_matcher.finditer(result)]
+        print(f"Remaining named groups: {remaining_groups}")
+
+if __name__ == '__main__':
+    test_replace_named_groups()
+
