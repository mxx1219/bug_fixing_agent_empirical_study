diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index dddf7c679c..79c8be5db2 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -141,11 +141,12 @@ class CreateModel(ModelOperation):
                 CreateModel(
                     self.name,
                     fields=self.fields,
-                    options={**self.options, **operation.options},
+                    options=operation.options,  # Use operation.options directly instead of merging
                     bases=self.bases,
                     managers=self.managers,
                 ),
             ]
+
         elif isinstance(operation, AlterTogetherOptionOperation) and self.name_lower == operation.name_lower:
             return [
                 CreateModel(
@@ -905,3 +906,4 @@ class RemoveConstraint(IndexOperation):
     @property
     def migration_name_fragment(self):
         return 'remove_%s_%s' % (self.model_name_lower, self.name.lower())
+
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..bde6fa659a
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,24 @@
+from django.db.migrations.operations.models import CreateModel, AlterModelOptions
+
+# Create initial model with some options
+create_op = CreateModel(
+    name="test_model",
+    fields=[],
+    options={"verbose_name": "Test Model", "indexes": []}
+)
+
+# Try to alter model options to empty dict
+alter_op = AlterModelOptions(
+    name="test_model",
+    options={}
+)
+
+# Reduce should merge these operations
+result = create_op.reduce(alter_op, "testapp")
+
+if result:
+    new_create_op = result[0]
+    print("Original options:", create_op.options)
+    print("New options:", new_create_op.options)
+    # The new options should be empty since AlterModelOptions has empty options
+    assert new_create_op.options == {}, "Options should be empty but got: %s" % new_create_op.options
