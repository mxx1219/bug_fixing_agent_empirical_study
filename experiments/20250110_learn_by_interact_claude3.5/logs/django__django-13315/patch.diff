diff --git a/django/forms/models.py b/django/forms/models.py
index 5d115458a1..e3eb8f0e36 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -100,7 +100,7 @@ def apply_limit_choices_to_to_formfield(formfield):
     if hasattr(formfield, 'queryset') and hasattr(formfield, 'get_limit_choices_to'):
         limit_choices_to = formfield.get_limit_choices_to()
         if limit_choices_to is not None:
-            formfield.queryset = formfield.queryset.complex_filter(limit_choices_to)
+            formfield.queryset = formfield.queryset.complex_filter(limit_choices_to).distinct()
 
 
 def fields_for_model(model, fields=None, exclude=None, widgets=None,
@@ -1399,3 +1399,4 @@ def modelform_defines_fields(form_class):
         form_class._meta.fields is not None or
         form_class._meta.exclude is not None
     )
+
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..7fe5a857e1
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,50 @@
+from django.conf import settings
+from django.db import models
+from django.forms import modelform_factory
+from django.db.models import Q
+
+# Configure Django settings
+settings.configure(
+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+    INSTALLED_APPS=['django.contrib.contenttypes'],
+    DEFAULT_AUTO_FIELD='django.db.models.AutoField',
+)
+
+import django
+django.setup()
+
+# Create test models
+class Author(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'contenttypes'
+
+class Book(models.Model):
+    title = models.CharField(max_length=100)
+    author = models.ForeignKey(Author, on_delete=models.CASCADE, limit_choices_to=Q(book__published=True))
+    published = models.BooleanField(default=True)
+    
+    class Meta:
+        app_label = 'contenttypes'
+
+# Create test data
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Author)
+    schema_editor.create_model(Book)
+
+# Create an author and multiple books
+author = Author.objects.create(name='Test Author')
+Book.objects.create(title='Book 1', author=author, published=True)
+Book.objects.create(title='Book 2', author=author, published=True)
+
+# Create form for Book model
+BookForm = modelform_factory(Book, fields=['author'])
+
+# Get form and check for duplicates
+form = BookForm()
+queryset = form.fields['author'].queryset
+print("Number of authors:", queryset.count())
+print("Number of unique authors:", queryset.distinct().count())
+print("Authors in queryset:", list(queryset.values_list('name', flat=True)))
