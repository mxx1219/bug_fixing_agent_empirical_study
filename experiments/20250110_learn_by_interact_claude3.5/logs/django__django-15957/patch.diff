diff --git a/django/db/models/query.py b/django/db/models/query.py
index be0deb90b0..b89043f85e 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -1439,7 +1439,16 @@ class QuerySet:
 
     def _filter_or_exclude(self, negate, args, kwargs):
         if (args or kwargs) and self.query.is_sliced:
+            # Allow filtering on sliced querysets during prefetch_related
+            clone = self._chain()
+            if hasattr(self.query, '_prefetch_limits'):
+                # We're in a prefetch operation, allow filtering but preserve limits
+                low_mark, high_mark = self.query._prefetch_limits
+                clone.query.set_limits(low_mark, high_mark)
+                clone._filter_or_exclude_inplace(negate, args, kwargs)
+                return clone
             raise TypeError("Cannot filter a query once a slice has been taken.")
+
         clone = self._chain()
         if self._defer_next_filter:
             self._defer_next_filter = False
@@ -2188,9 +2197,22 @@ class Prefetch:
 
     def get_current_queryset(self, level):
         if self.get_current_prefetch_to(level) == self.prefetch_to:
+            if self.queryset is not None and self.queryset.query.is_sliced:
+                # For sliced querysets, create a fresh clone
+                clone = self.queryset._chain()
+                # Store the slice limits for later
+                limits = (clone.query.low_mark, clone.query.high_mark)
+                # Clear the slice to allow filtering
+                clone.query.set_limits(None, None)
+                # Store original limits on the query object to restore them later
+                clone.query._prefetch_limits = limits
+                return clone
             return self.queryset
         return None
 
+
+
+
     def __eq__(self, other):
         if not isinstance(other, Prefetch):
             return NotImplemented
@@ -2472,8 +2494,15 @@ def prefetch_one_level(instances, prefetcher, lookup, level):
         # for performance reasons.
         rel_qs._prefetch_related_lookups = ()
 
+    # Restore slice limits if they were stored earlier
+    if hasattr(rel_qs.query, '_prefetch_limits'):
+        low_mark, high_mark = rel_qs.query._prefetch_limits
+        rel_qs.query.set_limits(low_mark=low_mark, high_mark=high_mark)
+        del rel_qs.query._prefetch_limits
+
     all_related_objects = list(rel_qs)
 
+
     rel_obj_cache = {}
     for rel_obj in all_related_objects:
         rel_attr_val = rel_obj_attr(rel_obj)
@@ -2624,3 +2653,23 @@ def get_related_populators(klass_info, select, db):
         rel_cls = RelatedPopulator(rel_klass_info, select, db)
         iterators.append(rel_cls)
     return iterators
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
diff --git "a/django/db/models/query.py\"" "b/django/db/models/query.py\""
new file mode 100644
index 0000000000..d65205efbd
--- /dev/null
+++ "b/django/db/models/query.py\""
@@ -0,0 +1,12 @@
+def get_current_queryset(self, level):
+        if self.get_current_prefetch_to(level) == self.prefetch_to:
+            if self.queryset is not None and self.queryset.query.is_sliced:
+                # For sliced querysets, clone and preserve slice limits
+                clone = self.queryset._chain()
+                clone.query.high_mark = self.queryset.query.high_mark
+                clone.query.low_mark = self.queryset.query.low_mark
+                # Allow filtering by temporarily removing slice flag
+                clone.query.is_sliced = False
+                return clone
+            return self.queryset
+        return None
