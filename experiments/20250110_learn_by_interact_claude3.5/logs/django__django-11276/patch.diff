diff --git a/benchmark_escape.py b/benchmark_escape.py
new file mode 100644
index 0000000000..55f5745f49
--- /dev/null
+++ b/benchmark_escape.py
@@ -0,0 +1,20 @@
+import timeit
+
+django_setup = '''
+from django.utils.html import escape
+'''
+
+stdlib_setup = '''
+import html
+from django.utils.safestring import mark_safe
+def escape(text):
+    return mark_safe(html.escape(str(text)))
+'''
+
+test_code = 'escape(copyright)'
+
+print("Django's escape:")
+print(timeit.repeat(stmt=test_code, setup=django_setup, number=50000, repeat=5))
+
+print("\nStdlib's escape:")
+print(timeit.repeat(stmt=test_code, setup=stdlib_setup, number=50000, repeat=5))
diff --git a/django/utils/html.py b/django/utils/html.py
index 9c519978f5..b46d03d1de 100644
--- a/django/utils/html.py
+++ b/django/utils/html.py
@@ -1,5 +1,6 @@
 """HTML utilities suitable for global use."""
 
+import html as _html
 import json
 import re
 from html.parser import HTMLParser
@@ -24,14 +25,6 @@ word_split_re = re.compile(r'''([\s<>"']+)''')
 simple_url_re = re.compile(r'^https?://\[?\w', re.IGNORECASE)
 simple_url_2_re = re.compile(r'^www\.|^(?!http)\w[^@]+\.(com|edu|gov|int|mil|net|org)($|/.*)$', re.IGNORECASE)
 
-_html_escapes = {
-    ord('&'): '&amp;',
-    ord('<'): '&lt;',
-    ord('>'): '&gt;',
-    ord('"'): '&quot;',
-    ord("'"): '&#39;',
-}
-
 
 @keep_lazy(str, SafeString)
 def escape(text):
@@ -43,7 +36,7 @@ def escape(text):
     This may result in double-escaping. If this is a concern, use
     conditional_escape() instead.
     """
-    return mark_safe(str(text).translate(_html_escapes))
+    return mark_safe(_html.escape(str(text)))
 
 
 _js_escapes = {
@@ -388,3 +381,4 @@ def html_safe(klass):
     klass.__str__ = lambda self: mark_safe(klass_str(self))
     klass.__html__ = lambda self: str(self)
     return klass
+
diff --git a/test_escape.py b/test_escape.py
new file mode 100644
index 0000000000..1bbbe29b8c
--- /dev/null
+++ b/test_escape.py
@@ -0,0 +1,35 @@
+from django.utils.html import escape
+from django.utils.safestring import mark_safe
+
+test_cases = [
+    # Basic HTML characters
+    ('<>"&\'', '&lt;&gt;&quot;&amp;&#x27;'),  # Note: stdlib uses &#x27; instead of &#39;
+    
+    # Already escaped content
+    ('&lt;&gt;', '&amp;lt;&amp;gt;'),  # Should double-escape as mentioned in docstring
+    
+    # Mixed content
+    ('Hello <world> & "quotes"', 'Hello &lt;world&gt; &amp; &quot;quotes&quot;'),
+    
+    # Non-string types
+    (42, '42'),
+    (None, 'None'),
+    
+    # Empty string
+    ('', ''),
+    
+    # Unicode characters
+    ('Hello 世界', 'Hello 世界'),  # Non-HTML Unicode should be preserved
+    
+    # SafeString input (should still escape)
+    (mark_safe('<b>bold</b>'), '&lt;b&gt;bold&lt;/b&gt;'),
+]
+
+for input_text, expected in test_cases:
+    result = escape(input_text)
+    if str(result) != expected:
+        print(f'FAIL: input={input_text!r}')
+        print(f'  expected={expected!r}')
+        print(f'  got     ={result!r}')
+    else:
+        print(f'PASS: {input_text!r}')
