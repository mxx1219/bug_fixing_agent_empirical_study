diff --git a/django/utils/functional.py b/django/utils/functional.py
index 6d38f932f9..d918e69551 100644
--- a/django/utils/functional.py
+++ b/django/utils/functional.py
@@ -176,7 +176,26 @@ def lazy(func, *resultclasses):
                 return str(self) % rhs
             return self.__cast() % rhs
 
+        def __add__(self, other):
+            # Handle string concatenation with lazy strings
+            if self._delegate_text:
+                # Create a new lazy object that will concatenate the strings when evaluated
+                def _concat():
+                    return str(self) + str(other)
+                return lazy(_concat, str)()
+            return self.__cast() + other
+
+        def __radd__(self, other):
+            # Handle string concatenation when the lazy string is on the right side
+            if self._delegate_text:
+                # Create a new lazy object that will concatenate the strings when evaluated
+                def _concat():
+                    return str(other) + str(self)
+                return lazy(_concat, str)()
+            return other + self.__cast()
+
         def __deepcopy__(self, memo):
+
             # Instances of this class are effectively immutable. It's just a
             # collection of functions. So we don't need to do anything
             # complicated for copying.
@@ -415,3 +434,4 @@ def partition(predicate, values):
     for item in values:
         results[predicate(item)].append(item)
     return results
+
diff --git "a/django/utils/functional.py\"" "b/django/utils/functional.py\""
new file mode 100644
index 0000000000..f6d6a30794
--- /dev/null
+++ "b/django/utils/functional.py\""
@@ -0,0 +1,21 @@
+return self.__cast() % rhs
+
+        def __add__(self, other):
+            # Handle string concatenation with lazy strings
+            if self._delegate_text:
+                # Create a new lazy object that will concatenate the strings when evaluated
+                def _concat():
+                    return str(self) + str(other)
+                return lazy(_concat, str)()
+            return self.__cast() + other
+
+        def __radd__(self, other):
+            # Handle string concatenation when the lazy string is on the right side
+            if self._delegate_text:
+                # Create a new lazy object that will concatenate the strings when evaluated
+                def _concat():
+                    return str(other) + str(self)
+                return lazy(_concat, str)()
+            return other + self.__cast()
+
+        def __deepcopy__(self, memo):
diff --git a/test_lazy_add.py b/test_lazy_add.py
new file mode 100644
index 0000000000..069594f330
--- /dev/null
+++ b/test_lazy_add.py
@@ -0,0 +1,25 @@
+from django.utils.functional import lazy
+
+def get_string():
+    return "world"
+
+lazy_string = lazy(get_string, str)()
+normal_string = "hello "
+
+try:
+    # Test normal + lazy
+    result1 = normal_string + lazy_string
+    print("Success (normal + lazy):", result1)
+
+    # Test lazy + normal
+    result2 = lazy_string + normal_string
+    print("Success (lazy + normal):", result2)
+
+    # Test lazy + lazy
+    lazy_string2 = lazy(lambda: "!", str)()
+    result3 = lazy_string + lazy_string2
+    print("Success (lazy + lazy):", result3)
+
+except TypeError as e:
+    print("Error:", e)
+
