diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index d69c24419b..1951173a7f 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1666,6 +1666,9 @@ class Query(BaseExpression):
             filter_expr = (filter_lhs, OuterRef(filter_rhs.name))
         # Generate the inner query.
         query = Query(self.model)
+        # Copy filtered relations to preserve FilteredRelation
+        query._filtered_relations = self._filtered_relations.copy()
+        # Add the filter after setting up filtered relations
         query.add_filter(filter_expr)
         query.clear_ordering(True)
         # Try to have as simple as possible subquery -> trim leading joins from
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..6c8ce97608
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,91 @@
+import django
+from django.conf import settings
+import os
+
+# Configure minimal settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+    MIDDLEWARE=[],
+)
+django.setup()
+
+from django.db import models
+from django.test import TestCase
+from django.db.models import Q
+from django.db.models.query import FilteredRelation
+
+# Models
+class Author(models.Model):
+    class Meta:
+        app_label = 'auth'  # Use existing app
+    name = models.CharField(max_length=100)
+
+class Book(models.Model):
+    class Meta:
+        app_label = 'auth'  # Use existing app
+    author = models.ForeignKey(Author, on_delete=models.CASCADE)
+    title = models.CharField(max_length=100)
+    genre = models.CharField(max_length=100)
+
+def run_test():
+    # Create the schema
+    from django.db import connection
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(Author)
+        schema_editor.create_model(Book)
+
+    # Create test data
+    author1 = Author.objects.create(name='Author 1')
+    author2 = Author.objects.create(name='Author 2')
+    
+    Book.objects.create(author=author1, title='Poem by Alice', genre='poetry')
+    Book.objects.create(author=author1, title='Story by Alice', genre='fiction')
+    Book.objects.create(author=author2, title='Another Book', genre='fiction')
+
+    # Test case 1: Basic exclude with FilteredRelation
+    try:
+        qs = Author.objects.annotate(
+            book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),
+        ).exclude(book_alice__isnull=False)
+        print("Test 1 - Basic exclude:")
+        print(f"Results: {[a.name for a in qs]}")
+    except Exception as e:
+        print(f"Test 1 failed: {str(e)}")
+
+    # Test case 2: Multiple FilteredRelations with exclude
+    try:
+        qs = Author.objects.annotate(
+            book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),
+            book_fiction=FilteredRelation('book', condition=Q(book__genre='fiction')),
+        ).exclude(
+            Q(book_alice__isnull=False) | Q(book_fiction__isnull=False)
+        )
+        print("\nTest 2 - Multiple FilteredRelations:")
+        print(f"Results: {[a.name for a in qs]}")
+    except Exception as e:
+        print(f"Test 2 failed: {str(e)}")
+
+    # Test case 3: Complex conditions in FilteredRelation
+    try:
+        qs = Author.objects.annotate(
+            complex_book=FilteredRelation(
+                'book', 
+                condition=Q(book__title__icontains='alice') & Q(book__genre='poetry')
+            ),
+        ).exclude(complex_book__isnull=False)
+        print("\nTest 3 - Complex conditions:")
+        print(f"Results: {[a.name for a in qs]}")
+    except Exception as e:
+        print(f"Test 3 failed: {str(e)}")
+
+if __name__ == '__main__':
+    run_test()
\ No newline at end of file
