diff --git a/django/urls/base.py b/django/urls/base.py
index 0e1c3d909c..f4bb88f283 100644
--- a/django/urls/base.py
+++ b/django/urls/base.py
@@ -7,7 +7,7 @@ from django.utils.functional import lazy
 from django.utils.translation import override
 
 from .exceptions import NoReverseMatch, Resolver404
-from .resolvers import get_ns_resolver, get_resolver
+from .resolvers import get_ns_resolver, get_resolver, _get_resolver_internal
 from .utils import get_callable
 
 # SCRIPT_NAME prefixes for each thread are stored here. If there's no entry for
@@ -92,7 +92,7 @@ reverse_lazy = lazy(reverse, str)
 
 def clear_url_caches():
     get_callable.cache_clear()
-    get_resolver.cache_clear()
+    _get_resolver_internal.cache_clear()
     get_ns_resolver.cache_clear()
 
 
diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
index 247e3680c0..cbce0c4eb9 100644
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -63,10 +63,13 @@ class ResolverMatch:
         )
 
 
-@functools.lru_cache(maxsize=None)
 def get_resolver(urlconf=None):
     if urlconf is None:
         urlconf = settings.ROOT_URLCONF
+    return _get_resolver_internal(urlconf)
+
+@functools.lru_cache(maxsize=None)
+def _get_resolver_internal(urlconf):
     return URLResolver(RegexPattern(r'^/'), urlconf)
 
 
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..522c1462cb
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,84 @@
+import os
+import sys
+import time
+import gc
+import resource
+
+# Add Django to Python path
+sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
+
+from django.conf import settings
+from django.urls import get_resolver, set_urlconf
+from django.urls.base import clear_url_caches
+
+# Configure minimal Django settings with a complex URL structure
+settings.configure(
+    DEBUG=True,
+    ROOT_URLCONF='django.urls',
+    SECRET_KEY='dummy-key-for-test',
+    MIDDLEWARE=[
+        'django.middleware.common.CommonMiddleware',
+        'django.middleware.csrf.CsrfViewMiddleware',
+        'django.contrib.sessions.middleware.SessionMiddleware',
+        'django.contrib.auth.middleware.AuthenticationMiddleware',
+        'django.contrib.messages.middleware.MessageMiddleware',
+    ],
+    INSTALLED_APPS=[
+        'django.contrib.admin',
+        'django.contrib.auth',
+        'django.contrib.contenttypes',
+        'django.contrib.sessions',
+        'django.contrib.messages',
+        'django.contrib.staticfiles',
+    ],
+)
+
+def get_memory_usage():
+    """Return memory usage in MB"""
+    return resource.getrusage(resource.RUSAGE_SELF).ru_maxrss / 1024
+
+def measure_resolver_creation(iterations=5):
+    total_time1 = 0
+    total_time2 = 0
+    
+    for i in range(iterations):
+        # Clear URL caches to start fresh
+        clear_url_caches()
+        gc.collect()
+        
+        initial_memory = get_memory_usage()
+        
+        print(f"\nIteration {i+1}:")
+        print("Step 1: First call to get_resolver (simulating import time)")
+        start_time = time.time()
+        resolver1 = get_resolver()
+        time1 = time.time() - start_time
+        total_time1 += time1
+        memory1 = get_memory_usage() - initial_memory
+        print(f"Time taken: {time1:.4f} seconds")
+        print(f"Memory used: {memory1:.2f} MB")
+        print(f"Resolver1 id: {id(resolver1)}")
+        
+        print("\nStep 2: Setting urlconf (simulating request handling)")
+        set_urlconf(settings.ROOT_URLCONF)
+        
+        print("\nStep 3: Second call to get_resolver (after set_urlconf)")
+        start_time = time.time()
+        resolver2 = get_resolver()
+        time2 = time.time() - start_time
+        total_time2 += time2
+        memory2 = get_memory_usage() - initial_memory
+        print(f"Time taken: {time2:.4f} seconds")
+        print(f"Memory used: {memory2:.2f} MB")
+        print(f"Resolver2 id: {id(resolver2)}")
+        
+        print("\nResults for this iteration:")
+        print(f"Are resolvers the same object? {resolver1 is resolver2}")
+        print(f"Memory difference: {abs(memory2 - memory1):.2f} MB")
+    
+    print("\nAverage Results:")
+    print(f"Average time for first resolver: {total_time1/iterations:.4f} seconds")
+    print(f"Average time for second resolver: {total_time2/iterations:.4f} seconds")
+
+if __name__ == '__main__':
+    measure_resolver_creation()
\ No newline at end of file
