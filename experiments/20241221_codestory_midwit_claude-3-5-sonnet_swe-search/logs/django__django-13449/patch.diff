diff --git a/django/db/models/functions/window.py b/django/db/models/functions/window.py
index 84b2b24ffa..cecc11fb6b 100644
--- a/django/db/models/functions/window.py
+++ b/django/db/models/functions/window.py
@@ -27,6 +27,7 @@ class FirstValue(Func):
 
 class LagLeadFunction(Func):
     window_compatible = True
+    template = '%(function)s(%(expressions)s)'
 
     def __init__(self, expression, offset=1, default=None, **extra):
         if expression is None:
@@ -48,6 +49,18 @@ class LagLeadFunction(Func):
         sources = self.get_source_expressions()
         return sources[0].output_field
 
+    def as_sqlite(self, compiler, connection, **extra_context):
+        # For SQLite, we need to ensure the CAST is applied to the entire window function
+        # when dealing with DecimalField
+        template = self.template
+        sql, params = super().as_sqlite(compiler, connection, template=template, **extra_context)
+        output_field = self._resolve_output_field()
+        
+        if hasattr(output_field, 'get_internal_type') and output_field.get_internal_type() == 'DecimalField':
+            # Wrap the entire window function in a CAST
+            return f'CAST(({sql}) AS NUMERIC)', params
+        return sql, params
+
 
 class Lag(LagLeadFunction):
     function = 'LAG'
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..66f820586e
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,57 @@
+import os
+os.environ['DJANGO_SETTINGS_MODULE'] = 'django.conf.global_settings'
+from django.conf import settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth', 'test_app'],
+)
+
+import django
+django.setup()
+
+from django.db import models
+from django.db.models import F
+from django.db.models.functions import Lag
+from django.db.models import Window
+from django.test import TestCase
+from django.db import connection
+
+class LagTest(models.Model):
+    modified = models.DateField()
+    data = models.FloatField()
+    amount = models.DecimalField(decimal_places=4, max_digits=7)
+
+    class Meta:
+        app_label = 'test_app'
+
+class TestLagFunction(TestCase):
+    def test_lag_with_decimal(self):
+        # Create the test table
+        with connection.schema_editor() as schema_editor:
+            schema_editor.create_model(LagTest)
+        
+        try:
+            # This should work but currently fails on SQLite
+            w = Window(
+                expression=Lag('amount', 7),
+                partition_by=[F('modified')],
+                order_by=F('modified').asc()
+            )
+            q = LagTest.objects.all().annotate(w=w)
+            str(q.query)  # This will trigger the SQL compilation
+            print("Test passed - SQL query compiled successfully")
+        except Exception as e:
+            print(f"Test failed with error: {str(e)}")
+        finally:
+            # Cleanup
+            with connection.schema_editor() as schema_editor:
+                schema_editor.delete_model(LagTest)
+
+if __name__ == '__main__':
+    test = TestLagFunction()
+    test.test_lag_with_decimal()
\ No newline at end of file
diff --git a/test_lag.py b/test_lag.py
new file mode 100644
index 0000000000..cfb2e090ac
--- /dev/null
+++ b/test_lag.py
@@ -0,0 +1,42 @@
+import os
+os.environ['DJANGO_SETTINGS_MODULE'] = 'django.conf.global_settings'
+from django.conf import settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[],
+)
+
+import django
+django.setup()
+
+from django.db import models
+from django.db.models import F
+from django.db.models.functions import Lag
+from django.db.models import Window
+from django.db.models.expressions import Value
+from django.db.models.fields import DecimalField
+
+# Create a simple expression to test the SQL generation
+amount_field = DecimalField(max_digits=7, decimal_places=4)
+lag_expr = Lag(Value(10.5, output_field=amount_field), 7)
+window = Window(
+    expression=lag_expr,
+    partition_by=[Value('2023-01-01')],
+    order_by=Value('2023-01-01').asc()
+)
+
+# Get the SQL
+from django.db import connection
+compiler = window.get_source_expressions()[0].as_sql(connection.ops.compiler('SQLCompiler')(
+    connection.cursor().db.ops.quote_name, connection), connection)
+
+print("Generated SQL:", compiler[0])
+if 'CAST(' in compiler[0] and 'NUMERIC' in compiler[0]:
+    print("Test passed - CAST is properly applied")
+else:
+    print("Test failed - CAST is not properly applied")
\ No newline at end of file
diff --git a/test_lag2.py b/test_lag2.py
new file mode 100644
index 0000000000..8c5e46ec9b
--- /dev/null
+++ b/test_lag2.py
@@ -0,0 +1,50 @@
+import os
+os.environ['DJANGO_SETTINGS_MODULE'] = 'django.conf.global_settings'
+from django.conf import settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=['django.contrib.contenttypes'],
+    SECRET_KEY='dummy'
+)
+
+import django
+django.setup()
+
+from django.db import models
+from django.db.models import F
+from django.db.models.functions import Lag
+from django.db.models import Window
+from django.db.models.expressions import Value
+from django.db.models.fields import DecimalField
+from django.db import connection
+
+# Create a simple model
+class TestModel(models.Model):
+    amount = models.DecimalField(max_digits=7, decimal_places=4)
+    
+    class Meta:
+        app_label = 'test_app'
+        db_table = 'test_table'
+
+# Create the query
+lag_expr = Lag('amount', 7)
+window = Window(
+    expression=lag_expr,
+    partition_by=[F('amount')],
+    order_by=F('amount').asc()
+)
+
+# Get the SQL
+qs = TestModel.objects.annotate(w=window)
+sql = str(qs.query)
+print("Generated SQL:", sql)
+
+if 'CAST(' in sql and 'NUMERIC' in sql:
+    print("Test passed - CAST is properly applied")
+else:
+    print("Test failed - CAST is not properly applied")
\ No newline at end of file
