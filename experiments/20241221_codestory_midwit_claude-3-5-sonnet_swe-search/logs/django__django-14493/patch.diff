diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py
index f957a667b2..bdf2398a66 100644
--- a/django/contrib/staticfiles/storage.py
+++ b/django/contrib/staticfiles/storage.py
@@ -261,6 +261,9 @@ class HashedFilesMixin:
 
         paths = {path: paths[path] for path in adjustable_paths}
 
+        # Initialize substitutions before the loop to handle max_post_process_passes = 0
+        substitutions = False
+        
         for i in range(self.max_post_process_passes):
             substitutions = False
             for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..2db5f64983
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,39 @@
+import os
+from django.conf import settings
+from django.contrib.staticfiles.storage import ManifestStaticFilesStorage
+from django.core.files.base import ContentFile
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        STATIC_URL='/static/',
+        STATIC_ROOT='static/',
+        DEBUG=True,
+    )
+
+class MyManifestStaticFilesStorage(ManifestStaticFilesStorage):
+    max_post_process_passes = 0
+
+def main():
+    # Create static directory if it doesn't exist
+    os.makedirs('static/', exist_ok=True)
+    
+    # Create a storage instance
+    storage = MyManifestStaticFilesStorage(location='static/')
+    
+    # Create and save a test file
+    test_file = ContentFile(b'body { background: url("test.png"); }')
+    storage.save('test.css', test_file)
+    
+    # Try to post process it
+    paths = {'test.css': (storage, 'test.css')}
+    try:
+        list(storage.post_process(paths))
+    except UnboundLocalError as e:
+        print("Error occurred as expected:")
+        print(e)
+        return True
+    return False
+
+if __name__ == '__main__':
+    main()
\ No newline at end of file
