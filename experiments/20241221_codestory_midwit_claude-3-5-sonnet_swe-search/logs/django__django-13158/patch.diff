diff --git a/django/db/models/query.py b/django/db/models/query.py
index 07d6ffd4ca..23ea6ba43d 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -919,6 +919,11 @@ class QuerySet:
     def none(self):
         """Return an empty QuerySet."""
         clone = self._chain()
+        if clone.query.combinator:
+            # For combined queries (union, intersection, difference),
+            # we need to clear the combinator to ensure none() works properly
+            clone.query.combinator = None
+            clone.query.combined_queries = ()
         clone.query.set_empty()
         return clone
 
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..1bec997aa6
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,72 @@
+import os
+import django
+from django.conf import settings
+from django.db import models
+from django import forms
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        DEFAULT_AUTO_FIELD='django.db.models.AutoField',
+    )
+    django.setup()
+
+# Define models
+class Publication(models.Model):
+    name = models.CharField(max_length=100)
+    class Meta:
+        app_label = 'myapp'
+
+class Article(models.Model):
+    title = models.CharField(max_length=100)
+    publications = models.ManyToManyField(Publication, blank=True)
+    class Meta:
+        app_label = 'myapp'
+
+# Create test data
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Publication)
+    schema_editor.create_model(Article)
+
+# Create some test publications
+for i in range(1, 8):
+    Publication.objects.create(name=f"Publication {i}")
+
+# Test the behavior
+print("\nTesting OR operation:")
+qs1 = Publication.objects.filter(id__lt=2) | Publication.objects.filter(id__gt=5)
+print("OR query results:", list(qs1.values_list('id', flat=True)))
+print("OR query with none():", list(qs1.none().values_list('id', flat=True)))
+
+print("\nTesting UNION operation:")
+qs2 = Publication.objects.filter(id__lt=2).union(Publication.objects.filter(id__gt=5))
+print("UNION query results:", list(qs2.values_list('id', flat=True)))
+print("UNION query with none():", list(qs2.none().values_list('id', flat=True)))
+
+print("\nTesting edge cases:")
+# Test empty union
+qs3 = Publication.objects.none().union(Publication.objects.none())
+print("Empty union with none():", list(qs3.none().values_list('id', flat=True)))
+
+# Test union of none() with regular query
+qs4 = Publication.objects.none().union(Publication.objects.filter(id=1))
+print("Union of none() with query:", list(qs4.values_list('id', flat=True)))
+print("none() on union of none() with query:", list(qs4.none().values_list('id', flat=True)))
+
+# Test chained unions
+qs5 = (Publication.objects.filter(id=1)
+       .union(Publication.objects.filter(id=2))
+       .union(Publication.objects.filter(id=3)))
+print("Chained unions:", list(qs5.values_list('id', flat=True)))
+print("none() on chained unions:", list(qs5.none().values_list('id', flat=True)))
\ No newline at end of file
