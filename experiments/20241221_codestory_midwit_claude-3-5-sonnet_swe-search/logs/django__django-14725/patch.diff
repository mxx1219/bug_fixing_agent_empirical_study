diff --git a/django/forms/models.py b/django/forms/models.py
index 7effb202e3..a777cf573f 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -568,6 +568,7 @@ class BaseModelFormSet(BaseFormSet):
     A ``FormSet`` for editing a queryset and/or adding new objects to it.
     """
     model = None
+    allow_new_objects = True  # Controls whether new objects can be created
 
     # Set of fields that must be unique among forms of this set.
     unique_fields = set()
@@ -681,6 +682,20 @@ class BaseModelFormSet(BaseFormSet):
     save.alters_data = True
 
     def clean(self):
+        """
+        Hook for doing any extra formset-wide cleaning after Form.clean() has
+        been called on every form. Any ValidationError raised by this method
+        will not be associated with a particular form; it will be accessible
+        via formset.non_form_errors()
+        """
+        # Check if any new objects are being created when not allowed
+        if not self.allow_new_objects:
+            for form in self.extra_forms:
+                if form.has_changed():
+                    raise ValidationError(
+                        "Adding new objects is not allowed.",
+                        code='no_new_objects'
+                    )
         self.validate_unique()
 
     def validate_unique(self):
@@ -813,6 +828,8 @@ class BaseModelFormSet(BaseFormSet):
 
     def save_new_objects(self, commit=True):
         self.new_objects = []
+        if not self.allow_new_objects:
+            return []
         for form in self.extra_forms:
             if not form.has_changed():
                 continue
@@ -875,8 +892,14 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,
                          widgets=None, validate_max=False, localized_fields=None,
                          labels=None, help_texts=None, error_messages=None,
                          min_num=None, validate_min=False, field_classes=None,
-                         absolute_max=None, can_delete_extra=True, renderer=None):
-    """Return a FormSet class for the given Django model class."""
+                         absolute_max=None, can_delete_extra=True, renderer=None,
+                         allow_new_objects=True):
+    """
+    Return a FormSet class for the given Django model class.
+
+    ``allow_new_objects`` controls whether the formset allows creating new objects.
+    When False, the formset will only allow editing existing objects.
+    """
     meta = getattr(form, 'Meta', None)
     if (getattr(meta, 'fields', fields) is None and
             getattr(meta, 'exclude', exclude) is None):
@@ -896,6 +919,7 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,
                               absolute_max=absolute_max, can_delete_extra=can_delete_extra,
                               renderer=renderer)
     FormSet.model = model
+    FormSet.allow_new_objects = allow_new_objects
     return FormSet
 
 
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..b909f47e78
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,90 @@
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+from django.conf import settings
+from django.db import models
+from django.forms import modelformset_factory
+from django.core.exceptions import ValidationError
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        MIDDLEWARE=[],
+        SECRET_KEY='dummy-key-for-tests',
+    )
+
+import django
+django.setup()
+
+# Create a simple model for testing
+class Author(models.Model):
+    name = models.CharField(max_length=100)
+
+    class Meta:
+        app_label = 'auth'  # Use existing app to avoid migrations
+
+def run_test():
+    # Create tables
+    from django.db import connection
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(Author)
+
+    # Create a test author
+    Author.objects.create(name="Existing Author")
+    
+    # Create formset with extra=0 and allow_new_objects=False
+    AuthorFormSet = modelformset_factory(
+        Author, 
+        fields=['name'], 
+        extra=0,
+        allow_new_objects=False
+    )
+    
+    # Create POST data with an extra form
+    data = {
+        'form-TOTAL_FORMS': '2',  # One existing + one new
+        'form-INITIAL_FORMS': '1',
+        'form-MIN_NUM_FORMS': '0',
+        'form-MAX_NUM_FORMS': '1000',
+        'form-0-id': '1',  # ID of existing author
+        'form-0-name': 'Existing Author',
+        'form-1-id': '',  # Empty ID for new author
+        'form-1-name': 'New Author',  # This should not be allowed
+    }
+    
+    formset = AuthorFormSet(data)
+    
+    # This should be False now, since we're trying to create a new object
+    print(f"Formset is valid: {formset.is_valid()}")
+    if not formset.is_valid():
+        print("Validation errors:", formset.non_form_errors())
+    
+    # Try with valid data (only editing existing)
+    valid_data = {
+        'form-TOTAL_FORMS': '1',
+        'form-INITIAL_FORMS': '1',
+        'form-MIN_NUM_FORMS': '0',
+        'form-MAX_NUM_FORMS': '1000',
+        'form-0-id': '1',
+        'form-0-name': 'Updated Author',  # Just updating name
+    }
+    
+    formset = AuthorFormSet(valid_data)
+    print(f"\nFormset with only edits is valid: {formset.is_valid()}")
+    if formset.is_valid():
+        formset.save()
+        print(f"Author name after update: {Author.objects.get(pk=1).name}")
+        print(f"Total authors after save: {Author.objects.count()}")  # Should still be 1
+
+if __name__ == '__main__':
+    run_test()
\ No newline at end of file
