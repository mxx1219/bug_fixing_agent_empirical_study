diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index c120f5d32d..8e3dc37d99 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -32,6 +32,17 @@ class ModelOperation(Operation):
         return name.lower() == self.name_lower
 
     def reduce(self, operation, app_label):
+        if isinstance(operation, DeleteModel) and self.name_lower == operation.name_lower:
+            return [operation]
+        if isinstance(operation, self.__class__) and self.name_lower == operation.name_lower:
+            # If we're setting to empty set and next operation has a value, skip this operation
+            if not self.option_value and operation.option_value:
+                return [operation]
+            # If we have a value and next operation is empty set, keep our value
+            if self.option_value and not operation.option_value:
+                return [self]
+            # Otherwise take the latest value
+            return [operation]
         return (
             super().reduce(operation, app_label) or
             not operation.references_model(self.name, app_label)
@@ -409,7 +420,16 @@ class RenameModel(ModelOperation):
 
 class ModelOptionOperation(ModelOperation):
     def reduce(self, operation, app_label):
-        if isinstance(operation, (self.__class__, DeleteModel)) and self.name_lower == operation.name_lower:
+        if isinstance(operation, DeleteModel) and self.name_lower == operation.name_lower:
+            return [operation]
+        if isinstance(operation, self.__class__) and self.name_lower == operation.name_lower:
+            # If we're setting to empty set and next operation has a value, skip this operation
+            if not self.option_value and operation.option_value:
+                return [operation]
+            # If we have a value and next operation is empty set, keep our value
+            if self.option_value and not operation.option_value:
+                return [self]
+            # Otherwise take the latest value
             return [operation]
         return super().reduce(operation, app_label)
 
@@ -476,6 +496,19 @@ class AlterTogetherOptionOperation(ModelOptionOperation):
         setattr(self, self.option_name, option_value)
         super().__init__(name)
 
+    def can_optimize_through(self, operation):
+        """
+        Return True if this operation can be optimized through the given operation.
+        This is used by the optimizer to determine if operations can be skipped.
+        """
+        if not isinstance(operation, self.__class__) or self.name_lower != operation.name_lower:
+            return False
+        # If we're setting to empty set and the next operation has a value,
+        # we can optimize through it
+        if not self.option_value and operation.option_value:
+            return True
+        return False
+
     @cached_property
     def option_value(self):
         return getattr(self, self.option_name)
@@ -528,6 +561,20 @@ class AlterTogetherOptionOperation(ModelOptionOperation):
     def migration_name_fragment(self):
         return 'alter_%s_%s' % (self.name_lower, self.option_name)
 
+    def reduce(self, operation, app_label):
+        if isinstance(operation, DeleteModel) and self.name_lower == operation.name_lower:
+            return [operation]
+        if isinstance(operation, self.__class__) and self.name_lower == operation.name_lower:
+            # If we're setting to empty set and next operation has a value, skip this operation
+            if not self.option_value and operation.option_value:
+                return [operation]
+            # If we have a value and next operation is empty set, keep our value
+            if self.option_value and not operation.option_value:
+                return [self]
+            # Otherwise take the latest value
+            return [operation]
+        return super().reduce(operation, app_label)
+
 
 class AlterUniqueTogether(AlterTogetherOptionOperation):
     """
diff --git a/django/db/migrations/optimizer.py b/django/db/migrations/optimizer.py
index ee20f62af2..232b9117c0 100644
--- a/django/db/migrations/optimizer.py
+++ b/django/db/migrations/optimizer.py
@@ -40,30 +40,43 @@ class MigrationOptimizer:
     def optimize_inner(self, operations, app_label):
         """Inner optimization loop."""
         new_operations = []
-        for i, operation in enumerate(operations):
-            right = True  # Should we reduce on the right or on the left.
-            # Compare it to each operation after it
-            for j, other in enumerate(operations[i + 1:]):
-                result = operation.reduce(other, app_label)
-                if isinstance(result, list):
-                    in_between = operations[i + 1:i + j + 1]
-                    if right:
-                        new_operations.extend(in_between)
-                        new_operations.extend(result)
-                    elif all(op.reduce(other, app_label) is True for op in in_between):
-                        # Perform a left reduction if all of the in-between
-                        # operations can optimize through other.
-                        new_operations.extend(result)
-                        new_operations.extend(in_between)
-                    else:
-                        # Otherwise keep trying.
-                        new_operations.append(operation)
+        i = 0
+        while i < len(operations):
+            operation = operations[i]
+            
+            # Check if this operation can be optimized through a later operation
+            can_skip = False
+            if hasattr(operation, 'can_optimize_through'):
+                for other in operations[i + 1:]:
+                    if operation.can_optimize_through(other):
+                        can_skip = True
                         break
-                    new_operations.extend(operations[i + j + 2:])
-                    return new_operations
-                elif not result:
-                    # Can't perform a right reduction.
-                    right = False
-            else:
-                new_operations.append(operation)
+            
+            if not can_skip:
+                # Try normal optimization
+                right = True  # Should we reduce on the right or on the left.
+                for j, other in enumerate(operations[i + 1:], start=1):
+                    result = operation.reduce(other, app_label)
+                    if isinstance(result, list):
+                        in_between = operations[i + 1:i + j]
+                        if right:
+                            new_operations.extend(in_between)
+                            new_operations.extend(result)
+                        elif all(op.reduce(other, app_label) is True for op in in_between):
+                            # Perform a left reduction if all of the in-between
+                            # operations can optimize through other.
+                            new_operations.extend(result)
+                            new_operations.extend(in_between)
+                        else:
+                            # Otherwise keep trying.
+                            new_operations.append(operation)
+                            break
+                        new_operations.extend(operations[i + j + 1:])
+                        return new_operations
+                    elif not result:
+                        # Can't perform a right reduction.
+                        right = False
+                else:
+                    new_operations.append(operation)
+            i += 1
         return new_operations
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..8f4196e7e7
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,89 @@
+from django.db import migrations
+
+# Test case 1: Basic optimization
+operations1 = [
+    migrations.AlterUniqueTogether(
+        name='mymodel',
+        unique_together=set(),
+    ),
+    migrations.AlterIndexTogether(
+        name='mymodel',
+        index_together=set(),
+    ),
+    migrations.AlterUniqueTogether(
+        name='mymodel',
+        unique_together={("col",)},
+    ),
+    migrations.AlterIndexTogether(
+        name='mymodel',
+        index_together={("col",)},
+    ),
+]
+
+# Test case 2: Multiple empty sets followed by value
+operations2 = [
+    migrations.AlterUniqueTogether(
+        name='mymodel',
+        unique_together=set(),
+    ),
+    migrations.AlterUniqueTogether(
+        name='mymodel',
+        unique_together=set(),
+    ),
+    migrations.AlterUniqueTogether(
+        name='mymodel',
+        unique_together={("col",)},
+    ),
+]
+
+# Test case 3: Value followed by empty sets
+operations3 = [
+    migrations.AlterUniqueTogether(
+        name='mymodel',
+        unique_together={("col",)},
+    ),
+    migrations.AlterUniqueTogether(
+        name='mymodel',
+        unique_together=set(),
+    ),
+    migrations.AlterUniqueTogether(
+        name='mymodel',
+        unique_together=set(),
+    ),
+]
+
+# Test case 4: Mixed operations
+operations4 = [
+    migrations.AlterUniqueTogether(
+        name='mymodel',
+        unique_together=set(),
+    ),
+    migrations.AlterIndexTogether(
+        name='othermodel',  # Different model
+        index_together=set(),
+    ),
+    migrations.AlterUniqueTogether(
+        name='mymodel',
+        unique_together={("col",)},
+    ),
+]
+
+# Import the optimizer
+from django.db.migrations.optimizer import MigrationOptimizer
+
+# Create an optimizer instance
+optimizer = MigrationOptimizer()
+
+# Test all cases
+for i, operations in enumerate([operations1, operations2, operations3, operations4], 1):
+    print(f"\nTest case {i}:")
+    print("Original operations count:", len(operations))
+    optimized = optimizer.optimize(operations, app_label='testapp')
+    print("Optimized operations count:", len(optimized))
+    print("\nOptimized operations:")
+    for op in optimized:
+        print(f"- {op.__class__.__name__}: {op.name}")
+        if hasattr(op, 'unique_together'):
+            print(f"  unique_together: {op.unique_together}")
+        if hasattr(op, 'index_together'):
+            print(f"  index_together: {op.index_together}")
\ No newline at end of file
