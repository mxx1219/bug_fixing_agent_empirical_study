diff --git a/django/contrib/admin/filters.py b/django/contrib/admin/filters.py
index d65e01d5e2..a5c9ff6301 100644
--- a/django/contrib/admin/filters.py
+++ b/django/contrib/admin/filters.py
@@ -194,10 +194,17 @@ class RelatedFieldListFilter(FieldListFilter):
         return [self.lookup_kwarg, self.lookup_kwarg_isnull]
 
     def field_choices(self, field, request, model_admin):
-        ordering = ()
-        related_admin = model_admin.admin_site._registry.get(field.remote_field.model)
+        ordering = None
+        related_model = field.remote_field.model
+        related_admin = model_admin.admin_site._registry.get(related_model)
+        
         if related_admin is not None:
             ordering = related_admin.get_ordering(request)
+        
+        # Fall back to model's Meta.ordering if no admin ordering is defined
+        if not ordering:
+            ordering = related_model._meta.ordering or ()
+            
         return field.get_choices(include_blank=False, ordering=ordering)
 
     def choices(self, changelist):
@@ -419,4 +426,19 @@ FieldListFilter.register(lambda f: True, AllValuesFieldListFilter)
 class RelatedOnlyFieldListFilter(RelatedFieldListFilter):
     def field_choices(self, field, request, model_admin):
         pk_qs = model_admin.get_queryset(request).distinct().values_list('%s__pk' % self.field_path, flat=True)
-        return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs})
+        ordering = None
+        related_model = field.remote_field.model
+        related_admin = model_admin.admin_site._registry.get(related_model)
+        
+        if related_admin is not None:
+            ordering = related_admin.get_ordering(request)
+            
+        # Fall back to model's Meta.ordering if no admin ordering is defined
+        if not ordering:
+            ordering = related_model._meta.ordering or ()
+            
+        return field.get_choices(
+            include_blank=False,
+            limit_choices_to={'pk__in': pk_qs},
+            ordering=ordering
+        )
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..b770d408dd
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,119 @@
+import os
+import django
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.admin',
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+            'django.contrib.sessions',
+            'django.contrib.messages',
+        ],
+        MIDDLEWARE=[
+            'django.middleware.security.SecurityMiddleware',
+            'django.contrib.sessions.middleware.SessionMiddleware',
+            'django.middleware.common.CommonMiddleware',
+            'django.middleware.csrf.CsrfViewMiddleware',
+            'django.contrib.auth.middleware.AuthenticationMiddleware',
+            'django.contrib.messages.middleware.MessageMiddleware',
+        ],
+        SECRET_KEY='dummy-key-for-tests',
+    )
+
+django.setup()
+
+from django.contrib import admin
+from django.contrib.auth.models import User
+from django.db import models, connection
+from django.test import TestCase, RequestFactory
+
+# Create test models
+class Author(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        ordering = ['name']  # Define default ordering
+        app_label = 'admin'  # Use admin app instead of creating new one
+        
+    def __str__(self):
+        return self.name
+
+class Book(models.Model):
+    title = models.CharField(max_length=100)
+    author = models.ForeignKey(Author, on_delete=models.CASCADE)
+    
+    class Meta:
+        app_label = 'admin'  # Use admin app instead of creating new one
+        
+    def __str__(self):
+        return self.title
+
+# Create admin classes
+class BookAdmin(admin.ModelAdmin):
+    list_filter = [('author', admin.RelatedFieldListFilter)]
+
+class BookAdminRelatedOnly(admin.ModelAdmin):
+    list_filter = [('author', admin.RelatedOnlyFieldListFilter)]
+
+def create_tables():
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(User)
+        schema_editor.create_model(Author)
+        schema_editor.create_model(Book)
+
+# Test case
+class FilterOrderingTest(TestCase):
+    def setUp(self):
+        self.factory = RequestFactory()
+        create_tables()
+        
+        # Create a superuser
+        self.user = User.objects.create_superuser(
+            username='admin',
+            email='admin@example.com',
+            password='password'
+        )
+        
+        # Create test data
+        self.author1 = Author.objects.create(name='Zebra')
+        self.author2 = Author.objects.create(name='Alpha')
+        self.author3 = Author.objects.create(name='Beta')
+        
+        self.book1 = Book.objects.create(title='Book1', author=self.author1)
+        self.book2 = Book.objects.create(title='Book2', author=self.author2)
+        self.book3 = Book.objects.create(title='Book3', author=self.author3)
+        
+        self.modeladmin = BookAdmin(Book, admin.site)
+        self.modeladmin_related_only = BookAdminRelatedOnly(Book, admin.site)
+        
+    def test_related_field_filter_ordering(self):
+        request = self.factory.get('/')
+        request.user = self.user
+        
+        # Test RelatedFieldListFilter
+        changelist = self.modeladmin.get_changelist_instance(request)
+        filter_spec = changelist.get_filters(request)[0][0]
+        choices = [choice['display'] for choice in filter_spec.choices(changelist) if choice['display'] != 'All' and choice['display'] != '']
+        print("RelatedFieldListFilter choices order:", choices)
+        assert choices == ['Alpha', 'Beta', 'Zebra'], f"RelatedFieldListFilter: Expected ordered choices, got {choices}"
+        
+        # Test RelatedOnlyFieldListFilter
+        changelist = self.modeladmin_related_only.get_changelist_instance(request)
+        filter_spec = changelist.get_filters(request)[0][0]
+        choices = [choice['display'] for choice in filter_spec.choices(changelist) if choice['display'] != 'All' and choice['display'] != '']
+        print("RelatedOnlyFieldListFilter choices order:", choices)
+        assert choices == ['Alpha', 'Beta', 'Zebra'], f"RelatedOnlyFieldListFilter: Expected ordered choices, got {choices}"
+
+if __name__ == '__main__':
+    # Run the test
+    test = FilterOrderingTest()
+    test.setUp()
+    test.test_related_field_filter_ordering()
\ No newline at end of file
