diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py
index 7a99b12691..bcf150516b 100644
--- a/django/db/models/fields/files.py
+++ b/django/db/models/fields/files.py
@@ -295,7 +295,7 @@ class FileField(Field):
         if kwargs.get("max_length") == 100:
             del kwargs["max_length"]
         kwargs["upload_to"] = self.upload_to
-        if self.storage is not default_storage:
+        if hasattr(self, "_storage_callable") or self.storage is not default_storage:
             kwargs["storage"] = getattr(self, "_storage_callable", self.storage)
         return name, path, args, kwargs
 
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..bb76086630
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,47 @@
+import os
+import django
+from django.conf import settings
+from django.core.files.storage import FileSystemStorage, default_storage
+from django.db import models
+import random
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        STORAGES={
+            'default': {
+                'BACKEND': 'django.core.files.storage.FileSystemStorage',
+                'OPTIONS': {
+                    'location': '/media/default',
+                },
+            },
+        },
+        INSTALLED_APPS=['django.contrib.contenttypes'],
+        DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+    )
+    django.setup()
+
+other_storage = FileSystemStorage(location='/media/other')
+
+def get_storage():
+    return random.choice([default_storage, other_storage])
+
+class MyModel(models.Model):
+    my_file = models.FileField(storage=get_storage)
+
+    class Meta:
+        app_label = 'contenttypes'  # Use the installed app
+
+# Get the field instance
+field = MyModel._meta.get_field('my_file')
+
+# Print the deconstructed form multiple times to show the inconsistency
+for i in range(5):
+    name, path, args, kwargs = field.deconstruct()
+    print(f"\nIteration {i+1}:")
+    print(f"name: {name}")
+    print(f"path: {path}")
+    print(f"args: {args}")
+    print(f"kwargs: {kwargs}")
+    # The storage kwarg should always be present, but sometimes it's missing
+    print(f"'storage' in kwargs: {'storage' in kwargs}")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..c53e96fc81
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,62 @@
+import os
+import django
+from django.conf import settings
+from django.core.files.storage import FileSystemStorage, default_storage
+from django.db import models
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        STORAGES={
+            'default': {
+                'BACKEND': 'django.core.files.storage.FileSystemStorage',
+                'OPTIONS': {
+                    'location': '/media/default',
+                },
+            },
+        },
+        INSTALLED_APPS=['django.contrib.contenttypes'],
+        DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+    )
+    django.setup()
+
+other_storage = FileSystemStorage(location='/media/other')
+
+def get_default_storage():
+    return default_storage
+
+def get_other_storage():
+    return other_storage
+
+class EdgeCaseModel(models.Model):
+    # Case 1: Explicit default_storage (should not include storage in deconstruct)
+    default_file = models.FileField(storage=default_storage)
+    
+    # Case 2: Other storage (should include storage in deconstruct)
+    other_file = models.FileField(storage=other_storage)
+    
+    # Case 3: Callable returning default_storage (should include storage in deconstruct)
+    callable_default_file = models.FileField(storage=get_default_storage)
+    
+    # Case 4: Callable returning other storage (should include storage in deconstruct)
+    callable_other_file = models.FileField(storage=get_other_storage)
+
+    class Meta:
+        app_label = 'contenttypes'
+
+# Test each field
+fields = [
+    ('default_file', 'Explicit default_storage'),
+    ('other_file', 'Other storage'),
+    ('callable_default_file', 'Callable returning default_storage'),
+    ('callable_other_file', 'Callable returning other storage'),
+]
+
+for field_name, description in fields:
+    field = EdgeCaseModel._meta.get_field(field_name)
+    name, path, args, kwargs = field.deconstruct()
+    print(f"\nTesting {description}:")
+    print(f"Field: {field_name}")
+    print(f"Has storage in kwargs: {'storage' in kwargs}")
+    if 'storage' in kwargs:
+        print(f"Storage value: {kwargs['storage']}")
\ No newline at end of file
