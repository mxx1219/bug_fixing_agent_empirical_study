diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py
index cc65c043ab..4de2923141 100644
--- a/django/utils/autoreload.py
+++ b/django/utils/autoreload.py
@@ -220,6 +220,8 @@ def get_child_arguments():
     py_script = Path(sys.argv[0])
 
     args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]
+    # Add -X options from sys._xoptions
+    args.extend('-X%s%s' % (k, ('=' + v) if v else '') for k, v in getattr(sys, '_xoptions', {}).items())
     # __spec__ is set when the server was started with the `-m` option,
     # see https://docs.python.org/3/reference/import.html#main-spec
     # __spec__ may not exist, e.g. when running in a Conda env.
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..82aa445364
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,54 @@
+import os
+import sys
+import tempfile
+import subprocess
+
+def create_test_file():
+    # Create a temporary directory
+    temp_dir = tempfile.mkdtemp()
+    os.chdir(temp_dir)
+    
+    # Create a simple Python script that prints sys._xoptions
+    with open("test_script.py", "w") as f:
+        f.write('''import sys
+print("=== sys._xoptions:", sys._xoptions)
+''')
+    
+    # Create a Django-like autoreload script
+    with open("autoreload_script.py", "w") as f:
+        f.write('''import os
+import sys
+import subprocess
+
+def get_child_arguments():
+    args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]
+    # Add -X options from sys._xoptions
+    for k, v in getattr(sys, '_xoptions', {}).items():
+        opt = '-X' + k
+        if v and not isinstance(v, bool):
+            opt += '=' + v
+        args.append(opt)
+    args.extend(['test_script.py'])
+    return args
+
+def restart_with_reloader():
+    new_environ = {**os.environ, 'RUN_MAIN': 'true'}
+    args = get_child_arguments()
+    print("=== Reloader args:", args)
+    p = subprocess.run(args, env=new_environ)
+    return p.returncode
+
+if __name__ == '__main__':
+    if os.environ.get('RUN_MAIN') == 'true':
+        import test_script
+    else:
+        exit_code = restart_with_reloader()
+        sys.exit(exit_code)
+''')
+    
+    # Run the script with -X utf8 option
+    print("\nRunning with -X utf8:")
+    subprocess.run([sys.executable, "-X", "utf8", "autoreload_script.py"])
+
+if __name__ == "__main__":
+    create_test_file()
\ No newline at end of file
