diff --git a/django/utils/datastructures.py b/django/utils/datastructures.py
index 871b016715..966ebb7c96 100644
--- a/django/utils/datastructures.py
+++ b/django/utils/datastructures.py
@@ -34,6 +34,12 @@ class OrderedSet:
     def __len__(self):
         return len(self.dict)
 
+    def __reversed__(self):
+        """
+        Return an iterator over the items in the set in reverse order.
+        """
+        return reversed(self.dict)
+
 
 class MultiValueDictKeyError(KeyError):
     pass
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..bf6320befd
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,24 @@
+from django.utils.datastructures import OrderedSet
+
+def test_reverse(ordered_set, case_name):
+    print(f"\nTesting {case_name}:")
+    try:
+        reversed_set = reversed(ordered_set)
+        print("Values in reverse order:")
+        for item in reversed_set:
+            print(item)
+        print("Success!")
+    except Exception as e:
+        print("Error:", e)
+
+# Test case 1: Normal set (already tested above)
+test_reverse(OrderedSet(['a', 'b', 'c', 'd']), "normal set")
+
+# Test case 2: Empty set
+test_reverse(OrderedSet(), "empty set")
+
+# Test case 3: Single item
+test_reverse(OrderedSet(['single']), "single item")
+
+# Test case 4: Mixed types (strings, numbers, tuples)
+test_reverse(OrderedSet([1, 'two', (3, 4), 5.0]), "mixed types")
\ No newline at end of file
