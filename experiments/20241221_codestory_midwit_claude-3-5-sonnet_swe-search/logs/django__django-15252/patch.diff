diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py
index 1a37c6b7d0..9f0a462e03 100644
--- a/django/db/migrations/recorder.py
+++ b/django/db/migrations/recorder.py
@@ -50,6 +50,11 @@ class MigrationRecorder:
     def migration_qs(self):
         return self.Migration.objects.using(self.connection.alias)
 
+    def _allow_migrate(self):
+        """Check if migrations are allowed on this database."""
+        from django.db import router
+        return router.allow_migrate(self.connection.alias, 'migrations')
+
     def has_table(self):
         """Return True if the django_migrations table exists."""
         with self.connection.cursor() as cursor:
@@ -58,6 +63,10 @@ class MigrationRecorder:
 
     def ensure_schema(self):
         """Ensure the table exists and has the correct schema."""
+        # If migrations are not allowed on this database, don't create the table
+        if not self._allow_migrate():
+            return
+
         # If the table's there, that's fine - we've never changed its schema
         # in the codebase.
         if self.has_table():
@@ -74,6 +83,8 @@ class MigrationRecorder:
         Return a dict mapping (app_name, migration_name) to Migration instances
         for all applied migrations.
         """
+        if not self._allow_migrate():
+            return {}
         if self.has_table():
             return {(migration.app, migration.name): migration for migration in self.migration_qs}
         else:
@@ -83,14 +94,20 @@ class MigrationRecorder:
 
     def record_applied(self, app, name):
         """Record that a migration was applied."""
+        if not self._allow_migrate():
+            return
         self.ensure_schema()
         self.migration_qs.create(app=app, name=name)
 
     def record_unapplied(self, app, name):
         """Record that a migration was unapplied."""
+        if not self._allow_migrate():
+            return
         self.ensure_schema()
         self.migration_qs.filter(app=app, name=name).delete()
 
     def flush(self):
         """Delete all migration records. Useful for testing migrations."""
+        if not self._allow_migrate():
+            return
         self.migration_qs.all().delete()
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..fd0eff8c5f
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,50 @@
+from django.conf import settings
+from django.db import connections
+from django.db.migrations.recorder import MigrationRecorder
+import os
+import django
+
+class Router:
+    def allow_migrate(self, db, app_label=None, **hints):
+        if db == 'default':
+            return True
+        return False
+
+# Configure Django settings
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': 'default.db',
+    },
+    'other': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': 'other.db',
+    }
+}
+
+settings.configure(
+    DATABASES=DATABASES,
+    DATABASE_ROUTERS=['__main__.Router'],
+    INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth'],
+)
+
+django.setup()
+
+def main():
+    print("Testing MigrationRecorder behavior with database router...")
+    
+    # Clean up any existing database files
+    for db_name in ['default.db', 'other.db']:
+        if os.path.exists(db_name):
+            os.remove(db_name)
+    
+    # Try to ensure schema on both databases
+    for alias in ['default', 'other']:
+        print(f"\nTesting database: {alias}")
+        recorder = MigrationRecorder(connections[alias])
+        print(f"Before ensure_schema - Has migrations table: {recorder.has_table()}")
+        recorder.ensure_schema()
+        print(f"After ensure_schema - Has migrations table: {recorder.has_table()}")
+
+if __name__ == '__main__':
+    main()
\ No newline at end of file
