diff --git a/astropy/wcs/wcsapi/wrappers/sliced_wcs.py b/astropy/wcs/wcsapi/wrappers/sliced_wcs.py
index d7605b078c..46765dc610 100644
--- a/astropy/wcs/wcsapi/wrappers/sliced_wcs.py
+++ b/astropy/wcs/wcsapi/wrappers/sliced_wcs.py
@@ -251,7 +251,8 @@ class SlicedLowLevelWCS(BaseWCSWrapper):
                 iworld_curr += 1
                 world_arrays_new.append(world_arrays[iworld_curr])
             else:
-                world_arrays_new.append(1.)
+                # Use the actual value from the dropped dimension
+                world_arrays_new.append(self.dropped_world_dimensions['value'][sum(1 for x in range(iworld) if x not in self._world_keep)])
 
         world_arrays_new = np.broadcast_arrays(*world_arrays_new)
         pixel_arrays = list(self._wcs.world_to_pixel_values(*world_arrays_new))
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..a22ca4c7e3
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,53 @@
+import numpy as np
+import astropy.wcs
+from astropy.coordinates import SkyCoord
+import astropy.units as u
+
+# Create the test WCS
+nx = 100
+ny = 25
+nz = 2
+wcs_header = {
+    'WCSAXES': 3,
+    'CRPIX1': (nx + 1)/2,
+    'CRPIX2': (ny + 1)/2,
+    'CRPIX3': 1.0,
+    'PC1_1': 0.0,
+    'PC1_2': -1.0,
+    'PC1_3': 0.0,
+    'PC2_1': 1.0,
+    'PC2_2': 0.0,
+    'PC2_3': -1.0,
+    'CDELT1': 5,
+    'CDELT2': 5,
+    'CDELT3': 0.055,
+    'CUNIT1': 'arcsec',
+    'CUNIT2': 'arcsec',
+    'CUNIT3': 'Angstrom',
+    'CTYPE1': 'HPLN-TAN',
+    'CTYPE2': 'HPLT-TAN',
+    'CTYPE3': 'WAVE',
+    'CRVAL1': 0.0,
+    'CRVAL2': 0.0,
+    'CRVAL3': 1.05,
+}
+
+fits_wcs = astropy.wcs.WCS(header=wcs_header)
+
+# Test unsliced WCS
+pt = SkyCoord(Tx=0*u.arcsec, Ty=0*u.arcsec, frame=astropy.wcs.utils.wcs_to_celestial_frame(fits_wcs))
+print("\nUnsliced WCS world_to_pixel:")
+print(fits_wcs.world_to_pixel(pt, 1.05*u.angstrom))
+
+# Test sliced WCS
+ll_sliced_wcs = astropy.wcs.wcsapi.SlicedLowLevelWCS(fits_wcs, 0)
+hl_sliced_wcs = astropy.wcs.wcsapi.HighLevelWCSWrapper(ll_sliced_wcs)
+print("\nSliced WCS world_to_pixel:")
+print(hl_sliced_wcs.world_to_pixel(pt))
+
+# Test pixel_to_world operations
+px, py, pz = fits_wcs.world_to_pixel(pt, 1.05*u.Angstrom)
+print("\nUnsliced WCS pixel_to_world:")
+print(fits_wcs.pixel_to_world(px, py, pz))
+print("\nSliced WCS pixel_to_world:")
+print(hl_sliced_wcs.pixel_to_world(px, py))
\ No newline at end of file
