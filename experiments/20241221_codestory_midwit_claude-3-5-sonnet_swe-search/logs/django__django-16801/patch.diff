diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py
index 7f8eb128e1..286e4e6055 100644
--- a/django/db/models/fields/files.py
+++ b/django/db/models/fields/files.py
@@ -441,7 +441,8 @@ class ImageField(FileField):
         # after their corresponding image field don't stay cleared by
         # Model.__init__, see bug #11196.
         # Only run post-initialization dimension update on non-abstract models
-        if not cls._meta.abstract:
+        # and only when width_field or height_field are set
+        if not cls._meta.abstract and (self.width_field or self.height_field):
             signals.post_init.connect(self.update_dimension_fields, sender=cls)
 
     def update_dimension_fields(self, instance, force=False, *args, **kwargs):
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..6ac7c3c769
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,103 @@
+import time
+from django.db import models
+from django.conf import settings
+from django.apps import apps
+import os
+from django.core.files.uploadedfile import SimpleUploadedFile
+
+# Configure Django settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+    DEFAULT_AUTO_FIELD='django.db.models.AutoField',
+)
+
+import django
+django.setup()
+
+# Test Cases
+
+# 1. Basic model without dimensions
+class ModelWithImage(models.Model):
+    image = models.ImageField(upload_to='images/')
+    
+    class Meta:
+        app_label = 'contenttypes'
+
+# 2. Model with dimensions
+class ModelWithImageAndDimensions(models.Model):
+    image = models.ImageField(upload_to='images/', width_field='width', height_field='height')
+    width = models.IntegerField(null=True)
+    height = models.IntegerField(null=True)
+    
+    class Meta:
+        app_label = 'contenttypes'
+
+# 3. Abstract model
+class AbstractImageModel(models.Model):
+    image = models.ImageField(upload_to='images/', width_field='width', height_field='height')
+    width = models.IntegerField(null=True)
+    height = models.IntegerField(null=True)
+    
+    class Meta:
+        abstract = True
+        app_label = 'contenttypes'
+
+# 4. Concrete model inheriting from abstract
+class ConcreteImageModel(AbstractImageModel):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'contenttypes'
+
+def test_performance():
+    print("\nPerformance Test:")
+    print("-" * 50)
+    
+    def measure_init_time(model_class, num_instances=1000):
+        instances = []
+        start_time = time.time()
+        for _ in range(num_instances):
+            instances.append(model_class())
+        end_time = time.time()
+        return end_time - start_time
+
+    time_without_dimensions = measure_init_time(ModelWithImage)
+    print(f"Model without dimensions: {time_without_dimensions:.4f} seconds")
+    
+    time_with_dimensions = measure_init_time(ModelWithImageAndDimensions)
+    print(f"Model with dimensions: {time_with_dimensions:.4f} seconds")
+    
+    time_concrete = measure_init_time(ConcreteImageModel)
+    print(f"Concrete model from abstract: {time_concrete:.4f} seconds")
+
+def test_functionality():
+    print("\nFunctionality Test:")
+    print("-" * 50)
+    
+    # Test model without dimensions
+    model = ModelWithImage()
+    print("Model without dimensions initialized successfully")
+    
+    # Test model with dimensions
+    model_with_dim = ModelWithImageAndDimensions()
+    assert model_with_dim.width is None and model_with_dim.height is None
+    print("Model with dimensions initialized with null values successfully")
+    
+    # Test concrete model from abstract
+    concrete_model = ConcreteImageModel()
+    assert concrete_model.width is None and concrete_model.height is None
+    print("Concrete model from abstract initialized successfully")
+
+if __name__ == "__main__":
+    test_performance()
+    test_functionality()
+    print("\nAll tests passed successfully!")
\ No newline at end of file
