diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index dddf7c679c..c55994be97 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -137,11 +137,22 @@ class CreateModel(ModelOperation):
                 ),
             ]
         elif isinstance(operation, AlterModelOptions) and self.name_lower == operation.name_lower:
+            # Start with a copy of the original options
+            new_options = self.options.copy()
+            
+            # Remove any options that can be altered by AlterModelOptions if they're not in operation.options
+            for key in AlterModelOptions.ALTER_OPTION_KEYS:
+                if key not in operation.options and key in new_options:
+                    del new_options[key]
+            
+            # Add the new options
+            new_options.update(operation.options)
+            
             return [
                 CreateModel(
                     self.name,
                     fields=self.fields,
-                    options={**self.options, **operation.options},
+                    options=new_options,
                     bases=self.bases,
                     managers=self.managers,
                 ),
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..0aa3e80594
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,28 @@
+from django.db.migrations.operations.models import CreateModel, AlterModelOptions
+
+# Create a model with some initial options
+create_op = CreateModel(
+    name="test_model",
+    fields=[],
+    options={"verbose_name": "Test Model", "permissions": [("can_test", "Can test")]}
+)
+
+# Create an operation to clear options
+alter_op = AlterModelOptions(
+    name="test_model",
+    options={}  # This should clear all options
+)
+
+# Reduce the operations
+result = create_op.reduce(alter_op, "testapp")
+
+if result:
+    final_model = result[0]
+    print("Original options:", create_op.options)
+    print("AlterModelOptions:", alter_op.options)
+    print("Final options:", final_model.options)
+    
+    # The final options should be empty since AlterModelOptions with empty dict should clear all options
+    if final_model.options != {}:
+        print("ERROR: Options were not properly cleared!")
+        print("Expected empty dict {}, but got:", final_model.options)
\ No newline at end of file
