diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py
index 8e8c3da06a..8d9a85e5ce 100644
--- a/django/core/handlers/base.py
+++ b/django/core/handlers/base.py
@@ -50,13 +50,19 @@ class BaseHandler:
             else:
                 middleware_is_async = middleware_can_async
             try:
-                # Adapt handler, if needed.
-                handler = self.adapt_method_mode(
+                # Store the original handler before adaptation
+                original_handler = handler
+                # Attempt to adapt and instantiate the middleware
+                adapted_handler = self.adapt_method_mode(
                     middleware_is_async, handler, handler_is_async,
                     debug=settings.DEBUG, name='middleware %s' % middleware_path,
                 )
-                mw_instance = middleware(handler)
+                mw_instance = middleware(adapted_handler)
+                # Only update the handler if middleware was successfully instantiated
+                handler = adapted_handler
             except MiddlewareNotUsed as exc:
+                # Restore the original handler if middleware is not used
+                handler = original_handler
                 if settings.DEBUG:
                     if str(exc):
                         logger.debug('MiddlewareNotUsed(%r): %s', middleware_path, exc)
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..5293e89ba4
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,58 @@
+import os
+import django
+from django.conf import settings
+from django.core.exceptions import MiddlewareNotUsed
+from django.core.handlers.asgi import ASGIHandler
+from django.http import HttpResponse
+from django.urls import path
+from django.core.asgi import get_asgi_application
+
+# Configure settings before importing anything that might use them
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='dummy-key',
+        ROOT_URLCONF=__name__,  # This module will contain URL patterns
+        MIDDLEWARE=[
+            'django.middleware.common.CommonMiddleware',
+            __name__ + '.DummyMiddleware',  # Our middleware that will raise MiddlewareNotUsed
+            __name__ + '.SimpleMiddleware',
+        ],
+        ALLOWED_HOSTS=['*'],
+    )
+    django.setup()
+
+# Simple view
+def test_view(request):
+    return HttpResponse("Test view response")
+
+# URL patterns
+urlpatterns = [
+    path('test/', test_view),
+]
+
+class DummyMiddleware:
+    def __init__(self, get_response):
+        self.get_response = get_response
+        self.async_capable = False
+        raise MiddlewareNotUsed()
+
+    def __call__(self, request):
+        return self.get_response(request)
+
+class SimpleMiddleware:
+    def __init__(self, get_response):
+        self.get_response = get_response
+        self.async_capable = True
+
+    async def __call__(self, request):
+        response = await self.get_response(request)
+        return response
+
+application = get_asgi_application()
+
+if __name__ == "__main__":
+    # Create an instance of ASGIHandler to trigger middleware loading
+    handler = ASGIHandler()
+    print("Middleware chain initialized successfully")
+    print("You can now test this with an ASGI server like uvicorn:")
\ No newline at end of file
