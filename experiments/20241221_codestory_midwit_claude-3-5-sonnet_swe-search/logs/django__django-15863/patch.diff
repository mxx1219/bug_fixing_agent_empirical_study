diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index 7a5b28d159..602d56e075 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -150,14 +150,17 @@ def floatformat(text, arg=-1):
         elif last_char == "u":
             use_l10n = False
             arg = arg[:-1] or -1
-    try:
-        input_val = repr(text)
-        d = Decimal(input_val)
-    except InvalidOperation:
+    if isinstance(text, Decimal):
+        d = text
+    else:
         try:
-            d = Decimal(str(float(text)))
-        except (ValueError, InvalidOperation, TypeError):
-            return ""
+            input_val = repr(text)
+            d = Decimal(input_val)
+        except InvalidOperation:
+            try:
+                d = Decimal(str(float(text)))
+            except (ValueError, InvalidOperation, TypeError):
+                return ""
     try:
         p = int(arg)
     except ValueError:
diff --git a/edge_cases_test.py b/edge_cases_test.py
new file mode 100644
index 0000000000..fe6f464e23
--- /dev/null
+++ b/edge_cases_test.py
@@ -0,0 +1,42 @@
+from decimal import Decimal
+from django import setup
+from django.conf import settings
+from django.template import Template, Context
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+    },
+]
+settings.configure(TEMPLATES=TEMPLATES)
+setup()
+
+def test_value(value, precision=20):
+    t = Template('{{ value|floatformat:' + str(precision) + ' }}')
+    c = Context({'value': value})
+    return t.render(c)
+
+# Test cases
+test_cases = [
+    # Original decimal case
+    Decimal('42.12345678901234567890'),
+    # Regular float
+    3.14159,
+    # Zero
+    Decimal('0.0'),
+    # Negative numbers
+    Decimal('-42.12345678901234567890'),
+    # Very large number
+    Decimal('9999999999.99999999999999999999'),
+    # Very small number
+    Decimal('0.00000000000000000001'),
+    # Integer as decimal
+    Decimal('42'),
+]
+
+print("Testing edge cases:")
+print("-" * 50)
+for value in test_cases:
+    print(f"Input:  {value}")
+    print(f"Output: {test_value(value)}")
+    print("-" * 50)
\ No newline at end of file
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..6262575ba0
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,16 @@
+from decimal import Decimal
+from django import setup
+from django.conf import settings
+from django.template import Template, Context
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+    },
+]
+settings.configure(TEMPLATES=TEMPLATES)
+setup()
+
+t = Template('{{ value|floatformat:20 }}')
+c = Context({'value': Decimal('42.12345678901234567890')})
+print(t.render(c))  # Should print the full precision
\ No newline at end of file
