diff --git a/django/db/migrations/writer.py b/django/db/migrations/writer.py
index a59f0c8dcb..dcf1688ebf 100644
--- a/django/db/migrations/writer.py
+++ b/django/db/migrations/writer.py
@@ -173,9 +173,21 @@ class MigrationWriter:
         else:
             imports.add("from django.db import migrations")
 
-        # Sort imports by the package / module to be imported (the part after
-        # "from" in "from ... import ..." or after "import" in "import ...").
-        sorted_imports = sorted(imports, key=lambda i: i.split()[1])
+        # Split imports into 'import' and 'from' groups
+        import_statements = []
+        from_statements = []
+        for imp in imports:
+            if imp.startswith('import '):
+                import_statements.append(imp)
+            else:
+                from_statements.append(imp)
+        
+        # Sort each group by module name
+        import_statements.sort(key=lambda i: i.split()[1])
+        from_statements.sort(key=lambda i: i.split()[1])
+        
+        # Combine the groups with 'import' statements first
+        sorted_imports = import_statements + from_statements
         items["imports"] = "\n".join(sorted_imports) + "\n" if imports else ""
         if migration_imports:
             items["imports"] += (
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..d47219db31
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,71 @@
+from django.conf import settings
+from django.db.migrations.writer import MigrationWriter
+from django.db import migrations
+import django.utils.timezone
+
+# Configure minimal Django settings
+settings.configure(
+    USE_TZ=True,
+    INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth'],
+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3'}},
+)
+
+class DummyMigration:
+    def __init__(self):
+        self.operations = []
+        self.dependencies = []
+        self.app_label = 'testapp'
+        self.name = 'test_migration'
+        self.initial = False
+        self.replaces = []
+
+# Create a migration writer
+migration = DummyMigration()
+writer = MigrationWriter(migration)
+
+# Create a set of imports that demonstrates various edge cases
+test_imports = {
+    'import datetime',
+    'from django.db import migrations, models',
+    'import time',
+    'from django.conf import settings',
+    'import sys',
+    'from . import utils',
+    'from ..models import MyModel',
+    'import os.path',
+    'from django.utils import timezone',
+}
+
+# Monkey patch the as_string method to use our test imports
+original_as_string = writer.as_string
+def patched_as_string():
+    content = original_as_string()
+    # Replace the imports section with our test imports
+    import_lines = []
+    for imp in test_imports:
+        if imp.startswith('import '):
+            import_lines.append(imp)
+    import_lines.sort()
+    from_lines = []
+    for imp in test_imports:
+        if imp.startswith('from '):
+            from_lines.append(imp)
+    from_lines.sort()
+    
+    all_imports = import_lines + from_lines
+    imports_str = '\n'.join(all_imports) + '\n\n'
+    
+    # Replace the imports section in the content
+    start = content.find('# Generated by Django')
+    end = content.find('class Migration')
+    header = content[:start + content[start:].find('\n') + 1]
+    rest = content[end:]
+    return header + '\n' + imports_str + rest
+
+writer.as_string = patched_as_string
+
+# Get the migration content
+content = writer.as_string()
+print("Generated migration content:")
+print("-" * 50)
+print(content)
\ No newline at end of file
