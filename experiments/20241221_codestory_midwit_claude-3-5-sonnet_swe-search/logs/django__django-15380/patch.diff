diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py
index bf9c2acd26..7cffd230ce 100644
--- a/django/db/migrations/autodetector.py
+++ b/django/db/migrations/autodetector.py
@@ -823,8 +823,16 @@ class MigrationAutodetector:
         self.renamed_fields = {}
         for app_label, model_name, field_name in sorted(self.new_field_keys - self.old_field_keys):
             old_model_name = self.renamed_models.get((app_label, model_name), model_name)
-            old_model_state = self.from_state.models[app_label, old_model_name]
-            new_model_state = self.to_state.models[app_label, old_model_name]
+            # Try to find the old model state, accounting for case sensitivity
+            old_model_key = next(
+                (key for key in self.from_state.models.keys()
+                 if key[0] == app_label and key[1].lower() == old_model_name.lower()),
+                None
+            )
+            if old_model_key is None:
+                continue
+            old_model_state = self.from_state.models[old_model_key]
+            new_model_state = self.to_state.models[app_label, model_name]
             field = new_model_state.get_field(field_name)
             # Scan to see if this is actually a rename!
             field_dec = self.deep_deconstruct(field)
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..0f5b0f929a
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,52 @@
+from django.db.migrations.state import ProjectState, ModelState
+from django.db.migrations.autodetector import MigrationAutodetector
+from django.db.migrations.questioner import MigrationQuestioner
+from django.db import models
+
+class SilentMigrationQuestioner(MigrationQuestioner):
+    def ask_rename_model(self, old_model_state, new_model_state):
+        return True
+
+    def ask_rename(self, model_name, old_name, new_name, field_instance):
+        return True
+
+# Create initial state
+initial_state = ProjectState()
+
+# Create old model state
+old_model = ModelState(
+    app_label='test_one',
+    name='MyModel',
+    fields=[
+        ('id', models.AutoField(primary_key=True)),
+        ('name', models.CharField(max_length=100)),
+    ]
+)
+initial_state.add_model(old_model)
+
+# Create new state
+new_state = ProjectState()
+
+# Create new model state (renamed model and field)
+new_model = ModelState(
+    app_label='test_one',
+    name='MyModel2',
+    fields=[
+        ('id', models.AutoField(primary_key=True)),
+        ('new_name', models.CharField(max_length=100)),  # Renamed field
+    ]
+)
+new_state.add_model(new_model)
+
+# Create autodetector with a silent questioner
+autodetector = MigrationAutodetector(
+    from_state=initial_state,
+    to_state=new_state,
+    questioner=SilentMigrationQuestioner(),
+)
+
+# Try to detect changes
+try:
+    changes = autodetector._detect_changes()
+except KeyError as e:
+    print(f"KeyError occurred: {e}")
\ No newline at end of file
