diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 64be087bf1..6219590924 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -269,7 +269,8 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):
                         "class": get_ul_class(self.radio_fields[db_field.name]),
                     }
                 )
-                kwargs["empty_label"] = _("None") if db_field.blank else None
+                if "empty_label" not in kwargs:
+                    kwargs["empty_label"] = _("None") if db_field.blank else None
 
         if "queryset" not in kwargs:
             queryset = self.get_field_queryset(db, db_field, request)
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..7f1a405884
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,114 @@
+import django
+from django.conf import settings
+import os
+
+# Configure minimal settings
+settings.configure(
+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+        'django.contrib.admin',
+    ],
+    ROOT_URLCONF=[],
+    SECRET_KEY='dummy-key-for-tests',
+)
+django.setup()
+
+from django.contrib.admin import ModelAdmin, site
+from django.db import models
+from django.test import TestCase
+from django.utils.translation import gettext as _
+
+# Create test models
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+
+    class Meta:
+        app_label = 'admin'
+
+    def __str__(self):
+        return self.name
+
+class RelatedModel(models.Model):
+    test_model = models.ForeignKey(TestModel, on_delete=models.CASCADE, blank=True)
+    required_test_model = models.ForeignKey(TestModel, on_delete=models.CASCADE, blank=False, related_name='required_by')
+    name = models.CharField(max_length=100)
+
+    class Meta:
+        app_label = 'admin'
+
+# Create ModelAdmin classes for different test cases
+class CustomEmptyLabelAdmin(ModelAdmin):
+    radio_fields = {'test_model': 1, 'required_test_model': 1}
+
+    def formfield_for_foreignkey(self, db_field, request, **kwargs):
+        if db_field.name == 'test_model':
+            kwargs['empty_label'] = "I WANT TO SET MY OWN EMPTY LABEL"
+        return super().formfield_for_foreignkey(db_field, request, **kwargs)
+
+class DefaultEmptyLabelAdmin(ModelAdmin):
+    radio_fields = {'test_model': 1, 'required_test_model': 1}
+
+class NoneEmptyLabelAdmin(ModelAdmin):
+    radio_fields = {'test_model': 1, 'required_test_model': 1}
+
+    def formfield_for_foreignkey(self, db_field, request, **kwargs):
+        if db_field.name == 'test_model':
+            kwargs['empty_label'] = None
+        return super().formfield_for_foreignkey(db_field, request, **kwargs)
+
+# Create test case
+class TestEmptyLabelOverride(TestCase):
+    def test_custom_empty_label(self):
+        """Test that custom empty_label is preserved"""
+        admin = CustomEmptyLabelAdmin(RelatedModel, site)
+        request = None
+        db_field = RelatedModel._meta.get_field('test_model')
+        
+        form_field = admin.formfield_for_foreignkey(db_field, request)
+        assert form_field.empty_label == "I WANT TO SET MY OWN EMPTY LABEL", \
+            f"Empty label was '{form_field.empty_label}' instead of 'I WANT TO SET MY OWN EMPTY LABEL'"
+        print("✓ Custom empty_label is preserved")
+
+    def test_default_empty_label(self):
+        """Test that default empty_label behavior is maintained"""
+        admin = DefaultEmptyLabelAdmin(RelatedModel, site)
+        request = None
+        db_field = RelatedModel._meta.get_field('test_model')
+        
+        form_field = admin.formfield_for_foreignkey(db_field, request)
+        assert form_field.empty_label == _("None"), \
+            f"Default empty label was '{form_field.empty_label}' instead of '{_('None')}'"
+        print("✓ Default empty_label behavior is maintained")
+
+    def test_none_empty_label(self):
+        """Test that None empty_label is preserved"""
+        admin = NoneEmptyLabelAdmin(RelatedModel, site)
+        request = None
+        db_field = RelatedModel._meta.get_field('test_model')
+        
+        form_field = admin.formfield_for_foreignkey(db_field, request)
+        assert form_field.empty_label is None, \
+            f"Empty label was '{form_field.empty_label}' instead of None"
+        print("✓ None empty_label is preserved")
+
+    def test_non_blank_field(self):
+        """Test behavior with non-blank fields"""
+        admin = CustomEmptyLabelAdmin(RelatedModel, site)
+        request = None
+        db_field = RelatedModel._meta.get_field('required_test_model')
+        
+        form_field = admin.formfield_for_foreignkey(db_field, request)
+        assert form_field.empty_label is None, \
+            f"Non-blank field empty label was '{form_field.empty_label}' instead of None"
+        print("✓ Non-blank field behavior is correct")
+
+if __name__ == '__main__':
+    # Run all tests
+    test_case = TestEmptyLabelOverride()
+    test_case.test_custom_empty_label()
+    test_case.test_default_empty_label()
+    test_case.test_none_empty_label()
+    test_case.test_non_blank_field()
+    print("\nAll tests passed successfully!")
\ No newline at end of file
