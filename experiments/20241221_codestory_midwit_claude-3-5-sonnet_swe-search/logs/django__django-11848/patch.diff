diff --git a/django/utils/http.py b/django/utils/http.py
index 572cfb4347..d671276c3c 100644
--- a/django/utils/http.py
+++ b/django/utils/http.py
@@ -176,10 +176,14 @@ def parse_http_date(date):
     try:
         year = int(m.group('year'))
         if year < 100:
-            if year < 70:
-                year += 2000
-            else:
-                year += 1900
+            # For two-digit years, first convert to full year
+            full_year = year + 2000
+            current_year = datetime.datetime.now().year
+            # If the resulting year is more than 50 years in the future,
+            # use the previous century instead
+            if full_year - current_year > 50:
+                full_year -= 100
+            year = full_year
         month = MONTHS.index(m.group('mon').lower()) + 1
         day = int(m.group('day'))
         hour = int(m.group('hour'))
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..7cd252f096
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,28 @@
+from django.utils.http import parse_http_date
+from datetime import datetime
+
+def test_two_digit_year():
+    current_year = datetime.now().year
+    print(f"Current year: {current_year}\n")
+
+    test_cases = [
+        # Test case more than 50 years in future
+        "Sunday, 06-Nov-37 08:49:37 GMT",  # Should be 1937 since 2037 is >50 years future
+        # Test case less than 50 years in future
+        f"Sunday, 06-Nov-{str(current_year + 20)[-2:]} 08:49:37 GMT",  # Should stay in current century
+        # Edge case right at 50 years
+        f"Sunday, 06-Nov-{str(current_year + 50)[-2:]} 08:49:37 GMT",  # Should stay in current century
+        # Edge case just over 50 years
+        f"Sunday, 06-Nov-{str(current_year + 51)[-2:]} 08:49:37 GMT",  # Should go to previous century
+    ]
+
+    for date_str in test_cases:
+        timestamp = parse_http_date(date_str)
+        dt = datetime.utcfromtimestamp(timestamp)
+        print(f"Input: {date_str}")
+        print(f"Interpreted as: {dt}")
+        print(f"Years from now: {dt.year - current_year}")
+        print()
+
+if __name__ == "__main__":
+    test_two_digit_year()
\ No newline at end of file
