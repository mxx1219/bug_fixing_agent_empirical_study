diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py
index 075ecee1be..ce980bb9d9 100644
--- a/django/db/models/constraints.py
+++ b/django/db/models/constraints.py
@@ -17,12 +17,14 @@ __all__ = ["BaseConstraint", "CheckConstraint", "Deferrable", "UniqueConstraint"
 
 
 class BaseConstraint:
-    default_violation_error_message = _("Constraint “%(name)s” is violated.")
+    default_violation_error_message = _('Constraint "%(name)s" is violated.')
+    default_violation_error_code = "constraint_violation"
     violation_error_message = None
+    violation_error_code = None
 
     # RemovedInDjango60Warning: When the deprecation ends, replace with:
-    # def __init__(self, *, name, violation_error_message=None):
-    def __init__(self, *args, name=None, violation_error_message=None):
+    # def __init__(self, *, name, violation_error_message=None, violation_error_code=None):
+    def __init__(self, *args, name=None, violation_error_message=None, violation_error_code=None):
         # RemovedInDjango60Warning.
         if name is None and not args:
             raise TypeError(
@@ -34,6 +36,10 @@ class BaseConstraint:
             self.violation_error_message = violation_error_message
         else:
             self.violation_error_message = self.default_violation_error_message
+        if violation_error_code is not None:
+            self.violation_error_code = violation_error_code
+        else:
+            self.violation_error_code = self.default_violation_error_code
         # RemovedInDjango60Warning.
         if args:
             warnings.warn(
@@ -42,7 +48,7 @@ class BaseConstraint:
                 RemovedInDjango60Warning,
                 stacklevel=2,
             )
-            for arg, attr in zip(args, ["name", "violation_error_message"]):
+            for arg, attr in zip(args, ["name", "violation_error_message", "violation_error_code"]):
                 if arg:
                     setattr(self, attr, arg)
 
@@ -65,6 +71,12 @@ class BaseConstraint:
     def get_violation_error_message(self):
         return self.violation_error_message % {"name": self.name}
 
+    def get_validation_error(self):
+        return ValidationError(
+            self.get_violation_error_message(),
+            code=self.violation_error_code,
+        )
+
     def deconstruct(self):
         path = "%s.%s" % (self.__class__.__module__, self.__class__.__name__)
         path = path.replace("django.db.models.constraints", "django.db.models")
@@ -74,6 +86,11 @@ class BaseConstraint:
             and self.violation_error_message != self.default_violation_error_message
         ):
             kwargs["violation_error_message"] = self.violation_error_message
+        if (
+            self.violation_error_code is not None
+            and self.violation_error_code != self.default_violation_error_code
+        ):
+            kwargs["violation_error_code"] = self.violation_error_code
         return (path, (), kwargs)
 
     def clone(self):
@@ -82,13 +99,17 @@ class BaseConstraint:
 
 
 class CheckConstraint(BaseConstraint):
-    def __init__(self, *, check, name, violation_error_message=None):
+    def __init__(self, *, check, name, violation_error_message=None, violation_error_code=None):
         self.check = check
         if not getattr(check, "conditional", False):
             raise TypeError(
                 "CheckConstraint.check must be a Q instance or boolean expression."
             )
-        super().__init__(name=name, violation_error_message=violation_error_message)
+        super().__init__(
+            name=name,
+            violation_error_message=violation_error_message,
+            violation_error_code=violation_error_code,
+        )
 
     def _get_check_sql(self, model, schema_editor):
         query = Query(model=model, alias_cols=False)
@@ -112,12 +133,12 @@ class CheckConstraint(BaseConstraint):
         against = instance._get_field_value_map(meta=model._meta, exclude=exclude)
         try:
             if not Q(self.check).check(against, using=using):
-                raise ValidationError(self.get_violation_error_message())
+                raise self.get_validation_error()
         except FieldError:
             pass
 
     def __repr__(self):
-        return "<%s: check=%s name=%s%s>" % (
+        return "<%s: check=%s name=%s%s%s>" % (
             self.__class__.__qualname__,
             self.check,
             repr(self.name),
@@ -127,6 +148,12 @@ class CheckConstraint(BaseConstraint):
                 or self.violation_error_message == self.default_violation_error_message
                 else " violation_error_message=%r" % self.violation_error_message
             ),
+            (
+                ""
+                if self.violation_error_code is None
+                or self.violation_error_code == self.default_violation_error_code
+                else " violation_error_code=%r" % self.violation_error_code
+            ),
         )
 
     def __eq__(self, other):
@@ -135,6 +162,7 @@ class CheckConstraint(BaseConstraint):
                 self.name == other.name
                 and self.check == other.check
                 and self.violation_error_message == other.violation_error_message
+                and self.violation_error_code == other.violation_error_code
             )
         return super().__eq__(other)
 
@@ -164,6 +192,7 @@ class UniqueConstraint(BaseConstraint):
         include=None,
         opclasses=(),
         violation_error_message=None,
+        violation_error_code=None,
     ):
         if not name:
             raise ValueError("A unique constraint must be named.")
@@ -213,7 +242,11 @@ class UniqueConstraint(BaseConstraint):
             F(expression) if isinstance(expression, str) else expression
             for expression in expressions
         )
-        super().__init__(name=name, violation_error_message=violation_error_message)
+        super().__init__(
+            name=name,
+            violation_error_message=violation_error_message,
+            violation_error_code=violation_error_code,
+        )
 
     @property
     def contains_expressions(self):
@@ -293,7 +326,7 @@ class UniqueConstraint(BaseConstraint):
         )
 
     def __repr__(self):
-        return "<%s:%s%s%s%s%s%s%s%s>" % (
+        return "<%s:%s%s%s%s%s%s%s%s%s>" % (
             self.__class__.__qualname__,
             "" if not self.fields else " fields=%s" % repr(self.fields),
             "" if not self.expressions else " expressions=%s" % repr(self.expressions),
@@ -308,6 +341,12 @@ class UniqueConstraint(BaseConstraint):
                 or self.violation_error_message == self.default_violation_error_message
                 else " violation_error_message=%r" % self.violation_error_message
             ),
+            (
+                ""
+                if self.violation_error_code is None
+                or self.violation_error_code == self.default_violation_error_code
+                else " violation_error_code=%r" % self.violation_error_code
+            ),
         )
 
     def __eq__(self, other):
@@ -321,6 +360,7 @@ class UniqueConstraint(BaseConstraint):
                 and self.opclasses == other.opclasses
                 and self.expressions == other.expressions
                 and self.violation_error_message == other.violation_error_message
+                and self.violation_error_code == other.violation_error_code
             )
         return super().__eq__(other)
 
@@ -385,7 +425,7 @@ class UniqueConstraint(BaseConstraint):
         if not self.condition:
             if queryset.exists():
                 if self.expressions:
-                    raise ValidationError(self.get_violation_error_message())
+                    raise self.get_validation_error()
                 # When fields are defined, use the unique_error_message() for
                 # backward compatibility.
                 for model, constraints in instance.get_constraints():
@@ -400,6 +440,6 @@ class UniqueConstraint(BaseConstraint):
                 if (self.condition & Exists(queryset.filter(self.condition))).check(
                     against, using=using
                 ):
-                    raise ValidationError(self.get_violation_error_message())
+                    raise self.get_validation_error()
             except FieldError:
-                pass
+                pass
\ No newline at end of file
diff --git a/django/db/models/constraints.py.new b/django/db/models/constraints.py.new
new file mode 100644
index 0000000000..81bd769d9b
--- /dev/null
+++ b/django/db/models/constraints.py.new
@@ -0,0 +1,172 @@
+import warnings
+from enum import Enum
+from types import NoneType
+
+from django.core.exceptions import FieldError, ValidationError
+from django.db import connections
+from django.db.models.expressions import Exists, ExpressionList, F, OrderBy
+from django.db.models.indexes import IndexExpression
+from django.db.models.lookups import Exact
+from django.db.models.query_utils import Q
+from django.db.models.sql.query import Query
+from django.db.utils import DEFAULT_DB_ALIAS
+from django.utils.deprecation import RemovedInDjango60Warning
+from django.utils.translation import gettext_lazy as _
+
+__all__ = ["BaseConstraint", "CheckConstraint", "Deferrable", "UniqueConstraint"]
+
+
+class BaseConstraint:
+    default_violation_error_message = _("Constraint "%(name)s" is violated.")
+    default_violation_error_code = "constraint_violation"
+    violation_error_message = None
+    violation_error_code = None
+
+    # RemovedInDjango60Warning: When the deprecation ends, replace with:
+    # def __init__(self, *, name, violation_error_message=None, violation_error_code=None):
+    def __init__(self, *args, name=None, violation_error_message=None, violation_error_code=None):
+        # RemovedInDjango60Warning.
+        if name is None and not args:
+            raise TypeError(
+                f"{self.__class__.__name__}.__init__() missing 1 required keyword-only "
+                f"argument: 'name'"
+            )
+        self.name = name
+        if violation_error_message is not None:
+            self.violation_error_message = violation_error_message
+        else:
+            self.violation_error_message = self.default_violation_error_message
+        if violation_error_code is not None:
+            self.violation_error_code = violation_error_code
+        else:
+            self.violation_error_code = self.default_violation_error_code
+        # RemovedInDjango60Warning.
+        if args:
+            warnings.warn(
+                f"Passing positional arguments to {self.__class__.__name__} is "
+                f"deprecated.",
+                RemovedInDjango60Warning,
+                stacklevel=2,
+            )
+            for arg, attr in zip(args, ["name", "violation_error_message", "violation_error_code"]):
+                if arg:
+                    setattr(self, attr, arg)
+
+    @property
+    def contains_expressions(self):
+        return False
+
+    def constraint_sql(self, model, schema_editor):
+        raise NotImplementedError("This method must be implemented by a subclass.")
+
+    def create_sql(self, model, schema_editor):
+        raise NotImplementedError("This method must be implemented by a subclass.")
+
+    def remove_sql(self, model, schema_editor):
+        raise NotImplementedError("This method must be implemented by a subclass.")
+
+    def validate(self, model, instance, exclude=None, using=DEFAULT_DB_ALIAS):
+        raise NotImplementedError("This method must be implemented by a subclass.")
+
+    def get_violation_error_message(self):
+        return self.violation_error_message % {"name": self.name}
+
+    def get_validation_error(self):
+        return ValidationError(
+            self.get_violation_error_message(),
+            code=self.violation_error_code,
+        )
+
+    def deconstruct(self):
+        path = "%s.%s" % (self.__class__.__module__, self.__class__.__name__)
+        path = path.replace("django.db.models.constraints", "django.db.models")
+        kwargs = {"name": self.name}
+        if (
+            self.violation_error_message is not None
+            and self.violation_error_message != self.default_violation_error_message
+        ):
+            kwargs["violation_error_message"] = self.violation_error_message
+        if (
+            self.violation_error_code is not None
+            and self.violation_error_code != self.default_violation_error_code
+        ):
+            kwargs["violation_error_code"] = self.violation_error_code
+        return (path, (), kwargs)
+
+    def clone(self):
+        _, args, kwargs = self.deconstruct()
+        return self.__class__(*args, **kwargs)
+
+
+class CheckConstraint(BaseConstraint):
+    def __init__(self, *, check, name, violation_error_message=None, violation_error_code=None):
+        self.check = check
+        if not getattr(check, "conditional", False):
+            raise TypeError(
+                "CheckConstraint.check must be a Q instance or boolean expression."
+            )
+        super().__init__(
+            name=name,
+            violation_error_message=violation_error_message,
+            violation_error_code=violation_error_code,
+        )
+
+    def _get_check_sql(self, model, schema_editor):
+        query = Query(model=model, alias_cols=False)
+        where = query.build_where(self.check)
+        compiler = query.get_compiler(connection=schema_editor.connection)
+        sql, params = where.as_sql(compiler, schema_editor.connection)
+        return sql % tuple(schema_editor.quote_value(p) for p in params)
+
+    def constraint_sql(self, model, schema_editor):
+        check = self._get_check_sql(model, schema_editor)
+        return schema_editor._check_sql(self.name, check)
+
+    def create_sql(self, model, schema_editor):
+        check = self._get_check_sql(model, schema_editor)
+        return schema_editor._create_check_sql(model, self.name, check)
+
+    def remove_sql(self, model, schema_editor):
+        return schema_editor._delete_check_sql(model, self.name)
+
+    def validate(self, model, instance, exclude=None, using=DEFAULT_DB_ALIAS):
+        against = instance._get_field_value_map(meta=model._meta, exclude=exclude)
+        try:
+            if not Q(self.check).check(against, using=using):
+                raise self.get_validation_error()
+        except FieldError:
+            pass
+
+    def __repr__(self):
+        return "<%s: check=%s name=%s%s%s>" % (
+            self.__class__.__qualname__,
+            self.check,
+            repr(self.name),
+            (
+                ""
+                if self.violation_error_message is None
+                or self.violation_error_message == self.default_violation_error_message
+                else " violation_error_message=%r" % self.violation_error_message
+            ),
+            (
+                ""
+                if self.violation_error_code is None
+                or self.violation_error_code == self.default_violation_error_code
+                else " violation_error_code=%r" % self.violation_error_code
+            ),
+        )
+
+    def __eq__(self, other):
+        if isinstance(other, CheckConstraint):
+            return (
+                self.name == other.name
+                and self.check == other.check
+                and self.violation_error_message == other.violation_error_message
+                and self.violation_error_code == other.violation_error_code
+            )
+        return super().__eq__(other)
+
+    def deconstruct(self):
+        path, args, kwargs = super().deconstruct()
+        kwargs["check"] = self.check
+        return path, args, kwargs
\ No newline at end of file
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..13e2251952
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,85 @@
+from django.conf import settings
+from django.core.exceptions import ValidationError
+from django.db.models import Q
+from django.db.models.constraints import CheckConstraint
+from django.apps import apps
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:'
+            }
+        },
+        INSTALLED_APPS=[],
+        USE_I18N=False,  # Disable translation system
+    )
+    apps.ready = True  # Mark apps as ready
+
+class Meta:
+    pass
+
+class MockModel:
+    _meta = Meta()
+    def _get_field_value_map(self, meta=None, exclude=None):
+        return {'age': 15}
+
+instance = MockModel()
+
+# Test 1: Custom error message and code
+constraint1 = CheckConstraint(
+    check=Q(age__gte=18),
+    name='age_gte_18',
+    violation_error_message='Must be at least 18 years old',
+    violation_error_code='age_too_young'
+)
+
+print("Test 1: Custom error message and code")
+try:
+    constraint1.validate(MockModel, instance)
+except ValidationError as e:
+    print(f"Error message: {e.messages[0]}")
+    print(f"Error code: {e.code}")
+
+print("\nTest 2: Default error message and code")
+# Test 2: Default error message and code
+constraint2 = CheckConstraint(
+    check=Q(age__gte=18),
+    name='age_gte_18'
+)
+
+try:
+    constraint2.validate(MockModel, instance)
+except ValidationError as e:
+    print(f"Error message: {e.messages[0]}")
+    print(f"Error code: {e.code}")
+
+print("\nTest 3: Custom error message only")
+# Test 3: Custom error message only
+constraint3 = CheckConstraint(
+    check=Q(age__gte=18),
+    name='age_gte_18',
+    violation_error_message='Must be at least 18 years old'
+)
+
+try:
+    constraint3.validate(MockModel, instance)
+except ValidationError as e:
+    print(f"Error message: {e.messages[0]}")
+    print(f"Error code: {e.code}")
+
+print("\nTest 4: Custom error code only")
+# Test 4: Custom error code only
+constraint4 = CheckConstraint(
+    check=Q(age__gte=18),
+    name='age_gte_18',
+    violation_error_code='age_too_young'
+)
+
+try:
+    constraint4.validate(MockModel, instance)
+except ValidationError as e:
+    print(f"Error message: {e.messages[0]}")
+    print(f"Error code: {e.code}")
\ No newline at end of file
