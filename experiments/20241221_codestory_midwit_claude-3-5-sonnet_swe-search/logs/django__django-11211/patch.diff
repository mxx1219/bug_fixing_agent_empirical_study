diff --git a/django/contrib/contenttypes/fields.py b/django/contrib/contenttypes/fields.py
index ed98ecb48c..f4c88102cc 100644
--- a/django/contrib/contenttypes/fields.py
+++ b/django/contrib/contenttypes/fields.py
@@ -202,8 +202,16 @@ class GenericForeignKey(FieldCacheMixin):
             else:
                 model = self.get_content_type(id=ct_id,
                                               using=obj._state.db).model_class()
-                return (model._meta.pk.get_prep_value(getattr(obj, self.fk_field)),
-                        model)
+                # Get the raw value from the field and convert it to the correct type
+                fk_val = getattr(obj, self.fk_field)
+                if fk_val is not None:
+                    try:
+                        # Try to convert the value using the field's to_python method
+                        fk_val = model._meta.pk.to_python(fk_val)
+                    except Exception:
+                        # If conversion fails, use the raw value
+                        pass
+                return (fk_val, model)
 
         return (
             ret_val,
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..e13d8c0070
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,82 @@
+import os
+import sys
+import uuid
+
+# Configure Django settings first
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            '__main__',
+        ],
+        MIDDLEWARE=[],
+        SECRET_KEY='dummy',
+    )
+
+import django
+django.setup()
+
+from django.db import models, connection
+from django.contrib.contenttypes.fields import GenericForeignKey
+from django.contrib.contenttypes.models import ContentType
+from django.test import TestCase
+
+# Define test models
+class Foo(models.Model):
+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
+    name = models.CharField(max_length=100)
+
+    class Meta:
+        app_label = '__main__'
+
+class Bar(models.Model):
+    foo_content_type = models.ForeignKey(
+        ContentType,
+        related_name='actor',
+        on_delete=models.CASCADE,
+        db_index=True
+    )
+    foo_object_id = models.CharField(max_length=255, db_index=True)
+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')
+    name = models.CharField(max_length=100)
+
+    class Meta:
+        app_label = '__main__'
+
+# Create tables manually since we're not using migrations
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Foo)
+    schema_editor.create_model(Bar)
+
+# Test case
+class GFKPrefetchTest(TestCase):
+    def setUp(self):
+        # Create test data
+        self.foo = Foo.objects.create(name='Test Foo')
+        self.bar = Bar.objects.create(
+            foo_content_type=ContentType.objects.get_for_model(Foo),
+            foo_object_id=str(self.foo.id),
+            name='Test Bar'
+        )
+
+    def test_prefetch_related(self):
+        # Try to prefetch the GFK relationship
+        bars = list(Bar.objects.all().prefetch_related('foo'))
+        
+        # This should not be None if prefetch is working correctly
+        print(f"Bar foo reference: {bars[0].foo}")
+        assert bars[0].foo is not None, "Prefetch related failed - foo is None"
+        assert bars[0].foo.id == self.foo.id, "Prefetch related failed - wrong foo object"
+
+if __name__ == '__main__':
+    from django.test.runner import DiscoverRunner
+    test_runner = DiscoverRunner(verbosity=2)
+    failures = test_runner.run_tests(['__main__'])
+    sys.exit(bool(failures))
\ No newline at end of file
