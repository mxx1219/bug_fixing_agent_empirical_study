diff --git a/django/core/files/locks.py b/django/core/files/locks.py
index c46b00b905..4938347ea7 100644
--- a/django/core/files/locks.py
+++ b/django/core/files/locks.py
@@ -107,9 +107,15 @@ else:
             return True
     else:
         def lock(f, flags):
-            ret = fcntl.flock(_fd(f), flags)
-            return ret == 0
+            try:
+                fcntl.flock(_fd(f), flags)
+                return True
+            except OSError:
+                return False
 
         def unlock(f):
-            ret = fcntl.flock(_fd(f), fcntl.LOCK_UN)
-            return ret == 0
+            try:
+                fcntl.flock(_fd(f), fcntl.LOCK_UN)
+                return True
+            except OSError:
+                return False
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..c6a046bdb3
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,32 @@
+import os
+import tempfile
+from django.core.files import locks
+
+def demonstrate_lock_bug():
+    print("Demonstrating lock bug in POSIX implementation")
+    
+    # Create a temporary file
+    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
+        temp_file.write(b"test content")
+        temp_path = temp_file.name
+    
+    # Open the file for testing locks
+    with open(temp_path, 'rb') as f1:
+        # Try exclusive lock - should succeed and return True
+        result = locks.lock(f1, locks.LOCK_EX)
+        print(f"First lock attempt (should be True): {result}")
+        
+        # Try another lock from a different file descriptor - should fail and return False
+        with open(temp_path, 'rb') as f2:
+            result2 = locks.lock(f2, locks.LOCK_EX | locks.LOCK_NB)
+            print(f"Second lock attempt (should be False): {result2}")
+        
+        # Unlock the file
+        unlock_result = locks.unlock(f1)
+        print(f"Unlock result (should be True): {unlock_result}")
+    
+    # Clean up
+    os.unlink(temp_path)
+
+if __name__ == "__main__":
+    demonstrate_lock_bug()
\ No newline at end of file
