diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index d913658291..ee569fd8cf 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -297,19 +297,50 @@ class BaseExpression:
         If a source's output field resolves to None, exclude it from this check.
         If all sources are None, then an error is raised higher up the stack in
         the output_field property.
+
+        Special cases for temporal fields:
+        1. When subtracting two temporal fields of the same type, the result is a DurationField
+        2. When adding/subtracting a duration to/from a temporal field, the result is the same type as the temporal field
         """
-        sources_iter = (source for source in self.get_source_fields() if source is not None)
-        for output_field in sources_iter:
-            for source in sources_iter:
-                if not isinstance(output_field, source.__class__):
-                    raise FieldError(
-                        'Expression contains mixed types: %s, %s. You must '
-                        'set output_field.' % (
-                            output_field.__class__.__name__,
-                            source.__class__.__name__,
-                        )
+        sources = [source for source in self.get_source_fields() if source is not None]
+        if not sources:
+            return None
+
+        # Handle temporal field operations
+        if len(sources) == 2 and hasattr(self, 'connector'):
+            lhs, rhs = sources
+            lhs_type = lhs.get_internal_type()
+            rhs_type = rhs.get_internal_type()
+            temporal_fields = {'DateField', 'DateTimeField', 'TimeField'}
+
+            # Case 1: datetime - datetime = duration
+            if (
+                self.connector == self.SUB and
+                lhs_type in temporal_fields and
+                lhs_type == rhs_type
+            ):
+                return fields.DurationField()
+
+            # Case 2: datetime Â± duration = datetime
+            if (
+                self.connector in {self.ADD, self.SUB} and
+                ((lhs_type in temporal_fields and rhs_type == 'DurationField') or
+                 (rhs_type in temporal_fields and lhs_type == 'DurationField'))
+            ):
+                return next(source for source in sources if source.get_internal_type() in temporal_fields)
+
+        # Default behavior for other cases
+        output_field = sources[0]
+        for source in sources[1:]:
+            if not isinstance(output_field, source.__class__):
+                raise FieldError(
+                    'Expression contains mixed types: %s, %s. You must '
+                    'set output_field.' % (
+                        output_field.__class__.__name__,
+                        source.__class__.__name__,
                     )
-            return output_field
+                )
+        return output_field
 
     @staticmethod
     def _convert_value_noop(value, expression, connection):
