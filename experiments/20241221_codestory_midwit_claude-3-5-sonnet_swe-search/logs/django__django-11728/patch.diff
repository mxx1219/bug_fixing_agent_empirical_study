diff --git a/django/contrib/admindocs/utils.py b/django/contrib/admindocs/utils.py
index 1ce4594501..b35d77a11e 100644
--- a/django/contrib/admindocs/utils.py
+++ b/django/contrib/admindocs/utils.py
@@ -166,13 +166,8 @@ def replace_named_groups(pattern):
     for start, end, group_name in named_group_indices:
         # Handle nested parentheses, e.g. '^(?P<a>(x|y))/b'.
         unmatched_open_brackets, prev_char = 1, None
-        for idx, val in enumerate(pattern[end:]):
-            # If brackets are balanced, the end of the string for the current
-            # named capture group pattern has been reached.
-            if unmatched_open_brackets == 0:
-                group_pattern_and_name.append((pattern[start:end + idx], group_name))
-                break
-
+        remaining_pattern = pattern[end:]
+        for idx, val in enumerate(remaining_pattern):
             # Check for unescaped `(` and `)`. They mark the start and end of a
             # nested group.
             if val == '(' and prev_char != '\\':
@@ -181,6 +176,17 @@ def replace_named_groups(pattern):
                 unmatched_open_brackets -= 1
             prev_char = val
 
+            # If brackets are balanced, the end of the string for the current
+            # named capture group pattern has been reached.
+            if unmatched_open_brackets == 0:
+                group_pattern_and_name.append((pattern[start:end + idx + 1], group_name))
+                break
+        else:
+            # If we've reached the end of the string without finding balanced brackets,
+            # this must be the last group in the pattern
+            if unmatched_open_brackets == 0:
+                group_pattern_and_name.append((pattern[start:], group_name))
+
     # Replace the string for named capture groups with their group names.
     for group_pattern, group_name in group_pattern_and_name:
         pattern = pattern.replace(group_pattern, group_name)
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..cda5202e38
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,40 @@
+from django.contrib.admindocs.utils import replace_named_groups
+
+def test_replace_named_groups():
+    # Test case 1: Pattern with trailing slash - works correctly
+    pattern1 = r'entries/(?P<pk>[^/.]+)/relationships/(?P<related_field>\w+)/'
+    result1 = replace_named_groups(pattern1)
+    print("Test 1 (with trailing slash):")
+    print(f"Input:  {pattern1}")
+    print(f"Output: {result1}")
+    print(f"Expected: entries/<pk>/relationships/<related_field>/")
+    print()
+
+    # Test case 2: Pattern without trailing slash - fails to replace last group
+    pattern2 = r'entries/(?P<pk>[^/.]+)/relationships/(?P<related_field>\w+)'
+    result2 = replace_named_groups(pattern2)
+    print("Test 2 (without trailing slash):")
+    print(f"Input:  {pattern2}")
+    print(f"Output: {result2}")
+    print(f"Expected: entries/<pk>/relationships/<related_field>")
+    print()
+
+    # Test case 3: Pattern with nested groups at the end
+    pattern3 = r'entries/(?P<pk>[^/.]+)/(?P<complex>(\w+|[0-9]+))'
+    result3 = replace_named_groups(pattern3)
+    print("Test 3 (nested groups at end):")
+    print(f"Input:  {pattern3}")
+    print(f"Output: {result3}")
+    print(f"Expected: entries/<pk>/<complex>")
+    print()
+
+    # Test case 4: Single named group at the end
+    pattern4 = r'simple/(?P<name>\w+)'
+    result4 = replace_named_groups(pattern4)
+    print("Test 4 (single group at end):")
+    print(f"Input:  {pattern4}")
+    print(f"Output: {result4}")
+    print(f"Expected: simple/<name>")
+
+if __name__ == '__main__':
+    test_replace_named_groups()
\ No newline at end of file
