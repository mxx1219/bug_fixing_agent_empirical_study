diff --git a/django/db/models/base.py b/django/db/models/base.py
index 6c9e9d3707..cd659e9839 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -1735,19 +1735,23 @@ class Model(metaclass=ModelBase):
         for field in related_fields:
             _cls = cls
             fld = None
-            for part in field.split(LOOKUP_SEP):
+            parts = field.split(LOOKUP_SEP)
+            for idx, part in enumerate(parts):
                 try:
                     # pk is an alias that won't be found by opts.get_field.
                     if part == 'pk':
                         fld = _cls._meta.pk
                     else:
+                        # Check if this is the last part and if it's a valid transform
+                        if idx == len(parts) - 1 and fld is not None and fld.get_transform(part) is not None:
+                            break
                         fld = _cls._meta.get_field(part)
                     if fld.is_relation:
                         _cls = fld.get_path_info()[-1].to_opts.model
                     else:
                         _cls = None
                 except (FieldDoesNotExist, AttributeError):
-                    if fld is None or fld.get_transform(part) is None:
+                    if fld is None or (idx == len(parts) - 1 and fld.get_transform(part) is None):
                         errors.append(
                             checks.Error(
                                 "'ordering' refers to the nonexistent field, "
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..b6d34dcdd7
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,41 @@
+from django.db import models
+from django.core import checks
+from django.test.utils import isolate_apps
+from django.conf import settings
+import django
+
+if not settings.configured:
+    settings.configure(
+        DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3'}},
+        INSTALLED_APPS=['reproduce_error'],
+    )
+    django.setup()
+
+@isolate_apps('reproduce_error')
+def reproduce_error():
+    class Product(models.Model):
+        parent = models.ForeignKey('self', models.CASCADE, null=True)
+        
+        class Meta:
+            app_label = 'reproduce_error'
+
+    class Supply(models.Model):
+        product = models.ForeignKey(Product, on_delete=models.CASCADE)
+        
+        class Meta:
+            app_label = 'reproduce_error'
+
+    class Stock(models.Model):
+        supply = models.ForeignKey(Supply, on_delete=models.CASCADE)
+        
+        class Meta:
+            app_label = 'reproduce_error'
+            ordering = ['supply__product__parent__isnull']
+
+    # Run the model checks
+    errors = checks.run_checks()
+    for error in errors:
+        print(f"Error: {error.id} - {error.msg}")
+
+if __name__ == '__main__':
+    reproduce_error()
\ No newline at end of file
