diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 81f8f79c71..e776eb1072 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -1211,13 +1211,20 @@ class Exists(Subquery):
 
     def as_sql(self, compiler, connection, template=None, **extra_context):
         query = self.query.exists(using=connection.alias)
-        sql, params = super().as_sql(
-            compiler,
-            connection,
-            template=template,
-            query=query,
-            **extra_context,
-        )
+        try:
+            sql, params = super().as_sql(
+                compiler,
+                connection,
+                template=template,
+                query=query,
+                **extra_context,
+            )
+        except EmptyResultSet:
+            # When the inner query is empty and this is a negated Exists,
+            # we need to return a valid SQL query that evaluates to True
+            if self.negated:
+                return '1=1', []
+            raise
         if self.negated:
             sql = 'NOT {}'.format(sql)
         return sql, params
diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index d405a203ee..135998fc1f 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -560,8 +560,15 @@ class SQLCompiler:
                 except EmptyResultSet:
                     if self.elide_empty:
                         raise
-                    # Use a predicate that's always False.
-                    where, w_params = '0 = 1', []
+                    # For negated EXISTS with empty queryset, we should return a valid query
+                    if (isinstance(self.where, WhereNode) and len(self.where.children) == 1 and
+                            isinstance(self.where.children[0], WhereNode) and self.where.children[0].negated and
+                            len(self.where.children[0].children) == 1 and
+                            hasattr(self.where.children[0].children[0], 'empty_result_set_value')):
+                        where, w_params = '1=1', []
+                    else:
+                        # Use a predicate that's always False.
+                        where, w_params = '0=1', []
                 having, h_params = self.compile(self.having) if self.having is not None else ("", [])
                 result = ['SELECT']
                 params = []
diff --git a/django/db/models/sql/where.py b/django/db/models/sql/where.py
index 50ff13be75..43ecdd75b4 100644
--- a/django/db/models/sql/where.py
+++ b/django/db/models/sql/where.py
@@ -80,7 +80,13 @@ class WhereNode(tree.Node):
             try:
                 sql, params = compiler.compile(child)
             except EmptyResultSet:
-                empty_needed -= 1
+                # For negated EXISTS with empty queryset, we should not count it as empty
+                if not (isinstance(child, WhereNode) and child.negated and 
+                       len(child.children) == 1 and hasattr(child.children[0], 'empty_result_set_value')):
+                    empty_needed -= 1
+                else:
+                    # For negated EXISTS with empty queryset, treat it as a valid condition
+                    result.append('1=1')
             else:
                 if sql:
                     result.append(sql)
@@ -262,4 +268,4 @@ class SubqueryConstraint:
         query = self.query_object
         query.set_values(self.targets)
         query_compiler = query.get_compiler(connection=connection)
-        return query_compiler.as_subquery_condition(self.alias, self.columns, compiler)
+        return query_compiler.as_subquery_condition(self.alias, self.columns, compiler)
\ No newline at end of file
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..266c35f491
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,30 @@
+# Setup Django settings
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+    )
+
+import django
+django.setup()
+
+from django.db import models
+from django.contrib.auth.models import User
+
+# Create the tables
+from django.core.management import call_command
+call_command('migrate', run_syncdb=True, verbosity=0)
+
+# Reproduce the issue
+qs = User.objects.filter(~models.Exists(User.objects.none()), username='test')
+print("QuerySet:", qs)
+print("SQL Query:", str(qs.query))
\ No newline at end of file
