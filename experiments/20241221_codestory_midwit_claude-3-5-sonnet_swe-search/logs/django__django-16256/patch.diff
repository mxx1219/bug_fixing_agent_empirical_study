diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py
index c5d87f647a..043966188f 100644
--- a/django/db/models/fields/related_descriptors.py
+++ b/django/db/models/fields/related_descriptors.py
@@ -793,6 +793,11 @@ def create_reverse_many_to_one_manager(superclass, rel):
 
         create.alters_data = True
 
+        async def acreate(self, **kwargs):
+            return await sync_to_async(self.create)(**kwargs)
+
+        acreate.alters_data = True
+
         def get_or_create(self, **kwargs):
             self._check_fk_val()
             kwargs[self.field.name] = self.instance
@@ -801,6 +806,11 @@ def create_reverse_many_to_one_manager(superclass, rel):
 
         get_or_create.alters_data = True
 
+        async def aget_or_create(self, **kwargs):
+            return await sync_to_async(self.get_or_create)(**kwargs)
+
+        aget_or_create.alters_data = True
+
         def update_or_create(self, **kwargs):
             self._check_fk_val()
             kwargs[self.field.name] = self.instance
@@ -809,6 +819,11 @@ def create_reverse_many_to_one_manager(superclass, rel):
 
         update_or_create.alters_data = True
 
+        async def aupdate_or_create(self, **kwargs):
+            return await sync_to_async(self.update_or_create)(**kwargs)
+
+        aupdate_or_create.alters_data = True
+
         # remove() and clear() are only provided if the ForeignKey can have a
         # value of null.
         if rel.field.null:
@@ -1191,6 +1206,11 @@ def create_forward_many_to_many_manager(superclass, rel, reverse):
 
         create.alters_data = True
 
+        async def acreate(self, *, through_defaults=None, **kwargs):
+            return await sync_to_async(self.create)(through_defaults=through_defaults, **kwargs)
+
+        acreate.alters_data = True
+
         def get_or_create(self, *, through_defaults=None, **kwargs):
             db = router.db_for_write(self.instance.__class__, instance=self.instance)
             obj, created = super(ManyRelatedManager, self.db_manager(db)).get_or_create(
@@ -1204,6 +1224,11 @@ def create_forward_many_to_many_manager(superclass, rel, reverse):
 
         get_or_create.alters_data = True
 
+        async def aget_or_create(self, *, through_defaults=None, **kwargs):
+            return await sync_to_async(self.get_or_create)(through_defaults=through_defaults, **kwargs)
+
+        aget_or_create.alters_data = True
+
         def update_or_create(self, *, through_defaults=None, **kwargs):
             db = router.db_for_write(self.instance.__class__, instance=self.instance)
             obj, created = super(
@@ -1217,6 +1242,11 @@ def create_forward_many_to_many_manager(superclass, rel, reverse):
 
         update_or_create.alters_data = True
 
+        async def aupdate_or_create(self, *, through_defaults=None, **kwargs):
+            return await sync_to_async(self.update_or_create)(through_defaults=through_defaults, **kwargs)
+
+        aupdate_or_create.alters_data = True
+
         def _get_target_ids(self, target_field_name, objs):
             """
             Return the set of ids of `objs` that the target field references.
diff --git a/models.py b/models.py
new file mode 100644
index 0000000000..ad24d53dc8
--- /dev/null
+++ b/models.py
@@ -0,0 +1,23 @@
+from django.db import models
+
+class Parent(models.Model):
+    name = models.CharField(max_length=100)
+    class Meta:
+        app_label = 'reproduce_error'
+
+class Child(models.Model):
+    name = models.CharField(max_length=100)
+    parent = models.ForeignKey(Parent, related_name='children', on_delete=models.CASCADE)
+    class Meta:
+        app_label = 'reproduce_error'
+
+class Pizza(models.Model):
+    name = models.CharField(max_length=100)
+    class Meta:
+        app_label = 'reproduce_error'
+
+class Topping(models.Model):
+    name = models.CharField(max_length=100)
+    pizzas = models.ManyToManyField(Pizza, related_name='toppings')
+    class Meta:
+        app_label = 'reproduce_error'
\ No newline at end of file
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..fb2dade13d
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,56 @@
+from django.db.models.fields.related_descriptors import (
+    create_reverse_many_to_one_manager,
+    create_forward_many_to_many_manager,
+)
+from django.db import models
+
+# Mock classes for testing
+class MockRel:
+    def __init__(self):
+        self.field = None
+        self.model = None
+        self.related_model = None
+        self.through = type('Through', (), {'_meta': type('Meta', (), {'auto_created': True})})
+        self.symmetrical = False
+
+class MockField:
+    def __init__(self):
+        self.name = 'test'
+        self.remote_field = None
+        self.null = True
+        self.many_to_one = True
+        self.related_query_name = lambda: 'test'
+        self.m2m_field_name = lambda: 'test'
+        self.m2m_reverse_field_name = lambda: 'test'
+        self.attname = 'test'
+
+def test_missing_async_methods():
+    # Test reverse many-to-one manager
+    rel = MockRel()
+    rel.field = MockField()
+    rel.model = type('Model', (), {'_meta': type('Meta', (), {'object_name': 'Model'})})
+    rel.related_model = type('RelatedModel', (), {'_meta': type('Meta', (), {'object_name': 'RelatedModel'})})
+    
+    # Create a reverse many-to-one manager class
+    superclass = type('Manager', (), {'get_queryset': lambda self: None})
+    reverse_manager = create_reverse_many_to_one_manager(superclass, rel)
+    
+    # Check for async methods
+    reverse_methods = [attr for attr in dir(reverse_manager) if attr.startswith('a')]
+    print("Reverse many-to-one manager async methods:", reverse_methods)
+    
+    # Test many-to-many manager
+    rel = MockRel()
+    rel.field = MockField()
+    rel.model = type('Model', (), {'_meta': type('Meta', (), {'object_name': 'Model'})})
+    rel.related_model = type('RelatedModel', (), {'_meta': type('Meta', (), {'object_name': 'RelatedModel'})})
+    
+    # Create a many-to-many manager class
+    many_manager = create_forward_many_to_many_manager(superclass, rel, reverse=False)
+    
+    # Check for async methods
+    many_methods = [attr for attr in dir(many_manager) if attr.startswith('a')]
+    print("Many-to-many manager async methods:", many_methods)
+
+if __name__ == '__main__':
+    test_missing_async_methods()
\ No newline at end of file
