diff --git a/django/core/validators.py b/django/core/validators.py
index 92394a7eae..3838461817 100644
--- a/django/core/validators.py
+++ b/django/core/validators.py
@@ -92,9 +92,12 @@ class URLValidator(RegexValidator):
     )
     host_re = '(' + hostname_re + domain_re + tld_re + '|localhost)'
 
+    # Characters that are allowed in the username/password without encoding
+    userpass_allowed = r'[a-z0-9\-\._~\!$&\'()*+,;=]'
+    
     regex = _lazy_re_compile(
         r'^(?:[a-z0-9\.\-\+]*)://'  # scheme is validated separately
-        r'(?:\S+(?::\S*)?@)?'  # user:pass authentication
+        r'(?:' + userpass_allowed + r'+(?::' + userpass_allowed + r'*)?@)?'  # user:pass authentication
         r'(?:' + ipv4_re + '|' + ipv6_re + '|' + host_re + ')'
         r'(?::\d{2,5})?'  # port
         r'(?:[/?#][^\s]*)?'  # resource path
@@ -133,13 +136,31 @@ class URLValidator(RegexValidator):
                 raise
         else:
             # Now verify IPv6 in the netloc part
-            host_match = re.search(r'^\[(.+)\](?::\d{2,5})?$', urlsplit(value).netloc)
+            netloc = urlsplit(value).netloc
+            host_match = re.search(r'^\[(.+)\](?::\d{2,5})?$', netloc)
             if host_match:
                 potential_ip = host_match.groups()[0]
                 try:
                     validate_ipv6_address(potential_ip)
                 except ValidationError:
                     raise ValidationError(self.message, code=self.code)
+            
+            # Additional validation for username/password special characters
+            if '@' in netloc:
+                userpass = netloc.split('@')[0]
+                if ':' in userpass:
+                    username, password = userpass.split(':', 1)
+                else:
+                    username, password = userpass, ''
+                
+                # Check for unencoded special characters in username/password
+                special_chars = [':', '/', '@']
+                for char in special_chars:
+                    if char in username or char in password:
+                        raise ValidationError(
+                            _('Username and password cannot contain unencoded characters ":", "/", "@".'),
+                            code='invalid_userpass'
+                        )
 
         # The maximum length of a full host name is 253 characters per RFC 1034
         # section 3.1. It's defined to be 255 bytes or less, but this includes
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..5f8a81af05
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,24 @@
+from django.core.validators import URLValidator
+from django.core.exceptions import ValidationError
+
+def test_url_validation():
+    validator = URLValidator()
+    
+    # These URLs should be invalid according to RFC 1738
+    invalid_urls = [
+        'http://foo/bar@example.com',  # unencoded / and @ in username
+        'http://foo:bar@baz@example.com',  # unencoded @ in password
+        'http://foo:bar/baz@example.com',  # unencoded / in password
+        'http://foo:bar:baz@example.com',  # unencoded : in password
+    ]
+    
+    print("Testing invalid URLs that are currently being accepted:")
+    for url in invalid_urls:
+        try:
+            validator(url)
+            print("❌ URL should be invalid but was accepted: {}".format(url))
+        except ValidationError:
+            print("✓ Correctly rejected invalid URL: {}".format(url))
+
+if __name__ == '__main__':
+    test_url_validation()
\ No newline at end of file
