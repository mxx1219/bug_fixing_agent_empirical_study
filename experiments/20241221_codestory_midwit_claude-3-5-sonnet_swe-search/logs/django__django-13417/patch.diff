diff --git a/django/db/models/query.py b/django/db/models/query.py
index 85cd8311a7..d4f1543694 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -1224,6 +1224,9 @@ class QuerySet:
             return True
         if self.query.extra_order_by or self.query.order_by:
             return True
+        # If query has GROUP BY and no explicit ordering, it's not ordered
+        elif self.query.group_by and not (self.query.extra_order_by or self.query.order_by):
+            return False
         elif self.query.default_ordering and self.query.get_meta().ordering:
             return True
         else:
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..e655439aa8
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,80 @@
+import os
+import django
+from django.db import models
+from django.db.models import Count
+from django.test import TestCase
+from django.test.utils import setup_test_environment
+from django.conf import settings
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ]
+)
+django.setup()
+
+# Create the test model
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    value = models.IntegerField()
+
+    class Meta:
+        ordering = ['name']
+        app_label = 'reproduce_error'
+
+def main():
+    # Set up the test environment
+    setup_test_environment()
+
+    # Create the database tables
+    from django.db import connection
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(TestModel)
+
+    # Create some test data
+    TestModel.objects.create(name='A', value=1)
+    TestModel.objects.create(name='B', value=2)
+    TestModel.objects.create(name='C', value=1)
+
+    # Test regular query
+    qs = TestModel.objects.all()
+    print("\nRegular Query:")
+    print("SQL =>", qs.query)
+    print("qs.ordered =>", qs.ordered)
+    print("qs.query.default_ordering =>", qs.query.default_ordering)
+
+    # Test GROUP BY query with annotation
+    qs2 = TestModel.objects.values('value').annotate(count=Count('id'))
+    print("\nGROUP BY Query:")
+    print("SQL =>", qs2.query)
+    print("qs2.ordered =>", qs2.ordered)
+    print("qs2.query.default_ordering =>", qs2.query.default_ordering)
+    print("qs2.query.group_by =>", qs2.query.group_by)
+
+    # Test GROUP BY query with explicit ordering
+    qs3 = TestModel.objects.values('value').annotate(count=Count('id')).order_by('value')
+    print("\nGROUP BY Query with ORDER BY:")
+    print("SQL =>", qs3.query)
+    print("qs3.ordered =>", qs3.ordered)
+    print("qs3.query.default_ordering =>", qs3.query.default_ordering)
+    print("qs3.query.group_by =>", qs3.query.group_by)
+
+    # Test regular values query
+    qs4 = TestModel.objects.values('value')
+    print("\nRegular Values Query:")
+    print("SQL =>", qs4.query)
+    print("qs4.ordered =>", qs4.ordered)
+    print("qs4.query.default_ordering =>", qs4.query.default_ordering)
+    print("qs4.query.group_by =>", qs4.query.group_by)
+
+if __name__ == '__main__':
+    main()
\ No newline at end of file
