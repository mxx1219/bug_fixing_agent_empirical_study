diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py
index 2eeaf98c0d..9a1116899b 100644
--- a/django/db/backends/sqlite3/base.py
+++ b/django/db/backends/sqlite3/base.py
@@ -327,13 +327,15 @@ class DatabaseWrapper(BaseDatabaseWrapper):
                     violations = cursor.execute('PRAGMA foreign_key_check').fetchall()
                 else:
                     violations = chain.from_iterable(
-                        cursor.execute('PRAGMA foreign_key_check(%s)' % table_name).fetchall()
+                        cursor.execute(
+                            'PRAGMA foreign_key_check(%s)' % self.ops.quote_name(table_name)
+                        ).fetchall()
                         for table_name in table_names
                     )
                 # See https://www.sqlite.org/pragma.html#pragma_foreign_key_check
                 for table_name, rowid, referenced_table_name, foreign_key_index in violations:
                     foreign_key = cursor.execute(
-                        'PRAGMA foreign_key_list(%s)' % table_name
+                        'PRAGMA foreign_key_list(%s)' % self.ops.quote_name(table_name)
                     ).fetchall()[foreign_key_index]
                     column_name, referenced_column_name = foreign_key[3:5]
                     primary_key_column_name = self.introspection.get_primary_key_column(cursor, table_name)
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..4b5e9a635d
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,73 @@
+import os
+import json
+import django
+from django.conf import settings
+from django.core.management import call_command
+from django.db import models
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': 'test.db',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        DEFAULT_AUTO_FIELD='django.db.models.AutoField',
+    )
+    django.setup()
+
+from django.db import connection
+
+# Create a model that uses a SQL keyword as table name
+class Order(models.Model):
+    name = models.CharField(max_length=100)
+
+    class Meta:
+        db_table = 'order'  # Explicitly set table name to SQL keyword
+        app_label = 'auth'  # Use existing app to avoid registration issues
+
+try:
+    # Remove existing database if it exists
+    if os.path.exists('test.db'):
+        os.remove('test.db')
+
+    # Create the table
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(Order)
+
+    # Create a fixture file
+    fixture_data = [
+        {
+            "model": "auth.order",
+            "pk": 1,
+            "fields": {
+                "name": "Test Order"
+            }
+        }
+    ]
+
+    with open('test_fixture.json', 'w') as f:
+        json.dump(fixture_data, f)
+
+    print("Created fixture file successfully")
+
+    # Try to load the fixture
+    call_command('loaddata', 'test_fixture.json', verbosity=2)
+    print("Successfully loaded fixture")
+
+except Exception as e:
+    print(f"Error occurred: {str(e)}")
+    if hasattr(e, '__cause__') and e.__cause__:
+        print(f"Caused by: {str(e.__cause__)}")
+finally:
+    # Cleanup
+    if os.path.exists('test_fixture.json'):
+        os.remove('test_fixture.json')
+    if os.path.exists('test.db'):
+        os.remove('test.db')
\ No newline at end of file
