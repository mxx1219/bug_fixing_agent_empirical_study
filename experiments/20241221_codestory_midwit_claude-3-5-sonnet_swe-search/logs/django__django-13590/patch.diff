diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 4648daf395..cfc2168064 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1077,10 +1077,14 @@ class Query(BaseExpression):
         elif isinstance(value, (list, tuple)):
             # The items of the iterable may be expressions and therefore need
             # to be resolved independently.
-            return type(value)(
+            resolved_values = [
                 self.resolve_lookup_value(sub_value, can_reuse, allow_joins)
                 for sub_value in value
-            )
+            ]
+            # For named tuples, we need to unpack the values
+            if hasattr(value, '_fields'):
+                return type(value)(*resolved_values)
+            return type(value)(resolved_values)
         return value
 
     def solve_lookup_type(self, lookup):
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..1647c734bd
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,35 @@
+from collections import namedtuple
+from django.db import models
+from django.db.models.sql.query import Query
+from django.conf import settings
+import django
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3'}},
+        INSTALLED_APPS=['django.contrib.contenttypes'],
+    )
+    django.setup()
+
+# Create a simple model for testing
+class TestModel(models.Model):
+    value = models.IntegerField()
+
+    class Meta:
+        app_label = 'test_app'
+
+# Create a named tuple for testing
+Range = namedtuple('Range', ['near', 'far'])
+test_range = Range(near=1, far=10)
+
+# Create a query instance
+query = Query(TestModel)
+
+# Try to resolve the lookup value
+try:
+    # This simulates what happens when using a named tuple in a range filter
+    resolved = query.resolve_lookup_value(test_range, can_reuse=None, allow_joins=True)
+    print("Success! Resolved value:", resolved)
+except TypeError as e:
+    print("Error occurred as expected:", str(e))
\ No newline at end of file
