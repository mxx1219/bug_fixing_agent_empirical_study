diff --git a/django/db/models/base.py b/django/db/models/base.py
index 844c01e95e..0ea0bf6b52 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -804,10 +804,20 @@ class Model(metaclass=ModelBase):
         inserted = False
         for parent, field in meta.parents.items():
             # Make sure the link fields are synced between parent and self.
-            if (field and getattr(self, parent._meta.pk.attname) is None and
-                    getattr(self, field.attname) is not None):
-                setattr(self, parent._meta.pk.attname, getattr(self, field.attname))
-            parent_inserted = self._save_parents(cls=parent, using=using, update_fields=update_fields)
+            if field:
+                # If child PK is None, we want to force this to be treated as an insert
+                if getattr(self, parent._meta.pk.attname) is None:
+                    # Ensure parent PK is also None for consistent insert behavior
+                    setattr(self, field.attname, None)
+                    parent_inserted = True
+                else:
+                    # Normal case - sync parent and child PKs
+                    if getattr(self, field.attname) is not None:
+                        setattr(self, parent._meta.pk.attname, getattr(self, field.attname))
+                    parent_inserted = self._save_parents(cls=parent, using=using, update_fields=update_fields)
+            else:
+                parent_inserted = self._save_parents(cls=parent, using=using, update_fields=update_fields)
+            
             updated = self._save_table(
                 cls=parent, using=using, update_fields=update_fields,
                 force_insert=parent_inserted,
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..296dcc5262
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,69 @@
+from django.db import models, connection
+from django.test import TestCase
+import os
+import django
+from django.conf import settings
+from django.core.management import call_command
+
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:'
+            }
+        },
+        INSTALLED_APPS=['django.contrib.contenttypes'],
+        SECRET_KEY='dummy-key-for-tests',
+        MIDDLEWARE_CLASSES=[],
+        MIDDLEWARE=[]
+    )
+    django.setup()
+
+class Item(models.Model):
+    uid = models.AutoField(primary_key=True, editable=False)
+    f = models.BooleanField(default=False)
+    
+    def reset(self):
+        self.uid = None
+        self.f = False
+    
+    class Meta:
+        app_label = 'django_db_models_base'
+
+class Derived(Item):
+    class Meta:
+        app_label = 'django_db_models_base'
+
+class SaveTestCase(TestCase):
+    @classmethod
+    def setUpClass(cls):
+        super().setUpClass()
+        # Create tables
+        with connection.schema_editor() as schema_editor:
+            schema_editor.create_model(Item)
+            schema_editor.create_model(Derived)
+
+    def setUp(self):
+        self.derived = Derived.objects.create(f=True)
+        item = Item.objects.get(pk=self.derived.pk)
+        obj1 = item.derived
+        obj1.reset()
+        obj1.save()
+    
+    def test_f_true(self):
+        obj = Item.objects.get(pk=self.derived.pk)
+        self.assertTrue(obj.f)
+
+if __name__ == '__main__':
+    from django.test.utils import setup_test_environment, teardown_test_environment
+    
+    setup_test_environment()
+    connection.creation.create_test_db(verbosity=2)
+    
+    import unittest
+    suite = unittest.TestLoader().loadTestsFromTestCase(SaveTestCase)
+    result = unittest.TextTestRunner(verbosity=2).run(suite)
+    
+    connection.creation.destroy_test_db(':memory:', verbosity=2)
+    teardown_test_environment()
\ No newline at end of file
