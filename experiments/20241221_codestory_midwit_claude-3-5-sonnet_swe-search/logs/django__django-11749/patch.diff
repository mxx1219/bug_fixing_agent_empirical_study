diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py
index 5f2e64761e..84809ce0b2 100644
--- a/django/core/management/__init__.py
+++ b/django/core/management/__init__.py
@@ -136,6 +136,22 @@ def call_command(command_name, *args, **options):
         '{}={}'.format(min(opt.option_strings), arg_options[opt.dest])
         for opt in parser_actions if opt.required and opt.dest in options
     ]
+    
+    # Handle required mutually exclusive groups
+    for group in parser._mutually_exclusive_groups:
+        if group.required:
+            # Check if multiple arguments from the same group are provided
+            group_args = [opt.dest for opt in group._group_actions if opt.dest in options]
+            if len(group_args) > 1:
+                raise CommandError(
+                    f"Arguments {', '.join(group_args)} are mutually exclusive. "
+                    "Only one of them should be provided."
+                )
+            # If any argument from the group is provided in options, add it to parse_args
+            for opt in group._group_actions:
+                if opt.dest in options:
+                    parse_args.append('{}={}'.format(min(opt.option_strings), arg_options[opt.dest]))
+                    break
     defaults = parser.parse_args(args=parse_args)
     defaults = dict(defaults._get_kwargs(), **arg_options)
     # Raise an error if any unknown options were passed.
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..70f4db125f
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,54 @@
+import os
+import django
+from django.conf import settings
+from django.core.management import BaseCommand, CommandParser, call_command
+from django.core.management.base import CommandError
+
+# Configure minimal Django settings
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[],
+        DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+    )
+    django.setup()
+
+class TestCommand(BaseCommand):
+    def add_arguments(self, parser):
+        shop = parser.add_mutually_exclusive_group(required=True)
+        shop.add_argument('--shop-id', nargs='?', type=int, default=None, dest='shop_id')
+        shop.add_argument('--shop', nargs='?', type=str, default=None, dest='shop_name')
+
+    def handle(self, *args, **options):
+        print(f"Received options: {options}")
+
+# Test the command
+if __name__ == "__main__":
+    print("1. Testing with kwargs (should work):")
+    try:
+        call_command(TestCommand(), shop_id=1)
+    except Exception as e:
+        print(f"Error: {e}")
+
+    print("\n2. Testing with command line style (should work):")
+    try:
+        call_command(TestCommand(), '--shop-id=1')
+    except Exception as e:
+        print(f"Error: {e}")
+
+    print("\n3. Testing with no arguments (should fail):")
+    try:
+        call_command(TestCommand())
+    except Exception as e:
+        print(f"Error: {e}")
+
+    print("\n4. Testing with multiple exclusive arguments (should fail):")
+    try:
+        call_command(TestCommand(), shop_id=1, shop_name='test')
+    except Exception as e:
+        print(f"Error: {e}")
+
+    print("\n5. Testing with shop name (should work):")
+    try:
+        call_command(TestCommand(), shop_name='test')
+    except Exception as e:
+        print(f"Error: {e}")
\ No newline at end of file
