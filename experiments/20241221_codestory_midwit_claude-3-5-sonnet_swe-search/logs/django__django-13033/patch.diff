diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index abbb1e37cb..3742347600 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -725,9 +725,14 @@ class SQLCompiler:
         field, targets, alias, joins, path, opts, transform_function = self._setup_joins(pieces, opts, alias)
 
         # If we get to this point and the field is a relation to another model,
-        # append the default ordering for that model unless it is the pk
-        # shortcut or the attribute name of the field that is specified.
-        if field.is_relation and opts.ordering and getattr(field, 'attname', None) != name and name != 'pk':
+        # append the default ordering for that model unless:
+        # - it is the pk shortcut
+        # - it is the attribute name of the field
+        # - it ends with _id (direct foreign key reference)
+        if (field.is_relation and opts.ordering and 
+            getattr(field, 'attname', None) != name and 
+            name != 'pk' and 
+            not name.endswith('_id')):
             # Firstly, avoid infinite loops.
             already_seen = already_seen or set()
             join_tuple = tuple(getattr(self.query.alias_map[j], 'join_cols', None) for j in joins)
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..f0ee5feef9
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,60 @@
+from django.db import models
+from django.test.utils import setup_test_environment
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+        DEFAULT_AUTO_FIELD='django.db.models.BigAutoField',
+        INSTALLED_APPS=['django.contrib.contenttypes'],
+    )
+
+import django
+django.setup()
+setup_test_environment()
+
+# Define test models
+class OneModel(models.Model):
+    class Meta:
+        ordering = ("-id",)
+        app_label = 'test'
+
+    id = models.BigAutoField(primary_key=True)
+    root = models.ForeignKey('self', on_delete=models.CASCADE, null=True)
+    oneval = models.BigIntegerField(null=True)
+
+class TwoModel(models.Model):
+    class Meta:
+        app_label = 'test'
+
+    id = models.BigAutoField(primary_key=True)
+    record = models.ForeignKey(OneModel, on_delete=models.CASCADE)
+    twoval = models.BigIntegerField(null=True)
+
+# Create schema
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(OneModel)
+    schema_editor.create_model(TwoModel)
+
+# Test queries
+def print_query(description, queryset):
+    print(f"\n{description}:")
+    print(queryset.query)
+
+# Base queryset
+base_qs = TwoModel.objects.filter(record__oneval__in=[1,2,3])
+
+# Test different ordering scenarios
+print_query("1. Using record__root_id (problematic)", 
+    base_qs.order_by("record__root_id"))
+
+print_query("2. Using record__root__id (works correctly)", 
+    base_qs.order_by("record__root__id"))
+
+from django.db.models import F
+print_query("3. Using annotation (works correctly)",
+    base_qs.annotate(root_id=F("record__root_id")).order_by("root_id"))
+
+print_query("4. Using -record__root_id (shows inverted behavior)",
+    base_qs.order_by("-record__root_id"))
\ No newline at end of file
