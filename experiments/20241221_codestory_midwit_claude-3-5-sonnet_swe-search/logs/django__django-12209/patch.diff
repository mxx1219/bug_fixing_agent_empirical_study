diff --git a/django/db/models/base.py b/django/db/models/base.py
index e3b14a41a0..b91ebc5e3a 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -847,12 +847,14 @@ class Model(metaclass=ModelBase):
         if not pk_set and (force_update or update_fields):
             raise ValueError("Cannot force an update in save() with no primary key.")
         updated = False
-        # Skip an UPDATE when adding an instance and primary key has a default.
+        # Skip an UPDATE when adding an instance and primary key has a default,
+        # but only if the primary key was not explicitly set
         if (
             not force_insert and
             self._state.adding and
             self._meta.pk.default and
-            self._meta.pk.default is not NOT_PROVIDED
+            self._meta.pk.default is not NOT_PROVIDED and
+            getattr(self, self._meta.pk.attname) == self._meta.pk.get_default()
         ):
             force_insert = True
         # If possible, try an UPDATE. If that doesn't update anything, do an INSERT.
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..f779d68311
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,58 @@
+import os
+import django
+from uuid import uuid4
+from django.db import models
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=['django.contrib.auth', 'django.contrib.contenttypes'],
+        SECRET_KEY='dummy-key-for-test',
+    )
+    django.setup()
+
+# Define the test model
+class Sample(models.Model):
+    id = models.UUIDField(primary_key=True, default=uuid4)
+    name = models.CharField(blank=True, max_length=100)
+    
+    class Meta:
+        # Use an app_label that's in INSTALLED_APPS
+        app_label = 'auth'
+
+# Create the table
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Sample)
+
+print("Test Case 1: Create instance with auto-generated UUID")
+s1 = Sample.objects.create(name="Test 1")
+print(f"Created instance with auto-generated id: {s1.pk}")
+
+print("\nTest Case 2: Create instance with explicit new UUID")
+new_uuid = uuid4()
+s2 = Sample(pk=new_uuid, name="Test 2")
+s2.save()
+print(f"Created instance with explicit new id: {s2.pk}")
+
+print("\nTest Case 3: Update existing instance by setting its UUID")
+s3 = Sample(pk=s1.pk, name="Updated Test 1")
+s3.save()
+print(f"Updated instance {s1.pk} with new name")
+
+# Verify the update worked
+updated = Sample.objects.get(pk=s1.pk)
+print(f"Verified name change: {updated.name}")
+
+print("\nTest Case 4: Total number of records should be 2")
+print(f"Total records: {Sample.objects.count()}")
+
+# Clean up
+with connection.schema_editor() as schema_editor:
+    schema_editor.delete_model(Sample)
\ No newline at end of file
