diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py
index 118bfced89..f6db5a92cb 100644
--- a/astropy/io/fits/card.py
+++ b/astropy/io/fits/card.py
@@ -1299,6 +1299,30 @@ def _format_value(value):
 
 def _format_float(value):
     """Format a floating number to make sure it gets the decimal point."""
+    # First try using str() which often gives a more compact representation
+    value_str = str(value)
+    
+    # Check if the string representation is valid and not too long
+    if (
+        len(value_str) <= 20
+        and ("." in value_str or "e" in value_str.lower())
+        and not value_str.lower().startswith("inf")
+        and not value_str.lower().startswith("nan")
+    ):
+        # Convert any 'e' to 'E' for FITS standard
+        if "e" in value_str:
+            value_str = value_str.replace("e", "E")
+            # Normalize the exponent to two digits
+            significand, exponent = value_str.split("E")
+            if exponent[0] in ("+", "-"):
+                sign = exponent[0]
+                exponent = exponent[1:]
+            else:
+                sign = ""
+            value_str = f"{significand}E{sign}{int(exponent):02d}"
+        return value_str
+
+    # Fall back to the original formatting if str() doesn't give us what we want
     value_str = f"{value:.16G}"
     if "." not in value_str and "E" not in value_str:
         value_str += ".0"
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..2398d59c80
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,11 @@
+from astropy.io import fits
+
+# Create a Card with the same values as in the example
+value = 0.009125
+comment = '[m] radius arround actuator to avoid'
+new_c = fits.Card(f'HIERARCH ESO IFM CL RADIUS', value, comment)
+
+print("Card representation:")
+print(repr(new_c))
+print("\nCard string format:")
+print(str(new_c))
\ No newline at end of file
diff --git a/test_float_format.py b/test_float_format.py
new file mode 100644
index 0000000000..7020489ab0
--- /dev/null
+++ b/test_float_format.py
@@ -0,0 +1,67 @@
+def _format_float(value):
+    """Format a floating number to make sure it gets the decimal point."""
+    # First try using str() which often gives a more compact representation
+    value_str = str(value)
+    
+    # Check if the string representation is valid and not too long
+    if (
+        len(value_str) <= 20
+        and ("." in value_str or "e" in value_str.lower())
+        and not value_str.lower().startswith("inf")
+        and not value_str.lower().startswith("nan")
+    ):
+        # Convert any 'e' to 'E' for FITS standard
+        if "e" in value_str:
+            value_str = value_str.replace("e", "E")
+            # Normalize the exponent to two digits
+            significand, exponent = value_str.split("E")
+            if exponent[0] in ("+", "-"):
+                sign = exponent[0]
+                exponent = exponent[1:]
+            else:
+                sign = ""
+            value_str = f"{significand}E{sign}{int(exponent):02d}"
+        return value_str
+
+    # Fall back to the original formatting if str() doesn't give us what we want
+    value_str = f"{value:.16G}"
+    if "." not in value_str and "E" not in value_str:
+        value_str += ".0"
+    elif "E" in value_str:
+        # On some Windows builds of Python (and possibly other platforms?) the
+        # exponent is zero-padded out to, it seems, three digits.  Normalize
+        # the format to pad only to two digits.
+        significand, exponent = value_str.split("E")
+        if exponent[0] in ("+", "-"):
+            sign = exponent[0]
+            exponent = exponent[1:]
+        else:
+            sign = ""
+        value_str = f"{significand}E{sign}{int(exponent):02d}"
+
+    # Limit the value string to at most 20 characters.
+    str_len = len(value_str)
+
+    if str_len > 20:
+        idx = value_str.find("E")
+
+        if idx < 0:
+            value_str = value_str[:20]
+        else:
+            value_str = value_str[: 20 - (str_len - idx)] + value_str[idx:]
+
+    return value_str
+
+# Test cases
+test_values = [
+    0.009125,  # The problematic value from the issue
+    1.23456789,
+    1e-10,
+    123.456,
+    0.0000001,
+]
+
+print("Testing float formatting:")
+for value in test_values:
+    formatted = _format_float(value)
+    print(f"{value} -> {formatted} (length: {len(formatted)})")
\ No newline at end of file
