diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py
index f82c20c2f1..9fd77b5d41 100644
--- a/django/contrib/admin/checks.py
+++ b/django/contrib/admin/checks.py
@@ -720,33 +720,33 @@ class ModelAdminChecks(BaseModelAdminChecks):
             return []
         elif hasattr(obj, item):
             return []
-        elif hasattr(obj.model, item):
+        else:
             try:
                 field = obj.model._meta.get_field(item)
             except FieldDoesNotExist:
-                return []
-            else:
-                if isinstance(field, models.ManyToManyField):
+                try:
+                    field = getattr(obj.model, item)
+                except AttributeError:
                     return [
                         checks.Error(
-                            "The value of '%s' must not be a ManyToManyField." % label,
+                            "The value of '%s' refers to '%s', which is not a callable, "
+                            "an attribute of '%s', or an attribute or method on '%s.%s'." % (
+                                label, item, obj.__class__.__name__,
+                                obj.model._meta.app_label, obj.model._meta.object_name,
+                            ),
                             obj=obj.__class__,
-                            id='admin.E109',
+                            id='admin.E108',
                         )
                     ]
-                return []
-        else:
-            return [
-                checks.Error(
-                    "The value of '%s' refers to '%s', which is not a callable, "
-                    "an attribute of '%s', or an attribute or method on '%s.%s'." % (
-                        label, item, obj.__class__.__name__,
-                        obj.model._meta.app_label, obj.model._meta.object_name,
-                    ),
-                    obj=obj.__class__,
-                    id='admin.E108',
-                )
-            ]
+            if isinstance(field, models.ManyToManyField):
+                return [
+                    checks.Error(
+                        "The value of '%s' must not be a ManyToManyField." % label,
+                        obj=obj.__class__,
+                        id='admin.E109',
+                    )
+                ]
+            return []
 
     def _check_list_display_links(self, obj):
         """ Check that list_display_links is a unique subset of list_display.
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..7b8369ce05
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,77 @@
+from django.conf import settings
+from django.db import models
+from django.contrib import admin
+from django.core import checks
+from django.contrib.admin.checks import ModelAdminChecks
+import django
+
+# Configure Django settings
+settings.configure(
+    INSTALLED_APPS=[
+        'django.contrib.admin',
+        'django.contrib.auth',
+        'django.contrib.contenttypes',
+        'django.contrib.sessions',
+        'django.contrib.messages',
+        'django.contrib.staticfiles',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    SECRET_KEY='dummy-key-for-test'
+)
+
+# Setup Django
+django.setup()
+
+# Mock PositionField to simulate the behavior
+class PositionField(models.Field):
+    def __get__(self, instance, owner):
+        if instance is None:  # Called on class, not instance
+            raise AttributeError("Can't access field on class, only instance")
+        return 0  # Dummy value for testing
+
+class Thing(models.Model):
+    number = models.IntegerField(default=0)
+    order = PositionField()
+    tags = models.ManyToManyField('self')
+
+    class Meta:
+        app_label = 'myapp'
+
+def test_case(display_fields, name):
+    print(f"\nTesting {name}:")
+    class TestAdmin(admin.ModelAdmin):
+        list_display = display_fields
+
+    # Create a ModelAdmin checker
+    checker = ModelAdminChecks()
+    
+    # Get the admin class
+    admin_obj = TestAdmin(Thing, admin.site)
+    
+    # Run the checks
+    errors = checker._check_list_display(admin_obj)
+    
+    if errors:
+        print("Found errors:")
+        for error in errors:
+            print(f"Error {error.id}: {error.msg}")
+    else:
+        print("No errors found")
+
+def main():
+    # Test case 1: Original issue with PositionField
+    test_case(['number', 'order'], "PositionField case")
+    
+    # Test case 2: ManyToManyField should raise E109
+    test_case(['number', 'tags'], "ManyToManyField case")
+    
+    # Test case 3: Non-existent field should raise E108
+    test_case(['number', 'nonexistent'], "Non-existent field case")
+
+if __name__ == '__main__':
+    main()
\ No newline at end of file
