diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index e15e64cde4..fea7e7833d 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -2216,9 +2216,13 @@ def get_order_dir(field, default='ASC'):
 
     The 'default' param is used to indicate which way no prefix (or a '+'
     prefix) should sort. The '-' prefix always sorts the opposite way.
+
+    If field is an Expression, extract its ordering information.
     """
     dirn = ORDER_DIR[default]
-    if field[0] == '-':
+    if hasattr(field, 'asc'):
+        return field, 'ASC' if field.asc else 'DESC'
+    if isinstance(field, str) and field and field[0] == '-':
         return field[1:], dirn[1]
     return field, dirn[0]
 
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..d9017eb8f1
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,62 @@
+from django.conf import settings
+from django.db import models
+from django.db.models import F, Value, Case, When
+
+# Configure Django settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+    DEFAULT_AUTO_FIELD='django.db.models.AutoField',
+)
+
+import django
+django.setup()
+
+# Define models for reproduction
+class Parent(models.Model):
+    name = models.CharField(max_length=100)
+    order_field = models.IntegerField()
+    
+    class Meta:
+        app_label = 'testapp'
+        ordering = [
+            F('order_field').asc(),
+            Case(
+                When(name='test', then=Value(1)),
+                default=Value(2)
+            ).asc()
+        ]
+
+class Child(Parent):
+    extra_field = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'testapp'
+
+# Create the database schema
+from django.core.management import call_command
+call_command('migrate', verbosity=0)
+
+# Try to create tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Parent)
+    schema_editor.create_model(Child)
+
+# Try various ordering scenarios
+Child.objects.all().order_by('name')
+Child.objects.all().order_by(F('name').desc())
+Child.objects.all().order_by(
+    Case(
+        When(name='test', then=Value(1)),
+        default=Value(2)
+    ).asc()
+)
\ No newline at end of file
