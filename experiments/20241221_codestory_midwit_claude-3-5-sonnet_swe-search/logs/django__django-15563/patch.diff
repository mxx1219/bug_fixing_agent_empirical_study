diff --git a/django/db/models/sql/subqueries.py b/django/db/models/sql/subqueries.py
index 04063f73bc..f45ae64219 100644
--- a/django/db/models/sql/subqueries.py
+++ b/django/db/models/sql/subqueries.py
@@ -95,8 +95,20 @@ class UpdateQuery(Query):
                     "Cannot update model field %r (only non-relations and "
                     "foreign keys permitted)." % field
                 )
+            # For multi-table inheritance, we need to handle fields from all parent models
             if model is not self.get_meta().concrete_model:
-                self.add_related_update(model, field, val)
+                # Find the correct parent link field for this model
+                parent_link = None
+                for parent in self.get_meta().get_parent_list():
+                    if parent._meta.concrete_model is model:
+                        parent_link = self.get_meta().get_ancestor_link(parent)
+                        break
+                if parent_link:
+                    # Add the update with the correct parent link field
+                    self.add_related_update(model, field, val, parent_link)
+                else:
+                    # If no parent link is found, treat it as a regular field
+                    values_seq.append((field, model, val))
                 continue
             values_seq.append((field, model, val))
         return self.add_update_fields(values_seq)
@@ -113,13 +125,14 @@ class UpdateQuery(Query):
                 val = val.resolve_expression(self, allow_joins=False, for_save=True)
             self.values.append((field, model, val))
 
-    def add_related_update(self, model, field, value):
+    def add_related_update(self, model, field, value, parent_link=None):
         """
         Add (name, value) to an update query for an ancestor model.
 
         Update are coalesced so that only one update query per ancestor is run.
+        parent_link is used to identify the correct records in multi-table inheritance.
         """
-        self.related_updates.setdefault(model, []).append((field, None, value))
+        self.related_updates.setdefault(model, []).append((field, parent_link, value))
 
     def get_related_updates(self):
         """
@@ -132,9 +145,29 @@ class UpdateQuery(Query):
         result = []
         for model, values in self.related_updates.items():
             query = UpdateQuery(model)
-            query.values = values
+            query.values = [(field, None, value) for field, _, value in values]
             if self.related_ids is not None:
-                query.add_filter("pk__in", self.related_ids)
+                # For multi-table inheritance, we need to use the correct parent link
+                # to identify records in each parent table
+                parent_links = {val[1] for val in values if val[1] is not None}
+                if parent_links:
+                    # If we have a parent link, use it to identify records
+                    parent_link = parent_links.pop()  # Should only be one unique parent link per model
+                    # Get the related field in the parent model that links to the child
+                    parent_field = parent_link.remote_field
+                    # Get the field name that points to the parent model
+                    parent_field_name = parent_link.name
+                    # Get the IDs from the child table that correspond to this parent
+                    child_ids = list(
+                        parent_link.model._base_manager.filter(
+                            pk__in=self.related_ids
+                        ).values_list(parent_field_name, flat=True)
+                    )
+                    # Use these IDs to update the correct records in the parent table
+                    query.add_filter(f"{model._meta.pk.name}__in", child_ids)
+                else:
+                    # Fall back to default behavior for the first parent
+                    query.add_filter("pk__in", self.related_ids)
             result.append(query)
         return result
 
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..1a9c2468cd
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,74 @@
+from django.db import models
+from django.conf import settings
+import os
+
+# Configure Django settings
+BASE_DIR = os.path.dirname(os.path.abspath(__file__))
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+)
+
+import django
+django.setup()
+
+# Define the models
+class Base(models.Model):
+    base_id = models.AutoField(primary_key=True)
+    field_base = models.IntegerField()
+
+    class Meta:
+        app_label = 'test_app'
+
+class OtherBase(models.Model):
+    otherbase_id = models.AutoField(primary_key=True)
+    field_otherbase = models.IntegerField()
+
+    class Meta:
+        app_label = 'test_app'
+
+class Child(Base, OtherBase):
+    class Meta:
+        app_label = 'test_app'
+
+# Create the database tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Base)
+    schema_editor.create_model(OtherBase)
+    schema_editor.create_model(Child)
+
+# Reproduce the issue
+def main():
+    # Create OtherBase instances
+    other1 = OtherBase.objects.create(field_otherbase=100)
+    other2 = OtherBase.objects.create(field_otherbase=101)
+    print("Created OtherBase instances:", other1.otherbase_id, other2.otherbase_id)
+
+    # Create Child instances
+    child1 = Child.objects.create(field_base=0, field_otherbase=0)
+    child2 = Child.objects.create(field_base=1, field_otherbase=1)
+    print("Created Child instances:", child1.base_id, child2.base_id)
+
+    # Try to update Child instances
+    print("\nUpdating Child instances...")
+    Child.objects.update(field_otherbase=55)
+
+    # Check results
+    print("\nChild.objects.values('field_otherbase'):")
+    print(list(Child.objects.values('field_otherbase')))
+    
+    print("\nOtherBase.objects.filter(otherbase_id__in=[1,2]).values('field_otherbase'):")
+    print(list(OtherBase.objects.filter(otherbase_id__in=[1,2]).values('field_otherbase')))
+
+if __name__ == '__main__':
+    main()
\ No newline at end of file
