diff --git a/django/db/models/query.py b/django/db/models/query.py
index 794e0faae7..92349cd0c5 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -1209,7 +1209,8 @@ class QuerySet:
         if ignore_conflicts and not connections[self.db].features.supports_ignore_conflicts:
             raise NotSupportedError('This database backend does not support ignoring conflicts.')
         ops = connections[self.db].ops
-        batch_size = (batch_size or max(ops.bulk_batch_size(fields, objs), 1))
+        max_batch_size = max(ops.bulk_batch_size(fields, objs), 1)
+        batch_size = min(batch_size, max_batch_size) if batch_size else max_batch_size
         inserted_rows = []
         bulk_return = connections[self.db].features.can_return_rows_from_bulk_insert
         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..de0a39c3e5
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,46 @@
+from django.conf import settings
+import os
+import django
+
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=['django.contrib.contenttypes'],
+        SECRET_KEY='dummy',
+    )
+    django.setup()
+
+from django.db import models, connection
+from django.test import TestCase
+from django.test.utils import override_settings
+
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'contenttypes'
+
+class BulkCreateTest(TestCase):
+    def test_bulk_create_batch_size(self):
+        # Get the database's max batch size for our fields
+        fields = [TestModel._meta.get_field('name')]
+        max_batch_size = connection.ops.bulk_batch_size(fields, [])
+        print(f"Database max batch size: {max_batch_size}")
+        
+        # Create test objects
+        objects = [TestModel(name=f"test_{i}") for i in range(max_batch_size + 10)]
+        
+        # Try bulk_create with a batch size larger than max_batch_size
+        TestModel.objects.bulk_create(objects, batch_size=max_batch_size + 5)
+        print(f"Successfully created {len(objects)} objects")
+
+if __name__ == '__main__':
+    test = BulkCreateTest()
+    test._pre_setup()
+    test.test_bulk_create_batch_size()
+    test._post_teardown()
\ No newline at end of file
diff --git a/test_bulk_create.py b/test_bulk_create.py
new file mode 100644
index 0000000000..8615dd35e2
--- /dev/null
+++ b/test_bulk_create.py
@@ -0,0 +1,37 @@
+from django.conf import settings
+import django
+
+settings.configure(
+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+    INSTALLED_APPS=['django.contrib.auth', 'django.contrib.contenttypes'],
+    SECRET_KEY='dummy'
+)
+django.setup()
+
+from django.db import models, connection
+from django.test import TestCase
+
+class SimpleModel(models.Model):
+    name = models.CharField(max_length=100)
+    class Meta:
+        app_label = 'auth'
+
+class BulkCreateTest(TestCase):
+    def test_batch_size(self):
+        # Get max batch size from DB
+        fields = [SimpleModel._meta.get_field('name')]
+        max_batch_size = connection.ops.bulk_batch_size(fields, [])
+        print(f"Max batch size from DB: {max_batch_size}")
+        
+        # Create objects
+        objects = [SimpleModel(name=f'test_{i}') for i in range(max_batch_size + 5)]
+        
+        # Try with larger batch size
+        SimpleModel.objects.bulk_create(objects, batch_size=max_batch_size + 10)
+        print("Bulk create completed")
+
+if __name__ == '__main__':
+    test = BulkCreateTest()
+    test._pre_setup()
+    test.test_batch_size()
+    test._post_teardown()
\ No newline at end of file
