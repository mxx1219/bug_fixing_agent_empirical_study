diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py
index e19c881cda..dc1e1f74f1 100644
--- a/django/db/migrations/serializer.py
+++ b/django/db/migrations/serializer.py
@@ -273,7 +273,7 @@ class TupleSerializer(BaseSequenceSerializer):
 class TypeSerializer(BaseSerializer):
     def serialize(self):
         special_cases = [
-            (models.Model, "models.Model", []),
+            (models.Model, "models.Model", ["from django.db import models"]),
             (type(None), 'type(None)', []),
         ]
         for case, string, imports in special_cases:
@@ -283,6 +283,8 @@ class TypeSerializer(BaseSerializer):
             module = self.value.__module__
             if module == builtins.__name__:
                 return self.value.__name__, set()
+            elif module == "django.db.models":
+                return "models.%s" % self.value.__name__, {"from django.db import models"}
             else:
                 return "%s.%s" % (module, self.value.__qualname__), {"import %s" % module}
 
diff --git a/django/db/migrations/writer.py b/django/db/migrations/writer.py
index 4918261fb0..a98b066a91 100644
--- a/django/db/migrations/writer.py
+++ b/django/db/migrations/writer.py
@@ -163,8 +163,25 @@ class MigrationWriter:
                 self.needs_manual_porting = True
 
         # django.db.migrations is always used, but models import may not be.
-        # If models import exists, merge it with migrations import.
+        # If models import exists or if models.Model is used in bases, merge it with migrations import.
+        needs_models = False
         if "from django.db import models" in imports:
+            needs_models = True
+        else:
+            # Check if any CreateModel operation uses models.Model in bases
+            for operation in self.migration.operations:
+                if isinstance(operation, migrations.CreateModel):
+                    bases = operation.bases
+                    if isinstance(bases, (list, tuple)):
+                        for base in bases:
+                            if isinstance(base, str) and 'models.Model' in base:
+                                needs_models = True
+                                break
+                            elif hasattr(base, '__module__') and base.__module__ == 'django.db.models':
+                                needs_models = True
+                                break
+
+        if needs_models:
             imports.discard("from django.db import models")
             imports.add("from django.db import migrations, models")
         else:
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..fcb11dd9ee
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,93 @@
+import os
+import sys
+import tempfile
+import shutil
+from pathlib import Path
+
+# Create a temporary Django project
+temp_dir = tempfile.mkdtemp()
+django_example_dir = os.path.join(temp_dir, 'django_example')
+app_dir = os.path.join(django_example_dir, 'app')
+
+# Create project structure
+os.makedirs(django_example_dir)
+os.makedirs(app_dir)
+os.makedirs(os.path.join(app_dir, 'migrations'))
+
+# Create __init__.py files
+Path(os.path.join(django_example_dir, '__init__.py')).touch()
+Path(os.path.join(app_dir, '__init__.py')).touch()
+Path(os.path.join(app_dir, 'migrations', '__init__.py')).touch()
+
+# Create settings.py
+with open(os.path.join(django_example_dir, 'settings.py'), 'w') as f:
+    f.write("""
+import os
+
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django_example.app',
+]
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': os.path.join(os.path.dirname(__file__), 'db.sqlite3'),
+    }
+}
+
+SECRET_KEY = 'dummy'
+""")
+
+# Create models.py with the test case
+with open(os.path.join(app_dir, 'models.py'), 'w') as f:
+    f.write("""
+from django.db import models
+
+class MyField(models.TextField):
+    pass
+
+class MyBaseModel(models.Model):
+    class Meta:
+        abstract = True
+
+class MyMixin:
+    pass
+
+class MyModel(MyMixin, MyBaseModel):
+    name = MyField(primary_key=True)
+""")
+
+# Add project directory to Python path
+sys.path.insert(0, temp_dir)
+
+# Set up Django environment
+os.environ['DJANGO_SETTINGS_MODULE'] = 'django_example.settings'
+
+import django
+django.setup()
+
+# Run makemigrations
+from django.core.management import call_command
+try:
+    call_command('makemigrations', 'app', verbosity=3)
+    print("\nMigration file created successfully")
+    
+    # Now try to apply the migration
+    print("\nAttempting to apply the migration...")
+    call_command('migrate', 'app', verbosity=3)
+    print("Migration applied successfully!")
+except Exception as e:
+    print(f"\nError: {str(e)}")
+
+# Print the generated migration file
+migrations_dir = os.path.join(app_dir, 'migrations')
+if os.path.exists(migrations_dir):
+    for filename in os.listdir(migrations_dir):
+        if filename.endswith('.py') and not filename.startswith('__'):
+            print(f"\nGenerated migration file {filename}:")
+            with open(os.path.join(migrations_dir, filename)) as f:
+                print(f.read())
+
+# Clean up
+shutil.rmtree(temp_dir)
\ No newline at end of file
