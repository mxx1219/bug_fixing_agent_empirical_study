diff --git a/django/db/models/enums.py b/django/db/models/enums.py
index f48143ddaf..4aa4ec8cfe 100644
--- a/django/db/models/enums.py
+++ b/django/db/models/enums.py
@@ -31,6 +31,8 @@ class ChoicesMeta(enum.EnumMeta):
         # that is passed in as "self" as the value to use when looking up the
         # label in the choices.
         cls.label = property(lambda self: cls._value2label_map_.get(self.value))
+        # Add do_not_call_in_templates to prevent template system from calling the enum
+        cls.do_not_call_in_templates = True
         return enum.unique(cls)
 
     def __contains__(cls, member):
@@ -69,13 +71,26 @@ class Choices(enum.Enum, metaclass=ChoicesMeta):
         return str(self.value)
 
 
-class IntegerChoices(int, Choices):
+class IntegerChoices(enum.IntEnum, metaclass=ChoicesMeta):
     """Class for creating enumerated integer choices."""
-    pass
+
+    def __str__(self):
+        """
+        Use value when cast to str, so that Choices set as model instance
+        attributes are rendered as expected in templates and similar contexts.
+        """
+        return str(self.value)
 
 
-class TextChoices(str, Choices):
+class TextChoices(str, enum.Enum, metaclass=ChoicesMeta):
     """Class for creating enumerated string choices."""
 
+    def __str__(self):
+        """
+        Use value when cast to str, so that Choices set as model instance
+        attributes are rendered as expected in templates and similar contexts.
+        """
+        return str(self.value)
+
     def _generate_next_value_(name, start, count, last_values):
         return name
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..d81dca7a82
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,47 @@
+from django.db import models
+from django.template import Context, Template
+from django.conf import settings
+import django
+
+# Configure Django settings
+settings.configure(
+    TEMPLATES=[{
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'APP_DIRS': True,
+    }],
+    INSTALLED_APPS=['django.contrib.contenttypes']
+)
+
+# Initialize Django
+django.setup()
+
+class YearInSchool(models.TextChoices):
+    FRESHMAN = 'FR', 'Freshman'
+    SOPHOMORE = 'SO', 'Sophomore'
+    JUNIOR = 'JR', 'Junior'
+    SENIOR = 'SR', 'Senior'
+
+# Create a template that tests various enum comparisons
+template = Template('''
+{% if year == YearInSchool.FRESHMAN %}Is Freshman{% endif %}
+{% if year == YearInSchool.SOPHOMORE %}Is Sophomore{% endif %}
+{% if year != YearInSchool.FRESHMAN %}Not Freshman{% endif %}
+{% if YearInSchool.FRESHMAN == "FR" %}Freshman equals FR{% endif %}
+''')
+
+# Test different scenarios
+test_cases = [
+    {'year': YearInSchool.FRESHMAN},
+    {'year': YearInSchool.SOPHOMORE},
+    {'year': 'FR'},  # Test raw value comparison
+]
+
+for case in test_cases:
+    print(f"\nTesting with year = {case['year']}")
+    context = Context({**case, 'YearInSchool': YearInSchool})
+    try:
+        result = template.render(context)
+        print("Template rendered successfully:")
+        print(result.strip())
+    except Exception as e:
+        print("Error rendering template:", str(e))
\ No newline at end of file
