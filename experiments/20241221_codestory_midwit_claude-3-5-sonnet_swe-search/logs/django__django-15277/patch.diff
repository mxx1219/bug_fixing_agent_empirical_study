diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index f30b523346..88c9ca9f28 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -1010,7 +1010,8 @@ class CharField(Field):
     def __init__(self, *args, db_collation=None, **kwargs):
         super().__init__(*args, **kwargs)
         self.db_collation = db_collation
-        self.validators.append(validators.MaxLengthValidator(self.max_length))
+        if self.max_length is not None:
+            self.validators.append(validators.MaxLengthValidator(self.max_length))
 
     def check(self, **kwargs):
         databases = kwargs.get('databases') or []
diff --git a/edge_cases.py b/edge_cases.py
new file mode 100644
index 0000000000..39115aaafd
--- /dev/null
+++ b/edge_cases.py
@@ -0,0 +1,19 @@
+from django.db.models import Value, CharField
+
+def test_edge_cases():
+    # Test 1: CharField with max_length set should have validator
+    field1 = CharField(max_length=100)
+    print("Field with max_length=100 validators:", field1.validators)
+
+    # Test 2: CharField with max_length=None should work without validation
+    field2 = CharField(max_length=None)
+    print("Field with max_length=None validators:", field2.validators)
+
+    # Test 3: Value with string should work without validation
+    x = Value('test')
+    y = x._resolve_output_field()
+    print("Value field validators:", y.validators)
+    print("Value field max_length:", y.max_length)
+
+if __name__ == "__main__":
+    test_edge_cases()
\ No newline at end of file
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..3e44055ea1
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,22 @@
+from django.db.models import Value
+import timeit
+
+def test_performance():
+    x = Value('test')
+    y = x._resolve_output_field()
+    print("Validators:", y.validators)
+    try:
+        y.clean('1', model_instance=None)
+    except TypeError as e:
+        print("Expected TypeError:", str(e))
+
+    # Performance test
+    setup_code = "from django.db.models import Value; x = Value('test')"
+    test_code = "x._resolve_output_field()"
+    
+    result = timeit.timeit(test_code, setup=setup_code, number=100000)
+    print(f"\nPerformance test:")
+    print(f"Average time per call: {result/100000*1000000:.2f} Âµs")
+
+if __name__ == "__main__":
+    test_performance()
\ No newline at end of file
