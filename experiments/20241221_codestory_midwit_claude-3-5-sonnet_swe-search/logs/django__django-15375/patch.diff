diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py
index 8c4eae7906..535b3546de 100644
--- a/django/db/models/aggregates.py
+++ b/django/db/models/aggregates.py
@@ -64,8 +64,10 @@ class Aggregate(Func):
             return c
         if hasattr(default, 'resolve_expression'):
             default = default.resolve_expression(query, allow_joins, reuse, summarize)
-        c.default = None  # Reset the default argument before wrapping.
-        return Coalesce(c, default, output_field=c._output_field_or_none)
+        # Keep track of the original default value
+        c._default_value = default
+        # Don't wrap in Coalesce here, let the compiler handle it
+        return c
 
     @property
     def default_alias(self):
diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index d405a203ee..d2a11fd6de 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -1671,8 +1671,13 @@ class SQLAggregateCompiler(SQLCompiler):
         parameters.
         """
         sql, params = [], []
-        for annotation in self.query.annotation_select.values():
+        for alias, annotation in self.query.annotation_select.items():
+            has_default = hasattr(annotation, '_default_value')
             ann_sql, ann_params = self.compile(annotation)
+            if has_default:
+                default_value = annotation._default_value
+                ann_sql = 'COALESCE(%s, %%s)' % ann_sql
+                ann_params = list(ann_params) + [default_value]
             ann_sql, ann_params = annotation.select_format(self, ann_sql, ann_params)
             sql.append(ann_sql)
             params.extend(ann_params)
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..24bd3465f0
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,71 @@
+from django.conf import settings
+import os
+
+# Configure settings first
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:'
+        }
+    },
+    INSTALLED_APPS=[],
+    DEFAULT_AUTO_FIELD='django.db.models.AutoField',
+)
+
+import django
+django.setup()
+
+from django.db import models, connection
+from django.db.models import Sum, F
+from django.db.models.functions import Coalesce
+
+def setup_test_environment():
+    from django.conf import settings
+    import os
+    
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:'
+            }
+        },
+        INSTALLED_APPS=[
+            'testapp',
+        ]
+    )
+    import django
+    django.setup()
+    
+    # Create the test database
+    from django.db import connection
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(Book)
+    
+    # Create some test data
+    for i in range(1, 6):
+        Book.objects.create(id=i, title=f'Book {i}')
+
+def main():
+    setup_test_environment()
+    
+    # Test normal aggregation
+    result1 = Book.objects.annotate(idx=F("id")).aggregate(Sum("id"))
+    print("Normal aggregation:", result1)
+    
+    # Test aggregation with default (this should fail)
+    try:
+        result2 = Book.objects.annotate(idx=F("id")).aggregate(Sum("id", default=0))
+        print("Aggregation with default:", result2)
+    except Exception as e:
+        print("Error with default:", str(e))
+    
+    # Test the workaround
+    result3 = Book.objects.annotate(idx=F("id")).aggregate(x=models.functions.Coalesce(Sum("id"), 0))
+    print("Using Coalesce:", result3)
+
+if __name__ == '__main__':
+    main()
\ No newline at end of file
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..3a3f41b8f3
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,65 @@
+from django.conf import settings
+import os
+
+# Configure settings first
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:'
+        }
+    },
+    INSTALLED_APPS=[],
+    DEFAULT_AUTO_FIELD='django.db.models.AutoField',
+)
+
+import django
+django.setup()
+
+from django.db import models, connection
+from django.db.models import Sum, F
+
+# Create a test model
+class Book(models.Model):
+    title = models.CharField(max_length=100)
+    price = models.IntegerField()
+
+    class Meta:
+        app_label = '_test'
+
+# Create the test database
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Book)
+
+# Create test data
+Book.objects.create(id=1, title='Book 1', price=10)
+Book.objects.create(id=2, title='Book 2', price=20)
+Book.objects.create(id=3, title='Book 3', price=30)
+
+# Test cases
+def run_tests():
+    print("Testing normal aggregation...")
+    result1 = Book.objects.aggregate(Sum('price'))
+    print("Result:", result1)
+
+    print("\nTesting aggregation with default...")
+    result2 = Book.objects.aggregate(Sum('price', default=0))
+    print("Result:", result2)
+
+    print("\nTesting annotate then aggregate...")
+    result3 = Book.objects.annotate(idx=F('id')).aggregate(Sum('price'))
+    print("Result:", result3)
+
+    print("\nTesting annotate then aggregate with default...")
+    result4 = Book.objects.annotate(idx=F('id')).aggregate(Sum('price', default=0))
+    print("Result:", result4)
+
+    # Test with empty queryset
+    print("\nTesting with empty queryset...")
+    Book.objects.all().delete()
+    result5 = Book.objects.annotate(idx=F('id')).aggregate(Sum('price', default=0))
+    print("Result:", result5)
+
+if __name__ == '__main__':
+    run_tests()
\ No newline at end of file
