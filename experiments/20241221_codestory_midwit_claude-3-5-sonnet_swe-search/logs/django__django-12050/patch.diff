diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index ea51912e8b..f093003708 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1073,7 +1073,8 @@ class Query(BaseExpression):
                         ))
                 else:
                     resolved_values.append(sub_value)
-            value = tuple(resolved_values)
+            # Preserve the original type (list or tuple)
+            value = type(value)(resolved_values)
         return value
 
     def solve_lookup_type(self, lookup):
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..fbc03dc25d
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,43 @@
+import django
+from django.conf import settings
+from django.db.models.sql.query import Query
+from django.db.models import Model
+from django.db.models.fields import Field
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=['django.contrib.contenttypes'],
+    )
+    django.setup()
+
+class DummyModel(Model):
+    class Meta:
+        app_label = 'test'
+
+class DummyField(Field):
+    def __init__(self):
+        super().__init__()
+        self.attname = 'dummy'
+        self.concrete = True
+
+# Create a minimal test case
+query = Query(DummyModel)
+test_list = ['a', 'b', 'c']
+
+# Call resolve_lookup_value with a list
+resolved = query.resolve_lookup_value(test_list, can_reuse=None, allow_joins=True, simple_col=False)
+
+# Check if the resolved value is still a list or has been converted to tuple
+print(f"Original type: {type(test_list)}")
+print(f"Resolved type: {type(resolved)}")
+print(f"Original value: {test_list}")
+print(f"Resolved value: {resolved}")
+
+# This shows the issue where a list is being converted to a tuple
\ No newline at end of file
