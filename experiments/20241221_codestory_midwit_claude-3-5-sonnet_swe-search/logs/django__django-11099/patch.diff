diff --git a/django/contrib/auth/validators.py b/django/contrib/auth/validators.py
index b4878cfd45..1304f20a60 100644
--- a/django/contrib/auth/validators.py
+++ b/django/contrib/auth/validators.py
@@ -7,7 +7,7 @@ from django.utils.translation import gettext_lazy as _
 
 @deconstructible
 class ASCIIUsernameValidator(validators.RegexValidator):
-    regex = r'^[\w.@+-]+$'
+    regex = r'\A[\w.@+-]+\Z'
     message = _(
         'Enter a valid username. This value may contain only English letters, '
         'numbers, and @/./+/-/_ characters.'
@@ -17,7 +17,7 @@ class ASCIIUsernameValidator(validators.RegexValidator):
 
 @deconstructible
 class UnicodeUsernameValidator(validators.RegexValidator):
-    regex = r'^[\w.@+-]+$'
+    regex = r'\A[\w.@+-]+\Z'
     message = _(
         'Enter a valid username. This value may contain only letters, '
         'numbers, and @/./+/-/_ characters.'
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..40960dc2f1
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,57 @@
+from django.contrib.auth.validators import ASCIIUsernameValidator, UnicodeUsernameValidator
+
+def test_validators():
+    ascii_validator = ASCIIUsernameValidator()
+    unicode_validator = UnicodeUsernameValidator()
+
+    # Test cases with trailing newlines (should be rejected)
+    invalid_cases = [
+        "user1\n",
+        "test.user\n",
+        "admin@example\n",
+    ]
+
+    # Test cases without trailing newlines (should be accepted)
+    valid_cases = [
+        "user1",
+        "test.user",
+        "admin@example",
+        "user_123",
+        "user+name",
+        "user-name",
+    ]
+
+    print("Testing ASCIIUsernameValidator with invalid cases:")
+    for username in invalid_cases:
+        try:
+            ascii_validator(username)
+            print(f"❌ ASCIIUsernameValidator accepted invalid username: {repr(username)}")
+        except:
+            print(f"✓ ASCIIUsernameValidator correctly rejected: {repr(username)}")
+
+    print("\nTesting ASCIIUsernameValidator with valid cases:")
+    for username in valid_cases:
+        try:
+            ascii_validator(username)
+            print(f"✓ ASCIIUsernameValidator correctly accepted: {repr(username)}")
+        except:
+            print(f"❌ ASCIIUsernameValidator incorrectly rejected: {repr(username)}")
+
+    print("\nTesting UnicodeUsernameValidator with invalid cases:")
+    for username in invalid_cases:
+        try:
+            unicode_validator(username)
+            print(f"❌ UnicodeUsernameValidator accepted invalid username: {repr(username)}")
+        except:
+            print(f"✓ UnicodeUsernameValidator correctly rejected: {repr(username)}")
+
+    print("\nTesting UnicodeUsernameValidator with valid cases:")
+    for username in valid_cases:
+        try:
+            unicode_validator(username)
+            print(f"✓ UnicodeUsernameValidator correctly accepted: {repr(username)}")
+        except:
+            print(f"❌ UnicodeUsernameValidator incorrectly rejected: {repr(username)}")
+
+if __name__ == "__main__":
+    test_validators()
\ No newline at end of file
