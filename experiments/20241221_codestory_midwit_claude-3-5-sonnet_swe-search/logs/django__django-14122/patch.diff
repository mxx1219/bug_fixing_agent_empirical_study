diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index 850734709d..707a69d68f 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -126,9 +126,9 @@ class SQLCompiler:
             for col in cols:
                 expressions.append(col)
         for expr, (sql, params, is_ref) in order_by:
-            # Skip References to the select clause, as all expressions in the
-            # select clause are already part of the group by.
-            if not is_ref:
+            # Skip References to the select clause and Meta.ordering fields
+            # when they are not part of the SELECT clause
+            if not is_ref and not self._meta_ordering:
                 expressions.extend(expr.get_group_by_cols())
         having_group_by = self.having.get_group_by_cols() if self.having else ()
         for expr in having_group_by:
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..5514697560
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,55 @@
+import os
+import django
+from django.conf import settings
+
+# Configure settings before importing models
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+)
+django.setup()
+
+from django.db import models, connection
+from django.test import TestCase
+from django.db.models import Count
+
+class Item(models.Model):
+    name = models.CharField(max_length=100)
+    category = models.CharField(max_length=100)
+    price = models.DecimalField(max_digits=10, decimal_places=2)
+
+    class Meta:
+        ordering = ['price']  # This should not affect GROUP BY
+        app_label = 'myapp'  # Needed for testing
+
+def run_test():
+    # Create test data
+    Item.objects.create(name='A', category='cat1', price=10)
+    Item.objects.create(name='B', category='cat1', price=20)
+    Item.objects.create(name='C', category='cat2', price=30)
+    Item.objects.create(name='D', category='cat2', price=40)
+
+    # This query should group only by category, but Meta.ordering might incorrectly add price to GROUP BY
+    result = Item.objects.values('category').annotate(count=Count('id'))
+    
+    # Print the generated SQL
+    print("Generated SQL:", result.query)
+    
+    # Print the results
+    for item in result:
+        print(f"Category: {item['category']}, Count: {item['count']}")
+
+if __name__ == '__main__':
+    # Create the table
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(Item)
+    
+    run_test()
\ No newline at end of file
