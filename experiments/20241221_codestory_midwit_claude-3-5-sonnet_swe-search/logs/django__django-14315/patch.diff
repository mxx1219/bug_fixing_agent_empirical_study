diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py
index 3effab65a8..7b79b118a2 100644
--- a/django/db/backends/postgresql/client.py
+++ b/django/db/backends/postgresql/client.py
@@ -36,21 +36,19 @@ class DatabaseClient(BaseDatabaseClient):
             args += [dbname]
         args.extend(parameters)
 
-        env = {}
-        if passwd:
-            env['PGPASSWORD'] = str(passwd)
-        if service:
-            env['PGSERVICE'] = str(service)
-        if sslmode:
-            env['PGSSLMODE'] = str(sslmode)
-        if sslrootcert:
-            env['PGSSLROOTCERT'] = str(sslrootcert)
-        if sslcert:
-            env['PGSSLCERT'] = str(sslcert)
-        if sslkey:
-            env['PGSSLKEY'] = str(sslkey)
-        if passfile:
-            env['PGPASSFILE'] = str(passfile)
+        env = None
+        env_vars = {
+            'PGPASSWORD': passwd,
+            'PGSERVICE': service,
+            'PGSSLMODE': sslmode,
+            'PGSSLROOTCERT': sslrootcert,
+            'PGSSLCERT': sslcert,
+            'PGSSLKEY': sslkey,
+            'PGPASSFILE': passfile,
+        }
+        # Only create env dict if we have any PostgreSQL-specific environment variables
+        if any(val is not None for val in env_vars.values()):
+            env = {key: str(val) for key, val in env_vars.items() if val is not None}
         return args, env
 
     def runshell(self, parameters):
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..022fffb3ad
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,42 @@
+import os
+from django.db.backends.postgresql.client import DatabaseClient
+
+# Set a test environment variable
+os.environ['TEST_VAR'] = 'test_value'
+
+# Test case 1: No PostgreSQL-specific env vars
+print("Test case 1: No PostgreSQL-specific env vars")
+settings = {
+    'NAME': 'test_db',
+    'USER': 'test_user',
+    'HOST': 'localhost',
+}
+
+args, env = DatabaseClient.settings_to_cmd_args_env(settings, [])
+print("Environment returned:", env)
+print("Is env None?", env is None)
+
+# Test case 2: With PostgreSQL-specific env vars
+print("\nTest case 2: With PostgreSQL-specific env vars")
+settings_with_env = {
+    'NAME': 'test_db',
+    'USER': 'test_user',
+    'HOST': 'localhost',
+    'PASSWORD': 'secret',
+    'OPTIONS': {
+        'sslmode': 'verify-full',
+    }
+}
+
+args, env = DatabaseClient.settings_to_cmd_args_env(settings_with_env, [])
+print("Environment returned:", env)
+print("Contains PGPASSWORD?", 'PGPASSWORD' in env)
+print("Contains PGSSLMODE?", 'PGSSLMODE' in env)
+
+# Simulate what happens in BaseDatabaseClient.runshell
+if env:
+    final_env = {**os.environ, **env}
+    print("\nFinal environment:")
+    print("TEST_VAR present?", 'TEST_VAR' in final_env)
+    print("PGPASSWORD present?", 'PGPASSWORD' in final_env)
+    print("PGSSLMODE present?", 'PGSSLMODE' in final_env)
\ No newline at end of file
