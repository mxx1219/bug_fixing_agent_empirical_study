diff --git a/django/core/serializers/base.py b/django/core/serializers/base.py
index da85cb4b92..a65bdda8c6 100644
--- a/django/core/serializers/base.py
+++ b/django/core/serializers/base.py
@@ -336,12 +336,14 @@ def build_instance(Model, data, db):
         and hasattr(default_manager, "get_by_natural_key")
         and hasattr(Model, "natural_key")
     ):
-        natural_key = Model(**data).natural_key()
+        instance = Model(**data)
+        instance._state.db = db  # Set the database state for the instance
         try:
+            natural_key = instance.natural_key()
             data[Model._meta.pk.attname] = Model._meta.pk.to_python(
                 default_manager.db_manager(db).get_by_natural_key(*natural_key).pk
             )
-        except Model.DoesNotExist:
+        except (Model.DoesNotExist, AttributeError):
             pass
     return Model(**data)
 
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..cbd437a081
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,137 @@
+import os
+import sys
+import django
+from django.conf import settings
+from django.core.management import call_command
+from django.db import connections
+import json
+from django.apps import apps
+
+# Create a temporary app directory
+os.makedirs('testapp', exist_ok=True)
+with open('testapp/__init__.py', 'w') as f:
+    pass
+
+# Write models to testapp/models.py
+models_content = """
+from django.db import models
+
+class AuthorManager(models.Manager):
+    def get_by_natural_key(self, name):
+        return self.get(name=name)
+
+class Author(models.Model):
+    id = models.AutoField(primary_key=True)
+    name = models.CharField(max_length=255, unique=True)
+    objects = AuthorManager()
+
+    def natural_key(self):
+        return (self.name,)
+
+    def __str__(self):
+        return f"{self.id} {self.name}"
+
+    class Meta:
+        app_label = 'testapp'
+
+class BookManager(models.Manager):
+    def get_by_natural_key(self, title, author):
+        return self.get(title=title, author__name=author)
+
+class Book(models.Model):
+    id = models.AutoField(primary_key=True)
+    title = models.CharField(max_length=255)
+    author = models.ForeignKey(Author, models.DO_NOTHING, related_name="books")
+    objects = BookManager()
+
+    def natural_key(self):
+        return (self.title,) + self.author.natural_key()
+
+    natural_key.dependencies = ["testapp.Author"]
+
+    class Meta:
+        app_label = 'testapp'
+        unique_together = [["title", "author"]]
+
+    def __str__(self):
+        return f"{self.id}: '{self.title}' by {self.author}"
+"""
+
+with open('testapp/models.py', 'w') as f:
+    f.write(models_content)
+
+# Configure Django settings
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': 'db.sqlite3',
+    },
+    'other': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': 'other.sqlite3',
+    }
+}
+
+settings.configure(
+    DEBUG=True,
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+        'testapp',
+    ],
+    DATABASES=DATABASES,
+    USE_TZ=False,
+)
+
+# Add the current directory to Python path
+sys.path.append(os.path.dirname(os.path.abspath(__file__)))
+
+django.setup()
+
+# Create the test data
+test_data = [
+    {
+        "model": "testapp.author",
+        "fields": {
+            "name": "JR Tolkien"
+        }
+    },
+    {
+        "model": "testapp.book",
+        "fields": {
+            "title": "The Ring",
+            "author": [
+                "JR Tolkien"
+            ]
+        }
+    }
+]
+
+# Create the databases and tables
+for alias in connections:
+    connection = connections[alias]
+    if not os.path.exists(connection.settings_dict['NAME']):
+        with open(connection.settings_dict['NAME'], 'w') as f:
+            pass
+    with connection.cursor() as cursor:
+        cursor.execute("""
+            CREATE TABLE IF NOT EXISTS testapp_author (
+                id INTEGER PRIMARY KEY AUTOINCREMENT,
+                name VARCHAR(255) UNIQUE
+            )
+        """)
+        cursor.execute("""
+            CREATE TABLE IF NOT EXISTS testapp_book (
+                id INTEGER PRIMARY KEY AUTOINCREMENT,
+                title VARCHAR(255),
+                author_id INTEGER REFERENCES testapp_author(id)
+            )
+        """)
+
+# Write the fixture to a file
+with open('books.json', 'w') as f:
+    json.dump(test_data, f, indent=2)
+
+# Try to load the fixture into the other database
+print("Loading fixture into 'other' database...")
+call_command('loaddata', 'books.json', database='other', verbosity=2)
\ No newline at end of file
