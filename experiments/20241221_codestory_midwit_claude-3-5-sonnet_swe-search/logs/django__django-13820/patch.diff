diff --git a/django/db/migrations/loader.py b/django/db/migrations/loader.py
index 95a5062ec9..e58d1c43a5 100644
--- a/django/db/migrations/loader.py
+++ b/django/db/migrations/loader.py
@@ -90,7 +90,8 @@ class MigrationLoader:
             else:
                 # Empty directories are namespaces.
                 # getattr() needed on PY36 and older (replace w/attribute access).
-                if getattr(module, '__file__', None) is None:
+                # Check both __file__ and __path__ type to properly identify namespace packages
+                if getattr(module, '__file__', None) is None and not isinstance(getattr(module, '__path__', None), list):
                     self.unmigrated_apps.add(app_config.label)
                     continue
                 # Module is not a package (e.g. migrations.py).
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..e5f4cd57d5
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,34 @@
+import sys
+import types
+from django.db.migrations.loader import MigrationLoader
+
+# Create a mock module without __file__ but with a list __path__
+mock_module = types.ModuleType('mock_migrations')
+mock_module.__path__ = ['/some/path']  # Regular package has list for __path__
+sys.modules['mock_migrations'] = mock_module
+
+# Create a mock module without __file__ and with custom iterable __path__
+mock_namespace = types.ModuleType('mock_namespace')
+class CustomPath:
+    def __iter__(self):
+        return iter(['/some/path'])
+mock_namespace.__path__ = CustomPath()  # Namespace package has custom iterable
+sys.modules['mock_namespace'] = mock_namespace
+
+# Test both modules
+def test_module(module_name):
+    print(f"\nTesting module: {module_name}")
+    module = sys.modules[module_name]
+    print(f"Has __file__: {hasattr(module, '__file__')}")
+    print(f"__path__ type: {type(module.__path__)}")
+    print(f"Is __path__ list: {isinstance(module.__path__, list)}")
+    
+    # Test with updated Django implementation
+    print("Testing with updated Django implementation:")
+    if getattr(module, '__file__', None) is None and not isinstance(getattr(module, '__path__', None), list):
+        print("Would be rejected (correct for namespace packages)")
+    else:
+        print("Would be accepted (correct for regular packages)")
+
+test_module('mock_migrations')
+test_module('mock_namespace')
\ No newline at end of file
