diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 137e6faa0f..a100f1c499 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -1631,7 +1631,7 @@ class ModelAdmin(BaseModelAdmin):
 
     def _get_edited_object_pks(self, request, prefix):
         """Return POST data values of list_editable primary keys."""
-        pk_pattern = re.compile(r'{}-\d+-{}$'.format(prefix, self.model._meta.pk.name))
+        pk_pattern = re.compile(r'{}-\d+-{}$'.format(re.escape(prefix), self.model._meta.pk.name))
         return [value for key, value in request.POST.items() if pk_pattern.match(key)]
 
     def _get_list_editable_queryset(self, request, prefix):
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..d2b2a104bd
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,51 @@
+from django.contrib.admin.options import ModelAdmin
+from django.db import models
+from django.conf import settings
+from django.http import HttpRequest
+import django
+import re
+import os
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=['django.contrib.admin', 'django.contrib.contenttypes'],
+        DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+    )
+    django.setup()
+
+# Create a simple model for testing
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        # This is just for testing, we don't need an actual database
+        abstract = True
+
+def test_pattern_matching(prefix, key):
+    """Test both the buggy and fixed pattern matching"""
+    # Buggy version (without re.escape)
+    buggy_pattern = re.compile(r'{}-\d+-{}$'.format(prefix, 'id'))
+    # Fixed version (with re.escape)
+    fixed_pattern = re.compile(r'{}-\d+-{}$'.format(re.escape(prefix), 'id'))
+    
+    print(f"\nTesting prefix: '{prefix}'")
+    print(f"Testing key: '{key}'")
+    print("Buggy version matches:", bool(buggy_pattern.match(key)))
+    print("Fixed version matches:", bool(fixed_pattern.match(key)))
+
+def demonstrate_issue():
+    # Test with a normal prefix
+    test_pattern_matching("normal", "normal-123-id")
+    
+    # Test with a prefix containing regex special characters
+    test_pattern_matching("form[+]", "form[+]-123-id")
+    
+    # Test with more complex regex special characters
+    test_pattern_matching("form.*+?[]", "form.*+?[]-123-id")
+    
+    # Test with parentheses
+    test_pattern_matching("form(test)", "form(test)-123-id")
+
+if __name__ == "__main__":
+    demonstrate_issue()
\ No newline at end of file
