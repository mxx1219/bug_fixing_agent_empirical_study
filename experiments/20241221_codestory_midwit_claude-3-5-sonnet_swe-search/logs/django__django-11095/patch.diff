diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 5e7b23f9a0..519fd4b361 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -580,9 +580,16 @@ class ModelAdmin(BaseModelAdmin):
     def __str__(self):
         return "%s.%s" % (self.model._meta.app_label, self.__class__.__name__)
 
+    def get_inlines(self, request, obj=None):
+        """
+        Hook for specifying inline classes based on the request or model instance.
+        Default implementation returns self.inlines.
+        """
+        return self.inlines
+
     def get_inline_instances(self, request, obj=None):
         inline_instances = []
-        for inline_class in self.inlines:
+        for inline_class in self.get_inlines(request, obj):
             inline = inline_class(self.model, self.admin_site)
             if request:
                 if not (inline.has_view_or_change_permission(request, obj) or
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..a044098744
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,92 @@
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')
+import django
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=['django.contrib.admin', 'django.contrib.contenttypes', 'django.contrib.auth'],
+        DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+    )
+    django.setup()
+
+from django.contrib import admin
+from django.contrib.auth.models import User
+from django.db import models
+from django.test import RequestFactory
+
+# Example models for demonstration
+class Author(models.Model):
+    class Meta:
+        app_label = 'admin'  # Use admin app since it's already in INSTALLED_APPS
+    name = models.CharField(max_length=100)
+    is_staff = models.BooleanField(default=False)
+
+    def __str__(self):
+        return self.name
+
+class Book(models.Model):
+    class Meta:
+        app_label = 'admin'
+    title = models.CharField(max_length=100)
+    author = models.ForeignKey(Author, on_delete=models.CASCADE)
+
+    def __str__(self):
+        return self.title
+
+class Review(models.Model):
+    class Meta:
+        app_label = 'admin'
+    book = models.ForeignKey(Book, on_delete=models.CASCADE)
+    text = models.TextField()
+
+    def __str__(self):
+        return f"Review of {self.book}"
+
+# Inline admin classes
+class BookInline(admin.TabularInline):
+    model = Book
+
+class ReviewInline(admin.TabularInline):
+    model = Review
+
+# Current behavior - cannot dynamically change inlines based on request/obj
+class CurrentAuthorAdmin(admin.ModelAdmin):
+    inlines = [BookInline, ReviewInline]
+
+# Desired behavior - can dynamically change inlines based on request/obj
+class DesiredAuthorAdmin(admin.ModelAdmin):
+    def get_inlines(self, request, obj=None):
+        # Example: Only show ReviewInline for staff authors
+        if obj and obj.is_staff:
+            return [BookInline, ReviewInline]
+        return [BookInline]
+
+if __name__ == "__main__":
+    # Create a request with a mock user
+    factory = RequestFactory()
+    request = factory.get('/')
+    request.user = type('MockUser', (), {
+        'is_active': True,
+        'is_staff': True,
+        'has_perm': lambda self, perm: True,  # Mock user has all permissions
+        '__str__': lambda self: "Mock User",
+    })()
+    
+    # Create test objects
+    author1 = Author(name="Regular Author", is_staff=False)
+    author2 = Author(name="Staff Author", is_staff=True)
+    
+    # Test current behavior
+    current_admin = CurrentAuthorAdmin(Author, admin.site)
+    current_inlines = current_admin.get_inline_instances(request)
+    print("Current behavior:")
+    print(f"- Number of inlines for any author: {len(current_inlines)}")  # Always 2
+    print(f"- Cannot dynamically change inlines based on author properties")
+    
+    # Test desired behavior with the new hook
+    desired_admin = DesiredAuthorAdmin(Author, admin.site)
+    desired_inlines1 = desired_admin.get_inline_instances(request, obj=author1)
+    desired_inlines2 = desired_admin.get_inline_instances(request, obj=author2)
+    print("\nDesired behavior:")
+    print(f"- Number of inlines for regular author: {len(desired_inlines1)}")  # Should be 1
+    print(f"- Number of inlines for staff author: {len(desired_inlines2)}")    # Should be 2
\ No newline at end of file
