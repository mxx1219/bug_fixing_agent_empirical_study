diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py
index b8efb9f881..c8996f85d1 100644
--- a/django/utils/autoreload.py
+++ b/django/utils/autoreload.py
@@ -215,16 +215,23 @@ def get_child_arguments():
     Return the executable. This contains a workaround for Windows if the
     executable is reported to not have the .exe extension which can cause bugs
     on reloading.
+    
+    This function detects if Python was launched with -m pkg using Python's
+    documented way: checking __main__.__spec__.parent.
     """
-    import django.__main__
-    django_main_path = Path(django.__main__.__file__)
+    import __main__
     py_script = Path(sys.argv[0])
 
     args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]
-    if py_script == django_main_path:
-        # The server was started with `python -m django runserver`.
-        args += ['-m', 'django']
-        args += sys.argv[1:]
+    
+    # Check if Python was launched with -m pkg using __main__.__spec__.parent
+    if hasattr(__main__, '__spec__') and __main__.__spec__ is not None:
+        parent = __main__.__spec__.parent
+        if parent:  # Not empty string (which would indicate directory/zipfile)
+            # The server was started with `python -m pkg runserver`
+            args += ['-m', parent]
+            args += sys.argv[1:]
+            return args
     elif not py_script.exists():
         # sys.argv[0] may not exist for several reasons on Windows.
         # It may exist with a .exe extension or have a -script.py suffix.
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..ec38a2bb2b
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,56 @@
+import os
+import sys
+import tempfile
+from pathlib import Path
+
+# Create a temporary package directory
+with tempfile.TemporaryDirectory() as temp_dir:
+    pkg_dir = Path(temp_dir) / "test_pkg"
+    pkg_dir.mkdir()
+    
+    # Create __init__.py files
+    (pkg_dir / "__init__.py").write_text("")
+    
+    # Create settings.py with minimal settings
+    (pkg_dir / "settings.py").write_text("""
+SECRET_KEY = 'dummy'
+DEBUG = True
+ALLOWED_HOSTS = ['*']
+ROOT_URLCONF = 'test_pkg.urls'
+INSTALLED_APPS = []
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+MIDDLEWARE = []
+TEMPLATES = []
+""")
+    
+    # Create urls.py
+    (pkg_dir / "urls.py").write_text("""
+from django.urls import path
+urlpatterns = []
+""")
+    
+    # Create __main__.py that uses Django's runserver
+    (pkg_dir / "__main__.py").write_text("""
+import os
+import sys
+import django
+from django.core.management import execute_from_command_line
+
+if __name__ == '__main__':
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_pkg.settings')
+    django.setup()
+    execute_from_command_line(sys.argv)
+""")
+    
+    # Change to the temp directory and add it to Python path
+    os.chdir(temp_dir)
+    sys.path.insert(0, temp_dir)
+    
+    # Try to run the package with -m
+    print("Running: python -m test_pkg runserver")
+    os.system(f"{sys.executable} -m test_pkg runserver")
\ No newline at end of file
