diff --git a/django/forms/models.py b/django/forms/models.py
index 5d115458a1..60620961ef 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -100,7 +100,8 @@ def apply_limit_choices_to_to_formfield(formfield):
     if hasattr(formfield, 'queryset') and hasattr(formfield, 'get_limit_choices_to'):
         limit_choices_to = formfield.get_limit_choices_to()
         if limit_choices_to is not None:
-            formfield.queryset = formfield.queryset.complex_filter(limit_choices_to)
+            # Use distinct() to prevent duplicate results when the filter involves joins
+            formfield.queryset = formfield.queryset.complex_filter(limit_choices_to).distinct()
 
 
 def fields_for_model(model, fields=None, exclude=None, widgets=None,
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..a4a967f0f8
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,103 @@
+import os
+import sys
+from django.conf import settings
+import django
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=False,
+    )
+    django.setup()
+
+from django.db import models, connection
+from django.forms import ModelForm
+from django.db.models import Q
+from django.core.management import call_command
+
+# Define test models
+class Category(models.Model):
+    name = models.CharField(max_length=100)
+
+    class Meta:
+        app_label = 'contenttypes'
+
+    def __str__(self):
+        return self.name
+
+class Product(models.Model):
+    name = models.CharField(max_length=100)
+    category = models.ForeignKey(Category, on_delete=models.CASCADE, related_name='products')
+    is_active = models.BooleanField(default=True)
+
+    class Meta:
+        app_label = 'contenttypes'
+
+    def __str__(self):
+        return self.name
+
+class Order(models.Model):
+    # Using limit_choices_to with a Q object that involves a join
+    product = models.ForeignKey(
+        Product,
+        on_delete=models.CASCADE,
+        limit_choices_to=Q(category__products__is_active=True)
+    )
+
+    class Meta:
+        app_label = 'contenttypes'
+
+class OrderForm(ModelForm):
+    class Meta:
+        model = Order
+        fields = ['product']
+
+def main():
+    # Create the tables manually since we're using an existing app
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(Category)
+        schema_editor.create_model(Product)
+        schema_editor.create_model(Order)
+    
+    # Create test data
+    category = Category.objects.create(name='Test Category')
+    
+    # Create multiple products in the same category
+    product1 = Product.objects.create(name='Product 1', category=category, is_active=True)
+    product2 = Product.objects.create(name='Product 2', category=category, is_active=True)
+    product3 = Product.objects.create(name='Product 3', category=category, is_active=False)
+    
+    # Create a form instance
+    form = OrderForm()
+    
+    # Get the choices from the form field
+    choices = list(form.fields['product'].queryset)
+    
+    print("Product choices in form:")
+    for choice in choices:
+        print(f"- {choice}")
+    
+    # Print the count of choices vs distinct choices
+    total_choices = len(choices)
+    distinct_choices = len(set(choice.id for choice in choices))
+    
+    print(f"\nTotal choices: {total_choices}")
+    print(f"Distinct choices: {distinct_choices}")
+    
+    if total_choices > distinct_choices:
+        print("\nISSUE DETECTED: Duplicate choices found in the form field!")
+    else:
+        print("\nNo duplicates found - the fix is working!")
+
+if __name__ == '__main__':
+    main()
\ No newline at end of file
