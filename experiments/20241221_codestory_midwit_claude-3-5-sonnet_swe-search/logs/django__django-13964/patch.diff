diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py
index 872a4c98dc..c2a797e46d 100644
--- a/django/db/models/fields/related_descriptors.py
+++ b/django/db/models/fields/related_descriptors.py
@@ -253,6 +253,27 @@ class ForwardManyToOneDescriptor:
 
         # Set the values of the related field.
         else:
+            # If the related instance doesn't have a primary key value yet,
+            # we need to track it for later updates
+            needs_pk_tracking = any(
+                getattr(value, rh_field.attname) is None or getattr(value, rh_field.attname) == ''
+                for _, rh_field in self.field.related_fields
+                if rh_field.primary_key
+            )
+            
+            if needs_pk_tracking:
+                # Store a reference to update the foreign key when the PK is set
+                def _pk_monitor(sender, instance, **kwargs):
+                    if instance is value:
+                        for lh_field, rh_field in self.field.related_fields:
+                            new_value = getattr(instance, rh_field.attname)
+                            if new_value is not None and new_value != '':
+                                setattr(sender_instance, lh_field.attname, new_value)
+                                self.field.set_cached_value(sender_instance, instance)
+                
+                sender_instance = instance
+                signals.post_save.connect(_pk_monitor, sender=value.__class__, weak=False)
+            
             for lh_field, rh_field in self.field.related_fields:
                 setattr(instance, lh_field.attname, getattr(value, rh_field.attname))
 
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..d5606faec3
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,73 @@
+from django.db import models, transaction
+from django.test import TestCase
+from django.db import connection
+from django.conf import settings
+from django.apps import apps
+
+# Setup Django
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth'],
+        USE_TZ=False,
+    )
+import django
+django.setup()
+
+# Define the models
+class Product(models.Model):
+    sku = models.CharField(primary_key=True, max_length=50)
+    
+    class Meta:
+        app_label = 'auth'  # Using existing app for simplicity
+
+class Order(models.Model):
+    product = models.ForeignKey(Product, on_delete=models.CASCADE)
+    
+    class Meta:
+        app_label = 'auth'  # Using existing app for simplicity
+
+# Create the tables
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Product)
+    schema_editor.create_model(Order)
+
+def test_case_1():
+    """Test case where primary key is set after assignment"""
+    try:
+        with transaction.atomic():
+            order = Order()
+            order.product = Product()
+            order.product.sku = "foo"
+            order.product.save()
+            order.save()
+            
+            # These assertions should both pass
+            assert not Order.objects.filter(product_id="").exists(), "Found order with empty product_id"
+            assert Order.objects.filter(product=order.product).exists(), "Could not find order with correct product"
+            print("Test case 1 passed!")
+    except Exception as e:
+        print(f"Test case 1 failed: {str(e)}")
+
+def test_case_2():
+    """Test case where primary key is set during initialization"""
+    try:
+        with transaction.atomic():
+            order = Order()
+            order.product = Product(sku="foo2")
+            order.product.save()
+            order.save()
+            
+            assert Order.objects.filter(product=order.product).exists(), "Could not find order with correct product"
+            print("Test case 2 passed!")
+    except Exception as e:
+        print(f"Test case 2 failed: {str(e)}")
+
+if __name__ == '__main__':
+    test_case_1()
+    test_case_2()
\ No newline at end of file
