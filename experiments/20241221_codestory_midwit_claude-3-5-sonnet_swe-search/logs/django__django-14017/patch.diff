diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py
index c957ffa564..d4cae1231a 100644
--- a/django/db/models/query_utils.py
+++ b/django/db/models/query_utils.py
@@ -40,7 +40,8 @@ class Q(tree.Node):
         super().__init__(children=[*args, *sorted(kwargs.items())], connector=_connector, negated=_negated)
 
     def _combine(self, other, conn):
-        if not isinstance(other, Q):
+        # Allow combining with Exists objects that have conditional=True
+        if not isinstance(other, Q) and not getattr(other, 'conditional', False):
             raise TypeError(other)
 
         # If the other Q() is empty, ignore it and just use `self`.
@@ -49,15 +50,26 @@ class Q(tree.Node):
             return type(self)(*args, **kwargs)
         # Or if this Q is empty, ignore it and just use `other`.
         elif not self:
-            _, args, kwargs = other.deconstruct()
-            return type(other)(*args, **kwargs)
+            if isinstance(other, Q):
+                _, args, kwargs = other.deconstruct()
+                return type(other)(*args, **kwargs)
+            # If other is an Exists, wrap it in a Q object
+            return type(self)(other)
 
         obj = type(self)()
         obj.connector = conn
         obj.add(self, conn)
-        obj.add(other, conn)
+        if isinstance(other, Q):
+            obj.add(other, conn)
+        else:
+            # If other is an Exists, add it directly
+            obj.children.append(other)
         return obj
 
+    def __rand__(self, other):
+        """Support Exists() & Q() by handling the case when Q is on the right."""
+        return self.__and__(other)
+
     def __or__(self, other):
         return self._combine(other, self.OR)
 
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..8520b14cdd
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,45 @@
+from django.db.models import Q
+from django.db.models.expressions import Exists
+from django.db.models.query import QuerySet
+
+# Create a mock QuerySet since we don't have a real database
+class MockQuerySet(QuerySet):
+    def __init__(self):
+        pass
+    def all(self):
+        return self
+
+# Test both directions of the & operator
+print("1. Basic AND operations:")
+print("Testing Exists(...) & Q()")
+result1 = Exists(MockQuerySet()) & Q()
+print(f"Result 1: {result1}")
+
+print("\nTesting Q() & Exists(...)")
+result2 = Q() & Exists(MockQuerySet())
+print(f"Result 2: {result2}")
+
+# Test with non-empty Q objects
+print("\n2. Non-empty Q objects:")
+result3 = Q(field="value") & Exists(MockQuerySet())
+print(f"Result 3: {result3}")
+
+# Test chained operations
+print("\n3. Chained operations:")
+result4 = Q(field="value") & Exists(MockQuerySet()) & Q(other="value")
+print(f"Result 4: {result4}")
+
+# Test OR operations
+print("\n4. OR operations:")
+result5 = Q(field="value") | Exists(MockQuerySet())
+print(f"Result 5: {result5}")
+
+# Test with negated Exists
+print("\n5. Negated Exists:")
+result6 = ~Exists(MockQuerySet()) & Q(field="value")
+print(f"Result 6: {result6}")
+
+# Test complex combinations
+print("\n6. Complex combinations:")
+result7 = (Q(field="value") & Exists(MockQuerySet())) | (Q(other="value") & ~Exists(MockQuerySet()))
+print(f"Result 7: {result7}")
\ No newline at end of file
