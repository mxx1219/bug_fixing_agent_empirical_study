diff --git a/django/db/backends/postgresql/operations.py b/django/db/backends/postgresql/operations.py
index 62273fc43c..eb01eb8c31 100644
--- a/django/db/backends/postgresql/operations.py
+++ b/django/db/backends/postgresql/operations.py
@@ -353,14 +353,27 @@ class DatabaseOperations(BaseDatabaseOperations):
         if on_conflict == OnConflict.IGNORE:
             return "ON CONFLICT DO NOTHING"
         if on_conflict == OnConflict.UPDATE:
+            # Get the model from the first field
+            model = fields[0].model
+            
+            # Get the db_column names for unique fields
+            unique_columns = []
+            for field_name in unique_fields:
+                field = model._meta.get_field(field_name)
+                column_name = field.db_column or field.column
+                unique_columns.append(self.quote_name(column_name))
+            
+            # Get the db_column names for update fields
+            update_columns = []
+            for field_name in update_fields:
+                field = model._meta.get_field(field_name)
+                column_name = field.db_column or field.column
+                quoted_name = self.quote_name(column_name)
+                update_columns.append(f"{quoted_name} = EXCLUDED.{quoted_name}")
+            
             return "ON CONFLICT(%s) DO UPDATE SET %s" % (
-                ", ".join(map(self.quote_name, unique_fields)),
-                ", ".join(
-                    [
-                        f"{field} = EXCLUDED.{field}"
-                        for field in map(self.quote_name, update_fields)
-                    ]
-                ),
+                ", ".join(unique_columns),
+                ", ".join(update_columns),
             )
         return super().on_conflict_suffix_sql(
             fields,
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..5a37422426
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,63 @@
+from django.db import models
+from django.conf import settings
+import os
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+)
+
+import django
+django.setup()
+
+# Define the model
+class ActivityBlackListed(models.Model):
+    """
+    Test model with mixed case db_column names
+    """
+    class Meta:
+        db_table = "Activity_BlackListed"
+        app_label = 'reproduce_error'
+
+    blacklistid = models.IntegerField(primary_key=True, db_column="BlacklistID")
+    sectorid = models.IntegerField(null=True, blank=True, db_column="SectorID")
+
+# Create the table
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(ActivityBlackListed)
+
+# Test bulk_create with update_conflicts
+instances = [
+    ActivityBlackListed(blacklistid=1, sectorid=100),
+    ActivityBlackListed(blacklistid=2, sectorid=200),
+]
+
+# First create
+ActivityBlackListed.objects.bulk_create(instances)
+
+# Now try to update with conflicts
+update_instances = [
+    ActivityBlackListed(blacklistid=1, sectorid=150),  # Existing ID with new sector
+    ActivityBlackListed(blacklistid=3, sectorid=300),  # New record
+]
+
+# This should update the existing record and create the new one
+ActivityBlackListed.objects.bulk_create(
+    update_instances,
+    update_conflicts=True,
+    update_fields=["sectorid"],
+    unique_fields=["blacklistid"]
+)
+
+print("If you see this, the operation succeeded!")
\ No newline at end of file
