diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py
index e0c42c5b69..d89dc5ba20 100644
--- a/lib/matplotlib/colors.py
+++ b/lib/matplotlib/colors.py
@@ -1551,6 +1551,43 @@ class LogNorm(Normalize):
         # docstring inherited.
         super().autoscale_None(np.ma.masked_less_equal(A, 0, copy=False))
 
+    def __call__(self, value, clip=None):
+        """
+        Map value to the interval [0, 1]. The clip argument is unused.
+        """
+        if clip is None:
+            clip = self.clip
+
+        result, is_scalar = self.process_value(value)
+        self.autoscale_None(result)
+
+        if self.vmin > self.vmax:
+            raise ValueError("vmin must be less than or equal to vmax")
+        elif self.vmin == self.vmax:
+            return np.zeros_like(result)
+        elif self.vmin <= 0:
+            raise ValueError("Range cannot include negative or zero values in "
+                           "log scale")
+
+        if clip:
+            mask = np.ma.getmask(result)
+            result = np.ma.array(np.clip(result.filled(self.vmax),
+                                       self.vmin, self.vmax),
+                               mask=mask)
+
+        # Convert to log space
+        log_vmin = np.log10(self.vmin)
+        log_vmax = np.log10(self.vmax)
+        log_val = np.log10(result)
+
+        # Normalize to [0, 1]
+        result = (log_val - log_vmin) / (log_vmax - log_vmin)
+        result = np.ma.masked_invalid(result, copy=False)
+
+        if is_scalar:
+            result = result[0]
+        return result
+
 
 @_make_norm_from_scale(
     scale.SymmetricalLogScale,
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..87765171ab
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,38 @@
+import numpy as np
+import matplotlib.pyplot as plt
+from matplotlib.colors import LogNorm
+
+# Test case 1: Very large values
+data1 = np.full((5, 5), -1, dtype=np.float64)
+data1[0:2, :] = 1E20
+
+# Test case 2: Mix of large and small values
+data2 = np.ones((5, 5), dtype=np.float64) * 100
+data2[0:2, :] = 1E10
+data2[2:3, :] = 1E5
+
+# Test case 3: Values close to vmin
+data3 = np.ones((5, 5), dtype=np.float64) * 100
+data3[0:2, :] = 101
+data3[2:3, :] = 150
+
+fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(15, 5))
+
+im1 = ax1.imshow(data1, norm=LogNorm(vmin=100, vmax=data1.max()),
+                 interpolation='nearest', cmap='viridis')
+ax1.set_title('Very Large Values')
+
+im2 = ax2.imshow(data2, norm=LogNorm(vmin=100, vmax=data2.max()),
+                 interpolation='nearest', cmap='viridis')
+ax2.set_title('Mix of Values')
+
+im3 = ax3.imshow(data3, norm=LogNorm(vmin=100, vmax=data3.max()),
+                 interpolation='nearest', cmap='viridis')
+ax3.set_title('Near vmin Values')
+
+plt.colorbar(im1, ax=ax1)
+plt.colorbar(im2, ax=ax2)
+plt.colorbar(im3, ax=ax3)
+
+plt.tight_layout()
+plt.show()
\ No newline at end of file
