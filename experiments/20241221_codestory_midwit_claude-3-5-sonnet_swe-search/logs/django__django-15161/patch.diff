diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 8642e1f151..27d182afd3 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -651,6 +651,7 @@ class OuterRef(F):
         return self
 
 
+@deconstructible(path='django.db.models.Func')
 class Func(SQLiteNumericMixin, Expression):
     """An SQL function call."""
     function = None
@@ -731,6 +732,7 @@ class Func(SQLiteNumericMixin, Expression):
         return copy
 
 
+@deconstructible(path='django.db.models.Value')
 class Value(SQLiteNumericMixin, Expression):
     """Represent a wrapped value as a node within an expression."""
     # Provide a default value for `for_save` in order to allow unresolved
@@ -912,6 +914,7 @@ class Ref(Expression):
         return [self]
 
 
+@deconstructible(path='django.db.models.ExpressionList')
 class ExpressionList(Func):
     """
     An expression containing multiple expressions. Can be used to provide a
@@ -953,6 +956,7 @@ class OrderByList(Func):
         return super().as_sql(*args, **kwargs)
 
 
+@deconstructible(path='django.db.models.ExpressionWrapper')
 class ExpressionWrapper(SQLiteNumericMixin, Expression):
     """
     An expression that can wrap another expression so that it can provide
@@ -985,6 +989,7 @@ class ExpressionWrapper(SQLiteNumericMixin, Expression):
         return "{}({})".format(self.__class__.__name__, self.expression)
 
 
+@deconstructible(path='django.db.models.When')
 class When(Expression):
     template = 'WHEN %(condition)s THEN %(result)s'
     # This isn't a complete conditional expression, must be used in Case().
@@ -1052,6 +1057,7 @@ class When(Expression):
         return cols
 
 
+@deconstructible(path='django.db.models.Case')
 class Case(SQLiteNumericMixin, Expression):
     """
     An SQL searched CASE expression:
@@ -1133,6 +1139,7 @@ class Case(SQLiteNumericMixin, Expression):
         return super().get_group_by_cols(alias)
 
 
+@deconstructible(path='django.db.models.Subquery')
 class Subquery(BaseExpression, Combinable):
     """
     An explicit subquery. It may contain OuterRef() references to the outer
@@ -1190,6 +1197,7 @@ class Subquery(BaseExpression, Combinable):
         return self.query.get_group_by_cols()
 
 
+@deconstructible(path='django.db.models.Exists')
 class Exists(Subquery):
     template = 'EXISTS(%(subquery)s)'
     output_field = fields.BooleanField()
@@ -1225,6 +1233,7 @@ class Exists(Subquery):
         return sql, params
 
 
+@deconstructible(path='django.db.models.OrderBy')
 class OrderBy(Expression):
     template = '%(expression)s %(ordering)s'
     conditional = False
@@ -1307,6 +1316,7 @@ class OrderBy(Expression):
         self.descending = True
 
 
+@deconstructible(path='django.db.models.Window')
 class Window(SQLiteNumericMixin, Expression):
     template = '%(expression)s OVER (%(window)s)'
     # Although the main expression may either be an aggregate or an
@@ -1412,6 +1422,7 @@ class Window(SQLiteNumericMixin, Expression):
         return []
 
 
+@deconstructible(path='django.db.models.WindowFrame')
 class WindowFrame(Expression):
     """
     Model the frame clause in window expressions. There are two types of frame
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..3581c53007
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,65 @@
+from django.db.models import (
+    F, Value, When, Case, Q, Exists, Func,
+    ExpressionList, ExpressionWrapper, OrderBy, Subquery, Window, WindowFrame,
+    Avg
+)
+from django.db.models.expressions import (
+    F as F2, Value as Value2, When as When2, Case as Case2,
+    Exists as Exists2, Func as Func2,
+    ExpressionList as ExpressionList2, ExpressionWrapper as ExpressionWrapper2,
+    OrderBy as OrderBy2, Subquery as Subquery2, Window as Window2, WindowFrame as WindowFrame2
+)
+from django.db.models import QuerySet
+from django.db.models.fields import IntegerField
+
+# Create some expressions
+f1 = F('name')
+f2 = F2('name')
+v1 = Value('test')
+v2 = Value2('test')
+w1 = When(Q(age__gt=18), then=Value('adult'))
+w2 = When2(Q(age__gt=18), then=Value2('adult'))
+c1 = Case(When(Q(age__gt=18), then=Value('adult')), default=Value('child'))
+c2 = Case2(When2(Q(age__gt=18), then=Value2('adult')), default=Value2('child'))
+e1 = Exists(QuerySet())
+e2 = Exists2(QuerySet())
+func1 = Func(F('age'))
+func2 = Func2(F2('age'))
+el1 = ExpressionList(F('age'), F('name'))
+el2 = ExpressionList2(F2('age'), F2('name'))
+ew1 = ExpressionWrapper(F('age'), output_field=IntegerField())
+ew2 = ExpressionWrapper2(F2('age'), output_field=IntegerField())
+ob1 = OrderBy(F('age'))
+ob2 = OrderBy2(F2('age'))
+sq1 = Subquery(QuerySet())
+sq2 = Subquery2(QuerySet())
+win1 = Window(expression=Avg('age'))
+win2 = Window2(expression=Avg('age'))
+wf1 = WindowFrame()
+wf2 = WindowFrame2()
+
+# Print their deconstruct paths
+print("F() deconstruct path:", f1.deconstruct()[0])
+print("F2() deconstruct path:", f2.deconstruct()[0])
+print("Value() deconstruct path:", v1.deconstruct()[0])
+print("Value2() deconstruct path:", v2.deconstruct()[0])
+print("When() deconstruct path:", w1.deconstruct()[0])
+print("When2() deconstruct path:", w2.deconstruct()[0])
+print("Case() deconstruct path:", c1.deconstruct()[0])
+print("Case2() deconstruct path:", c2.deconstruct()[0])
+print("Exists() deconstruct path:", e1.deconstruct()[0])
+print("Exists2() deconstruct path:", e2.deconstruct()[0])
+print("Func() deconstruct path:", func1.deconstruct()[0])
+print("Func2() deconstruct path:", func2.deconstruct()[0])
+print("ExpressionList() deconstruct path:", el1.deconstruct()[0])
+print("ExpressionList2() deconstruct path:", el2.deconstruct()[0])
+print("ExpressionWrapper() deconstruct path:", ew1.deconstruct()[0])
+print("ExpressionWrapper2() deconstruct path:", ew2.deconstruct()[0])
+print("OrderBy() deconstruct path:", ob1.deconstruct()[0])
+print("OrderBy2() deconstruct path:", ob2.deconstruct()[0])
+print("Subquery() deconstruct path:", sq1.deconstruct()[0])
+print("Subquery2() deconstruct path:", sq2.deconstruct()[0])
+print("Window() deconstruct path:", win1.deconstruct()[0])
+print("Window2() deconstruct path:", win2.deconstruct()[0])
+print("WindowFrame() deconstruct path:", wf1.deconstruct()[0])
+print("WindowFrame2() deconstruct path:", wf2.deconstruct()[0])
\ No newline at end of file
