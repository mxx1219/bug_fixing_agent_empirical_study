diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py
index b3cfc6723c..f6c4b7fc2f 100644
--- a/django/contrib/auth/forms.py
+++ b/django/contrib/auth/forms.py
@@ -163,7 +163,7 @@ class UserChangeForm(forms.ModelForm):
         super().__init__(*args, **kwargs)
         password = self.fields.get("password")
         if password:
-            password.help_text = password.help_text.format("../password/")
+            password.help_text = password.help_text.format(f"../../{self.instance.pk}/password/")
         user_permissions = self.fields.get("user_permissions")
         if user_permissions:
             user_permissions.queryset = user_permissions.queryset.select_related(
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..27a2c3fa7e
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,53 @@
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        SECRET_KEY='dummy-key-for-tests',
+    )
+    django.setup()
+
+from django.core.management import call_command
+from django.contrib.auth.models import User
+from django.contrib.auth.forms import UserChangeForm
+from django.test import TestCase
+
+# Create database tables
+call_command('migrate')
+
+class UserChangeFormTest(TestCase):
+    def setUp(self):
+        self.user = User.objects.create_user(
+            username='testuser',
+            password='testpass123',
+            email='test@example.com'
+        )
+
+    def test_password_change_link_with_uuid(self):
+        # Simulate accessing the user via UUID by adding _to_field=uuid to request
+        form = UserChangeForm(instance=self.user)
+        password_field = form.fields['password']
+        
+        # The new implementation uses "../../{pk}/password/"
+        expected_link = f"../../{self.user.pk}/password/"
+        assert expected_link in password_field.help_text
+        print(f"Link in help_text: {password_field.help_text}")
+        print(f"Expected link: {expected_link}")
+        print("The link now correctly includes the user's primary key")
+
+if __name__ == '__main__':
+    test = UserChangeFormTest()
+    test.setUp()
+    test.test_password_change_link_with_uuid()
\ No newline at end of file
