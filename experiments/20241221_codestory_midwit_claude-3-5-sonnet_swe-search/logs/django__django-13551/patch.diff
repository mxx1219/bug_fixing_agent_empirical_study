diff --git a/django/contrib/auth/tokens.py b/django/contrib/auth/tokens.py
index 93e2d71af2..013850dd98 100644
--- a/django/contrib/auth/tokens.py
+++ b/django/contrib/auth/tokens.py
@@ -94,7 +94,9 @@ class PasswordResetTokenGenerator:
         # Truncate microseconds so that tokens are consistent even if the
         # database doesn't support microseconds.
         login_timestamp = '' if user.last_login is None else user.last_login.replace(microsecond=0, tzinfo=None)
-        return str(user.pk) + user.password + str(login_timestamp) + str(timestamp)
+        # Include the user's email in the hash value, defaulting to empty string if not present
+        email = getattr(user, 'email', '') or ''
+        return str(user.pk) + user.password + str(login_timestamp) + str(timestamp) + str(email)
 
     def _num_seconds(self, dt):
         return int((dt - datetime(2001, 1, 1)).total_seconds())
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..c2bbbdfd92
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,52 @@
+from django.conf import settings
+
+# Configure Django settings
+settings.configure(
+    SECRET_KEY='dummy-key-for-testing',
+    DEFAULT_HASHING_ALGORITHM='sha256',
+    PASSWORD_RESET_TIMEOUT=60*60*24*3,  # 3 days
+)
+
+from django.contrib.auth.tokens import default_token_generator
+
+class MockUser:
+    def __init__(self, pk, email, password, last_login=None, has_email_field=True):
+        self.pk = pk
+        self.password = password
+        self.last_login = last_login
+        if has_email_field:
+            self.email = email
+
+def test_email_change():
+    # Test 1: Normal email change
+    user = MockUser(pk=1, email='foo@example.com', password='oldpassword')
+    token = default_token_generator.make_token(user)
+    print("\nTest 1: Normal email change")
+    print(f"Token valid before email change: {default_token_generator.check_token(user, token)}")
+    user.email = 'bar@example.com'
+    print(f"Token valid after email change (should be False): {default_token_generator.check_token(user, token)}")
+
+    # Test 2: User with no email field
+    user = MockUser(pk=2, email=None, password='oldpassword', has_email_field=False)
+    token = default_token_generator.make_token(user)
+    print("\nTest 2: User with no email field")
+    print(f"Token valid for user without email field: {default_token_generator.check_token(user, token)}")
+
+    # Test 3: User with None email
+    user = MockUser(pk=3, email=None, password='oldpassword')
+    token = default_token_generator.make_token(user)
+    print("\nTest 3: User with None email")
+    print(f"Token valid for user with None email: {default_token_generator.check_token(user, token)}")
+    user.email = 'new@example.com'
+    print(f"Token valid after setting email (should be False): {default_token_generator.check_token(user, token)}")
+
+    # Test 4: User with empty string email
+    user = MockUser(pk=4, email='', password='oldpassword')
+    token = default_token_generator.make_token(user)
+    print("\nTest 4: User with empty string email")
+    print(f"Token valid for user with empty email: {default_token_generator.check_token(user, token)}")
+    user.email = 'new@example.com'
+    print(f"Token valid after setting email (should be False): {default_token_generator.check_token(user, token)}")
+
+if __name__ == '__main__':
+    test_email_change()
\ No newline at end of file
