diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py
index 916478d075..d0ca904112 100644
--- a/django/db/models/lookups.py
+++ b/django/db/models/lookups.py
@@ -548,8 +548,8 @@ class YearLookup(Lookup):
 
     def as_sql(self, compiler, connection):
         # Avoid the extract operation if the rhs is a direct value to allow
-        # indexes to be used.
-        if self.rhs_is_direct_value():
+        # indexes to be used, but only for regular year lookups (not iso_year)
+        if self.rhs_is_direct_value() and not getattr(self.lhs, 'lookup_name', None) == 'iso_year':
             # Skip the extract part by directly using the originating field,
             # that is self.lhs.lhs.
             lhs_sql, params = self.process_lhs(compiler, connection, self.lhs.lhs)
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..11f00daf1f
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,67 @@
+from django.db import models
+from django.db.models.functions import ExtractIsoYear
+from django.test.utils import setup_test_environment
+from django.conf import settings
+import os
+import django
+
+# Configure Django settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+)
+
+django.setup()
+setup_test_environment()
+
+# Create test model
+class DTModel(models.Model):
+    start_date = models.DateTimeField()
+
+    class Meta:
+        app_label = 'reproduce_error'
+
+# Create the table
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(DTModel)
+
+# Create test data - dates around new year which have different ISO year vs calendar year
+from django.utils import timezone
+from datetime import datetime
+
+# 2020-01-01 is in ISO year 2020
+dt1 = DTModel.objects.create(start_date=datetime(2020, 1, 1))
+# 2019-12-31 is in ISO year 2020
+dt2 = DTModel.objects.create(start_date=datetime(2019, 12, 31))
+# 2020-12-31 is in ISO year 2020
+dt3 = DTModel.objects.create(start_date=datetime(2020, 12, 31))
+
+# Test annotation
+qs = DTModel.objects.annotate(extracted=ExtractIsoYear('start_date')).only('id')
+print("\nAnnotation Query:")
+print(qs.query)
+
+# Test filter with annotation
+qs_filtered = qs.filter(extracted=2020)
+print("\nFilter with annotation Query:")
+print(qs_filtered.query)
+
+# Test direct lookup
+qs_lookup = DTModel.objects.filter(start_date__iso_year=2020).only('id')
+print("\nDirect lookup Query:")
+print(qs_lookup.query)
+
+# Print results
+print("\nResults:")
+print("Annotation results:", [(obj.id, obj.extracted) for obj in qs])
+print("Filter with annotation results:", [obj.id for obj in qs_filtered])
+print("Direct lookup results:", [obj.id for obj in qs_lookup])
\ No newline at end of file
