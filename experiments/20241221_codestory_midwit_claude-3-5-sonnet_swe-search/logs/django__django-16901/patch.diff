diff --git a/django/db/models/sql/where.py b/django/db/models/sql/where.py
index aaab1730b7..375b20c032 100644
--- a/django/db/models/sql/where.py
+++ b/django/db/models/sql/where.py
@@ -129,13 +129,14 @@ class WhereNode(tree.Node):
             # Convert if the database doesn't support XOR:
             #   a XOR b XOR c XOR ...
             # to:
-            #   (a OR b OR c OR ...) AND (a + b + c + ...) == 1
+            #   (a OR b OR c OR ...) AND (a + b + c + ...) % 2 == 1
             lhs = self.__class__(self.children, OR)
             rhs_sum = reduce(
                 operator.add,
                 (Case(When(c, then=1), default=0) for c in self.children),
             )
-            rhs = Exact(1, rhs_sum)
+            # Use modulo 2 to check for odd number of true conditions
+            rhs = Exact(1, rhs_sum % 2)
             return self.__class__([lhs, rhs], AND, self.negated).as_sql(
                 compiler, connection
             )
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..574d17d32e
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,65 @@
+from django.db import models
+from django.db.models import Q
+from django.test import TestCase
+
+# Model will be defined after Django setup
+Client = None
+
+class XORTestCase(TestCase):
+    @classmethod
+    def setUpClass(cls):
+        super().setUpClass()
+        Client.objects.create(id=37, name="Test Client")
+
+    def test_xor_behavior(self):
+        print("\nTesting XOR behavior:")
+        print(f"Q(id=37) count: {Client.objects.filter(Q(id=37)).count()}")  # Should be 1
+        print(f"Q(id=37) ^ Q(id=37) count: {Client.objects.filter(Q(id=37) ^ Q(id=37)).count()}")  # Should be 0
+        print(f"Q(id=37) ^ Q(id=37) ^ Q(id=37) count: {Client.objects.filter(Q(id=37) ^ Q(id=37) ^ Q(id=37)).count()}")  # Should be 1
+        print(f"Q(id=37) ^ Q(id=37) ^ Q(id=37) ^ Q(id=37) count: {Client.objects.filter(Q(id=37) ^ Q(id=37) ^ Q(id=37) ^ Q(id=37)).count()}")  # Should be 0
+        print(f"Q(id=37) ^ Q(id=37) ^ Q(id=37) ^ Q(id=37) ^ Q(id=37) count: {Client.objects.filter(Q(id=37) ^ Q(id=37) ^ Q(id=37) ^ Q(id=37) ^ Q(id=37)).count()}")  # Should be 1
+
+if __name__ == '__main__':
+    import django
+    from django.conf import settings
+    if not settings.configured:
+        settings.configure(
+            DEBUG=True,
+            DATABASES={
+                'default': {
+                    'ENGINE': 'django.db.backends.sqlite3',
+                    'NAME': ':memory:',
+                }
+            },
+            INSTALLED_APPS=[
+                'django.contrib.contenttypes',
+                'django.contrib.auth',
+                '__main__',
+            ],
+            USE_TZ=False,
+        )
+    django.setup()
+    
+    # Define the model after Django setup
+    class Client(models.Model):
+        name = models.CharField(max_length=100)
+    
+    # Create the test database
+    from django.core.management import call_command
+    import django.db
+    django.db.connection.creation.create_test_db(verbosity=0)
+    
+    # Create the tables
+    with django.db.connection.schema_editor() as schema_editor:
+        schema_editor.create_model(Client)
+    
+    # Create test data
+    Client.objects.create(id=37, name="Test Client")
+    
+    # Run the tests
+    print("\nTesting XOR behavior:")
+    print(f"Q(id=37) count: {Client.objects.filter(Q(id=37)).count()}")  # Should be 1
+    print(f"Q(id=37) ^ Q(id=37) count: {Client.objects.filter(Q(id=37) ^ Q(id=37)).count()}")  # Should be 0
+    print(f"Q(id=37) ^ Q(id=37) ^ Q(id=37) count: {Client.objects.filter(Q(id=37) ^ Q(id=37) ^ Q(id=37)).count()}")  # Should be 1
+    print(f"Q(id=37) ^ Q(id=37) ^ Q(id=37) ^ Q(id=37) count: {Client.objects.filter(Q(id=37) ^ Q(id=37) ^ Q(id=37) ^ Q(id=37)).count()}")  # Should be 0
+    print(f"Q(id=37) ^ Q(id=37) ^ Q(id=37) ^ Q(id=37) ^ Q(id=37) count: {Client.objects.filter(Q(id=37) ^ Q(id=37) ^ Q(id=37) ^ Q(id=37) ^ Q(id=37)).count()}")  # Should be 1
\ No newline at end of file
