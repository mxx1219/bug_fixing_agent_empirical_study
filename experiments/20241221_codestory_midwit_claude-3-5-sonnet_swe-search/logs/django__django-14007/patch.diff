diff --git a/django/db/models/base.py b/django/db/models/base.py
index 55b1691166..5654d9c5b5 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -872,6 +872,8 @@ class Model(metaclass=ModelBase):
             results = self._do_insert(cls._base_manager, using, fields, returning_fields, raw)
             if results:
                 for value, field in zip(results[0], returning_fields):
+                    if hasattr(field, 'from_db_value'):
+                        value = field.from_db_value(value, None, connection)
                     setattr(self, field.attname, value)
         return updated
 
diff --git a/django/db/models/query.py b/django/db/models/query.py
index 387deca527..ce391e411b 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -505,6 +505,8 @@ class QuerySet:
                 for obj_with_pk, results in zip(objs_with_pk, returned_columns):
                     for result, field in zip(results, opts.db_returning_fields):
                         if field != opts.pk:
+                            if hasattr(field, 'from_db_value'):
+                                result = field.from_db_value(result, None, connection)
                             setattr(obj_with_pk, field.attname, result)
                 for obj_with_pk in objs_with_pk:
                     obj_with_pk._state.adding = False
@@ -518,6 +520,8 @@ class QuerySet:
                     assert len(returned_columns) == len(objs_without_pk)
                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
                     for result, field in zip(results, opts.db_returning_fields):
+                        if hasattr(field, 'from_db_value'):
+                            result = field.from_db_value(result, None, connection)
                         setattr(obj_without_pk, field.attname, result)
                     obj_without_pk._state.adding = False
                     obj_without_pk._state.db = self.db
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..8b5319e003
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,93 @@
+import os
+import sys
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+    )
+
+import django
+django.setup()
+
+from django.db import models, connection
+from django.test.utils import setup_test_environment, teardown_test_environment
+
+# Create a wrapper class for integers
+class MyIntWrapper:
+    def __init__(self, value):
+        self.value = value
+    
+    def __str__(self):
+        return f"<MyIntWrapper: {self.value}>"
+    
+    def __repr__(self):
+        return self.__str__()
+    
+    def __int__(self):
+        return self.value
+
+# Create custom field
+class MyAutoField(models.BigAutoField):
+    def from_db_value(self, value, expression, connection):
+        if value is None:
+            return None
+        return MyIntWrapper(value)
+    
+    def get_prep_value(self, value):
+        if value is None:
+            return None
+        return int(value)
+
+# Create model using the field
+class AutoModel(models.Model):
+    id = MyAutoField(primary_key=True)
+    
+    class Meta:
+        app_label = 'reproduce_error'
+
+if __name__ == '__main__':
+    # Setup test environment
+    setup_test_environment()
+    
+    # Create the test database
+    connection.creation.create_test_db(verbosity=0)
+    
+    # Create the tables
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(AutoModel)
+    
+    # Test regular query
+    instance = AutoModel.objects.create()
+    print("After create():")
+    print(f"Type of id: {type(instance.id)}")
+    print(f"Value of id: {instance.id}")
+    print()
+    
+    # Test querying
+    queried_instance = AutoModel.objects.first()
+    print("After querying with first():")
+    print(f"Type of id: {type(queried_instance.id)}")
+    print(f"Value of id: {queried_instance.id}")
+    print()
+    
+    # Test bulk create
+    models_to_create = [AutoModel()]
+    created_models = AutoModel.objects.bulk_create(models_to_create)
+    print("After bulk_create():")
+    print(f"Type of id: {type(created_models[0].id)}")
+    print(f"Value of id: {created_models[0].id}")
+    
+    # Clean up
+    connection.creation.destroy_test_db(verbosity=0)
+    teardown_test_environment()
\ No newline at end of file
