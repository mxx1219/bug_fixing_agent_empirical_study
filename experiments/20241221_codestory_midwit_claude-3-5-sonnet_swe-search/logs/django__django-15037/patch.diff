diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py
index f9b4bfb477..b85c4d244d 100644
--- a/django/core/management/commands/inspectdb.py
+++ b/django/core/management/commands/inspectdb.py
@@ -78,6 +78,15 @@ class Command(BaseCommand):
                         constraints = connection.introspection.get_constraints(cursor, table_name)
                     except NotImplementedError:
                         constraints = {}
+                    
+                    # Enhance relations with foreign key information from constraints
+                    for constraint in constraints.values():
+                        if constraint.get('foreign_key'):
+                            target_table, target_field = constraint['foreign_key']
+                            for column in constraint['columns']:
+                                if column in relations:
+                                    # Add the target field to the relation info
+                                    relations[column] = (relations[column][0], target_table, target_field)
                     primary_key_column = connection.introspection.get_primary_key_column(cursor, table_name)
                     unique_columns = [
                         c['columns'][0] for c in constraints.values()
@@ -128,6 +137,12 @@ class Command(BaseCommand):
                             field_type = '%s(%s' % (rel_type, rel_to)
                         else:
                             field_type = "%s('%s'" % (rel_type, rel_to)
+                        
+                        # Add to_field if the foreign key references a field other than the primary key
+                        if len(relations[column_name]) > 2:
+                            ref_field = relations[column_name][2]
+                            if ref_field != 'id':  # Only add to_field if not referencing 'id'
+                                extra_params['to_field'] = ref_field
                     else:
                         # Calling `get_field_type` to get the field type string and any
                         # additional parameters and notes.
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..a294f19cd7
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,54 @@
+import sqlite3
+import os
+import sys
+from django.core.management import execute_from_command_line
+
+# Create a test database
+db_path = "test_db.sqlite3"
+if os.path.exists(db_path):
+    os.remove(db_path)
+
+conn = sqlite3.connect(db_path)
+cursor = conn.cursor()
+
+# Create the test tables
+cursor.execute("""
+CREATE TABLE foo (
+    id INTEGER PRIMARY KEY AUTOINCREMENT,
+    other_id INTEGER UNIQUE
+)
+""")
+
+cursor.execute("""
+CREATE TABLE bar (
+    id INTEGER PRIMARY KEY AUTOINCREMENT,
+    other_id INTEGER,
+    FOREIGN KEY(other_id) REFERENCES foo(other_id)
+)
+""")
+
+conn.commit()
+conn.close()
+
+# Set up minimal Django settings
+import django
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': db_path,
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+    )
+    django.setup()
+
+# Run inspectdb
+sys.argv = ['manage.py', 'inspectdb']
+execute_from_command_line(sys.argv)
\ No newline at end of file
