diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index d17232e4ec..273b768cc3 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -945,6 +945,12 @@ class RenameIndex(IndexOperation):
                 from_model, column_names=columns, index=True
             )
             if len(matching_index_name) != 1:
+                # If we can't find the index, it might have been renamed already
+                # Check if the target index name exists
+                if schema_editor._constraint_names(
+                    from_model, [self.new_name], index=True
+                ):
+                    return
                 raise ValueError(
                     "Found wrong number (%s) of indexes for %s(%s)."
                     % (
@@ -963,26 +969,80 @@ class RenameIndex(IndexOperation):
 
         to_model_state = to_state.models[app_label, self.model_name_lower]
         new_index = to_model_state.get_index_by_name(self.new_name)
-        schema_editor.rename_index(model, old_index, new_index)
+
+        # Check if the target index already exists
+        if schema_editor._constraint_names(
+            model, [new_index.name], index=True
+        ):
+            # If the target index exists and it's the same as what we want, we're done
+            if old_index.name == new_index.name:
+                return
+            # Otherwise, we need to drop the old index first
+            schema_editor.remove_index(model, old_index)
+        else:
+            # Normal case - just rename the index
+            schema_editor.rename_index(model, old_index, new_index)
 
     def database_backwards(self, app_label, schema_editor, from_state, to_state):
-        if self.old_fields:
-            # Backward operation with unnamed index is a no-op.
+        model = to_state.apps.get_model(app_label, self.model_name)
+        if not self.allow_migrate_model(schema_editor.connection.alias, model):
             return
 
-        self.new_name_lower, self.old_name_lower = (
-            self.old_name_lower,
-            self.new_name_lower,
-        )
-        self.new_name, self.old_name = self.old_name, self.new_name
+        if self.old_fields:
+            # When moving backward with old_fields, we need to restore the auto-generated name
+            # First, get the current index with the new name
+            from_model = from_state.apps.get_model(app_label, self.model_name)
+            matching_index_name = schema_editor._constraint_names(
+                from_model, [self.new_name], index=True
+            )
+            if not matching_index_name:
+                # Index doesn't exist with new name, nothing to do
+                return
+            old_index = models.Index(
+                fields=self.old_fields,
+                name=matching_index_name[0],
+            )
 
-        self.database_forwards(app_label, schema_editor, from_state, to_state)
+            # Get the auto-generated name for these fields
+            to_model = to_state.apps.get_model(app_label, self.model_name)
+            columns = [
+                to_model._meta.get_field(field).column for field in self.old_fields
+            ]
+            auto_name = schema_editor._index_name(
+                to_model._meta.db_table, columns, suffix="_idx"
+            )
+            new_index = models.Index(
+                fields=self.old_fields,
+                name=auto_name,
+            )
 
-        self.new_name_lower, self.old_name_lower = (
-            self.old_name_lower,
-            self.new_name_lower,
-        )
-        self.new_name, self.old_name = self.old_name, self.new_name
+            # Check if the target auto-generated name already exists
+            if schema_editor._constraint_names(
+                to_model, [auto_name], index=True
+            ):
+                # If it exists and it's the same index, we're done
+                if old_index.name == auto_name:
+                    return
+                # Otherwise, we need to drop the old index
+                schema_editor.remove_index(from_model, old_index)
+            else:
+                # Rename to the auto-generated name
+                schema_editor.rename_index(to_model, old_index, new_index)
+        else:
+            # For named indexes, just swap the names
+            self.new_name_lower, self.old_name_lower = (
+                self.old_name_lower,
+                self.new_name_lower,
+            )
+            self.new_name, self.old_name = self.old_name, self.new_name
+
+            self.database_forwards(app_label, schema_editor, from_state, to_state)
+
+            self.new_name_lower, self.old_name_lower = (
+                self.old_name_lower,
+                self.new_name_lower,
+            )
+            self.new_name, self.old_name = self.old_name, self.new_name
 
     def describe(self):
         if self.old_name:
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..2adbf2cb8d
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,81 @@
+from django.conf import settings
+from django.db import connection, migrations, models
+from django.db.migrations.state import ProjectState
+from django.test.utils import CaptureQueriesContext
+
+def setup_test_environment():
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+    )
+    import django
+    django.setup()
+
+def reproduce_error():
+    # Create a test model state
+    project_state = ProjectState()
+    project_state.add_model(
+        migrations.state.ModelState(
+            "test_app",
+            "Pony",
+            [
+                ("id", models.AutoField(primary_key=True)),
+                ("name", models.CharField(max_length=100)),
+                ("test", models.CharField(max_length=100)),
+            ],
+            {
+                "unique_together": {("name", "test")},
+            },
+        )
+    )
+
+    # Create the table first
+    model = project_state.apps.get_model("test_app", "Pony")
+    with connection.schema_editor() as editor:
+        editor.create_model(model)
+
+    # Create a new state with renamed index
+    new_state = project_state.clone()
+    new_state.models[("test_app", "pony")].options["indexes"] = [
+        models.Index(fields=["name", "test"], name="new_pony_test_idx")
+    ]
+    
+    operation = migrations.operations.RenameIndex(
+        model_name="Pony",
+        new_name="new_pony_test_idx",
+        old_fields=("name", "test"),
+    )
+
+    try:
+        # Apply forward operation
+        with connection.schema_editor() as editor:
+            operation.database_forwards("test_app", editor, project_state, new_state)
+        print("Forward operation succeeded")
+
+        # Apply backward operation
+        with connection.schema_editor() as editor:
+            operation.database_backwards("test_app", editor, new_state, project_state)
+        print("Backward operation succeeded")
+
+        # Re-apply forward operation - this should not crash
+        with connection.schema_editor() as editor:
+            operation.database_forwards("test_app", editor, project_state, new_state)
+        print("Re-applying forward operation succeeded")
+
+    finally:
+        # Clean up - drop the table
+        with connection.schema_editor() as editor:
+            editor.delete_model(model)
+
+if __name__ == "__main__":
+    setup_test_environment()
+    reproduce_error()
\ No newline at end of file
