diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py
index d88cda6e20..d46528b73c 100644
--- a/django/db/migrations/serializer.py
+++ b/django/db/migrations/serializer.py
@@ -168,7 +168,15 @@ class FunctionTypeSerializer(BaseSerializer):
         ):
             klass = self.value.__self__
             module = klass.__module__
-            return "%s.%s.%s" % (module, klass.__name__, self.value.__name__), {
+            
+            # Get the full path for nested classes
+            if '.' in klass.__qualname__:
+                # Use qualname which includes parent class names for nested classes
+                class_path = klass.__qualname__
+            else:
+                class_path = klass.__name__
+                
+            return "%s.%s.%s" % (module, class_path, self.value.__name__), {
                 "import %s" % module
             }
         # Further error checking
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..8270cd4217
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,44 @@
+from django.db.migrations.serializer import serializer_factory
+
+# Test case 1: Regular class method (non-nested)
+class SimpleClass:
+    @classmethod
+    def default(cls):
+        return "default"
+
+# Test case 2: Nested class method (original case)
+class Profile:
+    class Capability:
+        BASIC = "BASIC"
+        
+        @classmethod
+        def default(cls):
+            return [cls.BASIC]
+
+# Test case 3: Multiple levels of nesting
+class Outer:
+    class Middle:
+        class Inner:
+            @classmethod
+            def default(cls):
+                return "inner"
+
+# Test case 4: Special characters in names
+class Data_Model:
+    class Complex_Type:
+        @classmethod
+        def default_value_(cls):
+            return "complex"
+
+def test_serialization(cls, method_name, description):
+    print(f"\nTesting {description}:")
+    method = getattr(cls, method_name)
+    result, imports = serializer_factory(method).serialize()
+    print(f"Result: {result}")
+    print(f"Imports: {imports}")
+
+# Run all test cases
+test_serialization(SimpleClass, "default", "regular class method")
+test_serialization(Profile.Capability, "default", "nested class method")
+test_serialization(Outer.Middle.Inner, "default", "deeply nested class method")
+test_serialization(Data_Model.Complex_Type, "default_value_", "method with special characters")
\ No newline at end of file
