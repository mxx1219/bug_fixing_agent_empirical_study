diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py
index 3a462f1c4c..d4415a4f65 100644
--- a/django/db/models/deletion.py
+++ b/django/db/models/deletion.py
@@ -201,11 +201,17 @@ class Collector:
             concrete_model = model._meta.concrete_model
             for ptr in concrete_model._meta.parents.values():
                 if ptr:
-                    parent_objs = [getattr(obj, ptr.name) for obj in new_objs]
-                    self.collect(parent_objs, source=model,
-                                 source_attr=ptr.remote_field.related_name,
-                                 collect_related=False,
-                                 reverse_dependency=True)
+                    # Only load parent fields needed for deletion
+                    parent_objs = []
+                    for obj in new_objs:
+                        parent = getattr(obj, ptr.name)
+                        if parent:
+                            parent_objs.append(parent)
+                    if parent_objs:
+                        self.collect(parent_objs, source=model,
+                                    source_attr=ptr.remote_field.related_name,
+                                    collect_related=False,
+                                    reverse_dependency=True)
         if collect_related:
             parents = model._meta.parents
             for related in get_candidate_relations_to_delete(model._meta):
@@ -231,10 +237,13 @@ class Collector:
     def related_objects(self, related, objs):
         """
         Get a QuerySet of objects related to `objs` via the relation `related`.
+        Only fetch the fields required for deletion (primary key and foreign keys).
         """
-        return related.related_model._base_manager.using(self.using).filter(
+        model = related.related_model
+        fields = [f for f in model._meta.concrete_fields if f.primary_key or (f.is_relation and f.foreign_key)]
+        return model._base_manager.using(self.using).filter(
             **{"%s__in" % related.field.name: objs}
-        )
+        ).only(*[f.name for f in fields])
 
     def instances_with_model(self):
         for model, instances in self.data.items():
diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index f4b1faabc2..d56e91c44e 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -1327,6 +1327,13 @@ class SQLInsertCompiler(SQLCompiler):
 
 
 class SQLDeleteCompiler(SQLCompiler):
+    def get_required_fields(self):
+        """
+        Get only the fields required for deletion (primary key and foreign keys).
+        """
+        opts = self.query.get_meta()
+        return [f for f in opts.concrete_fields if f.primary_key or (f.is_relation and f.foreign_key)]
+
     def as_sql(self):
         """
         Create the SQL for this query. Return the SQL string and list of
@@ -1341,6 +1348,14 @@ class SQLDeleteCompiler(SQLCompiler):
             result.append('WHERE %s' % where)
         return ' '.join(result), tuple(params)
 
+    def execute_sql(self, result_type=None):
+        """
+        Execute the specified delete. Return the number of rows affected.
+        """
+        # Set up the query to only select required fields
+        self.query.select = [f.get_col(self.query.get_initial_alias()) for f in self.get_required_fields()]
+        return super().execute_sql(result_type)
+
 
 class SQLUpdateCompiler(SQLCompiler):
     def as_sql(self):
diff --git a/tests/test_deletion_optimization.py b/tests/test_deletion_optimization.py
new file mode 100644
index 0000000000..2a02eea9cb
--- /dev/null
+++ b/tests/test_deletion_optimization.py
@@ -0,0 +1,43 @@
+from django.test import TestCase
+from django.db import models
+from django.db.models.deletion import Collector
+from django.db.models.sql.compiler import SQLDeleteCompiler
+from django.db import connection
+
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    description = models.TextField()  # Non-essential field
+    class Meta:
+        app_label = 'test_app'
+
+class RelatedModel(models.Model):
+    test = models.ForeignKey(TestModel, on_delete=models.CASCADE)
+    data = models.TextField()  # Non-essential field with potential unicode issues
+    class Meta:
+        app_label = 'test_app'
+
+class DeletionOptimizationTest(TestCase):
+    def test_only_required_fields_selected(self):
+        # Create test data
+        test_obj = TestModel.objects.create(name='test', description='test description')
+        RelatedModel.objects.create(test=test_obj, data='\udcxx')  # Invalid unicode data
+
+        # Get collector and verify field selection
+        collector = Collector(using='default')
+        collector.collect([test_obj])
+        
+        # Check that only required fields are selected
+        for model, instances in collector.data.items():
+            compiler = SQLDeleteCompiler(
+                query=model._default_manager.all().query,
+                connection=connection,
+                using='default'
+            )
+            required_fields = compiler.get_required_fields()
+            self.assertTrue(all(f.primary_key or (f.is_relation and f.foreign_key) for f in required_fields))
+
+        # Verify deletion works without UnicodeDecodeError
+        try:
+            test_obj.delete()
+        except UnicodeDecodeError:
+            self.fail("UnicodeDecodeError was raised")
\ No newline at end of file
