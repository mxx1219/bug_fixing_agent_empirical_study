diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py
index a249f4cdbf..66c039c6e4 100644
--- a/django/db/models/fields/json.py
+++ b/django/db/models/fields/json.py
@@ -81,7 +81,7 @@ class JSONField(CheckFieldDefaultMixin, Field):
     def get_prep_value(self, value):
         if value is None:
             return value
-        return json.dumps(value, cls=self.encoder)
+        return json.dumps(value, cls=self.encoder, ensure_ascii=False)
 
     def get_transform(self, name):
         transform = super().get_transform(name)
diff --git a/django/forms/fields.py b/django/forms/fields.py
index 9de2c60b35..8235aaac01 100644
--- a/django/forms/fields.py
+++ b/django/forms/fields.py
@@ -1258,7 +1258,7 @@ class JSONField(CharField):
     def prepare_value(self, value):
         if isinstance(value, InvalidJSONInput):
             return value
-        return json.dumps(value, cls=self.encoder)
+        return json.dumps(value, cls=self.encoder, ensure_ascii=False)
 
     def has_changed(self, initial, data):
         if super().has_changed(initial, data):
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..2e7cafc9e7
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,136 @@
+from django.contrib import admin
+from django.db import models
+from django.core.management import execute_from_command_line
+import os
+import sys
+
+# Set up Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_project.settings')
+
+# Create a test project
+if not os.path.exists('test_project'):
+    os.makedirs('test_project')
+
+# Create settings.py
+settings_content = '''
+SECRET_KEY = 'dummy-key-for-test'
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+    'test_app',
+]
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': 'db.sqlite3',
+    }
+}
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+]
+ROOT_URLCONF = 'test_project.urls'
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+STATIC_URL = '/static/'
+'''
+
+with open('test_project/settings.py', 'w') as f:
+    f.write(settings_content)
+
+# Create __init__.py
+with open('test_project/__init__.py', 'w') as f:
+    f.write('')
+
+# Create urls.py
+urls_content = '''
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path('admin/', admin.site.urls),
+]
+'''
+
+with open('test_project/urls.py', 'w') as f:
+    f.write(urls_content)
+
+# Create test app
+if not os.path.exists('test_app'):
+    os.makedirs('test_app')
+
+with open('test_app/__init__.py', 'w') as f:
+    f.write('')
+
+# Create models.py
+models_content = '''
+from django.db import models
+
+class TestModel(models.Model):
+    json_field = models.JSONField()
+
+    def __str__(self):
+        return str(self.json_field)
+'''
+
+with open('test_app/models.py', 'w') as f:
+    f.write(models_content)
+
+# Create admin.py
+admin_content = '''
+from django.contrib import admin
+from .models import TestModel
+
+@admin.register(TestModel)
+class TestModelAdmin(admin.ModelAdmin):
+    pass
+'''
+
+with open('test_app/admin.py', 'w') as f:
+    f.write(admin_content)
+
+if __name__ == '__main__':
+    # Set up Django
+    import django
+    django.setup()
+
+    # Create tables
+    execute_from_command_line(['manage.py', 'makemigrations', 'test_app'])
+    execute_from_command_line(['manage.py', 'migrate'])
+
+    # Create a superuser
+    from django.contrib.auth.models import User
+    if not User.objects.filter(username='admin').exists():
+        User.objects.create_superuser('admin', 'admin@example.com', 'admin')
+
+    # Create a test object with Chinese characters
+    from test_app.models import TestModel
+    TestModel.objects.create(json_field={'name': '中国'})
+
+    print("\nTest setup complete!")
+    print("1. A test model with JSONField containing Chinese characters has been created")
+    print("2. You can now run the development server with:")
+    print("   python manage.py runserver")
+    print("3. Visit http://127.0.0.1:8000/admin/")
+    print("4. Login with username: admin, password: admin")
+    print("5. Click on TestModel to see how Chinese characters are displayed")
\ No newline at end of file
