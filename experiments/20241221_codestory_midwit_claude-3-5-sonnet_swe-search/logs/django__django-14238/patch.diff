diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 0f53d9c30b..ed6e482222 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -2524,7 +2524,11 @@ class AutoFieldMeta(type):
         return isinstance(instance, self._subclasses) or super().__instancecheck__(instance)
 
     def __subclasscheck__(self, subclass):
-        return subclass in self._subclasses or super().__subclasscheck__(subclass)
+        return (
+            subclass in self._subclasses or
+            any(issubclass(subclass, c) for c in self._subclasses) or
+            super().__subclasscheck__(subclass)
+        )
 
 
 class AutoField(AutoFieldMixin, IntegerField, metaclass=AutoFieldMeta):
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..20c6f2f0d2
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,77 @@
+import os
+import django
+from django.conf import settings
+
+# Create the example app structure
+os.makedirs('example/core', exist_ok=True)
+os.makedirs('example/other', exist_ok=True)
+
+# Create the models.py files
+with open('example/core/models.py', 'w') as f:
+    f.write('''from django.db import models
+
+class MyBigAutoField(models.BigAutoField):
+    pass
+
+class MyModel(models.Model):
+    pass
+''')
+
+with open('example/other/models.py', 'w') as f:
+    f.write('''from django.db import models
+
+class MySmallAutoField(models.SmallAutoField):
+    pass
+
+class AnotherModel(models.Model):
+    pass
+''')
+
+# Create apps.py files
+with open('example/core/apps.py', 'w') as f:
+    f.write('''from django.apps import AppConfig
+
+class CoreConfig(AppConfig):
+    name = 'example.core'
+    default_auto_field = 'example.core.models.MyBigAutoField'
+''')
+
+with open('example/other/apps.py', 'w') as f:
+    f.write('''from django.apps import AppConfig
+
+class OtherConfig(AppConfig):
+    name = 'example.other'
+    default_auto_field = 'example.other.models.MySmallAutoField'
+''')
+
+# Create __init__.py files
+for path in ['example/core', 'example/other', 'example']:
+    with open(f'{path}/__init__.py', 'w') as f:
+        if path == 'example/core':
+            f.write('default_app_config = "example.core.apps.CoreConfig"')
+        elif path == 'example/other':
+            f.write('default_app_config = "example.other.apps.OtherConfig"')
+        else:
+            f.write('')
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    INSTALLED_APPS=[
+        'example.core',
+        'example.other',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    }
+)
+
+django.setup()
+
+# This should work with both custom auto field types
+from example.core.models import MyModel
+from example.other.models import AnotherModel
+print("Success! The error has been fixed if you see this message.")
\ No newline at end of file
