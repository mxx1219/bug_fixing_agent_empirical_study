diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py
index 494890cc23..2f722005d4 100644
--- a/django/contrib/staticfiles/storage.py
+++ b/django/contrib/staticfiles/storage.py
@@ -220,23 +220,30 @@ class HashedFilesMixin:
 
         # where to store the new paths
         hashed_files = {}
+        # Track which files have been yielded to avoid duplicates
+        yielded_files = set()
 
         # build a list of adjustable files
         adjustable_paths = [
             path for path in paths
             if matches_patterns(path, self._patterns)
         ]
-        # Do a single pass first. Post-process all files once, then repeat for
-        # adjustable files.
+
+        # Process all files first
         for name, hashed_name, processed, _ in self._post_process(paths, adjustable_paths, hashed_files):
-            yield name, hashed_name, processed
+            if name not in yielded_files and processed:
+                yielded_files.add(name)
+                yield name, hashed_name, processed
 
+        # Then focus on adjustable files that might need multiple passes
         paths = {path: paths[path] for path in adjustable_paths}
 
         for i in range(self.max_post_process_passes):
             substitutions = False
             for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):
-                yield name, hashed_name, processed
+                if name not in yielded_files and processed:
+                    yielded_files.add(name)
+                    yield name, hashed_name, processed
                 substitutions = substitutions or subst
 
             if not substitutions:
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..38ab6220a6
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,54 @@
+import os
+import tempfile
+from django.conf import settings
+from django.contrib.staticfiles.storage import HashedFilesMixin, StaticFilesStorage
+from django.core.files.base import ContentFile
+
+# Setup minimal Django settings
+settings.configure(
+    DEBUG=False,
+    STATIC_URL='/static/',
+)
+
+class TestStorage(HashedFilesMixin, StaticFilesStorage):
+    def __init__(self):
+        self.temp_dir = tempfile.mkdtemp()
+        super().__init__(location=self.temp_dir)
+
+def main():
+    # Create a test storage
+    storage = TestStorage()
+    
+    # Create a test CSS file with references
+    css_content = """
+    .test {
+        background: url("bg.png");
+    }
+    .other {
+        background: url("other.png");
+    }
+    """
+    
+    # Create the files
+    storage._save('styles.css', ContentFile(css_content.encode()))
+    storage._save('bg.png', ContentFile(b'fake png'))
+    storage._save('other.png', ContentFile(b'other fake png'))
+    
+    # Process the files and track yields
+    paths = {
+        'styles.css': (storage, 'styles.css'),
+        'bg.png': (storage, 'bg.png'),
+        'other.png': (storage, 'other.png'),
+    }
+    
+    print("Processing files...")
+    processed_files = {}
+    for name, hashed_name, processed in storage.post_process(paths):
+        if name in processed_files:
+            print(f"WARNING: File {name} was yielded multiple times!")
+            print(f"Previous hashed name: {processed_files[name]}")
+            print(f"Current hashed name: {hashed_name}")
+        processed_files[name] = hashed_name
+
+if __name__ == '__main__':
+    main()
\ No newline at end of file
