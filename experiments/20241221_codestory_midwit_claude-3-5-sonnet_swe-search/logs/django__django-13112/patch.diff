diff --git a/django/apps/registry.py b/django/apps/registry.py
index 408964a146..88ab85e27f 100644
--- a/django/apps/registry.py
+++ b/django/apps/registry.py
@@ -152,8 +152,14 @@ class Apps:
         """
         self.check_apps_ready()
         try:
+            # Try exact match first
             return self.app_configs[app_label]
         except KeyError:
+            # Try case-insensitive match
+            for config_label, app_config in self.app_configs.items():
+                if config_label.lower() == app_label.lower():
+                    return app_config
+            
             message = "No installed app with label '%s'." % app_label
             for app_config in self.get_app_configs():
                 if app_config.name == app_label:
diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py
index c2aea9c730..2c512bea6f 100644
--- a/django/db/models/fields/related.py
+++ b/django/db/models/fields/related.py
@@ -54,7 +54,17 @@ def resolve_relation(scope_model, relation):
     # Look for an "app.Model" relation
     if isinstance(relation, str):
         if "." not in relation:
+            # When adding the app_label, preserve its case from the scope_model
             relation = "%s.%s" % (scope_model._meta.app_label, relation)
+        else:
+            # For explicit app labels in the relation, preserve the case
+            app_label, model_name = relation.split(".")
+            try:
+                app_config = scope_model._meta.apps.get_app_config(app_label)
+                relation = "%s.%s" % (app_config.label, model_name)
+            except LookupError:
+                # If app isn't found, keep the original string
+                pass
 
     return relation
 
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..b78a90bea8
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,133 @@
+import os
+import sys
+import django
+from django.conf import settings
+from django.core.management import execute_from_command_line
+
+# Create a temporary directory for the test project
+TEST_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'test_project')
+os.makedirs(TEST_DIR, exist_ok=True)
+
+# Add the test directory to Python path
+sys.path.insert(0, TEST_DIR)
+
+# Create the Django test project structure
+os.makedirs(os.path.join(TEST_DIR, 'DJ_RegLogin'), exist_ok=True)
+
+# Create models.py
+models_content = '''
+from django.db import models
+from django.contrib.sites.models import Site
+from django.contrib.auth.models import User
+from django.urls import reverse
+
+STATUS_CHOICES = [
+    ('draft', 'Draft'),
+    ('published', 'Published'),
+]
+
+class Category(models.Model):
+    title = models.CharField(max_length=100, db_index=True)
+    slug = models.SlugField(max_length=100, db_index=True)
+    
+    class Meta:
+        verbose_name = 'Category'
+        verbose_name_plural = 'Categories'
+    
+    def __str__(self):
+        return self.title
+    
+    def get_absolute_url(self):
+        return reverse('view_blog_category', None, kwargs={'slug': self.slug})
+
+class Content(models.Model):
+    title = models.CharField(max_length=100, unique=True)
+    slug = models.SlugField(max_length=100, unique=True)
+    body = models.TextField()  # Using TextField instead of RichTextField for simplicity
+    posted = models.DateTimeField(db_index=True, auto_now_add=True)
+    sites = models.ManyToManyField(Site)
+    ip = models.GenericIPAddressField(editable=False, default='127.0.0.1')
+    category = models.ForeignKey(Category, on_delete=models.CASCADE)
+    user = models.ForeignKey(User, on_delete=models.CASCADE, null=False, blank=False, editable=False)
+    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default='draft')
+
+    def __str__(self):
+        return self.title
+
+    def get_absolute_url(self):
+        return reverse('view_blog_post', None, kwargs={'slug': self.slug})
+'''
+
+with open(os.path.join(TEST_DIR, 'DJ_RegLogin', 'models.py'), 'w') as f:
+    f.write(models_content)
+
+# Create apps.py
+apps_content = '''
+from django.apps import AppConfig
+
+class DJ_RegLoginConfig(AppConfig):
+    name = 'DJ_RegLogin'
+    verbose_name = "Contents"
+'''
+
+with open(os.path.join(TEST_DIR, 'DJ_RegLogin', 'apps.py'), 'w') as f:
+    f.write(apps_content)
+
+# Create __init__.py
+init_content = '''
+default_app_config = 'DJ_RegLogin.apps.DJ_RegLoginConfig'
+'''
+
+with open(os.path.join(TEST_DIR, 'DJ_RegLogin', '__init__.py'), 'w') as f:
+    f.write(init_content)
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'DJ_RegLogin.apps.DJ_RegLoginConfig',  # Use the full path to the AppConfig
+        'django.contrib.admin',
+        'django.contrib.auth',
+        'django.contrib.contenttypes',
+        'django.contrib.sessions',
+        'django.contrib.messages',
+        'django.contrib.staticfiles',
+        'django.contrib.sites',
+    ],
+    MIDDLEWARE=[
+        'django.middleware.security.SecurityMiddleware',
+        'django.contrib.sessions.middleware.SessionMiddleware',
+        'django.middleware.common.CommonMiddleware',
+        'django.middleware.csrf.CsrfViewMiddleware',
+        'django.contrib.auth.middleware.AuthenticationMiddleware',
+        'django.contrib.messages.middleware.MessageMiddleware',
+        'django.middleware.clickjacking.XFrameOptionsMiddleware',
+    ],
+    TEMPLATES=[{
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    }],
+    SECRET_KEY='dummy-key-for-test',
+    ROOT_URLCONF='',  # Empty but required
+)
+
+django.setup()
+
+if __name__ == '__main__':
+    # Run makemigrations
+    sys.argv = ['manage.py', 'makemigrations']
+    execute_from_command_line(sys.argv)
\ No newline at end of file
