diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py
index 0dc1c77c53..e11a8dfecc 100644
--- a/django/db/migrations/autodetector.py
+++ b/django/db/migrations/autodetector.py
@@ -963,15 +963,22 @@ class MigrationAutodetector:
                             preserve_default = False
                     else:
                         field = new_field
-                    self.add_operation(
-                        app_label,
-                        operations.AlterField(
-                            model_name=model_name,
-                            name=field_name,
-                            field=field,
-                            preserve_default=preserve_default,
+                    
+                    # Special handling for UUIDField to ForeignKey conversion
+                    if isinstance(old_field, models.UUIDField) and isinstance(new_field, models.ForeignKey):
+                        # Remove the old field and add the new one to ensure proper dependency handling
+                        self._generate_removed_field(app_label, model_name, field_name)
+                        self._generate_added_field(app_label, model_name, field_name)
+                    else:
+                        self.add_operation(
+                            app_label,
+                            operations.AlterField(
+                                model_name=model_name,
+                                name=field_name,
+                                field=field,
+                                preserve_default=preserve_default,
+                            )
                         )
-                    )
                 else:
                     # We cannot alter between m2m and concrete fields
                     self._generate_removed_field(app_label, model_name, field_name)
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..26c0480710
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,107 @@
+import os
+import sys
+import uuid
+from django.conf import settings
+from django.core.management import execute_from_command_line
+from django.db import models
+from django.apps import apps, AppConfig
+from django.db.migrations.autodetector import MigrationAutodetector
+from django.db.migrations.questioner import NonInteractiveMigrationQuestioner
+from django.db.migrations.state import ProjectState, ModelState
+from django.db.migrations.loader import MigrationLoader
+from django.apps.registry import Apps
+import django
+
+# Set up Django settings
+settings.configure(
+    DEBUG=True,
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    }
+)
+
+django.setup()
+
+# Create test apps and models
+def create_app2_state():
+    """Create ModelState for App2"""
+    return ModelState('testapp2', 'App2', [
+        ('id', models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),
+        ('text', models.CharField(max_length=100)),
+    ])
+
+def create_app1_state():
+    """Create ModelState for App1"""
+    return ModelState('testapp1', 'App1', [
+        ('id', models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),
+        ('text', models.CharField(max_length=100)),
+        ('another_app', models.UUIDField(null=True, blank=True)),
+    ])
+
+def create_modified_app1_state():
+    """Create ModelState for modified App1"""
+    return ModelState('testapp1', 'App1', [
+        ('id', models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),
+        ('text', models.CharField(max_length=100)),
+        ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),
+    ])
+
+# Create model states
+app2_state = create_app2_state()
+app1_state = create_app1_state()
+modified_app1_state = create_modified_app1_state()
+
+# Create a new state with the original models
+old_state = ProjectState()
+old_state.add_model(app2_state)  # Add App2 first
+old_state.add_model(app1_state)
+
+# Create a new state with the modified model
+new_state = ProjectState()
+new_state.add_model(app2_state)  # Add App2 first
+new_state.add_model(modified_app1_state)
+
+# Create migration detector
+loader = MigrationLoader(None)
+
+# Create a questioner that always returns the default option
+class TestQuestioner(NonInteractiveMigrationQuestioner):
+    def ask_not_null_alteration(self, field_name, model_name):
+        return None
+    
+    def ask_initial(self, app_label):
+        return True
+
+autodetector = MigrationAutodetector(
+    old_state,
+    new_state,
+    TestQuestioner()
+)
+
+# Generate migrations
+changes = autodetector.changes(graph=loader.graph)
+
+print("\nGenerated changes:", changes)
+print("\nChecking migrations and dependencies...")
+if 'testapp1' in changes:
+    for migration in changes['testapp1']:
+        print("\nMigration:", migration.name)
+        print("Operations:", [op.__class__.__name__ for op in migration.operations])
+        print("Dependencies:", migration.dependencies)
+        
+        # Check each operation's dependencies
+        for op in migration.operations:
+            if hasattr(op, 'field') and isinstance(op.field, models.ForeignKey):
+                print(f"\nForeignKey operation found: {op.__class__.__name__}")
+                print("Field dependencies:", op.field.remote_field.model._meta.app_label)
+                
+        if any('testapp2' in dep[0] for dep in migration.dependencies):
+            print("\nSuccess: Found testapp2 in dependencies!")
+        else:
+            print("\nBug: testapp2 not found in dependencies!")
\ No newline at end of file
