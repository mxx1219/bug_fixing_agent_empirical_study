diff --git a/django/db/models/query.py b/django/db/models/query.py
index b48d0df9c0..d101e50b4c 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -206,11 +206,17 @@ class QuerySet:
             negate, args, kwargs = self._deferred_filter
             self._filter_or_exclude_inplace(negate, args, kwargs)
             self._deferred_filter = None
+        if getattr(self._query, 'values_select', None):
+            # If this is a values query, ensure we use the correct iterator
+            self._iterable_class = ValuesIterable
         return self._query
 
     @query.setter
     def query(self, value):
         self._query = value
+        # Check if this is a values query and set the appropriate iterator
+        if getattr(value, 'values_select', None):
+            self._iterable_class = ValuesIterable
 
     def as_manager(cls):
         # Address the circular dependency between `Queryset` and `Manager`.
diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 4648daf395..4cfdef0421 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -164,6 +164,7 @@ class Query(BaseExpression):
         self.used_aliases = set()
         self.filter_is_sticky = False
         self.subquery = False
+        self.values_select = ()  # Track if this is a values() query
 
         # SQL-related attributes
         # Select and related select clauses are expressions to use in the
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..8ba55d169a
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,59 @@
+import os
+import django
+from django.conf import settings
+import pickle
+
+# Configure Django settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+    MIDDLEWARE_CLASSES=[]
+)
+django.setup()
+
+# Create the model
+from django.db import models
+
+class Toy(models.Model):
+    name = models.CharField(max_length=16)
+    material = models.CharField(max_length=16)
+    price = models.PositiveIntegerField()
+
+    class Meta:
+        # This tells Django this is a temporary model for testing
+        managed = True
+        app_label = 'contenttypes'
+
+# Create the tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Toy)
+
+# Test code
+from django.db.models import Sum
+
+# Create test data
+Toy.objects.create(name='foo', price=10, material='wood')
+Toy.objects.create(name='bar', price=20, material='plastic')
+Toy.objects.create(name='baz', price=100, material='wood')
+
+# Original query with values() and annotate
+prices = Toy.objects.values('material').annotate(total_price=Sum('price'))
+print("Original query result:")
+print(prices)
+print("Type of first result:", type(prices[0]))
+
+# Pickle and unpickle the query
+prices2 = Toy.objects.all()
+prices2.query = pickle.loads(pickle.dumps(prices.query))
+print("\nAfter pickle/unpickle:")
+print("Type of first result:", type(prices2[0]))
+print(prices2)  # This should crash with the reported error
\ No newline at end of file
