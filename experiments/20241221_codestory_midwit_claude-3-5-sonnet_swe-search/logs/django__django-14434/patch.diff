diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py
index ad2f5a7da1..4c018624fb 100644
--- a/django/db/backends/base/schema.py
+++ b/django/db/backends/base/schema.py
@@ -1251,7 +1251,7 @@ class BaseDatabaseSchemaEditor:
         else:
             sql = self.sql_create_unique
         if columns:
-            columns = self._index_columns(table, columns, col_suffixes=(), opclasses=opclasses)
+            columns = self._index_columns(model._meta.db_table, columns, col_suffixes=(), opclasses=opclasses)
         else:
             columns = Expressions(model._meta.db_table, expressions, compiler, self.quote_value)
         return Statement(
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..2143cd4f36
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,19 @@
+from django.db.backends.ddl_references import Columns, Table
+
+def quote_name(name):
+    return f'"{name}"'
+
+# Create a Table instance
+table_instance = Table("mytable", quote_name)
+
+# Create a Columns instance with a Table instance instead of string
+columns = Columns(table_instance, ["column1"], quote_name)
+
+# This will return False even though it should be True
+print("References column check (with Table instance):", columns.references_column("mytable", "column1"))
+
+# Create a Columns instance with a string table name (correct way)
+columns_correct = Columns("mytable", ["column1"], quote_name)
+
+# This will return True as expected
+print("References column check (with string table):", columns_correct.references_column("mytable", "column1"))
\ No newline at end of file
