diff --git a/django/db/models/query.py b/django/db/models/query.py
index be0deb90b0..56f28a03ab 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -438,6 +438,9 @@ class QuerySet:
             else:
                 stop = None
             qs.query.set_limits(start, stop)
+            # Preserve the _allow_sliced_filter flag if it exists
+            if hasattr(self, '_allow_sliced_filter'):
+                qs._allow_sliced_filter = self._allow_sliced_filter
             return list(qs)[:: k.step] if k.step else qs
 
         qs = self._chain()
@@ -1438,7 +1441,7 @@ class QuerySet:
         return self._filter_or_exclude(True, args, kwargs)
 
     def _filter_or_exclude(self, negate, args, kwargs):
-        if (args or kwargs) and self.query.is_sliced:
+        if (args or kwargs) and self.query.is_sliced and not getattr(self, '_allow_sliced_filter', False):
             raise TypeError("Cannot filter a query once a slice has been taken.")
         clone = self._chain()
         if self._defer_next_filter:
@@ -1850,6 +1853,8 @@ class QuerySet:
         if obj._sticky_filter:
             obj.query.filter_is_sticky = True
             obj._sticky_filter = False
+        if hasattr(self, '_allow_sliced_filter'):
+            obj._allow_sliced_filter = self._allow_sliced_filter
         return obj
 
     def _clone(self):
@@ -2145,16 +2150,17 @@ class Prefetch:
         self.prefetch_through = lookup
         # `prefetch_to` is the path to the attribute that stores the result.
         self.prefetch_to = lookup
-        if queryset is not None and (
-            isinstance(queryset, RawQuerySet)
-            or (
+        if queryset is not None:
+            if isinstance(queryset, RawQuerySet) or (
                 hasattr(queryset, "_iterable_class")
                 and not issubclass(queryset._iterable_class, ModelIterable)
-            )
-        ):
-            raise ValueError(
-                "Prefetch querysets cannot use raw(), values(), and values_list()."
-            )
+            ):
+                raise ValueError(
+                    "Prefetch querysets cannot use raw(), values(), and values_list()."
+                )
+            # Allow sliced querysets in prefetch_related
+            if isinstance(queryset, QuerySet):
+                queryset._allow_sliced_filter = True
         if to_attr:
             self.prefetch_to = LOOKUP_SEP.join(
                 lookup.split(LOOKUP_SEP)[:-1] + [to_attr]
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..7f9291788b
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,69 @@
+import os
+import django
+from django.conf import settings
+from django.db import models
+
+# Configure Django settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+    DEFAULT_AUTO_FIELD='django.db.models.AutoField',
+    MIDDLEWARE=[],
+)
+django.setup()
+
+# Define test models
+class Category(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'testapp'
+
+class Post(models.Model):
+    title = models.CharField(max_length=100)
+    category = models.ForeignKey(Category, on_delete=models.CASCADE)
+    
+    class Meta:
+        app_label = 'testapp'
+
+# Create the tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Category)
+    schema_editor.create_model(Post)
+
+# Create some test data
+category1 = Category.objects.create(name='Category 1')
+category2 = Category.objects.create(name='Category 2')
+
+for i in range(5):
+    Post.objects.create(title=f'Post {i} in Cat 1', category=category1)
+    Post.objects.create(title=f'Post {i} in Cat 2', category=category2)
+
+# Try to use Prefetch with a slice
+from django.db.models import Prefetch
+
+try:
+    categories = Category.objects.prefetch_related(
+        Prefetch(
+            'post_set',
+            queryset=Post.objects.all()[:3],  # Test simple slice
+            to_attr='example_posts'
+        )
+    )
+    
+    # Try to access the data to trigger the prefetch
+    for category in categories:
+        print(f"Category: {category.name}")
+        print(f"Example posts: {[post.title for post in category.example_posts]}")
+        
+except Exception as e:
+    print(f"Error occurred: {str(e)}")
\ No newline at end of file
