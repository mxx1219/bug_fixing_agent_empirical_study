diff --git a/django/test/testcases.py b/django/test/testcases.py
index 92f566b7b0..62e1678814 100644
--- a/django/test/testcases.py
+++ b/django/test/testcases.py
@@ -1473,10 +1473,22 @@ class _MediaFilesHandler(FSFilesHandler):
         return settings.MEDIA_URL
 
 
+class DatabaseCleanupMixin:
+    """Mixin to cleanup database connections after request handling."""
+    def process_request_thread(self, request, client_address):
+        super().process_request_thread(request, client_address)
+        # Close any database connections that were opened by this thread
+        for conn in connections.all():
+            conn.close_if_unusable_or_obsolete()
+
+class TestServerThread(ThreadedWSGIServer, DatabaseCleanupMixin):
+    """ThreadedWSGIServer that cleans up database connections."""
+    daemon_threads = False  # Ensure threads are joined on server close
+
 class LiveServerThread(threading.Thread):
     """Thread for running a live http server while the tests are running."""
 
-    server_class = ThreadedWSGIServer
+    server_class = TestServerThread
 
     def __init__(self, host, static_handler, connections_override=None, port=0):
         self.host = host
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..e35cd79c29
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,41 @@
+import os
+import django
+from django.test import LiveServerTestCase
+from django.test.utils import override_settings
+from django.db import connections
+from django.urls import path
+from django.http import HttpResponse
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')
+
+def dummy_view(request):
+    return HttpResponse('OK')
+
+urlpatterns = [
+    path('', dummy_view),
+]
+
+# Configure test settings
+TEST_SETTINGS = {
+    'DATABASES': {
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': 'test_db.sqlite3',
+        }
+    },
+    'ROOT_URLCONF': __name__,
+}
+
+django.setup()
+
+@override_settings(**TEST_SETTINGS)
+class TestDatabaseConnections(LiveServerTestCase):
+    def test_simple_request(self):
+        # Make a request to the live server
+        response = self.client.get('/')
+        # The test itself doesn't matter, we're looking for connection leaks
+        self.assertEqual(response.status_code, 200)
+
+if __name__ == '__main__':
+    import unittest
+    unittest.main()
\ No newline at end of file
