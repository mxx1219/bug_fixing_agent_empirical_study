diff --git a/django/core/handlers/asgi.py b/django/core/handlers/asgi.py
index 7fbabe4510..748f73e073 100644
--- a/django/core/handlers/asgi.py
+++ b/django/core/handlers/asgi.py
@@ -1,3 +1,4 @@
+import asyncio
 import logging
 import sys
 import tempfile
@@ -159,6 +160,9 @@ class ASGIHandler(base.BaseHandler):
             return
         # Get the response, using the async mode of BaseHandler.
         response = await self.get_response_async(request)
+        # Ensure response is awaited if it's a coroutine
+        if asyncio.iscoroutine(response):
+            response = await response
         response._handler_class = self.__class__
         # Increase chunk size on file responses (ASGI servers handles low-level
         # chunking).
diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py
index 169df6b3cf..2bcdc2441a 100644
--- a/django/core/handlers/base.py
+++ b/django/core/handlers/base.py
@@ -51,11 +51,11 @@ class BaseHandler:
                 middleware_is_async = middleware_can_async
             try:
                 # Adapt handler, if needed.
-                handler = self.adapt_method_mode(
+                adapted_handler = self.adapt_method_mode(
                     middleware_is_async, handler, handler_is_async,
                     debug=settings.DEBUG, name='middleware %s' % middleware_path,
                 )
-                mw_instance = middleware(handler)
+                mw_instance = middleware(adapted_handler)
             except MiddlewareNotUsed as exc:
                 if settings.DEBUG:
                     if str(exc):
@@ -105,16 +105,27 @@ class BaseHandler:
         - If is_async is True:
           - Synchronous methods are wrapped with sync_to_async()
           - Asynchronous methods are left alone
+
+        Also ensures that async methods properly await their responses.
         """
         if method_is_async is None:
             method_is_async = asyncio.iscoroutinefunction(method)
         if debug and not name:
             name = name or 'method %s()' % method.__qualname__
+
         if is_async:
             if not method_is_async:
                 if debug:
                     logger.debug('Synchronous %s adapted.', name)
                 return sync_to_async(method, thread_sensitive=True)
+            else:
+                # For async methods, wrap them to ensure responses are awaited
+                async def wrapper(*args, **kwargs):
+                    response = await method(*args, **kwargs)
+                    if asyncio.iscoroutine(response):
+                        response = await response
+                    return response
+                return wrapper
         elif method_is_async:
             if debug:
                 logger.debug('Asynchronous %s adapted.', name)
@@ -146,6 +157,9 @@ class BaseHandler:
         # Setup default url resolver for this thread.
         set_urlconf(settings.ROOT_URLCONF)
         response = await self._middleware_chain(request)
+        # Ensure response is awaited if it's a coroutine
+        if asyncio.iscoroutine(response):
+            response = await response
         response._resource_closers.append(request.close)
         if response.status_code >= 400:
             await sync_to_async(log_response)(
@@ -207,6 +221,14 @@ class BaseHandler:
 
         return response
 
+    async def ensure_response_is_not_coroutine(self, response):
+        """
+        Ensure that the response is not a coroutine by awaiting it if necessary.
+        """
+        if asyncio.iscoroutine(response):
+            response = await response
+        return response
+
     async def _get_response_async(self, request):
         """
         Resolve and call the view, then apply view, exception, and
@@ -220,6 +242,7 @@ class BaseHandler:
         for middleware_method in self._view_middleware:
             response = await middleware_method(request, callback, callback_args, callback_kwargs)
             if response:
+                response = await self.ensure_response_is_not_coroutine(response)
                 break
 
         if response is None:
@@ -229,6 +252,7 @@ class BaseHandler:
                 wrapped_callback = sync_to_async(wrapped_callback, thread_sensitive=True)
             try:
                 response = await wrapped_callback(request, *callback_args, **callback_kwargs)
+                response = await self.ensure_response_is_not_coroutine(response)
             except Exception as e:
                 response = await sync_to_async(
                     self.process_exception_by_middleware,
@@ -245,6 +269,7 @@ class BaseHandler:
         if hasattr(response, 'render') and callable(response.render):
             for middleware_method in self._template_response_middleware:
                 response = await middleware_method(request, response)
+                response = await self.ensure_response_is_not_coroutine(response)
                 # Complain if the template response middleware returned None or
                 # an uncalled coroutine.
                 self.check_response(
@@ -259,6 +284,7 @@ class BaseHandler:
                     response = await response.render()
                 else:
                     response = await sync_to_async(response.render, thread_sensitive=True)()
+                response = await self.ensure_response_is_not_coroutine(response)
             except Exception as e:
                 response = await sync_to_async(
                     self.process_exception_by_middleware,
@@ -267,9 +293,6 @@ class BaseHandler:
                 if response is None:
                     raise
 
-        # Make sure the response is not a coroutine
-        if asyncio.iscoroutine(response):
-            raise RuntimeError('Response is still a coroutine.')
         return response
 
     def resolve_request(self, request):
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..c712d63f0b
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,67 @@
+import os
+import django
+from django.conf import settings
+from django.core.handlers.asgi import ASGIHandler
+from django.core.handlers.wsgi import WSGIHandler
+from django.http import HttpResponse
+from django.utils.deprecation import MiddlewareMixin
+from django.urls import path
+
+# Create a dummy middleware
+class DummyMiddleware(MiddlewareMixin):
+    def process_response(self, request, response):
+        print(f"Request type: {request.__class__}")
+        print(f"Response type: {response.__class__}")
+        return response
+
+# Create a simple view that returns a response
+async def test_view(request):
+    return HttpResponse("Test response")
+
+# URL configuration
+urlpatterns = [
+    path('', test_view),
+]
+
+if not settings.configured:
+    # Configure Django settings
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='dummy-key',
+        MIDDLEWARE=[
+            'reproduce_error.DummyMiddleware',
+            'django.middleware.security.SecurityMiddleware',
+        ],
+        ROOT_URLCONF=__name__,
+        ALLOWED_HOSTS=['*'],
+    )
+    django.setup()
+
+# Create a simple ASGI application
+async def application(scope, receive, send):
+    if scope['type'] == 'http':
+        handler = ASGIHandler()
+        await handler(scope, receive, send)
+
+if __name__ == "__main__":
+    print("Running test...")
+    # Create a mock scope
+    scope = {
+        'type': 'http',
+        'method': 'GET',
+        'path': '/',
+        'headers': [],
+    }
+    
+    # Create mock receive and send functions
+    async def receive():
+        return {'type': 'http.request'}
+    
+    async def send(message):
+        print(f"Sent message type: {message.get('type')}")
+    
+    # Run the application
+    import asyncio
+    loop = asyncio.get_event_loop()
+    loop.run_until_complete(application(scope, receive, send))
+    loop.close()
\ No newline at end of file
