diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py
index d32c891284..c81dad165b 100644
--- a/django/db/models/lookups.py
+++ b/django/db/models/lookups.py
@@ -11,7 +11,7 @@ from django.db.models.fields import (
 from django.db.models.query_utils import RegisterLookupMixin
 from django.utils.datastructures import OrderedSet
 from django.utils.deprecation import RemovedInDjango40Warning
-from django.utils.functional import cached_property
+from django.utils.functional import Promise, cached_property
 
 
 class Lookup:
@@ -71,7 +71,15 @@ class Lookup:
         if hasattr(self.rhs, 'resolve_expression'):
             return self.rhs
         if self.prepare_rhs and hasattr(self.lhs.output_field, 'get_prep_value'):
-            return self.lhs.output_field.get_prep_value(self.rhs)
+            value = self.rhs
+            # Handle SimpleLazyObject by resolving it first
+            if hasattr(value, '_wrapped') and isinstance(value._wrapped, Promise):
+                value._setup()
+                value = value._wrapped
+            # If the value is a model instance, get its pk
+            if hasattr(value, '_meta'):
+                value = value.pk
+            return self.lhs.output_field.get_prep_value(value)
         return self.rhs
 
     def get_db_prep_lookup(self, value, connection):
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..1e0e52842d
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,69 @@
+import os
+import django
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+    )
+    django.setup()
+
+from django.contrib.auth.models import User
+from django.db import models, connection
+from django.db.models import OuterRef, Subquery
+from django.utils.functional import SimpleLazyObject
+from django.core.management import call_command
+
+# Run migrations first
+call_command('migrate', verbosity=0)
+
+# Define the models
+class A(models.Model):
+    class Meta:
+        app_label = 'auth'  # Use existing app
+
+class B(models.Model):
+    a = models.ForeignKey(A, on_delete=models.CASCADE)
+    class Meta:
+        app_label = 'auth'
+
+class C(models.Model):
+    owner = models.ForeignKey(User, on_delete=models.CASCADE)
+    class Meta:
+        app_label = 'auth'
+
+# Create the tables
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(A)
+    schema_editor.create_model(B)
+    schema_editor.create_model(C)
+
+# Reproduce the error
+def reproduce():
+    owner_user = (
+        B.objects.filter(a=OuterRef("pk"))
+        .annotate(owner_user=Subquery(C.objects.values("owner")))
+        .values("owner_user")
+    )
+    user = SimpleLazyObject(lambda: User.objects.create_user("testuser"))
+    return A.objects.annotate(owner_user=Subquery(owner_user)).filter(
+        owner_user=user
+    )
+
+if __name__ == "__main__":
+    try:
+        result = reproduce()
+        print("Query executed successfully!")
+    except Exception as e:
+        print(f"Error occurred: {str(e)}")
+        import traceback
+        traceback.print_exc()
\ No newline at end of file
