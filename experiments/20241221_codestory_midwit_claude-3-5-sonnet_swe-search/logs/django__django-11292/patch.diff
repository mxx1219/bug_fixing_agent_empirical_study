diff --git a/django/core/management/base.py b/django/core/management/base.py
index 0c3a981290..118dc38a5c 100644
--- a/django/core/management/base.py
+++ b/django/core/management/base.py
@@ -286,6 +286,10 @@ class BaseCommand:
             '--force-color', action='store_true',
             help='Force colorization of the command output.',
         )
+        parser.add_argument(
+            '--skip-checks', action='store_true',
+            help='Skip system checks.',
+        )
         self.add_arguments(parser)
         return parser
 
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..0d4fc451bf
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,28 @@
+from django.core.management import BaseCommand, CommandParser
+
+# Create a test command
+class TestCommand(BaseCommand):
+    help = 'Test command to demonstrate skip_checks functionality'
+    requires_system_checks = True
+    
+    def handle(self, *args, **options):
+        return "Command executed successfully"
+
+# Test the new --skip-checks command line option
+parser = TestCommand().create_parser('django-admin', 'test')
+options = parser.parse_args(['--skip-checks'])
+print("Command line option test:")
+print("--skip-checks option is now available")
+print("skip_checks value:", options.skip_checks)
+
+# Test that the stealth option still works
+cmd = TestCommand()
+options = {
+    'skip_checks': True,
+    'force_color': False,
+    'no_color': False,
+    'verbosity': 1,
+}
+result = cmd.execute(**options)
+print("\nStealth option test:")
+print("skip_checks stealth option still works")
\ No newline at end of file
