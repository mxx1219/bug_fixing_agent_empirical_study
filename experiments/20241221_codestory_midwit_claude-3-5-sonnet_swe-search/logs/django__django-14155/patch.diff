diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
index 9b00e24509..a7d304506a 100644
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -31,7 +31,16 @@ from .utils import get_callable
 
 class ResolverMatch:
     def __init__(self, func, args, kwargs, url_name=None, app_names=None, namespaces=None, route=None, tried=None):
-        self.func = func
+        # Handle partial functions
+        self.partial_args = {}
+        self.partial_kwargs = {}
+        if isinstance(func, functools.partial):
+            self.partial_args = func.args
+            self.partial_kwargs = func.keywords or {}
+            self.func = func.func
+        else:
+            self.func = func
+
         self.args = args
         self.kwargs = kwargs
         self.url_name = url_name
@@ -45,12 +54,12 @@ class ResolverMatch:
         self.namespaces = [x for x in namespaces if x] if namespaces else []
         self.namespace = ':'.join(self.namespaces)
 
-        if not hasattr(func, '__name__'):
+        if not hasattr(self.func, '__name__'):
             # A class-based view
-            self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__
+            self._func_path = self.func.__class__.__module__ + '.' + self.func.__class__.__name__
         else:
             # A function-based view
-            self._func_path = func.__module__ + '.' + func.__name__
+            self._func_path = self.func.__module__ + '.' + self.func.__name__
 
         view_path = url_name or self._func_path
         self.view_name = ':'.join(self.namespaces + [view_path])
@@ -59,8 +68,11 @@ class ResolverMatch:
         return (self.func, self.args, self.kwargs)[index]
 
     def __repr__(self):
-        return "ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)" % (
-            self._func_path, self.args, self.kwargs, self.url_name,
+        partial_info = ""
+        if self.partial_args or self.partial_kwargs:
+            partial_info = ", partial_args=%s, partial_kwargs=%s" % (self.partial_args, self.partial_kwargs)
+        return "ResolverMatch(func=%s%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)" % (
+            self._func_path, partial_info, self.args, self.kwargs, self.url_name,
             self.app_names, self.namespaces, self.route,
         )
 
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..c32e67ae48
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,43 @@
+from django.urls.resolvers import ResolverMatch
+import functools
+
+def test_view(request, param1, param2):
+    return f"Test view with {param1} and {param2}"
+
+# Test with partial function
+partial_view = functools.partial(test_view, param1="fixed_value")
+resolver_match = ResolverMatch(
+    func=partial_view,
+    args=(),
+    kwargs={'param2': 'dynamic_value'},
+    url_name='test-view'
+)
+
+print("1. With partial function:")
+print(resolver_match)
+
+# Test with regular function
+resolver_match2 = ResolverMatch(
+    func=test_view,
+    args=(),
+    kwargs={'param1': 'value1', 'param2': 'value2'},
+    url_name='test-view'
+)
+
+print("\n2. With regular function:")
+print(resolver_match2)
+
+# Test with class-based view
+class TestView:
+    def __call__(self, request):
+        return "Class-based view"
+
+resolver_match3 = ResolverMatch(
+    func=TestView(),
+    args=(),
+    kwargs={},
+    url_name='class-view'
+)
+
+print("\n3. With class-based view:")
+print(resolver_match3)
