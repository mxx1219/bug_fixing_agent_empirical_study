diff --git a/django/core/cache/backends/db.py b/django/core/cache/backends/db.py
index 33c79c5a14..d54ca3881f 100644
--- a/django/core/cache/backends/db.py
+++ b/django/core/cache/backends/db.py
@@ -267,9 +267,11 @@ class DatabaseCache(BaseDatabaseCache):
                 cursor.execute(
                     connection.ops.cache_key_culling_sql() % table,
                     [cull_num])
-                cursor.execute("DELETE FROM %s "
-                               "WHERE cache_key < %%s" % table,
-                               [cursor.fetchone()[0]])
+                result = cursor.fetchone()
+                if result:
+                    cursor.execute("DELETE FROM %s "
+                                 "WHERE cache_key < %%s" % table,
+                                 [result[0]])
 
     def clear(self):
         db = router.db_for_write(self.cache_model_class)
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..105d70d750
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,64 @@
+import os
+import django
+from django.conf import settings
+from django.core.cache import cache
+from django.core.management import call_command
+from django.db import connections
+
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        CACHES={
+            'default': {
+                'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
+                'LOCATION': 'cache_table',
+                'OPTIONS': {
+                    'MAX_ENTRIES': 2,  # Set low to trigger culling
+                    'CULL_FREQUENCY': 2,  # Cull when table is full
+                }
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+    )
+    django.setup()
+
+# Create the cache table
+call_command('createcachetable')
+
+# Clear the cache to ensure empty state
+cache.clear()
+
+# Monkey patch the cache_key_culling_sql to return a query that will return no results
+def mock_culling_sql():
+    return "SELECT cache_key FROM %s WHERE cache_key < 'a' LIMIT 1"
+
+connection = connections['default']
+original_culling_sql = connection.ops.cache_key_culling_sql
+connection.ops.cache_key_culling_sql = mock_culling_sql
+
+# Now try to set multiple values to trigger culling
+print("Setting first value...")
+cache.set('test_key1', 'test_value1', 30)
+print("Setting second value...")
+cache.set('test_key2', 'test_value2', 30)
+print("Setting third value (should trigger culling)...")
+cache.set('test_key3', 'test_value3', 30)
+
+# Verify we can read the values
+print("\nVerifying values:")
+print(f"test_key1: {cache.get('test_key1')}")
+print(f"test_key2: {cache.get('test_key2')}")
+print(f"test_key3: {cache.get('test_key3')}")
+
+# Restore original function
+connection.ops.cache_key_culling_sql = original_culling_sql
+
+print("\nTest completed successfully")
\ No newline at end of file
