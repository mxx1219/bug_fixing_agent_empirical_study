diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 0fd69059ee..28374272f4 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -1501,7 +1501,7 @@ class DecimalField(Field):
             return self.context.create_decimal_from_float(value)
         try:
             return decimal.Decimal(value)
-        except decimal.InvalidOperation:
+        except (decimal.InvalidOperation, TypeError, ValueError):
             raise exceptions.ValidationError(
                 self.error_messages['invalid'],
                 code='invalid',
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..abbd67399e
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,38 @@
+from django.conf import settings
+from django.core.exceptions import ValidationError
+from django.db import models
+import decimal
+
+# Configure Django settings
+settings.configure(
+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3'}},
+    INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth'],
+)
+
+import django
+django.setup()
+
+def test_value(field, value, expected_type=None):
+    print(f"\nTesting value: {value} (type: {type(value)})")
+    try:
+        result = field.to_python(value)
+        print(f"Success! Result: {result} (type: {type(result)})")
+        if expected_type:
+            assert isinstance(result, expected_type), f"Expected type {expected_type}, got {type(result)}"
+    except Exception as e:
+        print(f"Got exception: {type(e)}: {str(e)}")
+
+# Test with null=True
+field_nullable = models.DecimalField(max_digits=10, decimal_places=2, null=True)
+
+# Test with null=False
+field_not_nullable = models.DecimalField(max_digits=10, decimal_places=2, null=False)
+
+# Test cases
+test_value(field_nullable, None)  # Should work for nullable field
+test_value(field_not_nullable, None)  # Should raise ValidationError
+test_value(field_nullable, "123.45", decimal.Decimal)  # Should work
+test_value(field_nullable, 123.45, decimal.Decimal)  # Should work
+test_value(field_nullable, {'invalid': 'value'})  # Should raise ValidationError
+test_value(field_nullable, [1, 2, 3])  # Should raise ValidationError
+test_value(field_nullable, "invalid")  # Should raise ValidationError
\ No newline at end of file
