diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 2b59dd301a..a6a1bdf180 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -552,7 +552,14 @@ class ResolvedOuterRef(F):
     """
     contains_aggregate = False
 
-    def as_sql(self, *args, **kwargs):
+    def as_sql(self, compiler, connection):
+        # Get the original query's table alias for this field
+        if hasattr(self, '_outer_query'):
+            try:
+                field_ref = self._outer_query.resolve_ref(self.name, check_joins=True)
+                return field_ref.as_sql(compiler, connection)
+            except Exception:
+                pass
         raise ValueError(
             'This queryset contains a reference to an outer query and may '
             'only be used in a subquery.'
@@ -567,7 +574,11 @@ class OuterRef(F):
                            summarize=False, for_save=False, simple_col=False):
         if isinstance(self.name, self.__class__):
             return self.name
-        return ResolvedOuterRef(self.name)
+        # Create a new instance to avoid modifying the original
+        clone = ResolvedOuterRef(self.name)
+        # Store the original query to maintain the reference
+        clone._outer_query = query
+        return clone
 
 
 class Func(SQLiteNumericMixin, Expression):
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..7b5be217c3
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,72 @@
+from django.db import models
+from django.db.models import Q, OuterRef, Exists
+import os
+import django
+
+# Set up Django
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.test_sqlite')
+django.setup()
+
+# Models
+class Category(models.Model):
+    name = models.CharField(max_length=100)
+    class Meta:
+        app_label = 'reproduce_error'
+
+class Tag(models.Model):
+    name = models.CharField(max_length=100)
+    category = models.ForeignKey(Category, on_delete=models.CASCADE)
+    class Meta:
+        app_label = 'reproduce_error'
+
+class Item(models.Model):
+    name = models.CharField(max_length=100)
+    tags = models.ManyToManyField(Tag)
+    class Meta:
+        app_label = 'reproduce_error'
+
+class Number(models.Model):
+    value = models.IntegerField()
+    class Meta:
+        app_label = 'reproduce_error'
+
+# Test cases
+def test_exists_exclude():
+    print("Testing filter() - should work:")
+    try:
+        qs = Number.objects.annotate(
+            foo=Exists(
+                Item.objects.filter(tags__category_id=OuterRef('pk'))
+            )
+        ).filter(foo=True)
+        print(qs.query)
+        print("Success!")
+    except Exception as e:
+        print(f"Error: {e}")
+
+    print("\nTesting exclude() - currently fails:")
+    try:
+        qs = Number.objects.annotate(
+            foo=Exists(
+                Item.objects.exclude(tags__category_id=OuterRef('pk'))
+            )
+        ).filter(foo=True)
+        print(qs.query)
+        print("Success!")
+    except Exception as e:
+        print(f"Error: {e}")
+
+    print("\nTesting filter(~Q()) - currently fails:")
+    try:
+        qs = Number.objects.annotate(
+            foo=Exists(
+                Item.objects.filter(~Q(tags__category_id=OuterRef('pk')))
+            )
+        ).filter(foo=True)
+        print(qs.query)
+        print("Success!")
+    except Exception as e:
+        print(f"Error: {e}")
+
+if __name__ == '__main__':
+    test_exists_exclude()
\ No newline at end of file
