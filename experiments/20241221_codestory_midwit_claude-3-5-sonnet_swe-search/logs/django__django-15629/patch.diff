diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py
index 696bfd7742..616756aca6 100644
--- a/django/db/backends/base/schema.py
+++ b/django/db/backends/base/schema.py
@@ -1183,17 +1183,29 @@ class BaseDatabaseSchemaEditor:
         )
 
     def _alter_column_collation_sql(self, model, new_field, new_type, new_collation):
-        return (
-            self.sql_alter_column_collate
-            % {
-                "column": self.quote_name(new_field.column),
-                "type": new_type,
-                "collation": " " + self._collate_sql(new_collation)
-                if new_collation
-                else "",
-            },
-            [],
-        )
+        """
+        Hook to specialize column collation alteration.
+        Return a (sql, params) fragment to set a column's collation.
+        """
+        if new_collation:
+            # If this is a foreign key field, check if we need to propagate collation
+            if new_field.remote_field and new_field.db_constraint:
+                # Get the target field's collation
+                target_field = new_field.remote_field.model._meta.get_field(new_field.remote_field.field_name)
+                if hasattr(target_field, 'db_collation') and target_field.db_collation:
+                    new_collation = target_field.db_collation
+            return (
+                self.sql_alter_column_collate
+                % {
+                    "column": self.quote_name(new_field.column),
+                    "type": new_type,
+                    "collation": " " + self._collate_sql(new_collation)
+                    if new_collation
+                    else "",
+                },
+                [],
+            )
+        return None
 
     def _alter_many_to_many(self, model, old_field, new_field, strict):
         """Alter M2Ms to repoint their to= endpoints."""
diff --git a/django/db/backends/mysql/schema.py b/django/db/backends/mysql/schema.py
index 562b209eef..e2e402fe9d 100644
--- a/django/db/backends/mysql/schema.py
+++ b/django/db/backends/mysql/schema.py
@@ -167,6 +167,17 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):
 
     def _alter_column_type_sql(self, model, old_field, new_field, new_type):
         new_type = self._set_field_new_type_null_status(old_field, new_type)
+        # If this is a primary key with collation, propagate collation to foreign keys
+        if new_field.primary_key and hasattr(new_field, 'db_collation') and new_field.db_collation:
+            # Add collation to the type if not already present
+            if 'COLLATE' not in new_type.upper():
+                new_type = f"{new_type} COLLATE {new_field.db_collation}"
+        # If this is a foreign key, inherit collation from the target field
+        elif new_field.remote_field and new_field.db_constraint:
+            target_field = new_field.remote_field.model._meta.get_field(new_field.remote_field.field_name)
+            if hasattr(target_field, 'db_collation') and target_field.db_collation:
+                if 'COLLATE' not in new_type.upper():
+                    new_type = f"{new_type} COLLATE {target_field.db_collation}"
         return super()._alter_column_type_sql(model, old_field, new_field, new_type)
 
     def _rename_field_sql(self, table, old_field, new_field, new_type):
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..befae89e6d
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,90 @@
+import os
+import django
+from django.conf import settings
+from django.db import models, migrations, connection
+from django.core.management import execute_from_command_line
+from django.db.migrations.executor import MigrationExecutor
+from django.db.migrations.state import ProjectState
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[],
+)
+
+django.setup()
+
+# Create tables using raw SQL to test collation propagation
+with connection.cursor() as cursor:
+    try:
+        # Create Account table with collation
+        cursor.execute("""
+            CREATE TABLE b_manage_account (
+                id varchar(22) COLLATE BINARY PRIMARY KEY,
+                name varchar(100)
+            )
+        """)
+
+        # Create Address table with foreign key
+        cursor.execute("""
+            CREATE TABLE b_manage_address (
+                id varchar(22) COLLATE BINARY PRIMARY KEY,
+                account_id varchar(22) NOT NULL,
+                street varchar(100),
+                FOREIGN KEY (account_id) REFERENCES b_manage_account(id)
+            )
+        """)
+
+        # Create Profile table with foreign key
+        cursor.execute("""
+            CREATE TABLE b_manage_profile (
+                id varchar(22) COLLATE BINARY PRIMARY KEY,
+                account_id varchar(22),
+                bio text,
+                FOREIGN KEY (account_id) REFERENCES b_manage_account(id)
+            )
+        """)
+
+        # Now let's check the collation of the foreign key columns
+        cursor.execute("""
+            SELECT name, type
+            FROM pragma_table_info('b_manage_address')
+            WHERE name = 'account_id'
+            UNION ALL
+            SELECT name, type
+            FROM pragma_table_info('b_manage_profile')
+            WHERE name = 'account_id'
+        """)
+        
+        results = cursor.fetchall()
+        print("\nColumn info for foreign key columns:")
+        for column, type_ in results:
+            print(f"{column}: {type_}")
+
+        # Verify that foreign key constraints are working
+        cursor.execute("""
+            SELECT m.name as table_name, i.'from' as column_name, 
+                   p.name as referenced_table, i.'to' as referenced_column
+            FROM sqlite_master m
+            JOIN pragma_foreign_key_list(m.name) i
+            JOIN sqlite_master p ON p.name = i.'table'
+            WHERE m.type = 'table'
+            AND m.name IN ('b_manage_address', 'b_manage_profile')
+        """)
+        
+        results = cursor.fetchall()
+        print("\nForeign key constraints:")
+        for result in results:
+            print(f"{result[0]}.{result[1]} -> {result[2]}.{result[3]}")
+
+    except Exception as e:
+        print(f"Error during table creation or verification: {e}")
+        exit(1)
+
+print("\nTest completed successfully")
\ No newline at end of file
