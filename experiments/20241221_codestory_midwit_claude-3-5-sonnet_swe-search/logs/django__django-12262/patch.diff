diff --git a/django/template/library.py b/django/template/library.py
index 20bc86dac8..802ede3eda 100644
--- a/django/template/library.py
+++ b/django/template/library.py
@@ -261,16 +261,16 @@ def parse_bits(parser, bits, params, varargs, varkw, defaults,
         if kwarg:
             # The kwarg was successfully extracted
             param, value = kwarg.popitem()
-            if param not in params and param not in unhandled_kwargs and varkw is None:
-                # An unexpected keyword argument was supplied
-                raise TemplateSyntaxError(
-                    "'%s' received unexpected keyword argument '%s'" %
-                    (name, param))
-            elif param in kwargs:
+            if param in kwargs:
                 # The keyword argument has already been supplied once
                 raise TemplateSyntaxError(
                     "'%s' received multiple values for keyword argument '%s'" %
                     (name, param))
+            elif param not in params and param not in kwonly and param not in unhandled_kwargs and varkw is None:
+                # An unexpected keyword argument was supplied
+                raise TemplateSyntaxError(
+                    "'%s' received unexpected keyword argument '%s'" %
+                    (name, param))
             else:
                 # All good, record the keyword argument
                 kwargs[str(param)] = value
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..b645a9c83e
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,88 @@
+import django
+from django.conf import settings
+from django.template import Library, Context
+from django.template.base import TemplateSyntaxError, Node
+from django.template.engine import Engine
+
+if not settings.configured:
+    settings.configure()
+    django.setup()
+
+# Test cases
+def test_keyword_only_with_default():
+    try:
+        # Test a keyword-only argument with default value
+        def hello(*, greeting='hello'):
+            return f'{greeting} world'
+        
+        # Try with a valid keyword argument
+        result = hello(greeting='hi')
+        print("Test 1a succeeded with result:", result)
+        
+        # Try with default value
+        result = hello()
+        print("Test 1b succeeded with result:", result)
+        
+    except Exception as e:
+        print(f"Test 1 failed with: {str(e)}")
+
+def test_duplicate_keyword():
+    try:
+        # Test duplicate keyword argument
+        def hi(*, greeting):
+            return f'{greeting} world'
+        
+        # Simulate template engine behavior by building kwargs dict
+        kwargs = {}
+        # First assignment
+        kwargs['greeting'] = 'hi'
+        # Second assignment would happen in template parsing
+        if 'greeting' in kwargs:
+            print("Test 2 failed as expected with: got multiple values for keyword argument 'greeting'")
+        else:
+            kwargs['greeting'] = 'hello'
+            result = hi(**kwargs)
+            print("Test 2 succeeded unexpectedly with:", result)
+    except Exception as e:
+        print(f"Test 2 failed with unexpected error: {str(e)}")
+
+def test_multiple_keyword_only():
+    try:
+        # Test multiple keyword-only arguments
+        def multi_greet(*, greeting='hello', name='world', suffix='!'):
+            return f'{greeting} {name}{suffix}'
+        
+        result = multi_greet(greeting='hi', name='django', suffix='!!!')
+        print("Test 3 succeeded with result:", result)
+    except Exception as e:
+        print(f"Test 3 failed with: {str(e)}")
+
+def test_mixed_args():
+    try:
+        # Test mixing positional and keyword-only arguments
+        def greet(name, *, greeting='hello', suffix='!'):
+            return f'{greeting} {name}{suffix}'
+        
+        result = greet('django', greeting='hi', suffix='!!!')
+        print("Test 4 succeeded with result:", result)
+    except Exception as e:
+        print(f"Test 4 failed with: {str(e)}")
+
+def test_default_values():
+    try:
+        # Test using default values
+        def multi_greet(*, greeting='hello', name='world', suffix='!'):
+            return f'{greeting} {name}{suffix}'
+        
+        result = multi_greet(name='django')
+        print("Test 5 succeeded with result:", result)
+    except Exception as e:
+        print(f"Test 5 failed with: {str(e)}")
+
+# Run all tests
+print("Running tests...")
+test_keyword_only_with_default()
+test_duplicate_keyword()
+test_multiple_keyword_only()
+test_mixed_args()
+test_default_values()
\ No newline at end of file
