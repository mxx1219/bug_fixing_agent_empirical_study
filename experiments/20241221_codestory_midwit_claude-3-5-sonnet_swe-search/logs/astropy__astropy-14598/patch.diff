diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py
index 1b3285ddce..bc1b8b65d0 100644
--- a/astropy/io/fits/card.py
+++ b/astropy/io/fits/card.py
@@ -768,7 +768,9 @@ class Card(_Verify):
         if m.group("bool") is not None:
             value = m.group("bool") == "T"
         elif m.group("strg") is not None:
-            value = re.sub("''", "'", m.group("strg"))
+            # Do not replace double single-quotes with single quotes
+            # as they are valid FITS string values
+            value = m.group("strg")
         elif m.group("numr") is not None:
             #  Check for numbers with leading 0s.
             numr = self._number_NFSC_RE.match(m.group("numr"))
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..3d86ea6880
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,23 @@
+from astropy.io import fits
+
+print("Test 1: Testing with trailing double single quotes")
+print("-" * 50)
+for n in range(60, 70):
+    card1 = fits.Card('CONFIG', "x" * n + "''")
+    card2 = fits.Card.fromstring(str(card1))
+    print(f"n={n}, len={len(card1.value)}, equal={card1.value == card2.value}")
+    if card1.value != card2.value:
+        print(f"card1: {card1.value}")
+        print(f"card2: {card2.value}")
+        print()
+
+print("\nTest 2: Testing with embedded double single quotes")
+print("-" * 50)
+for n in range(50, 70):
+    card1 = fits.Card('CONFIG', "x" * n + "''" + "x"*10)
+    card2 = fits.Card.fromstring(str(card1))
+    print(f"n={n}, len={len(card1.value)}, equal={card1.value == card2.value}")
+    if card1.value != card2.value:
+        print(f"card1: {card1.value}")
+        print(f"card2: {card2.value}")
+        print()
\ No newline at end of file
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..38c35346e3
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,27 @@
+from astropy.io import fits
+
+def test_double_quotes():
+    print("Test 1: Testing with trailing double single quotes")
+    print("-" * 50)
+    for n in range(60, 70):
+        card1 = fits.Card('CONFIG', "x" * n + "''")
+        card2 = fits.Card.fromstring(str(card1))
+        print(f"n={n}, len={len(card1.value)}, equal={card1.value == card2.value}")
+        if card1.value != card2.value:
+            print(f"card1: {card1.value}")
+            print(f"card2: {card2.value}")
+            print()
+
+    print("\nTest 2: Testing with embedded double single quotes")
+    print("-" * 50)
+    for n in range(50, 70):
+        card1 = fits.Card('CONFIG', "x" * n + "''" + "x"*10)
+        card2 = fits.Card.fromstring(str(card1))
+        print(f"n={n}, len={len(card1.value)}, equal={card1.value == card2.value}")
+        if card1.value != card2.value:
+            print(f"card1: {card1.value}")
+            print(f"card2: {card2.value}")
+            print()
+
+if __name__ == '__main__':
+    test_double_quotes()
\ No newline at end of file
diff --git a/test_minimal.py b/test_minimal.py
new file mode 100644
index 0000000000..c6496cd134
--- /dev/null
+++ b/test_minimal.py
@@ -0,0 +1,67 @@
+import re
+
+class Card:
+    _strg = r"\'(?P<strg>([ -~]+?|\'\'|) *?)\'(?=$|/| )"
+    _comm_field = r"(?P<comm_field>(?P<sepr>/ *)(?P<comm>(.|\n)*))"
+    _value_NFSC_RE = re.compile(
+        r'(?P<valu_field> *'
+            r'(?P<valu>'
+                rf'{_strg}|'
+                r'(?P<bool>[FT])|'
+                r'(?P<numr>[+-]? *(\.\d+|\d+(\.\d*)?) *([deDE] *[+-]? *\d+)?)|'
+                r'(?P<cplx>\( *'
+                    r'(?P<real>[+-]? *(\.\d+|\d+(\.\d*)?) *([deDE] *[+-]? *\d+)?) *, *'
+                    r'(?P<imag>[+-]? *(\.\d+|\d+(\.\d*)?) *([deDE] *[+-]? *\d+)?) *\))'
+            fr')? *){_comm_field}?$'
+    )
+
+    def __init__(self, keyword, value):
+        self._value = value
+        self._keyword = keyword
+        self._image = f"{keyword:8s}= '{value}'"
+
+    def _split(self):
+        return [self._keyword, self._image[10:]]
+
+    def _parse_value(self):
+        m = self._value_NFSC_RE.match(self._split()[1])
+        if m is None:
+            raise ValueError("Invalid value")
+        if m.group("strg") is not None:
+            # Do not replace double single-quotes with single quotes
+            # as they are valid FITS string values
+            value = m.group("strg")
+        return value
+
+    @classmethod
+    def fromstring(cls, card_string):
+        keyword = card_string[:8].strip()
+        value = card_string[10:].strip()  # Get everything after '= '
+        if value.startswith("'") and value.endswith("'"):
+            value = value[1:-1]  # Remove enclosing quotes
+        return cls(keyword, value)
+
+    def __str__(self):
+        return self._image
+
+print("Test 1: Testing with trailing double single quotes")
+print("-" * 50)
+for n in range(60, 70):
+    card1 = Card('CONFIG', "x" * n + "''")
+    card2 = Card.fromstring(str(card1))
+    print(f"n={n}, len={len(card1._value)}, equal={card1._value == card2._value}")
+    if card1._value != card2._value:
+        print(f"card1: {card1._value}")
+        print(f"card2: {card2._value}")
+        print()
+
+print("\nTest 2: Testing with embedded double single quotes")
+print("-" * 50)
+for n in range(50, 70):
+    card1 = Card('CONFIG', "x" * n + "''" + "x"*10)
+    card2 = Card.fromstring(str(card1))
+    print(f"n={n}, len={len(card1._value)}, equal={card1._value == card2._value}")
+    if card1._value != card2._value:
+        print(f"card1: {card1._value}")
+        print(f"card2: {card2._value}")
+        print()
\ No newline at end of file
