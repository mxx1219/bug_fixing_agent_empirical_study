diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py
index 6752a8e3c0..74eed44e48 100644
--- a/django/db/backends/sqlite3/schema.py
+++ b/django/db/backends/sqlite3/schema.py
@@ -326,8 +326,9 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):
         """Create a field on a model."""
         # Fields with default values cannot by handled by ALTER TABLE ADD
         # COLUMN statement because DROP DEFAULT is not supported in
-        # ALTER TABLE.
-        if not field.null or self.effective_default(field) is not None:
+        # ALTER TABLE. The same applies to unique fields since SQLite
+        # doesn't support adding unique columns with ALTER TABLE.
+        if not field.null or self.effective_default(field) is not None or field.unique:
             self._remake_table(model, create_field=field)
         else:
             super().add_field(model, field)
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..1299e9db6a
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,84 @@
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_sqlite_settings')
+
+from django.conf import settings
+from django.db import models, migrations
+from django.db.migrations.state import ProjectState
+from django.db.migrations.executor import MigrationExecutor
+from django.db import connections
+
+# Create test settings
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+settings.configure(
+    DEBUG=True,
+    DATABASES=DATABASES,
+    INSTALLED_APPS=[],
+    USE_TZ=False,
+)
+
+import django
+django.setup()
+
+# Create test models
+class RefreshToken(models.Model):
+    class Meta:
+        app_label = 'test_app'
+
+class AccessToken(models.Model):
+    class Meta:
+        app_label = 'test_app'
+    source_refresh_token = models.OneToOneField(
+        RefreshToken,
+        on_delete=models.SET_NULL,
+        null=True,
+        blank=True,
+        related_name='refreshed_access_token'
+    )
+
+# Create and run the migration
+class TestMigration(migrations.Migration):
+    dependencies = []
+
+    operations = [
+        migrations.CreateModel(
+            name='RefreshToken',
+            fields=[
+                ('id', models.AutoField(primary_key=True)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='AccessToken',
+            fields=[
+                ('id', models.AutoField(primary_key=True)),
+            ],
+        ),
+        migrations.AddField(
+            model_name='AccessToken',
+            name='source_refresh_token',
+            field=models.OneToOneField(
+                blank=True,
+                null=True,
+                on_delete=models.SET_NULL,
+                to='RefreshToken',
+                related_name='refreshed_access_token'
+            ),
+        ),
+    ]
+
+# Run the migration
+connection = connections['default']
+executor = MigrationExecutor(connection)
+project_state = ProjectState()
+migration = TestMigration('test_migration', 'test_app')
+
+try:
+    executor.apply_migration(project_state, migration)
+    print("Migration succeeded - this is unexpected!")
+except Exception as e:
+    print(f"Migration failed as expected with: {str(e)}")
\ No newline at end of file
