diff --git a/django/contrib/admin/helpers.py b/django/contrib/admin/helpers.py
index dd154f72ee..209fecd6c8 100644
--- a/django/contrib/admin/helpers.py
+++ b/django/contrib/admin/helpers.py
@@ -209,7 +209,11 @@ class AdminReadonlyField:
             remote_field.model._meta.model_name,
         )
         try:
-            url = reverse(url_name, args=[quote(remote_obj.pk)])
+            url = reverse(
+                url_name,
+                args=[quote(remote_obj.pk)],
+                current_app=self.model_admin.admin_site.name if self.model_admin else None
+            )
             return format_html('<a href="{}">{}</a>', url, remote_obj)
         except NoReverseMatch:
             return str(remote_obj)
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..f9d2ae86b1
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,110 @@
+import os
+import django
+from django.conf import settings
+from django.contrib import admin
+from django.db import models
+from django.test import TestCase, RequestFactory
+from django.urls import path, reverse
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+            'django.contrib.admin',
+            'django.contrib.sessions',
+        ],
+        MIDDLEWARE=[
+            'django.contrib.sessions.middleware.SessionMiddleware',
+            'django.contrib.auth.middleware.AuthenticationMiddleware',
+        ],
+        ROOT_URLCONF='__main__',
+        SECRET_KEY='dummy-key-for-tests',
+    )
+    django.setup()
+
+# Create test models
+class Author(models.Model):
+    name = models.CharField(max_length=100)
+
+    def __str__(self):
+        return self.name
+
+    class Meta:
+        app_label = 'admin'  # Use existing app_label
+
+class Book(models.Model):
+    title = models.CharField(max_length=100)
+    author = models.ForeignKey(Author, on_delete=models.CASCADE)
+
+    def __str__(self):
+        return self.title
+
+    class Meta:
+        app_label = 'admin'  # Use existing app_label
+
+# Create custom admin site
+class CustomAdminSite(admin.AdminSite):
+    site_url = '/custom-admin'
+    site_header = 'Custom Admin'
+    site_title = 'Custom Admin Portal'
+    index_title = 'Welcome to Custom Admin'
+
+custom_admin_site = CustomAdminSite(name='custom_admin')
+
+# Register models with custom admin
+class BookAdmin(admin.ModelAdmin):
+    readonly_fields = ['author']
+
+custom_admin_site.register(Book, BookAdmin)
+custom_admin_site.register(Author)
+
+# URL patterns
+urlpatterns = [
+    path('custom-admin/', custom_admin_site.urls),
+    path('admin/', admin.site.urls),
+]
+
+# Main execution
+if __name__ == '__main__':
+    # Create database tables
+    from django.db import connection
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(Author)
+        schema_editor.create_model(Book)
+    
+    # Set up the test environment
+    factory = RequestFactory()
+    request = factory.get('/custom-admin/')
+    
+    # Create test data
+    author = Author(name="Test Author")
+    author.save()
+    book = Book(title="Test Book", author=author)
+    book.save()
+    
+    # Get the admin form
+    book_admin = BookAdmin(Book, custom_admin_site)
+    form = book_admin.get_form(request)(instance=book)
+    
+    # Create readonly field instance
+    from django.contrib.admin.helpers import AdminReadonlyField
+    readonly_field = AdminReadonlyField(form, 'author', is_first=True, model_admin=book_admin)
+    
+    # Get the URL for the author link
+    result = readonly_field.get_admin_url(Book._meta.get_field('author').remote_field, author)
+    print(f"Generated URL in result: {result}")
+    
+    # The URL should contain '/custom-admin/' but currently contains '/admin/'
+    if '/admin/' in str(result) and not '/custom-admin/' in str(result):
+        print("ERROR: URL contains '/admin/' instead of '/custom-admin/'")
+    else:
+        print("SUCCESS: URL contains correct admin path")
\ No newline at end of file
