diff --git a/django/core/signing.py b/django/core/signing.py
index c6713c3033..a47bf58bc3 100644
--- a/django/core/signing.py
+++ b/django/core/signing.py
@@ -118,21 +118,70 @@ def dumps(obj, key=None, salt='django.core.signing', serializer=JSONSerializer,
         if len(compressed) < (len(data) - 1):
             data = compressed
             is_compressed = True
-    base64d = b64_encode(data).decode()
-    if is_compressed:
-        base64d = '.' + base64d
-    return TimestampSigner(key, salt=salt).sign(base64d)
+
+    # Use legacy format if DEFAULT_HASHING_ALGORITHM is sha1
+    if settings.DEFAULT_HASHING_ALGORITHM == 'sha1':
+        if is_compressed:
+            data = b'.' + data
+        value = b64_encode(data).decode()
+        key = key or settings.SECRET_KEY
+        # Use legacy format with sha1
+        return Signer(key, sep=':', salt=salt, algorithm='sha1').sign(value)
+    else:
+        base64d = b64_encode(data).decode()
+        if is_compressed:
+            base64d = '.' + base64d
+        return TimestampSigner(key, salt=salt).sign(base64d)
 
 
 def loads(s, key=None, salt='django.core.signing', serializer=JSONSerializer, max_age=None):
     """
     Reverse of dumps(), raise BadSignature if signature fails.
+    When DEFAULT_HASHING_ALGORITHM is sha1, try both new and legacy formats.
 
     The serializer is expected to accept a bytestring.
     """
+    # Try all possible combinations of algorithms and signer types
+    errors = []
+    
+    # Try TimestampSigner with current algorithm
+    try:
+        return _loads_with_algorithm(s, key, salt, serializer, max_age, settings.DEFAULT_HASHING_ALGORITHM, use_timestamp=True)
+    except (BadSignature, ValueError) as e:
+        errors.append(str(e))
+
+    # Try regular Signer with current algorithm
+    try:
+        return _loads_with_algorithm(s, key, salt, serializer, max_age, settings.DEFAULT_HASHING_ALGORITHM, use_timestamp=False)
+    except (BadSignature, ValueError) as e:
+        errors.append(str(e))
+
+    # If current algorithm is sha1, also try sha256
+    if settings.DEFAULT_HASHING_ALGORITHM == 'sha1':
+        try:
+            return _loads_with_algorithm(s, key, salt, serializer, max_age, 'sha256', use_timestamp=True)
+        except (BadSignature, ValueError) as e:
+            errors.append(str(e))
+
+        try:
+            return _loads_with_algorithm(s, key, salt, serializer, max_age, 'sha256', use_timestamp=False)
+        except (BadSignature, ValueError) as e:
+            errors.append(str(e))
+
+    # If all attempts fail, raise the last error
+    raise BadSignature("All decoding attempts failed: " + "; ".join(errors))
+
+def _loads_with_algorithm(s, key, salt, serializer, max_age, algorithm, use_timestamp=True):
+    """Helper function to load signed data with a specific algorithm."""
     # TimestampSigner.unsign() returns str but base64 and zlib compression
     # operate on bytes.
-    base64d = TimestampSigner(key, salt=salt).unsign(s, max_age=max_age).encode()
+    if use_timestamp:
+        signer = TimestampSigner(key, salt=salt, algorithm=algorithm)
+        base64d = signer.unsign(s, max_age=max_age).encode()
+    else:
+        signer = Signer(key, salt=salt, algorithm=algorithm)
+        base64d = signer.unsign(s).encode()
+
     decompress = base64d[:1] == b'.'
     if decompress:
         # It's compressed; uncompress it first
@@ -168,7 +217,16 @@ class Signer:
         return base64_hmac(self.salt + 'signer', value, self.key, algorithm=self.legacy_algorithm)
 
     def sign(self, value):
-        return '%s%s%s' % (value, self.sep, self.signature(value))
+        """
+        Add signature to the value.
+        If DEFAULT_HASHING_ALGORITHM is sha1, use legacy format for compatibility.
+        """
+        if self.algorithm == 'sha1':
+            # Use legacy format for sha1
+            sig = self._legacy_signature(value)
+        else:
+            sig = self.signature(value)
+        return '%s%s%s' % (value, self.sep, sig)
 
     def unsign(self, signed_value):
         if self.sep not in signed_value:
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..09dc693819
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,40 @@
+from django.conf import settings
+from django.core import signing
+from django.contrib.sessions.serializers import JSONSerializer
+
+def test_session_data(data, write_algorithm, read_algorithm):
+    print(f"\nTesting: Write with {write_algorithm}, Read with {read_algorithm}")
+    print("-" * 60)
+    
+    # Configure writing algorithm
+    settings.DEFAULT_HASHING_ALGORITHM = write_algorithm
+    
+    # Create session data
+    signed_data = signing.dumps(data, serializer=JSONSerializer, salt='django.contrib.sessions.SessionBase')
+    print(f"Session data signed with {write_algorithm}:", signed_data)
+
+    # Try to decode it with read_algorithm
+    settings.DEFAULT_HASHING_ALGORITHM = read_algorithm
+    
+    try:
+        decoded_data = signing.loads(signed_data, serializer=JSONSerializer, salt='django.contrib.sessions.SessionBase')
+        print(f"Successfully decoded data with {read_algorithm}:", decoded_data)
+        return True
+    except signing.BadSignature as e:
+        print(f"Failed to decode session data with {read_algorithm}:", str(e))
+        return False
+
+# Configure Django settings
+settings.configure(
+    SECRET_KEY='django-insecure-test-key',
+    DEFAULT_HASHING_ALGORITHM='sha256'
+)
+
+# Test data
+data = {'user_id': 123, 'some_data': 'test'}
+
+# Test all combinations
+test_session_data(data, 'sha256', 'sha1')
+test_session_data(data, 'sha1', 'sha256')
+test_session_data(data, 'sha1', 'sha1')
+test_session_data(data, 'sha256', 'sha256')
\ No newline at end of file
