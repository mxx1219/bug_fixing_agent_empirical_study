diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py
index 09785e8586..c7f5dd27b3 100644
--- a/django/db/backends/base/schema.py
+++ b/django/db/backends/base/schema.py
@@ -450,15 +450,25 @@ class BaseDatabaseSchemaEditor:
 
         # Make M2M tables
         for field in model._meta.local_many_to_many:
-            if field.remote_field.through._meta.auto_created:
-                self.create_model(field.remote_field.through)
+            through = field.remote_field.through
+            # Resolve string reference to through model if needed
+            if isinstance(through, str):
+                through = field.opts.apps.get_model(through)
+                field.remote_field.through = through
+            if through._meta.auto_created:
+                self.create_model(through)
 
     def delete_model(self, model):
         """Delete a model from the database."""
         # Handle auto-created intermediary models
         for field in model._meta.local_many_to_many:
-            if field.remote_field.through._meta.auto_created:
-                self.delete_model(field.remote_field.through)
+            through = field.remote_field.through
+            # Resolve string reference to through model if needed
+            if isinstance(through, str):
+                through = field.opts.apps.get_model(through)
+                field.remote_field.through = through
+            if through._meta.auto_created:
+                self.delete_model(through)
 
         # Delete the table
         self.execute(
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..0ceadfd813
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,90 @@
+import os
+import sys
+import django
+from django.conf import settings
+from django.core.management import execute_from_command_line
+
+# Create a temporary directory for the test project
+TEST_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'test_project')
+os.makedirs(TEST_DIR, exist_ok=True)
+
+# Create the Django test project structure
+os.makedirs(os.path.join(TEST_DIR, 'core', 'fonte'), exist_ok=True)
+os.makedirs(os.path.join(TEST_DIR, 'core', 'variavel'), exist_ok=True)
+os.makedirs(os.path.join(TEST_DIR, 'core', 'fonte_variavel'), exist_ok=True)
+
+# Write the models files
+with open(os.path.join(TEST_DIR, 'core', 'fonte', 'models.py'), 'w') as f:
+    f.write('''from django.db import models
+
+class FonteModel(models.Model):
+    nome = models.TextField(unique=True)
+    descricao = models.TextField()
+    data_inicial = models.DateField()
+    data_final = models.DateField(blank=True, null=True)
+    variaveis = models.ManyToManyField("variavel.VariavelModel", through="fonte_variavel.FonteVariavelModel")
+
+    def __str__(self):
+        return self.nome
+
+    class Meta:
+        db_table = "fontes"
+        verbose_name = "Fonte"
+        verbose_name_plural = "Fontes"
+''')
+
+with open(os.path.join(TEST_DIR, 'core', 'variavel', 'models.py'), 'w') as f:
+    f.write('''from django.db import models
+
+class VariavelModel(models.Model):
+    nome = models.TextField(unique=True)
+    descricao = models.TextField()
+
+    class Meta:
+        db_table = 'variaveis'
+        verbose_name = 'Variável'
+        verbose_name_plural = 'Variáveis'
+''')
+
+with open(os.path.join(TEST_DIR, 'core', 'fonte_variavel', 'models.py'), 'w') as f:
+    f.write('''from django.db import models
+
+class FonteVariavelModel(models.Model):
+    variavel = models.ForeignKey('variavel.VariavelModel', on_delete=models.CASCADE)
+    fonte = models.ForeignKey('fonte.FonteModel', on_delete=models.CASCADE)
+
+    class Meta:
+        db_table = 'fontes_variaveis'
+        verbose_name = 'Fonte'
+        verbose_name_plural = 'Fontes'
+''')
+
+# Create __init__.py files
+for app in ['fonte', 'variavel', 'fonte_variavel']:
+    with open(os.path.join(TEST_DIR, 'core', app, '__init__.py'), 'w') as f:
+        pass
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'core.fonte',
+        'core.variavel',
+        'core.fonte_variavel',
+    ],
+    USE_TZ=False,
+)
+
+django.setup()
+
+# Run migrations
+sys.argv = ['manage.py', 'makemigrations']
+execute_from_command_line(sys.argv)
+sys.argv = ['manage.py', 'migrate']
+execute_from_command_line(sys.argv)
\ No newline at end of file
diff --git a/run_tests.py b/run_tests.py
new file mode 100644
index 0000000000..b60dd05ad7
--- /dev/null
+++ b/run_tests.py
@@ -0,0 +1,34 @@
+import os
+import sys
+import django
+from django.conf import settings
+from django.core.management import execute_from_command_line
+from django.test.utils import get_runner
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+    USE_TZ=False,
+)
+
+django.setup()
+
+# Get the test runner
+TestRunner = get_runner(settings)
+test_runner = TestRunner()
+
+# Run the test
+failures = test_runner.run_tests(['tests.test_through_model_resolution'])
+if failures:
+    sys.exit(1)
+print("Tests passed successfully!")
\ No newline at end of file
diff --git a/tests/test_through_model_resolution.py b/tests/test_through_model_resolution.py
new file mode 100644
index 0000000000..042a8625fd
--- /dev/null
+++ b/tests/test_through_model_resolution.py
@@ -0,0 +1,55 @@
+from django.db import models
+from django.test import TestCase
+from django.db.migrations.state import ProjectState
+from django.db.migrations.executor import MigrationExecutor
+from django.db import connection
+
+class ThroughModelResolutionTests(TestCase):
+    def test_through_model_in_different_app(self):
+        """
+        Test that a ManyToManyField with a through model in a different app
+        can be created without AttributeError.
+        """
+        class VariavelModel(models.Model):
+            nome = models.TextField(unique=True)
+            descricao = models.TextField()
+
+            class Meta:
+                app_label = 'variavel'
+                db_table = 'variaveis'
+
+        class FonteVariavelModel(models.Model):
+            variavel = models.ForeignKey('variavel.VariavelModel', on_delete=models.CASCADE)
+            fonte = models.ForeignKey('fonte.FonteModel', on_delete=models.CASCADE)
+
+            class Meta:
+                app_label = 'fonte_variavel'
+                db_table = 'fontes_variaveis'
+
+        class FonteModel(models.Model):
+            nome = models.TextField(unique=True)
+            descricao = models.TextField()
+            data_inicial = models.DateField()
+            data_final = models.DateField(blank=True, null=True)
+            variaveis = models.ManyToManyField(
+                'variavel.VariavelModel',
+                through='fonte_variavel.FonteVariavelModel'
+            )
+
+            class Meta:
+                app_label = 'fonte'
+                db_table = 'fontes'
+
+        # Create a project state with our models
+        project_state = ProjectState()
+        project_state.add_model(VariavelModel._meta.app_label, VariavelModel)
+        project_state.add_model(FonteVariavelModel._meta.app_label, FonteVariavelModel)
+        project_state.add_model(FonteModel._meta.app_label, FonteModel)
+
+        # Create a migration executor
+        executor = MigrationExecutor(connection)
+        executor.loader.project_state = project_state
+
+        # This would previously raise AttributeError: 'str' object has no attribute '_meta'
+        with connection.schema_editor() as schema_editor:
+            schema_editor.create_model(FonteModel)
\ No newline at end of file
