diff --git a/django/forms/models.py b/django/forms/models.py
index 422bc5d178..e03a3803cd 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -1188,7 +1188,7 @@ class ModelChoiceField(ChoiceField):
     # This class is a subclass of ChoiceField for purity, but it doesn't
     # actually use any of ChoiceField's implementation.
     default_error_messages = {
-        'invalid_choice': _('Select a valid choice. That choice is not one of'
+        'invalid_choice': _('Select a valid choice. %(value)s is not one of'
                             ' the available choices.'),
     }
     iterator = ModelChoiceIterator
@@ -1284,7 +1284,11 @@ class ModelChoiceField(ChoiceField):
                 value = getattr(value, key)
             value = self.queryset.get(**{key: value})
         except (ValueError, TypeError, self.queryset.model.DoesNotExist):
-            raise ValidationError(self.error_messages['invalid_choice'], code='invalid_choice')
+            raise ValidationError(
+                self.error_messages['invalid_choice'],
+                code='invalid_choice',
+                params={'value': value},
+            )
         return value
 
     def validate(self, value):
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..02e8ea9b1a
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,61 @@
+from django.conf import settings
+from django.db import models
+from django.forms import ModelForm, ModelChoiceField
+from django.core.exceptions import ValidationError
+
+# Configure Django settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+    ],
+    DEFAULT_AUTO_FIELD='django.db.models.AutoField',
+)
+
+import django
+django.setup()
+
+# Create a simple model
+class DummyModel(models.Model):
+    name = models.CharField(max_length=100)
+    
+    def __str__(self):
+        return self.name
+    
+    class Meta:
+        # This is a hack for the reproduction script
+        managed = False
+        app_label = 'contenttypes'
+
+# Create a form
+class DummyForm:
+    def __init__(self):
+        self.field = ModelChoiceField(queryset=DummyModel.objects.none())
+    
+    def test_validation(self):
+        # Test with numeric value
+        try:
+            self.field.clean('999')
+        except ValidationError as e:
+            print("Numeric value error:", e.messages[0])
+            
+        # Test with string value
+        try:
+            self.field.clean('invalid_string')
+        except ValidationError as e:
+            print("String value error:", e.messages[0])
+            
+        # Test with special characters
+        try:
+            self.field.clean('!@#$%^')
+        except ValidationError as e:
+            print("Special chars error:", e.messages[0])
+
+# Test the validation
+form = DummyForm()
+form.test_validation()
\ No newline at end of file
