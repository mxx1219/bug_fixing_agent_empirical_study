diff --git a/django/contrib/auth/base_user.py b/django/contrib/auth/base_user.py
index 5ee30bf59c..c201f941e3 100644
--- a/django/contrib/auth/base_user.py
+++ b/django/contrib/auth/base_user.py
@@ -136,11 +136,15 @@ class AbstractBaseUser(models.Model):
         Return an HMAC of the password field.
         """
         key_salt = "django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash"
-        return salted_hmac(
+        # Get all possible HMACs using current and fallback keys
+        hmacs = salted_hmac(
             key_salt,
             self.password,
             algorithm="sha256",
-        ).hexdigest()
+            use_fallbacks=True,
+        )
+        # Return the first HMAC (generated with current SECRET_KEY)
+        return hmacs[0].hexdigest()
 
     @classmethod
     def get_email_field_name(cls):
diff --git a/django/utils/crypto.py b/django/utils/crypto.py
index 1c0e7001c6..c8a951660a 100644
--- a/django/utils/crypto.py
+++ b/django/utils/crypto.py
@@ -15,33 +15,49 @@ class InvalidAlgorithm(ValueError):
     pass
 
 
-def salted_hmac(key_salt, value, secret=None, *, algorithm="sha1"):
+def salted_hmac(key_salt, value, secret=None, *, algorithm="sha1", use_fallbacks=False):
     """
     Return the HMAC of 'value', using a key generated from key_salt and a
     secret (which defaults to settings.SECRET_KEY). Default algorithm is SHA1,
     but any algorithm name supported by hashlib can be passed.
 
+    If use_fallbacks is True and settings.SECRET_KEY_FALLBACKS is defined,
+    this will return a list of HMACs generated with the current secret and
+    all fallback secrets.
+
     A different key_salt should be passed in for every application of HMAC.
     """
     if secret is None:
         secret = settings.SECRET_KEY
 
     key_salt = force_bytes(key_salt)
-    secret = force_bytes(secret)
     try:
         hasher = getattr(hashlib, algorithm)
     except AttributeError as e:
         raise InvalidAlgorithm(
             "%r is not an algorithm accepted by the hashlib module." % algorithm
         ) from e
-    # We need to generate a derived key from our base key.  We can do this by
-    # passing the key_salt and our base key through a pseudo-random function.
-    key = hasher(key_salt + secret).digest()
-    # If len(key_salt + secret) > block size of the hash algorithm, the above
-    # line is redundant and could be replaced by key = key_salt + secret, since
-    # the hmac module does the same thing for keys longer than the block size.
-    # However, we need to ensure that we *always* do this.
-    return hmac.new(key, msg=force_bytes(value), digestmod=hasher)
+
+    def _generate_hmac(secret_key):
+        secret_bytes = force_bytes(secret_key)
+        # We need to generate a derived key from our base key.  We can do this by
+        # passing the key_salt and our base key through a pseudo-random function.
+        key = hasher(key_salt + secret_bytes).digest()
+        # If len(key_salt + secret) > block size of the hash algorithm, the above
+        # line is redundant and could be replaced by key = key_salt + secret, since
+        # the hmac module does the same thing for keys longer than the block size.
+        # However, we need to ensure that we *always* do this.
+        return hmac.new(key, msg=force_bytes(value), digestmod=hasher)
+
+    if not use_fallbacks:
+        return _generate_hmac(secret)
+
+    # Generate HMACs for all possible keys
+    hmacs = [_generate_hmac(secret)]
+    if hasattr(settings, 'SECRET_KEY_FALLBACKS'):
+        for fallback_secret in settings.SECRET_KEY_FALLBACKS:
+            hmacs.append(_generate_hmac(fallback_secret))
+    return hmacs
 
 
 RANDOM_STRING_CHARS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..8bc23cb09e
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,36 @@
+from django.conf import settings
+from django.utils.crypto import salted_hmac
+
+# Configure minimal settings
+settings.configure(
+    SECRET_KEY="new_secret_key",
+    SECRET_KEY_FALLBACKS=["old_secret_key"],
+)
+
+# Simulate session auth hash generation
+key_salt = "django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash"
+password = "test_password"
+
+# Generate hash with old key (simulating an existing session)
+old_hash = salted_hmac(
+    key_salt,
+    password,
+    secret="old_secret_key",
+    algorithm="sha256",
+).hexdigest()
+
+# Get all possible hashes with the new implementation
+hmacs = salted_hmac(
+    key_salt,
+    password,
+    algorithm="sha256",
+    use_fallbacks=True,
+)
+
+# Convert all HMACs to hex strings
+current_hashes = [h.hexdigest() for h in hmacs]
+
+print("Old hash:", old_hash)
+print("Current possible hashes:", current_hashes)
+print("Old hash matches one of the current hashes:", old_hash in current_hashes)
+print("Users will remain logged in because the old hash is recognized!")
\ No newline at end of file
