diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py
index c395b0bde2..2c90dedc31 100644
--- a/django/contrib/admin/checks.py
+++ b/django/contrib/admin/checks.py
@@ -771,10 +771,11 @@ class BaseModelAdminChecks:
             except FieldDoesNotExist:
                 return [
                     checks.Error(
-                        "The value of '%s' is not a callable, an attribute of "
-                        "'%s', or an attribute of '%s'."
+                        "The value of '%s' refers to '%s', which is not a callable, "
+                        "an attribute of '%s', or an attribute of '%s'."
                         % (
                             label,
+                            field_name,
                             obj.__class__.__name__,
                             obj.model._meta.label,
                         ),
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..26b21b2ecb
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,53 @@
+from django.conf import settings
+from django.contrib import admin
+from django.contrib.admin.checks import ModelAdminChecks
+from django.db import models
+
+# Configure Django settings
+settings.configure(
+    INSTALLED_APPS=[
+        'django.contrib.admin',
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+        'django.contrib.messages',
+        'django.contrib.sessions',
+    ],
+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+)
+
+import django
+django.setup()
+
+class City(models.Model):
+    class Meta:
+        app_label = 'admin'
+    name = models.CharField(max_length=100)
+    
+    @property
+    def model_property(self):
+        return "Model Property"
+
+def callable_field(obj):
+    return "Callable"
+
+class CityInline(admin.TabularInline):
+    model = City
+    admin_field = "Admin Field"
+    
+    # Test different types of readonly_fields
+    readonly_fields = [
+        'nonexistent_field',  # Should fail - field doesn't exist
+        callable_field,       # Should pass - it's a callable
+        'admin_field',       # Should pass - it's an admin attribute
+        'name',              # Should pass - it's a model field
+        'model_property',    # Should pass - it's a model property
+    ]
+
+# Create an instance of ModelAdminChecks
+checker = ModelAdminChecks()
+
+# Run the checks
+errors = checker._check_readonly_fields(CityInline)
+print("\nError messages:")
+for error in errors:
+    print(error.msg)
\ No newline at end of file
