diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py
index f2ca8c8df9..18a9472a5a 100644
--- a/django/db/backends/base/schema.py
+++ b/django/db/backends/base/schema.py
@@ -562,13 +562,18 @@ class BaseDatabaseSchemaEditor:
         }
         meta_index_names = {constraint.name for constraint in model._meta.indexes}
         columns = [model._meta.get_field(field).column for field in fields]
+        
+        # Skip validation for primary key fields that might have additional unique constraints
+        has_pk = any(model._meta.get_field(field).primary_key for field in fields)
+        
         constraint_names = self._constraint_names(
             model,
             columns,
             exclude=meta_constraint_names | meta_index_names,
             **constraint_kwargs,
         )
-        if len(constraint_names) != 1:
+        
+        if not has_pk and len(constraint_names) != 1:
             raise ValueError(
                 "Found wrong number (%s) of constraints for %s(%s)"
                 % (
@@ -577,7 +582,21 @@ class BaseDatabaseSchemaEditor:
                     ", ".join(columns),
                 )
             )
-        self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))
+        
+        # If we have multiple constraints and one is a PK, we want to remove the non-PK one
+        if constraint_names:
+            if has_pk and len(constraint_names) > 1:
+                # Find the non-PK constraint to remove
+                for name in constraint_names:
+                    if not any(
+                        name == pk_name
+                        for pk_name in self._constraint_names(model, columns, primary_key=True)
+                    ):
+                        self.execute(self._delete_constraint_sql(sql, model, name))
+                        break
+            else:
+                # Normal case - just remove the single constraint
+                self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))
 
     def alter_db_table(self, model, old_db_table, new_db_table):
         """Rename the table a model points to."""
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..2ed9316ade
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,66 @@
+from django.db import connection, migrations, models
+from django.db.migrations.state import ProjectState, ModelState
+from django.conf import settings
+import django
+import os
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[],
+        USE_TZ=False,
+    )
+    django.setup()
+
+def test_schema_editor():
+    # Create a model state
+    class FooBar(models.Model):
+        id = models.AutoField(primary_key=True)
+        name = models.CharField(max_length=100)
+
+        class Meta:
+            unique_together = (('id',),)
+            app_label = 'testapp'
+
+    # Create the model state
+    options = {
+        'unique_together': FooBar._meta.unique_together,
+        'indexes': [],
+        'db_table': 'testapp_foobar',
+    }
+    
+    fields = [
+        ('id', models.AutoField(primary_key=True)),
+        ('name', models.CharField(max_length=100)),
+    ]
+    
+    model_state = ModelState('testapp', 'FooBar', fields, options)
+    
+    # Create the table with unique_together constraint
+    project_state = ProjectState()
+    project_state.add_model(model_state)
+
+    # Try to remove the unique_together constraint
+    try:
+        with connection.schema_editor() as schema_editor:
+            # First create the table
+            schema_editor.create_model(FooBar)
+            
+            # Now try to remove the unique_together constraint
+            schema_editor.alter_unique_together(
+                FooBar,
+                FooBar._meta.unique_together,
+                set()  # Empty set to remove all unique_together constraints
+            )
+        print("Successfully removed unique_together constraint!")
+    except Exception as e:
+        print(f"Error occurred: {str(e)}")
+
+if __name__ == '__main__':
+    test_schema_editor()
\ No newline at end of file
