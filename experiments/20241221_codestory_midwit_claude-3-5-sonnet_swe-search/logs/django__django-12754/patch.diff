diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py
index 30616c0172..21815f38fd 100644
--- a/django/db/migrations/autodetector.py
+++ b/django/db/migrations/autodetector.py
@@ -343,6 +343,16 @@ class MigrationAutodetector:
             # construct a dependency graph for intra-app dependencies
             dependency_graph = {op: set() for op in ops}
             for op in ops:
+                # Handle field moves to subclasses
+                if isinstance(op, operations.CreateModel):
+                    # Look for fields that might be moved from parent classes
+                    for field_name, field in op.fields:
+                        for other_op in ops:
+                            if isinstance(other_op, operations.RemoveField) and other_op.name == field_name:
+                                # Make the CreateModel operation depend on the RemoveField operation
+                                dependency_graph[op].add(other_op)
+                
+                # Handle other dependencies
                 for dep in op._auto_deps:
                     # Resolve intra-app dependencies to handle circular
                     # references involving a swappable model.
@@ -396,6 +406,13 @@ class MigrationAutodetector:
                     operation.name_lower == dependency[2].lower()
                 )
             )
+        # Field being moved to subclass
+        elif dependency[2] is not None and dependency[3] == "moved_to_subclass":
+            return (
+                isinstance(operation, operations.CreateModel) and
+                operation.name_lower == dependency[1].lower() and
+                any(dependency[2] == x for x, y in operation.fields)
+            )
         # Removed field
         elif dependency[2] is not None and dependency[3] is False:
             return (
@@ -558,6 +575,19 @@ class MigrationAutodetector:
             dependencies = [
                 (app_label, model_name, None, False),
             ]
+            
+            # Check if any fields are being moved from parent classes
+            if model_state.bases:
+                for base in model_state.bases:
+                    if isinstance(base, str) and "." in base:
+                        base_app_label, base_name = base.split(".", 1)
+                        if (base_app_label, base_name) in self.old_model_keys:
+                            old_model_state = self.from_state.models[base_app_label, base_name]
+                            # Check each field in the new model to see if it exists in the parent
+                            for field_name, field in model_state.fields.items():
+                                if field_name in old_model_state.fields:
+                                    # This field exists in the parent, so we need to wait for its removal
+                                    dependencies.append((base_app_label, base_name, field_name, "moved_to_subclass"))
             # Depend on all bases
             for base in model_state.bases:
                 if isinstance(base, str) and "." in base:
diff --git a/manage.py b/manage.py
new file mode 100644
index 0000000000..221a9aa72c
--- /dev/null
+++ b/manage.py
@@ -0,0 +1,15 @@
+#!/usr/bin/env python
+import os
+import sys
+
+if __name__ == "__main__":
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "testproject.settings")
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
\ No newline at end of file
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..6ecbfd508a
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,80 @@
+import os
+import sys
+import shutil
+import django
+from pathlib import Path
+
+# Clean up any existing test files
+if os.path.exists('testapp'):
+    shutil.rmtree('testapp')
+if os.path.exists('testproject'):
+    shutil.rmtree('testproject')
+if os.path.exists('db.sqlite3'):
+    os.remove('db.sqlite3')
+
+# Create project structure
+os.makedirs('testproject', exist_ok=True)
+os.makedirs('testapp/migrations', exist_ok=True)
+
+# Create __init__.py files
+Path('testproject/__init__.py').touch()
+Path('testapp/__init__.py').touch()
+Path('testapp/migrations/__init__.py').touch()
+
+# Create settings.py
+with open('testproject/settings.py', 'w') as f:
+    f.write('''
+import os
+
+BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
+
+SECRET_KEY = 'dummy-key-for-tests'
+
+DEBUG = True
+
+INSTALLED_APPS = [
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'testapp',
+]
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
+    }
+}
+
+USE_TZ = False
+''')
+
+# Add current directory to Python path
+sys.path.append(os.getcwd())
+
+# Create initial models.py
+with open('testapp/models.py', 'w') as f:
+    f.write('''from django.db import models
+
+class Readable(models.Model):
+    title = models.CharField(max_length=200)
+''')
+
+print("Making initial migrations...")
+os.system('python manage.py makemigrations testapp')
+os.system('python manage.py migrate')
+
+print("\nUpdating models to move field to subclass...")
+# Update models.py to move field to subclass
+with open('testapp/models.py', 'w') as f:
+    f.write('''from django.db import models
+
+class Readable(models.Model):
+    pass
+
+class Book(Readable):
+    title = models.CharField(max_length=200)
+''')
+
+print("\nMaking and applying migrations for the field move...")
+os.system('python manage.py makemigrations testapp')
+os.system('python manage.py migrate')
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..1b301c0084
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,142 @@
+import os
+import sys
+import shutil
+import django
+from pathlib import Path
+
+def run_test(name, initial_model, updated_model):
+    print(f"\n=== Running test: {name} ===")
+    
+    # Clean up any existing test files
+    if os.path.exists('testapp'):
+        shutil.rmtree('testapp')
+    if os.path.exists('testproject'):
+        shutil.rmtree('testproject')
+    if os.path.exists('db.sqlite3'):
+        os.remove('db.sqlite3')
+
+    # Create project structure
+    os.makedirs('testproject', exist_ok=True)
+    os.makedirs('testapp/migrations', exist_ok=True)
+
+    # Create __init__.py files
+    Path('testproject/__init__.py').touch()
+    Path('testapp/__init__.py').touch()
+    Path('testapp/migrations/__init__.py').touch()
+
+    # Create settings.py
+    with open('testproject/settings.py', 'w') as f:
+        f.write('''
+import os
+
+BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
+
+SECRET_KEY = 'dummy-key-for-tests'
+
+DEBUG = True
+
+INSTALLED_APPS = [
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'testapp',
+]
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
+    }
+}
+
+USE_TZ = False
+''')
+
+    # Create initial models.py
+    with open('testapp/models.py', 'w') as f:
+        f.write(initial_model)
+
+    print("Making initial migrations...")
+    os.system('python manage.py makemigrations testapp')
+    os.system('python manage.py migrate')
+
+    print("\nUpdating models...")
+    with open('testapp/models.py', 'w') as f:
+        f.write(updated_model)
+
+    print("\nMaking and applying migrations...")
+    os.system('python manage.py makemigrations testapp')
+    os.system('python manage.py migrate')
+
+# Test 1: Multiple fields
+run_test(
+    "Multiple fields",
+    '''from django.db import models
+
+class Readable(models.Model):
+    title = models.CharField(max_length=200)
+    description = models.TextField()
+    isbn = models.CharField(max_length=13)
+''',
+    '''from django.db import models
+
+class Readable(models.Model):
+    pass
+
+class Book(Readable):
+    title = models.CharField(max_length=200)
+    description = models.TextField()
+    isbn = models.CharField(max_length=13)
+'''
+)
+
+# Test 2: Fields with foreign keys
+run_test(
+    "Fields with foreign keys",
+    '''from django.db import models
+
+class Author(models.Model):
+    name = models.CharField(max_length=100)
+
+class Readable(models.Model):
+    title = models.CharField(max_length=200)
+    author = models.ForeignKey(Author, on_delete=models.CASCADE)
+''',
+    '''from django.db import models
+
+class Author(models.Model):
+    name = models.CharField(max_length=100)
+
+class Readable(models.Model):
+    pass
+
+class Book(Readable):
+    title = models.CharField(max_length=200)
+    author = models.ForeignKey(Author, on_delete=models.CASCADE)
+'''
+)
+
+# Test 3: Fields with unique constraints
+run_test(
+    "Fields with unique constraints",
+    '''from django.db import models
+
+class Readable(models.Model):
+    title = models.CharField(max_length=200)
+    isbn = models.CharField(max_length=13, unique=True)
+
+    class Meta:
+        unique_together = [('title', 'isbn')]
+''',
+    '''from django.db import models
+
+class Readable(models.Model):
+    pass
+
+class Book(Readable):
+    title = models.CharField(max_length=200)
+    isbn = models.CharField(max_length=13, unique=True)
+
+    class Meta:
+        unique_together = [('title', 'isbn')]
+'''
+)
\ No newline at end of file
