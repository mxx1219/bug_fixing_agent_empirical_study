diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
index 6ea18dd22f..3b2aed2fce 100644
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -314,16 +314,26 @@ class LocalePrefixPattern:
 
     @property
     def language_prefix(self):
+        from django.utils.language import normalize_language_code
         language_code = get_language() or settings.LANGUAGE_CODE
         if language_code == settings.LANGUAGE_CODE and not self.prefix_default_language:
             return ''
         else:
-            return '%s/' % language_code
+            return '%s/' % normalize_language_code(language_code)
 
     def match(self, path):
+        from django.utils.language import normalize_language_code
         language_prefix = self.language_prefix
-        if path.startswith(language_prefix):
-            return path[len(language_prefix):], (), {}
+        path_parts = path.split('/', 1)
+        if not path_parts:
+            return None
+            
+        path_lang = path_parts[0]
+        if path_lang:
+            normalized_path_lang = normalize_language_code(path_lang)
+            if normalized_path_lang == language_prefix[:-1]:  # Remove trailing slash for comparison
+                remaining_path = path_parts[1] if len(path_parts) > 1 else ''
+                return remaining_path, (), {}
         return None
 
     def check(self):
diff --git a/django/utils/language.py b/django/utils/language.py
new file mode 100644
index 0000000000..d178ef9ca6
--- /dev/null
+++ b/django/utils/language.py
@@ -0,0 +1,37 @@
+"""
+Language tag normalization utilities.
+"""
+
+def normalize_language_code(code):
+    """
+    Normalize a language code according to BCP 47 rules.
+    
+    This function handles language codes with script and region components,
+    ensuring they are properly formatted according to BCP 47.
+    
+    For example:
+    - en-us -> en-us
+    - en-latn-us -> en-Latn-US
+    - en-Latn-US -> en-Latn-US
+    """
+    if not code or '-' not in code:
+        return code.lower()
+        
+    parts = code.split('-')
+    # Language part is always lowercase
+    parts[0] = parts[0].lower()
+    
+    if len(parts) >= 3:
+        # If we have 3 parts, assume it's language-script-region
+        # Script is title case, region is uppercase
+        if len(parts[1]) == 4:  # Script tags are 4 chars
+            parts[1] = parts[1].title()
+        if len(parts[2]) == 2:  # Region tags are 2 chars
+            parts[2] = parts[2].upper()
+            
+    elif len(parts) == 2:
+        # If we have 2 parts, it could be language-region
+        if len(parts[1]) == 2:  # Region tags are 2 chars
+            parts[1] = parts[1].upper()
+            
+    return '-'.join(parts)
\ No newline at end of file
diff --git a/django/utils/translation/trans_real.py b/django/utils/translation/trans_real.py
index 7dcc77b46c..4b324eecbf 100644
--- a/django/utils/translation/trans_real.py
+++ b/django/utils/translation/trans_real.py
@@ -39,11 +39,23 @@ accept_language_re = _lazy_re_compile(r'''
         ''', re.VERBOSE)
 
 language_code_re = _lazy_re_compile(
-    r'^[a-z]{1,8}(?:-[a-z0-9]{1,8})*(?:@[a-z0-9]{1,20})?$',
+    # BCP 47 language tag format:
+    # language-script-region-variant-extension-privateuse
+    # where:
+    # language: 2-3 letters (ISO 639-1/2) or 4-8 letters (registered language subtag)
+    # script: 4 letters (ISO 15924)
+    # region: 2 letters (ISO 3166-1) or 3 digits (UN M.49)
+    # variant/extension/privateuse: not used in Django
+    r'^[a-z]{2,8}(?:-[a-z]{4})?(?:-[a-z]{2}|\d{3})?(?:@[a-z0-9]{1,20})?$',
     re.IGNORECASE
 )
 
-language_code_prefix_re = _lazy_re_compile(r'^/(\w+([@-]\w+)?)(/|$)')
+language_code_prefix_re = _lazy_re_compile(
+    # Match BCP 47 language tags in URL paths
+    # e.g., /en-us/, /en-Latn-US/, /en-latn-us/
+    r'^/([a-z]{2,8}(?:-[a-z]{4})?(?:-[a-z]{2}|\d{3})?(?:@[a-z0-9]{1,20})?)',
+    re.IGNORECASE
+)
 
 
 @receiver(setting_changed)
@@ -473,21 +485,25 @@ def get_supported_language_variant(lang_code, strict=False):
     as the provided language codes are taken from the HTTP request. See also
     <https://www.djangoproject.com/weblog/2007/oct/26/security-fix/>.
     """
+    from django.utils.language import normalize_language_code
     if lang_code:
+        # Normalize the language code to handle BCP 47 format
+        normalized_lang_code = normalize_language_code(lang_code)
         # If 'zh-hant-tw' is not supported, try special fallback or subsequent
         # language codes i.e. 'zh-hant' and 'zh'.
-        possible_lang_codes = [lang_code]
+        possible_lang_codes = [normalized_lang_code]
         try:
-            possible_lang_codes.extend(LANG_INFO[lang_code]['fallback'])
+            possible_lang_codes.extend(LANG_INFO[normalized_lang_code]['fallback'])
         except KeyError:
             pass
         i = None
-        while (i := lang_code.rfind('-', 0, i)) > -1:
-            possible_lang_codes.append(lang_code[:i])
+        while (i := normalized_lang_code.rfind('-', 0, i)) > -1:
+            possible_lang_codes.append(normalized_lang_code[:i])
         generic_lang_code = possible_lang_codes[-1]
         supported_lang_codes = get_languages()
 
-        for code in possible_lang_codes:
+        # Try both the original and normalized codes
+        for code in [lang_code, normalized_lang_code, *possible_lang_codes]:
             if code in supported_lang_codes and check_for_language(code):
                 return code
         if not strict:
@@ -505,12 +521,22 @@ def get_language_from_path(path, strict=False):
     If `strict` is False (the default), look for a country-specific variant
     when neither the language code nor its generic variant is found.
     """
+    from django.utils.language import normalize_language_code
     regex_match = language_code_prefix_re.match(path)
     if not regex_match:
         return None
     lang_code = regex_match[1]
+    
+    # First try with the original code
     try:
         return get_supported_language_variant(lang_code, strict=strict)
+    except LookupError:
+        pass
+        
+    # Then try with normalized code
+    try:
+        normalized_code = normalize_language_code(lang_code)
+        return get_supported_language_variant(normalized_code, strict=strict)
     except LookupError:
         return None
 
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..c34d43d456
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,60 @@
+import os
+import sys
+import django
+from django.conf import settings
+from django.urls import path
+from django.http import HttpResponse
+from django.conf.urls.i18n import i18n_patterns
+from django.test import Client
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    SECRET_KEY='dummy-key',
+    ROOT_URLCONF=__name__,
+    ALLOWED_HOSTS=['testserver', 'localhost'],
+    MIDDLEWARE=[
+        'django.middleware.locale.LocaleMiddleware',
+        'django.middleware.common.CommonMiddleware',
+    ],
+    LANGUAGE_CODE='en-us',
+    LANGUAGES=[
+        ('en-us', "English"),
+        ('en-latn-us', "Latin English"),
+        ('en-Latn-US', "BCP 47 case format"),
+    ],
+    USE_I18N=True,
+)
+
+# Initialize Django
+django.setup()
+
+# Define view
+def bangiah(request):
+    return HttpResponse('U!')
+
+# Define URL patterns
+urlpatterns = i18n_patterns(
+    path('', bangiah),
+)
+
+def main():
+    client = Client()
+    
+    # Test different URLs
+    urls_to_test = [
+        '/en-us/',
+        '/en-latn-us/',
+        '/en-Latn-US/',
+    ]
+    
+    print("Testing URLs:")
+    for url in urls_to_test:
+        response = client.get(url)
+        print(f"{url}: {response.status_code} {'Success' if response.status_code == 200 else 'Not Found'}")
+        if response.status_code == 200:
+            print(f"Content: {response.content.decode()}")
+        print()
+
+if __name__ == '__main__':
+    main()
\ No newline at end of file
