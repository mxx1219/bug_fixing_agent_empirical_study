diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py
index e10a5bb6d9..a9d19ae0ce 100644
--- a/django/db/models/fields/files.py
+++ b/django/db/models/fields/files.py
@@ -227,9 +227,16 @@ class FileField(Field):
     def __init__(self, verbose_name=None, name=None, upload_to='', storage=None, **kwargs):
         self._primary_key_set_explicitly = 'primary_key' in kwargs
 
-        self.storage = storage or default_storage
-        if callable(self.storage):
-            self.storage = self.storage()
+        self._storage_callable = None
+        if storage is None:
+            self.storage = default_storage
+        else:
+            if callable(storage):
+                self._storage_callable = storage
+                self.storage = storage()
+            else:
+                self.storage = storage
+
             if not isinstance(self.storage, Storage):
                 raise TypeError(
                     "%s.storage must be a subclass/instance of %s.%s"
@@ -279,7 +286,7 @@ class FileField(Field):
             del kwargs["max_length"]
         kwargs['upload_to'] = self.upload_to
         if self.storage is not default_storage:
-            kwargs['storage'] = self.storage
+            kwargs['storage'] = self._storage_callable if self._storage_callable is not None else self.storage
         return name, path, args, kwargs
 
     def get_internal_type(self):
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..3200cf7fa5
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,63 @@
+from django.core.files.storage import Storage, default_storage
+from django.db import models
+from django.conf import settings
+import django
+import os
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        }
+    )
+    django.setup()
+
+class CustomStorage(Storage):
+    def _open(self, name, mode='rb'):
+        pass
+    
+    def _save(self, name, content):
+        pass
+    
+    def delete(self, name):
+        pass
+    
+    def exists(self, name):
+        pass
+    
+    def listdir(self, path):
+        pass
+    
+    def size(self, name):
+        pass
+    
+    def url(self, name):
+        pass
+
+def get_storage():
+    return CustomStorage()
+
+class TestModel(models.Model):
+    # Using callable storage
+    file = models.FileField(storage=get_storage)
+    
+    class Meta:
+        app_label = 'testapp'
+
+# Get the field
+field = TestModel._meta.get_field('file')
+
+# Deconstruct the field
+name, path, args, kwargs = field.deconstruct()
+
+print("Original storage (should be the callable):", get_storage)
+print("Deconstructed storage (should also be the callable but isn't):", kwargs.get('storage'))
+print("Are they the same?", kwargs.get('storage') is get_storage)
\ No newline at end of file
