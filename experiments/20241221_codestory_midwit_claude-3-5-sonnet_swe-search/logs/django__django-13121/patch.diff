diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py
index 2e283a3193..47522a8e5d 100644
--- a/django/db/backends/base/operations.py
+++ b/django/db/backends/base/operations.py
@@ -580,6 +580,19 @@ class BaseDatabaseOperations:
 
     def convert_durationfield_value(self, value, expression, connection):
         if value is not None:
+            # Handle string values (from SQLite/MySQL)
+            if isinstance(value, str):
+                try:
+                    value = int(value)
+                except (ValueError, TypeError):
+                    try:
+                        # Try parsing as decimal for databases that return decimal string
+                        value = int(decimal.Decimal(value))
+                    except (decimal.InvalidOperation, ValueError, TypeError):
+                        raise ValueError(
+                            "Duration values must be expressed as integer microseconds. "
+                            "Database returned an invalid value: %r" % value
+                        )
             return datetime.timedelta(0, 0, value)
 
     def check_expression_support(self, expression):
diff --git a/django/db/backends/mysql/operations.py b/django/db/backends/mysql/operations.py
index af8cfd86b5..18c2b1b9fc 100644
--- a/django/db/backends/mysql/operations.py
+++ b/django/db/backends/mysql/operations.py
@@ -310,10 +310,58 @@ class DatabaseOperations(BaseDatabaseOperations):
             value = timezone.make_aware(value, self.connection.timezone)
         return value
 
-    def convert_uuidfield_value(self, value, expression, connection):
-        if value is not None:
-            value = uuid.UUID(value)
-        return value
+    def convert_durationfield_value(self, value, expression, connection):
+        if value is None:
+            return value
+
+        # If it's already a timedelta, just return it
+        if isinstance(value, datetime.timedelta):
+            return value
+
+        # Handle integer values (microseconds)
+        try:
+            if isinstance(value, (int, float)):
+                return datetime.timedelta(microseconds=int(value))
+        except (ValueError, TypeError, OverflowError):
+            pass
+
+        # Handle string values from MySQL
+        if isinstance(value, str):
+            try:
+                # MySQL returns duration as 'HH:MM:SS' or 'HHH:MM:SS'
+                hours = minutes = seconds = microseconds = 0
+                time_str = value
+
+                if '.' in time_str:
+                    time_str, microseconds_str = time_str.split('.')
+                    microseconds = int((microseconds_str + '000000')[:6])
+
+                time_parts = time_str.split(':')
+                if len(time_parts) == 3:
+                    hours, minutes, seconds = map(int, time_parts)
+                elif len(time_parts) == 2:
+                    hours, minutes = map(int, time_parts)
+
+                return datetime.timedelta(
+                    hours=hours,
+                    minutes=minutes,
+                    seconds=seconds,
+                    microseconds=microseconds
+                )
+            except (ValueError, TypeError):
+                pass
+
+            # Try parsing string as microseconds
+            try:
+                return datetime.timedelta(microseconds=int(value))
+            except (ValueError, TypeError):
+                pass
+
+        # If all parsing attempts fail, raise ValueError
+        raise ValueError(
+            "Duration values must be expressed as integer microseconds or in "
+            "the format 'HH:MM:SS[.uuuuuu]'. Got %r" % value
+        )
 
     def binary_placeholder_sql(self, value):
         return '_binary %s' if value is not None and not hasattr(value, 'as_sql') else '%s'
diff --git a/django/db/backends/sqlite3/operations.py b/django/db/backends/sqlite3/operations.py
index 9510b5edd9..3b5e64e3bd 100644
--- a/django/db/backends/sqlite3/operations.py
+++ b/django/db/backends/sqlite3/operations.py
@@ -38,9 +38,71 @@ class DatabaseOperations(BaseDatabaseOperations):
         else:
             return len(objs)
 
-    def check_expression_support(self, expression):
-        bad_fields = (models.DateField, models.DateTimeField, models.TimeField)
-        bad_aggregates = (models.Sum, models.Avg, models.Variance, models.StdDev)
+    def convert_durationfield_value(self, value, expression, connection):
+        if value is None:
+            return value
+        
+        # If it's already a timedelta, just return it
+        if isinstance(value, datetime.timedelta):
+            return value
+
+        # Handle integer values (microseconds)
+        try:
+            if isinstance(value, (int, float)):
+                return datetime.timedelta(microseconds=int(value))
+        except (ValueError, TypeError, OverflowError):
+            pass
+
+        # Handle string values from SQLite
+        if isinstance(value, str):
+            # Try to parse duration string in format "X day[s], HH:MM:SS[.uuuuuu]"
+            try:
+                # Split days and time parts
+                days_str = '0'
+                time_str = value
+                
+                if ',' in value:
+                    days_str, time_str = value.split(',', 1)
+                    days_str = days_str.strip().split(' ')[0]  # Extract number from "X day[s]"
+                
+                # Parse time part
+                time_str = time_str.strip()
+                hours = minutes = seconds = microseconds = 0
+                
+                if '.' in time_str:
+                    time_str, microseconds_str = time_str.split('.')
+                    microseconds = int((microseconds_str + '000000')[:6])
+                
+                time_parts = time_str.split(':')
+                if len(time_parts) == 3:
+                    hours, minutes, seconds = map(int, time_parts)
+                elif len(time_parts) == 2:
+                    hours, minutes = map(int, time_parts)
+                
+                days = int(days_str)
+                
+                return datetime.timedelta(
+                    days=days,
+                    hours=hours,
+                    minutes=minutes,
+                    seconds=seconds,
+                    microseconds=microseconds
+                )
+            except (ValueError, TypeError):
+                pass
+
+            # Try parsing string as microseconds
+            try:
+                return datetime.timedelta(microseconds=int(value))
+            except (ValueError, TypeError):
+                pass
+
+        # If all parsing attempts fail, raise ValueError
+        raise ValueError(
+            "Duration values must be expressed as integer microseconds or in "
+            "the format 'X day[s], HH:MM:SS[.uuuuuu]'. Got %r" % value
+        )
+
         if isinstance(expression, bad_aggregates):
             for expr in expression.get_source_expressions():
                 try:
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..0b15ac6df2
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,50 @@
+from django.db import models
+from django.db.models import F
+import datetime
+import os
+import django
+
+# Set up Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+    )
+django.setup()
+
+# Define the model
+class Experiment(models.Model):
+    estimated_time = models.DurationField()
+
+    class Meta:
+        app_label = 'test_app'
+
+# Create the tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Experiment)
+
+# Create a test instance
+test_duration = datetime.timedelta(hours=1)
+Experiment.objects.create(estimated_time=test_duration)
+
+# Try the duration expression that's failing
+delta = datetime.timedelta(days=1)
+try:
+    result = list(Experiment.objects.annotate(duration=F('estimated_time') + delta))
+    print("Success! Result:", result)
+except Exception as e:
+    print("Error occurred:", str(e))
+    import traceback
+    traceback.print_exc()
\ No newline at end of file
diff --git a/test_duration.py b/test_duration.py
new file mode 100644
index 0000000000..c3b9502be3
--- /dev/null
+++ b/test_duration.py
@@ -0,0 +1,69 @@
+from django.db import models
+from django.db.models import F
+import datetime
+import os
+import django
+
+# Set up Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            },
+            'mysql': {
+                'ENGINE': 'django.db.backends.mysql',
+                'NAME': 'test_db',
+                'USER': 'root',
+                'PASSWORD': '',
+                'HOST': 'localhost',
+                'PORT': '3306',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+    )
+django.setup()
+
+# Define the model
+class Experiment(models.Model):
+    estimated_time = models.DurationField()
+
+    class Meta:
+        app_label = 'test_app'
+
+def test_duration_with_db(db_alias='default'):
+    # Create the tables
+    from django.db import connections
+    with connections[db_alias].schema_editor() as schema_editor:
+        schema_editor.create_model(Experiment)
+
+    # Create a test instance
+    test_duration = datetime.timedelta(hours=1)
+    Experiment.objects.using(db_alias).create(estimated_time=test_duration)
+
+    # Try the duration expression that's failing
+    delta = datetime.timedelta(days=1)
+    try:
+        result = list(Experiment.objects.using(db_alias).annotate(duration=F('estimated_time') + delta))
+        print(f"Success with {db_alias}! Result:", result)
+        return True
+    except Exception as e:
+        print(f"Error with {db_alias}:", str(e))
+        import traceback
+        traceback.print_exc()
+        return False
+
+# Test with SQLite
+print("\nTesting with SQLite:")
+test_duration_with_db('default')
+
+# Test with MySQL (commented out since MySQL might not be available in all environments)
+# print("\nTesting with MySQL:")
+# test_duration_with_db('mysql')
\ No newline at end of file
