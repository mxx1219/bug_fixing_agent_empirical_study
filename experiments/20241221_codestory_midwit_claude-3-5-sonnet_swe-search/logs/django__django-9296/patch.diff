diff --git a/django/core/paginator.py b/django/core/paginator.py
index 1f92da5d4f..feea26b19b 100644
--- a/django/core/paginator.py
+++ b/django/core/paginator.py
@@ -26,6 +26,14 @@ class EmptyPage(InvalidPage):
 
 class Paginator:
 
+    def __iter__(self):
+        """
+        Return an iterator that yields Page objects for all pages in the paginator.
+        This allows for more natural iteration over pages using a for loop.
+        """
+        for page_num in self.page_range:
+            yield self.page(page_num)
+
     def __init__(self, object_list, per_page, orphans=0,
                  allow_empty_first_page=True):
         self.object_list = object_list
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..119352e744
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,19 @@
+from django.core.paginator import Paginator
+
+# Create a list of items to paginate
+items = list(range(1, 21))  # 20 items
+
+# Create a paginator with 5 items per page
+paginator = Paginator(items, per_page=5)
+
+print("Current way of iterating through pages:")
+for page_num in paginator.page_range:
+    page = paginator.page(page_num)
+    print(f"Page {page_num}: {list(page.object_list)}")
+
+print("\nTrying to iterate directly (will fail):")
+try:
+    for page in paginator:
+        print(f"Page {page.number}: {list(page.object_list)}")
+except TypeError as e:
+    print(f"Error: {e}")
\ No newline at end of file
