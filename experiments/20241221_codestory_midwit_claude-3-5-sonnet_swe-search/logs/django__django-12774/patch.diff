diff --git a/django/db/models/query.py b/django/db/models/query.py
index d9c9b0db04..7bb6db95b2 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -15,7 +15,7 @@ from django.db import (
     DJANGO_VERSION_PICKLE_KEY, IntegrityError, NotSupportedError, connections,
     router, transaction,
 )
-from django.db.models import AutoField, DateField, DateTimeField, sql
+from django.db.models import AutoField, DateField, DateTimeField, sql, UniqueConstraint
 from django.db.models.constants import LOOKUP_SEP
 from django.db.models.deletion import Collector
 from django.db.models.expressions import Case, Expression, F, Value, When
@@ -689,8 +689,17 @@ class QuerySet:
         """
         assert not self.query.is_sliced, \
             "Cannot use 'limit' or 'offset' with in_bulk"
-        if field_name != 'pk' and not self.model._meta.get_field(field_name).unique:
-            raise ValueError("in_bulk()'s field_name must be a unique field but %r isn't." % field_name)
+        if field_name != 'pk':
+            field = self.model._meta.get_field(field_name)
+            is_unique = field.unique
+            if not is_unique:
+                # Check if there's a UniqueConstraint that makes this field unique
+                for constraint in self.model._meta.constraints:
+                    if isinstance(constraint, UniqueConstraint) and constraint.fields == (field_name,) and constraint.condition is None:
+                        is_unique = True
+                        break
+            if not is_unique:
+                raise ValueError("in_bulk()'s field_name must be a unique field but %r isn't." % field_name)
         if id_list is not None:
             if not id_list:
                 return {}
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..671652235a
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,45 @@
+from django.db import models
+from django.conf import settings
+import os
+
+# Configure minimal settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[],
+    DEFAULT_AUTO_FIELD='django.db.models.AutoField',
+)
+
+import django
+django.setup()
+
+# Create your test model
+class Article(models.Model):
+    slug = models.CharField(max_length=255)
+    
+    class Meta:
+        app_label = 'myapp'
+        constraints = [
+            models.UniqueConstraint(fields=["slug"], name="article_slug_unq")
+        ]
+
+# Create the tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Article)
+
+# Create some test data
+Article.objects.create(slug="test-1")
+Article.objects.create(slug="test-2")
+
+# Try to use in_bulk with the uniquely constrained field
+try:
+    result = Article.objects.in_bulk(field_name="slug")
+    print("Success! in_bulk worked with UniqueConstraint field")
+    print(f"Result: {result}")
+except ValueError as e:
+    print(f"Error occurred as expected: {str(e)}")
\ No newline at end of file
