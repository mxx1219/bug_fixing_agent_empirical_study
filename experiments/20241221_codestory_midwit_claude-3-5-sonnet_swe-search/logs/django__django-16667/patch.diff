diff --git a/django/forms/widgets.py b/django/forms/widgets.py
index 842b73e95c..76c266f416 100644
--- a/django/forms/widgets.py
+++ b/django/forms/widgets.py
@@ -1156,8 +1156,15 @@ class SelectDateWidget(Widget):
             input_format = get_format("DATE_INPUT_FORMATS")[0]
             input_format = formats.sanitize_strftime_format(input_format)
             try:
-                date_value = datetime.date(int(y), int(m), int(d))
-            except ValueError:
+                # Convert strings to integers with bounds checking
+                year = int(y)
+                month = int(m)
+                day = int(d)
+                # Check if values are within reasonable bounds
+                if not (1 <= month <= 12 and 1 <= day <= 31 and 1 <= year <= 9999):
+                    return None
+                date_value = datetime.date(year, month, day)
+            except (ValueError, OverflowError):
                 # Return pseudo-ISO dates with zeros for any unselected values,
                 # e.g. '2017-0-23'.
                 return "%s-%s-%s" % (y or 0, m or 0, d or 0)
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..170d7ef7f0
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,95 @@
+from django import forms
+from django.forms import SelectDateWidget
+from django.http import HttpResponse
+from django.conf import settings
+import django
+
+# Configure minimal Django settings
+if not settings.configured:
+    settings.configure(
+        USE_I18N=False,
+        USE_L10N=False,
+        USE_TZ=False,
+        DATABASES={},
+        INSTALLED_APPS=['django.contrib.contenttypes'],
+    )
+    django.setup()
+
+class ReproForm(forms.Form):
+    my_date = forms.DateField(widget=SelectDateWidget())
+
+def test_case(data, description):
+    print(f"\nTesting {description}:")
+    print(f"Input: {data}")
+    form = ReproForm(data)
+    is_valid = form.is_valid()
+    print(f"Form is valid: {is_valid}")
+    if not is_valid:
+        print(f"Form errors: {form.errors}")
+
+def main():
+    # Test cases
+    test_cases = [
+        (
+            {
+                'my_date_day': '1',
+                'my_date_month': '1',
+                'my_date_year': '1234567821345678'
+            },
+            "overflow year"
+        ),
+        (
+            {
+                'my_date_day': '1',
+                'my_date_month': '13',
+                'my_date_year': '2023'
+            },
+            "invalid month"
+        ),
+        (
+            {
+                'my_date_day': '32',
+                'my_date_month': '1',
+                'my_date_year': '2023'
+            },
+            "invalid day"
+        ),
+        (
+            {
+                'my_date_day': '1',
+                'my_date_month': '1',
+                'my_date_year': '10000'
+            },
+            "year > 9999"
+        ),
+        (
+            {
+                'my_date_day': '1',
+                'my_date_month': '1',
+                'my_date_year': '0'
+            },
+            "year = 0"
+        ),
+        (
+            {
+                'my_date_day': '29',
+                'my_date_month': '2',
+                'my_date_year': '2023'
+            },
+            "invalid February 29 in non-leap year"
+        ),
+        (
+            {
+                'my_date_day': '29',
+                'my_date_month': '2',
+                'my_date_year': '2024'
+            },
+            "valid February 29 in leap year"
+        ),
+    ]
+
+    for data, description in test_cases:
+        test_case(data, description)
+
+if __name__ == '__main__':
+    main()
\ No newline at end of file
