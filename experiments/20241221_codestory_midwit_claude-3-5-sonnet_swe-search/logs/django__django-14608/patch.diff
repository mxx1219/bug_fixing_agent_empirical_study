diff --git a/django/forms/formsets.py b/django/forms/formsets.py
index a89c35599f..6c347b7742 100644
--- a/django/forms/formsets.py
+++ b/django/forms/formsets.py
@@ -76,6 +76,7 @@ class BaseFormSet:
         self.error_class = error_class
         self._errors = None
         self._non_form_errors = None
+        self._non_form_error_class = 'nonform'
 
         messages = {}
         for cls in reversed(type(self).__mro__):
@@ -295,6 +296,8 @@ class BaseFormSet:
         """
         if self._non_form_errors is None:
             self.full_clean()
+        if not hasattr(self._non_form_errors, 'error_class'):
+            self._non_form_errors = self.error_class(self._non_form_errors, error_class=self._non_form_error_class)
         return self._non_form_errors
 
     @property
@@ -333,7 +336,7 @@ class BaseFormSet:
         self._non_form_errors.
         """
         self._errors = []
-        self._non_form_errors = self.error_class()
+        self._non_form_errors = self.error_class(error_class=self._non_form_error_class)
         empty_forms_count = 0
 
         if not self.is_bound:  # Stop further processing.
@@ -350,7 +353,7 @@ class BaseFormSet:
                 },
                 code='missing_management_form',
             )
-            self._non_form_errors.append(error)
+            self._non_form_errors = self.error_class([error], error_class=self._non_form_error_class)
 
         for i, form in enumerate(self.forms):
             # Empty forms are unchanged forms beyond those with initial data.
@@ -380,7 +383,7 @@ class BaseFormSet:
             # Give self.clean() a chance to do cross-form validation.
             self.clean()
         except ValidationError as e:
-            self._non_form_errors = self.error_class(e.error_list)
+            self._non_form_errors = self.error_class(e.error_list, error_class=self._non_form_error_class)
 
     def clean(self):
         """
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..d9ab48eb07
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,37 @@
+from django.conf import settings
+from django.forms import Form, formset_factory
+from django.core.exceptions import ValidationError
+
+# Configure Django settings
+settings.configure(
+    USE_I18N=False,
+    USE_L10N=False,
+    USE_TZ=False,
+)
+
+class SimpleForm(Form):
+    pass
+
+# Create a formset with our form
+FormSet = formset_factory(SimpleForm)
+
+class CustomFormSet(FormSet):
+    def clean(self):
+        raise ValidationError("This is a non-form error")
+
+# Create a formset instance with data to make it bound
+data = {
+    'form-TOTAL_FORMS': '1',
+    'form-INITIAL_FORMS': '0',
+    'form-MIN_NUM_FORMS': '0',
+    'form-MAX_NUM_FORMS': '1000',
+}
+formset = CustomFormSet(data)
+formset.is_valid()  # This will trigger validation and create the non-form error
+
+# Print the HTML output
+print("Current output (should have nonform class):")
+print(formset.non_form_errors())
+
+print("\nExpected output:")
+print('<ul class="errorlist nonform"><li>This is a non-form error</li></ul>')
\ No newline at end of file
