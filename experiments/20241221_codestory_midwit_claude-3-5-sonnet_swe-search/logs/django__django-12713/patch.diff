diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 69a5fbf389..db7df891e3 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -249,16 +249,17 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):
             return None
         db = kwargs.get('using')
 
-        autocomplete_fields = self.get_autocomplete_fields(request)
-        if db_field.name in autocomplete_fields:
-            kwargs['widget'] = AutocompleteSelectMultiple(db_field.remote_field, self.admin_site, using=db)
-        elif db_field.name in self.raw_id_fields:
-            kwargs['widget'] = widgets.ManyToManyRawIdWidget(db_field.remote_field, self.admin_site, using=db)
-        elif db_field.name in [*self.filter_vertical, *self.filter_horizontal]:
-            kwargs['widget'] = widgets.FilteredSelectMultiple(
-                db_field.verbose_name,
-                db_field.name in self.filter_vertical
-            )
+        if 'widget' not in kwargs:
+            autocomplete_fields = self.get_autocomplete_fields(request)
+            if db_field.name in autocomplete_fields:
+                kwargs['widget'] = AutocompleteSelectMultiple(db_field.remote_field, self.admin_site, using=db)
+            elif db_field.name in self.raw_id_fields:
+                kwargs['widget'] = widgets.ManyToManyRawIdWidget(db_field.remote_field, self.admin_site, using=db)
+            elif db_field.name in [*self.filter_vertical, *self.filter_horizontal]:
+                kwargs['widget'] = widgets.FilteredSelectMultiple(
+                    db_field.verbose_name,
+                    db_field.name in self.filter_vertical
+                )
 
         if 'queryset' not in kwargs:
             queryset = self.get_field_queryset(db, db_field, request)
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..2be3710c76
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,43 @@
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')
+import django
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=['django.contrib.admin', 'django.contrib.contenttypes', 'django.contrib.auth'],
+        DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+    )
+django.setup()
+
+from django.contrib import admin
+from django.db import models
+from django.forms import widgets
+
+# Create custom widget
+class CustomSelectMultiple(widgets.SelectMultiple):
+    pass
+
+# Create models
+class Author(models.Model):
+    class Meta:
+        app_label = 'admin'
+    name = models.CharField(max_length=100)
+
+class Book(models.Model):
+    class Meta:
+        app_label = 'admin'
+    title = models.CharField(max_length=100)
+    authors = models.ManyToManyField(Author)
+
+# Create admin class
+class BookAdmin(admin.ModelAdmin):
+    def formfield_for_manytomany(self, db_field, request, **kwargs):
+        if db_field.name == 'authors':
+            kwargs['widget'] = CustomSelectMultiple()
+        return super().formfield_for_manytomany(db_field, request, **kwargs)
+
+# Test the widget handling
+admin_site = admin.AdminSite()
+book_admin = BookAdmin(Book, admin_site)
+formfield = book_admin.formfield_for_manytomany(Book._meta.get_field('authors'), None, widget=CustomSelectMultiple())
+print(f"Widget class being used: {formfield.widget.__class__.__name__}")
\ No newline at end of file
