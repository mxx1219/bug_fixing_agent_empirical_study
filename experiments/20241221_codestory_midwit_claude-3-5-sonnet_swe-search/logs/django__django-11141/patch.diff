diff --git a/django/db/migrations/loader.py b/django/db/migrations/loader.py
index 8c308621d2..d075fcc5df 100644
--- a/django/db/migrations/loader.py
+++ b/django/db/migrations/loader.py
@@ -84,11 +84,6 @@ class MigrationLoader:
                     continue
                 raise
             else:
-                # Empty directories are namespaces.
-                # getattr() needed on PY36 and older (replace w/attribute access).
-                if getattr(module, '__file__', None) is None:
-                    self.unmigrated_apps.add(app_config.label)
-                    continue
                 # Module is not a package (e.g. migrations.py).
                 if not hasattr(module, '__path__'):
                     self.unmigrated_apps.add(app_config.label)
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..cc91de3dc8
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,50 @@
+import os
+import sys
+import tempfile
+from pathlib import Path
+
+# Create a temporary directory for our test app
+with tempfile.TemporaryDirectory() as temp_dir:
+    # Create a test Django app with migrations but no __init__.py
+    app_dir = Path(temp_dir) / "testapp"
+    migrations_dir = app_dir / "migrations"
+    migrations_dir.mkdir(parents=True)
+    
+    # Create a migration file
+    migration_content = '''from django.db import migrations
+
+class Migration(migrations.Migration):
+    initial = True
+    dependencies = []
+    operations = []
+'''
+    with open(migrations_dir / "0001_initial.py", "w") as f:
+        f.write(migration_content)
+    
+    # Add the temp directory to Python path so we can import the app
+    sys.path.insert(0, temp_dir)
+    
+    # Setup minimal Django settings
+    import django
+    from django.conf import settings
+    settings.configure(
+        INSTALLED_APPS=["testapp"],
+        DATABASES={"default": {"ENGINE": "django.db.backends.sqlite3", "NAME": ":memory:"}},
+    )
+    django.setup()
+    
+    # Try to load migrations
+    from django.db.migrations.loader import MigrationLoader
+    connection = django.db.connections["default"]
+    loader = MigrationLoader(connection)
+    
+    # This will fail because the migrations directory has no __init__.py
+    print("Migrations found:", list(loader.disk_migrations.keys()))
+    print("Unmigrated apps:", loader.unmigrated_apps)
+    
+    if "testapp" in loader.unmigrated_apps:
+        print("\nERROR: testapp was incorrectly marked as unmigrated!")
+        print("This happened because the migrations directory has no __init__.py file")
+        sys.exit(1)
+    else:
+        print("\nSUCCESS: testapp migrations were properly loaded!")
\ No newline at end of file
