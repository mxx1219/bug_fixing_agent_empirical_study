diff --git a/django/core/management/commands/loaddata.py b/django/core/management/commands/loaddata.py
index ac97f13161..48c6b33f08 100644
--- a/django/core/management/commands/loaddata.py
+++ b/django/core/management/commands/loaddata.py
@@ -361,7 +361,8 @@ class Command(BaseCommand):
         current directory.
         """
         dirs = []
-        fixture_dirs = settings.FIXTURE_DIRS
+        # Convert all paths to strings for comparison
+        fixture_dirs = [str(path) for path in settings.FIXTURE_DIRS]
         if len(fixture_dirs) != len(set(fixture_dirs)):
             raise ImproperlyConfigured("settings.FIXTURE_DIRS contains duplicates.")
         for app_config in apps.get_app_configs():
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..5db2830ea4
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,77 @@
+from pathlib import Path
+from django.conf import settings
+from django.core.management import call_command
+from django.test.utils import override_settings
+from django.core.exceptions import ImproperlyConfigured
+
+# Setup minimal Django settings
+settings.configure(
+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+    INSTALLED_APPS=['django.contrib.contenttypes'],
+)
+
+import django
+django.setup()
+
+# Create a temporary directory path both as string and Path
+fixture_dir = "/tmp/fixtures"
+fixture_dir_path = Path(fixture_dir)
+fixture_dir_resolved = str(fixture_dir_path.resolve())
+
+def run_test(fixture_dirs, test_name):
+    print(f"\nRunning test: {test_name}")
+    print(f"FIXTURE_DIRS = {fixture_dirs}")
+    try:
+        settings.FIXTURE_DIRS = fixture_dirs
+        call_command('loaddata', 'dummy.json', verbosity=0)
+        print("ERROR: Duplicate directories were not detected!")
+        return False
+    except ImproperlyConfigured as e:
+        if "contains duplicates" in str(e):
+            print("Success: Duplicate directories were correctly detected")
+            return True
+    except Exception as e:
+        if "No fixture named" in str(e):
+            print("Success: No duplicates detected, got expected fixture not found error")
+            return True
+        print(f"Unexpected error: {str(e)}")
+        return False
+
+# Test cases
+tests = [
+    (
+        [fixture_dir, fixture_dir_path],
+        "Mixed string and Path pointing to same directory"
+    ),
+    (
+        [fixture_dir_path, fixture_dir_path],
+        "Two identical Path instances"
+    ),
+    (
+        [fixture_dir, fixture_dir],
+        "Two identical strings"
+    ),
+    (
+        [fixture_dir, fixture_dir_resolved],
+        "String and resolved path string"
+    ),
+    (
+        [fixture_dir_path, Path(fixture_dir_resolved)],
+        "Path and resolved Path"
+    ),
+    (
+        [fixture_dir, "/tmp/../tmp/fixtures"],
+        "Different paths to same directory"
+    ),
+]
+
+failed = False
+for fixture_dirs, test_name in tests:
+    if not run_test(fixture_dirs, test_name):
+        failed = True
+
+if failed:
+    print("\nSome tests failed!")
+    exit(1)
+else:
+    print("\nAll tests passed!")
\ No newline at end of file
