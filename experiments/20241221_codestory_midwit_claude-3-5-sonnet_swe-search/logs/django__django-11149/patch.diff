diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 880a2cc17b..0e586364fb 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -2030,6 +2030,8 @@ class InlineModelAdmin(BaseModelAdmin):
         # default.
         exclude = exclude or None
         can_delete = self.can_delete and self.has_delete_permission(request, obj)
+        # Set extra=0 if user doesn't have add permission
+        extra = 0 if not self.has_add_permission(request, obj) else self.get_extra(request, obj, **kwargs)
         defaults = {
             'form': self.form,
             'formset': self.formset,
@@ -2037,7 +2039,7 @@ class InlineModelAdmin(BaseModelAdmin):
             'fields': fields,
             'exclude': exclude,
             'formfield_callback': partial(self.formfield_for_dbfield, request=request),
-            'extra': self.get_extra(request, obj, **kwargs),
+            'extra': extra,
             'min_num': self.get_min_num(request, obj, **kwargs),
             'max_num': self.get_max_num(request, obj, **kwargs),
             'can_delete': can_delete,
@@ -2113,29 +2115,47 @@ class InlineModelAdmin(BaseModelAdmin):
 
     def has_add_permission(self, request, obj):
         if self.opts.auto_created:
-            # We're checking the rights to an auto-created intermediate model,
-            # which doesn't have its own individual permissions. The user needs
-            # to have the view permission for the related model in order to
-            # be able to do anything with the intermediate model.
-            return self.has_view_permission(request, obj)
+            # For auto-created models (like m2m through models), check if user has change
+            # permission on both related models
+            opts = self.opts
+            # Find the target model (the one that's not the parent model)
+            for field in opts.fields:
+                if field.remote_field and field.remote_field.model != self.parent_model:
+                    target_opts = field.remote_field.model._meta
+                    return (
+                        request.user.has_perm('%s.%s' % (target_opts.app_label, get_permission_codename('change', target_opts))) and
+                        request.user.has_perm('%s.%s' % (self.parent_model._meta.app_label, get_permission_codename('change', self.parent_model._meta)))
+                    )
         return super().has_add_permission(request)
 
     def has_change_permission(self, request, obj=None):
         if self.opts.auto_created:
-            # We're checking the rights to an auto-created intermediate model,
-            # which doesn't have its own individual permissions. The user needs
-            # to have the view permission for the related model in order to
-            # be able to do anything with the intermediate model.
-            return self.has_view_permission(request, obj)
+            # For auto-created models (like m2m through models), check if user has change
+            # permission on both related models
+            opts = self.opts
+            # Find the target model (the one that's not the parent model)
+            for field in opts.fields:
+                if field.remote_field and field.remote_field.model != self.parent_model:
+                    target_opts = field.remote_field.model._meta
+                    return (
+                        request.user.has_perm('%s.%s' % (target_opts.app_label, get_permission_codename('change', target_opts))) and
+                        request.user.has_perm('%s.%s' % (self.parent_model._meta.app_label, get_permission_codename('change', self.parent_model._meta)))
+                    )
         return super().has_change_permission(request)
 
     def has_delete_permission(self, request, obj=None):
         if self.opts.auto_created:
-            # We're checking the rights to an auto-created intermediate model,
-            # which doesn't have its own individual permissions. The user needs
-            # to have the view permission for the related model in order to
-            # be able to do anything with the intermediate model.
-            return self.has_view_permission(request, obj)
+            # For auto-created models (like m2m through models), check if user has change
+            # permission on both related models
+            opts = self.opts
+            # Find the target model (the one that's not the parent model)
+            for field in opts.fields:
+                if field.remote_field and field.remote_field.model != self.parent_model:
+                    target_opts = field.remote_field.model._meta
+                    return (
+                        request.user.has_perm('%s.%s' % (target_opts.app_label, get_permission_codename('change', target_opts))) and
+                        request.user.has_perm('%s.%s' % (self.parent_model._meta.app_label, get_permission_codename('change', self.parent_model._meta)))
+                    )
         return super().has_delete_permission(request, obj)
 
     def has_view_permission(self, request, obj=None):
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..c4d82def21
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,154 @@
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.admin',
+        'django.contrib.auth',
+        'django.contrib.contenttypes',
+        'django.contrib.sessions',
+        'django.contrib.messages',
+        'django.contrib.staticfiles',
+    ],
+    MIDDLEWARE=[
+        'django.contrib.sessions.middleware.SessionMiddleware',
+        'django.contrib.auth.middleware.AuthenticationMiddleware',
+        'django.contrib.messages.middleware.MessageMiddleware',
+    ],
+    ROOT_URLCONF='reproduce_error',
+    TEMPLATES=[{
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ]
+        },
+    }],
+    SECRET_KEY='dummy-key-for-tests',
+)
+
+django.setup()
+
+from django.contrib import admin
+from django.contrib.auth.models import User, Permission
+from django.contrib.contenttypes.models import ContentType
+from django.db import models, connection
+from django.test import TestCase, RequestFactory
+from django.test.utils import setup_test_environment, teardown_test_environment
+from django.core.management import call_command
+
+# Create test models
+class Photo(models.Model):
+    title = models.CharField(max_length=100, default='Photo')
+    class Meta:
+        app_label = 'admin'
+
+class Report(models.Model):
+    title = models.CharField(max_length=100, default='Report')
+    photos = models.ManyToManyField(Photo)
+    class Meta:
+        app_label = 'admin'
+
+# Admin configuration
+class ReportPhotoInline(admin.TabularInline):
+    model = Report.photos.through
+    show_change_link = True
+
+class ReportAdmin(admin.ModelAdmin):
+    inlines = [ReportPhotoInline]
+
+# Register models
+admin.site.register(Report, ReportAdmin)
+admin.site.register(Photo)
+
+def main():
+    # Create necessary tables
+    with connection.cursor() as cursor:
+        cursor.execute("""
+            CREATE TABLE IF NOT EXISTS admin_photo (
+                id INTEGER PRIMARY KEY AUTOINCREMENT,
+                title VARCHAR(100) NOT NULL DEFAULT 'Photo'
+            )
+        """)
+        cursor.execute("""
+            CREATE TABLE IF NOT EXISTS admin_report (
+                id INTEGER PRIMARY KEY AUTOINCREMENT,
+                title VARCHAR(100) NOT NULL DEFAULT 'Report'
+            )
+        """)
+        cursor.execute("""
+            CREATE TABLE IF NOT EXISTS admin_report_photos (
+                id INTEGER PRIMARY KEY AUTOINCREMENT,
+                report_id INTEGER NOT NULL REFERENCES admin_report(id),
+                photo_id INTEGER NOT NULL REFERENCES admin_photo(id)
+            )
+        """)
+    
+    # Create test data
+    photo = Photo.objects.create(title='Test Photo')
+    report = Report.objects.create(title='Test Report')
+    
+    # Create a user with view-only permissions
+    user = User.objects.create_user(
+        username='viewonly',
+        password='password',
+        is_staff=True
+    )
+    
+    # Get content types
+    report_ct = ContentType.objects.get_for_model(Report)
+    photo_ct = ContentType.objects.get_for_model(Photo)
+    
+    # Assign view permissions only
+    view_report = Permission.objects.get_or_create(
+        codename='view_report',
+        name='Can view report',
+        content_type=report_ct
+    )[0]
+    view_photo = Permission.objects.get_or_create(
+        codename='view_photo',
+        name='Can view photo',
+        content_type=photo_ct
+    )[0]
+    
+    user.user_permissions.add(view_report, view_photo)
+    
+    # Create a request factory
+    factory = RequestFactory()
+    request = factory.get('/')
+    request.user = user
+    
+    # Get the inline admin instance
+    report_admin = ReportAdmin(Report, admin.site)
+    inline_admin = report_admin.inlines[0](Report, admin.site)
+    
+    # Check permissions
+    print("\nChecking permissions for user with view-only access:")
+    print(f"Has view permission: {inline_admin.has_view_permission(request)}")
+    print(f"Has change permission: {inline_admin.has_change_permission(request)}")
+    print(f"Has add permission: {inline_admin.has_add_permission(request, None)}")
+    print(f"Has delete permission: {inline_admin.has_delete_permission(request)}")
+    
+    # Get formset to check if it's editable
+    formset = inline_admin.get_formset(request)
+    print("\nChecking formset properties:")
+    print(f"Formset can_delete: {formset.can_delete}")
+    print(f"Formset max_num: {formset.max_num}")
+    print(f"Formset extra: {formset.extra}")
+
+if __name__ == '__main__':
+    # Run migrations for auth and contenttypes
+    call_command('migrate', 'auth', interactive=False, verbosity=0)
+    call_command('migrate', 'contenttypes', interactive=False, verbosity=0)
+    main()
\ No newline at end of file
