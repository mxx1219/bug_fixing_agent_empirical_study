diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index 5ccef38048..606bb69056 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -83,10 +83,11 @@ def escapejs_filter(value):
 
 
 @register.filter(is_safe=True)
-def json_script(value, element_id):
+def json_script(value, element_id=None):
     """
     Output value JSON-encoded, wrapped in a <script type="application/json">
-    tag.
+    tag. If element_id is provided, the script tag will include an id attribute
+    with that value.
     """
     return _json_script(value, element_id)
 
diff --git a/django/utils/html.py b/django/utils/html.py
index da1b5675ec..18401e10d2 100644
--- a/django/utils/html.py
+++ b/django/utils/html.py
@@ -61,17 +61,24 @@ _json_script_escapes = {
 }
 
 
-def json_script(value, element_id):
+def json_script(value, element_id=None):
     """
     Escape all the HTML/XML special characters with their unicode escapes, so
     value is safe to be output anywhere except for inside a tag attribute. Wrap
     the escaped JSON in a script tag.
+
+    If element_id is provided, the script tag will include an id attribute with that value.
     """
     from django.core.serializers.json import DjangoJSONEncoder
     json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)
+    if element_id is not None:
+        return format_html(
+            '<script id="{}" type="application/json">{}</script>',
+            element_id, mark_safe(json_str)
+        )
     return format_html(
-        '<script id="{}" type="application/json">{}</script>',
-        element_id, mark_safe(json_str)
+        '<script type="application/json">{}</script>',
+        mark_safe(json_str)
     )
 
 
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..0171ad0014
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,21 @@
+from django.utils.html import json_script
+
+# Current behavior - requires element_id
+try:
+    result = json_script({"key": "value"}, None)
+    print("Test with None as element_id:")
+    print(result)
+except TypeError as e:
+    print("Error when element_id is None:", str(e))
+
+try:
+    result = json_script({"key": "value"})
+    print("\nTest without element_id:")
+    print(result)
+except TypeError as e:
+    print("Error when element_id is not provided:", str(e))
+
+# This should work in both current and new implementation
+result = json_script({"key": "value"}, "my-id")
+print("\nTest with element_id provided:")
+print(result)
\ No newline at end of file
