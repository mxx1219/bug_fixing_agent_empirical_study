diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py
index 0caa165e15..6917820604 100644
--- a/django/db/models/query_utils.py
+++ b/django/db/models/query_utils.py
@@ -217,6 +217,7 @@ class RegisterLookupMixin:
         if lookup_name is None:
             lookup_name = lookup.lookup_name
         del cls.class_lookups[lookup_name]
+        cls._clear_cached_lookups()
 
 
 def select_related_descend(field, restricted, requested, load_fields, reverse=False):
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..226a952206
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,37 @@
+from django.db.models import Field
+from django.db.models.lookups import Lookup
+
+class CustomLookup(Lookup):
+    lookup_name = 'custom'
+
+    def as_sql(self, compiler, connection):
+        return '', []
+
+# Create a simple field class that uses RegisterLookupMixin
+class TestField(Field):
+    def __init__(self):
+        pass
+
+    def get_internal_type(self):
+        return 'TextField'
+
+def main():
+    # Register the lookup
+    TestField.register_lookup(CustomLookup)
+    
+    # Get lookups - this will cache the result
+    initial_lookups = TestField.get_lookups()
+    print("Initial lookups:", 'custom' in initial_lookups)
+    
+    # Unregister the lookup
+    TestField._unregister_lookup(CustomLookup)
+    
+    # Get lookups again - this should not return the unregistered lookup
+    # but due to the cache not being cleared, it still does
+    cached_lookups = TestField.get_lookups()
+    print("Cached lookups after unregister:", 'custom' in cached_lookups)
+    
+    # The bug is demonstrated if the above prints True, as the cache wasn't cleared
+
+if __name__ == '__main__':
+    main()
\ No newline at end of file
