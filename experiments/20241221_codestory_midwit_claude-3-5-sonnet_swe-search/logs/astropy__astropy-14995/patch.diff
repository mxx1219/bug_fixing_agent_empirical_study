diff --git a/astropy/nddata/mixins/ndarithmetic.py b/astropy/nddata/mixins/ndarithmetic.py
index 4153dfccb2..e60fd5b65d 100644
--- a/astropy/nddata/mixins/ndarithmetic.py
+++ b/astropy/nddata/mixins/ndarithmetic.py
@@ -513,17 +513,22 @@ class NDArithmeticMixin:
             ``handle_mask`` must create (and copy) the returned mask.
         """
         # If only one mask is present we need not bother about any type checks
-        if (
-            self.mask is None and operand is not None and operand.mask is None
-        ) or handle_mask is None:
+        # If handle_mask is None, no mask in result
+        if handle_mask is None:
             return None
-        elif self.mask is None and operand is not None:
-            # Make a copy so there is no reference in the result.
-            return deepcopy(operand.mask)
+        # If operand is None (reduction operation), just return a copy of our mask
         elif operand is None:
             return deepcopy(self.mask)
+        # If neither has a mask, return None
+        elif self.mask is None and operand.mask is None:
+            return None
+        # If only one has a mask, return a copy of that mask
+        elif self.mask is None:
+            return deepcopy(operand.mask)
+        elif operand.mask is None:
+            return deepcopy(self.mask)
         else:
-            # Now lets calculate the resulting mask (operation enforces copy)
+            # Both have masks, apply the handle_mask operation
             return handle_mask(self.mask, operand.mask, **kwds)
 
     def _arithmetic_wcs(self, operation, operand, compare_wcs, **kwds):
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..348fe7e110
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,32 @@
+import numpy as np
+from astropy.nddata import NDDataRef
+
+# Create test arrays
+array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])
+mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])
+
+# Create NDDataRef objects
+nref_nomask = NDDataRef(array)
+nref_mask = NDDataRef(array, mask=mask)
+
+print("\nTesting mask propagation in different scenarios:")
+
+print("\n1. multiply no mask by constant (no mask * no mask)")
+result1 = nref_nomask.multiply(1., handle_mask=np.bitwise_or)
+print(f"Result mask: {result1.mask}")
+
+print("\n2. multiply no mask by itself (no mask * no mask)")
+result2 = nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or)
+print(f"Result mask: {result2.mask}")
+
+print("\n3. multiply mask by constant (mask * no mask)")
+result3 = nref_mask.multiply(1., handle_mask=np.bitwise_or)
+print(f"Result mask:\n{result3.mask}")
+
+print("\n4. multiply mask by itself (mask * mask)")
+result4 = nref_mask.multiply(nref_mask, handle_mask=np.bitwise_or)
+print(f"Result mask:\n{result4.mask}")
+
+print("\n5. multiply mask by no mask (mask * no mask)")
+result5 = nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or)
+print(f"Result mask:\n{result5.mask}")
\ No newline at end of file
