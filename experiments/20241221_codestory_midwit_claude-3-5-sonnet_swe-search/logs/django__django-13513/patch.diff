diff --git a/django/views/debug.py b/django/views/debug.py
index 7a89f7bd15..485b1328f2 100644
--- a/django/views/debug.py
+++ b/django/views/debug.py
@@ -397,7 +397,7 @@ class ExceptionReporter:
     def get_traceback_frames(self):
         def explicit_or_implicit_cause(exc_value):
             explicit = getattr(exc_value, '__cause__', None)
-            suppress_context = getattr(exc_value, '__suppress_context__', None)
+            suppress_context = getattr(exc_value, '__suppress_context__', False)
             implicit = getattr(exc_value, '__context__', None)
             return explicit or (None if suppress_context else implicit)
 
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..80acdd6a8a
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,52 @@
+from django.views import View
+from django.views.debug import ExceptionReporter
+from django.http import HttpRequest
+from django.conf import settings
+
+# Configure minimal Django settings
+minimal_settings = {
+    'DEBUG': True,
+    'SECRET_KEY': 'dummy-key-for-test',
+    'DEFAULT_CHARSET': 'utf-8',
+    'INSTALLED_APPS': [],
+    'MIDDLEWARE': [],
+    'ROOT_URLCONF': None,
+}
+
+settings.configure(**minimal_settings)
+
+class TestView(View):
+    def get(self, request, *args, **kwargs):
+        try:
+            raise RuntimeError('my error')
+        except Exception as exc:
+            raise ValueError('my new error') from None
+
+def main():
+    # Create a request object
+    request = HttpRequest()
+    
+    # Create view instance
+    view = TestView()
+    
+    try:
+        # Call the view method that will raise the exception
+        view.get(request)
+    except Exception as exc:
+        # Create an ExceptionReporter instance
+        reporter = ExceptionReporter(request, type(exc), exc, exc.__traceback__)
+        
+        # Get the traceback frames
+        frames = reporter.get_traceback_frames()
+        
+        # Print the chain of exceptions
+        current_exc = exc
+        while current_exc:
+            print(f"Exception: {type(current_exc).__name__}: {str(current_exc)}")
+            current_exc = getattr(current_exc, '__cause__', None) or (
+                None if getattr(current_exc, '__suppress_context__', False)
+                else getattr(current_exc, '__context__', None)
+            )
+
+if __name__ == "__main__":
+    main()
\ No newline at end of file
