diff --git a/django/db/migrations/executor.py b/django/db/migrations/executor.py
index 57042a8690..678f6930b0 100644
--- a/django/db/migrations/executor.py
+++ b/django/db/migrations/executor.py
@@ -263,7 +263,9 @@ class MigrationExecutor:
 
     def check_replacements(self):
         """
-        Mark replacement migrations applied if their replaced set all are.
+        Mark replacement migrations applied if their replaced set all are,
+        and ensure they are marked as unapplied if not all replaced migrations
+        are applied.
 
         Do this unconditionally on every migrate, rather than just when
         migrations are applied or unapplied, to correctly handle the case
@@ -277,6 +279,8 @@ class MigrationExecutor:
             all_applied = all(m in applied for m in migration.replaces)
             if all_applied and key not in applied:
                 self.recorder.record_applied(*key)
+            elif not all_applied and key in applied:
+                self.recorder.record_unapplied(*key)
 
     def detect_soft_applied(self, project_state, migration):
         """
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..0168fcb64d
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,88 @@
+from django.db import migrations, models
+from django.db.migrations.executor import MigrationExecutor
+from django.db.migrations.recorder import MigrationRecorder
+from django.db.migrations.loader import MigrationLoader
+from django.db import connection
+from django.conf import settings
+import django
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=['django.contrib.contenttypes'],
+    )
+    django.setup()
+
+# Create a mock migration class
+class MockMigration:
+    def __init__(self, name, app_label, replaces=None):
+        self.name = name
+        self.app_label = app_label
+        self.replaces = replaces or []
+        self.atomic = True
+        self.initial = None
+        self.operations = []
+
+    def mutate_state(self, project_state, preserve=False):
+        return project_state
+
+    def apply(self, project_state, schema_editor):
+        return project_state
+
+    def unapply(self, project_state, schema_editor):
+        return project_state
+
+def main():
+    # Setup
+    executor = MigrationExecutor(connection)
+    recorder = MigrationRecorder(connection)
+    recorder.ensure_schema()
+
+    # Create our migrations
+    app_label = "test_app"
+    migration1 = MockMigration("0001_initial", app_label)
+    migration2 = MockMigration("0002_change", app_label)
+    migration3 = MockMigration("0003_squashed", app_label, replaces=[
+        (app_label, "0001_initial"),
+        (app_label, "0002_change"),
+    ])
+
+    # Mock the loader's graph and replacements
+    executor.loader.graph.nodes = {
+        (app_label, "0001_initial"): migration1,
+        (app_label, "0002_change"): migration2,
+        (app_label, "0003_squashed"): migration3,
+    }
+    executor.loader.replacements = {
+        (app_label, "0003_squashed"): migration3
+    }
+
+    # Record migrations as applied
+    recorder.record_applied(app_label, "0001_initial")
+    recorder.record_applied(app_label, "0002_change")
+    
+    # This should mark the squashed migration as applied
+    executor.check_replacements()
+    
+    # Now unapply the migrations
+    recorder.record_unapplied(app_label, "0001_initial")
+    recorder.record_unapplied(app_label, "0002_change")
+    
+    # Check replacements again - this is where the bug manifests
+    executor.check_replacements()
+    
+    # Check if the squashed migration is still marked as applied
+    applied = recorder.applied_migrations()
+    if (app_label, "0003_squashed") in applied:
+        print("BUG: Squashed migration is still marked as applied after unapplying replaced migrations!")
+    else:
+        print("Success: Squashed migration is correctly marked as unapplied")
+
+if __name__ == "__main__":
+    main()
\ No newline at end of file
