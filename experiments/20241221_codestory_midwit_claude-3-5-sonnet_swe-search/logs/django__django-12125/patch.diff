diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py
index 7d226955d5..b3a1cc783f 100644
--- a/django/db/migrations/serializer.py
+++ b/django/db/migrations/serializer.py
@@ -90,7 +90,21 @@ class DeconstructableSerializer(BaseSerializer):
 
     @staticmethod
     def _serialize_path(path):
-        module, name = path.rsplit(".", 1)
+        # Handle inner classes by checking for multiple dots after the module
+        module_parts = path.split('.')
+        # Find the module part by checking for existence
+        for i in range(len(module_parts) - 1, 0, -1):
+            potential_module = '.'.join(module_parts[:i])
+            try:
+                __import__(potential_module)
+                module = potential_module
+                name = '.'.join(module_parts[i:])
+                break
+            except ImportError:
+                continue
+        else:
+            module, name = path.rsplit(".", 1)
+
         if module == "django.db.models":
             imports = {"from django.db import models"}
             name = "models.%s" % name
diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index aa21a151bc..c253dde486 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -488,7 +488,9 @@ class Field(RegisterLookupMixin):
                 if value is not default:
                     keywords[name] = value
         # Work out path - we shorten it for known Django core fields
+        # Use __qualname__ to get the full path including outer classes
         path = "%s.%s" % (self.__class__.__module__, self.__class__.__qualname__)
+        # For Django core fields, we still want to shorten the path
         if path.startswith("django.db.models.fields.related"):
             path = path.replace("django.db.models.fields.related", "django.db.models")
         elif path.startswith("django.db.models.fields.files"):
@@ -497,6 +499,10 @@ class Field(RegisterLookupMixin):
             path = path.replace("django.db.models.fields.proxy", "django.db.models")
         elif path.startswith("django.db.models.fields"):
             path = path.replace("django.db.models.fields", "django.db.models")
+        # For non-Django fields, ensure we preserve the full path including outer classes
+        elif '.' in self.__class__.__qualname__:
+            # This is an inner class, make sure we use the full path
+            path = "%s.%s" % (self.__class__.__module__, self.__class__.__qualname__)
         # Return basic info - other fields should override this.
         return (self.name, path, [], keywords)
 
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..f8c52742d1
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,91 @@
+import os
+import sys
+from django.conf import settings
+import django
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+    )
+    django.setup()
+
+from django.db import models
+import enum
+
+# Test case for inner field class
+class Outer:
+    class Inner(models.CharField):
+        pass
+
+class A(models.Model):
+    class Meta:
+        app_label = 'testapp'
+    field = Outer.Inner(max_length=20)
+
+# Test case for inner enum class
+class Thing(models.Model):
+    class Meta:
+        app_label = 'testapp'
+
+    @enum.unique
+    class State(enum.Enum):
+        on = 'on'
+        off = 'off'
+    
+    state = models.CharField(
+        max_length=10,
+        choices=[(state.value, state.name) for state in State]
+    )
+
+# Test the serialization directly
+from django.db.migrations.writer import MigrationWriter
+from django.db.migrations import operations, Migration
+
+def test_serialization():
+    # Test case 1: Inner field class
+    operation1 = operations.CreateModel(
+        name='A',
+        fields=[
+            ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+            ('field', Outer.Inner(max_length=20)),
+        ],
+    )
+    
+    # Test case 2: Inner enum class
+    operation2 = operations.CreateModel(
+        name='Thing',
+        fields=[
+            ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+            ('state', models.CharField(
+                max_length=10,
+                choices=[(state.value, state.name) for state in Thing.State]
+            )),
+        ],
+    )
+    
+    # Create a proper Migration instance for both operations
+    migration = Migration('0001_initial', 'testapp')
+    migration.operations = [operation1, operation2]
+    migration.dependencies = []
+    
+    # Serialize the migration
+    writer = MigrationWriter(migration)
+    
+    # Get the serialized content
+    output = writer.as_string()
+    print("Generated migration content:")
+    print(output)
+
+if __name__ == '__main__':
+    test_serialization()
\ No newline at end of file
