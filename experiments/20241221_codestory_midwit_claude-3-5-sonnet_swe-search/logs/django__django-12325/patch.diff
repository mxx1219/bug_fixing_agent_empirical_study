diff --git a/django/db/models/options.py b/django/db/models/options.py
index a375f6ba1d..cdabd3b477 100644
--- a/django/db/models/options.py
+++ b/django/db/models/options.py
@@ -240,20 +240,29 @@ class Options:
 
         if self.pk is None:
             if self.parents:
-                # Promote the first parent link in lieu of adding yet another
-                # field.
-                field = next(iter(self.parents.values()))
-                # Look for a local field with the same name as the
-                # first parent link. If a local field has already been
-                # created, use it instead of promoting the parent
-                already_created = [fld for fld in self.local_fields if fld.name == field.name]
-                if already_created:
-                    field = already_created[0]
-                field.primary_key = True
-                self.setup_pk(field)
-                if not field.remote_field.parent_link:
+                # First try to find a field with explicit parent_link=True
+                parent_link_field = None
+                for field in self.local_fields:
+                    if (field.is_relation and field.remote_field.parent_link and 
+                        field.remote_field.model in self.parents):
+                        parent_link_field = field
+                        break
+                
+                # If no explicit parent_link found, use the first parent link
+                if parent_link_field is None:
+                    parent_link_field = next(iter(self.parents.values()))
+                    # Look for a local field with the same name as the
+                    # first parent link. If a local field has already been
+                    # created, use it instead of promoting the parent
+                    already_created = [fld for fld in self.local_fields if fld.name == parent_link_field.name]
+                    if already_created:
+                        parent_link_field = already_created[0]
+                
+                parent_link_field.primary_key = True
+                self.setup_pk(parent_link_field)
+                if not parent_link_field.remote_field.parent_link:
                     raise ImproperlyConfigured(
-                        'Add parent_link=True to %s.' % field,
+                        'Add parent_link=True to %s.' % parent_link_field,
                     )
             else:
                 auto = AutoField(verbose_name='ID', primary_key=True, auto_created=True)
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..28d30bc687
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,62 @@
+from django.db import models
+from django.core.exceptions import ImproperlyConfigured
+from django.conf import settings
+from django.test import TestCase
+import os
+
+# Create test_app package
+os.makedirs('test_app', exist_ok=True)
+with open('test_app/__init__.py', 'w') as f:
+    pass
+
+# Configure Django settings
+settings.configure(
+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+        'django.contrib.admin',
+        'django.contrib.sessions',
+        'test_app',
+    ],
+)
+
+import django
+django.setup()
+
+# Create test app models
+class Document(models.Model):
+    class Meta:
+        app_label = 'test_app'
+
+# This should fail
+class PickingFail(Document):
+    document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')
+    origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)
+    class Meta:
+        app_label = 'test_app'
+
+# This should work
+class PickingWork(Document):
+    origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)
+    document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')
+    class Meta:
+        app_label = 'test_app'
+
+def test_mti_order():
+    try:
+        # This should raise ImproperlyConfigured
+        PickingFail._meta.get_field('document_ptr')
+        print("ERROR: PickingFail should have raised ImproperlyConfigured")
+    except ImproperlyConfigured as e:
+        print("Expected error for PickingFail:", str(e))
+    
+    try:
+        # This should work
+        PickingWork._meta.get_field('document_ptr')
+        print("SUCCESS: PickingWork works as expected")
+    except ImproperlyConfigured as e:
+        print("ERROR: PickingWork failed unexpectedly:", str(e))
+
+if __name__ == '__main__':
+    test_mti_order()
\ No newline at end of file
