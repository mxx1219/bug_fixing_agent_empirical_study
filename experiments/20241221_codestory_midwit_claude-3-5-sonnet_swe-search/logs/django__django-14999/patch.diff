diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index 982816be3a..33100cc96f 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -317,7 +317,15 @@ class RenameModel(ModelOperation):
         state.rename_model(app_label, self.old_name, self.new_name)
 
     def database_forwards(self, app_label, schema_editor, from_state, to_state):
+        old_model = from_state.apps.get_model(app_label, self.old_name)
         new_model = to_state.apps.get_model(app_label, self.new_name)
+        
+        # If db_table is explicitly set and hasn't changed, this operation is a noop
+        if (hasattr(old_model._meta, 'db_table') and 
+            hasattr(new_model._meta, 'db_table') and 
+            old_model._meta.db_table == new_model._meta.db_table):
+            return
+
         if self.allow_migrate_model(schema_editor.connection.alias, new_model):
             old_model = from_state.apps.get_model(app_label, self.old_name)
             # Move the main table
@@ -368,6 +376,15 @@ class RenameModel(ModelOperation):
                 )
 
     def database_backwards(self, app_label, schema_editor, from_state, to_state):
+        old_model = to_state.apps.get_model(app_label, self.old_name)
+        new_model = from_state.apps.get_model(app_label, self.new_name)
+        
+        # If db_table is explicitly set and hasn't changed, this operation is a noop
+        if (hasattr(old_model._meta, 'db_table') and 
+            hasattr(new_model._meta, 'db_table') and 
+            old_model._meta.db_table == new_model._meta.db_table):
+            return
+
         self.new_name_lower, self.old_name_lower = self.old_name_lower, self.new_name_lower
         self.new_name, self.old_name = self.old_name, self.new_name
 
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..59c82fb6ec
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,66 @@
+from django.db import migrations, models
+from django.db.migrations.state import ProjectState
+from django.db.migrations.operations.models import RenameModel
+from django.db.backends.base.schema import BaseDatabaseSchemaEditor
+from django.db.migrations.migration import Migration
+from django.conf import settings
+
+# Configure minimal Django settings
+minimal_settings = {
+    'DATABASES': {
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    'INSTALLED_APPS': ['django.contrib.contenttypes', 'django.contrib.auth'],
+    'USE_TZ': False,
+}
+
+# Create a mock schema editor to track operations
+class MockSchemaEditor(BaseDatabaseSchemaEditor):
+    def __init__(self):
+        self.collected_sql = []
+        self.executed_operations = []
+        self.connection = type('Connection', (), {'alias': 'default'})()
+
+    def execute(self, sql, params=()):
+        self.collected_sql.append(sql)
+
+    def rename_model(self, model, old_name, new_name):
+        self.executed_operations.append(('rename_model', old_name, new_name))
+
+def test_rename_model_with_db_table():
+    """
+    Test that RenameModel is a noop when db_table is already defined.
+    """
+    # Create initial state with a model that has db_table defined
+    initial_state = ProjectState()
+    model_options = {
+        'db_table': 'custom_table_name'
+    }
+    operation1 = migrations.CreateModel(
+        name='MyModel',
+        fields=[('id', models.AutoField(primary_key=True))],
+        options=model_options
+    )
+    operation1.state_forwards('testapp', initial_state)
+
+    # Create new state for rename operation
+    new_state = initial_state.clone()
+    operation2 = RenameModel('MyModel', 'NewModel')
+    operation2.state_forwards('testapp', new_state)
+
+    # Execute the rename operation
+    schema_editor = MockSchemaEditor()
+    operation2.database_forwards('testapp', schema_editor, initial_state, new_state)
+
+    # Print the executed operations to verify if any table operations were performed
+    print("Executed operations:", schema_editor.executed_operations)
+    print("Generated SQL:", schema_editor.collected_sql)
+
+if __name__ == '__main__':
+    settings.configure(**minimal_settings)
+    import django
+    django.setup()
+    test_rename_model_with_db_table()
\ No newline at end of file
