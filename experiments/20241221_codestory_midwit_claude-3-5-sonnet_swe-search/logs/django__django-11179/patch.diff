diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py
index 92fe4affb9..68383c24ce 100644
--- a/django/db/models/deletion.py
+++ b/django/db/models/deletion.py
@@ -277,6 +277,8 @@ class Collector:
             if self.can_fast_delete(instance):
                 with transaction.mark_for_rollback_on_error():
                     count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)
+                    # Set primary key to None after deletion
+                    setattr(instance, model._meta.pk.attname, None)
                 return count, {model._meta.label: count}
 
         with transaction.atomic(using=self.using, savepoint=False):
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..3517b88205
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,59 @@
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')
+
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        MIDDLEWARE=[],
+        SECRET_KEY='dummy',
+    )
+
+import django
+django.setup()
+
+from django.db import models, connection
+from django.test import TestCase
+
+class SimpleModel(models.Model):
+    class Meta:
+        app_label = 'test_app'
+    name = models.CharField(max_length=100)
+
+# Create the test table
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(SimpleModel)
+
+class TestDeletion(TestCase):
+    def test_pk_cleared_after_delete(self):
+        # Create a simple model instance
+        obj = SimpleModel.objects.create(name="test")
+        pk_before_delete = obj.pk
+        
+        # Delete the instance
+        obj.delete()
+        
+        # Check if PK is cleared
+        print(f"PK before delete: {pk_before_delete}")
+        print(f"PK after delete: {obj.pk}")
+        assert obj.pk is None, f"PK should be None after delete, but got {obj.pk}"
+
+if __name__ == "__main__":
+    test_case = TestDeletion()
+    test_case._pre_setup()
+    try:
+        test_case.test_pk_cleared_after_delete()
+        print("Test passed successfully!")
+    except AssertionError as e:
+        print(f"Test failed: {e}")
+    finally:
+        test_case._post_teardown()
\ No newline at end of file
