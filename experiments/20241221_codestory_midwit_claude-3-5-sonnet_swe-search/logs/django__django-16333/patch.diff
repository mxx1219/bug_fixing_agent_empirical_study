diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py
index d73d1c8495..4c9a4f5556 100644
--- a/django/contrib/auth/forms.py
+++ b/django/contrib/auth/forms.py
@@ -141,6 +141,7 @@ class UserCreationForm(forms.ModelForm):
         user.set_password(self.cleaned_data["password1"])
         if commit:
             user.save()
+            self.save_m2m()
         return user
 
 
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..e3eccce354
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,78 @@
+import os
+import django
+from django.conf import settings
+from django.db import connection
+from django.core.management import call_command
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        USE_TZ=False,
+    )
+    django.setup()
+
+from django.contrib.auth.forms import UserCreationForm
+from django.contrib.auth.models import User, Group
+from django.db import models
+from django import forms
+
+# Create a custom user model with a ManyToMany field
+class CustomUser(User):
+    custom_groups = models.ManyToManyField(Group, related_name='custom_user_set')
+
+    class Meta:
+        app_label = 'auth'
+
+# Create a custom UserCreationForm for our CustomUser
+class CustomUserCreationForm(UserCreationForm):
+    custom_groups = forms.ModelMultipleChoiceField(
+        queryset=Group.objects.all(),
+        required=False
+    )
+
+    class Meta(UserCreationForm.Meta):
+        model = CustomUser
+        fields = UserCreationForm.Meta.fields + ('custom_groups',)
+
+def main():
+    # Create all necessary database tables
+    call_command('migrate', 'auth', verbosity=0)
+    call_command('migrate', 'contenttypes', verbosity=0)
+    
+    # Create the custom user table
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(CustomUser)
+    
+    # Create a test group
+    group = Group.objects.create(name='test_group')
+    
+    # Create form data with username, password and group
+    form_data = {
+        'username': 'testuser',
+        'password1': 'testpass123',
+        'password2': 'testpass123',
+        'custom_groups': [group.id]
+    }
+    
+    # Create and validate the form
+    form = CustomUserCreationForm(data=form_data)
+    if form.is_valid():
+        user = form.save()
+        # Check if the group was saved
+        print(f"User created: {user.username}")
+        print(f"Custom groups assigned: {list(user.custom_groups.all())}")
+    else:
+        print("Form errors:", form.errors)
+
+if __name__ == '__main__':
+    main()
\ No newline at end of file
