diff --git a/django/forms/models.py b/django/forms/models.py
index d157c291ef..5edbbd376f 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -83,7 +83,7 @@ def model_to_dict(instance, fields=None, exclude=None):
     for f in chain(opts.concrete_fields, opts.private_fields, opts.many_to_many):
         if not getattr(f, 'editable', False):
             continue
-        if fields and f.name not in fields:
+        if fields is not None and f.name not in fields:
             continue
         if exclude and f.name in exclude:
             continue
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..122185ed02
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,48 @@
+from django.conf import settings
+from django.test import TestCase
+from django.db import models
+from django.forms.models import model_to_dict
+
+# Configure Django settings
+settings.configure(
+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+    INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth'],
+)
+
+import django
+django.setup()
+
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    age = models.IntegerField()
+
+    class Meta:
+        app_label = 'test_app'
+
+class TestModelToDictCase(TestCase):
+    def test_model_to_dict(self):
+        # Create an instance
+        instance = TestModel(name='Test', age=25)
+
+        # Test with empty fields list
+        result = model_to_dict(instance, fields=[])
+        print("Result with fields=[]:", result)
+        print("Expected: {}")
+        assert result == {}, "Empty fields list should return empty dict"
+
+        # Test with None fields (default behavior)
+        result = model_to_dict(instance, fields=None)
+        print("\nResult with fields=None:", result)
+        print("Expected: {'name': 'Test', 'age': 25}")
+        assert 'name' in result and 'age' in result, "None fields should return all fields"
+
+        # Test with specific fields
+        result = model_to_dict(instance, fields=['name'])
+        print("\nResult with fields=['name']:", result)
+        print("Expected: {'name': 'Test'}")
+        assert list(result.keys()) == ['name'], "Should only include specified fields"
+
+if __name__ == '__main__':
+    from django.test.runner import DiscoverRunner
+    test_runner = DiscoverRunner(verbosity=2)
+    test_runner.run_tests(['__main__'])
\ No newline at end of file
