diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py
index abdeba8efb..9eddadcaf0 100644
--- a/astropy/io/ascii/rst.py
+++ b/astropy/io/ascii/rst.py
@@ -46,6 +46,14 @@ class RST(FixedWidth):
           2    4.5  Worlds
         ==== ===== ======
 
+    Parameters
+    ----------
+    header_rows : list of str, optional
+        List of header row attributes to include. Common values are:
+        - ["name"] : Show column names (default)
+        - ["name", "unit"] : Show column names and units
+        - ["name", "unit", "description"] : Show names, units, and descriptions
+
     Currently there is no support for reading tables which utilize continuation lines,
     or for ones which define column spans through the use of an additional
     line of dashes in the header.
@@ -57,10 +65,26 @@ class RST(FixedWidth):
     data_class = SimpleRSTData
     header_class = SimpleRSTHeader
 
-    def __init__(self):
-        super().__init__(delimiter_pad=None, bookend=False)
+    def __init__(self, header_rows=None):
+        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)
 
     def write(self, lines):
         lines = super().write(lines)
-        lines = [lines[1]] + lines + [lines[1]]
+        
+        # Get the header line length for RST formatting
+        header_line = "=" * len(lines[1])
+        
+        # If there are multiple header rows, we need to handle them specially
+        header_rows = getattr(self, 'header_rows', ['name'])
+        if len(header_rows) > 1:
+            # Keep only the header rows and data rows
+            header_lines = lines[:len(header_rows)]
+            data_lines = lines[len(header_rows):]
+            
+            # Format according to RST style
+            lines = [header_line] + header_lines + [header_line] + data_lines + [header_line]
+        else:
+            # Standard RST format with single header row
+            lines = [header_line] + lines + [header_line]
+            
         return lines
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..9a05e056bc
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,21 @@
+from astropy.table import QTable
+import astropy.units as u
+import sys
+
+# Create test table
+tbl = QTable({'wave': [350,950]*u.nm, 'response': [0.7, 1.2]*u.count})
+
+# Test standard RST output
+print("\nStandard RST output:")
+tbl.write(sys.stdout, format="ascii.rst")
+
+# Test fixed_width with header_rows
+print("\nFixed width with header_rows:")
+tbl.write(sys.stdout, format="ascii.fixed_width", header_rows=["name", "unit"])
+
+# Test RST with header_rows (should fail)
+print("\nRST with header_rows (should fail):")
+try:
+    tbl.write(sys.stdout, format="ascii.rst", header_rows=["name", "unit"])
+except TypeError as e:
+    print(f"Got expected error: {str(e)}")
\ No newline at end of file
