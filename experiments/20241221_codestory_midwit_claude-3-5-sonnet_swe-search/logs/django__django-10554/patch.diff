diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index a791908caf..45d0453fea 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -352,11 +352,24 @@ class SQLCompiler:
                         src = src.source
                     elif col_alias:
                         continue
-                    if src == sel_expr:
+                    if src == sel_expr or (
+                        hasattr(src, 'target') and
+                        hasattr(sel_expr, 'target') and
+                        src.target == sel_expr.target
+                    ):
                         resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])
                         break
                 else:
-                    raise DatabaseError('ORDER BY term does not match any column in the result set.')
+                    # For union queries with reordering, try to match by field name
+                    if hasattr(src, 'target'):
+                        for idx, (sel_expr, _, col_alias) in enumerate(self.select):
+                            if hasattr(sel_expr, 'target') and sel_expr.target.name == src.target.name:
+                                resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])
+                                break
+                        else:
+                            raise DatabaseError('ORDER BY term does not match any column in the result set.')
+                    else:
+                        raise DatabaseError('ORDER BY term does not match any column in the result set.')
             sql, params = self.compile(resolved)
             # Don't add the same column twice, but the order direction is
             # not taken into account so we strip it. When this entire method
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..a95691226e
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,46 @@
+from django.db import models
+from django.test.utils import setup_test_environment
+from django.db import connection
+
+# Set up the test environment
+setup_test_environment()
+
+# Create a test model
+class Dimension(models.Model):
+    name = models.CharField(max_length=100)
+    order = models.IntegerField()
+
+    def __str__(self):
+        return self.name
+
+# Create the test database and tables
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Dimension)
+
+# Create test data
+Dimension.objects.bulk_create([
+    Dimension(id=10, name='boeksoort', order=1),
+    Dimension(id=11, name='grootboek', order=2),
+    Dimension(id=16, name='kenteken', order=3),
+    Dimension(id=17, name='activa', order=4)
+])
+
+# Test the union query
+print("\nInitial queryset values:")
+print(list(Dimension.objects.values_list('id', flat=True)))
+
+print("\nCreating union queryset with ordering:")
+qs = (
+    Dimension.objects.filter(pk__in=[10, 11])
+    .union(Dimension.objects.filter(pk__in=[16, 17]))
+    .order_by('order')
+)
+
+print("First evaluation of qs:")
+print(list(qs))
+
+print("\nTrying to reorder and get values:")
+print(list(qs.order_by().values_list('pk', flat=True)))
+
+print("\nTrying to evaluate qs again:")
+print(list(qs))  # This should not break now
\ No newline at end of file
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..0e8f0faa4a
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,56 @@
+from django.db import models
+from django.test.utils import setup_test_environment
+from django.test import TestCase
+from django.db import connection
+
+# Set up the test environment
+setup_test_environment()
+
+# Create a test model
+class Dimension(models.Model):
+    name = models.CharField(max_length=100)
+    order = models.IntegerField()
+
+    def __str__(self):
+        return self.name
+
+# Create the test database and tables
+connection.creation.create_test_db(verbosity=0)
+
+# Create some test data
+def setup_test_data():
+    Dimension.objects.bulk_create([
+        Dimension(id=10, name='boeksoort', order=1),
+        Dimension(id=11, name='grootboek', order=2),
+        Dimension(id=16, name='kenteken', order=3),
+        Dimension(id=17, name='activa', order=4)
+    ])
+
+# Run the test
+if __name__ == '__main__':
+    # Create tables
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(Dimension)
+    
+    # Setup test data
+    setup_test_data()
+    
+    # Reproduce the issue
+    print("Initial queryset values:")
+    print(list(Dimension.objects.values_list('id', flat=True)))
+    
+    print("\nCreating union queryset with ordering:")
+    qs = (
+        Dimension.objects.filter(pk__in=[10, 11])
+        .union(Dimension.objects.filter(pk__in=[16, 17]))
+        .order_by('order')
+    )
+    
+    print("First evaluation of qs:")
+    print(list(qs))
+    
+    print("\nTrying to reorder and get values:")
+    print(list(qs.order_by().values_list('pk', flat=True)))
+    
+    print("\nTrying to evaluate qs again:")
+    print(list(qs))  # This should break
\ No newline at end of file
diff --git a/test_case.py b/test_case.py
new file mode 100644
index 0000000000..b8ca0256ba
--- /dev/null
+++ b/test_case.py
@@ -0,0 +1,54 @@
+from django.db import models, connection
+from django.test import TestCase
+from django.test.utils import setup_test_environment
+
+class UnionOrderingTest(TestCase):
+    def setUp(self):
+        class Dimension(models.Model):
+            name = models.CharField(max_length=100)
+            order = models.IntegerField()
+
+            def __str__(self):
+                return self.name
+
+            class Meta:
+                app_label = 'testapp'
+
+        self.Dimension = Dimension
+        with connection.schema_editor() as schema_editor:
+            schema_editor.create_model(Dimension)
+
+        Dimension.objects.create(id=10, name='boeksoort', order=1)
+        Dimension.objects.create(id=11, name='grootboek', order=2)
+        Dimension.objects.create(id=16, name='kenteken', order=3)
+        Dimension.objects.create(id=17, name='activa', order=4)
+
+    def test_union_ordering(self):
+        qs = (
+            self.Dimension.objects.filter(pk__in=[10, 11])
+            .union(self.Dimension.objects.filter(pk__in=[16, 17]))
+            .order_by('order')
+        )
+
+        # First evaluation
+        first_eval = list(qs)
+        self.assertEqual(len(first_eval), 4)
+
+        # Get values list
+        values = list(qs.order_by().values_list('pk', flat=True))
+        self.assertEqual(len(values), 4)
+
+        # Second evaluation should not break
+        second_eval = list(qs)
+        self.assertEqual(len(second_eval), 4)
+
+        # Verify the order is maintained
+        orders = [obj.order for obj in second_eval]
+        self.assertEqual(orders, sorted(orders))
+
+if __name__ == '__main__':
+    import django
+    django.setup()
+    from django.test.runner import DiscoverRunner
+    test_runner = DiscoverRunner(verbosity=2)
+    failures = test_runner.run_tests(['__main__'])
\ No newline at end of file
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..05bf269a2a
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,13 @@
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'testapp',
+]
+
+SECRET_KEY = 'dummy'
\ No newline at end of file
diff --git a/test_simple.py b/test_simple.py
new file mode 100644
index 0000000000..c53daf7d45
--- /dev/null
+++ b/test_simple.py
@@ -0,0 +1,47 @@
+from django.db import models, connection
+from django.test.utils import setup_test_environment
+import django
+import os
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')
+django.setup()
+setup_test_environment()
+
+class Dimension(models.Model):
+    name = models.CharField(max_length=100)
+    order = models.IntegerField()
+
+    def __str__(self):
+        return self.name
+
+    class Meta:
+        app_label = 'testapp'
+
+# Create tables
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Dimension)
+
+# Create test data
+Dimension.objects.create(id=10, name='boeksoort', order=1)
+Dimension.objects.create(id=11, name='grootboek', order=2)
+Dimension.objects.create(id=16, name='kenteken', order=3)
+Dimension.objects.create(id=17, name='activa', order=4)
+
+# Test the union query
+qs = (
+    Dimension.objects.filter(pk__in=[10, 11])
+    .union(Dimension.objects.filter(pk__in=[16, 17]))
+    .order_by('order')
+)
+
+# First evaluation
+print("First evaluation:")
+print(list(qs))
+
+# Reorder and get values
+print("\nReorder and get values:")
+print(list(qs.order_by().values_list('pk', flat=True)))
+
+# Second evaluation
+print("\nSecond evaluation:")
+print(list(qs))
\ No newline at end of file
diff --git a/test_union_order.py b/test_union_order.py
new file mode 100644
index 0000000000..88fff5d7f7
--- /dev/null
+++ b/test_union_order.py
@@ -0,0 +1,65 @@
+from django.test import TestCase
+from django.db import models, connection
+from django.test.utils import setup_test_environment
+
+# Set up the test environment
+setup_test_environment()
+
+# Create a test model
+class Dimension(models.Model):
+    name = models.CharField(max_length=100)
+    order = models.IntegerField()
+
+    def __str__(self):
+        return self.name
+
+# Create the test database and tables
+connection.creation.create_test_db(verbosity=0)
+
+class UnionOrderingTest(TestCase):
+    @classmethod
+    def setUpClass(cls):
+        super().setUpClass()
+        # Create test data
+        Dimension.objects.bulk_create([
+            Dimension(id=10, name='boeksoort', order=1),
+            Dimension(id=11, name='grootboek', order=2),
+            Dimension(id=16, name='kenteken', order=3),
+            Dimension(id=17, name='activa', order=4)
+        ])
+
+    def test_union_ordering(self):
+        # Create the union query with ordering
+        qs = (
+            Dimension.objects.filter(pk__in=[10, 11])
+            .union(Dimension.objects.filter(pk__in=[16, 17]))
+            .order_by('order')
+        )
+        
+        # First evaluation
+        first_eval = list(qs)
+        self.assertEqual(len(first_eval), 4)
+        
+        # Get values list
+        values = list(qs.order_by().values_list('pk', flat=True))
+        self.assertEqual(len(values), 4)
+        
+        # Second evaluation should not break
+        second_eval = list(qs)
+        self.assertEqual(len(second_eval), 4)
+        
+        # Verify the order is maintained
+        orders = [obj.order for obj in second_eval]
+        self.assertEqual(orders, sorted(orders))
+
+if __name__ == '__main__':
+    import django
+    django.setup()
+    
+    from django.test.runner import DiscoverRunner
+    test_runner = DiscoverRunner(verbosity=2)
+    failures = test_runner.run_tests(['__main__'])
+    if failures:
+        print("Tests failed!")
+    else:
+        print("All tests passed!")
\ No newline at end of file
