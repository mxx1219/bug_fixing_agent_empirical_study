diff --git a/django/forms/models.py b/django/forms/models.py
index 5edbbd376f..bd876deb24 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -46,10 +46,10 @@ def construct_instance(form, instance, fields=None, exclude=None):
             continue
         if exclude and f.name in exclude:
             continue
-        # Leave defaults for fields that aren't in POST data, except for
-        # checkbox inputs because they don't appear in POST data if not checked.
+        # Allow cleaned_data to override default values even if the field wasn't in POST data
         if (f.has_default() and
-                form[f.name].field.widget.value_omitted_from_data(form.data, form.files, form.add_prefix(f.name))):
+                form[f.name].field.widget.value_omitted_from_data(form.data, form.files, form.add_prefix(f.name)) and
+                f.name not in cleaned_data):
             continue
         # Defer saving file-type fields until after the other fields, so a
         # callable upload_to can use the values from other fields.
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..6fc397093b
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,86 @@
+from django.conf import settings
+from django.db import models, connection
+from django.forms import ModelForm
+import os
+
+# Configure Django settings
+BASE_DIR = os.path.dirname(os.path.abspath(__file__))
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+)
+
+import django
+django.setup()
+
+# Create a test model
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    status = models.CharField(max_length=20, default='pending')
+
+    class Meta:
+        app_label = 'reproduce_error'
+
+# Create a model form
+class TestForm(ModelForm):
+    class Meta:
+        model = TestModel
+        fields = ['name', 'status']
+
+    def __init__(self, *args, **kwargs):
+        super().__init__(*args, **kwargs)
+        # Make status field optional
+        self.fields['status'].required = False
+
+    def clean(self):
+        cleaned_data = super().clean()
+        # Try to set status in cleaned_data
+        cleaned_data['status'] = 'completed'
+        return cleaned_data
+
+# Create the database tables
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(TestModel)
+
+# Test the form
+if __name__ == '__main__':
+    print("Test Case 1: Default behavior without status in form data")
+    form_data = {'name': 'Test Item 1'}
+    form = TestForm(data=form_data)
+    
+    if form.is_valid():
+        instance = form.save()
+        print("Form is valid")
+        print("Expected status: completed")
+        print("Actual status:", instance.status)
+        if instance.status == 'completed':
+            print("SUCCESS: cleaned_data successfully overrode the default value!")
+        else:
+            print("ERROR: cleaned_data did not override the default value!")
+    else:
+        print("Form validation failed:", form.errors)
+
+    print("\nTest Case 2: With status explicitly set in form data")
+    form_data = {'name': 'Test Item 2', 'status': 'pending'}
+    form = TestForm(data=form_data)
+    
+    if form.is_valid():
+        instance = form.save()
+        print("Form is valid")
+        print("Expected status: completed")
+        print("Actual status:", instance.status)
+        if instance.status == 'completed':
+            print("SUCCESS: cleaned_data successfully overrode the form value!")
+        else:
+            print("ERROR: cleaned_data did not override the form value!")
+    else:
+        print("Form validation failed:", form.errors)
\ No newline at end of file
