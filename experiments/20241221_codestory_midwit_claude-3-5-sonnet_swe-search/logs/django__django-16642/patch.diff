diff --git a/django/http/response.py b/django/http/response.py
index f62dec8ce9..89a8d8416e 100644
--- a/django/http/response.py
+++ b/django/http/response.py
@@ -606,12 +606,19 @@ class FileResponse(StreamingHttpResponse):
         if self._no_explicit_content_type:
             if filename:
                 content_type, encoding = mimetypes.guess_type(filename)
+                # Handle special cases for compression formats
+                if filename.lower().endswith('.z'):
+                    encoding = 'compress'
+                elif filename.lower().endswith('.br'):
+                    encoding = 'br'
                 # Encoding isn't set to prevent browsers from automatically
                 # uncompressing files.
                 content_type = {
                     "bzip2": "application/x-bzip",
                     "gzip": "application/gzip",
                     "xz": "application/x-xz",
+                    "br": "application/x-brotli",
+                    "compress": "application/x-compress",
                 }.get(encoding, content_type)
                 self.headers["Content-Type"] = (
                     content_type or "application/octet-stream"
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..0f52a13543
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,35 @@
+from django.http import FileResponse
+from django.conf import settings
+import os
+import mimetypes
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    DEFAULT_CHARSET='utf-8'
+)
+
+# Test cases
+test_files = [
+    'test.html.Z',           # Basic .Z file
+    'test.html.br',          # Basic .br file
+    'test.tar.Z',           # Archive with .Z
+    'test.tar.br',          # Archive with .br
+    'test.Z',               # Just .Z
+    'test.br',              # Just .br
+    'test.HTML.Z',          # Mixed case with .Z
+    'test.HTML.BR'          # Mixed case with .BR
+]
+
+# Create and test each file
+for filename in test_files:
+    # Create test file
+    with open(filename, 'wb') as f:
+        f.write(b'test content')
+    
+    # Test FileResponse
+    response = FileResponse(open(filename, 'rb'))
+    print(f"Content-Type for {filename}: {response.headers['Content-Type']}")
+    
+    # Clean up
+    os.unlink(filename)
\ No newline at end of file
