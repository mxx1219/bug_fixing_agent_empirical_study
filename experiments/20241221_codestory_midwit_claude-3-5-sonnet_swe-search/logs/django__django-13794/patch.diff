diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index 1c844580c6..2e3b4c5225 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -678,6 +678,11 @@ def add(value, arg):
         return int(value) + int(arg)
     except (ValueError, TypeError):
         try:
+            # Force evaluation of lazy strings
+            if hasattr(value, '_proxy____cast'):
+                value = str(value)
+            if hasattr(arg, '_proxy____cast'):
+                arg = str(arg)
             return value + arg
         except Exception:
             return ''
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..324920ebc8
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,53 @@
+from django.template import Template, Context
+from django.utils.translation import gettext_lazy
+from django.conf import settings
+import django
+
+# Configure Django settings
+settings.configure(
+    TEMPLATES=[{
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'APP_DIRS': True,
+    }],
+    INSTALLED_APPS=['django.contrib.contenttypes']
+)
+
+# Initialize Django
+django.setup()
+
+def test_case(template_text, context_dict):
+    template = Template(template_text)
+    context = Context(context_dict)
+    try:
+        result = template.render(context)
+        print(f"Success - Result: {result}")
+    except Exception as e:
+        print(f"Error: {type(e).__name__}: {str(e)}")
+
+# Test case 1: Regular string + Lazy string (original case)
+print("\nTest 1: Regular string + Lazy string")
+test_case('{{ regular_str|add:lazy_str }}', {
+    'regular_str': 'Hello ',
+    'lazy_str': gettext_lazy('World')
+})
+
+# Test case 2: Both lazy strings
+print("\nTest 2: Both lazy strings")
+test_case('{{ lazy_str1|add:lazy_str2 }}', {
+    'lazy_str1': gettext_lazy('Hello '),
+    'lazy_str2': gettext_lazy('World')
+})
+
+# Test case 3: Empty strings
+print("\nTest 3: Empty strings")
+test_case('{{ empty_str|add:lazy_str }}', {
+    'empty_str': '',
+    'lazy_str': gettext_lazy('World')
+})
+
+# Test case 4: None values
+print("\nTest 4: None values")
+test_case('{{ none_val|add:lazy_str }}', {
+    'none_val': None,
+    'lazy_str': gettext_lazy('World')
+})
\ No newline at end of file
