diff --git a/astropy/units/quantity.py b/astropy/units/quantity.py
index b98abfafb0..237f5fd5fe 100644
--- a/astropy/units/quantity.py
+++ b/astropy/units/quantity.py
@@ -666,7 +666,14 @@ class Quantity(np.ndarray):
         # Same for inputs, but here also convert if necessary.
         arrays = []
         for input_, converter in zip(inputs, converters):
-            input_ = getattr(input_, "value", input_)
+            # If we can't get the value and it's not a standard numpy type, return NotImplemented
+            if not isinstance(input_, (np.ndarray, float, int, complex, np.void)):
+                try:
+                    input_ = getattr(input_, "value", input_)
+                except (AttributeError, TypeError):
+                    return NotImplemented
+            else:
+                input_ = getattr(input_, "value", input_)
             arrays.append(converter(input_) if converter else input_)
 
         # Call our superclass's __array_ufunc__
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..b157c7536f
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,46 @@
+import dataclasses
+import numpy as np
+import astropy.units as u
+
+
+@dataclasses.dataclass
+class DuckArray(np.lib.mixins.NDArrayOperatorsMixin):
+    ndarray: u.Quantity
+
+    @property
+    def unit(self) -> u.UnitBase:
+        return self.ndarray.unit
+
+    def __array_ufunc__(self, function, method, *inputs, **kwargs):
+        inputs = [inp.ndarray if isinstance(inp, DuckArray) else inp for inp in inputs]
+
+        for inp in inputs:
+            if isinstance(inp, np.ndarray):
+                result = inp.__array_ufunc__(function, method, *inputs, **kwargs)
+                if result is not NotImplemented:
+                    return DuckArray(result)
+
+        return NotImplemented
+
+
+# Test cases
+print("Test 1: DuckArray + Quantity (same units)")
+try:
+    result = DuckArray(1 * u.mm) + (1 * u.mm)
+    print("Success:", result)
+except Exception as e:
+    print("Failed:", str(e))
+
+print("\nTest 2: Quantity + DuckArray (same units)")
+try:
+    result = (1 * u.mm) + DuckArray(1 * u.mm)
+    print("Success:", result)
+except Exception as e:
+    print("Failed:", str(e))
+
+print("\nTest 3: Quantity + DuckArray (different but compatible units)")
+try:
+    result = (1 * u.m) + DuckArray(1 * u.mm)
+    print("Success:", result)
+except Exception as e:
+    print("Failed:", str(e))
\ No newline at end of file
