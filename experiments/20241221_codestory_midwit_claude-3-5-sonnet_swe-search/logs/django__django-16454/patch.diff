diff --git a/django/core/management/base.py b/django/core/management/base.py
index abc6f79a15..e35159f5e2 100644
--- a/django/core/management/base.py
+++ b/django/core/management/base.py
@@ -71,6 +71,33 @@ class CommandParser(ArgumentParser):
         else:
             raise CommandError("Error: %s" % message)
 
+    def add_subparsers(self, **kwargs):
+        # Get the subparsers action from the parent
+        subparsers = super().add_subparsers(**kwargs)
+
+        # Store the parent's error handling attributes
+        parent_attrs = {
+            'missing_args_message': self.missing_args_message,
+            'called_from_command_line': self.called_from_command_line,
+        }
+
+        # Override the add_parser method to pass through error handling attributes
+        original_add_parser = subparsers.add_parser
+        def add_parser(name, **kwargs):
+            # Pass through the error handling settings
+            parser_kwargs = kwargs.copy()
+            parser_kwargs.setdefault('missing_args_message', parent_attrs['missing_args_message'])
+            parser_kwargs.setdefault('called_from_command_line', parent_attrs['called_from_command_line'])
+            
+            # Set the parser class to CommandParser
+            if 'parser_class' not in kwargs:
+                subparsers._parser_class = CommandParser
+            
+            return original_add_parser(name, **parser_kwargs)
+        
+        subparsers.add_parser = add_parser
+        return subparsers
+
 
 def handle_default_options(options):
     """
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..0f9dc17e89
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,44 @@
+#!/usr/bin/env python3
+
+from django.core.management.base import CommandParser, CommandError
+
+def main():
+    # Create a parser with the same arguments as Django's CommandParser
+    parser = CommandParser(
+        prog='test_command',
+        missing_args_message="Missing command",
+        called_from_command_line=True
+    )
+    
+    # Add subparsers like in the example
+    subparsers = parser.add_subparsers(dest='subcommand', required=True)
+    create = subparsers.add_parser('create', 
+                                  help='Create a new item',
+                                  missing_args_message='Missing required name argument')
+    create.add_argument('name', help='Name argument')
+    
+    print("\nTest 1: Missing subcommand")
+    print("-" * 50)
+    try:
+        parser.parse_args([])
+    except Exception as e:
+        print(f"Error type: {type(e).__name__}")
+        print(f"Error message: {str(e)}\n")
+    
+    print("\nTest 2: Missing required argument for subcommand")
+    print("-" * 50)
+    try:
+        parser.parse_args(['create'])
+    except Exception as e:
+        print(f"Error type: {type(e).__name__}")
+        print(f"Error message: {str(e)}\n")
+    
+    print("\nTest 3: Help message")
+    print("-" * 50)
+    try:
+        parser.parse_args(['--help'])
+    except SystemExit:
+        pass
+
+if __name__ == '__main__':
+    main()
\ No newline at end of file
