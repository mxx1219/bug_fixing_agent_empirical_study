diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py
index b9eb33329f..9a6614a809 100644
--- a/django/contrib/auth/forms.py
+++ b/django/contrib/auth/forms.py
@@ -56,6 +56,7 @@ class ReadOnlyPasswordHashField(forms.Field):
 
     def __init__(self, *args, **kwargs):
         kwargs.setdefault("required", False)
+        kwargs.setdefault("disabled", True)
         super().__init__(*args, **kwargs)
 
     def bound_data(self, data, initial):
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..13accee69b
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,63 @@
+import os
+import django
+from django.conf import settings
+from django.core.management import call_command
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        SECRET_KEY='dummy-key-for-tests',
+    )
+    django.setup()
+    # Run migrations
+    call_command('migrate', verbosity=0)
+
+from django.contrib.auth.forms import UserChangeForm, ReadOnlyPasswordHashField
+from django.contrib.auth.models import User
+
+# Create a custom form without clean_password to demonstrate the issue
+class CustomUserChangeForm(UserChangeForm):
+    class Meta:
+        model = User
+        fields = ('username', 'password')
+
+def main():
+    # Create a test user
+    user = User.objects.create_user(username='testuser', password='testpass123')
+    
+    # Create form instance with the user
+    form = CustomUserChangeForm(instance=user)
+    
+    # Check if the password field is disabled
+    password_field = form.fields['password']
+    print(f"Is password field disabled? {getattr(password_field, 'disabled', False)}")
+    
+    # Try to submit form with modified password
+    data = {
+        'username': 'testuser',
+        'password': 'modified_password'
+    }
+    form = CustomUserChangeForm(data, instance=user)
+    
+    if form.is_valid():
+        print("Form is valid")
+        # Get the actual password value that would be saved
+        password_value = form.cleaned_data.get('password')
+        print(f"Password value that would be saved: {password_value}")
+        # This should be the initial value, not the modified one
+    else:
+        print("Form is invalid")
+        print("Errors:", form.errors)
+
+if __name__ == '__main__':
+    main()
\ No newline at end of file
