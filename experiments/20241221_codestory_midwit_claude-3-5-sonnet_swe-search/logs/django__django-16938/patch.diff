diff --git a/django/core/serializers/python.py b/django/core/serializers/python.py
index 36048601af..6eac3e8d01 100644
--- a/django/core/serializers/python.py
+++ b/django/core/serializers/python.py
@@ -79,7 +79,20 @@ class Serializer(base.Serializer):
                     return self._value_from_field(value, value._meta.pk)
 
                 def queryset_iterator(obj, field):
-                    return getattr(obj, field.name).only("pk").iterator()
+                    # Get the queryset from the field's related manager
+                    queryset = getattr(obj, field.name)
+                    # Check if there's a custom manager with select_related
+                    if hasattr(field.remote_field.model, '_default_manager'):
+                        manager = field.remote_field.model._default_manager
+                        if hasattr(manager, 'get_queryset'):
+                            # Get the base queryset without any optimizations
+                            base_qs = manager.get_queryset()
+                            # Check if select_related is being used
+                            if base_qs.query.select_related:
+                                # Return iterator without only('pk') to avoid conflicts
+                                return queryset.iterator()
+                    # If no custom manager with select_related, use the optimization
+                    return queryset.only("pk").iterator()
 
             m2m_iter = getattr(obj, "_prefetched_objects_cache", {}).get(
                 field.name,
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..7694920df3
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,78 @@
+import os
+import django
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+    )
+    django.setup()
+
+from django.db import models
+from django.db.models import Manager
+from django.core import serializers
+
+def run_test():
+    class TestTagManager(Manager):
+        def get_queryset(self):
+            qs = super().get_queryset()
+            qs = qs.select_related("master")  # follow master when retrieving object by default
+            return qs
+
+    class TestTagMaster(models.Model):
+        name = models.CharField(max_length=120)
+        class Meta:
+            app_label = 'contenttypes'
+            managed = True
+
+    class TestTag(models.Model):
+        objects = TestTagManager()
+        name = models.CharField(max_length=120)
+        master = models.ForeignKey(TestTagMaster, on_delete=models.SET_NULL, null=True)
+        class Meta:
+            app_label = 'contenttypes'
+            managed = True
+
+    class Test(models.Model):
+        name = models.CharField(max_length=120)
+        tags = models.ManyToManyField(TestTag, blank=True)
+        class Meta:
+            app_label = 'contenttypes'
+            managed = True
+
+    # Create the database tables
+    from django.db import connection
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(TestTagMaster)
+        schema_editor.create_model(TestTag)
+        schema_editor.create_model(Test)
+
+    # Create test data
+    tag_master = TestTagMaster.objects.create(name="master")
+    tag = TestTag.objects.create(name="tag", master=tag_master)
+    test = Test.objects.create(name="test")
+    test.tags.add(tag)
+    test.save()
+
+    # Try to serialize
+    print("Attempting to serialize...")
+    try:
+        result = serializers.serialize("json", [test])
+        print("Serialization successful!")
+        print(result)
+    except Exception as e:
+        print("Serialization failed with error:")
+        print(e)
+
+if __name__ == "__main__":
+    run_test()
\ No newline at end of file
