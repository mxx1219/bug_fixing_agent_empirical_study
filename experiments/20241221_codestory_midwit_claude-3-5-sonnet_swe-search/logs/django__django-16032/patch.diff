diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py
index 866e38df83..65cf23b826 100644
--- a/django/db/models/lookups.py
+++ b/django/db/models/lookups.py
@@ -420,9 +420,10 @@ class In(FieldGetDbPrepValueIterableMixin, BuiltinLookup):
 
         if isinstance(self.rhs, Query):
             self.rhs.clear_ordering(clear_default=True)
-            if not self.rhs.has_select_fields:
-                self.rhs.clear_select_clause()
-                self.rhs.add_fields(["pk"])
+            # Always clear the select clause and add only the primary key
+            # to avoid issues with annotate() and alias()
+            self.rhs.clear_select_clause()
+            self.rhs.add_fields(["pk"])
         return super().get_prep_lookup()
 
     def process_rhs(self, compiler, connection):
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..37309a6c49
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,92 @@
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings first
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+    DEFAULT_AUTO_FIELD='django.db.models.AutoField',
+)
+django.setup()
+
+from django.db import models, connection
+from django.db.models import Value
+from django.test import TestCase
+
+# Models
+class Publisher(models.Model):
+    name = models.CharField(max_length=100)
+
+    class Meta:
+        app_label = 'contenttypes'
+
+class Book(models.Model):
+    publisher = models.ForeignKey(Publisher, on_delete=models.CASCADE)
+    pages = models.IntegerField()
+
+    class Meta:
+        app_label = 'contenttypes'
+
+def run_test():
+    # Create the tables
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(Publisher)
+        schema_editor.create_model(Book)
+
+    # Create test data
+    apress = Publisher.objects.create(name='Apress')
+    sams = Publisher.objects.create(name='Sams')
+    prentice = Publisher.objects.create(name='Prentice Hall')
+    morgan = Publisher.objects.create(name='Morgan Kaufmann')
+    
+    Book.objects.create(publisher=apress, pages=450)
+    Book.objects.create(publisher=sams, pages=500)
+    Book.objects.create(publisher=prentice, pages=600)
+    Book.objects.create(publisher=morgan, pages=550)
+    Book.objects.create(publisher=apress, pages=300)
+    Book.objects.create(publisher=sams, pages=350)
+
+    # Run the query
+    long_books_qs = (
+        Book.objects.filter(
+            pages__gt=400,
+        )
+        .annotate(book_annotate=Value(1))
+        .alias(book_alias=Value(1))
+    )
+    
+    print("Long books query:", long_books_qs.query)
+    
+    publisher_books_qs = (
+        Publisher.objects.filter(
+            book__in=long_books_qs
+        )
+        .values("name")
+    )
+    
+    print("Publisher books query:", publisher_books_qs.query)
+    
+    try:
+        result = list(publisher_books_qs)
+        print("Result:", result)
+    except Exception as e:
+        print("Error:", str(e))
+        raise
+
+if __name__ == '__main__':
+    try:
+        run_test()
+        print("Test completed successfully!")
+    except Exception as e:
+        print(f"Test failed with error: {e}")
+        import sys
+        sys.exit(1)
\ No newline at end of file
