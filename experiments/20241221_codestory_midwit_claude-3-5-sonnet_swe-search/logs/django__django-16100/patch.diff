diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 5f07a4208a..62e443bf43 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -2010,26 +2010,27 @@ class ModelAdmin(BaseModelAdmin):
                 request.POST, request.FILES, queryset=modified_objects
             )
             if formset.is_valid():
-                changecount = 0
-                for form in formset.forms:
-                    if form.has_changed():
-                        obj = self.save_form(request, form, change=True)
-                        self.save_model(request, obj, form, change=True)
-                        self.save_related(request, form, formsets=[], change=True)
-                        change_msg = self.construct_change_message(request, form, None)
-                        self.log_change(request, obj, change_msg)
-                        changecount += 1
-
-                if changecount:
-                    msg = ngettext(
-                        "%(count)s %(name)s was changed successfully.",
-                        "%(count)s %(name)s were changed successfully.",
-                        changecount,
-                    ) % {
-                        "count": changecount,
-                        "name": model_ngettext(self.opts, changecount),
-                    }
-                    self.message_user(request, msg, messages.SUCCESS)
+                with transaction.atomic(using=router.db_for_write(self.model)):
+                    changecount = 0
+                    for form in formset.forms:
+                        if form.has_changed():
+                            obj = self.save_form(request, form, change=True)
+                            self.save_model(request, obj, form, change=True)
+                            self.save_related(request, form, formsets=[], change=True)
+                            change_msg = self.construct_change_message(request, form, None)
+                            self.log_change(request, obj, change_msg)
+                            changecount += 1
+
+                    if changecount:
+                        msg = ngettext(
+                            "%(count)s %(name)s was changed successfully.",
+                            "%(count)s %(name)s were changed successfully.",
+                            changecount,
+                        ) % {
+                            "count": changecount,
+                            "name": model_ngettext(self.opts, changecount),
+                        }
+                        self.message_user(request, msg, messages.SUCCESS)
 
                 return HttpResponseRedirect(request.get_full_path())
 
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..bb057eea25
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,45 @@
+from django.contrib.admin import ModelAdmin
+from django.db import models
+from django.test import TestCase, RequestFactory
+from django.contrib.auth.models import User
+from django.contrib.admin.sites import AdminSite
+
+# Create a simple model for testing
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    value = models.IntegerField()
+
+    class Meta:
+        app_label = 'myapp'
+
+# Create a ModelAdmin with list_editable
+class TestModelAdmin(ModelAdmin):
+    list_display = ['name', 'value']
+    list_editable = ['value']
+
+def main():
+    # Create a test case to demonstrate the issue
+    factory = RequestFactory()
+    admin_site = AdminSite()
+    model_admin = TestModelAdmin(TestModel, admin_site)
+    
+    # Create a POST request simulating bulk edit
+    post_data = {
+        '_save': 'Save',
+        'form-TOTAL_FORMS': '2',
+        'form-INITIAL_FORMS': '2',
+        'form-0-id': '1',
+        'form-0-value': '100',
+        'form-1-id': '2',
+        'form-1-value': '200'
+    }
+    request = factory.post('/', data=post_data)
+    request.user = User.objects.create_superuser('admin', 'admin@test.com', 'password')
+    
+    print("Note: This script demonstrates that list_editable operations in Django admin")
+    print("are not wrapped in a transaction. If an error occurs during the save of any")
+    print("object, previous saves are not rolled back, leading to inconsistent state.")
+    print("\nTo fix this, we need to wrap the list_editable processing in a transaction.")
+
+if __name__ == '__main__':
+    main()
\ No newline at end of file
