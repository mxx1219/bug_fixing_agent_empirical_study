diff --git a/django/db/models/base.py b/django/db/models/base.py
index 3ce711f3f1..be395842cb 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -1708,6 +1708,9 @@ class Model(metaclass=ModelBase):
             fld = None
             for part in field.split(LOOKUP_SEP):
                 try:
+                    # Special case for 'pk' which is always a valid field
+                    if part == 'pk' and fld is not None and fld.is_relation:
+                        continue
                     fld = _cls._meta.get_field(part)
                     if fld.is_relation:
                         _cls = fld.get_path_info()[-1].to_opts.model
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..1e08bb0687
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,66 @@
+from django.db import models
+from django.core.exceptions import ValidationError
+from django.test.utils import isolate_apps
+from django.conf import settings
+from django.apps import apps
+
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=['django.contrib.contenttypes'],
+        DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3'}},
+    )
+    apps.populate(settings.INSTALLED_APPS)
+
+@isolate_apps('reproduce_error')
+def reproduce_error():
+    class Option(models.Model):
+        name = models.CharField(max_length=100)
+        
+        class Meta:
+            app_label = 'reproduce_error'
+
+    class SomeModel(models.Model):
+        option = models.ForeignKey(Option, on_delete=models.CASCADE)
+        name = models.CharField(max_length=100)
+
+        class Meta:
+            app_label = 'reproduce_error'
+            ordering = ['option__pk']  # This should now be valid
+
+    class AnotherModel(models.Model):
+        name = models.CharField(max_length=100)
+        
+        class Meta:
+            app_label = 'reproduce_error'
+            ordering = ['pk']  # Test direct pk ordering
+
+    # Test case 1: Related field pk ordering
+    errors = SomeModel._check_ordering()
+    if errors:
+        print("Test 1 - Related field pk ordering - Failed:", errors)
+    else:
+        print("Test 1 - Related field pk ordering - Passed!")
+
+    # Test case 2: Direct pk ordering
+    errors = AnotherModel._check_ordering()
+    if errors:
+        print("Test 2 - Direct pk ordering - Failed:", errors)
+    else:
+        print("Test 2 - Direct pk ordering - Passed!")
+
+    # Test case 3: Invalid field ordering (should still fail)
+    class InvalidModel(models.Model):
+        name = models.CharField(max_length=100)
+        
+        class Meta:
+            app_label = 'reproduce_error'
+            ordering = ['nonexistent__pk']  # This should still raise an error
+
+    errors = InvalidModel._check_ordering()
+    if errors:
+        print("Test 3 - Invalid field ordering - Passed! (Error raised as expected)")
+    else:
+        print("Test 3 - Invalid field ordering - Failed! (Should have raised an error)")
+
+if __name__ == "__main__":
+    reproduce_error()
\ No newline at end of file
