diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 88c9ca9f28..fcea1597ef 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -542,11 +542,7 @@ class Field(RegisterLookupMixin):
         return NotImplemented
 
     def __hash__(self):
-        return hash((
-            self.creation_counter,
-            self.model._meta.app_label if hasattr(self, 'model') else None,
-            self.model._meta.model_name if hasattr(self, 'model') else None,
-        ))
+        return hash(self.creation_counter)
 
     def __deepcopy__(self, memodict):
         # We don't have to deepcopy very much here, since most things are not
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..74f353ed8e
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,45 @@
+from django.conf import settings
+from django.db import models
+import django
+
+# Configure minimal settings
+settings.configure(
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.db.models.base',
+    ],
+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3'}},
+)
+
+# Setup Django
+django.setup()
+
+# Test Case 1: Basic dictionary usage
+f1 = models.CharField(max_length=200)
+d = {f1: 1}
+
+# Test Case 2: Multiple models using same field
+class Book(models.Model):
+    class Meta:
+        app_label = 'django.db.models.base'
+    title = f1
+
+class Magazine(models.Model):
+    class Meta:
+        app_label = 'django.db.models.base'
+    name = f1
+
+# Test Case 3: Dictionary operations after model assignment
+assert f1 in d  # Original test
+d[f1] = 2  # Test dictionary update
+assert d[f1] == 2  # Test dictionary lookup
+
+# Test Case 4: Multiple fields in dictionary
+f2 = models.CharField(max_length=100)
+d[f2] = 3
+assert f2 in d
+assert f1 in d
+assert d[f1] == 2
+assert d[f2] == 3
+
+print("All tests passed successfully!")
\ No newline at end of file
