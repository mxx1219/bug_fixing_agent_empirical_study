diff --git a/django/db/models/fields/related_lookups.py b/django/db/models/fields/related_lookups.py
index d745ecd5f9..0c2681668f 100644
--- a/django/db/models/fields/related_lookups.py
+++ b/django/db/models/fields/related_lookups.py
@@ -86,8 +86,8 @@ class RelatedIn(In):
                     AND)
             return root_constraint.as_sql(compiler, connection)
         else:
-            if (not getattr(self.rhs, 'has_select_fields', True) and
-                    not getattr(self.lhs.field.target_field, 'primary_key', False)):
+            # Always clear and reset select fields for querysets in __in lookups
+            if hasattr(self.rhs, 'clear_select_clause'):
                 self.rhs.clear_select_clause()
                 if (getattr(self.lhs.output_field, 'primary_key', False) and
                         self.lhs.output_field.model == self.rhs.model):
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..0f329d9efe
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,131 @@
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+import django
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=False,
+    )
+
+django.setup()
+
+from django.db import models, connection
+from django.db.models import Q, Count
+
+# Models
+class PropertyGroup(models.Model):
+    name = models.CharField(max_length=100)
+    created = models.DateTimeField(auto_now_add=True)
+    updated = models.DateTimeField(auto_now=True)
+    create_by = models.CharField(max_length=100)
+    update_by = models.CharField(max_length=100)
+    tenant_objs = models.JSONField(default=dict)
+
+    class Meta:
+        app_label = 'contenttypes'
+
+class ManagementAgent(models.Model):
+    name = models.CharField(max_length=100)
+    property_groups = models.ManyToManyField(PropertyGroup, through='ManagementAgentPropertyGroup')
+
+    class Meta:
+        app_label = 'contenttypes'
+
+class ManagementAgentPropertyGroup(models.Model):
+    management_agent = models.ForeignKey(ManagementAgent, on_delete=models.CASCADE)
+    property_group = models.ForeignKey(PropertyGroup, on_delete=models.CASCADE)
+
+    class Meta:
+        app_label = 'contenttypes'
+
+class ManagerTicketRatingCumulativeMovingAverage(models.Model):
+    agent = models.ForeignKey(ManagementAgent, on_delete=models.CASCADE)
+    date = models.DateField()
+    average = models.FloatField()
+    data_points = models.IntegerField()
+    created = models.DateTimeField(auto_now_add=True)
+    updated = models.DateTimeField(auto_now=True)
+    create_by = models.CharField(max_length=100)
+    update_by = models.CharField(max_length=100)
+    tenant_objs = models.JSONField(default=dict)
+
+    class Meta:
+        app_label = 'contenttypes'
+
+def setup_test_data():
+    # Create tables
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(PropertyGroup)
+        schema_editor.create_model(ManagementAgent)
+        schema_editor.create_model(ManagementAgentPropertyGroup)
+        schema_editor.create_model(ManagerTicketRatingCumulativeMovingAverage)
+
+    # Create test data
+    agent = ManagementAgent.objects.create(name="Test Agent")
+    property_group = PropertyGroup.objects.create(
+        name="Test Group",
+        create_by="test",
+        update_by="test",
+        tenant_objs={}
+    )
+    ManagementAgentPropertyGroup.objects.create(
+        management_agent=agent,
+        property_group=property_group
+    )
+    
+    ManagerTicketRatingCumulativeMovingAverage.objects.create(
+        agent=agent,
+        date="2023-01-01",
+        average=4.5,
+        data_points=10,
+        create_by="test",
+        update_by="test",
+        tenant_objs={}
+    )
+
+def test_queries():
+    queryset = ManagerTicketRatingCumulativeMovingAverage.objects.all()
+    property_groups = PropertyGroup.objects.all()
+    queryset = queryset.annotate(Count("agent__property_groups"))
+    
+    print("\nTrying query that should fail:")
+    try:
+        # This will fail in Django 3.2
+        result = queryset.filter(
+            Q(agent__property_groups__in=property_groups) |
+            Q(agent__property_groups__count=0)
+        ).distinct()
+        print(result.query)  # Print the SQL query
+        list(result)  # Force query execution
+    except Exception as e:
+        print(f"Got expected error: {str(e)}")
+    
+    print("\nTrying query that should work:")
+    try:
+        # This should work
+        result = queryset.filter(
+            Q(agent__property_groups__id__in=property_groups.values_list("id", flat=True)) |
+            Q(agent__property_groups__count=0)
+        ).distinct()
+        print(result.query)  # Print the SQL query
+        list(result)  # Force query execution
+        print("Working query executed successfully")
+    except Exception as e:
+        print(f"Working query failed: {str(e)}")
+
+if __name__ == "__main__":
+    setup_test_data()
+    test_queries()
\ No newline at end of file
