diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py
index 617ac95907..3d1b2cbeff 100644
--- a/django/db/backends/base/operations.py
+++ b/django/db/backends/base/operations.py
@@ -469,6 +469,14 @@ class BaseDatabaseOperations:
         """
         return value
 
+    def _resolve_lazy_object(self, value):
+        """Resolve lazy objects to their actual values."""
+        if hasattr(value, '_wrapped'):
+            if value._wrapped is None:
+                value._setup()
+            return value._wrapped
+        return value
+
     def adapt_unknown_value(self, value):
         """
         Transform a value to something compatible with the backend driver.
@@ -477,6 +485,9 @@ class BaseDatabaseOperations:
         cases where the target type isn't known, such as .raw() SQL queries.
         As a consequence it may not work perfectly in all circumstances.
         """
+        # First resolve any lazy objects
+        value = self._resolve_lazy_object(value)
+
         if isinstance(value, datetime.datetime):   # must be before date
             return self.adapt_datetimefield_value(value)
         elif isinstance(value, datetime.date):
diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py
index 8a105d4f35..93d96bb621 100644
--- a/django/db/backends/sqlite3/base.py
+++ b/django/db/backends/sqlite3/base.py
@@ -405,15 +405,33 @@ class SQLiteCursorWrapper(Database.Cursor):
     This fixes it -- but note that if you want to use a literal "%s" in a query,
     you'll need to use "%%s".
     """
+    def _resolve_lazy_objects(self, params):
+        """Resolve any lazy objects in the parameters."""
+        if params is None:
+            return None
+        if isinstance(params, (list, tuple)):
+            return tuple(
+                str(p._wrapped) if hasattr(p, '_wrapped') else p
+                for p in params
+            )
+        elif isinstance(params, dict):
+            return {
+                k: str(v._wrapped) if hasattr(v, '_wrapped') else v
+                for k, v in params.items()
+            }
+        return params
+
     def execute(self, query, params=None):
         if params is None:
             return Database.Cursor.execute(self, query)
         query = self.convert_query(query)
-        return Database.Cursor.execute(self, query, params)
+        resolved_params = self._resolve_lazy_objects(params)
+        return Database.Cursor.execute(self, query, resolved_params)
 
     def executemany(self, query, param_list):
         query = self.convert_query(query)
-        return Database.Cursor.executemany(self, query, param_list)
+        resolved_param_list = [self._resolve_lazy_objects(params) for params in param_list]
+        return Database.Cursor.executemany(self, query, resolved_param_list)
 
     def convert_query(self, query):
         return FORMAT_QMARK_REGEX.sub('?', query).replace('%%', '%')
diff --git a/django/db/backends/sqlite3/operations.py b/django/db/backends/sqlite3/operations.py
index 1f77b3109f..13a4b4beea 100644
--- a/django/db/backends/sqlite3/operations.py
+++ b/django/db/backends/sqlite3/operations.py
@@ -114,6 +114,14 @@ class DatabaseOperations(BaseDatabaseOperations):
     def pk_default_value(self):
         return "NULL"
 
+    def _resolve_lazy_object(self, value):
+        """Resolve lazy objects to their actual values."""
+        if hasattr(value, '_wrapped'):
+            if value._wrapped is None:
+                value._setup()
+            return value._wrapped
+        return value
+
     def _quote_params_for_last_executed_query(self, params):
         """
         Only for last_executed_query! Don't use this to execute SQL queries!
@@ -131,13 +139,16 @@ class DatabaseOperations(BaseDatabaseOperations):
                 results += self._quote_params_for_last_executed_query(chunk)
             return results
 
-        sql = 'SELECT ' + ', '.join(['QUOTE(?)'] * len(params))
+        # Resolve any lazy objects in the parameters
+        resolved_params = tuple(self._resolve_lazy_object(p) for p in params)
+
+        sql = 'SELECT ' + ', '.join(['QUOTE(?)'] * len(resolved_params))
         # Bypass Django's wrappers and use the underlying sqlite3 connection
         # to avoid logging this query - it would trigger infinite recursion.
         cursor = self.connection.connection.cursor()
         # Native sqlite3 cursors cannot be used as context managers.
         try:
-            return cursor.execute(sql, params).fetchone()
+            return cursor.execute(sql, resolved_params).fetchone()
         finally:
             cursor.close()
 
diff --git a/django/shortcuts.py b/django/shortcuts.py
index eda6f8813c..8163f400a2 100644
--- a/django/shortcuts.py
+++ b/django/shortcuts.py
@@ -72,8 +72,13 @@ def get_object_or_404(klass, *args, **kwargs):
             "First argument to get_object_or_404() must be a Model, Manager, "
             "or QuerySet, not '%s'." % klass__name
         )
+    # Resolve any lazy objects in kwargs
+    resolved_kwargs = {
+        k: str(v._wrapped) if hasattr(v, '_wrapped') else v
+        for k, v in kwargs.items()
+    }
     try:
-        return queryset.get(*args, **kwargs)
+        return queryset.get(*args, **resolved_kwargs)
     except queryset.model.DoesNotExist:
         raise Http404('No %s matches the given query.' % queryset.model._meta.object_name)
 
diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
index 9f4d84d5a2..5a7fae83cb 100644
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -160,7 +160,7 @@ class RegexPattern(CheckURLMixin):
             # positional arguments.
             kwargs = match.groupdict()
             args = () if kwargs else match.groups()
-            kwargs = {k: v for k, v in kwargs.items() if v is not None}
+            kwargs = {k: str(v) if hasattr(v, '_wrapped') else v for k, v in kwargs.items() if v is not None}
             return path[match.end():], args, kwargs
         return None
 
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..255ab5036b
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,91 @@
+import os
+import sys
+import django
+from django.conf import settings
+from django.http import HttpRequest
+from django.urls import path
+from django.views.generic import TemplateView
+from django.shortcuts import get_object_or_404
+from django.db import models
+from django.test import RequestFactory
+from django.utils.functional import SimpleLazyObject
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        ROOT_URLCONF=__name__,
+    )
+    django.setup()
+
+# Mock Account model
+class Account(models.Model):
+    slug = models.SlugField()
+    
+    class Meta:
+        app_label = 'reproduce_error'
+
+# View that demonstrates the issue
+class OfferView(TemplateView):
+    template_name = "offers/offer.html"
+    
+    def get_context_data(self, **kwargs):
+        offer_slug = kwargs.get("offer_slug", "")
+        print(f"Type of offer_slug: {type(offer_slug)}")
+        print(f"Value of offer_slug: {offer_slug}")
+        offer = get_object_or_404(Account, slug=offer_slug)
+        return {"offer": offer, "offer_slug": offer_slug}
+
+# URL patterns
+urlpatterns = [
+    path('offers/<slug:offer_slug>/', OfferView.as_view(), name='offer_view'),
+]
+
+def main():
+    # Create the database tables
+    from django.db import connection
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(Account)
+    
+    # Create a test account
+    Account.objects.create(slug='test-offer')
+    
+    # Create a request factory
+    factory = RequestFactory()
+    
+    # Create a view instance
+    view = OfferView.as_view()
+    
+    # Create a lazy object to simulate URL parameter
+    lazy_slug = SimpleLazyObject(lambda: "test-offer")
+    
+    print("\nTesting with SimpleLazyObject...")
+    try:
+        request = factory.get('/offers/test-offer/')
+        response = view(request, offer_slug=lazy_slug)
+        print("Success! The view handled the lazy object correctly")
+    except Exception as e:
+        print("Error occurred:")
+        print(str(e))
+    
+    print("\nTesting with regular string...")
+    try:
+        request = factory.get('/offers/test-offer/')
+        response = view(request, offer_slug="test-offer")
+        print("Success! The view handled the string correctly")
+    except Exception as e:
+        print("Error occurred:")
+        print(str(e))
+
+if __name__ == "__main__":
+    main()
\ No newline at end of file
