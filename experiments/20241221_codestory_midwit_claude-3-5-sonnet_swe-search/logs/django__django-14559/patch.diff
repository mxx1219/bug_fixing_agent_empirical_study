diff --git a/django/db/models/query.py b/django/db/models/query.py
index 387deca527..f5bafd8ab4 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -527,6 +527,7 @@ class QuerySet:
     def bulk_update(self, objs, fields, batch_size=None):
         """
         Update the given fields in each of the given objects in the database.
+        Returns the number of rows matched.
         """
         if batch_size is not None and batch_size < 0:
             raise ValueError('Batch size must be a positive integer.')
@@ -541,7 +542,7 @@ class QuerySet:
         if any(f.primary_key for f in fields):
             raise ValueError('bulk_update() cannot be used with primary key fields.')
         if not objs:
-            return
+            return 0
         # PK is used twice in the resulting update query, once in the filter
         # and once in the WHEN. Each field will also have one CAST.
         max_batch_size = connections[self.db].ops.bulk_batch_size(['pk', 'pk'] + fields, objs)
@@ -563,9 +564,11 @@ class QuerySet:
                     case_statement = Cast(case_statement, output_field=field)
                 update_kwargs[field.attname] = case_statement
             updates.append(([obj.pk for obj in batch_objs], update_kwargs))
+        rows_matched = 0
         with transaction.atomic(using=self.db, savepoint=False):
             for pks, update_kwargs in updates:
-                self.filter(pk__in=pks).update(**update_kwargs)
+                rows_matched += self.filter(pk__in=pks).update(**update_kwargs)
+        return rows_matched
     bulk_update.alters_data = True
 
     def get_or_create(self, defaults=None, **kwargs):
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..5b032ee294
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,53 @@
+from django.conf import settings
+from django.db import connection, models
+import os
+
+# Configure minimal Django settings
+minimal_settings = {
+    'DATABASES': {
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    'INSTALLED_APPS': ['django.contrib.contenttypes'],
+    'USE_TZ': False,
+}
+
+settings.configure(**minimal_settings)
+
+import django
+django.setup()
+
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    value = models.IntegerField()
+
+    class Meta:
+        app_label = 'contenttypes'
+
+def main():
+    # Create tables
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(TestModel)
+
+    # Create and save some test objects
+    objs = []
+    for i in range(5):
+        obj = TestModel.objects.create(name=f"test{i}", value=i)
+        objs.append(obj)
+    
+    # Update all values to be their double
+    for obj in objs:
+        obj.value *= 2
+    
+    # Demonstrate bulk_update() return value
+    result = TestModel.objects.bulk_update(objs, ['value'])
+    print(f"bulk_update() returns: {result}")  # Should print 5
+    
+    # For comparison, show what update() returns
+    update_result = TestModel.objects.filter(value__lt=6).update(value=10)
+    print(f"update() returns: {update_result}")  # Should print 3
+
+if __name__ == '__main__':
+    main()
\ No newline at end of file
