diff --git a/django/core/management/commands/runserver.py b/django/core/management/commands/runserver.py
index 3c39f57e4d..aa25787c03 100644
--- a/django/core/management/commands/runserver.py
+++ b/django/core/management/commands/runserver.py
@@ -99,7 +99,9 @@ class Command(BaseCommand):
             if not self.port.isdigit():
                 raise CommandError("%r is not a valid port number." % self.port)
             if self.addr:
-                if _ipv6:
+                if self.addr == "0":
+                    self.addr = "0.0.0.0"
+                elif _ipv6:
                     self.addr = self.addr[1:-1]
                     self.use_ipv6 = True
                     self._raw_ipv6 = True
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..69b0888aad
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,74 @@
+import os
+import sys
+import django
+import re
+from django.core.management import execute_from_command_line
+from django.conf import settings
+from django.core.management.commands.runserver import Command
+from django.utils.regex_helper import _lazy_re_compile
+
+# Define the same regex pattern as in runserver.py
+naiveip_re = _lazy_re_compile(
+    r"""^(?:
+(?P<addr>
+    (?P<ipv4>\d{1,3}(?:\.\d{1,3}){3}) |         # IPv4 address
+    (?P<ipv6>\[[a-fA-F0-9:]+\]) |               # IPv6 address
+    (?P<fqdn>[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*) # FQDN
+):)?(?P<port>\d+)$""",
+    re.X,
+)
+
+def get_display_address(addr_port):
+    """Simulate the address display without actually running the server"""
+    cmd = Command()
+    cmd.default_addr = "127.0.0.1"
+    cmd.default_addr_ipv6 = "::1"
+    cmd.default_port = "8000"
+    cmd._raw_ipv6 = False
+    cmd.use_ipv6 = False
+    
+    try:
+        if not addr_port:
+            cmd.addr = ''
+            cmd.port = cmd.default_port
+        else:
+            m = re.match(naiveip_re, addr_port)
+            if m is None:
+                return f"Error: {addr_port} is not a valid port number or address:port pair."
+            
+            cmd.addr, _ipv4, _ipv6, _fqdn, cmd.port = m.groups()
+            
+            if cmd.addr:
+                if cmd.addr == "0":
+                    cmd.addr = "0.0.0.0"
+                elif _ipv6:
+                    cmd.addr = cmd.addr[1:-1]
+                    cmd.use_ipv6 = True
+                    cmd._raw_ipv6 = True
+            
+        if not cmd.addr:
+            cmd.addr = cmd.default_addr_ipv6 if cmd.use_ipv6 else cmd.default_addr
+            cmd._raw_ipv6 = cmd.use_ipv6
+            
+        addr = f"[{cmd.addr}]" if cmd._raw_ipv6 else cmd.addr
+        return f"Would start development server at http://{addr}:{cmd.port}/"
+    except Exception as e:
+        return f"Error: {str(e)}"
+
+# Set up Django environment
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')
+settings.configure(DEBUG=True)
+django.setup()
+
+# Test various address formats
+test_cases = [
+    '0:8080',           # Our main test case
+    '127.0.0.1:8081',   # Regular IP address
+    '[::1]:8082',       # IPv6 address
+    '8083',             # No address specified
+    '0.0.0.0:8084',     # Explicit all interfaces IPv4
+]
+
+for test_case in test_cases:
+    print(f"\nTesting address format: {test_case}")
+    print(get_display_address(test_case))
\ No newline at end of file
