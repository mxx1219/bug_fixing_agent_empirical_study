diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py
index fdca700c9d..ed3700bfa0 100644
--- a/django/db/models/fields/json.py
+++ b/django/db/models/fields/json.py
@@ -131,11 +131,11 @@ def compile_json_path(key_transforms, include_root=True):
     for key_transform in key_transforms:
         try:
             num = int(key_transform)
+            # For numeric keys, also add them as strings for SQLite compatibility
+            path.append("[%s]" % json.dumps(str(num)))
         except ValueError:  # non-integer
             path.append(".")
             path.append(json.dumps(key_transform))
-        else:
-            path.append("[%s]" % num)
     return "".join(path)
 
 
@@ -227,9 +227,37 @@ class HasKeyLookup(PostgresOperatorLookup):
         return super().as_postgresql(compiler, connection)
 
     def as_sqlite(self, compiler, connection):
-        return self.as_sql(
-            compiler, connection, template="JSON_TYPE(%s, %%s) IS NOT NULL"
-        )
+        lhs, lhs_params = self.process_lhs(compiler, connection)
+        rhs = self.rhs
+        rhs_params = []
+        
+        if not isinstance(rhs, (list, tuple)):
+            rhs = [rhs]
+            
+        for key in rhs:
+            if isinstance(key, KeyTransform):
+                *_, rhs_key_transforms = key.preprocess_lhs(compiler, connection)
+            else:
+                rhs_key_transforms = [key]
+                
+            # For SQLite, we need to handle both string and numeric keys
+            # Use json_each to extract keys and check if our key exists
+            if len(rhs_key_transforms) == 1:
+                key_value = str(rhs_key_transforms[0])
+                rhs_params.extend([key_value])
+                
+        template = """
+            EXISTS(
+                SELECT 1 FROM json_each(%s)
+                WHERE json_each.key = %%s
+            )
+        """
+        sql = template % lhs
+        
+        if self.logical_operator:
+            sql = "(%s)" % self.logical_operator.join([sql] * len(rhs_params))
+            
+        return sql, tuple(lhs_params) + tuple(rhs_params)
 
 
 class HasKey(HasKeyLookup):
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..2452d03b58
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,79 @@
+import os
+import django
+from django.conf import settings
+from django.db import models
+from django.test import TestCase
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+)
+django.setup()
+
+# Create the model
+class JsonFieldHasKeyTest(models.Model):
+    data = models.JSONField()
+
+    class Meta:
+        app_label = 'reproduce_test'
+
+# Create the test case
+class JsonFieldHasKeyTestCase(TestCase):
+    def setUp(self):
+        JsonFieldHasKeyTest.objects.create(data={'foo': 'bar'})
+        JsonFieldHasKeyTest.objects.create(data={'1111': 'bar'})
+        JsonFieldHasKeyTest.objects.create(data={'2222': {'3333': 'nested'}})
+        JsonFieldHasKeyTest.objects.create(data={'mixed': 'value', '4444': 'numeric'})
+        JsonFieldHasKeyTest.objects.create(data={'5555': 'first', '6666': 'second'})
+
+    def test_json_field_has_key(self):
+        # Test basic string and numeric keys
+        c1 = JsonFieldHasKeyTest.objects.filter(data__has_key='foo').count()
+        c2 = JsonFieldHasKeyTest.objects.filter(data__has_key='1111').count()
+        print(f"Count for 'foo': {c1}")
+        print(f"Count for '1111': {c2}")
+        assert c1 == 1, "Should have found 1 entry with key 'foo'"
+        assert c2 == 1, "Should have found 1 entry with key '1111'"
+
+        # Test nested numeric key
+        c3 = JsonFieldHasKeyTest.objects.filter(data__has_key='2222').count()
+        print(f"Count for nested '2222': {c3}")
+        assert c3 == 1, "Should have found 1 entry with key '2222'"
+
+        # Test mixed string and numeric keys
+        c4 = JsonFieldHasKeyTest.objects.filter(data__has_key='4444').count()
+        print(f"Count for mixed '4444': {c4}")
+        assert c4 == 1, "Should have found 1 entry with key '4444'"
+
+        # Test has_keys with multiple numeric keys
+        c5 = JsonFieldHasKeyTest.objects.filter(data__has_keys=['5555', '6666']).count()
+        print(f"Count for multiple numeric keys '5555','6666': {c5}")
+        assert c5 == 1, "Should have found 1 entry with keys '5555' and '6666'"
+
+if __name__ == '__main__':
+    # Create the tables
+    from django.db import connection
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(JsonFieldHasKeyTest)
+    
+    # Run the test
+    test_case = JsonFieldHasKeyTestCase()
+    test_case._pre_setup()
+    test_case.setUp()
+    try:
+        test_case.test_json_field_has_key()
+        print("Test passed successfully!")
+    except AssertionError as e:
+        print(f"Test failed: {str(e)}")
+    finally:
+        test_case._post_teardown()
\ No newline at end of file
