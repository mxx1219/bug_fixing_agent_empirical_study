diff --git a/django/core/servers/basehttp.py b/django/core/servers/basehttp.py
index fef5532e58..1be1c3defb 100644
--- a/django/core/servers/basehttp.py
+++ b/django/core/servers/basehttp.py
@@ -127,6 +127,12 @@ class ServerHandler(simple_server.ServerHandler):
         super().__init__(
             LimitedStream(stdin, content_length), stdout, stderr, environ, **kwargs
         )
+        self._request_method = environ.get('REQUEST_METHOD')
+
+    def write(self, data):
+        """Don't write response body for HEAD requests"""
+        if self._request_method != 'HEAD':
+            super().write(data)
 
     def cleanup_headers(self):
         super().cleanup_headers()
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..60eaf6f3f3
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,105 @@
+import os
+import sys
+import http.client
+import time
+import threading
+import tempfile
+import shutil
+
+def setup_django_environment():
+    # Create a temporary directory for our test project
+    temp_dir = tempfile.mkdtemp()
+    os.chdir(temp_dir)
+    
+    # Add the Django source to Python path
+    django_path = os.path.abspath(os.path.join(os.path.dirname(__file__), ''))
+    sys.path.insert(0, django_path)
+    sys.path.insert(0, temp_dir)
+    
+    # Create a basic Django settings file
+    with open('settings.py', 'w') as f:
+        f.write('''
+from pathlib import Path
+BASE_DIR = Path(__file__).resolve().parent
+SECRET_KEY = 'dummy-key-for-test'
+DEBUG = True
+ALLOWED_HOSTS = ['127.0.0.1', 'localhost']
+INSTALLED_APPS = []
+MIDDLEWARE = []
+ROOT_URLCONF = 'urls'
+TEMPLATES = []
+DATABASES = {'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': BASE_DIR / 'db.sqlite3'}}
+''')
+    
+    # Create a basic URLs file
+    with open('urls.py', 'w') as f:
+        f.write('''
+from django.http import HttpResponse
+from django.urls import path
+
+def home(request):
+    return HttpResponse('<html><body>Test page</body></html>')
+
+urlpatterns = [
+    path('', home),
+]
+''')
+    
+    # Set environment variables
+    os.environ['DJANGO_SETTINGS_MODULE'] = 'settings'
+    
+    return temp_dir
+
+def start_django_server():
+    import django
+    django.setup()
+    from django.core.management import call_command
+    
+    # Start the development server in a separate thread
+    server_thread = threading.Thread(target=call_command, args=('runserver', '8000', '--noreload'))
+    server_thread.daemon = True
+    server_thread.start()
+    time.sleep(2)  # Wait for server to start
+
+def make_head_request():
+    conn = http.client.HTTPConnection('127.0.0.1:8000')
+    conn.request('HEAD', '/')
+    response = conn.getresponse()
+    
+    # Read and store headers
+    headers = str(response.headers)
+    
+    # Try to read the body (this should be empty for HEAD requests)
+    body = response.read().decode('utf-8')
+    
+    print('Response Status:', response.status)
+    print('Headers:')
+    print(headers)
+    print('Body length:', len(body))
+    if body:
+        print('Body was returned (this is incorrect for HEAD requests):')
+        print(body[:200] + '...' if len(body) > 200 else body)
+    else:
+        print('No body returned (correct behavior for HEAD requests)')
+    
+    return len(body) == 0
+
+if __name__ == '__main__':
+    temp_dir = None
+    try:
+        temp_dir = setup_django_environment()
+        start_django_server()
+        
+        success = make_head_request()
+        if success:
+            print('\nTest PASSED: HEAD request handled correctly')
+            sys.exit(0)
+        else:
+            print('\nTest FAILED: HEAD request returned a response body')
+            sys.exit(1)
+    except Exception as e:
+        print(f'Error: {e}')
+        sys.exit(1)
+    finally:
+        if temp_dir:
+            shutil.rmtree(temp_dir, ignore_errors=True)
\ No newline at end of file
