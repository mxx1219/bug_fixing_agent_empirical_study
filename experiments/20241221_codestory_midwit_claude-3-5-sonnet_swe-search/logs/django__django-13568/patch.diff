diff --git a/django/contrib/auth/checks.py b/django/contrib/auth/checks.py
index 65fc266f7e..bb90bfe17b 100644
--- a/django/contrib/auth/checks.py
+++ b/django/contrib/auth/checks.py
@@ -4,6 +4,7 @@ from types import MethodType
 from django.apps import apps
 from django.conf import settings
 from django.core import checks
+from django.db import models
 
 from .management import _get_builtin_permissions
 
@@ -52,7 +53,17 @@ def check_user_model(app_configs=None, **kwargs):
         )
 
     # Check that the username field is unique
-    if not cls._meta.get_field(cls.USERNAME_FIELD).unique:
+    username_field = cls.USERNAME_FIELD
+    field_unique = cls._meta.get_field(username_field).unique
+    
+    # Check if the username field is part of any UniqueConstraint
+    has_unique_constraint = any(
+        isinstance(constraint, models.UniqueConstraint) and
+        username_field in constraint.fields
+        for constraint in cls._meta.constraints
+    )
+    
+    if not (field_unique or has_unique_constraint):
         if (settings.AUTHENTICATION_BACKENDS ==
                 ['django.contrib.auth.backends.ModelBackend']):
             errors.append(
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..9475e2e918
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,79 @@
+from django.conf import settings
+
+# Configure settings before importing models
+settings.configure(
+    INSTALLED_APPS=['django.contrib.auth', 'django.contrib.contenttypes'],
+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3'}},
+    AUTHENTICATION_BACKENDS=['django.contrib.auth.backends.ModelBackend'],
+)
+
+import django
+django.setup()
+
+from django.contrib.auth.base_user import AbstractBaseUser
+from django.core import checks
+from django.db import models
+from django.contrib.auth import checks as auth_checks
+
+# First test with no uniqueness at all - should raise error
+print("Test 1: No uniqueness")
+class User1(AbstractBaseUser):
+    username = models.CharField(max_length=30)
+    USERNAME_FIELD = "username"
+    
+    class Meta:
+        app_label = 'testapp'
+
+# Create a mock AppConfig
+class MockAppConfig:
+    label = 'testapp'
+    def get_model(self, model_name):
+        return User1
+
+# Set AUTH_USER_MODEL to our test model
+settings.AUTH_USER_MODEL = 'testapp.User1'
+errors = auth_checks.check_user_model([MockAppConfig()])
+for error in errors:
+    if error.id in ['auth.E003', 'auth.W004']:
+        print(f"{error.id}: {error.msg}")
+
+print("\nTest 2: With UniqueConstraint")
+# Now test with UniqueConstraint - should not raise error
+class User2(AbstractBaseUser):
+    username = models.CharField(max_length=30)
+    USERNAME_FIELD = "username"
+    
+    class Meta:
+        app_label = 'testapp'
+        constraints = [
+            models.UniqueConstraint(fields=["username"], name="user_username_unq")
+        ]
+
+class MockAppConfig2(MockAppConfig):
+    def get_model(self, model_name):
+        return User2
+
+settings.AUTH_USER_MODEL = 'testapp.User2'
+errors = auth_checks.check_user_model([MockAppConfig2()])
+for error in errors:
+    if error.id in ['auth.E003', 'auth.W004']:
+        print(f"{error.id}: {error.msg}")
+
+print("\nTest 3: With unique=True")
+# Finally test with unique=True - should not raise error
+class User3(AbstractBaseUser):
+    username = models.CharField(max_length=30, unique=True)
+    USERNAME_FIELD = "username"
+    
+    class Meta:
+        app_label = 'testapp'
+
+class MockAppConfig3(MockAppConfig):
+    def get_model(self, model_name):
+        return User3
+
+settings.AUTH_USER_MODEL = 'testapp.User3'
+errors = auth_checks.check_user_model([MockAppConfig3()])
+for error in errors:
+    if error.id in ['auth.E003', 'auth.W004']:
+        print(f"{error.id}: {error.msg}")
\ No newline at end of file
