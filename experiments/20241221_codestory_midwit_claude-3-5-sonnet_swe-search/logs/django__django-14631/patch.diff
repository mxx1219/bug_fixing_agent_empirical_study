diff --git a/django/forms/boundfield.py b/django/forms/boundfield.py
index 88adadb37d..606ed4884d 100644
--- a/django/forms/boundfield.py
+++ b/django/forms/boundfield.py
@@ -232,6 +232,25 @@ class BoundField:
     def widget_type(self):
         return re.sub(r'widget$|input$', '', self.field.widget.__class__.__name__.lower())
 
+    def _did_change(self):
+        """
+        Return True if the field value has changed from its initial value.
+        """
+        data_value = self.data
+        if not self.field.show_hidden_initial:
+            initial_value = self.initial
+        else:
+            initial_prefixed_name = self.form.add_initial_prefix(self.name)
+            hidden_widget = self.field.hidden_widget()
+            try:
+                initial_value = self.field.to_python(
+                    self.form._widget_data_value(hidden_widget, initial_prefixed_name)
+                )
+            except ValidationError:
+                # Always assume data has changed if validation fails.
+                return True
+        return self.field.has_changed(initial_value, data_value)
+
 
 @html_safe
 class BoundWidget:
diff --git a/django/forms/forms.py b/django/forms/forms.py
index d14037bfe9..18bfdf74c0 100644
--- a/django/forms/forms.py
+++ b/django/forms/forms.py
@@ -128,6 +128,11 @@ class BaseForm:
         fields.update(self.fields)  # add remaining fields in original order
         self.fields = fields
 
+    def _bound_items(self):
+        """Yield (name, bf) pairs, where bf is a BoundField object."""
+        for name in self.fields:
+            yield name, self[name]
+
     def __str__(self):
         return self.as_table()
 
@@ -388,13 +393,14 @@ class BaseForm:
 
     def _clean_fields(self):
         for name, field in self.fields.items():
+            bf = self[name]
             if field.disabled:
                 value = self.get_initial_for_field(field, name)
             else:
-                value = self._field_data_value(field, self.add_prefix(name))
+                value = bf.data
             try:
                 if isinstance(field, FileField):
-                    initial = self.get_initial_for_field(field, name)
+                    initial = bf.initial
                     value = field.clean(value, initial)
                 else:
                     value = field.clean(value)
@@ -436,27 +442,7 @@ class BaseForm:
 
     @cached_property
     def changed_data(self):
-        data = []
-        for name, field in self.fields.items():
-            data_value = self._field_data_value(field, self.add_prefix(name))
-            if not field.show_hidden_initial:
-                # Use the BoundField's initial as this is the value passed to
-                # the widget.
-                initial_value = self[name].initial
-            else:
-                initial_prefixed_name = self.add_initial_prefix(name)
-                hidden_widget = field.hidden_widget()
-                try:
-                    initial_value = field.to_python(
-                        self._widget_data_value(hidden_widget, initial_prefixed_name)
-                    )
-                except ValidationError:
-                    # Always assume data has changed if validation fails.
-                    data.append(name)
-                    continue
-            if field.has_changed(initial_value, data_value):
-                data.append(name)
-        return data
+        return [name for name, bf in self._bound_items() if bf._did_change()]
 
     @property
     def media(self):
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..e0266f462c
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,29 @@
+from django import forms
+from django.forms import Form
+from datetime import datetime
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        USE_I18N=False,
+        USE_L10N=False,
+        USE_TZ=False,
+    )
+
+class TestForm(Form):
+    name = forms.CharField(initial='John')
+    date = forms.DateTimeField(initial=lambda: datetime.now())
+
+# Create a form with data
+form = TestForm(data={'name': 'Jane'})
+
+# Show inconsistency between form._clean_fields() and form[name].initial
+print("Form is bound:", form.is_bound)
+print("Form is valid:", form.is_valid())  # This calls _clean_fields()
+print("Cleaned data:", form.cleaned_data)
+print("Name field initial via BoundField:", form['name'].initial)
+print("Date field initial via BoundField:", form['date'].initial)
+
+# Show changed data
+print("Changed data:", form.changed_data)
\ No newline at end of file
