diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index 967a91fdc8..1988b47cbf 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -861,6 +861,21 @@ class AddIndex(IndexOperation):
     def migration_name_fragment(self):
         return "%s_%s" % (self.model_name_lower, self.index.name.lower())
 
+    def reduce(self, operation, app_label):
+        if (
+            isinstance(operation, RemoveIndex)
+            and self.model_name_lower == operation.model_name_lower
+            and self.index.name.lower() == operation.name.lower()
+        ):
+            return []
+        elif (
+            isinstance(operation, AddIndex)
+            and self.model_name_lower == operation.model_name_lower
+            and self.index.name.lower() == operation.index.name.lower()
+        ):
+            return [self]  # Keep only the first AddIndex
+        return super().reduce(operation, app_label)
+
 
 class RemoveIndex(IndexOperation):
     """Remove an index from a model."""
@@ -904,6 +919,15 @@ class RemoveIndex(IndexOperation):
     def migration_name_fragment(self):
         return "remove_%s_%s" % (self.model_name_lower, self.name.lower())
 
+    def reduce(self, operation, app_label):
+        if (
+            isinstance(operation, RemoveIndex)
+            and self.model_name_lower == operation.model_name_lower
+            and self.name.lower() == operation.name.lower()
+        ):
+            return [self]  # Keep only the first RemoveIndex
+        return super().reduce(operation, app_label)
+
 
 class RenameIndex(IndexOperation):
     """Rename an index."""
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..fc518c8cca
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,98 @@
+from django.db import migrations, models
+from django.db.migrations.optimizer import MigrationOptimizer
+
+def test_index_operations():
+    # Test 1: Add and remove same index
+    operations = [
+        migrations.AddIndex(
+            model_name='testmodel',
+            index=models.Index(fields=['name'], name='test_idx'),
+        ),
+        migrations.RemoveIndex(
+            model_name='testmodel',
+            name='test_idx',
+        ),
+    ]
+    
+    optimizer = MigrationOptimizer()
+    optimized = optimizer.optimize(operations, app_label='testapp')
+    
+    print("Test 1: Add/Remove same index")
+    print("Original operations:", len(operations))
+    print("Optimized operations:", len(optimized))
+    print("Expected: 0 operations (cancel out)\n")
+    
+    # Test 2: Duplicate AddIndex
+    operations = [
+        migrations.AddIndex(
+            model_name='testmodel',
+            index=models.Index(fields=['name'], name='test_idx'),
+        ),
+        migrations.AddIndex(
+            model_name='testmodel',
+            index=models.Index(fields=['name'], name='test_idx'),
+        ),
+    ]
+    
+    optimized = optimizer.optimize(operations, app_label='testapp')
+    print("Test 2: Duplicate AddIndex")
+    print("Original operations:", len(operations))
+    print("Optimized operations:", len(optimized))
+    print("Expected: 1 operation (deduplicated)\n")
+    
+    # Test 3: Duplicate RemoveIndex
+    operations = [
+        migrations.RemoveIndex(
+            model_name='testmodel',
+            name='test_idx',
+        ),
+        migrations.RemoveIndex(
+            model_name='testmodel',
+            name='test_idx',
+        ),
+    ]
+    
+    optimized = optimizer.optimize(operations, app_label='testapp')
+    print("Test 3: Duplicate RemoveIndex")
+    print("Original operations:", len(operations))
+    print("Optimized operations:", len(optimized))
+    print("Expected: 1 operation (deduplicated)\n")
+    
+    # Test 4: Different indexes should not be optimized
+    operations = [
+        migrations.AddIndex(
+            model_name='testmodel',
+            index=models.Index(fields=['name'], name='test_idx1'),
+        ),
+        migrations.AddIndex(
+            model_name='testmodel',
+            index=models.Index(fields=['age'], name='test_idx2'),
+        ),
+    ]
+    
+    optimized = optimizer.optimize(operations, app_label='testapp')
+    print("Test 4: Different indexes")
+    print("Original operations:", len(operations))
+    print("Optimized operations:", len(optimized))
+    print("Expected: 2 operations (no optimization)\n")
+    
+    # Test 5: Case insensitive index names
+    operations = [
+        migrations.AddIndex(
+            model_name='testmodel',
+            index=models.Index(fields=['name'], name='Test_Idx'),
+        ),
+        migrations.RemoveIndex(
+            model_name='testmodel',
+            name='test_idx',
+        ),
+    ]
+    
+    optimized = optimizer.optimize(operations, app_label='testapp')
+    print("Test 5: Case insensitive index names")
+    print("Original operations:", len(operations))
+    print("Optimized operations:", len(optimized))
+    print("Expected: 0 operations (cancel out despite case)\n")
+
+if __name__ == '__main__':
+    test_index_operations()
\ No newline at end of file
