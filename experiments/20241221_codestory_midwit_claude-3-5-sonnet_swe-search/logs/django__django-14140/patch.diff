diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py
index ae0f886107..48a4a56f67 100644
--- a/django/db/models/query_utils.py
+++ b/django/db/models/query_utils.py
@@ -87,7 +87,10 @@ class Q(tree.Node):
         args, kwargs = (), {}
         if len(self.children) == 1 and not isinstance(self.children[0], Q):
             child = self.children[0]
-            kwargs = {child[0]: child[1]}
+            if isinstance(child, tuple) and len(child) == 2:
+                kwargs = {child[0]: child[1]}
+            else:
+                args = (child,)
         else:
             args = tuple(self.children)
             if self.connector != self.default:
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..0a66418927
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,30 @@
+from django.db.models import Q
+
+# Create a non-subscriptable object
+class NonSubscriptable:
+    def __str__(self):
+        return "NonSubscriptable()"
+
+# Test case 1: Normal Q object with single key-value pair
+q1 = Q(x=1)
+print("Q(x=1).deconstruct():", q1.deconstruct())
+
+# Test case 2: Q object with multiple key-value pairs
+q2 = Q(x=1, y=2)
+print("Q(x=1, y=2).deconstruct():", q2.deconstruct())
+
+# Test case 3: Q object with non-subscriptable object
+q3 = Q(NonSubscriptable())
+print("Q(NonSubscriptable()).deconstruct():", q3.deconstruct())
+
+# Test case 4: Q object with tuple
+q4 = Q(('key', 'value'))
+print("Q(('key', 'value')).deconstruct():", q4.deconstruct())
+
+# Test case 5: Q object with list
+q5 = Q(['item1', 'item2'])
+print("Q(['item1', 'item2']).deconstruct():", q5.deconstruct())
+
+# Test case 6: Nested Q objects
+q6 = Q(Q(x=1) | Q(y=2))
+print("Q(Q(x=1) | Q(y=2)).deconstruct():", q6.deconstruct())
\ No newline at end of file
