diff --git a/django/contrib/admin/views/autocomplete.py b/django/contrib/admin/views/autocomplete.py
index 3903e4c98c..78788dd094 100644
--- a/django/contrib/admin/views/autocomplete.py
+++ b/django/contrib/admin/views/autocomplete.py
@@ -9,6 +9,13 @@ class AutocompleteJsonView(BaseListView):
     paginate_by = 20
     admin_site = None
 
+    def serialize_result(self, obj, to_field_name):
+        """
+        Convert the provided object into a dictionary with id and text keys.
+        Override this method to customize the result dictionary.
+        """
+        return {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}
+
     def get(self, request, *args, **kwargs):
         """
         Return a JsonResponse with search results of the form:
@@ -26,8 +33,7 @@ class AutocompleteJsonView(BaseListView):
         context = self.get_context_data()
         return JsonResponse({
             'results': [
-                {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}
-                for obj in context['object_list']
+                self.serialize_result(obj, to_field_name) for obj in context['object_list']
             ],
             'pagination': {'more': context['page_obj'].has_next()},
         })
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..e5b1dfc2e0
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,50 @@
+from django.contrib.admin.views.autocomplete import AutocompleteJsonView
+from django.http import JsonResponse
+from django.test import RequestFactory
+from django.contrib import admin
+from django.db import models
+
+# Create a simple model for testing
+class Note(models.Model):
+    text = models.CharField(max_length=100)
+    notes = models.TextField()
+
+    def __str__(self):
+        return self.text
+
+print("Before the refactor, we needed to override the entire get() method:")
+print("""class CustomAutocompleteJsonView(AutocompleteJsonView):
+    def get(self, request, *args, **kwargs):
+        self.term, self.model_admin, self.source_field, to_field_name = self.process_request(request)
+        if not self.has_perm(request):
+            raise PermissionDenied
+        self.object_list = self.get_queryset()
+        context = self.get_context_data()
+        return JsonResponse({
+            'results': [
+                {'id': str(getattr(obj, to_field_name)), 'text': str(obj), 'notes': obj.notes}
+                for obj in context['object_list']
+            ],
+            'pagination': {'more': context['page_obj'].has_next()},
+        })
+""")
+
+print("\nAfter the refactor, we can just override serialize_result():")
+print("""class CustomAutocompleteJsonView(AutocompleteJsonView):
+    def serialize_result(self, obj, to_field_name):
+        # Use the | operator to merge dictionaries (Python 3.9+)
+        return super().serialize_result(obj, to_field_name) | {'notes': obj.notes}
+""")
+
+# Demonstrate the new implementation
+class CustomAutocompleteJsonView(AutocompleteJsonView):
+    def serialize_result(self, obj, to_field_name):
+        # Use the | operator to merge dictionaries (Python 3.9+)
+        base_result = super().serialize_result(obj, to_field_name)
+        return base_result | {'notes': obj.notes}
+
+print("\nThe new implementation:")
+print("1. Is more maintainable - only override what needs to change")
+print("2. Reduces risk - core get() method functionality stays intact")
+print("3. Is future-proof - changes to get() method won't affect customizations")
+print("4. Is more flexible - easily add or modify result fields")
\ No newline at end of file
