diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py
index 27b5cbd379..e29cc2b32f 100644
--- a/django/db/migrations/serializer.py
+++ b/django/db/migrations/serializer.py
@@ -120,9 +120,8 @@ class EnumSerializer(BaseSerializer):
     def serialize(self):
         enum_class = self.value.__class__
         module = enum_class.__module__
-        v_string, v_imports = serializer_factory(self.value.value).serialize()
-        imports = {'import %s' % module, *v_imports}
-        return "%s.%s(%s)" % (module, enum_class.__name__, v_string), imports
+        # Use the name of the enum member instead of its value
+        return "%s.%s['%s']" % (module, enum_class.__name__, self.value.name), {'import %s' % module}
 
 
 class FloatSerializer(BaseSimpleSerializer):
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..a0008fb290
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,84 @@
+import os
+import sys
+import django
+from pathlib import Path
+
+# Create test app directory structure
+test_app_dir = Path('test_app')
+test_app_dir.mkdir(exist_ok=True)
+(test_app_dir / '__init__.py').touch()
+(test_app_dir / 'migrations').mkdir(exist_ok=True)
+(test_app_dir / 'migrations' / '__init__.py').touch()
+(test_app_dir / 'apps.py').write_text('''
+from django.apps import AppConfig
+
+class TestAppConfig(AppConfig):
+    name = 'test_app'
+''')
+
+# Create models.py with the example code
+models_content = '''
+from enum import Enum
+from django.utils.translation import gettext_lazy as _
+from django.db import models
+
+class Status(Enum):
+    GOOD = _('Good')  # 'Good' will be translated
+    BAD = _('Bad')    # 'Bad' will be translated
+    
+    def __str__(self):
+        return self.name
+
+class Item(models.Model):
+    status = models.CharField(default=Status.GOOD, max_length=128)
+'''
+
+(test_app_dir / 'models.py').write_text(models_content)
+
+# Add current directory to Python path
+sys.path.append(os.getcwd())
+
+# Configure Django settings
+from django.conf import settings
+from django.utils import translation
+
+settings.configure(
+    DEBUG=True,
+    INSTALLED_APPS=[
+        'test_app',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    USE_I18N=True,
+    LANGUAGES=[
+        ('en', 'English'),
+        ('es', 'Spanish'),
+    ],
+)
+
+django.setup()
+
+# Generate migrations
+from django.core.management import execute_from_command_line
+sys.argv = ['manage.py', 'makemigrations', 'test_app']
+execute_from_command_line(sys.argv)
+
+print("\nGenerated migration file content:")
+with open(test_app_dir / 'migrations' / '0001_initial.py', 'r') as f:
+    print(f.read())
+
+# Test that the migration works with different languages
+from test_app.models import Status, Item
+
+print("\nTesting with different languages:")
+print("Default language:")
+print(f"Status.GOOD.value = {Status.GOOD.value}")
+
+translation.activate('es')
+print("\nSpanish language:")
+print(f"Status.GOOD.value = {Status.GOOD.value}")  # Should show translated value
+print("\nBut the migration still works because it uses the name 'GOOD' instead of the value")
\ No newline at end of file
