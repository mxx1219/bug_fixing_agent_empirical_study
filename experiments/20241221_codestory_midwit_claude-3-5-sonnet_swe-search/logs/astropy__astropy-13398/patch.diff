diff --git a/astropy/coordinates/builtin_frames/__init__.py b/astropy/coordinates/builtin_frames/__init__.py
index 6fd688c285..1315098747 100644
--- a/astropy/coordinates/builtin_frames/__init__.py
+++ b/astropy/coordinates/builtin_frames/__init__.py
@@ -50,6 +50,7 @@ from . import cirs_observed_transforms
 from . import icrs_observed_transforms
 from . import intermediate_rotation_transforms
 from . import ecliptic_transforms
+from . import itrs_observed_transforms
 
 # Import this after importing other frames, since this requires various
 # transformtions to set up the LSR frames
diff --git a/astropy/coordinates/builtin_frames/itrs_observed_transforms.py b/astropy/coordinates/builtin_frames/itrs_observed_transforms.py
new file mode 100644
index 0000000000..d73bb9f977
--- /dev/null
+++ b/astropy/coordinates/builtin_frames/itrs_observed_transforms.py
@@ -0,0 +1,106 @@
+"""
+This module contains the direct transformations between ITRS and observed frames
+(AltAz and HADec) that stay within the ITRS system.
+"""
+
+import numpy as np
+
+from astropy import units as u
+from astropy.coordinates.matrix_utilities import rotation_matrix, matrix_transpose
+from astropy.coordinates.baseframe import frame_transform_graph
+from astropy.coordinates.transformations import FunctionTransformWithFiniteDifference
+from astropy.coordinates.builtin_frames.utils import PIOVER2
+from astropy.coordinates.builtin_frames.altaz import AltAz
+from astropy.coordinates.builtin_frames.hadec import HADec
+from astropy.coordinates.builtin_frames.itrs import ITRS
+
+
+def itrs_to_observed_mat(observed_frame):
+    """
+    Form the transformation matrix from ITRS to either AltAz or HADec frame.
+
+    Parameters
+    ----------
+    observed_frame : `~astropy.coordinates.BaseCoordinateFrame`
+        The target frame (either AltAz or HADec)
+
+    Returns
+    -------
+    mat : ndarray
+        A 3x3 matrix for transforming ITRS coordinates to the target frame
+    """
+    lon, lat, height = observed_frame.location.to_geodetic('WGS84')
+    elong = lon.to_value(u.radian)
+
+    if isinstance(observed_frame, AltAz):
+        # form ITRS to AltAz matrix
+        elat = lat.to_value(u.radian)
+        # AltAz frame is left handed
+        minus_x = np.eye(3)
+        minus_x[0][0] = -1.0
+        mat = (minus_x
+               @ rotation_matrix(PIOVER2 - elat, 'y', unit=u.radian)
+               @ rotation_matrix(elong, 'z', unit=u.radian))
+
+    else:
+        # form ITRS to HADec matrix
+        # HADec frame is left handed
+        minus_y = np.eye(3)
+        minus_y[1][1] = -1.0
+        mat = (minus_y
+               @ rotation_matrix(elong, 'z', unit=u.radian))
+    return mat
+
+
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ITRS, AltAz)
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ITRS, HADec)
+def itrs_to_observed(itrs_coo, observed_frame):
+    """
+    Transform from ITRS to either AltAz or HADec frame.
+    This transformation stays entirely within the ITRS system and treats
+    ITRS coordinates as time invariant.
+
+    Parameters
+    ----------
+    itrs_coo : `~astropy.coordinates.ITRS`
+        ITRS coordinates to transform
+    observed_frame : `~astropy.coordinates.BaseCoordinateFrame`
+        Frame to transform to (either AltAz or HADec)
+
+    Returns
+    -------
+    coord : `~astropy.coordinates.BaseCoordinateFrame`
+        The transformed coordinates in the target frame
+    """
+    # Form the Topocentric ITRS position
+    topocentric_itrs_repr = (itrs_coo.cartesian
+                            - observed_frame.location.get_itrs().cartesian)
+    rep = topocentric_itrs_repr.transform(itrs_to_observed_mat(observed_frame))
+    return observed_frame.realize_frame(rep)
+
+
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, AltAz, ITRS)
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, HADec, ITRS)
+def observed_to_itrs(observed_coo, itrs_frame):
+    """
+    Transform from either AltAz or HADec frame to ITRS.
+    This transformation stays entirely within the ITRS system.
+
+    Parameters
+    ----------
+    observed_coo : `~astropy.coordinates.BaseCoordinateFrame`
+        Coordinates in either AltAz or HADec frame
+    itrs_frame : `~astropy.coordinates.ITRS`
+        The target ITRS frame
+
+    Returns
+    -------
+    coord : `~astropy.coordinates.ITRS`
+        The transformed coordinates in ITRS
+    """
+    # Form the Topocentric ITRS position
+    topocentric_itrs_repr = observed_coo.cartesian.transform(matrix_transpose(
+                            itrs_to_observed_mat(observed_coo)))
+    # Form the Geocentric ITRS position
+    rep = topocentric_itrs_repr + observed_coo.location.get_itrs().cartesian
+    return itrs_frame.realize_frame(rep)
\ No newline at end of file
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..08898213d4
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,51 @@
+import numpy as np
+from astropy import units as u
+from astropy.coordinates import ITRS, AltAz, HADec, EarthLocation
+from astropy.time import Time
+
+def test_itrs_to_observed():
+    # Create a test location (Example: Greenwich Observatory)
+    location = EarthLocation(lat=51.477*u.deg, lon=0*u.deg, height=0*u.m)
+
+    # Create a test time
+    time = Time('2020-01-01 12:00:00')
+
+    # Create a test ITRS position (e.g., a satellite at 500km altitude)
+    itrs = ITRS(x=6878*u.km, y=0*u.km, z=0*u.km, obstime=time)
+
+    print("\nTesting ITRS to AltAz transformation:")
+    print("-------------------------------------")
+    print(f"Original ITRS position: {itrs}")
+
+    # Convert to AltAz
+    altaz = itrs.transform_to(AltAz(obstime=time, location=location))
+    print(f"AltAz position: {altaz}")
+
+    # Convert back to ITRS
+    itrs_back = altaz.transform_to(ITRS(obstime=time))
+    print(f"Recovered ITRS position: {itrs_back}")
+
+    # Calculate the difference
+    cart_diff = itrs_back.cartesian - itrs.cartesian
+    diff_km = np.sqrt(cart_diff.x**2 + cart_diff.y**2 + cart_diff.z**2)
+    print(f"Difference between original and recovered positions: {diff_km.to(u.km)}")
+
+    print("\nTesting ITRS to HADec transformation:")
+    print("-------------------------------------")
+    print(f"Original ITRS position: {itrs}")
+
+    # Convert to HADec
+    hadec = itrs.transform_to(HADec(obstime=time, location=location))
+    print(f"HADec position: {hadec}")
+
+    # Convert back to ITRS
+    itrs_back_hadec = hadec.transform_to(ITRS(obstime=time))
+    print(f"Recovered ITRS position: {itrs_back_hadec}")
+
+    # Calculate the difference
+    cart_diff_hadec = itrs_back_hadec.cartesian - itrs.cartesian
+    diff_km_hadec = np.sqrt(cart_diff_hadec.x**2 + cart_diff_hadec.y**2 + cart_diff_hadec.z**2)
+    print(f"Difference between original and recovered positions: {diff_km_hadec.to(u.km)}")
+
+if __name__ == "__main__":
+    test_itrs_to_observed()
\ No newline at end of file
