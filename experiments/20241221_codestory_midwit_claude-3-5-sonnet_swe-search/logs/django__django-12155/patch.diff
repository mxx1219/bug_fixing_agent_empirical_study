diff --git a/django/contrib/admindocs/utils.py b/django/contrib/admindocs/utils.py
index 4c0e7e2a56..121c48d649 100644
--- a/django/contrib/admindocs/utils.py
+++ b/django/contrib/admindocs/utils.py
@@ -34,8 +34,13 @@ def trim_docstring(docstring):
         return ''
     # Convert tabs to spaces and split into lines
     lines = docstring.expandtabs().splitlines()
-    indent = min(len(line) - len(line.lstrip()) for line in lines if line.lstrip())
-    trimmed = [lines[0].lstrip()] + [line[indent:].rstrip() for line in lines[1:]]
+    # Skip the first line when calculating the indent
+    non_empty_lines = [line for line in lines[1:] if line.lstrip()]
+    if non_empty_lines:
+        indent = min(len(line) - len(line.lstrip()) for line in non_empty_lines)
+    else:
+        indent = 0
+    trimmed = [lines[0].lstrip()] + [line[indent:].rstrip() if line.lstrip() else '' for line in lines[1:]]
     return "\n".join(trimmed).strip()
 
 
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..5a1992c684
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,58 @@
+import os
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='dummy-key',
+        ROOT_URLCONF='django.contrib.admindocs.urls',
+        INSTALLED_APPS=[
+            'django.contrib.admin',
+            'django.contrib.admindocs',
+        ]
+    )
+
+from django.contrib.admindocs.utils import trim_docstring, parse_rst
+
+def test_empty():
+    """
+    """
+    pass
+
+def test_single_line():
+    """Single line docstring."""
+    pass
+
+def test_varying_indent():
+    """First line.
+        More indented line.
+    Back to normal indent.
+            Very indented line.
+    """
+    pass
+
+def test_blank_lines():
+    """First paragraph.
+
+    Second paragraph with indent.
+
+        Third paragraph with more indent.
+    """
+    pass
+
+# Test all cases
+test_cases = [test_empty, test_single_line, test_varying_indent, test_blank_lines]
+
+for test_func in test_cases:
+    print(f"\nTesting {test_func.__name__}:")
+    print("-" * 40)
+    docstring = test_func.__doc__
+    trimmed = trim_docstring(docstring)
+    print("Trimmed docstring:")
+    print(repr(trimmed))
+    print("\nParsed HTML:")
+    try:
+        html = parse_rst(trimmed, "view", test_func.__name__)
+        print(html)
+    except Exception as e:
+        print(f"Error: {str(e)}")
\ No newline at end of file
