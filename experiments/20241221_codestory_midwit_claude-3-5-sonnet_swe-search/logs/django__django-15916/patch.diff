diff --git a/django/forms/models.py b/django/forms/models.py
index 192d9fad94..cd97c33452 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -263,7 +263,18 @@ class ModelFormMetaclass(DeclarativeFieldsMetaclass):
                 base_formfield_callback = b.Meta.formfield_callback
                 break
 
-        formfield_callback = attrs.pop("formfield_callback", base_formfield_callback)
+        # First check if formfield_callback is defined in the class itself
+        formfield_callback = attrs.pop("formfield_callback", None)
+        
+        # If not in class, check if it's defined in Meta
+        if formfield_callback is None and "Meta" in attrs:
+            meta = attrs["Meta"]
+            if hasattr(meta, "formfield_callback"):
+                formfield_callback = meta.formfield_callback
+        
+        # If still not found, use the base formfield_callback
+        if formfield_callback is None:
+            formfield_callback = base_formfield_callback
 
         new_class = super().__new__(mcs, name, bases, attrs)
 
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..7e85262af0
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,91 @@
+from django.test import TestCase
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')
+import django
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:'
+            }
+        },
+        INSTALLED_APPS=['django.contrib.contenttypes']
+    )
+django.setup()
+
+from django import forms
+from django.db import models
+
+# Create a simple model for testing
+class MyModel(models.Model):
+    active = models.BooleanField()
+    name = models.CharField(max_length=64, blank=True, null=True)
+
+    class Meta:
+        app_label = 'django.contrib.contenttypes'
+
+# Define the callback that makes all fields required
+def all_required(field, **kwargs):
+    formfield = field.formfield(**kwargs)
+    if formfield:
+        formfield.required = True
+    return formfield
+
+# Create a ModelForm with the callback in Meta
+class MyForm(forms.ModelForm):
+    formfield_callback = all_required
+    class Meta:
+        model = MyModel
+        formfield_callback = all_required
+        fields = ['active', 'name']
+
+# Create a factory form
+FactoryForm = forms.modelform_factory(MyModel, form=MyForm)
+
+# Demonstrate the issue
+if __name__ == '__main__':
+    # Create instances of both forms
+    my_form = MyForm()
+    factory_form = FactoryForm()
+    
+    print("Original MyForm fields required status:")
+    print(f"active: {my_form.fields['active'].required}")
+    print(f"name: {my_form.fields['name'].required}")
+    
+    print("\nFactory Form fields required status:")
+    print(f"active: {factory_form.fields['active'].required}")
+    print(f"name: {factory_form.fields['name'].required}")
+
+# Define the callback that makes all fields required
+def all_required(field, **kwargs):
+    formfield = field.formfield(**kwargs)
+    if formfield:
+        formfield.required = True
+    return formfield
+
+# Create a ModelForm with the callback in Meta
+class MyForm(forms.ModelForm):
+    formfield_callback = all_required
+    class Meta:
+        model = MyModel
+        formfield_callback = all_required
+        fields = ['active', 'name']
+
+# Create a factory form
+FactoryForm = forms.modelform_factory(MyModel, form=MyForm)
+
+# Demonstrate the issue
+if __name__ == '__main__':
+    # Create instances of both forms
+    my_form = MyForm()
+    factory_form = FactoryForm()
+    
+    print("Original MyForm fields required status:")
+    print(f"active: {my_form.fields['active'].required}")
+    print(f"name: {my_form.fields['name'].required}")
+    
+    print("\nFactory Form fields required status:")
+    print(f"active: {factory_form.fields['active'].required}")
+    print(f"name: {factory_form.fields['name'].required}")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..488fa037b1
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,132 @@
+from django.test import TestCase
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')
+import django
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:'
+            }
+        },
+        INSTALLED_APPS=['django.contrib.contenttypes']
+    )
+django.setup()
+
+from django import forms
+from django.db import models
+
+# Create a simple model for testing
+class MyModel(models.Model):
+    active = models.BooleanField()
+    name = models.CharField(max_length=64, blank=True, null=True)
+
+    class Meta:
+        app_label = 'django.contrib.contenttypes'
+
+# Different callbacks for testing priority
+def make_required(field, **kwargs):
+    formfield = field.formfield(**kwargs)
+    if formfield:
+        formfield.required = True
+    return formfield
+
+def make_not_required(field, **kwargs):
+    formfield = field.formfield(**kwargs)
+    if formfield:
+        formfield.required = False
+    return formfield
+
+# Base form with callback
+class BaseForm(forms.ModelForm):
+    formfield_callback = make_not_required
+    class Meta:
+        model = MyModel
+        fields = ['active', 'name']
+
+# Form with only Meta callback
+class MetaCallbackForm(forms.ModelForm):
+    class Meta:
+        model = MyModel
+        fields = ['active', 'name']
+        formfield_callback = make_required
+
+# Form with both class and Meta callbacks (class should win)
+class BothCallbacksForm(forms.ModelForm):
+    formfield_callback = make_not_required
+    class Meta:
+        model = MyModel
+        fields = ['active', 'name']
+        formfield_callback = make_required
+
+# Form with no callbacks
+class NoCallbackForm(forms.ModelForm):
+    class Meta:
+        model = MyModel
+        fields = ['active', 'name']
+
+# Form inheriting from BaseForm but overriding in Meta
+class InheritedForm(BaseForm):
+    class Meta(BaseForm.Meta):
+        formfield_callback = make_required
+
+if __name__ == '__main__':
+    # Test base form
+    print("Base Form (not required):")
+    base_form = BaseForm()
+    print(f"active: {base_form.fields['active'].required}")
+    print(f"name: {base_form.fields['name'].required}")
+    
+    # Test Meta callback
+    print("\nMeta Callback Form (required):")
+    meta_form = MetaCallbackForm()
+    print(f"active: {meta_form.fields['active'].required}")
+    print(f"name: {meta_form.fields['name'].required}")
+    
+    # Test both callbacks
+    print("\nBoth Callbacks Form (not required due to class priority):")
+    both_form = BothCallbacksForm()
+    print(f"active: {both_form.fields['active'].required}")
+    print(f"name: {both_form.fields['name'].required}")
+    
+    # Test no callbacks
+    print("\nNo Callback Form (default behavior):")
+    no_callback_form = NoCallbackForm()
+    print(f"active: {no_callback_form.fields['active'].required}")
+    print(f"name: {no_callback_form.fields['name'].required}")
+    
+    # Test inheritance
+    print("\nInherited Form (required, overriding base):")
+    inherited_form = InheritedForm()
+    print(f"active: {inherited_form.fields['active'].required}")
+    print(f"name: {inherited_form.fields['name'].required}")
+    
+    # Test factory forms
+    print("\nFactory Forms:")
+    FactoryBaseForm = forms.modelform_factory(MyModel, form=BaseForm)
+    FactoryMetaForm = forms.modelform_factory(MyModel, form=MetaCallbackForm)
+    FactoryBothForm = forms.modelform_factory(MyModel, form=BothCallbacksForm)
+    FactoryInheritedForm = forms.modelform_factory(MyModel, form=InheritedForm)
+    
+    base_factory = FactoryBaseForm()
+    meta_factory = FactoryMetaForm()
+    both_factory = FactoryBothForm()
+    inherited_factory = FactoryInheritedForm()
+    
+    print("\nFactory Base Form (not required):")
+    print(f"active: {base_factory.fields['active'].required}")
+    print(f"name: {base_factory.fields['name'].required}")
+    
+    print("\nFactory Meta Form (required):")
+    print(f"active: {meta_factory.fields['active'].required}")
+    print(f"name: {meta_factory.fields['name'].required}")
+    
+    print("\nFactory Both Form (not required due to class priority):")
+    print(f"active: {both_factory.fields['active'].required}")
+    print(f"name: {both_factory.fields['name'].required}")
+    
+    print("\nFactory Inherited Form (required, overriding base):")
+    print(f"active: {inherited_factory.fields['active'].required}")
+    print(f"name: {inherited_factory.fields['name'].required}")
\ No newline at end of file
