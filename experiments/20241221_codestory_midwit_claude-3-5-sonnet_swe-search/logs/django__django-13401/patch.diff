diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 28374272f4..dc6757a6f0 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -516,17 +516,28 @@ class Field(RegisterLookupMixin):
     def __eq__(self, other):
         # Needed for @total_ordering
         if isinstance(other, Field):
-            return self.creation_counter == other.creation_counter
+            if not hasattr(self, 'model') or not hasattr(other, 'model'):
+                return self.creation_counter == other.creation_counter
+            return (self.creation_counter == other.creation_counter and
+                   self.model == other.model)
         return NotImplemented
 
     def __lt__(self, other):
         # This is needed because bisect does not take a comparison function.
         if isinstance(other, Field):
-            return self.creation_counter < other.creation_counter
+            # First compare by creation_counter to maintain existing order
+            if self.creation_counter != other.creation_counter:
+                return self.creation_counter < other.creation_counter
+            # If creation_counter is equal, compare by model name for consistent ordering
+            if hasattr(self, 'model') and hasattr(other, 'model'):
+                return str(self.model) < str(other.model)
+            return False
         return NotImplemented
 
     def __hash__(self):
-        return hash(self.creation_counter)
+        if not hasattr(self, 'model'):
+            return hash(self.creation_counter)
+        return hash((self.creation_counter, self.model))
 
     def __deepcopy__(self, memodict):
         # We don't have to deepcopy very much here, since most things are not
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..012e71f29a
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,42 @@
+from django.conf import settings
+from django.db import models
+
+# Configure Django settings
+settings.configure(
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    }
+)
+
+import django
+django.setup()
+
+class A(models.Model):
+    class Meta:
+        abstract = True
+        app_label = 'testapp'
+    myfield = models.IntegerField()
+
+class B(A):
+    class Meta:
+        app_label = 'testapp'
+
+class C(A):
+    class Meta:
+        app_label = 'testapp'
+
+# Test field equality
+b_field = B._meta.get_field('myfield')
+c_field = C._meta.get_field('myfield')
+
+print("Fields equal?", b_field == c_field)
+print("Length of set:", len({b_field, c_field}))
+print("b_field model:", b_field.model)
+print("c_field model:", c_field.model)
\ No newline at end of file
