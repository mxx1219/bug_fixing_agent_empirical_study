diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py
index ac0b62d0bf..ea88c54b0d 100644
--- a/django/db/models/aggregates.py
+++ b/django/db/models/aggregates.py
@@ -68,7 +68,7 @@ class Aggregate(Func):
         return []
 
     def as_sql(self, compiler, connection, **extra_context):
-        extra_context['distinct'] = 'DISTINCT' if self.distinct else ''
+        extra_context['distinct'] = 'DISTINCT ' if self.distinct else ''
         if self.filter:
             if connection.features.supports_aggregate_filter_clause:
                 filter_sql, filter_params = self.filter.as_sql(compiler, connection)
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..3f6d2108e7
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,65 @@
+import os
+from django.conf import settings
+from django.db import models
+from django.db.models import Count, Case, When, Value, F
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+    )
+
+import django
+django.setup()
+
+# Define the model
+class DemoModel(models.Model):
+    name = models.CharField(max_length=100)
+    status = models.BooleanField(default=False)
+    value = models.IntegerField(default=0)
+
+    class Meta:
+        app_label = 'reproduction'
+
+# Test case 1: Simple field with DISTINCT
+query1 = DemoModel.objects.annotate(
+    count_name=Count('name', distinct=True)
+)
+
+# Test case 2: Complex CASE with DISTINCT
+query2 = DemoModel.objects.annotate(
+    count_complex=Count(
+        Case(
+            When(status=True, then=F('value')),
+            When(value__gt=10, then=Value(1)),
+        ),
+        distinct=True
+    )
+)
+
+# Test case 3: Multiple conditions with DISTINCT
+query3 = DemoModel.objects.annotate(
+    count_multi=Count(
+        Case(
+            When(status=True, value__gt=5, then=Value(1)),
+            When(status=False, value__lt=0, then=Value(2)),
+        ),
+        distinct=True
+    )
+)
+
+print("Test Case 1 - Simple DISTINCT:")
+print(query1.query)
+print("\nTest Case 2 - Complex CASE with DISTINCT:")
+print(query2.query)
+print("\nTest Case 3 - Multiple conditions with DISTINCT:")
+print(query3.query)
\ No newline at end of file
