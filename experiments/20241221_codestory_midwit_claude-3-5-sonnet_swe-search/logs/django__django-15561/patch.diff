diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py
index 9d6952df21..6c160cf19f 100644
--- a/django/db/backends/base/schema.py
+++ b/django/db/backends/base/schema.py
@@ -1376,8 +1376,10 @@ class BaseDatabaseSchemaEditor:
         # - changing only a field name
         # - changing an attribute that doesn't affect the schema
         # - adding only a db_column and the column name is not changed
+        # - changing only the choices (which is just a validation constraint)
         non_database_attrs = [
             "blank",
+            "choices",  # Added choices to non-database attributes
             "db_column",
             "editable",
             "error_messages",
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..b4117bf19f
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,79 @@
+import django
+from django.conf import settings
+from django.db import migrations, models
+from django.db.migrations.state import ProjectState
+from django.db.migrations.executor import MigrationExecutor
+from django.db import connection
+from django.apps import apps
+
+# Configure Django settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+)
+
+# Initialize Django
+django.setup()
+
+def get_migration_sql(operations):
+    """Get the SQL that would be executed for the given operations."""
+    # Create initial project state with our test app
+    project_state = ProjectState()
+    project_state.add_model(migrations.state.ModelState(
+        'test_app',
+        'TestModel',
+        [
+            ('id', models.AutoField(primary_key=True)),
+            ('status', models.CharField(max_length=10, choices=[('A', 'Active')])),
+        ],
+        {},
+        None,
+    ))
+    
+    # Get the SQL statements
+    with connection.schema_editor(collect_sql=True) as schema_editor:
+        sql_statements = []
+        for operation in operations:
+            new_state = project_state.clone()
+            operation.state_forwards('test_app', new_state)
+            if hasattr(operation, 'database_forwards'):
+                operation.database_forwards('test_app', schema_editor, project_state, new_state)
+                sql_statements.extend(schema_editor.collected_sql)
+                schema_editor.collected_sql = []
+            project_state = new_state
+    return sql_statements
+
+def main():
+    # Define a model field change that only modifies choices
+    operations = [
+        migrations.CreateModel(
+            name='TestModel',
+            fields=[
+                ('id', models.AutoField(primary_key=True)),
+                ('status', models.CharField(max_length=10, choices=[('A', 'Active')])),
+            ],
+        ),
+        migrations.AlterField(
+            model_name='TestModel',
+            name='status',
+            field=models.CharField(max_length=10, choices=[('A', 'Active'), ('I', 'Inactive')]),
+        ),
+    ]
+    
+    # Get and print the SQL statements
+    sql_statements = get_migration_sql(operations)
+    print("Generated SQL statements:")
+    for sql in sql_statements:
+        print(sql)
+        print("---")
+
+if __name__ == '__main__':
+    main()
\ No newline at end of file
