diff --git a/django/forms/fields.py b/django/forms/fields.py
index 65d6a9ec82..bd6f85956a 100644
--- a/django/forms/fields.py
+++ b/django/forms/fields.py
@@ -1026,6 +1026,11 @@ class MultiValueField(Field):
                 if self.required:
                     raise ValidationError(self.error_messages['required'], code='required')
                 else:
+                    # Even if the parent field is not required, we still need to validate
+                    # individual required fields
+                    for i, field in enumerate(self.fields):
+                        if field.required:
+                            raise ValidationError(field.error_messages['required'], code='required')
                     return self.compress([])
         else:
             raise ValidationError(self.error_messages['invalid'], code='invalid')
@@ -1035,17 +1040,17 @@ class MultiValueField(Field):
             except IndexError:
                 field_value = None
             if field_value in self.empty_values:
-                if self.require_all_fields:
-                    # Raise a 'required' error if the MultiValueField is
-                    # required and any field is empty.
-                    if self.required:
-                        raise ValidationError(self.error_messages['required'], code='required')
-                elif field.required:
-                    # Otherwise, add an 'incomplete' error to the list of
-                    # collected errors and skip field cleaning, if a required
-                    # field is empty.
-                    if field.error_messages['incomplete'] not in errors:
-                        errors.append(field.error_messages['incomplete'])
+                if field.required:
+                    # If individual field is required, raise validation error
+                    if self.require_all_fields:
+                        if self.required:
+                            raise ValidationError(self.error_messages['required'], code='required')
+                    else:
+                        raise ValidationError(field.error_messages['required'], code='required')
+                elif self.require_all_fields and self.required:
+                    # If all fields are required and parent is required
+                    raise ValidationError(self.error_messages['required'], code='required')
+                else:
                     continue
             try:
                 clean_data.append(field.clean(field_value))
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..bbfeb73c1d
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,78 @@
+from django.conf import settings
+from django.forms import (
+    Form,
+    CharField,
+    MultiValueField,
+    MultiWidget,
+)
+
+# Configure Django settings
+settings.configure(
+    USE_I18N=False,
+    USE_L10N=False,
+    USE_TZ=False,
+    DATABASES={},
+)
+
+class MF(MultiValueField):
+    widget = MultiWidget
+    def __init__(self):
+        fields = [
+            CharField(required=False),
+            CharField(required=True),
+        ]
+        widget = self.widget(widgets=[
+            f.widget
+            for f in fields
+        ], attrs={})
+        super(MF, self).__init__(
+            fields=fields,
+            widget=widget,
+            require_all_fields=False,
+            required=False,
+        )
+    def compress(self, value):
+        return []
+
+class F(Form):
+    mf = MF()
+
+def test_multivalue_field():
+    # Test case 1: Both fields empty
+    f = F({
+        'mf_0': '',
+        'mf_1': '',
+    })
+    print("Test 1 - Both fields empty:")
+    print(f"Expected: False, Got: {f.is_valid()}")
+    if f.is_valid():
+        print("Error: Form should be invalid when required field is empty")
+    else:
+        print("Success: Form is invalid when required field is empty")
+
+    # Test case 2: First field filled, second field empty
+    f = F({
+        'mf_0': 'xxx',
+        'mf_1': '',
+    })
+    print("\nTest 2 - First field filled, second field empty:")
+    print(f"Expected: False, Got: {f.is_valid()}")
+    if not f.is_valid():
+        print("Success: Form is invalid when required field is empty")
+    else:
+        print("Error: Form should be invalid when required field is empty")
+
+    # Test case 3: Both fields filled
+    f = F({
+        'mf_0': 'xxx',
+        'mf_1': 'yyy',
+    })
+    print("\nTest 3 - Both fields filled:")
+    print(f"Expected: True, Got: {f.is_valid()}")
+    if f.is_valid():
+        print("Success: Form is valid when all fields are filled")
+    else:
+        print("Error: Form should be valid when all fields are filled")
+
+if __name__ == '__main__':
+    test_multivalue_field()
\ No newline at end of file
