diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py
index b6af5f5491..00e7286cf3 100644
--- a/django/utils/autoreload.py
+++ b/django/utils/autoreload.py
@@ -223,8 +223,12 @@ def get_child_arguments():
     # __spec__ is set when the server was started with the `-m` option,
     # see https://docs.python.org/3/reference/import.html#main-spec
     # __spec__ may not exist, e.g. when running in a Conda env.
-    if getattr(__main__, '__spec__', None) is not None and __main__.__spec__.parent:
-        args += ['-m', __main__.__spec__.parent]
+    if getattr(__main__, '__spec__', None) is not None:
+        # Use the full module name if available, falling back to parent if name is __main__
+        module_name = __main__.__spec__.name
+        if module_name == '__main__' and __main__.__spec__.parent:
+            module_name = __main__.__spec__.parent
+        args += ['-m', module_name]
         args += sys.argv[1:]
     elif not py_script.exists():
         # sys.argv[0] may not exist for several reasons on Windows.
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..fc4f5efc0f
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,65 @@
+import os
+import sys
+import subprocess
+
+def main():
+    # Create a test module structure
+    os.makedirs('foo/bar', exist_ok=True)
+    
+    # Create foo/bar/baz.py
+    with open('foo/bar/baz.py', 'w') as f:
+        f.write('''
+import sys
+if __name__ == '__main__':
+    print("Module path:", sys.argv)
+    if len(sys.argv) > 1 and sys.argv[1] == 'runserver':
+        print("Running server...")
+''')
+    
+    # Create foo/bar/__main__.py
+    with open('foo/bar/__main__.py', 'w') as f:
+        f.write('''
+import sys
+if __name__ == '__main__':
+    print("Package __main__ path:", sys.argv)
+    if len(sys.argv) > 1 and sys.argv[1] == 'runserver':
+        print("Running server from package...")
+''')
+    
+    # Create foo/bar/__init__.py
+    with open('foo/bar/__init__.py', 'w') as f:
+        f.write('')
+    
+    # Create foo/__init__.py
+    with open('foo/__init__.py', 'w') as f:
+        f.write('')
+    
+    print("\nTest Case 1: Module with dotted path")
+    print("Testing python -m foo.bar.baz runserver")
+    result = subprocess.run([sys.executable, '-m', 'foo.bar.baz', 'runserver'], 
+                          env={**os.environ, 'PYTHONPATH': '.'}, 
+                          capture_output=True, 
+                          text=True)
+    print("Output:", result.stdout)
+    print("Error:", result.stderr)
+    
+    print("\nTest Case 2: Package with __main__.py")
+    print("Testing python -m foo.bar runserver")
+    result = subprocess.run([sys.executable, '-m', 'foo.bar', 'runserver'], 
+                          env={**os.environ, 'PYTHONPATH': '.'}, 
+                          capture_output=True, 
+                          text=True)
+    print("Output:", result.stdout)
+    print("Error:", result.stderr)
+    
+    print("\nTest Case 3: Direct script execution")
+    print("Testing python foo/bar/baz.py runserver")
+    result = subprocess.run([sys.executable, 'foo/bar/baz.py', 'runserver'], 
+                          env={**os.environ, 'PYTHONPATH': '.'}, 
+                          capture_output=True, 
+                          text=True)
+    print("Output:", result.stdout)
+    print("Error:", result.stderr)
+
+if __name__ == '__main__':
+    main()
\ No newline at end of file
