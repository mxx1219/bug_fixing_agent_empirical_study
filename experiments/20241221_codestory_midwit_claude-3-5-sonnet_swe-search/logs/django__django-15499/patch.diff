diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index 90fc31bee5..8a5c04393b 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -170,6 +170,19 @@ class CreateModel(ModelOperation):
                     managers=self.managers,
                 ),
             ]
+        elif (
+            isinstance(operation, AlterModelManagers)
+            and self.name_lower == operation.name_lower
+        ):
+            return [
+                CreateModel(
+                    self.name,
+                    fields=self.fields,
+                    options=self.options,
+                    bases=self.bases,
+                    managers=operation.managers,
+                ),
+            ]
         elif (
             isinstance(operation, AlterTogetherOptionOperation)
             and self.name_lower == operation.name_lower
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..62987072d1
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,59 @@
+from django.db import migrations, models
+from django.db.migrations.optimizer import MigrationOptimizer
+
+def test_optimize_create_model_alter_managers():
+    # Create a test model with default manager
+    create_operation = migrations.CreateModel(
+        name="TestModel",
+        fields=[
+            ("id", models.AutoField(primary_key=True)),
+            ("name", models.CharField(max_length=100)),
+        ],
+        managers=[
+            ("default", models.Manager()),
+        ]
+    )
+    
+    # Create a custom manager
+    class CustomManager(models.Manager):
+        def get_queryset(self):
+            return super().get_queryset().filter(active=True)
+    
+    # Create AlterModelManagers operation
+    alter_managers_operation = migrations.AlterModelManagers(
+        name="TestModel",
+        managers=[
+            ("objects", CustomManager()),
+        ]
+    )
+
+    # Create some other operations to test optimization through them
+    other_operation = migrations.AlterModelOptions(
+        name="OtherModel",
+        options={"verbose_name": "Other"}
+    )
+    
+    # Test cases
+    print("Test Case 1: Basic optimization")
+    optimizer = MigrationOptimizer()
+    optimized = optimizer.optimize([create_operation, alter_managers_operation], app_label="testapp")
+    print("Original operations: 2, Optimized operations:", len(optimized))
+    
+    print("\nTest Case 2: Optimization through other operations")
+    optimizer = MigrationOptimizer()
+    optimized = optimizer.optimize([create_operation, other_operation, alter_managers_operation], app_label="testapp")
+    print("Original operations: 3, Optimized operations:", len(optimized))
+    
+    print("\nTest Case 3: Empty managers list")
+    optimizer = MigrationOptimizer()
+    empty_managers = migrations.AlterModelManagers(name="TestModel", managers=[])
+    optimized = optimizer.optimize([create_operation, empty_managers], app_label="testapp")
+    print("Original operations: 2, Optimized operations:", len(optimized))
+    if len(optimized) == 1:
+        print("Resulting managers:", optimized[0].managers)
+
+if __name__ == "__main__":
+    test_optimize_create_model_alter_managers()
+
+if __name__ == "__main__":
+    test_optimize_create_model_alter_managers()
\ No newline at end of file
