diff --git a/django/contrib/contenttypes/management/__init__.py b/django/contrib/contenttypes/management/__init__.py
index 2b5f688136..563cba2fdf 100644
--- a/django/contrib/contenttypes/management/__init__.py
+++ b/django/contrib/contenttypes/management/__init__.py
@@ -24,7 +24,7 @@ class RenameContentType(migrations.RunPython):
             content_type.model = new_model
             try:
                 with transaction.atomic(using=db):
-                    content_type.save(update_fields={'model'})
+                    content_type.save(using=db, update_fields={'model'})
             except IntegrityError:
                 # Gracefully fallback if a stale content type causes a
                 # conflict as remove_stale_contenttypes will take care of
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..be35da609a
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,76 @@
+import os
+import django
+from django.conf import settings
+from django.db import connections
+from django.core.management import call_command
+from django.db.migrations.executor import MigrationExecutor
+
+class DynamicDBRouter:
+    def db_for_read(self, model, **hints):
+        return 'test_db'
+
+    def db_for_write(self, model, **hints):
+        return 'test_db'
+
+    def allow_migrate(self, db, app_label, model_name=None, **hints):
+        return True
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',  # This won't be used
+        },
+        'test_db': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': 'test_db.sqlite3',
+        }
+    },
+    DATABASE_ROUTERS=[DynamicDBRouter()],
+)
+
+django.setup()
+
+# Create the test database
+connection = connections['test_db']
+connection.ensure_connection()
+
+# Create the content types table
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(django.contrib.contenttypes.models.ContentType)
+
+# Now try to rename a model
+from django.contrib.contenttypes.management import RenameContentType
+from django.apps import apps
+from django.db import migrations
+
+# Create a dummy schema editor
+class DummySchemaEditor:
+    def __init__(self):
+        self.connection = connection
+
+schema_editor = DummySchemaEditor()
+
+# Create a content type for testing
+from django.contrib.contenttypes.models import ContentType
+ContentType.objects.using('test_db').create(
+    app_label='test_app',
+    model='old_model'
+)
+
+# Try to rename it
+renamer = RenameContentType('test_app', 'old_model', 'new_model')
+renamer.rename_forward(apps, schema_editor)
+
+# Verify the change
+ct = ContentType.objects.using('test_db').get(app_label='test_app')
+if ct.model == 'new_model':
+    print("Success! Model was renamed correctly in the test_db database.")
+else:
+    print(f"Error: Model name is still {ct.model}")
\ No newline at end of file
