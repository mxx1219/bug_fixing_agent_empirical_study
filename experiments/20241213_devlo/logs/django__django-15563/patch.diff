diff --git a/django/db/models/query.py b/django/db/models/query.py
index 5c78c6e315..49a232234b 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -988,6 +988,8 @@ class QuerySet:
             raise TypeError("Cannot update a query once a slice has been taken.")
         self._for_write = True
         query = self.query.chain(sql.UpdateQuery)
+        # For multi-table inheritance, we need to pass the objects to the query
+        query.objs = list(self)
         query.add_update_values(kwargs)
         # Clear any annotations so that they won't be present in subqueries.
         query.annotations = {}
diff --git a/django/db/models/sql/subqueries.py b/django/db/models/sql/subqueries.py
index 04063f73bc..3568669efc 100644
--- a/django/db/models/sql/subqueries.py
+++ b/django/db/models/sql/subqueries.py
@@ -96,6 +96,16 @@ class UpdateQuery(Query):
                     "foreign keys permitted)." % field
                 )
             if model is not self.get_meta().concrete_model:
+                # For multi-table inheritance, we need to ensure we update the correct records
+                # by using the correct parent link field
+                parent_link = None
+                for parent_model, link in self.model._meta.parents.items():
+                    if issubclass(model, parent_model):
+                        parent_link = link
+                        break
+                if parent_link:
+                    # Get the IDs of the child objects using the parent link field
+                    self.related_ids = [getattr(obj, parent_link.attname) for obj in self.objs]
                 self.add_related_update(model, field, val)
                 continue
             values_seq.append((field, model, val))
