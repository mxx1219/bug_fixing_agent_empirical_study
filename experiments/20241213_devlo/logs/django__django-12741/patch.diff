diff --git a/django/core/management/commands/flush.py b/django/core/management/commands/flush.py
index e8ed3967f7..bc8021cf4e 100644
--- a/django/core/management/commands/flush.py
+++ b/django/core/management/commands/flush.py
@@ -60,7 +60,7 @@ Are you sure you want to do this?
 
         if confirm == 'yes':
             try:
-                connection.ops.execute_sql_flush(database, sql_list)
+                connection.ops.execute_sql_flush(sql_list)
             except Exception as exc:
                 raise CommandError(
                     "Database %s couldn't be flushed. Possible reasons:\n"
diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py
index 70ac07ae09..2fa42fdad4 100644
--- a/django/db/backends/base/operations.py
+++ b/django/db/backends/base/operations.py
@@ -400,8 +400,20 @@ class BaseDatabaseOperations:
         """
         raise NotImplementedError('subclasses of BaseDatabaseOperations must provide a sql_flush() method')
 
-    def execute_sql_flush(self, using, sql_list):
-        """Execute a list of SQL statements to flush the database."""
+    def execute_sql_flush(self, using_or_sql, sql_list=None):
+        """Execute a list of SQL statements to flush the database.
+        
+        Arguments:
+            using_or_sql: Either the database alias or a list of SQL statements
+            sql_list: SQL statements if first argument is database alias, None otherwise
+        """
+        # Support both (using, sql_list) and (sql_list) arguments
+        if sql_list is None:
+            sql_list = using_or_sql
+            using = self.connection.alias
+        else:
+            using = using_or_sql
+
         with transaction.atomic(using=using, savepoint=self.connection.features.can_rollback_ddl):
             with self.connection.cursor() as cursor:
                 for sql in sql_list:
