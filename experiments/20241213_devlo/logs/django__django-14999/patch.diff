diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index 982816be3a..d1143fde5d 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -320,12 +320,17 @@ class RenameModel(ModelOperation):
         new_model = to_state.apps.get_model(app_label, self.new_name)
         if self.allow_migrate_model(schema_editor.connection.alias, new_model):
             old_model = from_state.apps.get_model(app_label, self.old_name)
-            # Move the main table
-            schema_editor.alter_db_table(
-                new_model,
-                old_model._meta.db_table,
-                new_model._meta.db_table,
-            )
+            # Skip table rename if both models have the same db_table value
+            if old_model._meta.db_table == new_model._meta.db_table:
+                # Still need to update related fields and M2M tables
+                pass
+            else:
+                # Move the main table
+                schema_editor.alter_db_table(
+                    new_model,
+                    old_model._meta.db_table,
+                    new_model._meta.db_table,
+                )
             # Alter the fields pointing to us
             for related_object in old_model._meta.related_objects:
                 if related_object.related_model == old_model:
diff --git a/django/db/migrations/state.py b/django/db/migrations/state.py
index 2927e66f83..108062cd54 100644
--- a/django/db/migrations/state.py
+++ b/django/db/migrations/state.py
@@ -134,8 +134,17 @@ class ProjectState:
         # Add a new model.
         old_name_lower = old_name.lower()
         new_name_lower = new_name.lower()
-        renamed_model = self.models[app_label, old_name_lower].clone()
+        old_model = self.models[app_label, old_name_lower]
+        renamed_model = old_model.clone()
         renamed_model.name = new_name
+        
+        # If db_table was explicitly set in the old model, preserve it
+        if 'db_table' in old_model.options:
+            renamed_model.options['db_table'] = old_model.options['db_table']
+        else:
+            # If db_table was not explicitly set, update it based on the new model name
+            renamed_model.options['db_table'] = f'{app_label}_{new_name_lower}'
+            
         self.models[app_label, new_name_lower] = renamed_model
         # Repoint all fields pointing to the old model to the new one.
         old_model_tuple = (app_label, old_name_lower)
@@ -838,10 +847,7 @@ class ModelState:
             app_label=self.app_label,
             name=self.name,
             fields=dict(self.fields),
-            # Since options are shallow-copied here, operations such as
-            # AddIndex must replace their option (e.g 'indexes') rather
-            # than mutating it.
-            options=dict(self.options),
+            options=dict(self.options),  # db_table is preserved since strings are immutable
             bases=self.bases,
             managers=list(self.managers),
         )
