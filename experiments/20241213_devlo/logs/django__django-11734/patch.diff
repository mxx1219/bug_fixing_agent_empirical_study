diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 2b59dd301a..a06e074675 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -567,6 +567,12 @@ class OuterRef(F):
                            summarize=False, for_save=False, simple_col=False):
         if isinstance(self.name, self.__class__):
             return self.name
+        # If we're in a subquery and have a reference to the outer query,
+        # resolve against the outer query
+        if query is not None and query.subquery and hasattr(query, 'outer_query'):
+            # For exclude() and ~Q(), we need to keep the OuterRef unresolved
+            # until it's used in the final SQL generation
+            return self
         return ResolvedOuterRef(self.name)
 
 
diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 35f3c5e1ea..1aebd661a7 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1703,10 +1703,16 @@ class Query(BaseExpression):
         """
         filter_lhs, filter_rhs = filter_expr
         if isinstance(filter_rhs, F):
+            # For exclude() and ~Q(), we need to reference the outer query's table
+            # directly rather than the subquery's table
             filter_expr = (filter_lhs, OuterRef(filter_rhs.name))
         # Generate the inner query.
         query = Query(self.model)
         query._filtered_relations = self._filtered_relations
+        # Mark this as a subquery so OuterRef is handled correctly
+        query.subquery = True
+        # Store a reference to the outer query for proper OuterRef resolution
+        query.outer_query = self
         query.add_filter(filter_expr)
         query.clear_ordering(True)
         # Try to have as simple as possible subquery -> trim leading joins from
