diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index a791908caf..99fe4552eb 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -344,19 +344,54 @@ class SQLCompiler:
             resolved = expr.resolve_expression(self.query, allow_joins=True, reuse=None)
             if self.query.combinator:
                 src = resolved.get_source_expressions()[0]
-                # Relabel order by columns to raw numbers if this is a combined
-                # query; necessary since the columns can't be referenced by the
-                # fully qualified name and the simple column names may collide.
-                for idx, (sel_expr, _, col_alias) in enumerate(self.select):
-                    if is_ref and col_alias == src.refs:
-                        src = src.source
-                    elif col_alias:
-                        continue
-                    if src == sel_expr:
-                        resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])
-                        break
+                # For union queries, we need to ensure the order by field is in the select list
+                if hasattr(src, 'field'):
+                    field_name = src.field.name
+                    # Find the field position in values_select
+                    if self.query.values_select:
+                        try:
+                            pos = list(self.query.values_select).index(field_name) + 1
+                            resolved.set_source_expressions([RawSQL('%d' % pos, ())])
+                        except ValueError:
+                            # Field not found in values_select, add it
+                            values_select = list(self.query.values_select)
+                            values_select.append(field_name)
+                            self.query.values_select = tuple(values_select)
+                            # Add it to all subqueries too
+                            for query in self.query.combined_queries:
+                                query.values_select = tuple(values_select)
+                            # Use the last position for ordering
+                            resolved.set_source_expressions([RawSQL('%d' % len(values_select), ())])
+                    else:
+                        # Try to find the field in the select list
+                        for idx, (sel_expr, _, col_alias) in enumerate(self.select):
+                            if hasattr(sel_expr, 'field') and sel_expr.field.name == field_name:
+                                resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])
+                                break
+                        else:
+                            # Field not found in select list, add it
+                            field = self.query.model._meta.get_field(field_name)
+                            col = field.get_col(self.query.get_initial_alias())
+                            self.select = tuple(list(self.select) + [(col, None)])
+                            # Add it to all subqueries too
+                            for query in self.query.combined_queries:
+                                if field_name not in query.annotations:
+                                    query.annotations[field_name] = col
+                            # Use the last position for ordering
+                            resolved.set_source_expressions([RawSQL('%d' % len(self.select), ())])
                 else:
-                    raise DatabaseError('ORDER BY term does not match any column in the result set.')
+                    # Try to find the matching column in the select list
+                    for idx, (sel_expr, _, col_alias) in enumerate(self.select):
+                        if is_ref and col_alias == src.refs:
+                            src = src.source
+                        elif col_alias:
+                            continue
+                        # Compare the source expression with the select expression
+                        if src == sel_expr:
+                            resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])
+                            break
+                    else:
+                        raise DatabaseError('ORDER BY term does not match any column in the result set.')
             sql, params = self.compile(resolved)
             # Don't add the same column twice, but the order direction is
             # not taken into account so we strip it. When this entire method
@@ -420,18 +455,31 @@ class SQLCompiler:
                 if compiler.get_order_by():
                     raise DatabaseError('ORDER BY not allowed in subqueries of compound statements.')
         parts = ()
+        # Get the list of fields needed for ordering
+        order_fields = []
+        if self.query.order_by:
+            for expr in self.query.order_by:
+                if hasattr(expr, 'get_source_expressions'):
+                    src = expr.get_source_expressions()[0]
+                    if hasattr(src, 'field'):
+                        order_fields.append(src.field.name)
+        # Update all compilers to select the needed fields
         for compiler in compilers:
             try:
-                # If the columns list is limited, then all combined queries
-                # must have the same columns list. Set the selects defined on
-                # the query on all combined queries, if not already set.
-                if not compiler.query.values_select and self.query.values_select:
-                    compiler.query = compiler.query.clone()
-                    compiler.query.set_values((
-                        *self.query.extra_select,
-                        *self.query.values_select,
-                        *self.query.annotation_select,
-                    ))
+                compiler.query = compiler.query.clone()
+                if compiler.query.values_select:
+                    values_select = list(compiler.query.values_select)
+                    for field_name in order_fields:
+                        if field_name not in values_select:
+                            values_select.append(field_name)
+                    compiler.query.values_select = tuple(values_select)
+                    compiler.query.set_values(values_select)
+                else:
+                    # Add fields to annotations
+                    for field_name in order_fields:
+                        if field_name not in compiler.query.annotations:
+                            field = compiler.query.model._meta.get_field(field_name)
+                            compiler.query.annotations[field_name] = field.get_col(compiler.query.get_initial_alias())
                 part_sql, part_args = compiler.as_sql()
                 if compiler.query.combinator:
                     # Wrap in a subquery if wrapping in parentheses isn't
