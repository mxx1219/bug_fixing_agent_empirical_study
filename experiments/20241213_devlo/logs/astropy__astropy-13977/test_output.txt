+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   astropy/units/core.py
	modified:   astropy/units/quantity.py
	modified:   astropy/units/quantity_helper/converters.py

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	pyproject.toml.orig

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit 5250b2442501e6c671c6b380536f1edb352602d1
Merge: 64c06a0256 af49443351
Author: Stuart Mumford <stuart@mumford.me.uk>
Date:   Wed Dec 14 14:17:05 2022 +0000

    Merge pull request #14164 from ayshih/grid_performance
    
    Performance improvements for WCSAxes grids

+ git diff 5250b2442501e6c671c6b380536f1edb352602d1
diff --git a/astropy/units/core.py b/astropy/units/core.py
index 8c3204b8b0..5111820eec 100644
--- a/astropy/units/core.py
+++ b/astropy/units/core.py
@@ -2614,7 +2614,9 @@ def _condition_arg(value):
 
     Returns
     -------
-    Scalar value or numpy array
+    Scalar value or numpy array or NotImplemented
+        Returns NotImplemented if the value has a unit attribute but cannot be
+        directly converted to a numpy array, to allow for reflected operations.
 
     Raises
     ------
@@ -2624,6 +2626,11 @@ def _condition_arg(value):
     if isinstance(value, (np.ndarray, float, int, complex, np.void)):
         return value
 
+    # If the value has a unit attribute, return NotImplemented to allow
+    # for reflected operations rather than raising an error
+    if hasattr(value, 'unit'):
+        return NotImplemented
+
     avalue = np.array(value)
     if avalue.dtype.kind not in ["i", "f", "c"]:
         raise ValueError(
diff --git a/astropy/units/quantity.py b/astropy/units/quantity.py
index b98abfafb0..8399225785 100644
--- a/astropy/units/quantity.py
+++ b/astropy/units/quantity.py
@@ -667,7 +667,16 @@ class Quantity(np.ndarray):
         arrays = []
         for input_, converter in zip(inputs, converters):
             input_ = getattr(input_, "value", input_)
-            arrays.append(converter(input_) if converter else input_)
+            if converter:
+                try:
+                    converted = converter(input_)
+                    if converted is NotImplemented:
+                        return NotImplemented
+                    arrays.append(converted)
+                except Exception:
+                    return NotImplemented
+            else:
+                arrays.append(input_)
 
         # Call our superclass's __array_ufunc__
         result = super().__array_ufunc__(function, method, *arrays, **kwargs)
diff --git a/astropy/units/quantity_helper/converters.py b/astropy/units/quantity_helper/converters.py
index 47b40c2072..b8f350b968 100644
--- a/astropy/units/quantity_helper/converters.py
+++ b/astropy/units/quantity_helper/converters.py
@@ -196,6 +196,9 @@ def converters_and_unit(function, method, *args):
                         continue
                     if can_have_arbitrary_unit(args[i]):
                         converters[i] = None
+                    elif hasattr(args[i], 'unit'):
+                        # If the argument has a unit attribute, allow it to handle the operation
+                        return [None] * len(converters), None
                     else:
                         raise UnitConversionError(
                             f"Can only apply '{function.__name__}' function to "
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e '.[test]' --verbose
Using pip 24.2 from /opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pip (python 3.9)
Obtaining file:///testbed
  Installing build dependencies: started
  Running command pip subprocess to install build dependencies
  Using pip 24.2 from /opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pip (python 3.9)
  Collecting setuptools
    Obtaining dependency information for setuptools from https://files.pythonhosted.org/packages/55/21/47d163f615df1d30c094f6c8bbb353619274edccf0327b185cc2493c2c33/setuptools-75.6.0-py3-none-any.whl.metadata
    Downloading setuptools-75.6.0-py3-none-any.whl.metadata (6.7 kB)
  Collecting setuptools_scm>=6.2
    Obtaining dependency information for setuptools_scm>=6.2 from https://files.pythonhosted.org/packages/a0/b9/1906bfeb30f2fc13bb39bf7ddb8749784c05faadbd18a21cf141ba37bff2/setuptools_scm-8.1.0-py3-none-any.whl.metadata
    Using cached setuptools_scm-8.1.0-py3-none-any.whl.metadata (6.6 kB)
  Collecting wheel
    Obtaining dependency information for wheel from https://files.pythonhosted.org/packages/0b/2c/87f3254fd8ffd29e4c02732eee68a83a1d3c346ae39bc6822dcbcb697f2b/wheel-0.45.1-py3-none-any.whl.metadata
    Using cached wheel-0.45.1-py3-none-any.whl.metadata (2.3 kB)
  Collecting cython==0.29.30
    Obtaining dependency information for cython==0.29.30 from https://files.pythonhosted.org/packages/a7/c6/3af0df983ba8500831fdae19a515be6e532da7683ab98e031d803e6a8d03/Cython-0.29.30-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_24_x86_64.whl.metadata
    Using cached Cython-0.29.30-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_24_x86_64.whl.metadata (2.8 kB)
  Collecting oldest-supported-numpy
    Obtaining dependency information for oldest-supported-numpy from https://files.pythonhosted.org/packages/dc/5c/e3c84cfdd488701aa074b22cf5bd227fb15d26e1d55a66d9088c39afa123/oldest_supported_numpy-2023.12.21-py3-none-any.whl.metadata
    Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl.metadata (9.8 kB)
  Collecting extension-helpers
    Obtaining dependency information for extension-helpers from https://files.pythonhosted.org/packages/b3/0e/22599eac9e50f4274e78e47cef7e760d7a1bb2f0d0fdfb0bb5b0d2da263a/extension_helpers-1.2.0-py3-none-any.whl.metadata
    Using cached extension_helpers-1.2.0-py3-none-any.whl.metadata (2.2 kB)
  Collecting packaging>=20 (from setuptools_scm>=6.2)
    Obtaining dependency information for packaging>=20 from https://files.pythonhosted.org/packages/88/ef/eb23f262cca3c0c4eb7ab1933c3b1f03d021f2c48f54763065b6f0e321be/packaging-24.2-py3-none-any.whl.metadata
    Using cached packaging-24.2-py3-none-any.whl.metadata (3.2 kB)
  Collecting typing-extensions (from setuptools_scm>=6.2)
    Obtaining dependency information for typing-extensions from https://files.pythonhosted.org/packages/26/9f/ad63fc0248c5379346306f8668cda6e2e2e9c95e01216d2b8ffd9ff037d0/typing_extensions-4.12.2-py3-none-any.whl.metadata
    Using cached typing_extensions-4.12.2-py3-none-any.whl.metadata (3.0 kB)
  Collecting tomli>=1 (from setuptools_scm>=6.2)
    Obtaining dependency information for tomli>=1 from https://files.pythonhosted.org/packages/6e/c2/61d3e0f47e2b74ef40a68b9e6ad5984f6241a942f7cd3bbfbdbd03861ea9/tomli-2.2.1-py3-none-any.whl.metadata
    Using cached tomli-2.2.1-py3-none-any.whl.metadata (10 kB)
    Link requires a different Python (3.9.19 not in: '>=3.10'): https://files.pythonhosted.org/packages/d1/0f/8d2b5ebb01dc49d20ae0a282d6baff7202b7bf0df8acdd4a6abeffe98070/numpy-2.1.0rc1.tar.gz (from https://pypi.org/simple/numpy/) (requires-python:>=3.10)
    Link requires a different Python (3.9.19 not in: '>=3.10'): https://files.pythonhosted.org/packages/54/a4/f8188c4f3e07f7737683588210c073478abcb542048cf4ab6fedad0b458a/numpy-2.1.0.tar.gz (from https://pypi.org/simple/numpy/) (requires-python:>=3.10)
    Link requires a different Python (3.9.19 not in: '>=3.10'): https://files.pythonhosted.org/packages/59/5f/9003bb3e632f2b58f5e3a3378902dcc73c5518070736c6740fe52454e8e1/numpy-2.1.1.tar.gz (from https://pypi.org/simple/numpy/) (requires-python:>=3.10)
    Link requires a different Python (3.9.19 not in: '>=3.10'): https://files.pythonhosted.org/packages/4b/d1/8a730ea07f4a37d94f9172f4ce1d81064b7a64766b460378be278952de75/numpy-2.1.2.tar.gz (from https://pypi.org/simple/numpy/) (requires-python:>=3.10)
    Link requires a different Python (3.9.19 not in: '>=3.10'): https://files.pythonhosted.org/packages/25/ca/1166b75c21abd1da445b97bf1fa2f14f423c6cfb4fc7c4ef31dccf9f6a94/numpy-2.1.3.tar.gz (from https://pypi.org/simple/numpy/) (requires-python:>=3.10)
    Link requires a different Python (3.9.19 not in: '>=3.10'): https://files.pythonhosted.org/packages/d1/eb/9c688381b252f711cadf3ec38b3eceb0b946ff5a161a3adc520c886fed43/numpy-2.2.0rc1.tar.gz (from https://pypi.org/simple/numpy/) (requires-python:>=3.10)
    Link requires a different Python (3.9.19 not in: '>=3.10'): https://files.pythonhosted.org/packages/47/1b/1d565e0f6e156e1522ab564176b8b29d71e13d8caf003a08768df3d5cec5/numpy-2.2.0.tar.gz (from https://pypi.org/simple/numpy/) (requires-python:>=3.10)
  Collecting numpy==1.19.3 (from oldest-supported-numpy)
    Obtaining dependency information for numpy==1.19.3 from https://files.pythonhosted.org/packages/c3/8d/2ae53d96a92a66b8daa3dfb2dd6cf4bfcb8e3d4148bdd713c8fc7de83141/numpy-1.19.3-cp39-cp39-manylinux2010_x86_64.whl.metadata
    Using cached numpy-1.19.3-cp39-cp39-manylinux2010_x86_64.whl.metadata (2.0 kB)
  Using cached Cython-0.29.30-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_24_x86_64.whl (2.0 MB)
  Downloading setuptools-75.6.0-py3-none-any.whl (1.2 MB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 1.2/1.2 MB 36.9 MB/s eta 0:00:00
  Using cached setuptools_scm-8.1.0-py3-none-any.whl (43 kB)
  Using cached wheel-0.45.1-py3-none-any.whl (72 kB)
  Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl (4.9 kB)
  Using cached numpy-1.19.3-cp39-cp39-manylinux2010_x86_64.whl (14.9 MB)
  Using cached extension_helpers-1.2.0-py3-none-any.whl (23 kB)
  Using cached packaging-24.2-py3-none-any.whl (65 kB)
  Using cached tomli-2.2.1-py3-none-any.whl (14 kB)
  Using cached typing_extensions-4.12.2-py3-none-any.whl (37 kB)
  Installing collected packages: wheel, typing-extensions, tomli, setuptools, packaging, numpy, cython, setuptools_scm, oldest-supported-numpy, extension-helpers
    Creating /tmp/pip-build-env-ngluuidc/overlay/bin
    changing mode of /tmp/pip-build-env-ngluuidc/overlay/bin/wheel to 755
    changing mode of /tmp/pip-build-env-ngluuidc/overlay/bin/f2py to 755
    changing mode of /tmp/pip-build-env-ngluuidc/overlay/bin/f2py3 to 755
    changing mode of /tmp/pip-build-env-ngluuidc/overlay/bin/f2py3.9 to 755
    changing mode of /tmp/pip-build-env-ngluuidc/overlay/bin/cygdb to 755
    changing mode of /tmp/pip-build-env-ngluuidc/overlay/bin/cython to 755
    changing mode of /tmp/pip-build-env-ngluuidc/overlay/bin/cythonize to 755
  ERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.
  astropy 5.3.dev125+g5250b24425.d20241211 requires numpy>=1.20, but you have numpy 1.19.3 which is incompatible.
  Successfully installed cython-0.29.30 extension-helpers-1.2.0 numpy-1.19.3 oldest-supported-numpy-2023.12.21 packaging-24.2 setuptools-75.6.0 setuptools_scm-8.1.0 tomli-2.2.1 typing-extensions-4.12.2 wheel-0.45.1
  WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Running command Checking if build backend supports build_editable
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Running command Getting requirements to build editable
  Traceback (most recent call last):
    File "/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py", line 353, in <module>
      main()
    File "/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py", line 335, in main
      json_out['return_val'] = hook(**hook_input['kwargs'])
    File "/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py", line 132, in get_requires_for_build_editable
      return hook(config_settings)
    File "/tmp/pip-build-env-ngluuidc/overlay/lib/python3.9/site-packages/setuptools/build_meta.py", line 483, in get_requires_for_build_editable
      return self.get_requires_for_build_wheel(config_settings)
    File "/tmp/pip-build-env-ngluuidc/overlay/lib/python3.9/site-packages/setuptools/build_meta.py", line 334, in get_requires_for_build_wheel
      return self._get_build_requires(config_settings, requirements=[])
    File "/tmp/pip-build-env-ngluuidc/overlay/lib/python3.9/site-packages/setuptools/build_meta.py", line 304, in _get_build_requires
      self.run_setup()
    File "/tmp/pip-build-env-ngluuidc/overlay/lib/python3.9/site-packages/setuptools/build_meta.py", line 320, in run_setup
      exec(code, locals())
    File "<string>", line 69, in <module>
    File "/tmp/pip-build-env-ngluuidc/overlay/lib/python3.9/site-packages/extension_helpers/_setup_helpers.py", line 63, in get_extensions
      for setuppkg in iter_setup_packages(srcdir, packages):
    File "/tmp/pip-build-env-ngluuidc/overlay/lib/python3.9/site-packages/extension_helpers/_setup_helpers.py", line 159, in iter_setup_packages
      module = import_file(setup_package, name=packagename + ".setup_package")
    File "/tmp/pip-build-env-ngluuidc/overlay/lib/python3.9/site-packages/extension_helpers/_utils.py", line 138, in import_file
      loader.exec_module(mod)
    File "<frozen importlib._bootstrap_external>", line 850, in exec_module
    File "<frozen importlib._bootstrap>", line 228, in _call_with_frames_removed
    File "astropy/wcs/setup_package.py", line 13, in <module>
      from setuptools.dep_util import newer_group
  ModuleNotFoundError: No module named 'setuptools.dep_util'
  error: subprocess-exited-with-error
  
  × Getting requirements to build editable did not run successfully.
  │ exit code: 1
  ╰─> See above for output.
  
  note: This error originates from a subprocess, and is likely not a problem with pip.
  full command: /opt/miniconda3/envs/testbed/bin/python /opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py get_requires_for_build_editable /tmp/tmpmxezzjk7
  cwd: /testbed
  Getting requirements to build editable: finished with status 'error'
error: subprocess-exited-with-error

× Getting requirements to build editable did not run successfully.
│ exit code: 1
╰─> See above for output.

note: This error originates from a subprocess, and is likely not a problem with pip.
+ git checkout 5250b2442501e6c671c6b380536f1edb352602d1 astropy/units/tests/test_quantity.py astropy/units/tests/test_quantity_ufuncs.py
Updated 0 paths from 58bc2b3c33
+ git apply -v -
Checking patch astropy/units/tests/test_quantity.py...
Checking patch astropy/units/tests/test_quantity_ufuncs.py...
Applied patch astropy/units/tests/test_quantity.py cleanly.
Applied patch astropy/units/tests/test_quantity_ufuncs.py cleanly.
+ pytest -rA astropy/units/tests/test_quantity.py astropy/units/tests/test_quantity_ufuncs.py
<frozen importlib._bootstrap>:228: RuntimeWarning: numpy.ndarray size changed, may indicate binary incompatibility. Expected 80 from C header, got 96 from PyObject
[1m============================= test session starts ==============================[0m
platform linux -- Python 3.9.19, pytest-7.4.0, pluggy-1.3.0

Running tests with Astropy version 5.3.dev125+g5250b24425.d20241211.
Running tests in astropy/units/tests/test_quantity.py astropy/units/tests/test_quantity_ufuncs.py.

Date: 2024-12-13T04:14:42

Platform: Linux-6.1.109-118.189.amzn2023.x86_64-x86_64-with-glibc2.35

Executable: /opt/miniconda3/envs/testbed/bin/python

Full Python Version: 
3.9.19 (main, May  6 2024, 19:43:03) 
[GCC 11.2.0]

encodings: sys: utf-8, locale: UTF-8, filesystem: utf-8
byteorder: little
float info: dig: 15, mant_dig: 15

Package versions: 
Numpy: 1.25.2
Scipy: not available
Matplotlib: not available
h5py: not available
Pandas: not available
PyERFA: 2.0.0.3
Cython: not available
Scikit-image: not available
asdf: not available
pyarrow: not available

Using Astropy options: remote_data: none.

CI: undefined
ARCH_ON_CI: undefined
IS_CRON: undefined

rootdir: /testbed
configfile: setup.cfg
plugins: hypothesis-6.82.6, arraydiff-0.5.0, astropy-0.10.0, astropy-header-0.2.2, cov-4.1.0, doctestplus-1.0.0, filter-subpackage-0.1.2, mock-3.11.1, openfiles-0.5.0, remotedata-0.4.0, xdist-3.3.1
collected 347 items

astropy/units/tests/test_quantity.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[33mx[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m [ 10%]
[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m              [ 27%][0m
astropy/units/tests/test_quantity_ufuncs.py [33ms[0m[33ms[0m[33ms[0m[32m.[0m[32m.[0m[32m.[0m[33ms[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m [ 35%]
[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m [ 55%]
[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m [ 76%]
[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31mF[0m[32m.[0m[31mF[0m[31mF[0m[32m.[0m[31mF[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31mF[0m[31mF[0m[32m.[0m[31m [ 97%]
[0m[31mF[0m[31mF[0m[32m.[0m[31mF[0m[31mF[0m[32m.[0m[31mF[0m[31mF[0m[32m.[0m[31m                                                                [100%][0m

=================================== FAILURES ===================================
[31m[1m_ TestUfuncReturnsNotImplemented.TestBinaryUfuncs.test_basic[duck_quantity1-quantity0-add] _[0m

self = <astropy.units.tests.test_quantity_ufuncs.TestUfuncReturnsNotImplemented.TestBinaryUfuncs object at 0x7f0a6b2e8d60>
ufunc = <ufunc 'add'>, quantity = <Quantity 1. m>
duck_quantity = DuckQuantity2(data=<Quantity 1. mm>)

    @pytest.mark.parametrize(
        "duck_quantity",
        [DuckQuantity1(1 * u.mm), DuckQuantity2(1 * u.mm)],
    )
    def test_basic(self, ufunc, quantity, duck_quantity):
        with pytest.raises(
            (TypeError, ValueError),
            match=(
                r"(Unsupported operand type\(s\) for ufunc .*)|"
                r"(unsupported operand type\(s\) for .*)|"
                r"(Value not scalar compatible or convertible to an int, float, or complex array)"
            ),
        ):
>           ufunc(quantity, duck_quantity)
[1m[31mE           TypeError: operand type(s) all returned NotImplemented from __array_ufunc__(<ufunc 'add'>, '__call__', <Quantity 1. m>, DuckQuantity2(data=<Quantity 1. mm>)): 'Quantity', 'DuckQuantity2'[0m

[1m[31mastropy/units/tests/test_quantity_ufuncs.py[0m:1394: TypeError

[33mDuring handling of the above exception, another exception occurred:[0m

self = <astropy.units.tests.test_quantity_ufuncs.TestUfuncReturnsNotImplemented.TestBinaryUfuncs object at 0x7f0a6b2e8d60>
ufunc = <ufunc 'add'>, quantity = <Quantity 1. m>
duck_quantity = DuckQuantity2(data=<Quantity 1. mm>)

    @pytest.mark.parametrize(
        "duck_quantity",
        [DuckQuantity1(1 * u.mm), DuckQuantity2(1 * u.mm)],
    )
    def test_basic(self, ufunc, quantity, duck_quantity):
        with pytest.raises(
            (TypeError, ValueError),
            match=(
                r"(Unsupported operand type\(s\) for ufunc .*)|"
                r"(unsupported operand type\(s\) for .*)|"
                r"(Value not scalar compatible or convertible to an int, float, or complex array)"
            ),
        ):
>           ufunc(quantity, duck_quantity)
[1m[31mE           AssertionError: Regex pattern did not match.[0m
[1m[31mE            Regex: '(Unsupported operand type\\(s\\) for ufunc .*)|(unsupported operand type\\(s\\) for .*)|(Value not scalar compatible or convertible to an int, float, or complex array)'[0m
[1m[31mE            Input: "operand type(s) all returned NotImplemented from __array_ufunc__(<ufunc 'add'>, '__call__', <Quantity 1. m>, DuckQuantity2(data=<Quantity 1. mm>)): 'Quantity', 'DuckQuantity2'"[0m

[1m[31mastropy/units/tests/test_quantity_ufuncs.py[0m:1394: AssertionError
[31m[1m_ TestUfuncReturnsNotImplemented.TestBinaryUfuncs.test_basic[duck_quantity1-quantity0-less] _[0m

self = <astropy.units.tests.test_quantity_ufuncs.TestUfuncReturnsNotImplemented.TestBinaryUfuncs object at 0x7f0a6aa8cc10>
ufunc = <ufunc 'less'>, quantity = <Quantity 1. m>
duck_quantity = DuckQuantity2(data=<Quantity 1. mm>)

    @pytest.mark.parametrize(
        "duck_quantity",
        [DuckQuantity1(1 * u.mm), DuckQuantity2(1 * u.mm)],
    )
    def test_basic(self, ufunc, quantity, duck_quantity):
        with pytest.raises(
            (TypeError, ValueError),
            match=(
                r"(Unsupported operand type\(s\) for ufunc .*)|"
                r"(unsupported operand type\(s\) for .*)|"
                r"(Value not scalar compatible or convertible to an int, float, or complex array)"
            ),
        ):
>           ufunc(quantity, duck_quantity)
[1m[31mE           TypeError: operand type(s) all returned NotImplemented from __array_ufunc__(<ufunc 'less'>, '__call__', <Quantity 1. m>, DuckQuantity2(data=<Quantity 1. mm>)): 'Quantity', 'DuckQuantity2'[0m

[1m[31mastropy/units/tests/test_quantity_ufuncs.py[0m:1394: TypeError

[33mDuring handling of the above exception, another exception occurred:[0m

self = <astropy.units.tests.test_quantity_ufuncs.TestUfuncReturnsNotImplemented.TestBinaryUfuncs object at 0x7f0a6aa8cc10>
ufunc = <ufunc 'less'>, quantity = <Quantity 1. m>
duck_quantity = DuckQuantity2(data=<Quantity 1. mm>)

    @pytest.mark.parametrize(
        "duck_quantity",
        [DuckQuantity1(1 * u.mm), DuckQuantity2(1 * u.mm)],
    )
    def test_basic(self, ufunc, quantity, duck_quantity):
        with pytest.raises(
            (TypeError, ValueError),
            match=(
                r"(Unsupported operand type\(s\) for ufunc .*)|"
                r"(unsupported operand type\(s\) for .*)|"
                r"(Value not scalar compatible or convertible to an int, float, or complex array)"
            ),
        ):
>           ufunc(quantity, duck_quantity)
[1m[31mE           AssertionError: Regex pattern did not match.[0m
[1m[31mE            Regex: '(Unsupported operand type\\(s\\) for ufunc .*)|(unsupported operand type\\(s\\) for .*)|(Value not scalar compatible or convertible to an int, float, or complex array)'[0m
[1m[31mE            Input: "operand type(s) all returned NotImplemented from __array_ufunc__(<ufunc 'less'>, '__call__', <Quantity 1. m>, DuckQuantity2(data=<Quantity 1. mm>)): 'Quantity', 'DuckQuantity2'"[0m

[1m[31mastropy/units/tests/test_quantity_ufuncs.py[0m:1394: AssertionError
[31m[1m_ TestUfuncReturnsNotImplemented.TestBinaryUfuncs.test_basic[duck_quantity1-quantity1-add] _[0m

self = <astropy.units.tests.test_quantity_ufuncs.TestUfuncReturnsNotImplemented.TestBinaryUfuncs object at 0x7f0a6b2faeb0>
ufunc = <ufunc 'add'>, quantity = <Quantity [1., 2.] m>
duck_quantity = DuckQuantity2(data=<Quantity 1. mm>)

    @pytest.mark.parametrize(
        "duck_quantity",
        [DuckQuantity1(1 * u.mm), DuckQuantity2(1 * u.mm)],
    )
    def test_basic(self, ufunc, quantity, duck_quantity):
        with pytest.raises(
            (TypeError, ValueError),
            match=(
                r"(Unsupported operand type\(s\) for ufunc .*)|"
                r"(unsupported operand type\(s\) for .*)|"
                r"(Value not scalar compatible or convertible to an int, float, or complex array)"
            ),
        ):
>           ufunc(quantity, duck_quantity)
[1m[31mE           TypeError: operand type(s) all returned NotImplemented from __array_ufunc__(<ufunc 'add'>, '__call__', <Quantity [1., 2.] m>, DuckQuantity2(data=<Quantity 1. mm>)): 'Quantity', 'DuckQuantity2'[0m

[1m[31mastropy/units/tests/test_quantity_ufuncs.py[0m:1394: TypeError

[33mDuring handling of the above exception, another exception occurred:[0m

self = <astropy.units.tests.test_quantity_ufuncs.TestUfuncReturnsNotImplemented.TestBinaryUfuncs object at 0x7f0a6b2faeb0>
ufunc = <ufunc 'add'>, quantity = <Quantity [1., 2.] m>
duck_quantity = DuckQuantity2(data=<Quantity 1. mm>)

    @pytest.mark.parametrize(
        "duck_quantity",
        [DuckQuantity1(1 * u.mm), DuckQuantity2(1 * u.mm)],
    )
    def test_basic(self, ufunc, quantity, duck_quantity):
        with pytest.raises(
            (TypeError, ValueError),
            match=(
                r"(Unsupported operand type\(s\) for ufunc .*)|"
                r"(unsupported operand type\(s\) for .*)|"
                r"(Value not scalar compatible or convertible to an int, float, or complex array)"
            ),
        ):
>           ufunc(quantity, duck_quantity)
[1m[31mE           AssertionError: Regex pattern did not match.[0m
[1m[31mE            Regex: '(Unsupported operand type\\(s\\) for ufunc .*)|(unsupported operand type\\(s\\) for .*)|(Value not scalar compatible or convertible to an int, float, or complex array)'[0m
[1m[31mE            Input: "operand type(s) all returned NotImplemented from __array_ufunc__(<ufunc 'add'>, '__call__', <Quantity [1., 2.] m>, DuckQuantity2(data=<Quantity 1. mm>)): 'Quantity', 'DuckQuantity2'"[0m

[1m[31mastropy/units/tests/test_quantity_ufuncs.py[0m:1394: AssertionError
[31m[1m_ TestUfuncReturnsNotImplemented.TestBinaryUfuncs.test_basic[duck_quantity1-quantity1-less] _[0m

self = <astropy.units.tests.test_quantity_ufuncs.TestUfuncReturnsNotImplemented.TestBinaryUfuncs object at 0x7f0a6b2e8d00>
ufunc = <ufunc 'less'>, quantity = <Quantity [1., 2.] m>
duck_quantity = DuckQuantity2(data=<Quantity 1. mm>)

    @pytest.mark.parametrize(
        "duck_quantity",
        [DuckQuantity1(1 * u.mm), DuckQuantity2(1 * u.mm)],
    )
    def test_basic(self, ufunc, quantity, duck_quantity):
        with pytest.raises(
            (TypeError, ValueError),
            match=(
                r"(Unsupported operand type\(s\) for ufunc .*)|"
                r"(unsupported operand type\(s\) for .*)|"
                r"(Value not scalar compatible or convertible to an int, float, or complex array)"
            ),
        ):
>           ufunc(quantity, duck_quantity)
[1m[31mE           TypeError: operand type(s) all returned NotImplemented from __array_ufunc__(<ufunc 'less'>, '__call__', <Quantity [1., 2.] m>, DuckQuantity2(data=<Quantity 1. mm>)): 'Quantity', 'DuckQuantity2'[0m

[1m[31mastropy/units/tests/test_quantity_ufuncs.py[0m:1394: TypeError

[33mDuring handling of the above exception, another exception occurred:[0m

self = <astropy.units.tests.test_quantity_ufuncs.TestUfuncReturnsNotImplemented.TestBinaryUfuncs object at 0x7f0a6b2e8d00>
ufunc = <ufunc 'less'>, quantity = <Quantity [1., 2.] m>
duck_quantity = DuckQuantity2(data=<Quantity 1. mm>)

    @pytest.mark.parametrize(
        "duck_quantity",
        [DuckQuantity1(1 * u.mm), DuckQuantity2(1 * u.mm)],
    )
    def test_basic(self, ufunc, quantity, duck_quantity):
        with pytest.raises(
            (TypeError, ValueError),
            match=(
                r"(Unsupported operand type\(s\) for ufunc .*)|"
                r"(unsupported operand type\(s\) for .*)|"
                r"(Value not scalar compatible or convertible to an int, float, or complex array)"
            ),
        ):
>           ufunc(quantity, duck_quantity)
[1m[31mE           AssertionError: Regex pattern did not match.[0m
[1m[31mE            Regex: '(Unsupported operand type\\(s\\) for ufunc .*)|(unsupported operand type\\(s\\) for .*)|(Value not scalar compatible or convertible to an int, float, or complex array)'[0m
[1m[31mE            Input: "operand type(s) all returned NotImplemented from __array_ufunc__(<ufunc 'less'>, '__call__', <Quantity [1., 2.] m>, DuckQuantity2(data=<Quantity 1. mm>)): 'Quantity', 'DuckQuantity2'"[0m

[1m[31mastropy/units/tests/test_quantity_ufuncs.py[0m:1394: AssertionError
[31m[1m_ TestUfuncReturnsNotImplemented.TestBinaryUfuncs.test_full[empty-duck_quantity0-quantity0-add] _[0m

self = <astropy.units.tests.test_quantity_ufuncs.TestUfuncReturnsNotImplemented.TestBinaryUfuncs object at 0x7f0a579b2ac0>
ufunc = <ufunc 'add'>, quantity = <Quantity 1. m>
duck_quantity = DuckQuantity3(data=<Quantity 1. mm>)
out = DuckQuantity3(data=<Quantity 0.001 m>)

    @pytest.mark.parametrize(
        "duck_quantity",
        [DuckQuantity3(1 * u.mm), DuckQuantity3([1, 2] * u.mm)],
    )
    @pytest.mark.parametrize("out", [None, "empty"])
    def test_full(self, ufunc, quantity, duck_quantity, out):
        out_expected = out
        if out == "empty":
            out = type(duck_quantity)(
                np.empty_like(ufunc(quantity, duck_quantity.data))
            )
            out_expected = np.empty_like(ufunc(quantity, duck_quantity.data))
    
>       result = ufunc(quantity, duck_quantity, out=out)

[1m[31mastropy/units/tests/test_quantity_ufuncs.py[0m:1409: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mastropy/units/quantity.py[0m:652: in __array_ufunc__
    out_array = check_output(out, unit, inputs, function=function)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

output = DuckQuantity3(data=<Quantity 0.001 m>), unit = Unit("m")
inputs = (<Quantity 1. m>, DuckQuantity3(data=<Quantity 1. mm>))
function = <ufunc 'add'>

    def check_output(output, unit, inputs, function=None):
        """Check that function output can be stored in the output array given.
    
        Parameters
        ----------
        output : array or `~astropy.units.Quantity` or tuple
            Array that should hold the function output (or tuple of such arrays).
        unit : `~astropy.units.Unit` or None, or tuple
            Unit that the output will have, or `None` for pure numbers (should be
            tuple of same if output is a tuple of outputs).
        inputs : tuple
            Any input arguments.  These should be castable to the output.
        function : callable
            The function that will be producing the output.  If given, used to
            give a more informative error message.
    
        Returns
        -------
        arrays : ndarray view or tuple thereof
            The view(s) is of ``output``.
    
        Raises
        ------
        UnitTypeError : If ``unit`` is inconsistent with the class of ``output``
    
        TypeError : If the ``inputs`` cannot be cast safely to ``output``.
        """
        if isinstance(output, tuple):
            return tuple(
                check_output(output_, unit_, inputs, function)
                for output_, unit_ in zip(output, unit)
            )
    
        # ``None`` indicates no actual array is needed.  This can happen, e.g.,
        # with np.modf(a, out=(None, b)).
        if output is None:
            return None
    
        if hasattr(output, "__quantity_subclass__"):
            # Check that we're not trying to store a plain Numpy array or a
            # Quantity with an inconsistent unit (e.g., not angular for Angle).
            if unit is None:
                raise TypeError(
                    "Cannot store non-quantity output{} in {} instance".format(
                        (
                            f" from {function.__name__} function"
                            if function is not None
                            else ""
                        ),
                        type(output),
                    )
                )
    
            q_cls, subok = output.__quantity_subclass__(unit)
            if not (subok or q_cls is type(output)):
                raise UnitTypeError(
                    "Cannot store output with unit '{}'{} "
                    "in {} instance.  Use {} instance instead.".format(
                        unit,
                        (
                            f" from {function.__name__} function"
                            if function is not None
                            else ""
                        ),
                        type(output),
                        q_cls,
                    )
                )
    
            # check we can handle the dtype (e.g., that we are not int
            # when float is required).  Note that we only do this for Quantity
            # output; for array output, we defer to numpy's default handling.
            # Also, any structured dtype are ignored (likely erfa ufuncs).
            # TODO: make more logical; is this necessary at all?
            if inputs and not output.dtype.names:
                result_type = np.result_type(*inputs)
                if not (
                    result_type.names
                    or np.can_cast(result_type, output.dtype, casting="same_kind")
                ):
                    raise TypeError(
                        "Arguments cannot be cast safely to inplace "
                        f"output with dtype={output.dtype}"
                    )
            # Turn into ndarray, so we do not loop into array_wrap/array_ufunc
            # if the output is used to store results of a function.
            return output.view(np.ndarray)
    
        else:
            # output is not a Quantity, so cannot obtain a unit.
            if not (unit is None or unit is dimensionless_unscaled):
>               raise UnitTypeError(
                    "Cannot store quantity with dimension "
                    "{}in a non-Quantity instance.".format(
                        f"resulting from {function.__name__} function "
                        if function is not None
                        else ""
                    )
                )
[1m[31mE               astropy.units.core.UnitTypeError: Cannot store quantity with dimension resulting from add function in a non-Quantity instance.[0m

[1m[31mastropy/units/quantity_helper/converters.py[0m:387: UnitTypeError
[31m[1m_ TestUfuncReturnsNotImplemented.TestBinaryUfuncs.test_full[empty-duck_quantity0-quantity0-multiply] _[0m

self = <astropy.units.tests.test_quantity_ufuncs.TestUfuncReturnsNotImplemented.TestBinaryUfuncs object at 0x7f0a576b8af0>
ufunc = <ufunc 'multiply'>, quantity = <Quantity 1. m>
duck_quantity = DuckQuantity3(data=<Quantity 1. mm>)
out = DuckQuantity3(data=<Quantity 1. m mm>)

    @pytest.mark.parametrize(
        "duck_quantity",
        [DuckQuantity3(1 * u.mm), DuckQuantity3([1, 2] * u.mm)],
    )
    @pytest.mark.parametrize("out", [None, "empty"])
    def test_full(self, ufunc, quantity, duck_quantity, out):
        out_expected = out
        if out == "empty":
            out = type(duck_quantity)(
                np.empty_like(ufunc(quantity, duck_quantity.data))
            )
            out_expected = np.empty_like(ufunc(quantity, duck_quantity.data))
    
>       result = ufunc(quantity, duck_quantity, out=out)

[1m[31mastropy/units/tests/test_quantity_ufuncs.py[0m:1409: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mastropy/units/quantity.py[0m:652: in __array_ufunc__
    out_array = check_output(out, unit, inputs, function=function)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

output = DuckQuantity3(data=<Quantity 1. m mm>), unit = Unit("m mm")
inputs = (<Quantity 1. m>, DuckQuantity3(data=<Quantity 1. mm>))
function = <ufunc 'multiply'>

    def check_output(output, unit, inputs, function=None):
        """Check that function output can be stored in the output array given.
    
        Parameters
        ----------
        output : array or `~astropy.units.Quantity` or tuple
            Array that should hold the function output (or tuple of such arrays).
        unit : `~astropy.units.Unit` or None, or tuple
            Unit that the output will have, or `None` for pure numbers (should be
            tuple of same if output is a tuple of outputs).
        inputs : tuple
            Any input arguments.  These should be castable to the output.
        function : callable
            The function that will be producing the output.  If given, used to
            give a more informative error message.
    
        Returns
        -------
        arrays : ndarray view or tuple thereof
            The view(s) is of ``output``.
    
        Raises
        ------
        UnitTypeError : If ``unit`` is inconsistent with the class of ``output``
    
        TypeError : If the ``inputs`` cannot be cast safely to ``output``.
        """
        if isinstance(output, tuple):
            return tuple(
                check_output(output_, unit_, inputs, function)
                for output_, unit_ in zip(output, unit)
            )
    
        # ``None`` indicates no actual array is needed.  This can happen, e.g.,
        # with np.modf(a, out=(None, b)).
        if output is None:
            return None
    
        if hasattr(output, "__quantity_subclass__"):
            # Check that we're not trying to store a plain Numpy array or a
            # Quantity with an inconsistent unit (e.g., not angular for Angle).
            if unit is None:
                raise TypeError(
                    "Cannot store non-quantity output{} in {} instance".format(
                        (
                            f" from {function.__name__} function"
                            if function is not None
                            else ""
                        ),
                        type(output),
                    )
                )
    
            q_cls, subok = output.__quantity_subclass__(unit)
            if not (subok or q_cls is type(output)):
                raise UnitTypeError(
                    "Cannot store output with unit '{}'{} "
                    "in {} instance.  Use {} instance instead.".format(
                        unit,
                        (
                            f" from {function.__name__} function"
                            if function is not None
                            else ""
                        ),
                        type(output),
                        q_cls,
                    )
                )
    
            # check we can handle the dtype (e.g., that we are not int
            # when float is required).  Note that we only do this for Quantity
            # output; for array output, we defer to numpy's default handling.
            # Also, any structured dtype are ignored (likely erfa ufuncs).
            # TODO: make more logical; is this necessary at all?
            if inputs and not output.dtype.names:
                result_type = np.result_type(*inputs)
                if not (
                    result_type.names
                    or np.can_cast(result_type, output.dtype, casting="same_kind")
                ):
                    raise TypeError(
                        "Arguments cannot be cast safely to inplace "
                        f"output with dtype={output.dtype}"
                    )
            # Turn into ndarray, so we do not loop into array_wrap/array_ufunc
            # if the output is used to store results of a function.
            return output.view(np.ndarray)
    
        else:
            # output is not a Quantity, so cannot obtain a unit.
            if not (unit is None or unit is dimensionless_unscaled):
>               raise UnitTypeError(
                    "Cannot store quantity with dimension "
                    "{}in a non-Quantity instance.".format(
                        f"resulting from {function.__name__} function "
                        if function is not None
                        else ""
                    )
                )
[1m[31mE               astropy.units.core.UnitTypeError: Cannot store quantity with dimension resulting from multiply function in a non-Quantity instance.[0m

[1m[31mastropy/units/quantity_helper/converters.py[0m:387: UnitTypeError
[31m[1m_ TestUfuncReturnsNotImplemented.TestBinaryUfuncs.test_full[empty-duck_quantity0-quantity1-add] _[0m

self = <astropy.units.tests.test_quantity_ufuncs.TestUfuncReturnsNotImplemented.TestBinaryUfuncs object at 0x7f0a5782b7c0>
ufunc = <ufunc 'add'>, quantity = <Quantity [1., 2.] m>
duck_quantity = DuckQuantity3(data=<Quantity 1. mm>)
out = DuckQuantity3(data=<Quantity [1., 4.] m>)

    @pytest.mark.parametrize(
        "duck_quantity",
        [DuckQuantity3(1 * u.mm), DuckQuantity3([1, 2] * u.mm)],
    )
    @pytest.mark.parametrize("out", [None, "empty"])
    def test_full(self, ufunc, quantity, duck_quantity, out):
        out_expected = out
        if out == "empty":
            out = type(duck_quantity)(
                np.empty_like(ufunc(quantity, duck_quantity.data))
            )
            out_expected = np.empty_like(ufunc(quantity, duck_quantity.data))
    
>       result = ufunc(quantity, duck_quantity, out=out)

[1m[31mastropy/units/tests/test_quantity_ufuncs.py[0m:1409: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mastropy/units/quantity.py[0m:652: in __array_ufunc__
    out_array = check_output(out, unit, inputs, function=function)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

output = DuckQuantity3(data=<Quantity [1., 4.] m>), unit = Unit("m")
inputs = (<Quantity [1., 2.] m>, DuckQuantity3(data=<Quantity 1. mm>))
function = <ufunc 'add'>

    def check_output(output, unit, inputs, function=None):
        """Check that function output can be stored in the output array given.
    
        Parameters
        ----------
        output : array or `~astropy.units.Quantity` or tuple
            Array that should hold the function output (or tuple of such arrays).
        unit : `~astropy.units.Unit` or None, or tuple
            Unit that the output will have, or `None` for pure numbers (should be
            tuple of same if output is a tuple of outputs).
        inputs : tuple
            Any input arguments.  These should be castable to the output.
        function : callable
            The function that will be producing the output.  If given, used to
            give a more informative error message.
    
        Returns
        -------
        arrays : ndarray view or tuple thereof
            The view(s) is of ``output``.
    
        Raises
        ------
        UnitTypeError : If ``unit`` is inconsistent with the class of ``output``
    
        TypeError : If the ``inputs`` cannot be cast safely to ``output``.
        """
        if isinstance(output, tuple):
            return tuple(
                check_output(output_, unit_, inputs, function)
                for output_, unit_ in zip(output, unit)
            )
    
        # ``None`` indicates no actual array is needed.  This can happen, e.g.,
        # with np.modf(a, out=(None, b)).
        if output is None:
            return None
    
        if hasattr(output, "__quantity_subclass__"):
            # Check that we're not trying to store a plain Numpy array or a
            # Quantity with an inconsistent unit (e.g., not angular for Angle).
            if unit is None:
                raise TypeError(
                    "Cannot store non-quantity output{} in {} instance".format(
                        (
                            f" from {function.__name__} function"
                            if function is not None
                            else ""
                        ),
                        type(output),
                    )
                )
    
            q_cls, subok = output.__quantity_subclass__(unit)
            if not (subok or q_cls is type(output)):
                raise UnitTypeError(
                    "Cannot store output with unit '{}'{} "
                    "in {} instance.  Use {} instance instead.".format(
                        unit,
                        (
                            f" from {function.__name__} function"
                            if function is not None
                            else ""
                        ),
                        type(output),
                        q_cls,
                    )
                )
    
            # check we can handle the dtype (e.g., that we are not int
            # when float is required).  Note that we only do this for Quantity
            # output; for array output, we defer to numpy's default handling.
            # Also, any structured dtype are ignored (likely erfa ufuncs).
            # TODO: make more logical; is this necessary at all?
            if inputs and not output.dtype.names:
                result_type = np.result_type(*inputs)
                if not (
                    result_type.names
                    or np.can_cast(result_type, output.dtype, casting="same_kind")
                ):
                    raise TypeError(
                        "Arguments cannot be cast safely to inplace "
                        f"output with dtype={output.dtype}"
                    )
            # Turn into ndarray, so we do not loop into array_wrap/array_ufunc
            # if the output is used to store results of a function.
            return output.view(np.ndarray)
    
        else:
            # output is not a Quantity, so cannot obtain a unit.
            if not (unit is None or unit is dimensionless_unscaled):
>               raise UnitTypeError(
                    "Cannot store quantity with dimension "
                    "{}in a non-Quantity instance.".format(
                        f"resulting from {function.__name__} function "
                        if function is not None
                        else ""
                    )
                )
[1m[31mE               astropy.units.core.UnitTypeError: Cannot store quantity with dimension resulting from add function in a non-Quantity instance.[0m

[1m[31mastropy/units/quantity_helper/converters.py[0m:387: UnitTypeError
[31m[1m_ TestUfuncReturnsNotImplemented.TestBinaryUfuncs.test_full[empty-duck_quantity0-quantity1-multiply] _[0m

self = <astropy.units.tests.test_quantity_ufuncs.TestUfuncReturnsNotImplemented.TestBinaryUfuncs object at 0x7f0a5782ba00>
ufunc = <ufunc 'multiply'>, quantity = <Quantity [1., 2.] m>
duck_quantity = DuckQuantity3(data=<Quantity 1. mm>)
out = DuckQuantity3(data=<Quantity [1., 2.] m mm>)

    @pytest.mark.parametrize(
        "duck_quantity",
        [DuckQuantity3(1 * u.mm), DuckQuantity3([1, 2] * u.mm)],
    )
    @pytest.mark.parametrize("out", [None, "empty"])
    def test_full(self, ufunc, quantity, duck_quantity, out):
        out_expected = out
        if out == "empty":
            out = type(duck_quantity)(
                np.empty_like(ufunc(quantity, duck_quantity.data))
            )
            out_expected = np.empty_like(ufunc(quantity, duck_quantity.data))
    
>       result = ufunc(quantity, duck_quantity, out=out)

[1m[31mastropy/units/tests/test_quantity_ufuncs.py[0m:1409: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mastropy/units/quantity.py[0m:652: in __array_ufunc__
    out_array = check_output(out, unit, inputs, function=function)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

output = DuckQuantity3(data=<Quantity [1., 2.] m mm>), unit = Unit("m mm")
inputs = (<Quantity [1., 2.] m>, DuckQuantity3(data=<Quantity 1. mm>))
function = <ufunc 'multiply'>

    def check_output(output, unit, inputs, function=None):
        """Check that function output can be stored in the output array given.
    
        Parameters
        ----------
        output : array or `~astropy.units.Quantity` or tuple
            Array that should hold the function output (or tuple of such arrays).
        unit : `~astropy.units.Unit` or None, or tuple
            Unit that the output will have, or `None` for pure numbers (should be
            tuple of same if output is a tuple of outputs).
        inputs : tuple
            Any input arguments.  These should be castable to the output.
        function : callable
            The function that will be producing the output.  If given, used to
            give a more informative error message.
    
        Returns
        -------
        arrays : ndarray view or tuple thereof
            The view(s) is of ``output``.
    
        Raises
        ------
        UnitTypeError : If ``unit`` is inconsistent with the class of ``output``
    
        TypeError : If the ``inputs`` cannot be cast safely to ``output``.
        """
        if isinstance(output, tuple):
            return tuple(
                check_output(output_, unit_, inputs, function)
                for output_, unit_ in zip(output, unit)
            )
    
        # ``None`` indicates no actual array is needed.  This can happen, e.g.,
        # with np.modf(a, out=(None, b)).
        if output is None:
            return None
    
        if hasattr(output, "__quantity_subclass__"):
            # Check that we're not trying to store a plain Numpy array or a
            # Quantity with an inconsistent unit (e.g., not angular for Angle).
            if unit is None:
                raise TypeError(
                    "Cannot store non-quantity output{} in {} instance".format(
                        (
                            f" from {function.__name__} function"
                            if function is not None
                            else ""
                        ),
                        type(output),
                    )
                )
    
            q_cls, subok = output.__quantity_subclass__(unit)
            if not (subok or q_cls is type(output)):
                raise UnitTypeError(
                    "Cannot store output with unit '{}'{} "
                    "in {} instance.  Use {} instance instead.".format(
                        unit,
                        (
                            f" from {function.__name__} function"
                            if function is not None
                            else ""
                        ),
                        type(output),
                        q_cls,
                    )
                )
    
            # check we can handle the dtype (e.g., that we are not int
            # when float is required).  Note that we only do this for Quantity
            # output; for array output, we defer to numpy's default handling.
            # Also, any structured dtype are ignored (likely erfa ufuncs).
            # TODO: make more logical; is this necessary at all?
            if inputs and not output.dtype.names:
                result_type = np.result_type(*inputs)
                if not (
                    result_type.names
                    or np.can_cast(result_type, output.dtype, casting="same_kind")
                ):
                    raise TypeError(
                        "Arguments cannot be cast safely to inplace "
                        f"output with dtype={output.dtype}"
                    )
            # Turn into ndarray, so we do not loop into array_wrap/array_ufunc
            # if the output is used to store results of a function.
            return output.view(np.ndarray)
    
        else:
            # output is not a Quantity, so cannot obtain a unit.
            if not (unit is None or unit is dimensionless_unscaled):
>               raise UnitTypeError(
                    "Cannot store quantity with dimension "
                    "{}in a non-Quantity instance.".format(
                        f"resulting from {function.__name__} function "
                        if function is not None
                        else ""
                    )
                )
[1m[31mE               astropy.units.core.UnitTypeError: Cannot store quantity with dimension resulting from multiply function in a non-Quantity instance.[0m

[1m[31mastropy/units/quantity_helper/converters.py[0m:387: UnitTypeError
[31m[1m_ TestUfuncReturnsNotImplemented.TestBinaryUfuncs.test_full[empty-duck_quantity1-quantity0-add] _[0m

self = <astropy.units.tests.test_quantity_ufuncs.TestUfuncReturnsNotImplemented.TestBinaryUfuncs object at 0x7f0a57698e50>
ufunc = <ufunc 'add'>, quantity = <Quantity 1. m>
duck_quantity = DuckQuantity3(data=<Quantity [1., 2.] mm>)
out = DuckQuantity3(data=<Quantity [0.001, 0.002] m>)

    @pytest.mark.parametrize(
        "duck_quantity",
        [DuckQuantity3(1 * u.mm), DuckQuantity3([1, 2] * u.mm)],
    )
    @pytest.mark.parametrize("out", [None, "empty"])
    def test_full(self, ufunc, quantity, duck_quantity, out):
        out_expected = out
        if out == "empty":
            out = type(duck_quantity)(
                np.empty_like(ufunc(quantity, duck_quantity.data))
            )
            out_expected = np.empty_like(ufunc(quantity, duck_quantity.data))
    
>       result = ufunc(quantity, duck_quantity, out=out)

[1m[31mastropy/units/tests/test_quantity_ufuncs.py[0m:1409: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mastropy/units/quantity.py[0m:652: in __array_ufunc__
    out_array = check_output(out, unit, inputs, function=function)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

output = DuckQuantity3(data=<Quantity [0.001, 0.002] m>), unit = Unit("m")
inputs = (<Quantity 1. m>, DuckQuantity3(data=<Quantity [1., 2.] mm>))
function = <ufunc 'add'>

    def check_output(output, unit, inputs, function=None):
        """Check that function output can be stored in the output array given.
    
        Parameters
        ----------
        output : array or `~astropy.units.Quantity` or tuple
            Array that should hold the function output (or tuple of such arrays).
        unit : `~astropy.units.Unit` or None, or tuple
            Unit that the output will have, or `None` for pure numbers (should be
            tuple of same if output is a tuple of outputs).
        inputs : tuple
            Any input arguments.  These should be castable to the output.
        function : callable
            The function that will be producing the output.  If given, used to
            give a more informative error message.
    
        Returns
        -------
        arrays : ndarray view or tuple thereof
            The view(s) is of ``output``.
    
        Raises
        ------
        UnitTypeError : If ``unit`` is inconsistent with the class of ``output``
    
        TypeError : If the ``inputs`` cannot be cast safely to ``output``.
        """
        if isinstance(output, tuple):
            return tuple(
                check_output(output_, unit_, inputs, function)
                for output_, unit_ in zip(output, unit)
            )
    
        # ``None`` indicates no actual array is needed.  This can happen, e.g.,
        # with np.modf(a, out=(None, b)).
        if output is None:
            return None
    
        if hasattr(output, "__quantity_subclass__"):
            # Check that we're not trying to store a plain Numpy array or a
            # Quantity with an inconsistent unit (e.g., not angular for Angle).
            if unit is None:
                raise TypeError(
                    "Cannot store non-quantity output{} in {} instance".format(
                        (
                            f" from {function.__name__} function"
                            if function is not None
                            else ""
                        ),
                        type(output),
                    )
                )
    
            q_cls, subok = output.__quantity_subclass__(unit)
            if not (subok or q_cls is type(output)):
                raise UnitTypeError(
                    "Cannot store output with unit '{}'{} "
                    "in {} instance.  Use {} instance instead.".format(
                        unit,
                        (
                            f" from {function.__name__} function"
                            if function is not None
                            else ""
                        ),
                        type(output),
                        q_cls,
                    )
                )
    
            # check we can handle the dtype (e.g., that we are not int
            # when float is required).  Note that we only do this for Quantity
            # output; for array output, we defer to numpy's default handling.
            # Also, any structured dtype are ignored (likely erfa ufuncs).
            # TODO: make more logical; is this necessary at all?
            if inputs and not output.dtype.names:
                result_type = np.result_type(*inputs)
                if not (
                    result_type.names
                    or np.can_cast(result_type, output.dtype, casting="same_kind")
                ):
                    raise TypeError(
                        "Arguments cannot be cast safely to inplace "
                        f"output with dtype={output.dtype}"
                    )
            # Turn into ndarray, so we do not loop into array_wrap/array_ufunc
            # if the output is used to store results of a function.
            return output.view(np.ndarray)
    
        else:
            # output is not a Quantity, so cannot obtain a unit.
            if not (unit is None or unit is dimensionless_unscaled):
>               raise UnitTypeError(
                    "Cannot store quantity with dimension "
                    "{}in a non-Quantity instance.".format(
                        f"resulting from {function.__name__} function "
                        if function is not None
                        else ""
                    )
                )
[1m[31mE               astropy.units.core.UnitTypeError: Cannot store quantity with dimension resulting from add function in a non-Quantity instance.[0m

[1m[31mastropy/units/quantity_helper/converters.py[0m:387: UnitTypeError
[31m[1m_ TestUfuncReturnsNotImplemented.TestBinaryUfuncs.test_full[empty-duck_quantity1-quantity0-multiply] _[0m

self = <astropy.units.tests.test_quantity_ufuncs.TestUfuncReturnsNotImplemented.TestBinaryUfuncs object at 0x7f0a6aa94580>
ufunc = <ufunc 'multiply'>, quantity = <Quantity 1. m>
duck_quantity = DuckQuantity3(data=<Quantity [1., 2.] mm>)
out = DuckQuantity3(data=<Quantity [1., 2.] m mm>)

    @pytest.mark.parametrize(
        "duck_quantity",
        [DuckQuantity3(1 * u.mm), DuckQuantity3([1, 2] * u.mm)],
    )
    @pytest.mark.parametrize("out", [None, "empty"])
    def test_full(self, ufunc, quantity, duck_quantity, out):
        out_expected = out
        if out == "empty":
            out = type(duck_quantity)(
                np.empty_like(ufunc(quantity, duck_quantity.data))
            )
            out_expected = np.empty_like(ufunc(quantity, duck_quantity.data))
    
>       result = ufunc(quantity, duck_quantity, out=out)

[1m[31mastropy/units/tests/test_quantity_ufuncs.py[0m:1409: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mastropy/units/quantity.py[0m:652: in __array_ufunc__
    out_array = check_output(out, unit, inputs, function=function)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

output = DuckQuantity3(data=<Quantity [1., 2.] m mm>), unit = Unit("m mm")
inputs = (<Quantity 1. m>, DuckQuantity3(data=<Quantity [1., 2.] mm>))
function = <ufunc 'multiply'>

    def check_output(output, unit, inputs, function=None):
        """Check that function output can be stored in the output array given.
    
        Parameters
        ----------
        output : array or `~astropy.units.Quantity` or tuple
            Array that should hold the function output (or tuple of such arrays).
        unit : `~astropy.units.Unit` or None, or tuple
            Unit that the output will have, or `None` for pure numbers (should be
            tuple of same if output is a tuple of outputs).
        inputs : tuple
            Any input arguments.  These should be castable to the output.
        function : callable
            The function that will be producing the output.  If given, used to
            give a more informative error message.
    
        Returns
        -------
        arrays : ndarray view or tuple thereof
            The view(s) is of ``output``.
    
        Raises
        ------
        UnitTypeError : If ``unit`` is inconsistent with the class of ``output``
    
        TypeError : If the ``inputs`` cannot be cast safely to ``output``.
        """
        if isinstance(output, tuple):
            return tuple(
                check_output(output_, unit_, inputs, function)
                for output_, unit_ in zip(output, unit)
            )
    
        # ``None`` indicates no actual array is needed.  This can happen, e.g.,
        # with np.modf(a, out=(None, b)).
        if output is None:
            return None
    
        if hasattr(output, "__quantity_subclass__"):
            # Check that we're not trying to store a plain Numpy array or a
            # Quantity with an inconsistent unit (e.g., not angular for Angle).
            if unit is None:
                raise TypeError(
                    "Cannot store non-quantity output{} in {} instance".format(
                        (
                            f" from {function.__name__} function"
                            if function is not None
                            else ""
                        ),
                        type(output),
                    )
                )
    
            q_cls, subok = output.__quantity_subclass__(unit)
            if not (subok or q_cls is type(output)):
                raise UnitTypeError(
                    "Cannot store output with unit '{}'{} "
                    "in {} instance.  Use {} instance instead.".format(
                        unit,
                        (
                            f" from {function.__name__} function"
                            if function is not None
                            else ""
                        ),
                        type(output),
                        q_cls,
                    )
                )
    
            # check we can handle the dtype (e.g., that we are not int
            # when float is required).  Note that we only do this for Quantity
            # output; for array output, we defer to numpy's default handling.
            # Also, any structured dtype are ignored (likely erfa ufuncs).
            # TODO: make more logical; is this necessary at all?
            if inputs and not output.dtype.names:
                result_type = np.result_type(*inputs)
                if not (
                    result_type.names
                    or np.can_cast(result_type, output.dtype, casting="same_kind")
                ):
                    raise TypeError(
                        "Arguments cannot be cast safely to inplace "
                        f"output with dtype={output.dtype}"
                    )
            # Turn into ndarray, so we do not loop into array_wrap/array_ufunc
            # if the output is used to store results of a function.
            return output.view(np.ndarray)
    
        else:
            # output is not a Quantity, so cannot obtain a unit.
            if not (unit is None or unit is dimensionless_unscaled):
>               raise UnitTypeError(
                    "Cannot store quantity with dimension "
                    "{}in a non-Quantity instance.".format(
                        f"resulting from {function.__name__} function "
                        if function is not None
                        else ""
                    )
                )
[1m[31mE               astropy.units.core.UnitTypeError: Cannot store quantity with dimension resulting from multiply function in a non-Quantity instance.[0m

[1m[31mastropy/units/quantity_helper/converters.py[0m:387: UnitTypeError
[31m[1m_ TestUfuncReturnsNotImplemented.TestBinaryUfuncs.test_full[empty-duck_quantity1-quantity1-add] _[0m

self = <astropy.units.tests.test_quantity_ufuncs.TestUfuncReturnsNotImplemented.TestBinaryUfuncs object at 0x7f0a6aa94d90>
ufunc = <ufunc 'add'>, quantity = <Quantity [1., 2.] m>
duck_quantity = DuckQuantity3(data=<Quantity [1., 2.] mm>)
out = DuckQuantity3(data=<Quantity [0.001, 0.002] m>)

    @pytest.mark.parametrize(
        "duck_quantity",
        [DuckQuantity3(1 * u.mm), DuckQuantity3([1, 2] * u.mm)],
    )
    @pytest.mark.parametrize("out", [None, "empty"])
    def test_full(self, ufunc, quantity, duck_quantity, out):
        out_expected = out
        if out == "empty":
            out = type(duck_quantity)(
                np.empty_like(ufunc(quantity, duck_quantity.data))
            )
            out_expected = np.empty_like(ufunc(quantity, duck_quantity.data))
    
>       result = ufunc(quantity, duck_quantity, out=out)

[1m[31mastropy/units/tests/test_quantity_ufuncs.py[0m:1409: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mastropy/units/quantity.py[0m:652: in __array_ufunc__
    out_array = check_output(out, unit, inputs, function=function)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

output = DuckQuantity3(data=<Quantity [0.001, 0.002] m>), unit = Unit("m")
inputs = (<Quantity [1., 2.] m>, DuckQuantity3(data=<Quantity [1., 2.] mm>))
function = <ufunc 'add'>

    def check_output(output, unit, inputs, function=None):
        """Check that function output can be stored in the output array given.
    
        Parameters
        ----------
        output : array or `~astropy.units.Quantity` or tuple
            Array that should hold the function output (or tuple of such arrays).
        unit : `~astropy.units.Unit` or None, or tuple
            Unit that the output will have, or `None` for pure numbers (should be
            tuple of same if output is a tuple of outputs).
        inputs : tuple
            Any input arguments.  These should be castable to the output.
        function : callable
            The function that will be producing the output.  If given, used to
            give a more informative error message.
    
        Returns
        -------
        arrays : ndarray view or tuple thereof
            The view(s) is of ``output``.
    
        Raises
        ------
        UnitTypeError : If ``unit`` is inconsistent with the class of ``output``
    
        TypeError : If the ``inputs`` cannot be cast safely to ``output``.
        """
        if isinstance(output, tuple):
            return tuple(
                check_output(output_, unit_, inputs, function)
                for output_, unit_ in zip(output, unit)
            )
    
        # ``None`` indicates no actual array is needed.  This can happen, e.g.,
        # with np.modf(a, out=(None, b)).
        if output is None:
            return None
    
        if hasattr(output, "__quantity_subclass__"):
            # Check that we're not trying to store a plain Numpy array or a
            # Quantity with an inconsistent unit (e.g., not angular for Angle).
            if unit is None:
                raise TypeError(
                    "Cannot store non-quantity output{} in {} instance".format(
                        (
                            f" from {function.__name__} function"
                            if function is not None
                            else ""
                        ),
                        type(output),
                    )
                )
    
            q_cls, subok = output.__quantity_subclass__(unit)
            if not (subok or q_cls is type(output)):
                raise UnitTypeError(
                    "Cannot store output with unit '{}'{} "
                    "in {} instance.  Use {} instance instead.".format(
                        unit,
                        (
                            f" from {function.__name__} function"
                            if function is not None
                            else ""
                        ),
                        type(output),
                        q_cls,
                    )
                )
    
            # check we can handle the dtype (e.g., that we are not int
            # when float is required).  Note that we only do this for Quantity
            # output; for array output, we defer to numpy's default handling.
            # Also, any structured dtype are ignored (likely erfa ufuncs).
            # TODO: make more logical; is this necessary at all?
            if inputs and not output.dtype.names:
                result_type = np.result_type(*inputs)
                if not (
                    result_type.names
                    or np.can_cast(result_type, output.dtype, casting="same_kind")
                ):
                    raise TypeError(
                        "Arguments cannot be cast safely to inplace "
                        f"output with dtype={output.dtype}"
                    )
            # Turn into ndarray, so we do not loop into array_wrap/array_ufunc
            # if the output is used to store results of a function.
            return output.view(np.ndarray)
    
        else:
            # output is not a Quantity, so cannot obtain a unit.
            if not (unit is None or unit is dimensionless_unscaled):
>               raise UnitTypeError(
                    "Cannot store quantity with dimension "
                    "{}in a non-Quantity instance.".format(
                        f"resulting from {function.__name__} function "
                        if function is not None
                        else ""
                    )
                )
[1m[31mE               astropy.units.core.UnitTypeError: Cannot store quantity with dimension resulting from add function in a non-Quantity instance.[0m

[1m[31mastropy/units/quantity_helper/converters.py[0m:387: UnitTypeError
[31m[1m_ TestUfuncReturnsNotImplemented.TestBinaryUfuncs.test_full[empty-duck_quantity1-quantity1-multiply] _[0m

self = <astropy.units.tests.test_quantity_ufuncs.TestUfuncReturnsNotImplemented.TestBinaryUfuncs object at 0x7f0a6aa94760>
ufunc = <ufunc 'multiply'>, quantity = <Quantity [1., 2.] m>
duck_quantity = DuckQuantity3(data=<Quantity [1., 2.] mm>)
out = DuckQuantity3(data=<Quantity [1., 2.] m mm>)

    @pytest.mark.parametrize(
        "duck_quantity",
        [DuckQuantity3(1 * u.mm), DuckQuantity3([1, 2] * u.mm)],
    )
    @pytest.mark.parametrize("out", [None, "empty"])
    def test_full(self, ufunc, quantity, duck_quantity, out):
        out_expected = out
        if out == "empty":
            out = type(duck_quantity)(
                np.empty_like(ufunc(quantity, duck_quantity.data))
            )
            out_expected = np.empty_like(ufunc(quantity, duck_quantity.data))
    
>       result = ufunc(quantity, duck_quantity, out=out)

[1m[31mastropy/units/tests/test_quantity_ufuncs.py[0m:1409: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mastropy/units/quantity.py[0m:652: in __array_ufunc__
    out_array = check_output(out, unit, inputs, function=function)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

output = DuckQuantity3(data=<Quantity [1., 2.] m mm>), unit = Unit("m mm")
inputs = (<Quantity [1., 2.] m>, DuckQuantity3(data=<Quantity [1., 2.] mm>))
function = <ufunc 'multiply'>

    def check_output(output, unit, inputs, function=None):
        """Check that function output can be stored in the output array given.
    
        Parameters
        ----------
        output : array or `~astropy.units.Quantity` or tuple
            Array that should hold the function output (or tuple of such arrays).
        unit : `~astropy.units.Unit` or None, or tuple
            Unit that the output will have, or `None` for pure numbers (should be
            tuple of same if output is a tuple of outputs).
        inputs : tuple
            Any input arguments.  These should be castable to the output.
        function : callable
            The function that will be producing the output.  If given, used to
            give a more informative error message.
    
        Returns
        -------
        arrays : ndarray view or tuple thereof
            The view(s) is of ``output``.
    
        Raises
        ------
        UnitTypeError : If ``unit`` is inconsistent with the class of ``output``
    
        TypeError : If the ``inputs`` cannot be cast safely to ``output``.
        """
        if isinstance(output, tuple):
            return tuple(
                check_output(output_, unit_, inputs, function)
                for output_, unit_ in zip(output, unit)
            )
    
        # ``None`` indicates no actual array is needed.  This can happen, e.g.,
        # with np.modf(a, out=(None, b)).
        if output is None:
            return None
    
        if hasattr(output, "__quantity_subclass__"):
            # Check that we're not trying to store a plain Numpy array or a
            # Quantity with an inconsistent unit (e.g., not angular for Angle).
            if unit is None:
                raise TypeError(
                    "Cannot store non-quantity output{} in {} instance".format(
                        (
                            f" from {function.__name__} function"
                            if function is not None
                            else ""
                        ),
                        type(output),
                    )
                )
    
            q_cls, subok = output.__quantity_subclass__(unit)
            if not (subok or q_cls is type(output)):
                raise UnitTypeError(
                    "Cannot store output with unit '{}'{} "
                    "in {} instance.  Use {} instance instead.".format(
                        unit,
                        (
                            f" from {function.__name__} function"
                            if function is not None
                            else ""
                        ),
                        type(output),
                        q_cls,
                    )
                )
    
            # check we can handle the dtype (e.g., that we are not int
            # when float is required).  Note that we only do this for Quantity
            # output; for array output, we defer to numpy's default handling.
            # Also, any structured dtype are ignored (likely erfa ufuncs).
            # TODO: make more logical; is this necessary at all?
            if inputs and not output.dtype.names:
                result_type = np.result_type(*inputs)
                if not (
                    result_type.names
                    or np.can_cast(result_type, output.dtype, casting="same_kind")
                ):
                    raise TypeError(
                        "Arguments cannot be cast safely to inplace "
                        f"output with dtype={output.dtype}"
                    )
            # Turn into ndarray, so we do not loop into array_wrap/array_ufunc
            # if the output is used to store results of a function.
            return output.view(np.ndarray)
    
        else:
            # output is not a Quantity, so cannot obtain a unit.
            if not (unit is None or unit is dimensionless_unscaled):
>               raise UnitTypeError(
                    "Cannot store quantity with dimension "
                    "{}in a non-Quantity instance.".format(
                        f"resulting from {function.__name__} function "
                        if function is not None
                        else ""
                    )
                )
[1m[31mE               astropy.units.core.UnitTypeError: Cannot store quantity with dimension resulting from multiply function in a non-Quantity instance.[0m

[1m[31mastropy/units/quantity_helper/converters.py[0m:387: UnitTypeError
==================================== PASSES ====================================
[36m[1m=========================== short test summary info ============================[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantityCreation::test_1[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantityCreation::test_2[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantityCreation::test_3[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantityCreation::test_nan_inf[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantityCreation::test_unit_property[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantityCreation::test_preserve_dtype[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantityCreation::test_numpy_style_dtype_inspect[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantityCreation::test_float_dtype_promotion[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantityCreation::test_copy[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantityCreation::test_subok[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantityCreation::test_order[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantityCreation::test_ndmin[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantityCreation::test_non_quantity_with_unit[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantityCreation::test_creation_via_view[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantityCreation::test_rshift_warns[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantityOperations::test_addition[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantityOperations::test_subtraction[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantityOperations::test_multiplication[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantityOperations::test_division[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantityOperations::test_commutativity[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantityOperations::test_power[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantityOperations::test_matrix_multiplication[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantityOperations::test_unary[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantityOperations::test_abs[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantityOperations::test_incompatible_units[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantityOperations::test_non_number_type[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantityOperations::test_dimensionless_operations[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantityOperations::test_complicated_operation[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantityOperations::test_comparison[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantityOperations::test_numeric_converters[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantityOperations::test_array_converters[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mtest_quantity_conversion[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mtest_quantity_ilshift[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mtest_regression_12964[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mtest_quantity_value_views[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mtest_quantity_conversion_with_equiv[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mtest_quantity_conversion_equivalency_passed_on[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mtest_self_equivalency[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mtest_si[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mtest_cgs[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantityComparison::test_quantity_equality[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantityComparison::test_quantity_equality_array[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantityComparison::test_quantity_comparison[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantityDisplay::test_dimensionless_quantity_repr[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantityDisplay::test_dimensionless_quantity_str[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantityDisplay::test_dimensionless_quantity_format[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantityDisplay::test_scalar_quantity_str[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantityDisplay::test_scalar_quantity_repr[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantityDisplay::test_array_quantity_str[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantityDisplay::test_array_quantity_repr[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantityDisplay::test_scalar_quantity_format[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantityDisplay::test_uninitialized_unit_format[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantityDisplay::test_to_string[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantityDisplay::test_repr_latex[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mtest_decompose[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mtest_decompose_regression[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mtest_arrays[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mtest_array_indexing_slicing[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mtest_array_setslice[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mtest_inverse_quantity[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mtest_quantity_mutability[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mtest_quantity_initialized_with_quantity[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mtest_quantity_string_unit[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mtest_quantity_invalid_unit_string[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mtest_implicit_conversion[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mtest_implicit_conversion_autocomplete[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mtest_quantity_iterability[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mtest_copy[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mtest_deepcopy[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mtest_equality_numpy_scalar[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mtest_quantity_pickelability[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mtest_quantity_initialisation_from_string[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mtest_unsupported[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mtest_unit_identity[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mtest_quantity_to_view[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mtest_quantity_tuple_power[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mtest_quantity_fraction_power[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mtest_quantity_from_table[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mtest_assign_slice_with_quantity_like[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mtest_insert[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mtest_repr_array_of_quantity[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestSpecificTypeQuantity::test_creation[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestSpecificTypeQuantity::test_view[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestSpecificTypeQuantity::test_operation_precedence_and_fallback[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mtest_unit_class_override[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantityMimics::test_mimic_input[QuantityMimic][0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantityMimics::test_mimic_input[QuantityMimic2][0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantityMimics::test_mimic_setting[QuantityMimic][0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantityMimics::test_mimic_setting[QuantityMimic2][0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantityMimics::test_mimic_function_unit[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mtest_masked_quantity_str_repr[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantitySubclassAboveAndBelow::test_setup[0m
[32mPASSED[0m astropy/units/tests/test_quantity.py::[1mTestQuantitySubclassAboveAndBelow::test_attr_propagation[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncHelpers::test_coverage[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncHelpers::test_scipy_registered[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncHelpers::test_removal_addition[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityTrigonometricFuncs::test_testcases[tc0][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityTrigonometricFuncs::test_testcases[tc1][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityTrigonometricFuncs::test_testcases[tc2][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityTrigonometricFuncs::test_testcases[tc3][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityTrigonometricFuncs::test_testcases[tc4][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityTrigonometricFuncs::test_testcases[tc5][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityTrigonometricFuncs::test_testcases[tc6][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityTrigonometricFuncs::test_testcases[tc7][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityTrigonometricFuncs::test_testcases[tc8][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityTrigonometricFuncs::test_testcases[tc9][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityTrigonometricFuncs::test_testcases[tc10][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityTrigonometricFuncs::test_testcases[tc11][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityTrigonometricFuncs::test_testcases[tc12][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityTrigonometricFuncs::test_testcases[tc13][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityTrigonometricFuncs::test_testcases[tc14][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityTrigonometricFuncs::test_testcases[tc15][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityTrigonometricFuncs::test_testcases[tc16][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityTrigonometricFuncs::test_testcases[tc17][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityTrigonometricFuncs::test_testcases[tc18][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityTrigonometricFuncs::test_testcases[tc19][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityTrigonometricFuncs::test_testcases[tc20][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityTrigonometricFuncs::test_testcases[tc21][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityTrigonometricFuncs::test_testexcs[te0][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityTrigonometricFuncs::test_testexcs[te1][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityTrigonometricFuncs::test_testexcs[te2][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityTrigonometricFuncs::test_testexcs[te3][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityTrigonometricFuncs::test_testexcs[te4][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityTrigonometricFuncs::test_testexcs[te5][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityTrigonometricFuncs::test_testexcs[te6][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityTrigonometricFuncs::test_testexcs[te7][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityTrigonometricFuncs::test_testexcs[te8][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityTrigonometricFuncs::test_testexcs[te9][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityTrigonometricFuncs::test_testexcs[te10][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityTrigonometricFuncs::test_testexcs[te11][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityTrigonometricFuncs::test_testwarns[tw0][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_multiply_scalar[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_multiply_array[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_matmul[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_divide_scalar[divide0][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_divide_scalar[divide1][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_divide_array[divide0][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_divide_array[divide1][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_floor_divide_remainder_and_divmod[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_sqrt_scalar[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_sqrt_array[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_square_scalar[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_square_array[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_reciprocal_scalar[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_reciprocal_array[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_heaviside_scalar[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_heaviside_array[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_cbrt_scalar[cbrt][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_cbrt_array[cbrt][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_power_scalar[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_power_array[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_float_power_array[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_power_array_array[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_power_array_array2[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_power_array_array3[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_power_invalid[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_copysign_scalar[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_copysign_array[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_ldexp_scalar[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_ldexp_array[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_ldexp_invalid[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_exp_scalar[exp][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_exp_scalar[expm1][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_exp_scalar[exp2][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_exp_scalar[log][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_exp_scalar[log2][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_exp_scalar[log10][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_exp_scalar[log1p][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_exp_array[exp][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_exp_array[expm1][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_exp_array[exp2][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_exp_array[log][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_exp_array[log2][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_exp_array[log10][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_exp_array[log1p][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_exp_invalid_units[exp][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_exp_invalid_units[expm1][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_exp_invalid_units[exp2][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_exp_invalid_units[log][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_exp_invalid_units[log2][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_exp_invalid_units[log10][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_exp_invalid_units[log1p][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_modf_scalar[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_modf_array[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_frexp_scalar[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_frexp_array[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_frexp_invalid_units[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_dimensionless_twoarg_array[logaddexp][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_dimensionless_twoarg_array[logaddexp2][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_dimensionless_twoarg_invalid_units[logaddexp][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestQuantityMathFuncs::test_dimensionless_twoarg_invalid_units[logaddexp2][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_scalar[absolute][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_scalar[fabs][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_scalar[conjugate0][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_scalar[conjugate1][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_scalar[negative][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_scalar[spacing][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_scalar[rint][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_scalar[floor][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_scalar[ceil][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_scalar[positive][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_array[absolute][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_array[conjugate][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_array[negative][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_array[rint][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_array[floor][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_array[ceil][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_twoarg_scalar[add][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_twoarg_scalar[subtract][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_twoarg_scalar[hypot][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_twoarg_scalar[maximum][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_twoarg_scalar[minimum][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_twoarg_scalar[nextafter][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_twoarg_scalar[remainder0][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_twoarg_scalar[remainder1][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_twoarg_scalar[fmod][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_twoarg_array[add][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_twoarg_array[subtract][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_twoarg_array[hypot][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_twoarg_array[maximum][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_twoarg_array[minimum][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_twoarg_array[nextafter][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_twoarg_array[remainder0][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_twoarg_array[remainder1][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_twoarg_array[fmod][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_twoarg_one_arbitrary[add-0.0][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_twoarg_one_arbitrary[subtract-0.0][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_twoarg_one_arbitrary[hypot-0.0][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_twoarg_one_arbitrary[maximum-0.0][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_twoarg_one_arbitrary[minimum-0.0][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_twoarg_one_arbitrary[nextafter-0.0][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_twoarg_one_arbitrary[remainder-inf0][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_twoarg_one_arbitrary[remainder-inf1][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_twoarg_one_arbitrary[fmod-inf][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_twoarg_invalid_units[add][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_twoarg_invalid_units[subtract][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_twoarg_invalid_units[hypot][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_twoarg_invalid_units[maximum][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_twoarg_invalid_units[minimum][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_twoarg_invalid_units[nextafter][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_twoarg_invalid_units[remainder0][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_twoarg_invalid_units[remainder1][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInvariantUfuncs::test_invariant_twoarg_invalid_units[fmod][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestComparisonUfuncs::test_comparison_valid_units[greater][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestComparisonUfuncs::test_comparison_valid_units[greater_equal][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestComparisonUfuncs::test_comparison_valid_units[less][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestComparisonUfuncs::test_comparison_valid_units[less_equal][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestComparisonUfuncs::test_comparison_valid_units[not_equal][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestComparisonUfuncs::test_comparison_valid_units[equal][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestComparisonUfuncs::test_comparison_invalid_units[greater][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestComparisonUfuncs::test_comparison_invalid_units[greater_equal][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestComparisonUfuncs::test_comparison_invalid_units[less][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestComparisonUfuncs::test_comparison_invalid_units[less_equal][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestComparisonUfuncs::test_comparison_invalid_units[not_equal][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestComparisonUfuncs::test_comparison_invalid_units[equal][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestComparisonUfuncs::test_onearg_test_ufuncs[isfinite][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestComparisonUfuncs::test_onearg_test_ufuncs[isinf][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestComparisonUfuncs::test_onearg_test_ufuncs[isnan][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestComparisonUfuncs::test_onearg_test_ufuncs[signbit][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestComparisonUfuncs::test_sign[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInplaceUfuncs::test_one_argument_ufunc_inplace[1.0][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInplaceUfuncs::test_one_argument_ufunc_inplace[value1][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInplaceUfuncs::test_one_argument_ufunc_inplace_2[1.0][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInplaceUfuncs::test_one_argument_ufunc_inplace_2[value1][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInplaceUfuncs::test_one_argument_two_output_ufunc_inplace[1.0][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInplaceUfuncs::test_one_argument_two_output_ufunc_inplace[value1][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInplaceUfuncs::test_two_argument_ufunc_inplace_1[1.0][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInplaceUfuncs::test_two_argument_ufunc_inplace_1[value1][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInplaceUfuncs::test_two_argument_ufunc_inplace_2[1.0][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInplaceUfuncs::test_two_argument_ufunc_inplace_2[value1][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInplaceUfuncs::test_two_argument_ufunc_inplace_3[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInplaceUfuncs::test_two_argument_two_output_ufunc_inplace[1.0][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInplaceUfuncs::test_two_argument_two_output_ufunc_inplace[value1][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInplaceUfuncs::test_ufunc_inplace_non_contiguous_data[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInplaceUfuncs::test_ufunc_inplace_non_standard_dtype[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInplaceUfuncs::test_comparison_ufuncs_inplace[equal][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInplaceUfuncs::test_comparison_ufuncs_inplace[greater][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInplaceUfuncs::test_onearg_test_ufuncs_inplace[isfinite][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInplaceUfuncs::test_onearg_test_ufuncs_inplace[signbit][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInplaceUfuncs::test_sign_inplace[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestInplaceUfuncs::test_ndarray_inplace_op_with_quantity[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestClip::test_clip_simple[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestClip::test_clip_unitless_parts[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestClip::test_clip_dimensionless[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestClip::test_clip_ndarray[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestClip::test_clip_quantity_inplace[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestClip::test_clip_ndarray_dimensionless_output[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestClip::test_clip_errors[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncAt::test_one_argument_ufunc_at[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncAt::test_two_argument_ufunc_at[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncReduceReduceatAccumulate::test_one_argument_ufunc_reduce_accumulate[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncReduceReduceatAccumulate::test_two_argument_ufunc_reduce_accumulate[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncOuter::test_one_argument_ufunc_outer[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncOuter::test_two_argument_ufunc_outer[0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncReturnsNotImplemented::TestUnaryUfuncs::test_basic[duck_quantity0-negative][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncReturnsNotImplemented::TestUnaryUfuncs::test_basic[duck_quantity0-absolute][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncReturnsNotImplemented::TestUnaryUfuncs::test_basic[duck_quantity1-negative][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncReturnsNotImplemented::TestUnaryUfuncs::test_basic[duck_quantity1-absolute][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncReturnsNotImplemented::TestUnaryUfuncs::test_full[None-duck_quantity0-negative][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncReturnsNotImplemented::TestUnaryUfuncs::test_full[None-duck_quantity0-absolute][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncReturnsNotImplemented::TestUnaryUfuncs::test_full[None-duck_quantity1-negative][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncReturnsNotImplemented::TestUnaryUfuncs::test_full[None-duck_quantity1-absolute][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncReturnsNotImplemented::TestUnaryUfuncs::test_full[empty-duck_quantity0-negative][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncReturnsNotImplemented::TestUnaryUfuncs::test_full[empty-duck_quantity0-absolute][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncReturnsNotImplemented::TestUnaryUfuncs::test_full[empty-duck_quantity1-negative][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncReturnsNotImplemented::TestUnaryUfuncs::test_full[empty-duck_quantity1-absolute][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncReturnsNotImplemented::TestBinaryUfuncs::test_basic[duck_quantity0-quantity0-add][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncReturnsNotImplemented::TestBinaryUfuncs::test_basic[duck_quantity0-quantity0-multiply][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncReturnsNotImplemented::TestBinaryUfuncs::test_basic[duck_quantity0-quantity0-less][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncReturnsNotImplemented::TestBinaryUfuncs::test_basic[duck_quantity0-quantity1-add][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncReturnsNotImplemented::TestBinaryUfuncs::test_basic[duck_quantity0-quantity1-multiply][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncReturnsNotImplemented::TestBinaryUfuncs::test_basic[duck_quantity0-quantity1-less][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncReturnsNotImplemented::TestBinaryUfuncs::test_basic[duck_quantity1-quantity0-multiply][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncReturnsNotImplemented::TestBinaryUfuncs::test_basic[duck_quantity1-quantity1-multiply][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncReturnsNotImplemented::TestBinaryUfuncs::test_full[None-duck_quantity0-quantity0-add][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncReturnsNotImplemented::TestBinaryUfuncs::test_full[None-duck_quantity0-quantity0-multiply][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncReturnsNotImplemented::TestBinaryUfuncs::test_full[None-duck_quantity0-quantity0-less][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncReturnsNotImplemented::TestBinaryUfuncs::test_full[None-duck_quantity0-quantity1-add][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncReturnsNotImplemented::TestBinaryUfuncs::test_full[None-duck_quantity0-quantity1-multiply][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncReturnsNotImplemented::TestBinaryUfuncs::test_full[None-duck_quantity0-quantity1-less][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncReturnsNotImplemented::TestBinaryUfuncs::test_full[None-duck_quantity1-quantity0-add][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncReturnsNotImplemented::TestBinaryUfuncs::test_full[None-duck_quantity1-quantity0-multiply][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncReturnsNotImplemented::TestBinaryUfuncs::test_full[None-duck_quantity1-quantity0-less][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncReturnsNotImplemented::TestBinaryUfuncs::test_full[None-duck_quantity1-quantity1-add][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncReturnsNotImplemented::TestBinaryUfuncs::test_full[None-duck_quantity1-quantity1-multiply][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncReturnsNotImplemented::TestBinaryUfuncs::test_full[None-duck_quantity1-quantity1-less][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncReturnsNotImplemented::TestBinaryUfuncs::test_full[empty-duck_quantity0-quantity0-less][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncReturnsNotImplemented::TestBinaryUfuncs::test_full[empty-duck_quantity0-quantity1-less][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncReturnsNotImplemented::TestBinaryUfuncs::test_full[empty-duck_quantity1-quantity0-less][0m
[32mPASSED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncReturnsNotImplemented::TestBinaryUfuncs::test_full[empty-duck_quantity1-quantity1-less][0m
[33mSKIPPED[0m [1] astropy/units/tests/test_quantity_ufuncs.py:25: unconditional skip
[33mSKIPPED[0m [1] astropy/units/tests/test_quantity_ufuncs.py:36: unconditional skip
[33mSKIPPED[0m [1] astropy/units/tests/test_quantity_ufuncs.py:44: unconditional skip
[33mSKIPPED[0m [1] astropy/units/tests/test_quantity_ufuncs.py:92: need --run-slow option to run
[33mXFAIL[0m astropy/units/tests/test_quantity.py::[1mTestQuantityOperations::test_numeric_converter_to_index_in_practice[0m - list multiplication only works for numpy <=1.10
[31mFAILED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncReturnsNotImplemented::TestBinaryUfuncs::test_basic[duck_quantity1-quantity0-add][0m - AssertionError: Regex pattern did not match.
[31mFAILED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncReturnsNotImplemented::TestBinaryUfuncs::test_basic[duck_quantity1-quantity0-less][0m - AssertionError: Regex pattern did not match.
[31mFAILED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncReturnsNotImplemented::TestBinaryUfuncs::test_basic[duck_quantity1-quantity1-add][0m - AssertionError: Regex pattern did not match.
[31mFAILED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncReturnsNotImplemented::TestBinaryUfuncs::test_basic[duck_quantity1-quantity1-less][0m - AssertionError: Regex pattern did not match.
[31mFAILED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncReturnsNotImplemented::TestBinaryUfuncs::test_full[empty-duck_quantity0-quantity0-add][0m - astropy.units.core.UnitTypeError: Cannot store quantity with dimension resu...
[31mFAILED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncReturnsNotImplemented::TestBinaryUfuncs::test_full[empty-duck_quantity0-quantity0-multiply][0m - astropy.units.core.UnitTypeError: Cannot store quantity with dimension resu...
[31mFAILED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncReturnsNotImplemented::TestBinaryUfuncs::test_full[empty-duck_quantity0-quantity1-add][0m - astropy.units.core.UnitTypeError: Cannot store quantity with dimension resu...
[31mFAILED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncReturnsNotImplemented::TestBinaryUfuncs::test_full[empty-duck_quantity0-quantity1-multiply][0m - astropy.units.core.UnitTypeError: Cannot store quantity with dimension resu...
[31mFAILED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncReturnsNotImplemented::TestBinaryUfuncs::test_full[empty-duck_quantity1-quantity0-add][0m - astropy.units.core.UnitTypeError: Cannot store quantity with dimension resu...
[31mFAILED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncReturnsNotImplemented::TestBinaryUfuncs::test_full[empty-duck_quantity1-quantity0-multiply][0m - astropy.units.core.UnitTypeError: Cannot store quantity with dimension resu...
[31mFAILED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncReturnsNotImplemented::TestBinaryUfuncs::test_full[empty-duck_quantity1-quantity1-add][0m - astropy.units.core.UnitTypeError: Cannot store quantity with dimension resu...
[31mFAILED[0m astropy/units/tests/test_quantity_ufuncs.py::[1mTestUfuncReturnsNotImplemented::TestBinaryUfuncs::test_full[empty-duck_quantity1-quantity1-multiply][0m - astropy.units.core.UnitTypeError: Cannot store quantity with dimension resu...
[31m============= [31m[1m12 failed[0m, [32m330 passed[0m, [33m4 skipped[0m, [33m1 xfailed[0m[31m in 3.59s[0m[31m =============[0m
+ git checkout 5250b2442501e6c671c6b380536f1edb352602d1 astropy/units/tests/test_quantity.py astropy/units/tests/test_quantity_ufuncs.py
Updated 2 paths from 58bc2b3c33
