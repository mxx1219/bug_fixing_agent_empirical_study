diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py
index 27b5cbd379..f8815ab974 100644
--- a/django/db/migrations/serializer.py
+++ b/django/db/migrations/serializer.py
@@ -79,13 +79,23 @@ class DeconstructableSerializer(BaseSerializer):
         name, imports = DeconstructableSerializer._serialize_path(path)
         strings = []
         for arg in args:
-            arg_string, arg_imports = serializer_factory(arg).serialize()
-            strings.append(arg_string)
-            imports.update(arg_imports)
+            # Special case: If this is an enum with a string value, use its name
+            if isinstance(arg, enum.Enum) and isinstance(arg.value, str):
+                strings.append("'%s'" % arg.name)
+                imports.add("import %s" % arg.__class__.__module__)
+            else:
+                arg_string, arg_imports = serializer_factory(arg).serialize()
+                strings.append(arg_string)
+                imports.update(arg_imports)
         for kw, arg in sorted(kwargs.items()):
-            arg_string, arg_imports = serializer_factory(arg).serialize()
-            imports.update(arg_imports)
-            strings.append("%s=%s" % (kw, arg_string))
+            # Special case: If this is an enum with a string value, use its name
+            if isinstance(arg, enum.Enum) and isinstance(arg.value, str):
+                strings.append("%s='%s'" % (kw, arg.name))
+                imports.add("import %s" % arg.__class__.__module__)
+            else:
+                arg_string, arg_imports = serializer_factory(arg).serialize()
+                imports.update(arg_imports)
+                strings.append("%s=%s" % (kw, arg_string))
         return "%s(%s)" % (name, ", ".join(strings)), imports
 
     @staticmethod
@@ -120,6 +130,11 @@ class EnumSerializer(BaseSerializer):
     def serialize(self):
         enum_class = self.value.__class__
         module = enum_class.__module__
+        # For string values, use the name to avoid translation issues
+        if isinstance(self.value.value, str):
+            # Use the name of the enum member to avoid translation issues
+            return "%s.%s['%s']" % (module, enum_class.__name__, self.value.name), {'import %s' % module}
+        # For non-string values, use the value directly since they don't have translation issues
         v_string, v_imports = serializer_factory(self.value.value).serialize()
         imports = {'import %s' % module, *v_imports}
         return "%s.%s(%s)" % (module, enum_class.__name__, v_string), imports
@@ -285,6 +300,7 @@ class Serializer:
         tuple: TupleSerializer,
         dict: DictionarySerializer,
         models.Choices: ChoicesSerializer,
+        # Put EnumSerializer first to take precedence over DeconstructableSerializer
         enum.Enum: EnumSerializer,
         datetime.datetime: DatetimeDatetimeSerializer,
         (datetime.date, datetime.timedelta, datetime.time): DateTimeSerializer,
@@ -326,6 +342,9 @@ def serializer_factory(value):
         return OperationSerializer(value)
     if isinstance(value, type):
         return TypeSerializer(value)
+    # Special case: If this is an enum with a string value, use EnumSerializer
+    if isinstance(value, enum.Enum):
+        return EnumSerializer(value)
     # Anything that knows how to deconstruct itself.
     if hasattr(value, 'deconstruct'):
         return DeconstructableSerializer(value)
diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index d610dc86f0..1c5e3953e8 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -2,6 +2,7 @@ import collections.abc
 import copy
 import datetime
 import decimal
+import enum
 import operator
 import uuid
 import warnings
@@ -143,7 +144,13 @@ class Field(RegisterLookupMixin):
         self.blank, self.null = blank, null
         self.remote_field = rel
         self.is_relation = self.remote_field is not None
-        self.default = default
+        # Special case: If default is an enum with a string value, use its name
+        if default is not NOT_PROVIDED and isinstance(default, enum.Enum) and isinstance(default.value, str):
+            self._enum_default = default
+            self.default = getattr(default.__class__, default.name)
+        else:
+            self._enum_default = None
+            self.default = default
         self.editable = editable
         self.serialize = serialize
         self.unique_for_date = unique_for_date
@@ -432,6 +439,7 @@ class Field(RegisterLookupMixin):
          * top-level classes, top-level functions - will be referenced by their
            full import path
          * Storage instances - these have their own deconstruct() method
+         * Enum members - will be referenced by their name to avoid translation issues
 
         This is because the values here must be serialized into a text format
         (possibly new Python code, possibly JSON) and these are the only types
@@ -442,6 +450,9 @@ class Field(RegisterLookupMixin):
         arguments over positional ones, and omit parameters with their default
         values.
         """
+        # Special case: If default is an enum with a string value, use its name
+        if self.default is not NOT_PROVIDED and isinstance(self.default, enum.Enum) and isinstance(self.default.value, str):
+            self.default = self.default.__class__[self.default.name]
         # Short-form way of fetching all the default parameters
         keywords = {}
         possibles = {
@@ -814,6 +825,8 @@ class Field(RegisterLookupMixin):
 
     def get_default(self):
         """Return the default value for this field."""
+        if self._enum_default is not None:
+            return self._enum_default
         return self._get_default()
 
     @cached_property
