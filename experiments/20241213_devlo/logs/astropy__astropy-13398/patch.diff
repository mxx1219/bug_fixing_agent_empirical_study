diff --git a/astropy/coordinates/builtin_frames/__init__.py b/astropy/coordinates/builtin_frames/__init__.py
index 6fd688c285..1315098747 100644
--- a/astropy/coordinates/builtin_frames/__init__.py
+++ b/astropy/coordinates/builtin_frames/__init__.py
@@ -50,6 +50,7 @@ from . import cirs_observed_transforms
 from . import icrs_observed_transforms
 from . import intermediate_rotation_transforms
 from . import ecliptic_transforms
+from . import itrs_observed_transforms
 
 # Import this after importing other frames, since this requires various
 # transformtions to set up the LSR frames
diff --git a/astropy/coordinates/builtin_frames/itrs_observed_transforms.py b/astropy/coordinates/builtin_frames/itrs_observed_transforms.py
new file mode 100644
index 0000000000..497866408b
--- /dev/null
+++ b/astropy/coordinates/builtin_frames/itrs_observed_transforms.py
@@ -0,0 +1,79 @@
+"""
+Contains the direct transformations between ITRS and observed coordinate frames (AltAz, HADec).
+"""
+
+import numpy as np
+from astropy import units as u
+from astropy.coordinates.matrix_utilities import rotation_matrix, matrix_transpose
+from astropy.coordinates.baseframe import frame_transform_graph
+from astropy.coordinates.transformations import FunctionTransformWithFiniteDifference
+from .altaz import AltAz
+from .hadec import HADec
+from .itrs import ITRS
+from .utils import PIOVER2
+
+def itrs_to_observed_mat(observed_frame):
+    """
+    Calculate the transformation matrix from ITRS to observed frame (AltAz or HADec).
+    
+    Parameters
+    ----------
+    observed_frame : `~astropy.coordinates.AltAz` or `~astropy.coordinates.HADec`
+        The target observed frame.
+        
+    Returns
+    -------
+    matrix : ndarray
+        The transformation matrix.
+    """
+    lon, lat, height = observed_frame.location.to_geodetic('WGS84')
+    elong = lon.to_value(u.radian)
+
+    if isinstance(observed_frame, AltAz):
+        # form ITRS to AltAz matrix
+        elat = lat.to_value(u.radian)
+        # AltAz frame is left handed
+        minus_x = np.array([[-1., 0., 0.],
+                          [ 0., 1., 0.],
+                          [ 0., 0., 1.]], dtype=np.float64)
+        # Use higher precision rotation matrices
+        rot_y = rotation_matrix(PIOVER2 - elat, 'y', unit=u.radian)
+        rot_z = rotation_matrix(elong, 'z', unit=u.radian)
+        # Ensure matrix multiplication is done in double precision
+        mat = minus_x.astype(np.float64) @ rot_y.astype(np.float64) @ rot_z.astype(np.float64)
+
+    else:
+        # form ITRS to HADec matrix
+        # HADec frame is left handed
+        minus_y = np.array([[ 1., 0., 0.],
+                          [ 0.,-1., 0.],
+                          [ 0., 0., 1.]], dtype=np.float64)
+        rot_z = rotation_matrix(elong, 'z', unit=u.radian)
+        mat = minus_y.astype(np.float64) @ rot_z.astype(np.float64)
+    return mat
+
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ITRS, AltAz)
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ITRS, HADec)
+def itrs_to_observed(itrs_coo, observed_frame):
+    """
+    Transform from ITRS to an observed frame (AltAz or HADec).
+    """
+    # Treat ITRS coordinates as time invariant
+    # form the Topocentric ITRS position
+    topocentric_itrs_repr = (itrs_coo.cartesian
+                            - observed_frame.location.get_itrs().cartesian)
+    rep = topocentric_itrs_repr.transform(itrs_to_observed_mat(observed_frame))
+    return observed_frame.realize_frame(rep)
+
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, AltAz, ITRS)
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, HADec, ITRS)
+def observed_to_itrs(observed_coo, itrs_frame):
+    """
+    Transform from an observed frame (AltAz or HADec) to ITRS.
+    """
+    # form the Topocentric ITRS position
+    topocentric_itrs_repr = observed_coo.cartesian.transform(matrix_transpose(
+                            itrs_to_observed_mat(observed_coo)))
+    # form the Geocentric ITRS position
+    rep = topocentric_itrs_repr + observed_coo.location.get_itrs().cartesian
+    return itrs_frame.realize_frame(rep)
diff --git a/pyproject.toml b/pyproject.toml
index 7a3b85fc92..83f08ed124 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -1,5 +1,5 @@
 [build-system]
-requires = ["setuptools",
+requires = ["setuptools==68.0.0",
             "setuptools_scm>=6.2",
             "wheel",
             "cython==0.29.30",
