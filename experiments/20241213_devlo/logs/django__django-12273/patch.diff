diff --git a/django/db/models/base.py b/django/db/models/base.py
index 844c01e95e..b44b38605c 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -804,9 +804,17 @@ class Model(metaclass=ModelBase):
         inserted = False
         for parent, field in meta.parents.items():
             # Make sure the link fields are synced between parent and self.
-            if (field and getattr(self, parent._meta.pk.attname) is None and
-                    getattr(self, field.attname) is not None):
-                setattr(self, parent._meta.pk.attname, getattr(self, field.attname))
+            if field:
+                parent_pk = getattr(self, parent._meta.pk.attname)
+                field_val = getattr(self, field.attname)
+                
+                # If the parent PK is None but field value exists, sync them
+                if parent_pk is None and field_val is not None:
+                    setattr(self, parent._meta.pk.attname, field_val)
+                # If field value is None but parent PK exists, sync them
+                elif parent_pk is not None and field_val is None:
+                    setattr(self, field.attname, parent_pk)
+                    
             parent_inserted = self._save_parents(cls=parent, using=using, update_fields=update_fields)
             updated = self._save_table(
                 cls=parent, using=using, update_fields=update_fields,
@@ -816,14 +824,16 @@ class Model(metaclass=ModelBase):
                 inserted = True
             # Set the parent's PK value to self.
             if field:
-                setattr(self, field.attname, self._get_pk_val(parent._meta))
-                # Since we didn't have an instance of the parent handy set
-                # attname directly, bypassing the descriptor. Invalidate
-                # the related object cache, in case it's been accidentally
-                # populated. A fresh instance will be re-built from the
-                # database if necessary.
-                if field.is_cached(self):
-                    field.delete_cached_value(self)
+                parent_pk = self._get_pk_val(parent._meta)
+                if parent_pk is not None:  # Only set if parent was actually saved
+                    setattr(self, field.attname, parent_pk)
+                    # Since we didn't have an instance of the parent handy set
+                    # attname directly, bypassing the descriptor. Invalidate
+                    # the related object cache, in case it's been accidentally
+                    # populated. A fresh instance will be re-built from the
+                    # database if necessary.
+                    if field.is_cached(self):
+                        field.delete_cached_value(self)
         return inserted
 
     def _save_table(self, raw=False, cls=None, force_insert=False,
