diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py
index 8a105d4f35..f6e2f75e4c 100644
--- a/django/db/backends/sqlite3/base.py
+++ b/django/db/backends/sqlite3/base.py
@@ -259,6 +259,10 @@ class DatabaseWrapper(BaseDatabaseWrapper):
         conn.create_aggregate('VAR_POP', 1, list_aggregate(statistics.pvariance))
         conn.create_aggregate('VAR_SAMP', 1, list_aggregate(statistics.variance))
         conn.execute('PRAGMA foreign_keys = ON')
+        # Enable window functions if supported
+        if Database.sqlite_version_info >= (3, 25, 0):
+            conn.execute('PRAGMA legacy_alter_table = OFF')
+            conn.execute('PRAGMA legacy_window_function = OFF')
         return conn
 
     def init_connection_state(self):
diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 90d90119d0..ca9dd58fbc 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -1262,6 +1262,14 @@ class Window(Expression):
     contains_over_clause = True
     filterable = False
 
+    def as_sqlite(self, compiler, connection, **extra_context):
+        # For SQLite, ensure CAST is applied after the window function
+        sql, params = self.as_sql(compiler, connection, **extra_context)
+        if 'CAST(' in sql and ' AS NUMERIC)' in sql:
+            sql = sql.replace('CAST(', '').replace(' AS NUMERIC)', '')
+            sql = 'CAST(%s AS NUMERIC)' % sql
+        return sql, params
+
     def __init__(self, expression, partition_by=None, order_by=None, frame=None, output_field=None):
         self.partition_by = partition_by
         self.order_by = order_by
