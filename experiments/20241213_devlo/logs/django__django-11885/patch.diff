diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py
index ae82d26340..c455b17704 100644
--- a/django/db/models/deletion.py
+++ b/django/db/models/deletion.py
@@ -4,6 +4,7 @@ from operator import attrgetter
 
 from django.db import IntegrityError, connections, transaction
 from django.db.models import signals, sql
+from django.db.models.query_utils import Q
 
 
 class ProtectedError(IntegrityError):
@@ -172,7 +173,7 @@ class Collector:
             return [objs]
 
     def collect(self, objs, source=None, nullable=False, collect_related=True,
-                source_attr=None, reverse_dependency=False, keep_parents=False):
+                source_attr=None, reverse_dependency=False, keep_parents=False, _seen_fields=None):
         """
         Add 'objs' to the collection of objects to be deleted as well as all
         parent instances.  'objs' must be a homogeneous iterable collection of
@@ -214,6 +215,8 @@ class Collector:
         if collect_related:
             if keep_parents:
                 parents = set(model._meta.get_parent_list())
+            if _seen_fields is None:
+                _seen_fields = set()
             for related in get_candidate_relations_to_delete(model._meta):
                 # Preserve parent reverse relationships if keep_parents=True.
                 if keep_parents and related.model in parents:
@@ -221,10 +224,21 @@ class Collector:
                 field = related.field
                 if field.remote_field.on_delete == DO_NOTHING:
                     continue
+                # Skip if we've already processed this field or another field targeting the same table
+                field_key = (field.related_model, field.remote_field.on_delete)
+                if field_key in _seen_fields:
+                    continue
+                _seen_fields.add(field_key)
                 batches = self.get_del_batches(new_objs, field)
                 for batch in batches:
                     sub_objs = self.related_objects(related, batch)
                     if self.can_fast_delete(sub_objs, from_field=field):
+                        # Check if we can combine this with the previous fast delete
+                        if (self.fast_deletes and
+                            self.fast_deletes[-1].model == sub_objs.model and
+                            self.fast_deletes[-1].query.where.children == sub_objs.query.where.children):
+                            # Skip this query since it's identical to the previous one
+                            continue
                         self.fast_deletes.append(sub_objs)
                     else:
                         related_model = related.related_model
@@ -253,9 +267,15 @@ class Collector:
         """
         Get a QuerySet of objects related to `objs` via the relation `related`.
         """
-        return related.related_model._base_manager.using(self.using).filter(
-            **{"%s__in" % related.field.name: objs}
-        )
+        # Check if there are other foreign keys from the same model pointing to our objects
+        filters = Q(**{"%s__in" % related.field.name: objs})
+        opts = related.related_model._meta
+        for field in opts.fields:
+            if (field.related_model == objs[0].__class__ and 
+                field != related.field and 
+                field.remote_field.on_delete == related.field.remote_field.on_delete):
+                filters |= Q(**{"%s__in" % field.name: objs})
+        return related.related_model._base_manager.using(self.using).filter(filters)
 
     def instances_with_model(self):
         for model, instances in self.data.items():
