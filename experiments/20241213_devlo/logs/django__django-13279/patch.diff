diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py
index b5453160a5..c23e9c0e1f 100644
--- a/django/contrib/sessions/backends/base.py
+++ b/django/contrib/sessions/backends/base.py
@@ -101,9 +101,12 @@ class SessionBase:
     def delete_test_cookie(self):
         del self[self.TEST_COOKIE_NAME]
 
-    def _hash(self, value):
+    def _hash(self, value, legacy=False):
         # RemovedInDjango40Warning: pre-Django 3.1 format will be invalid.
-        key_salt = "django.contrib.sessions" + self.__class__.__name__
+        if legacy:
+            key_salt = "django.contrib.sessions" + self.__class__.__name__
+        else:
+            key_salt = self.key_salt
         return salted_hmac(key_salt, value).hexdigest()
 
     def encode(self, session_dict):
@@ -114,31 +117,71 @@ class SessionBase:
         )
 
     def decode(self, session_data):
-        try:
-            return signing.loads(session_data, salt=self.key_salt, serializer=self.serializer)
-        # RemovedInDjango40Warning: when the deprecation ends, handle here
-        # exceptions similar to what _legacy_decode() does now.
-        except Exception:
-            return self._legacy_decode(session_data)
+        """
+        Return the given session dictionary serialized and encoded as a string.
+        Try both formats when using sha1, otherwise use new format.
+        """
+        if settings.DEFAULT_HASHING_ALGORITHM == 'sha1':
+            # Try both formats
+            try:
+                # Try new format first
+                return signing.loads(session_data, salt=self.key_salt, serializer=self.serializer)
+            except Exception:
+                try:
+                    # Try legacy format
+                    return self._legacy_decode(session_data)
+                except Exception:
+                    # If both fail, log and return empty dict
+                    logger = logging.getLogger('django.security.SuspiciousSession')
+                    logger.warning("Session data corrupted")
+                    return {}
+        else:
+            # Only try new format for non-sha1
+            try:
+                return signing.loads(session_data, salt=self.key_salt, serializer=self.serializer)
+            except Exception:
+                logger = logging.getLogger('django.security.SuspiciousSession')
+                logger.warning("Session data corrupted")
+                return {}
 
     def _legacy_decode(self, session_data):
-        # RemovedInDjango40Warning: pre-Django 3.1 format will be invalid.
-        encoded_data = base64.b64decode(session_data.encode('ascii'))
+        """
+        RemovedInDjango40Warning: pre-Django 3.1 format will be invalid.
+        Decode legacy session data - format is "hash:actual_data".
+        """
         try:
+            # Try legacy format
+            encoded_data = base64.b64decode(session_data.encode('ascii'))
             # could produce ValueError if there is no ':'
             hash, serialized = encoded_data.split(b':', 1)
-            expected_hash = self._hash(serialized)
-            if not constant_time_compare(hash.decode(), expected_hash):
-                raise SuspiciousSession("Session data corrupted")
-            else:
-                return self.serializer().loads(serialized)
+            # Try legacy hash format first
+            expected_hash = self._hash(serialized, legacy=True)
+            if constant_time_compare(hash.decode(), expected_hash):
+                try:
+                    return self.serializer().loads(serialized)
+                except Exception:
+                    # If serialization fails, try new format
+                    return signing.loads(session_data, salt=self.key_salt, serializer=self.serializer)
+
+            # If legacy hash fails, try new format hash
+            expected_hash = self._hash(serialized, legacy=False)
+            if constant_time_compare(hash.decode(), expected_hash):
+                try:
+                    return self.serializer().loads(serialized)
+                except Exception:
+                    # If serialization fails, try new format
+                    return signing.loads(session_data, salt=self.key_salt, serializer=self.serializer)
+
+            # If both hashes fail, log and raise
+            logger = logging.getLogger('django.security.SuspiciousSession')
+            logger.warning("Session data corrupted")
+            raise SuspiciousSession("Session data corrupted")
         except Exception as e:
-            # ValueError, SuspiciousOperation, unpickling exceptions. If any of
-            # these happen, just return an empty dictionary (an empty session).
-            if isinstance(e, SuspiciousOperation):
-                logger = logging.getLogger('django.security.%s' % e.__class__.__name__)
-                logger.warning(str(e))
-            return {}
+            # Log all errors and re-raise
+            if not isinstance(e, SuspiciousSession):
+                logger = logging.getLogger('django.security.SuspiciousSession')
+                logger.warning("Session data corrupted")
+            raise
 
     def update(self, dict_):
         self._session.update(dict_)
