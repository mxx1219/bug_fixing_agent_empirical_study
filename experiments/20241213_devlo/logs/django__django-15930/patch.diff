diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 822968ef56..805a6ada90 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -1258,7 +1258,7 @@ class When(Expression):
                 "When() supports a Q object, a boolean expression, or lookups "
                 "as a condition."
             )
-        if isinstance(condition, Q) and not condition:
+        if isinstance(condition, Q) and not condition and not condition.negated:
             raise ValueError("An empty Q() can't be used as a When() condition.")
         super().__init__(output_field=None)
         self.condition = condition
@@ -1298,8 +1298,26 @@ class When(Expression):
         connection.ops.check_expression_support(self)
         template_params = extra_context
         sql_params = []
-        condition_sql, condition_params = compiler.compile(self.condition)
-        template_params["condition"] = condition_sql
+        
+        # Handle negated empty Q objects and WhereNode conditions
+        if (isinstance(self.condition, Q) and not self.condition and self.condition.negated) or \
+           (hasattr(self.condition, 'negated') and self.condition.negated and str(self.condition).endswith('[])')):
+            # For negated empty conditions, we want to return True for all rows
+            template_params["condition"] = "1=1"
+            condition_params = []
+        else:
+            try:
+                condition_sql, condition_params = compiler.compile(self.condition)
+                if not condition_sql.strip():  # Handle empty condition
+                    template_params["condition"] = "1=0"
+                    condition_params = []
+                else:
+                    template_params["condition"] = condition_sql
+            except EmptyResultSet:
+                # If we get an EmptyResultSet, treat it as a false condition
+                template_params["condition"] = "1=0"
+                condition_params = []
+            
         sql_params.extend(condition_params)
         result_sql, result_params = compiler.compile(self.result)
         template_params["result"] = result_sql
