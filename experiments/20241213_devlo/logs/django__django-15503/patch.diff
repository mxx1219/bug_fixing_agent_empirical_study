diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py
index fdca700c9d..7bceeab595 100644
--- a/django/db/models/fields/json.py
+++ b/django/db/models/fields/json.py
@@ -131,11 +131,15 @@ def compile_json_path(key_transforms, include_root=True):
     for key_transform in key_transforms:
         try:
             num = int(key_transform)
-        except ValueError:  # non-integer
-            path.append(".")
-            path.append(json.dumps(key_transform))
-        else:
-            path.append("[%s]" % num)
+            # Check if the string version of the number matches exactly to distinguish
+            # between numeric keys and array indices
+            if str(key_transform) == str(num):
+                path.append("[%s]" % num)
+                continue
+        except (ValueError, TypeError):
+            pass
+        path.append(".")
+        path.append(json.dumps(str(key_transform)))
     return "".join(path)
 
 
@@ -227,9 +231,39 @@ class HasKeyLookup(PostgresOperatorLookup):
         return super().as_postgresql(compiler, connection)
 
     def as_sqlite(self, compiler, connection):
-        return self.as_sql(
-            compiler, connection, template="JSON_TYPE(%s, %%s) IS NOT NULL"
-        )
+        # Process JSON path from the left-hand side.
+        if isinstance(self.lhs, KeyTransform):
+            lhs, lhs_params, lhs_key_transforms = self.lhs.preprocess_lhs(
+                compiler, connection
+            )
+            lhs_json_path = compile_json_path(lhs_key_transforms)
+        else:
+            lhs, lhs_params = self.process_lhs(compiler, connection)
+            lhs_json_path = "$"
+
+        # Process JSON path from the right-hand side.
+        rhs = self.rhs
+        rhs_params = []
+        if not isinstance(rhs, (list, tuple)):
+            rhs = [rhs]
+        for key in rhs:
+            if isinstance(key, KeyTransform):
+                *_, rhs_key_transforms = key.preprocess_lhs(compiler, connection)
+            else:
+                rhs_key_transforms = [key]
+            rhs_params.append(
+                "%s%s"
+                % (
+                    lhs_json_path,
+                    compile_json_path(rhs_key_transforms, include_root=False),
+                )
+            )
+
+        # Use JSON_TYPE to check for key existence since it returns 'null' for JSON null values
+        sql = "(JSON_TYPE(%s, %%s) IS NOT NULL)" % lhs
+        if self.logical_operator:
+            sql = "(%s)" % self.logical_operator.join([sql] * len(rhs_params))
+        return sql, tuple(lhs_params) + tuple(rhs_params)
 
 
 class HasKey(HasKeyLookup):
