diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py
index 866e38df83..240ba2fea7 100644
--- a/django/db/models/lookups.py
+++ b/django/db/models/lookups.py
@@ -419,8 +419,14 @@ class In(FieldGetDbPrepValueIterableMixin, BuiltinLookup):
         from django.db.models.sql.query import Query  # avoid circular import
 
         if isinstance(self.rhs, Query):
-            self.rhs.clear_ordering(clear_default=True)
-            if not self.rhs.has_select_fields:
+            # Only clear ordering if there are no distinct fields
+            if not self.rhs.distinct_fields:
+                self.rhs.clear_ordering(clear_default=True)
+            # Clear select clause only if we have annotations
+            if self.rhs.annotation_select:
+                self.rhs.clear_select_clause()
+                self.rhs.add_fields(["pk"])
+            elif not self.rhs.has_select_fields:
                 self.rhs.clear_select_clause()
                 self.rhs.add_fields(["pk"])
         return super().get_prep_lookup()
diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index 27310e5d9f..ee372c2b18 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -1513,13 +1513,31 @@ class SQLCompiler:
         qn = compiler.quote_name_unless_alias
         qn2 = self.connection.ops.quote_name
 
-        for index, select_col in enumerate(self.query.select):
-            lhs_sql, lhs_params = self.compile(select_col)
-            rhs = "%s.%s" % (qn(alias), qn2(columns[index]))
-            self.query.where.add(RawSQL("%s = %s" % (lhs_sql, rhs), lhs_params), AND)
-
+        # Save current state
+        old_annotations = self.query.annotation_select_mask
+        old_select = self.query.select
+        old_values_select = self.query.values_select
+
+        # Clear annotations and select only the primary key
+        self.query.annotation_select_mask = None
+        self.query.select = ()
+        self.query.values_select = ()
+        self.query.add_fields([self.query.model._meta.pk.name])
+
+        # Generate the subquery SQL
         sql, params = self.as_sql()
-        return "EXISTS (%s)" % sql, params
+
+        # Restore original state
+        self.query.select = old_select
+        self.query.values_select = old_values_select
+        self.query.annotation_select_mask = old_annotations
+
+        # Build the IN condition
+        col_str = ", ".join(
+            "%s.%s" % (qn(alias), qn2(column))
+            for column in columns
+        )
+        return "%s IN (%s)" % (col_str, sql), params
 
     def explain_query(self):
         result = list(self.execute_sql())
