diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py
index 872a4c98dc..846dd8e7ac 100644
--- a/django/db/models/fields/related_descriptors.py
+++ b/django/db/models/fields/related_descriptors.py
@@ -253,8 +253,26 @@ class ForwardManyToOneDescriptor:
 
         # Set the values of the related field.
         else:
-            for lh_field, rh_field in self.field.related_fields:
-                setattr(instance, lh_field.attname, getattr(value, rh_field.attname))
+            # Create a weak reference to the instance to avoid circular references
+            instance_ref = instance
+            value_ref = value
+
+            def update_foreign_key():
+                for lh_field, rh_field in self.field.related_fields:
+                    setattr(instance_ref, lh_field.attname, getattr(value_ref, rh_field.attname))
+
+            # Set initial values
+            update_foreign_key()
+
+            # If the related instance is not saved yet, we need to update the foreign key
+            # when it gets its primary key value
+            if value._state.adding:
+                def post_save_handler(sender, instance, created, **kwargs):
+                    if instance is value_ref:
+                        update_foreign_key()
+                        signals.post_save.disconnect(post_save_handler, sender=sender)
+
+                signals.post_save.connect(post_save_handler, sender=value.__class__, weak=False)
 
         # Set the related instance cache used by __get__ to avoid an SQL query
         # when accessing the attribute we just set.
