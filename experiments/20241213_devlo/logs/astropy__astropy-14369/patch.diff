diff --git a/astropy/io/ascii/cds.py b/astropy/io/ascii/cds.py
index 7a83fc39be..bc8e64de3b 100644
--- a/astropy/io/ascii/cds.py
+++ b/astropy/io/ascii/cds.py
@@ -130,7 +130,24 @@ class CdsHeader(core.BaseHeader):
                 if unit == "---":
                     col.unit = None  # "---" is the marker for no unit in CDS/MRT table
                 else:
-                    col.unit = Unit(unit, format="cds", parse_strict="warn")
+                    # Handle CDS unit order for composite units
+                    if '/' in unit:
+                        parts = unit.split('/')
+                        # Build unit from right to left for correct division order
+                        result = None
+                        for part in reversed(parts[1:]):
+                            if result is None:
+                                result = Unit(part, format="cds", parse_strict="warn")
+                            else:
+                                result = Unit(part, format="cds", parse_strict="warn") / result
+                        if parts[0]:
+                            if result is None:
+                                result = Unit(parts[0], format="cds", parse_strict="warn")
+                            else:
+                                result = Unit(parts[0], format="cds", parse_strict="warn") / result
+                        col.unit = result
+                    else:
+                        col.unit = Unit(unit, format="cds", parse_strict="warn")
                 col.description = (match.group("descr") or "").strip()
                 col.raw_type = match.group("format")
                 col.type = self.get_col_type(col)
diff --git a/astropy/units/format/cds.py b/astropy/units/format/cds.py
index 307e987ed6..38aa44d7f8 100644
--- a/astropy/units/format/cds.py
+++ b/astropy/units/format/cds.py
@@ -165,14 +165,14 @@ class CDS(Base):
         def p_combined_units(p):
             """
             combined_units : product_of_units
-                           | division_of_units
+                         | division_of_units
             """
             p[0] = p[1]
 
         def p_product_of_units(p):
             """
             product_of_units : unit_expression PRODUCT combined_units
-                             | unit_expression
+                           | unit_expression
             """
             if len(p) == 4:
                 p[0] = p[1] * p[3]
@@ -182,7 +182,8 @@ class CDS(Base):
         def p_division_of_units(p):
             """
             division_of_units : DIVISION unit_expression
-                              | unit_expression DIVISION combined_units
+                            | unit_expression DIVISION unit_expression
+                            | division_of_units DIVISION unit_expression
             """
             if len(p) == 3:
                 p[0] = p[2] ** -1
@@ -287,6 +288,51 @@ class CDS(Base):
 
         return cls._units[unit]
 
+    @classmethod
+    def _compose_units(cls, unit_str):
+        """Compose units in CDS format strictly following left-to-right order."""
+        from astropy.units import Unit
+        
+        # First try direct unit lookup
+        try:
+            return cls._parse_unit(unit_str, detailed_exception=False)
+        except ValueError:
+            pass
+            
+        # Don't handle special cases - let the parser handle them
+        if '[' in unit_str or '(' in unit_str:
+            return None
+            
+        parts = unit_str.split('/')
+        if not parts:
+            raise ValueError("Invalid unit string")
+            
+        # Handle the numerator (first part)
+        result = None
+        if parts[0]:
+            nums = parts[0].split('.')
+            try:
+                result = Unit(nums[0])
+                for num in nums[1:]:
+                    result = result * Unit(num)
+            except ValueError:
+                raise ValueError(f"Invalid unit: {nums[0]}")
+                
+        # Handle any denominators (remaining parts)
+        for part in parts[1:]:
+            if not part:
+                continue
+            try:
+                denoms = part.split('.')
+                denom_unit = Unit(denoms[0])
+                for den in denoms[1:]:
+                    denom_unit = denom_unit * Unit(den)
+                result = result / denom_unit
+            except ValueError:
+                raise ValueError(f"Invalid unit: {part}")
+            
+        return result
+
     @classmethod
     def parse(cls, s, debug=False):
         if " " in s:
@@ -295,18 +341,22 @@ class CDS(Base):
         if not isinstance(s, str):
             s = s.decode("ascii")
 
-        # This is a short circuit for the case where the string
-        # is just a single unit name
+        # First try direct unit lookup
         try:
             return cls._parse_unit(s, detailed_exception=False)
         except ValueError:
+            # Then try strict CDS composition
             try:
-                return cls._parser.parse(s, lexer=cls._lexer, debug=debug)
-            except ValueError as e:
-                if str(e):
-                    raise ValueError(str(e))
-                else:
-                    raise ValueError("Syntax error")
+                return cls._compose_units(s)
+            except Exception:
+                # Finally fall back to parser
+                try:
+                    return cls._parser.parse(s, lexer=cls._lexer, debug=debug)
+                except ValueError as e:
+                    if str(e):
+                        raise ValueError(str(e))
+                    else:
+                        raise ValueError("Syntax error")
 
     @staticmethod
     def _get_unit_name(unit):
diff --git a/pyproject.toml b/pyproject.toml
index 5b691556b8..f24abc3b05 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -1,5 +1,5 @@
 [build-system]
-requires = ["setuptools",
+requires = ["setuptools==68.0.0",
             "setuptools_scm>=6.2",
             "wheel",
             "cython==0.29.30",
