diff --git a/django/forms/fields.py b/django/forms/fields.py
index 65d6a9ec82..089a4ee7e3 100644
--- a/django/forms/fields.py
+++ b/django/forms/fields.py
@@ -1025,6 +1025,22 @@ class MultiValueField(Field):
             if not value or not [v for v in value if v not in self.empty_values]:
                 if self.required:
                     raise ValidationError(self.error_messages['required'], code='required')
+                elif not isinstance(value, (list, tuple)) or not value:
+                    # If a single empty value is passed or an empty list is passed,
+                    # and the field is not required, return None
+                    return None
+                elif not self.require_all_fields:
+                    # When require_all_fields=False, we need to check individual field requirements
+                    # even when all values are empty
+                    for i, field in enumerate(self.fields):
+                        if field.required:
+                            try:
+                                field_value = value[i] if value else None
+                            except IndexError:
+                                field_value = None
+                            if field_value in self.empty_values:
+                                raise ValidationError(field.error_messages['incomplete'], code='incomplete')
+                    return self.compress([])
                 else:
                     return self.compress([])
         else:
@@ -1041,9 +1057,8 @@ class MultiValueField(Field):
                     if self.required:
                         raise ValidationError(self.error_messages['required'], code='required')
                 elif field.required:
-                    # Otherwise, add an 'incomplete' error to the list of
-                    # collected errors and skip field cleaning, if a required
-                    # field is empty.
+                    # If require_all_fields=False but this particular field is required,
+                    # add the 'incomplete' error message to the list of errors
                     if field.error_messages['incomplete'] not in errors:
                         errors.append(field.error_messages['incomplete'])
                     continue
