diff --git a/django/db/models/query.py b/django/db/models/query.py
index b48d0df9c0..4f14a0ab0e 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -107,9 +107,11 @@ class ValuesIterable(BaseIterable):
             *query.values_select,
             *query.annotation_select,
         ]
-        indexes = range(len(names))
         for row in compiler.results_iter(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size):
-            yield {names[i]: row[i] for i in indexes}
+            if isinstance(row, dict):
+                yield row
+            else:
+                yield {names[i]: row[i] for i in range(len(names))}
 
 
 class ValuesListIterable(BaseIterable):
@@ -211,6 +213,11 @@ class QuerySet:
     @query.setter
     def query(self, value):
         self._query = value
+        # Set the correct iterator class based on query mode
+        if value.values_mode == 'values':
+            self._iterable_class = ValuesIterable
+        elif value.values_mode == 'values_list':
+            self._iterable_class = ValuesListIterable
 
     def as_manager(cls):
         # Address the circular dependency between `Queryset` and `Manager`.
@@ -828,6 +835,7 @@ class QuerySet:
     def values(self, *fields, **expressions):
         fields += tuple(expressions)
         clone = self._values(*fields, **expressions)
+        clone.query.values_mode = 'values'
         clone._iterable_class = ValuesIterable
         return clone
 
@@ -855,6 +863,7 @@ class QuerySet:
                 _fields.append(field)
 
         clone = self._values(*_fields, **expressions)
+        clone.query.values_mode = 'values_list'
         clone._iterable_class = (
             NamedValuesListIterable if named
             else FlatValuesListIterable if flat
diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index 208f0ddf73..6a897dfa71 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -1118,8 +1118,20 @@ class SQLCompiler:
         rows = chain.from_iterable(results)
         if converters:
             rows = self.apply_converters(rows, converters)
-            if tuple_expected:
+            if tuple_expected or self.query.values_mode == 'values_list':
                 rows = map(tuple, rows)
+            elif self.query.values_mode == 'values':
+                def row_to_dict(row):
+                    row_dict = {}
+                    # Add values_select fields
+                    for value, name in zip(row[:len(self.query.values_select)], self.query.values_select):
+                        row_dict[name] = value
+                    # Add annotation fields
+                    if self.annotation_col_map:
+                        for name, pos in self.annotation_col_map.items():
+                            row_dict[name] = row[pos]
+                    return row_dict
+                rows = map(row_to_dict, rows)
         return rows
 
     def has_results(self):
diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 4648daf395..fb843e5e81 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -141,7 +141,7 @@ class Query(BaseExpression):
 
     compiler = 'SQLCompiler'
 
-    def __init__(self, model, where=WhereNode, alias_cols=True):
+    def __init__(self, model=None, where=WhereNode, alias_cols=True):
         self.model = model
         self.alias_refcount = {}
         # alias_map is the most important data structure regarding joins.
@@ -164,6 +164,8 @@ class Query(BaseExpression):
         self.used_aliases = set()
         self.filter_is_sticky = False
         self.subquery = False
+        self.values_select = ()  # Store values() fields
+        self.values_mode = None  # Store whether this is a values/values_list query
 
         # SQL-related attributes
         # Select and related select clauses are expressions to use in the
@@ -329,6 +331,9 @@ class Query(BaseExpression):
             obj.subq_aliases = self.subq_aliases.copy()
         obj.used_aliases = self.used_aliases.copy()
         obj._filtered_relations = self._filtered_relations.copy()
+        # Preserve values mode
+        obj.values_select = self.values_select
+        obj.values_mode = self.values_mode
         # Clear the cached_property
         try:
             del obj.base_table
@@ -2177,7 +2182,7 @@ class Query(BaseExpression):
             self.extra_select_mask = set(names)
         self._extra_select_cache = None
 
-    def set_values(self, fields):
+    def set_values(self, fields, mode='values'):
         self.select_related = False
         self.clear_deferred_loading()
         self.clear_select_fields()
@@ -2222,6 +2227,7 @@ class Query(BaseExpression):
             self.group_by = tuple(group_by)
 
         self.values_select = tuple(field_names)
+        self.values_mode = mode
         self.add_fields(field_names, True)
 
     @property
