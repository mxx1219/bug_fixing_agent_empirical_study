diff --git a/django/core/serializers/python.py b/django/core/serializers/python.py
index 36048601af..9769123491 100644
--- a/django/core/serializers/python.py
+++ b/django/core/serializers/python.py
@@ -71,7 +71,17 @@ class Serializer(base.Serializer):
                     return value.natural_key()
 
                 def queryset_iterator(obj, field):
-                    return getattr(obj, field.name).iterator()
+                    # Get the base manager without select_related to avoid conflicts
+                    base_manager = field.remote_field.model._meta.base_manager
+                    through = field.remote_field.through
+                    source_field_name = field.m2m_field_name()
+                    target_field_name = field.m2m_reverse_field_name()
+                    # Get the M2M objects through the base manager
+                    # Use the through table to get related objects
+                    through_objects = through._default_manager.filter(
+                        **{source_field_name: getattr(obj, obj._meta.pk.attname)}
+                    ).values_list(target_field_name, flat=True)
+                    return base_manager.filter(pk__in=through_objects).iterator()
 
             else:
 
@@ -79,7 +89,16 @@ class Serializer(base.Serializer):
                     return self._value_from_field(value, value._meta.pk)
 
                 def queryset_iterator(obj, field):
-                    return getattr(obj, field.name).only("pk").iterator()
+                    # Get the base manager without select_related to avoid conflicts
+                    base_manager = field.remote_field.model._meta.base_manager
+                    through = field.remote_field.through
+                    source_field_name = field.m2m_field_name()
+                    target_field_name = field.m2m_reverse_field_name()
+                    # Use the through table to get related objects
+                    through_objects = through._default_manager.filter(
+                        **{source_field_name: getattr(obj, obj._meta.pk.attname)}
+                    ).values_list(target_field_name, flat=True)
+                    return base_manager.filter(pk__in=through_objects).only("pk").iterator()
 
             m2m_iter = getattr(obj, "_prefetched_objects_cache", {}).get(
                 field.name,
