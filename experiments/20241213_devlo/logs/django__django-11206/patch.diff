diff --git a/django/utils/numberformat.py b/django/utils/numberformat.py
index 88b35fc435..7b84ed7914 100644
--- a/django/utils/numberformat.py
+++ b/django/utils/numberformat.py
@@ -25,11 +25,20 @@ def format(number, decimal_sep, decimal_pos=None, grouping=0, thousand_sep='',
     if isinstance(number, int) and not use_grouping and not decimal_pos:
         return mark_safe(number)
     # sign
-    sign = ''
+    sign_str = ''
     if isinstance(number, Decimal):
+        dec_sign, digits, exponent = number.as_tuple()
+        
+        # If decimal_pos is specified and the absolute value is smaller than what can be represented
+        # with the given decimal positions, return "0.00..." (with sign if negative)
+        if decimal_pos is not None and exponent < -200:  # Only apply to very small numbers
+            sign_str = '-' if dec_sign else ''
+            if decimal_pos == 0:
+                return sign_str + '0'
+            return sign_str + '0' + decimal_sep + '0' * decimal_pos
+            
         # Format values with more than 200 digits (an arbitrary cutoff) using
         # scientific notation to avoid high memory usage in {:f}'.format().
-        _, digits, exponent = number.as_tuple()
         if abs(exponent) + len(digits) > 200:
             number = '{:e}'.format(number)
             coefficient, exponent = number.split('e')
@@ -44,7 +53,7 @@ def format(number, decimal_sep, decimal_pos=None, grouping=0, thousand_sep='',
     else:
         str_number = str(number)
     if str_number[0] == '-':
-        sign = '-'
+        sign_str = '-'
         str_number = str_number[1:]
     # decimal part
     if '.' in str_number:
@@ -76,4 +85,4 @@ def format(number, decimal_sep, decimal_pos=None, grouping=0, thousand_sep='',
             int_part_gd += digit
             cnt += 1
         int_part = int_part_gd[::-1]
-    return sign + int_part + dec_part
+    return sign_str + int_part + dec_part
