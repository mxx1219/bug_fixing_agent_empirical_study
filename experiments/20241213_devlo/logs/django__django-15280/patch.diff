diff --git a/django/db/models/base.py b/django/db/models/base.py
index 0d50dad0c9..d0ff8a44b4 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -539,6 +539,11 @@ class Model(metaclass=ModelBase):
         new = cls(*values)
         new._state.adding = False
         new._state.db = db
+        # Track which fields were deferred
+        new._deferred_fields = {
+            f.attname for f in cls._meta.concrete_fields
+            if f.attname not in field_names
+        }
         return new
 
     def __repr__(self):
@@ -622,10 +627,14 @@ class Model(metaclass=ModelBase):
         """
         Return a set containing names of deferred fields for this instance.
         """
-        return {
+        if hasattr(self, '_deferred_fields'):
+            return self._deferred_fields
+        deferred = {
             f.attname for f in self._meta.concrete_fields
             if f.attname not in self.__dict__
         }
+        self._deferred_fields = deferred
+        return deferred
 
     def refresh_from_db(self, using=None, fields=None):
         """
diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py
index d5aa968400..883b0b3c7a 100644
--- a/django/db/models/fields/related_descriptors.py
+++ b/django/db/models/fields/related_descriptors.py
@@ -146,6 +146,9 @@ class ForwardManyToOneDescriptor:
             for rel_obj in queryset:
                 instance = instances_dict[rel_obj_attr(rel_obj)]
                 remote_field.set_cached_value(rel_obj, instance)
+                # Preserve deferred fields state from the original instance
+                if hasattr(instance, '_deferred_fields'):
+                    rel_obj._deferred_fields = instance._deferred_fields.copy()
         return queryset, rel_obj_attr, instance_attr, True, self.field.get_cache_name(), False
 
     def get_object(self, instance):
