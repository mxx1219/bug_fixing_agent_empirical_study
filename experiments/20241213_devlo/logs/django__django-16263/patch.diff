diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 9735ce10c8..a987ac06c2 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -18,6 +18,7 @@ from string import ascii_uppercase
 from django.core.exceptions import FieldDoesNotExist, FieldError
 from django.db import DEFAULT_DB_ALIAS, NotSupportedError, connections
 from django.db.models.aggregates import Count
+from django.db.models.expressions import Subquery
 from django.db.models.constants import LOOKUP_SEP
 from django.db.models.expressions import (
     BaseExpression,
@@ -550,6 +551,45 @@ class Query(BaseExpression):
         Perform a COUNT() query using the current filter constraints.
         """
         obj = self.clone()
+        
+        # Check if annotations are used in filters or ordering
+        annotations_used = set()
+        
+        # Check annotations used in where clause
+        def collect_annotations(node):
+            if hasattr(node, 'refs_aggregate'):
+                annotations_used.update(node.refs_aggregate)
+            for child in node.children:
+                if hasattr(child, 'children'):
+                    collect_annotations(child)
+                elif hasattr(child, 'refs_aggregate'):
+                    annotations_used.update(child.refs_aggregate)
+        
+        if obj.where:
+            collect_annotations(obj.where)
+            
+        # Check annotations used in order by
+        if obj.order_by:
+            for ordering in obj.order_by:
+                if hasattr(ordering, 'refs_aggregate'):
+                    annotations_used.update(ordering.refs_aggregate)
+                
+        # Remove unused annotations, but keep:
+        # 1. Subqueries (they affect query structure)
+        # 2. Datetime extracts/truncs (they affect grouping)
+        # 3. Annotations used in filters/ordering
+        # 4. Annotations without a source
+        # 5. Annotations that are part of a datetime query
+        obj.annotations = {
+            k: v for k, v in obj.annotations.items()
+            if (k in annotations_used or
+                getattr(v, 'contains_aggregate', False) or
+                getattr(v, 'contains_over_clause', False) or
+                isinstance(v, Subquery) or
+                not hasattr(v, 'source_expressions') or
+                k == 'datetimefield')  # Special case for datetimes() queries
+        }
+        
         obj.add_annotation(Count("*"), alias="__count", is_summary=True)
         return obj.get_aggregation(using, ["__count"])["__count"]
 
