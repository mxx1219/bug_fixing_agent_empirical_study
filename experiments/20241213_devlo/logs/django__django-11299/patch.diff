diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py
index e7f81d3ee9..b625884e13 100644
--- a/django/db/models/constraints.py
+++ b/django/db/models/constraints.py
@@ -34,6 +34,8 @@ class CheckConstraint(BaseConstraint):
 
     def _get_check_sql(self, model, schema_editor):
         query = Query(model=model)
+        # Set flag to indicate this is a check constraint query
+        query.is_check_constraint = True
         where = query.build_where(self.check)
         compiler = query.get_compiler(connection=schema_editor.connection)
         sql, params = where.as_sql(compiler, schema_editor.connection)
diff --git a/django/db/models/sql/where.py b/django/db/models/sql/where.py
index 496822c58b..f5ddeefdb1 100644
--- a/django/db/models/sql/where.py
+++ b/django/db/models/sql/where.py
@@ -76,9 +76,22 @@ class WhereNode(tree.Node):
         else:
             full_needed, empty_needed = 1, len(self.children)
 
+        # For check constraints, we want to ensure consistent table qualification
+        is_check_constraint = False
+        table_name = None
+        if hasattr(compiler, 'query'):
+            is_check_constraint = getattr(compiler.query, 'is_check_constraint', False)
+            if is_check_constraint and hasattr(compiler.query, 'model'):
+                table_name = compiler.query.model._meta.db_table
+
         for child in self.children:
             try:
                 sql, params = compiler.compile(child)
+                # For check constraints, ensure consistent table qualification
+                if is_check_constraint and hasattr(child, 'lhs') and hasattr(child.lhs, 'field'):
+                    # Extract the column name without table qualification
+                    if '"' + table_name + '".' in sql:
+                        sql = sql.replace('"' + table_name + '".', '')
             except EmptyResultSet:
                 empty_needed -= 1
             else:
