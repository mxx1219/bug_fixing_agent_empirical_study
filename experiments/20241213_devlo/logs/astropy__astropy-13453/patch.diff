diff --git a/astropy/io/ascii/html.py b/astropy/io/ascii/html.py
index 266cf229cc..71f214cb58 100644
--- a/astropy/io/ascii/html.py
+++ b/astropy/io/ascii/html.py
@@ -1,4 +1,3 @@
-# Licensed under a 3-clause BSD style license - see LICENSE.rst
 """An extensible HTML table reader and writer.
 
 html.py:
@@ -81,7 +80,7 @@ class HTMLInputter(core.BaseInputter):
             from bs4 import BeautifulSoup
         except ImportError:
             raise core.OptionalTableImportError('BeautifulSoup must be '
-                                                'installed to read HTML tables')
+                                            'installed to read HTML tables')
 
         if 'parser' not in self.html:
             with warnings.catch_warnings():
@@ -132,7 +131,7 @@ class HTMLSplitter(core.BaseSplitter):
                 yield [el.text.strip() for el in data_elements]
         if len(lines) == 0:
             raise core.InconsistentTableError('HTML tables must contain data '
-                                              'in a <table> tag')
+                                          'in a <table> tag')
 
 
 class HTMLOutputter(core.TableOutputter):
@@ -228,7 +227,7 @@ class HTMLData(core.BaseData):
             if soup.td is not None:
                 if soup.th is not None:
                     raise core.InconsistentTableError('HTML tables cannot '
-                                                      'have headings and data in the same row')
+                                                  'have headings and data in the same row')
                 return i
 
         raise core.InconsistentTableError('No start line found for HTML data')
@@ -339,6 +338,14 @@ class HTML(core.BaseReader):
         self.outputter = HTMLOutputter()
         return super().read(table)
 
+    def _format_col_str_vals(self, col):
+        """Format column values according to the format specification if available."""
+        if hasattr(self.data, 'formats') and col.info.name in self.data.formats:
+            formatter = self.data.formats[col.info.name]
+            return [formatter(x) for x in col]
+        else:
+            return list(col.info.iter_str_vals())
+
     def write(self, table):
         """
         Return data in ``table`` converted to HTML as a list of strings.
@@ -375,7 +382,7 @@ class HTML(core.BaseReader):
                 with w.tag('meta', attrib={'charset': 'utf-8'}):
                     pass
                 with w.tag('meta', attrib={'http-equiv': 'Content-type',
-                                           'content': 'text/html;charset=UTF-8'}):
+                                       'content': 'text/html;charset=UTF-8'}):
                     pass
                 if 'css' in self.html:
                     with w.tag('style'):
@@ -413,34 +420,38 @@ class HTML(core.BaseReader):
                                     w.start('th')
                                 w.data(col.info.name.strip())
                                 w.end(indent=False)
-                        col_str_iters = []
-                        new_cols_escaped = []
-
-                        # Make a container to hold any new_col objects created
-                        # below for multicolumn elements.  This is purely to
-                        # maintain a reference for these objects during
-                        # subsequent iteration to format column values.  This
-                        # requires that the weakref info._parent be maintained.
-                        new_cols = []
-
-                        for col, col_escaped in zip(cols, cols_escaped):
-                            if len(col.shape) > 1 and self.html['multicol']:
-                                span = col.shape[1]
-                                for i in range(span):
-                                    # Split up multicolumns into separate columns
-                                    new_col = Column([el[i] for el in col])
-
-                                    new_col_iter_str_vals = self.fill_values(
-                                        col, new_col.info.iter_str_vals())
-                                    col_str_iters.append(new_col_iter_str_vals)
-                                    new_cols_escaped.append(col_escaped)
-                                    new_cols.append(new_col)
-                            else:
-
-                                col_iter_str_vals = self.fill_values(col, col.info.iter_str_vals())
-                                col_str_iters.append(col_iter_str_vals)
 
+                    # Get formatted data values using BaseData methods
+                    self.data.cols = cols
+                    self.data._set_fill_values(cols)
+                    self.data._set_col_formats()
+
+                    # First set str_vals on all columns
+                    for col in cols:
+                        col.str_vals = list(col.info.iter_str_vals())
+
+                    # Apply fill values
+                    self.data._replace_vals(cols)
+
+                    col_str_iters = []
+                    new_cols_escaped = []
+                    new_cols = []
+
+                    for col, col_escaped in zip(cols, cols_escaped):
+                        if len(col.shape) > 1 and self.html['multicol']:
+                            span = col.shape[1]
+                            for i in range(span):
+                                # Split up multicolumns into separate columns
+                                new_col = Column([el[i] for el in col])
+                                new_col.str_vals = list(new_col.info.iter_str_vals())
+                                new_col.fill_values = col.fill_values  # Copy fill values
+                                self.data._replace_vals([new_col])  # Apply fill values
+                                col_str_iters.append(new_col.str_vals)
                                 new_cols_escaped.append(col_escaped)
+                                new_cols.append(new_col)
+                        else:
+                            col_str_iters.append(col.str_vals)
+                            new_cols_escaped.append(col_escaped)
 
                     for row in zip(*col_str_iters):
                         with w.tag('tr'):
@@ -449,29 +460,8 @@ class HTML(core.BaseReader):
                                 method = ('escape_xml' if col_escaped else 'bleach_clean')
                                 with w.xml_cleaning_method(method, **raw_html_clean_kwargs):
                                     w.start('td')
-                                    w.data(el.strip())
+                                    w.data(str(el).strip())
                                     w.end(indent=False)
 
         # Fixes XMLWriter's insertion of unwanted line breaks
         return [''.join(lines)]
-
-    def fill_values(self, col, col_str_iters):
-        """
-        Return an iterator of the values with replacements based on fill_values
-        """
-        # check if the col is a masked column and has fill values
-        is_masked_column = hasattr(col, 'mask')
-        has_fill_values = hasattr(col, 'fill_values')
-
-        for idx, col_str in enumerate(col_str_iters):
-            if is_masked_column and has_fill_values:
-                if col.mask[idx]:
-                    yield col.fill_values[core.masked]
-                    continue
-
-            if has_fill_values:
-                if col_str in col.fill_values:
-                    yield col.fill_values[col_str]
-                    continue
-
-            yield col_str
diff --git a/pyproject.toml b/pyproject.toml
index 7a3b85fc92..83f08ed124 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -1,5 +1,5 @@
 [build-system]
-requires = ["setuptools",
+requires = ["setuptools==68.0.0",
             "setuptools_scm>=6.2",
             "wheel",
             "cython==0.29.30",
