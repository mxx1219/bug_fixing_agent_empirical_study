diff --git a/django/contrib/admindocs/utils.py b/django/contrib/admindocs/utils.py
index 1ce4594501..a9f2c2d125 100644
--- a/django/contrib/admindocs/utils.py
+++ b/django/contrib/admindocs/utils.py
@@ -160,30 +160,43 @@ def replace_named_groups(pattern):
         (m.start(0), m.end(0), m.group(1))
         for m in named_group_matcher.finditer(pattern)
     ]
+    # Process groups from right to left to handle nested groups properly
+    named_group_indices.reverse()
+    
     # Tuples of (named capture group pattern, group name).
     group_pattern_and_name = []
     # Loop over the groups and their start and end indices.
     for start, end, group_name in named_group_indices:
         # Handle nested parentheses, e.g. '^(?P<a>(x|y))/b'.
         unmatched_open_brackets, prev_char = 1, None
+        found_end = False
+        
+        # Search for the closing parenthesis
         for idx, val in enumerate(pattern[end:]):
-            # If brackets are balanced, the end of the string for the current
-            # named capture group pattern has been reached.
-            if unmatched_open_brackets == 0:
-                group_pattern_and_name.append((pattern[start:end + idx], group_name))
-                break
-
             # Check for unescaped `(` and `)`. They mark the start and end of a
             # nested group.
             if val == '(' and prev_char != '\\':
                 unmatched_open_brackets += 1
             elif val == ')' and prev_char != '\\':
                 unmatched_open_brackets -= 1
+                
+            # If brackets are balanced, the end of the string for the current
+            # named capture group pattern has been reached.
+            if unmatched_open_brackets == 0:
+                group_pattern_and_name.append((pattern[start:end + idx + 1], group_name))
+                found_end = True
+                break
+                
             prev_char = val
 
+        # Handle case where pattern ends with an unclosed group (shouldn't happen in valid regex)
+        if not found_end:
+            group_pattern_and_name.append((pattern[start:], group_name))
+
     # Replace the string for named capture groups with their group names.
+    # Process from right to left to handle nested groups properly
     for group_pattern, group_name in group_pattern_and_name:
-        pattern = pattern.replace(group_pattern, group_name)
+        pattern = pattern.replace(group_pattern, f"<{group_name[1:-1]}>")  # Remove < > from the group name
     return pattern
 
 
