diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index c120f5d32d..3968a9d872 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -406,10 +406,12 @@ class RenameModel(ModelOperation):
             not operation.references_model(self.new_name, app_label)
         )
 
-
 class ModelOptionOperation(ModelOperation):
     def reduce(self, operation, app_label):
-        if isinstance(operation, (self.__class__, DeleteModel)) and self.name_lower == operation.name_lower:
+        if isinstance(operation, DeleteModel) and self.name_lower == operation.name_lower:
+            return [operation]
+        if isinstance(operation, self.__class__) and self.name_lower == operation.name_lower:
+            # Always keep the last operation
             return [operation]
         return super().reduce(operation, app_label)
 
@@ -480,6 +482,12 @@ class AlterTogetherOptionOperation(ModelOptionOperation):
     def option_value(self):
         return getattr(self, self.option_name)
 
+    def reduce(self, operation, app_label):
+        if isinstance(operation, self.__class__) and self.name_lower == operation.name_lower:
+            # Always keep the last operation
+            return [operation]
+        return super().reduce(operation, app_label)
+
     def deconstruct(self):
         kwargs = {
             'name': self.name,
diff --git a/django/db/migrations/optimizer.py b/django/db/migrations/optimizer.py
index ee20f62af2..e566f6a8cb 100644
--- a/django/db/migrations/optimizer.py
+++ b/django/db/migrations/optimizer.py
@@ -47,7 +47,12 @@ class MigrationOptimizer:
                 result = operation.reduce(other, app_label)
                 if isinstance(result, list):
                     in_between = operations[i + 1:i + j + 1]
-                    if right:
+                    if len(result) == 1 and result[0] == other:
+                        # Special case: when reduce returns [other], it means we can
+                        # skip the current operation and use other directly
+                        new_operations.extend(in_between)
+                        new_operations.extend(result)
+                    elif right:
                         new_operations.extend(in_between)
                         new_operations.extend(result)
                     elif all(op.reduce(other, app_label) is True for op in in_between):
