diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index aaf35ee37c..5156d5eab3 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -845,9 +845,52 @@ class Query(BaseExpression):
         Change the aliases in change_map (which maps old-alias -> new-alias),
         relabelling any references to them in select columns and the where
         clause.
-        """
-        assert set(change_map).isdisjoint(change_map.values())
 
+        Originally, this method required that there be no overlap between the old
+        and new aliases (i.e., no alias appears as both a key and value in change_map)
+        to prevent an alias from being changed twice (e.g., T4->T5 followed by T5->T6).
+        
+        However, such overlaps can legitimately occur when combining queries with OR
+        operations. To handle this, we now detect overlaps and perform the changes in
+        multiple steps using temporary aliases to ensure each alias is changed exactly
+        once.
+        """
+        # If there's an overlap between keys and values, we need to do the
+        # changes in multiple steps to avoid conflicts
+        if not set(change_map).isdisjoint(change_map.values()):
+            # First, find all chains of changes (e.g. T1->T2, T2->T3 becomes [T1,T2,T3])
+            change_chains = []
+            seen = set()
+            
+            def follow_chain(old, chain):
+                new = change_map.get(old)
+                if new is None or new in chain:
+                    change_chains.append(chain)
+                    return
+                follow_chain(new, chain + [new])
+            
+            for old in change_map:
+                if old not in seen:
+                    seen.add(old)
+                    follow_chain(old, [old])
+            
+            # Now apply each chain in reverse, using temporary aliases
+            for chain in change_chains:
+                temp_map = {}
+                # First step: map each alias to a temporary one
+                for i, old in enumerate(chain[:-1]):
+                    temp = f'_tmp{i}'
+                    temp_map[old] = temp
+                self.change_aliases(temp_map)
+                
+                # Second step: map temporary aliases to final ones
+                final_map = {}
+                for i, old in enumerate(chain[:-1]):
+                    final_map[f'_tmp{i}'] = change_map[old]
+                self.change_aliases(final_map)
+            return
+
+        # Original implementation for non-overlapping changes
         # 1. Update references in "select" (normal columns plus aliases),
         # "group by" and "where".
         self.where.relabel_aliases(change_map)
