diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py
index 2e283a3193..62e47634cb 100644
--- a/django/db/backends/base/operations.py
+++ b/django/db/backends/base/operations.py
@@ -580,7 +580,38 @@ class BaseDatabaseOperations:
 
     def convert_durationfield_value(self, value, expression, connection):
         if value is not None:
-            return datetime.timedelta(0, 0, value)
+            # Return if already a timedelta
+            if isinstance(value, datetime.timedelta):
+                return value
+                
+            # Handle integer/float microseconds
+            if isinstance(value, (int, float)):
+                return datetime.timedelta(microseconds=int(value))
+            
+            # Handle string duration format (e.g. "1 day, 1:00:00")
+            if isinstance(value, str):
+                if ',' in value:
+                    try:
+                        days = int(value.split(',')[0].strip().split(' ')[0])
+                        time_part = value.split(',')[1].strip()
+                        hours, minutes, seconds = map(int, time_part.split(':'))
+                        return datetime.timedelta(days=days, hours=hours, minutes=minutes, seconds=seconds)
+                    except (ValueError, IndexError):
+                        pass
+                elif ':' in value:  # Handle "HH:MM:SS" format
+                    try:
+                        hours, minutes, seconds = map(int, value.split(':'))
+                        return datetime.timedelta(hours=hours, minutes=minutes, seconds=seconds)
+                    except (ValueError, IndexError):
+                        pass
+            
+            # Try to convert to Decimal for microseconds
+            try:
+                value = decimal.Decimal(value)
+                return datetime.timedelta(microseconds=int(value))
+            except (decimal.InvalidOperation, TypeError, ValueError):
+                # If all else fails, try to use the original value
+                return datetime.timedelta(microseconds=int(value))
 
     def check_expression_support(self, expression):
         """
