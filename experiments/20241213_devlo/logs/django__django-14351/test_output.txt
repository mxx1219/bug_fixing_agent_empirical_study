+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   django/db/models/fields/related_lookups.py
	modified:   django/db/models/sql/compiler.py
	modified:   django/db/models/sql/where.py

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit 06fd4df41afb5aa1d681b853c3c08d8c688ca3a5
Author: Maxim Beder <macsim.beder@gmail.com>
Date:   Fri Apr 30 00:40:06 2021 +0200

    Fixed #32479 -- Added fallbacks to subsequent language codes in translations.
    
    Thanks Claude Paroz and Nick Pope for reviews.

diff --git a/django/utils/translation/trans_real.py b/django/utils/translation/trans_real.py
index 8042f6fdc4..173ad08639 100644
--- a/django/utils/translation/trans_real.py
+++ b/django/utils/translation/trans_real.py
@@ -474,14 +474,17 @@ def get_supported_language_variant(lang_code, strict=False):
     <https://www.djangoproject.com/weblog/2007/oct/26/security-fix/>.
     """
     if lang_code:
-        # If 'fr-ca' is not supported, try special fallback or language-only 'fr'.
+        # If 'zh-hant-tw' is not supported, try special fallback or subsequent
+        # language codes i.e. 'zh-hant' and 'zh'.
         possible_lang_codes = [lang_code]
         try:
             possible_lang_codes.extend(LANG_INFO[lang_code]['fallback'])
         except KeyError:
             pass
-        generic_lang_code = lang_code.split('-')[0]
-        possible_lang_codes.append(generic_lang_code)
+        i = None
+        while (i := lang_code.rfind('-', 0, i)) > -1:
+            possible_lang_codes.append(lang_code[:i])
+        generic_lang_code = possible_lang_codes[-1]
         supported_lang_codes = get_languages()
 
         for code in possible_lang_codes:
diff --git a/tests/i18n/tests.py b/tests/i18n/tests.py
index 8248122a97..7d81f2a07d 100644
--- a/tests/i18n/tests.py
+++ b/tests/i18n/tests.py
@@ -1424,6 +1424,26 @@ class MiscTests(SimpleTestCase):
         r.META = {'HTTP_ACCEPT_LANGUAGE': 'zh-my,en'}
         self.assertEqual(get_language_from_request(r), 'zh-hans')
 
+    def test_subsequent_code_fallback_language(self):
+        """
+        Subsequent language codes should be used when the language code is not
+        supported.
+        """
+        tests = [
+            ('zh-Hans-CN', 'zh-hans'),
+            ('zh-hans-mo', 'zh-hans'),
+            ('zh-hans-HK', 'zh-hans'),
+            ('zh-Hant-HK', 'zh-hant'),
+            ('zh-hant-tw', 'zh-hant'),
+            ('zh-hant-SG', 'zh-hant'),
+        ]
+        r = self.rf.get('/')
+        r.COOKIES = {}
+        for value, expected in tests:
+            with self.subTest(value=value):
+                r.META = {'HTTP_ACCEPT_LANGUAGE': f'{value},en'}
+                self.assertEqual(get_language_from_request(r), expected)
+
     def test_parse_language_cookie(self):
         """
         Now test that we parse language preferences stored in a cookie correctly.
+ git diff 06fd4df41afb5aa1d681b853c3c08d8c688ca3a5
diff --git a/django/db/models/fields/related_lookups.py b/django/db/models/fields/related_lookups.py
index d745ecd5f9..a16dc9dbd5 100644
--- a/django/db/models/fields/related_lookups.py
+++ b/django/db/models/fields/related_lookups.py
@@ -79,6 +79,8 @@ class RelatedIn(In):
                         value_constraint.add(lookup, AND)
                     root_constraint.add(value_constraint, OR)
             else:
+                # Set values before creating the subquery constraint
+                self.rhs.set_values([source.name for source in self.lhs.sources])
                 root_constraint.add(
                     SubqueryConstraint(
                         self.lhs.alias, [target.column for target in self.lhs.targets],
@@ -86,18 +88,17 @@ class RelatedIn(In):
                     AND)
             return root_constraint.as_sql(compiler, connection)
         else:
-            if (not getattr(self.rhs, 'has_select_fields', True) and
-                    not getattr(self.lhs.field.target_field, 'primary_key', False)):
-                self.rhs.clear_select_clause()
-                if (getattr(self.lhs.output_field, 'primary_key', False) and
-                        self.lhs.output_field.model == self.rhs.model):
-                    # A case like Restaurant.objects.filter(place__in=restaurant_qs),
-                    # where place is a OneToOneField and the primary key of
-                    # Restaurant.
-                    target_field = self.lhs.field.name
-                else:
-                    target_field = self.lhs.field.target_field.name
-                self.rhs.add_fields([target_field], True)
+            # For __in lookups, we should always only select the target field
+            self.rhs.clear_select_clause()
+            if (getattr(self.lhs.output_field, 'primary_key', False) and
+                    self.lhs.output_field.model == self.rhs.model):
+                # A case like Restaurant.objects.filter(place__in=restaurant_qs),
+                # where place is a OneToOneField and the primary key of
+                # Restaurant.
+                target_field = self.lhs.field.name
+            else:
+                target_field = self.lhs.field.target_field.name
+            self.rhs.add_fields([target_field], True)
             return super().as_sql(compiler, connection)
 
 
diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index 7264929da8..f248cb3df9 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -139,6 +139,10 @@ class SQLCompiler:
         expressions = self.collapse_group_by(expressions, having_group_by)
 
         for expr in expressions:
+            # If this is a subquery in a GROUP BY clause, only select the primary key
+            if hasattr(expr, 'query') and expr.query.subquery:
+                expr.query.clear_select_fields()
+                expr.query.add_fields([expr.query.model._meta.pk.name])
             sql, params = self.compile(expr)
             sql, params = expr.select_format(self, sql, params)
             params_hash = make_hashable(params)
@@ -694,6 +698,14 @@ class SQLCompiler:
         # be used by local fields.
         seen_models = {None: start_alias}
 
+        # For subqueries, only select the primary key to avoid the
+        # "subquery must return only one column" error
+        if self.query.subquery:
+            field = opts.pk
+            alias = self.query.join_parent_model(opts, None, start_alias, seen_models)
+            column = field.get_col(alias)
+            return [column]
+
         for field in opts.concrete_fields:
             model = field.model._meta.concrete_model
             # A proxy model will have a different model and concrete_model. We
@@ -711,7 +723,7 @@ class SQLCompiler:
             if field.model in only_load and field.attname not in only_load[field.model]:
                 continue
             alias = self.query.join_parent_model(opts, model, start_alias,
-                                                 seen_models)
+                                               seen_models)
             column = field.get_col(alias)
             result.append(column)
         return result
@@ -1228,6 +1240,11 @@ class SQLCompiler:
         qn = compiler.quote_name_unless_alias
         qn2 = self.connection.ops.quote_name
 
+        # If this is a subquery in a GROUP BY clause, only select the target columns
+        if self.query.group_by is not None:
+            self.query.clear_select_fields()
+            self.query.add_fields([self.query.model._meta.pk.name])
+
         for index, select_col in enumerate(self.query.select):
             lhs_sql, lhs_params = self.compile(select_col)
             rhs = '%s.%s' % (qn(alias), qn2(columns[index]))
diff --git a/django/db/models/sql/where.py b/django/db/models/sql/where.py
index 795eff8395..3ef5b90743 100644
--- a/django/db/models/sql/where.py
+++ b/django/db/models/sql/where.py
@@ -117,7 +117,11 @@ class WhereNode(tree.Node):
     def get_group_by_cols(self, alias=None):
         cols = []
         for child in self.children:
-            cols.extend(child.get_group_by_cols())
+            if isinstance(child, SubqueryConstraint):
+                # For subquery constraints, only include the target columns
+                cols.extend([child.query_object.model._meta.pk.get_col(child.query_object.get_initial_alias())])
+            else:
+                cols.extend(child.get_group_by_cols())
         return cols
 
     def get_source_expressions(self):
@@ -243,6 +247,8 @@ class SubqueryConstraint:
 
     def as_sql(self, compiler, connection):
         query = self.query_object
-        query.set_values(self.targets)
+        # For subqueries in GROUP BY, only select the target fields
+        query.clear_select_fields()
+        query.add_fields(self.targets)
         query_compiler = query.get_compiler(connection=connection)
         return query_compiler.as_subquery_condition(self.alias, self.columns, compiler)
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: asgiref>=3.3.2 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0.dev20210505073754) (3.8.1)
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0.dev20210505073754) (2024.2)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0.dev20210505073754) (0.5.1)
Requirement already satisfied: typing-extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from asgiref>=3.3.2->Django==4.0.dev20210505073754) (4.12.2)
Building wheels for collected packages: Django
  Building editable for Django (pyproject.toml): started
  Building editable for Django (pyproject.toml): finished with status 'done'
  Created wheel for Django: filename=Django-4.0.dev20210505073754-0.editable-py3-none-any.whl size=26101 sha256=1055250a7d8fd93dfc5d78e4d7edbfb87d3639fce61a53b0cc26c457ad96edba
  Stored in directory: /tmp/pip-ephem-wheel-cache-h1grr98x/wheels/b2/50/f1/218f2e9962a80d01a4b1297698978f9fb3b60056aa24343f24
Successfully built Django
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 4.0.dev20210505073754
    Uninstalling Django-4.0.dev20210505073754:
      Successfully uninstalled Django-4.0.dev20210505073754
Successfully installed Django-4.0.dev20210505073754
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git checkout 06fd4df41afb5aa1d681b853c3c08d8c688ca3a5 tests/aggregation_regress/tests.py
Updated 0 paths from ab9ee29577
+ git apply -v -
Checking patch tests/aggregation_regress/tests.py...
Applied patch tests/aggregation_regress/tests.py cleanly.
+ ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 aggregation_regress.tests
Testing against Django installed in '/testbed/django'
Importing application aggregation_regress
Found 65 tests.
Skipping setup of unused database(s): other.
Operations to perform:
  Synchronize unmigrated apps: aggregation_regress, auth, contenttypes, messages, sessions, staticfiles
  Apply all migrations: admin, sites
Synchronizing apps without migrations:
  Creating tables...
    Creating table django_content_type
    Creating table auth_permission
    Creating table auth_group
    Creating table auth_user
    Creating table django_session
    Creating table aggregation_regress_author
    Creating table aggregation_regress_publisher
    Creating table aggregation_regress_itemtag
    Creating table aggregation_regress_book
    Creating table aggregation_regress_store
    Creating table aggregation_regress_entries
    Creating table aggregation_regress_clues
    Creating table aggregation_regress_withmanualpk
    Creating table aggregation_regress_hardbackbook
    Creating table aggregation_regress_alfa
    Creating table aggregation_regress_bravo
    Creating table aggregation_regress_charlie
    Creating table aggregation_regress_selfreffk
    Running deferred SQL...
Running migrations:
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying sites.0001_initial... OK
  Applying sites.0002_alter_domain_unique... OK
Creating test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
Traceback (most recent call last):
  File "./tests/runtests.py", line 596, in <module>
    failures = django_tests(
  File "./tests/runtests.py", line 332, in django_tests
    failures = test_runner.run_tests(test_labels or get_installed())
  File "/testbed/django/test/runner.py", line 765, in run_tests
    old_config = self.setup_databases(
  File "/testbed/django/test/runner.py", line 678, in setup_databases
    return _setup_databases(
  File "/testbed/django/test/utils.py", line 208, in setup_databases
    connection.creation.create_test_db(
  File "/testbed/django/db/backends/base/creation.py", line 74, in create_test_db
    call_command(
  File "/testbed/django/core/management/__init__.py", line 181, in call_command
    return command.execute(*args, **defaults)
  File "/testbed/django/core/management/base.py", line 398, in execute
    output = self.handle(*args, **options)
  File "/testbed/django/core/management/base.py", line 89, in wrapped
    res = handle_func(*args, **kwargs)
  File "/testbed/django/core/management/commands/migrate.py", line 268, in handle
    emit_post_migrate_signal(
  File "/testbed/django/core/management/sql.py", line 46, in emit_post_migrate_signal
    models.signals.post_migrate.send(
  File "/testbed/django/dispatch/dispatcher.py", line 170, in send
    return [
  File "/testbed/django/dispatch/dispatcher.py", line 171, in <listcomp>
    (receiver, receiver(signal=self, sender=sender, **named))
  File "/testbed/django/contrib/auth/management/__init__.py", line 72, in create_permissions
    all_perms = set(Permission.objects.using(using).filter(
  File "/testbed/django/db/models/query.py", line 280, in __iter__
    self._fetch_all()
  File "/testbed/django/db/models/query.py", line 1343, in _fetch_all
    self._result_cache = list(self._iterable_class(self))
  File "/testbed/django/db/models/query.py", line 140, in __iter__
    return compiler.results_iter(tuple_expected=True, chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)
  File "/testbed/django/db/models/sql/compiler.py", line 1155, in results_iter
    results = self.execute_sql(MULTI, chunked_fetch=chunked_fetch, chunk_size=chunk_size)
  File "/testbed/django/db/models/sql/compiler.py", line 1187, in execute_sql
    sql, params = self.as_sql()
  File "/testbed/django/db/models/sql/compiler.py", line 542, in as_sql
    where, w_params = self.compile(self.where) if self.where is not None else ("", [])
  File "/testbed/django/db/models/sql/compiler.py", line 459, in compile
    sql, params = node.as_sql(self, self.connection)
  File "/testbed/django/db/models/sql/where.py", line 81, in as_sql
    sql, params = compiler.compile(child)
  File "/testbed/django/db/models/sql/compiler.py", line 459, in compile
    sql, params = node.as_sql(self, self.connection)
  File "/testbed/django/db/models/fields/related_lookups.py", line 92, in as_sql
    self.rhs.clear_select_clause()
AttributeError: 'list' object has no attribute 'clear_select_clause'
+ git checkout 06fd4df41afb5aa1d681b853c3c08d8c688ca3a5 tests/aggregation_regress/tests.py
Updated 1 path from ab9ee29577
