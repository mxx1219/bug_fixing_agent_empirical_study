diff --git a/django/db/models/fields/related_lookups.py b/django/db/models/fields/related_lookups.py
index d745ecd5f9..a16dc9dbd5 100644
--- a/django/db/models/fields/related_lookups.py
+++ b/django/db/models/fields/related_lookups.py
@@ -79,6 +79,8 @@ class RelatedIn(In):
                         value_constraint.add(lookup, AND)
                     root_constraint.add(value_constraint, OR)
             else:
+                # Set values before creating the subquery constraint
+                self.rhs.set_values([source.name for source in self.lhs.sources])
                 root_constraint.add(
                     SubqueryConstraint(
                         self.lhs.alias, [target.column for target in self.lhs.targets],
@@ -86,18 +88,17 @@ class RelatedIn(In):
                     AND)
             return root_constraint.as_sql(compiler, connection)
         else:
-            if (not getattr(self.rhs, 'has_select_fields', True) and
-                    not getattr(self.lhs.field.target_field, 'primary_key', False)):
-                self.rhs.clear_select_clause()
-                if (getattr(self.lhs.output_field, 'primary_key', False) and
-                        self.lhs.output_field.model == self.rhs.model):
-                    # A case like Restaurant.objects.filter(place__in=restaurant_qs),
-                    # where place is a OneToOneField and the primary key of
-                    # Restaurant.
-                    target_field = self.lhs.field.name
-                else:
-                    target_field = self.lhs.field.target_field.name
-                self.rhs.add_fields([target_field], True)
+            # For __in lookups, we should always only select the target field
+            self.rhs.clear_select_clause()
+            if (getattr(self.lhs.output_field, 'primary_key', False) and
+                    self.lhs.output_field.model == self.rhs.model):
+                # A case like Restaurant.objects.filter(place__in=restaurant_qs),
+                # where place is a OneToOneField and the primary key of
+                # Restaurant.
+                target_field = self.lhs.field.name
+            else:
+                target_field = self.lhs.field.target_field.name
+            self.rhs.add_fields([target_field], True)
             return super().as_sql(compiler, connection)
 
 
diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index 7264929da8..f248cb3df9 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -139,6 +139,10 @@ class SQLCompiler:
         expressions = self.collapse_group_by(expressions, having_group_by)
 
         for expr in expressions:
+            # If this is a subquery in a GROUP BY clause, only select the primary key
+            if hasattr(expr, 'query') and expr.query.subquery:
+                expr.query.clear_select_fields()
+                expr.query.add_fields([expr.query.model._meta.pk.name])
             sql, params = self.compile(expr)
             sql, params = expr.select_format(self, sql, params)
             params_hash = make_hashable(params)
@@ -694,6 +698,14 @@ class SQLCompiler:
         # be used by local fields.
         seen_models = {None: start_alias}
 
+        # For subqueries, only select the primary key to avoid the
+        # "subquery must return only one column" error
+        if self.query.subquery:
+            field = opts.pk
+            alias = self.query.join_parent_model(opts, None, start_alias, seen_models)
+            column = field.get_col(alias)
+            return [column]
+
         for field in opts.concrete_fields:
             model = field.model._meta.concrete_model
             # A proxy model will have a different model and concrete_model. We
@@ -711,7 +723,7 @@ class SQLCompiler:
             if field.model in only_load and field.attname not in only_load[field.model]:
                 continue
             alias = self.query.join_parent_model(opts, model, start_alias,
-                                                 seen_models)
+                                               seen_models)
             column = field.get_col(alias)
             result.append(column)
         return result
@@ -1228,6 +1240,11 @@ class SQLCompiler:
         qn = compiler.quote_name_unless_alias
         qn2 = self.connection.ops.quote_name
 
+        # If this is a subquery in a GROUP BY clause, only select the target columns
+        if self.query.group_by is not None:
+            self.query.clear_select_fields()
+            self.query.add_fields([self.query.model._meta.pk.name])
+
         for index, select_col in enumerate(self.query.select):
             lhs_sql, lhs_params = self.compile(select_col)
             rhs = '%s.%s' % (qn(alias), qn2(columns[index]))
diff --git a/django/db/models/sql/where.py b/django/db/models/sql/where.py
index 795eff8395..3ef5b90743 100644
--- a/django/db/models/sql/where.py
+++ b/django/db/models/sql/where.py
@@ -117,7 +117,11 @@ class WhereNode(tree.Node):
     def get_group_by_cols(self, alias=None):
         cols = []
         for child in self.children:
-            cols.extend(child.get_group_by_cols())
+            if isinstance(child, SubqueryConstraint):
+                # For subquery constraints, only include the target columns
+                cols.extend([child.query_object.model._meta.pk.get_col(child.query_object.get_initial_alias())])
+            else:
+                cols.extend(child.get_group_by_cols())
         return cols
 
     def get_source_expressions(self):
@@ -243,6 +247,8 @@ class SubqueryConstraint:
 
     def as_sql(self, compiler, connection):
         query = self.query_object
-        query.set_values(self.targets)
+        # For subqueries in GROUP BY, only select the target fields
+        query.clear_select_fields()
+        query.add_fields(self.targets)
         query_compiler = query.get_compiler(connection=connection)
         return query_compiler.as_subquery_condition(self.alias, self.columns, compiler)
