diff --git a/django/db/models/base.py b/django/db/models/base.py
index 55b1691166..5654d9c5b5 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -872,6 +872,8 @@ class Model(metaclass=ModelBase):
             results = self._do_insert(cls._base_manager, using, fields, returning_fields, raw)
             if results:
                 for value, field in zip(results[0], returning_fields):
+                    if hasattr(field, 'from_db_value'):
+                        value = field.from_db_value(value, None, connection)
                     setattr(self, field.attname, value)
         return updated
 
diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index f02199d97c..eb3ec3d323 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -1412,10 +1412,18 @@ class SQLInsertCompiler(SQLCompiler):
             if not self.returning_fields:
                 return []
             if self.connection.features.can_return_rows_from_bulk_insert and len(self.query.objs) > 1:
-                return self.connection.ops.fetch_returned_insert_rows(cursor)
+                rows = self.connection.ops.fetch_returned_insert_rows(cursor)
+                converters = self.get_converters(self.returning_fields)
+                if converters:
+                    rows = list(self.apply_converters(rows, converters))
+                return rows
             if self.connection.features.can_return_columns_from_insert:
                 assert len(self.query.objs) == 1
-                return [self.connection.ops.fetch_returned_insert_columns(cursor, self.returning_params)]
+                rows = [self.connection.ops.fetch_returned_insert_columns(cursor, self.returning_params)]
+                converters = self.get_converters(self.returning_fields)
+                if converters:
+                    rows = list(self.apply_converters(rows, converters))
+                return rows
             return [(self.connection.ops.last_insert_id(
                 cursor, self.query.get_meta().db_table, self.query.get_meta().pk.column
             ),)]
