diff --git a/django/db/backends/mysql/schema.py b/django/db/backends/mysql/schema.py
index 562b209eef..3eb35b0e07 100644
--- a/django/db/backends/mysql/schema.py
+++ b/django/db/backends/mysql/schema.py
@@ -167,8 +167,28 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):
 
     def _alter_column_type_sql(self, model, old_field, new_field, new_type):
         new_type = self._set_field_new_type_null_status(old_field, new_type)
+        new_type = self._set_field_collation(new_field, new_type)
         return super()._alter_column_type_sql(model, old_field, new_field, new_type)
 
+    def _set_field_collation(self, field, column_type):
+        """Add collation to a column type if needed."""
+        if (hasattr(field, 'remote_field') and field.remote_field and 
+            field.remote_field.model and field.remote_field.field_name):
+            target_field = field.remote_field.model._meta.get_field(
+                field.remote_field.field_name)
+            target_db_params = target_field.db_parameters(connection=self.connection)
+            if collation := target_db_params.get('collation'):
+                return f"{column_type} COLLATE {collation}"
+        return column_type
+
+    def column_sql(self, model, field, include_default=False):
+        """Add collation to column definition for foreign keys."""
+        definition, params = super().column_sql(model, field, include_default)
+        if definition is None:
+            return None, None
+        definition = self._set_field_collation(field, definition)
+        return definition, params
+
     def _rename_field_sql(self, table, old_field, new_field, new_type):
         new_type = self._set_field_new_type_null_status(old_field, new_type)
         return super()._rename_field_sql(table, old_field, new_field, new_type)
