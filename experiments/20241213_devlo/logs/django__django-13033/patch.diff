diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index abbb1e37cb..febeb933d0 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -727,7 +727,10 @@ class SQLCompiler:
         # If we get to this point and the field is a relation to another model,
         # append the default ordering for that model unless it is the pk
         # shortcut or the attribute name of the field that is specified.
-        if field.is_relation and opts.ordering and getattr(field, 'attname', None) != name and name != 'pk':
+        if (field.is_relation and opts.ordering and 
+            getattr(field, 'attname', None) != name and 
+            name != 'pk' and 
+            not (field.is_relation and name.endswith('_id'))):
             # Firstly, avoid infinite loops.
             already_seen = already_seen or set()
             join_tuple = tuple(getattr(self.query.alias_map[j], 'join_cols', None) for j in joins)
diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index d65141b834..85f751c43b 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1445,7 +1445,17 @@ class Query(BaseExpression):
             field = None
             filtered_relation = None
             try:
-                field = opts.get_field(name)
+                # Handle _id suffix for foreign keys
+                if name.endswith('_id'):
+                    try:
+                        field = opts.get_field(name[:-3])
+                        if field.is_relation:
+                            name = name[:-3]
+                            field = opts.get_field(name)
+                    except FieldDoesNotExist:
+                        field = opts.get_field(name)
+                else:
+                    field = opts.get_field(name)
             except FieldDoesNotExist:
                 if name in self.annotation_select:
                     field = self.annotation_select[name].output_field
