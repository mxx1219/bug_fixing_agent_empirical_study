
sympy/core/basic.py

 313⋮ 313│             try:
 314⋮ 314│                 other = _sympify(other)
 315⋮ 315│             except SympifyError:
 316⋮    │-                return False    # sympy != other
    ⋮ 316│+                return NotImplemented
 317⋮ 317│ 
 318⋮ 318│             if type(self) != type(other):
 319⋮ 319│                 return False

 329⋮ 329│ 
 330⋮ 330│            but faster
 331⋮ 331│         """
 332⋮    │-        return not self.__eq__(other)
    ⋮ 332│+        return not self == other
 333⋮ 333│ 
 334⋮ 334│     def dummy_eq(self, other, symbol=None):
 335⋮ 335│         """

1180⋮1180│ 
1181⋮1181│     def _has_matcher(self):
1182⋮1182│         """Helper for .has()"""
1183⋮    │-        return self.__eq__
    ⋮1183│+        return lambda other: self == other
1184⋮1184│ 
1185⋮1185│     def replace(self, query, value, map=False, simultaneous=True, exact=False):
1186⋮1186│         """

sympy/core/exprtools.py

 797⋮ 797│         return self.factors == other.factors
 798⋮ 798│ 
 799⋮ 799│     def __ne__(self, other):  # Factors
 800⋮    │-        return not self.__eq__(other)
    ⋮ 800│+        return not self == other
 801⋮ 801│ 
 802⋮ 802│ 
 803⋮ 803│ class Term(object):

 909⋮ 909│                 self.denom == other.denom)
 910⋮ 910│ 
 911⋮ 911│     def __ne__(self, other):  # Term
 912⋮    │-        return not self.__eq__(other)
    ⋮ 912│+        return not self == other
 913⋮ 913│ 
 914⋮ 914│ 
 915⋮ 915│ def _gcd_terms(terms, isprimitive=False, fraction=True):

sympy/core/numbers.py

1258⋮1258│         try:
1259⋮1259│             other = _sympify(other)
1260⋮1260│         except SympifyError:
1261⋮    │-            return False    # sympy != other  -->  not ==
    ⋮1261│+            return NotImplemented
1262⋮1262│         if isinstance(other, NumberSymbol):
1263⋮1263│             if other.is_irrational:
1264⋮1264│                 return False

1276⋮1276│         return False    # Float != non-Number
1277⋮1277│ 
1278⋮1278│     def __ne__(self, other):
1279⋮    │-        return not self.__eq__(other)
    ⋮1279│+        return not self == other
1280⋮1280│ 
1281⋮1281│     def __gt__(self, other):
1282⋮1282│         try:

1284⋮1284│         except SympifyError:
1285⋮1285│             raise TypeError("Invalid comparison %s > %s" % (self, other))
1286⋮1286│         if isinstance(other, NumberSymbol):
1287⋮    │-            return other.__le__(self)
    ⋮1287│+            return other.__lt__(self)
1288⋮1288│         if other.is_comparable:
1289⋮1289│             other = other.evalf()
1290⋮1290│         if isinstance(other, Number) and other is not S.NaN:

1298⋮1298│         except SympifyError:
1299⋮1299│             raise TypeError("Invalid comparison %s >= %s" % (self, other))
1300⋮1300│         if isinstance(other, NumberSymbol):
1301⋮    │-            return other.__lt__(self)
    ⋮1301│+            return other.__le__(self)
1302⋮1302│         if other.is_comparable:
1303⋮1303│             other = other.evalf()
1304⋮1304│         if isinstance(other, Number) and other is not S.NaN:

1312⋮1312│         except SympifyError:
1313⋮1313│             raise TypeError("Invalid comparison %s < %s" % (self, other))
1314⋮1314│         if isinstance(other, NumberSymbol):
1315⋮    │-            return other.__ge__(self)
    ⋮1315│+            return other.__gt__(self)
1316⋮1316│         if other.is_real and other.is_number:
1317⋮1317│             other = other.evalf()
1318⋮1318│         if isinstance(other, Number) and other is not S.NaN:

1326⋮1326│         except SympifyError:
1327⋮1327│             raise TypeError("Invalid comparison %s <= %s" % (self, other))
1328⋮1328│         if isinstance(other, NumberSymbol):
1329⋮    │-            return other.__gt__(self)
    ⋮1329│+            return other.__ge__(self)
1330⋮1330│         if other.is_real and other.is_number:
1331⋮1331│             other = other.evalf()
1332⋮1332│         if isinstance(other, Number) and other is not S.NaN:

1719⋮1719│         try:
1720⋮1720│             other = _sympify(other)
1721⋮1721│         except SympifyError:
1722⋮    │-            return False    # sympy != other  -->  not ==
    ⋮1722│+            return NotImplemented
1723⋮1723│         if isinstance(other, NumberSymbol):
1724⋮1724│             if other.is_irrational:
1725⋮1725│                 return False

1734⋮1734│         return False
1735⋮1735│ 
1736⋮1736│     def __ne__(self, other):
1737⋮    │-        return not self.__eq__(other)
    ⋮1737│+        return not self == other
1738⋮1738│ 
1739⋮1739│     def __gt__(self, other):
1740⋮1740│         try:

1742⋮1742│         except SympifyError:
1743⋮1743│             raise TypeError("Invalid comparison %s > %s" % (self, other))
1744⋮1744│         if isinstance(other, NumberSymbol):
1745⋮    │-            return other.__le__(self)
    ⋮1745│+            return other.__lt__(self)
1746⋮1746│         expr = self
1747⋮1747│         if isinstance(other, Number):
1748⋮1748│             if isinstance(other, Rational):

1760⋮1760│         except SympifyError:
1761⋮1761│             raise TypeError("Invalid comparison %s >= %s" % (self, other))
1762⋮1762│         if isinstance(other, NumberSymbol):
1763⋮    │-            return other.__lt__(self)
    ⋮1763│+            return other.__le__(self)
1764⋮1764│         expr = self
1765⋮1765│         if isinstance(other, Number):
1766⋮1766│             if isinstance(other, Rational):

1778⋮1778│         except SympifyError:
1779⋮1779│             raise TypeError("Invalid comparison %s < %s" % (self, other))
1780⋮1780│         if isinstance(other, NumberSymbol):
1781⋮    │-            return other.__ge__(self)
    ⋮1781│+            return other.__gt__(self)
1782⋮1782│         expr = self
1783⋮1783│         if isinstance(other, Number):
1784⋮1784│             if isinstance(other, Rational):

1797⋮1797│             raise TypeError("Invalid comparison %s <= %s" % (self, other))
1798⋮1798│         expr = self
1799⋮1799│         if isinstance(other, NumberSymbol):
1800⋮    │-            return other.__gt__(self)
    ⋮1800│+            return other.__ge__(self)
1801⋮1801│         elif isinstance(other, Number):
1802⋮1802│             if isinstance(other, Rational):
1803⋮1803│                 return _sympify(bool(self.p*other.q <= self.q*other.p))

2112⋮2112│         return Rational.__eq__(self, other)
2113⋮2113│ 
2114⋮2114│     def __ne__(self, other):
2115⋮    │-        return not self.__eq__(other)
    ⋮2115│+        return not self == other
2116⋮2116│ 
2117⋮2117│     def __gt__(self, other):
2118⋮2118│         try:

3339⋮3339│         try:
3340⋮3340│             other = _sympify(other)
3341⋮3341│         except SympifyError:
3342⋮    │-            return False    # sympy != other  -->  not ==
    ⋮3342│+            return NotImplemented
3343⋮3343│         if self is other:
3344⋮3344│             return True
3345⋮3345│         if isinstance(other, Number) and self.is_irrational:

3348⋮3348│         return False    # NumberSymbol != non-(Number|self)
3349⋮3349│ 
3350⋮3350│     def __ne__(self, other):
3351⋮    │-        return not self.__eq__(other)
    ⋮3351│+        return not self == other
3352⋮3352│ 
3353⋮3353│     def __lt__(self, other):
3354⋮3354│         try:

sympy/geometry/entity.py

 104⋮ 104│ 
 105⋮ 105│     def __ne__(self, o):
 106⋮ 106│         """Test inequality of two geometrical entities."""
 107⋮    │-        return not self.__eq__(o)
    ⋮ 107│+        return not self == o
 108⋮ 108│ 
 109⋮ 109│     def __new__(cls, *args, **kwargs):
 110⋮ 110│         # Points are sequences, but they should not

sympy/physics/optics/medium.py

 183⋮ 183│         return self.refractive_index < other.refractive_index
 184⋮ 184│ 
 185⋮ 185│     def __gt__(self, other):
 186⋮    │-        return not self.__lt__(other)
    ⋮ 186│+        return not self < other
 187⋮ 187│ 
 188⋮ 188│     def __eq__(self, other):
 189⋮ 189│         return self.refractive_index == other.refractive_index
 190⋮ 190│ 
 191⋮ 191│     def __ne__(self, other):
 192⋮    │-        return not self.__eq__(other)
    ⋮ 192│+        return not self == other

sympy/physics/vector/dyadic.py

 147⋮ 147│         return Dyadic(newlist)
 148⋮ 148│ 
 149⋮ 149│     def __ne__(self, other):
 150⋮    │-        return not self.__eq__(other)
    ⋮ 150│+        return not self == other
 151⋮ 151│ 
 152⋮ 152│     def __neg__(self):
 153⋮ 153│         return self * -1

sympy/physics/vector/frame.py

 70 ⋮ 70 │         return False
 71 ⋮ 71 │ 
 72 ⋮ 72 │     def __ne__(self, other):
 73 ⋮    │-        return not self.__eq__(other)
    ⋮ 73 │+        return not self == other
 74 ⋮ 74 │ 
 75 ⋮ 75 │     def __hash__(self):
 76 ⋮ 76 │         return tuple((self._id[0].__hash__(), self._id[1])).__hash__()

sympy/physics/vector/vector.py

 166⋮ 166│         return Vector(newlist)
 167⋮ 167│ 
 168⋮ 168│     def __ne__(self, other):
 169⋮    │-        return not self.__eq__(other)
    ⋮ 169│+        return not self == other
 170⋮ 170│ 
 171⋮ 171│     def __neg__(self):
 172⋮ 172│         return self * -1

sympy/polys/agca/modules.py

 250⋮ 250│         return self.eq(self.data, om.data)
 251⋮ 251│ 
 252⋮ 252│     def __ne__(self, om):
 253⋮    │-        return not self.__eq__(om)
    ⋮ 253│+        return not self == om
 254⋮ 254│ 
 255⋮ 255│ ##########################################################################
 256⋮ 256│ ## Free Modules ##########################################################

sympy/polys/domains/domain.py

 343⋮ 343│ 
 344⋮ 344│     def __ne__(self, other):
 345⋮ 345│         """Returns ``False`` if two domains are equivalent. """
 346⋮    │-        return not self.__eq__(other)
    ⋮ 346│+        return not self == other
 347⋮ 347│ 
 348⋮ 348│     def map(self, seq):
 349⋮ 349│         """Rersively apply ``self`` to all elements of ``seq``. """

sympy/polys/domains/expressiondomain.py

 119⋮ 119│             return f.ex == f.__class__(g).ex
 120⋮ 120│ 
 121⋮ 121│         def __ne__(f, g):
 122⋮    │-            return not f.__eq__(g)
    ⋮ 122│+            return not f == g
 123⋮ 123│ 
 124⋮ 124│         def __nonzero__(f):
 125⋮ 125│             return f.ex != 0

sympy/polys/domains/pythonrational.py

 248⋮ 248│             return False
 249⋮ 249│ 
 250⋮ 250│     def __ne__(self, other):
 251⋮    │-        return not self.__eq__(other)
    ⋮ 251│+        return not self == other
 252⋮ 252│ 
 253⋮ 253│     def _cmp(self, other, op):
 254⋮ 254│         try:

sympy/polys/domains/quotientring.py

 85 ⋮ 85 │         return self.ring.is_zero(self - om)
 86 ⋮ 86 │ 
 87 ⋮ 87 │     def __ne__(self, om):
 88 ⋮    │-        return not self.__eq__(om)
    ⋮ 88 │+        return not self == om
 89 ⋮ 89 │ 
 90 ⋮ 90 │ 
 91 ⋮ 91 │ class QuotientRing(Ring):

sympy/polys/fields.py

 151⋮ 151│             (other.symbols, other.ngens, other.domain, other.order)
 152⋮ 152│ 
 153⋮ 153│     def __ne__(self, other):
 154⋮    │-        return not self.__eq__(other)
    ⋮ 154│+        return not self == other
 155⋮ 155│ 
 156⋮ 156│     def raw_new(self, numer, denom=None):
 157⋮ 157│         return self.dtype(numer, denom)

 302⋮ 302│             return f.numer == g and f.denom == f.field.ring.one
 303⋮ 303│ 
 304⋮ 304│     def __ne__(f, g):
 305⋮    │-        return not f.__eq__(g)
    ⋮ 305│+        return not f == g
 306⋮ 306│ 
 307⋮ 307│     def __nonzero__(f):
 308⋮ 308│         return bool(f.numer)

sympy/polys/monomials.py

 446⋮ 446│         return self.exponents == exponents
 447⋮ 447│ 
 448⋮ 448│     def __ne__(self, other):
 449⋮    │-        return not self.__eq__(other)
    ⋮ 449│+        return not self == other
 450⋮ 450│ 
 451⋮ 451│     def __mul__(self, other):
 452⋮ 452│         if isinstance(other, Monomial):

sympy/polys/polyclasses.py

1000⋮1000│         return False
1001⋮1001│ 
1002⋮1002│     def __ne__(f, g):
1003⋮    │-        return not f.__eq__(g)
    ⋮1003│+        return not f == g
1004⋮1004│ 
1005⋮1005│     def eq(f, g, strict=False):
1006⋮1006│         if not strict:
1007⋮    │-            return f.__eq__(g)
    ⋮1007│+            return f == g
1008⋮1008│         else:
1009⋮1009│             return f._strict_eq(g)
1010⋮1010│ 

1018⋮1018│ 
1019⋮1019│     def __lt__(f, g):
1020⋮1020│         _, _, _, F, G = f.unify(g)
1021⋮    │-        return F.__lt__(G)
    ⋮1021│+        return F < G
1022⋮1022│ 
1023⋮1023│     def __le__(f, g):
1024⋮1024│         _, _, _, F, G = f.unify(g)
1025⋮    │-        return F.__le__(G)
    ⋮1025│+        return F <= G
1026⋮1026│ 
1027⋮1027│     def __gt__(f, g):
1028⋮1028│         _, _, _, F, G = f.unify(g)
1029⋮    │-        return F.__gt__(G)
    ⋮1029│+        return F > G
1030⋮1030│ 
1031⋮1031│     def __ge__(f, g):
1032⋮1032│         _, _, _, F, G = f.unify(g)
1033⋮    │-        return F.__ge__(G)
    ⋮1033│+        return F >= G
1034⋮1034│ 
1035⋮1035│     def __nonzero__(f):
1036⋮1036│         return not dmp_zero_p(f.rep, f.lev)

1465⋮1465│ 
1466⋮1466│     def __lt__(f, g):
1467⋮1467│         _, _, _, F, G = f.frac_unify(g)
1468⋮    │-        return F.__lt__(G)
    ⋮1468│+        return F < G
1469⋮1469│ 
1470⋮1470│     def __le__(f, g):
1471⋮1471│         _, _, _, F, G = f.frac_unify(g)
1472⋮    │-        return F.__le__(G)
    ⋮1472│+        return F <= G
1473⋮1473│ 
1474⋮1474│     def __gt__(f, g):
1475⋮1475│         _, _, _, F, G = f.frac_unify(g)
1476⋮    │-        return F.__gt__(G)
    ⋮1476│+        return F > G
1477⋮1477│ 
1478⋮1478│     def __ge__(f, g):
1479⋮1479│         _, _, _, F, G = f.frac_unify(g)
1480⋮    │-        return F.__ge__(G)
    ⋮1480│+        return F >= G
1481⋮1481│ 
1482⋮1482│     def __nonzero__(f):
1483⋮1483│         return not dmp_zero_p(f.num, f.lev)

1730⋮1730│ 
1731⋮1731│     def __lt__(f, g):
1732⋮1732│         _, _, F, G, _ = f.unify(g)
1733⋮    │-        return F.__lt__(G)
    ⋮1733│+        return F < G
1734⋮1734│ 
1735⋮1735│     def __le__(f, g):
1736⋮1736│         _, _, F, G, _ = f.unify(g)
1737⋮    │-        return F.__le__(G)
    ⋮1737│+        return F <= G
1738⋮1738│ 
1739⋮1739│     def __gt__(f, g):
1740⋮1740│         _, _, F, G, _ = f.unify(g)
1741⋮    │-        return F.__gt__(G)
    ⋮1741│+        return F > G
1742⋮1742│ 
1743⋮1743│     def __ge__(f, g):
1744⋮1744│         _, _, F, G, _ = f.unify(g)
1745⋮    │-        return F.__ge__(G)
    ⋮1745│+        return F >= G
1746⋮1746│ 
1747⋮1747│     def __nonzero__(f):
1748⋮1748│         return bool(f.rep)

sympy/polys/polytools.py

4109⋮4109│ 
4110⋮4110│     @_sympifyit('g', NotImplemented)
4111⋮4111│     def __ne__(f, g):
4112⋮    │-        return not f.__eq__(g)
    ⋮4112│+        return not f == g
4113⋮4113│ 
4114⋮4114│     def __nonzero__(f):
4115⋮4115│         return not f.is_zero

4118⋮4118│ 
4119⋮4119│     def eq(f, g, strict=False):
4120⋮4120│         if not strict:
4121⋮    │-            return f.__eq__(g)
    ⋮4121│+            return f == g
4122⋮4122│         else:
4123⋮4123│             return f._strict_eq(sympify(g))
4124⋮4124│ 

6700⋮6700│             return False
6701⋮6701│ 
6702⋮6702│     def __ne__(self, other):
6703⋮    │-        return not self.__eq__(other)
    ⋮6703│+        return not self == other
6704⋮6704│ 
6705⋮6705│     @property
6706⋮6706│     def is_zero_dimensional(self):

sympy/polys/rings.py

 286⋮ 286│             (other.symbols, other.domain, other.ngens, other.order)
 287⋮ 287│ 
 288⋮ 288│     def __ne__(self, other):
 289⋮    │-        return not self.__eq__(other)
    ⋮ 289│+        return not self == other
 290⋮ 290│ 
 291⋮ 291│     def clone(self, symbols=None, domain=None, order=None):
 292⋮ 292│         return self.__class__(symbols or self.symbols, domain or self.domain, order or self.order)

 665⋮ 665│             return p1.get(p1.ring.zero_monom) == p2
 666⋮ 666│ 
 667⋮ 667│     def __ne__(p1, p2):
 668⋮    │-        return not p1.__eq__(p2)
    ⋮ 668│+        return not p1 == p2
 669⋮ 669│ 
 670⋮ 670│     def almosteq(p1, p2, tolerance=None):
 671⋮ 671│         """Approximate equality test for polynomials. """

sympy/polys/rootoftools.py

 709⋮ 709│         # CRootOf instance. It must also be a number that agrees with the
 710⋮ 710│         # is_real value of the CRootOf instance.
 711⋮ 711│         if type(self) == type(other):
 712⋮    │-            return sympify(self.__eq__(other))
    ⋮ 712│+            return sympify(self == other)
 713⋮ 713│         if not (other.is_number and not other.has(AppliedUndef)):
 714⋮ 714│             return S.false
 715⋮ 715│         if not other.is_finite:

sympy/tensor/array/ndim_array.py

 367⋮ 367│         return (self.shape == other.shape) and (list(self) == list(other))
 368⋮ 368│ 
 369⋮ 369│     def __ne__(self, other):
 370⋮    │-        return not self.__eq__(other)
    ⋮ 370│+        return not self == other
 371⋮ 371│ 
 372⋮ 372│     __truediv__ = __div__
 373⋮ 373│     __rtruediv__ = __rdiv__

sympy/utilities/enumerative.py

 129⋮ 129│ 
 130⋮ 130│     def __ne__(self, other):
 131⋮ 131│         """Defined for consistency with __eq__"""
 132⋮    │-        return not self.__eq__(other)
    ⋮ 132│+        return not self == other
 133⋮ 133│ 
 134⋮ 134│ 
 135⋮ 135│ # This function tries to be a faithful implementation of algorithm
