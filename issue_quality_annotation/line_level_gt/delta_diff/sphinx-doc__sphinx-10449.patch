
sphinx/ext/autodoc/typehints.py

 59 ⋮ 59 │ 
 60 ⋮ 60 │         for field_list in field_lists:
 61 ⋮ 61 │             if app.config.autodoc_typehints_description_target == "all":
 62 ⋮    │-                modify_field_list(field_list, annotations[fullname])
    ⋮ 62 │+                if objtype == 'class':
    ⋮ 63 │+                    modify_field_list(field_list, annotations[fullname], suppress_rtype=True)
    ⋮ 64 │+                else:
    ⋮ 65 │+                    modify_field_list(field_list, annotations[fullname])
 63 ⋮ 66 │             elif app.config.autodoc_typehints_description_target == "documented_params":
 64 ⋮ 67 │                 augment_descriptions_with_types(
 65 ⋮ 68 │                     field_list, annotations[fullname], force_rtype=True

 83 ⋮ 86 │     return field_list
 84 ⋮ 87 │ 
 85 ⋮ 88 │ 
 86 ⋮    │-def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> None:
    ⋮ 89 │+def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],
    ⋮ 90 │+                      suppress_rtype: bool = False) -> None:
 87 ⋮ 91 │     arguments: Dict[str, Dict[str, bool]] = {}
 88 ⋮ 92 │     fields = cast(Iterable[nodes.field], node)
 89 ⋮ 93 │     for field in fields:

 124⋮ 128│             node += field
 125⋮ 129│ 
 126⋮ 130│     if 'return' in annotations and 'return' not in arguments:
    ⋮ 131│+        annotation = annotations['return']
    ⋮ 132│+        if annotation == 'None' and suppress_rtype:
    ⋮ 133│+            return
    ⋮ 134│+
 127⋮ 135│         field = nodes.field()
 128⋮ 136│         field += nodes.field_name('', 'rtype')
 129⋮ 137│         field += nodes.field_body('', nodes.paragraph('', annotation))
