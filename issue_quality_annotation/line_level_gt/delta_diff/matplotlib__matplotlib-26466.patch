
lib/matplotlib/text.py

1389⋮1389│             The screen units to use (pixels or points) for the offset input.
1390⋮1390│         """
1391⋮1391│         self._artist = artist
1392⋮    │-        self._ref_coord = ref_coord
    ⋮1392│+        x, y = ref_coord  # Make copy when ref_coord is an array (and check the shape).
    ⋮1393│+        self._ref_coord = x, y
1393⋮1394│         self.set_unit(unit)
1394⋮1395│ 
1395⋮1396│     def set_unit(self, unit):

1407⋮1408│         """Return the unit for input to the transform used by ``__call__``."""
1408⋮1409│         return self._unit
1409⋮1410│ 
1410⋮    │-    def _get_scale(self, renderer):
1411⋮    │-        unit = self.get_unit()
1412⋮    │-        if unit == "pixels":
1413⋮    │-            return 1.
1414⋮    │-        else:
1415⋮    │-            return renderer.points_to_pixels(1.)
1416⋮    │-
1417⋮1411│     def __call__(self, renderer):
1418⋮1412│         """
1419⋮1413│         Return the offset transform.

1443⋮1437│             x, y = self._artist.transform(self._ref_coord)
1444⋮1438│         else:
1445⋮1439│             _api.check_isinstance((Artist, BboxBase, Transform), artist=self._artist)
1446⋮    │-
1447⋮    │-        sc = self._get_scale(renderer)
1448⋮    │-        tr = Affine2D().scale(sc).translate(x, y)
1449⋮    │-
1450⋮    │-        return tr
    ⋮1440│+        scale = 1 if self._unit == "pixels" else renderer.points_to_pixels(1)
    ⋮1441│+        return Affine2D().scale(scale).translate(x, y)
1451⋮1442│ 
1452⋮1443│ 
1453⋮1444│ class _AnnotationBase:

1456⋮1447│                  xycoords='data',
1457⋮1448│                  annotation_clip=None):
1458⋮1449│ 
1459⋮    │-        self.xy = xy
    ⋮1450│+        x, y = xy  # Make copy when xy is an array (and check the shape).
    ⋮1451│+        self.xy = x, y
1460⋮1452│         self.xycoords = xycoords
1461⋮1453│         self.set_annotation_clip(annotation_clip)
1462⋮1454│ 
