
django/db/backends/base/schema.py

 823⋮ 823│                 self.execute(self._delete_unique_sql(model, constraint_name))
 824⋮ 824│         # Drop incoming FK constraints if the field is a primary key or unique,
 825⋮ 825│         # which might be a to_field target, and things are going to change.
    ⋮ 826│+        old_collation = old_db_params.get("collation")
    ⋮ 827│+        new_collation = new_db_params.get("collation")
 826⋮ 828│         drop_foreign_keys = (
 827⋮ 829│             self.connection.features.supports_foreign_keys
 828⋮ 830│             and (
 829⋮ 831│                 (old_field.primary_key and new_field.primary_key)
 830⋮ 832│                 or (old_field.unique and new_field.unique)
 831⋮ 833│             )
 832⋮    │-            and old_type != new_type
    ⋮ 834│+            and ((old_type != new_type) or (old_collation != new_collation))
 833⋮ 835│         )
 834⋮ 836│         if drop_foreign_keys:
 835⋮ 837│             # '_meta.related_field' also contains M2M reverse fields, these

 914⋮ 916│         old_type_suffix = old_field.db_type_suffix(connection=self.connection)
 915⋮ 917│         new_type_suffix = new_field.db_type_suffix(connection=self.connection)
 916⋮ 918│         # Collation change?
 917⋮    │-        old_collation = old_db_params.get("collation")
 918⋮    │-        new_collation = new_db_params.get("collation")
 919⋮ 919│         if old_collation != new_collation:
 920⋮ 920│             # Collation change handles also a type change.
 921⋮ 921│             fragment = self._alter_column_collation_sql(

1038⋮1038│         for old_rel, new_rel in rels_to_update:
1039⋮1039│             rel_db_params = new_rel.field.db_parameters(connection=self.connection)
1040⋮1040│             rel_type = rel_db_params["type"]
1041⋮    │-            fragment, other_actions = self._alter_column_type_sql(
1042⋮    │-                new_rel.related_model, old_rel.field, new_rel.field, rel_type
1043⋮    │-            )
    ⋮1041│+            rel_collation = rel_db_params.get("collation")
    ⋮1042│+            old_rel_db_params = old_rel.field.db_parameters(connection=self.connection)
    ⋮1043│+            old_rel_collation = old_rel_db_params.get("collation")
    ⋮1044│+            if old_rel_collation != rel_collation:
    ⋮1045│+                # Collation change handles also a type change.
    ⋮1046│+                fragment = self._alter_column_collation_sql(
    ⋮1047│+                    new_rel.related_model,
    ⋮1048│+                    new_rel.field,
    ⋮1049│+                    rel_type,
    ⋮1050│+                    rel_collation,
    ⋮1051│+                )
    ⋮1052│+                other_actions = []
    ⋮1053│+            else:
    ⋮1054│+                fragment, other_actions = self._alter_column_type_sql(
    ⋮1055│+                    new_rel.related_model, old_rel.field, new_rel.field, rel_type
    ⋮1056│+                )
1044⋮1057│             self.execute(
1045⋮1058│                 self.sql_alter_column
1046⋮1059│                 % {

django/db/backends/oracle/features.py

 104⋮ 104│         "Raises ORA-00600: internal error code.": {
 105⋮ 105│             "model_fields.test_jsonfield.TestQuerying.test_usage_in_subquery",
 106⋮ 106│         },
    ⋮ 107│+        "Oracle doesn't support changing collations on indexed columns (#33671).": {
    ⋮ 108│+            "migrations.test_operations.OperationTests."
    ⋮ 109│+            "test_alter_field_pk_fk_db_collation",
    ⋮ 110│+        },
 107⋮ 111│     }
 108⋮ 112│     django_test_expected_failures = {
 109⋮ 113│         # A bug in Django/cx_Oracle with respect to string handling (#23843).

django/db/backends/sqlite3/schema.py

 455⋮ 455│         # Alter by remaking table
 456⋮ 456│         self._remake_table(model, alter_field=(old_field, new_field))
 457⋮ 457│         # Rebuild tables with FKs pointing to this field.
 458⋮    │-        if new_field.unique and old_type != new_type:
    ⋮ 458│+        old_collation = old_db_params.get("collation")
    ⋮ 459│+        new_collation = new_db_params.get("collation")
    ⋮ 460│+        if new_field.unique and (
    ⋮ 461│+            old_type != new_type or old_collation != new_collation
    ⋮ 462│+        ):
 459⋮ 463│             related_models = set()
 460⋮ 464│             opts = new_field.model._meta
 461⋮ 465│             for remote_field in opts.related_objects:

django/db/models/fields/related.py

1180⋮1180│         return self.target_field.rel_db_type(connection=connection)
1181⋮1181│ 
1182⋮1182│     def db_parameters(self, connection):
1183⋮    │-        return {"type": self.db_type(connection), "check": self.db_check(connection)}
    ⋮1183│+        target_db_parameters = self.target_field.db_parameters(connection)
    ⋮1184│+        return {
    ⋮1185│+            "type": self.db_type(connection),
    ⋮1186│+            "check": self.db_check(connection),
    ⋮1187│+            "collation": target_db_parameters.get("collation"),
    ⋮1188│+        }
1184⋮1189│ 
1185⋮1190│     def convert_empty_strings(self, value, expression, connection):
1186⋮1191│         if (not value) and isinstance(value, str):
