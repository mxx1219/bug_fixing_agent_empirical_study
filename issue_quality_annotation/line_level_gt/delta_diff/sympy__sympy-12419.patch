
sympy/matrices/expressions/matexpr.py

  2 ⋮  2 │ 
  3 ⋮  3 │ from functools import wraps
  4 ⋮  4 │ 
  5 ⋮    │-from sympy.core import S, Symbol, Tuple, Integer, Basic, Expr
    ⋮  5 │+from sympy.core import S, Symbol, Tuple, Integer, Basic, Expr, Eq
  6 ⋮  6 │ from sympy.core.decorators import call_highest_priority
  7 ⋮  7 │ from sympy.core.compatibility import range
  8 ⋮  8 │ from sympy.core.sympify import SympifyError, sympify
  9 ⋮  9 │ from sympy.functions import conjugate, adjoint
    ⋮ 10 │+from sympy.functions.special.tensor_functions import KroneckerDelta
 10 ⋮ 11 │ from sympy.matrices import ShapeError
 11 ⋮ 12 │ from sympy.simplify import simplify
 12 ⋮ 13 │ 

 375⋮ 376│         if self.args[0] != v.args[0]:
 376⋮ 377│             return S.Zero
 377⋮ 378│ 
 378⋮    │-        from sympy import KroneckerDelta
 379⋮ 379│         return KroneckerDelta(self.args[1], v.args[1])*KroneckerDelta(self.args[2], v.args[2])
 380⋮ 380│ 
 381⋮ 381│ 

 476⋮ 476│         return self
 477⋮ 477│ 
 478⋮ 478│     def _entry(self, i, j):
 479⋮    │-        if i == j:
    ⋮ 479│+        eq = Eq(i, j)
    ⋮ 480│+        if eq is S.true:
 480⋮ 481│             return S.One
 481⋮    │-        else:
    ⋮ 482│+        elif eq is S.false:
 482⋮ 483│             return S.Zero
    ⋮ 484│+        return KroneckerDelta(i, j)
 483⋮ 485│ 
 484⋮ 486│     def _eval_determinant(self):
 485⋮ 487│         return S.One
