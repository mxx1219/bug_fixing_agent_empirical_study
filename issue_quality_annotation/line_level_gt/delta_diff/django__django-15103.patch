
django/template/defaultfilters.py

 83 ⋮ 83 │ 
 84 ⋮ 84 │ 
 85 ⋮ 85 │ @register.filter(is_safe=True)
 86 ⋮    │-def json_script(value, element_id):
    ⋮ 86 │+def json_script(value, element_id=None):
 87 ⋮ 87 │     """
 88 ⋮ 88 │     Output value JSON-encoded, wrapped in a <script type="application/json">
 89 ⋮    │-    tag.
    ⋮ 89 │+    tag (with an optional id).
 90 ⋮ 90 │     """
 91 ⋮ 91 │     return _json_script(value, element_id)
 92 ⋮ 92 │ 

django/utils/html.py

 61 ⋮ 61 │ }
 62 ⋮ 62 │ 
 63 ⋮ 63 │ 
 64 ⋮    │-def json_script(value, element_id):
    ⋮ 64 │+def json_script(value, element_id=None):
 65 ⋮ 65 │     """
 66 ⋮ 66 │     Escape all the HTML/XML special characters with their unicode escapes, so
 67 ⋮ 67 │     value is safe to be output anywhere except for inside a tag attribute. Wrap

 69 ⋮ 69 │     """
 70 ⋮ 70 │     from django.core.serializers.json import DjangoJSONEncoder
 71 ⋮ 71 │     json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)
 72 ⋮    │-    return format_html(
 73 ⋮    │-        '<script id="{}" type="application/json">{}</script>',
 74 ⋮    │-        element_id, mark_safe(json_str)
 75 ⋮    │-    )
    ⋮ 72 │+    if element_id:
    ⋮ 73 │+        template = '<script id="{}" type="application/json">{}</script>'
    ⋮ 74 │+        args = (element_id, mark_safe(json_str))
    ⋮ 75 │+    else:
    ⋮ 76 │+        template = '<script type="application/json">{}</script>'
    ⋮ 77 │+        args = (mark_safe(json_str),)
    ⋮ 78 │+    return format_html(template, *args)
 76 ⋮ 79 │ 
 77 ⋮ 80 │ 
 78 ⋮ 81 │ def conditional_escape(text):
