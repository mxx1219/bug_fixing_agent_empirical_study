
sympy/matrices/matrices.py

  5 ⋮  5 │ from sympy.core.add import Add
  6 ⋮  6 │ from sympy.core.basic import Basic, Atom
  7 ⋮  7 │ from sympy.core.expr import Expr
    ⋮  8 │+from sympy.core.function import expand_mul
  8 ⋮  9 │ from sympy.core.power import Pow
  9 ⋮ 10 │ from sympy.core.symbol import (Symbol, Dummy, symbols,
 10 ⋮ 11 │     _uniquely_named_symbol)

 20 ⋮ 21 │ 
 21 ⋮ 22 │ from sympy.utilities.iterables import flatten, numbered_symbols
 22 ⋮ 23 │ from sympy.core.decorators import call_highest_priority
 23 ⋮    │-from sympy.core.compatibility import is_sequence, default_sort_key, range, \
 24 ⋮    │-    NotIterable
    ⋮ 24 │+from sympy.core.compatibility import (is_sequence, default_sort_key, range,
    ⋮ 25 │+    NotIterable)
 25 ⋮ 26 │ 
 26 ⋮ 27 │ 
 27 ⋮ 28 │ from types import FunctionType

 38 ⋮ 39 │         return None
 39 ⋮ 40 │ 
 40 ⋮ 41 │ 
    ⋮ 42 │+def _is_zero_after_expand_mul(x):
    ⋮ 43 │+    """Tests by expand_mul only, suitable for polynomials and rational
    ⋮ 44 │+    functions."""
    ⋮ 45 │+    return expand_mul(x) == 0
    ⋮ 46 │+
    ⋮ 47 │+
 41 ⋮ 48 │ class DeferredVector(Symbol, NotIterable):
 42 ⋮ 49 │     """A vector whose components are deferred (e.g. for use with lambdify)
 43 ⋮ 50 │ 

 173⋮ 180│         http://www.eecis.udel.edu/~saunders/papers/sffge/it5.ps.
 174⋮ 181│         """
 175⋮ 182│ 
 176⋮    │-        # XXX included as a workaround for issue #12362.  Should use `_find_reasonable_pivot` instead
 177⋮    │-        def _find_pivot(l):
 178⋮    │-            for pos,val in enumerate(l):
 179⋮    │-                if val:
 180⋮    │-                    return (pos, val, None, None)
 181⋮    │-            return (None, None, None, None)
 182⋮    │-
 183⋮    │-
 184⋮ 183│         # Recursively implemented Bareiss' algorithm as per Deanna Richelle Leggett's
 185⋮ 184│         # thesis http://www.math.usm.edu/perry/Research/Thesis_DRL.pdf
 186⋮ 185│         def bareiss(mat, cumm=1):

 190⋮ 189│                 return mat[0, 0]
 191⋮ 190│ 
 192⋮ 191│             # find a pivot and extract the remaining matrix
 193⋮    │-            # XXX should use `_find_reasonable_pivot`.  Blocked by issue #12362
 194⋮    │-            pivot_pos, pivot_val, _, _ = _find_pivot(mat[:, 0])
    ⋮ 192│+            # With the default iszerofunc, _find_reasonable_pivot slows down
    ⋮ 193│+            # the computation by the factor of 2.5 in one test.
    ⋮ 194│+            # Relevant issues: #10279 and #13877.
    ⋮ 195│+            pivot_pos, pivot_val, _, _ = _find_reasonable_pivot(mat[:, 0],
    ⋮ 196│+                                         iszerofunc=_is_zero_after_expand_mul)
 195⋮ 197│             if pivot_pos == None:
 196⋮ 198│                 return S.Zero
 197⋮ 199│ 

sympy/utilities/randtest.py

 13 ⋮ 13 │ from sympy.core.compatibility import is_sequence, as_int
 14 ⋮ 14 │ 
 15 ⋮ 15 │ 
 16 ⋮    │-def random_complex_number(a=2, b=-1, c=3, d=1, rational=False):
    ⋮ 16 │+def random_complex_number(a=2, b=-1, c=3, d=1, rational=False, tolerance=None):
 17 ⋮ 17 │     """
 18 ⋮ 18 │     Return a random complex number.
 19 ⋮ 19 │ 
 20 ⋮ 20 │     To reduce chance of hitting branch cuts or anything, we guarantee
 21 ⋮ 21 │     b <= Im z <= d, a <= Re z <= c
    ⋮ 22 │+
    ⋮ 23 │+    When rational is True, a rational approximation to a random number
    ⋮ 24 │+    is obtained within specified tolerance, if any.
 22 ⋮ 25 │     """
 23 ⋮ 26 │     A, B = uniform(a, c), uniform(b, d)
 24 ⋮ 27 │     if not rational:
 25 ⋮ 28 │         return A + I*B
 26 ⋮    │-    return nsimplify(A, rational=True) + I*nsimplify(B, rational=True)
    ⋮ 29 │+    return (nsimplify(A, rational=True, tolerance=tolerance) +
    ⋮ 30 │+        I*nsimplify(B, rational=True, tolerance=tolerance))
 27 ⋮ 31 │ 
 28 ⋮ 32 │ 
 29 ⋮ 33 │ def verify_numerically(f, g, z=None, tol=1.0e-6, a=2, b=-1, c=3, d=1):
